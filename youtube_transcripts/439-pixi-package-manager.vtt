WEBVTT

00:00:00.000 --> 00:00:04.500
- Wolf, Ruben, welcome to Talk Python To Me.


00:00:04.500 --> 00:00:07.320
- Hello. - Hello.


00:00:07.320 --> 00:00:08.560
- Thanks for having us. - Hello, hello.


00:00:08.560 --> 00:00:10.680
Yeah, it's great to have you here.


00:00:10.680 --> 00:00:14.200
We're going to dive into packaging once again.


00:00:14.200 --> 00:00:17.680
And we've talked about packaging a couple times


00:00:17.680 --> 00:00:18.560
over the last few months.


00:00:18.560 --> 00:00:20.760
It's a super interesting topic.


00:00:20.760 --> 00:00:25.760
And there are these times where it seems like


00:00:25.760 --> 00:00:28.920
there's a fixed way and everyone kind of agrees,


00:00:28.920 --> 00:00:30.880
like this is how you do things.


00:00:30.880 --> 00:00:33.160
For example, I think Flask and Django


00:00:33.160 --> 00:00:35.300
have kind of been web frameworks for a long time.


00:00:35.300 --> 00:00:37.720
Then all of a sudden, a thousand flowers bloom


00:00:37.720 --> 00:00:39.200
and there's a bunch of new ideas.


00:00:39.200 --> 00:00:43.000
In the web space, I think that was driven by async


00:00:43.000 --> 00:00:43.920
and the typing stuff.


00:00:43.920 --> 00:00:46.460
And a bunch of people said, well, let's try new things


00:00:46.460 --> 00:00:48.400
now that we have these new ideas.


00:00:48.400 --> 00:00:50.560
And the other frameworks were more stable,


00:00:50.560 --> 00:00:51.760
couldn't make those adjustments.


00:00:51.760 --> 00:00:54.280
And I think people are just,


00:00:54.280 --> 00:00:56.040
we're kind of at one of these explosion points


00:00:56.040 --> 00:00:59.880
of different ideas and different experiments in packaging.


00:00:59.880 --> 00:01:00.980
What do you all think?


00:01:00.980 --> 00:01:05.320
- Yeah, I think that's an interesting way to put it.


00:01:05.320 --> 00:01:08.240
I think we definitely see a lot of interest


00:01:08.240 --> 00:01:10.440
in package management these days


00:01:10.440 --> 00:01:12.720
and new ideas being explored.


00:01:12.720 --> 00:01:15.960
But I also think that we're definitely standing


00:01:15.960 --> 00:01:17.040
on the shoulders of giants,


00:01:17.040 --> 00:01:18.880
so kind of similar to what you just described


00:01:18.880 --> 00:01:20.480
with the web frameworks,


00:01:20.480 --> 00:01:23.480
where actually I think we are taking a lot of inspiration


00:01:23.480 --> 00:01:27.280
from multiple different ecosystems that are out there


00:01:27.280 --> 00:01:30.520
and try to kind of synthesize the best ideas.


00:01:30.520 --> 00:01:32.760
- Yeah, well. - Into our tools.


00:01:32.760 --> 00:01:34.840
- Yeah, you got some interesting ideas for sure.


00:01:34.840 --> 00:01:35.680
Ruben?


00:01:35.680 --> 00:01:39.120
- I cannot really add to that anymore.


00:01:39.120 --> 00:01:42.400
I'm standing on the shoulders of giants like, whoa.


00:01:42.400 --> 00:01:44.400
So. - Yeah, absolutely.


00:01:44.400 --> 00:01:45.800
- I think we'll go into that.


00:01:45.800 --> 00:01:47.360
- Yeah, we sure will.


00:01:47.360 --> 00:01:48.980
Now, before we get into the topics,


00:01:48.980 --> 00:01:50.400
let's just do a quick introduction


00:01:50.400 --> 00:01:51.480
for folks who don't know you.


00:01:51.600 --> 00:01:55.040
I feel like this is a really interesting coincidence


00:01:55.040 --> 00:01:58.000
'cause the very last previous show that I did


00:01:58.000 --> 00:02:00.720
was with Sylvan and Jeremy,


00:02:00.720 --> 00:02:02.440
a bunch of folks from QuantStack.


00:02:02.440 --> 00:02:05.960
And, you know, just out of coincidence,


00:02:05.960 --> 00:02:07.680
like I said, your colleagues, right?


00:02:07.680 --> 00:02:10.400
So Wolf, let's start with you, a little background on you.


00:02:10.400 --> 00:02:11.760
- Sure.


00:02:11.760 --> 00:02:14.800
Yeah, so I did work at QuantStack for quite a while.


00:02:14.800 --> 00:02:17.480
And it's also where my journey


00:02:17.480 --> 00:02:19.680
with package management began.


00:02:19.680 --> 00:02:22.640
But maybe just taking one more step back,


00:02:22.640 --> 00:02:26.960
I studied in Zurich and I actually graduated


00:02:26.960 --> 00:02:31.280
in robotics there with a master's degree.


00:02:31.280 --> 00:02:33.640
And yeah. - That's awesome.


00:02:33.640 --> 00:02:35.880
- I had some fun times.


00:02:35.880 --> 00:02:37.600
I was also working with Disney Research


00:02:37.600 --> 00:02:42.040
on like a little robot that was drawing images in the sand


00:02:42.040 --> 00:02:43.900
and these kind of fun things.


00:02:43.900 --> 00:02:47.240
But at QuantStack, we were doing a lot


00:02:47.240 --> 00:02:50.640
of scientific computing stuff.


00:02:50.640 --> 00:02:54.000
Initially trying to like reimplement NumPy in C++,


00:02:54.000 --> 00:02:56.080
which is a library called XTensor


00:02:56.080 --> 00:02:58.360
and always doing a lot of package management


00:02:58.360 --> 00:03:03.000
and mostly in the CondaForge and Conda ecosystem.


00:03:03.000 --> 00:03:06.000
And Conda at some point became really slow


00:03:06.000 --> 00:03:08.240
and CondaForge became really large.


00:03:08.240 --> 00:03:11.880
And that led me to kind of experiment with new things,


00:03:11.880 --> 00:03:13.760
which resulted in Mamba.


00:03:15.160 --> 00:03:18.600
And then I got really lucky and had the opportunity


00:03:18.600 --> 00:03:21.440
to create my own little startup


00:03:21.440 --> 00:03:24.080
around more of these package management ideas,


00:03:24.080 --> 00:03:27.080
which is the current company called Prefix.


00:03:27.080 --> 00:03:30.600
And we'll dive more into Pixie and all these new things


00:03:30.600 --> 00:03:32.440
that we're doing, I think, later on.


00:03:32.440 --> 00:03:34.840
- Yeah, that's a lot of interesting stuff.


00:03:34.840 --> 00:03:37.040
What language do you program a robot


00:03:37.040 --> 00:03:38.400
that writes in the sand in?


00:03:38.400 --> 00:03:41.960
- It's always a mix of Python and C++.


00:03:41.960 --> 00:03:45.520
So I think I stuck to that up until now.


00:03:45.520 --> 00:03:47.720
- Yeah, yeah, it sounds like it.


00:03:47.720 --> 00:03:49.480
Ruben, what's your story?


00:03:49.480 --> 00:03:50.320
Tell people a bit about yourself.


00:03:50.320 --> 00:03:53.360
- Yeah, so I also started in robotics.


00:03:53.360 --> 00:03:56.520
I did a mechatronics engineering degree.


00:03:56.520 --> 00:03:59.000
And while working in robotics,


00:03:59.000 --> 00:04:02.560
I started at my previous company, Smart Robotics.


00:04:02.560 --> 00:04:07.560
And there we were building the new modern AI-driven robots.


00:04:09.120 --> 00:04:12.800
So that also involves a lot of deep learning packages


00:04:12.800 --> 00:04:13.640
and stuff like that.


00:04:13.640 --> 00:04:15.160
And that is kind of how I got


00:04:15.160 --> 00:04:17.760
into these package management solutions.


00:04:17.760 --> 00:04:22.760
And we started using Conda to package our C++


00:04:22.760 --> 00:04:25.920
and our Python stuff, and to make it easy to use


00:04:25.920 --> 00:04:28.560
in these virtual environments,


00:04:28.560 --> 00:04:30.720
where we combine those packages.


00:04:30.720 --> 00:04:34.120
And it all was made easier by Mamba,


00:04:34.120 --> 00:04:35.760
which was built by Wolf.


00:04:35.760 --> 00:04:37.800
So that's how we got in touch.


00:04:37.800 --> 00:04:41.400
And later on, I moved to Wolf's company.


00:04:41.400 --> 00:04:43.720
So that's why I'm here now.


00:04:43.720 --> 00:04:44.680
- Excellent.


00:04:44.680 --> 00:04:47.640
So you're a prefix dev as well?


00:04:47.640 --> 00:04:48.480
- Yes.


00:04:48.480 --> 00:04:49.320
- Awesome.


00:04:49.320 --> 00:04:51.320
- I'm an expert dev there, yep.


00:04:51.320 --> 00:04:56.480
- Cool, well, I guess let's start


00:04:56.480 --> 00:05:00.080
with a little bit of maybe setting the stage.


00:05:00.080 --> 00:05:03.960
So you all talked about Conda and Conda Forge,


00:05:03.960 --> 00:05:06.360
and really relying on that for a while.


00:05:06.360 --> 00:05:09.560
And then wanting better performance,


00:05:09.560 --> 00:05:11.480
some other features we're gonna talk about as well.


00:05:11.480 --> 00:05:13.600
But give us a quick background


00:05:13.600 --> 00:05:16.280
for those maybe non-data scientists,


00:05:16.280 --> 00:05:18.200
or people who are not super into it.


00:05:18.200 --> 00:05:20.080
What is Conda, and what is Conda Forge,


00:05:20.080 --> 00:05:22.480
and the relationship of those things?


00:05:22.480 --> 00:05:23.320
Who wants to take that?


00:05:23.320 --> 00:05:24.160
- Yeah.


00:05:24.160 --> 00:05:30.040
So Conda is, generally speaking, a package manager.


00:05:30.040 --> 00:05:32.200
Like, that's all it is.


00:05:32.200 --> 00:05:36.240
It actually has nothing specific to AI


00:05:36.240 --> 00:05:38.600
and data science, et cetera.


00:05:38.600 --> 00:05:40.440
But most people associate it


00:05:40.440 --> 00:05:42.920
with Python and machine learning, let's say.


00:05:42.920 --> 00:05:47.160
And Conda's written in Python,


00:05:47.160 --> 00:05:50.440
and it's like, I don't know, 10 or 15 years old.


00:05:50.440 --> 00:05:55.080
And it kind of comes out of an era


00:05:55.080 --> 00:05:59.400
where there were no wheel files on PyPI,


00:05:59.400 --> 00:06:02.440
and people had to compile stuff on their own machines.


00:06:02.440 --> 00:06:04.000
- Right, you can't use this.


00:06:04.000 --> 00:06:05.760
Where's your Fortran compiler?


00:06:05.760 --> 00:06:07.120
Come on, you're like, what?


00:06:07.120 --> 00:06:08.320
What year is this again?


00:06:08.320 --> 00:06:12.240
- And you need your GCC, et cetera.


00:06:12.240 --> 00:06:15.280
So that's kind of when Conda was born.


00:06:15.280 --> 00:06:20.280
And I think it really was one of those early tools


00:06:20.280 --> 00:06:21.440
that tried something


00:06:21.440 --> 00:06:24.240
with binary package management cross-platform.


00:06:24.240 --> 00:06:27.640
So basically, Conda allowed you to install Python


00:06:27.640 --> 00:06:31.320
and a bunch of Python packages


00:06:31.320 --> 00:06:32.600
that needed compiled extensions,


00:06:32.600 --> 00:06:34.880
like NumPy, SciPy, et cetera.


00:06:34.880 --> 00:06:39.400
And it kind of comes out of this Travis Olyphant universe


00:06:39.400 --> 00:06:42.360
of scientific Python tools.


00:06:42.360 --> 00:06:44.840
- Yeah, he's made a huge impact, for sure.


00:06:44.840 --> 00:06:45.680
- Yeah.


00:06:45.680 --> 00:06:50.520
But for us, sort of the key feature


00:06:50.520 --> 00:06:52.640
is just that it's like a cross-platform


00:06:52.640 --> 00:06:53.800
generic package manager


00:06:53.800 --> 00:06:56.280
that you can actually use for any language.


00:06:56.280 --> 00:07:00.080
So you can also create Conda packages for R,


00:07:00.080 --> 00:07:03.720
and there are actually quite a few R packages


00:07:03.720 --> 00:07:05.440
on Conda for us, let's say.


00:07:05.440 --> 00:07:09.480
And you can also do Julia or Rust, et cetera.


00:07:09.480 --> 00:07:12.440
So there's a lot of possibility and potential.


00:07:12.440 --> 00:07:16.720
And I think it also kind of hits a sweet spot


00:07:16.720 --> 00:07:18.200
where Conda is really not


00:07:18.200 --> 00:07:20.160
a language-specific package manager.


00:07:20.160 --> 00:07:24.160
And it's at the same time cross-platform,


00:07:24.160 --> 00:07:25.480
because usually what you have


00:07:25.480 --> 00:07:28.520
is you have either like


00:07:28.520 --> 00:07:30.200
some sort of like Windows package manager


00:07:30.200 --> 00:07:32.440
or Linux package manager, like apt-get,


00:07:32.440 --> 00:07:34.800
or DNF on Fedora,


00:07:34.800 --> 00:07:37.520
or you have like a language-specific package manager,


00:07:37.520 --> 00:07:40.320
like pip or julia has package.jl,


00:07:40.320 --> 00:07:43.200
or I don't know, R has CRAN, et cetera.


00:07:43.200 --> 00:07:48.440
And so Conda kind of sits at the crossroads of those two,


00:07:48.440 --> 00:07:51.480
where it's not language-specific and also cross-platform.


00:07:51.480 --> 00:07:54.560
And I think that makes it like really interesting.


00:07:54.560 --> 00:07:58.280
And then maybe I can also talk a little bit


00:07:58.280 --> 00:07:59.120
about Conda Forge,


00:07:59.120 --> 00:08:02.080
because I think that's the other really impactful part


00:08:02.080 --> 00:08:04.080
about the Conda universe,


00:08:04.080 --> 00:08:08.360
where Conda Forge is really a group of,


00:08:08.360 --> 00:08:10.800
I think over 5,000 individual people


00:08:10.800 --> 00:08:15.800
that are building packages in GitHub repositories.


00:08:15.800 --> 00:08:18.000
And each of those repositories


00:08:18.000 --> 00:08:20.880
basically builds a recipe on a CI system


00:08:20.880 --> 00:08:24.440
that then kind of results in the artifact,


00:08:24.440 --> 00:08:26.960
which is a Conda package that you can install.


00:08:26.960 --> 00:08:29.800
And so all of the packages on Conda Forge


00:08:29.800 --> 00:08:32.440
are built on CI systems.


00:08:32.440 --> 00:08:36.400
And most of them are cross-platform available.


00:08:36.400 --> 00:08:39.960
So you have them for Windows, macOS, and Linux.


00:08:39.960 --> 00:08:42.920
And those packages are all the low-level stuff.


00:08:42.920 --> 00:08:47.080
Usually Conda starts at the glibc level, let's say.


00:08:47.080 --> 00:08:49.040
So glibc is that fundamental library


00:08:49.040 --> 00:08:53.080
that we need to get from the operating system.


00:08:53.080 --> 00:08:55.120
And on Windows and macOS,


00:08:55.120 --> 00:08:57.600
there's an SDK and other DLLs


00:08:57.600 --> 00:08:59.360
that we need from the operating system.


00:08:59.360 --> 00:09:04.040
But everything above is managed by Conda or Mamba or Pixi.


00:09:04.040 --> 00:09:06.840
So all of these tools work


00:09:06.840 --> 00:09:09.000
on the base of the same packages.


00:09:09.000 --> 00:09:12.480
And that starts at bzip2 or zlib,


00:09:12.480 --> 00:09:15.400
like these low-level compression libraries,


00:09:15.400 --> 00:09:19.240
OpenSSL, and then up to Python.


00:09:19.240 --> 00:09:21.440
And then you can also get Qt,


00:09:21.440 --> 00:09:23.920
which is a graphical user interface library,


00:09:23.920 --> 00:09:25.360
which is written in C++.


00:09:25.360 --> 00:09:29.400
And applications that are building on top of Qt,


00:09:29.400 --> 00:09:32.640
so like, for example, physics simulation engines


00:09:32.640 --> 00:09:33.480
and stuff like this.


00:09:33.480 --> 00:09:38.480
So, and you also get QDA and lots of libraries like this.


00:09:38.480 --> 00:09:41.080
And it's, all is not bound


00:09:41.080 --> 00:09:44.720
to like a specific operating system in that sense.


00:09:44.720 --> 00:09:48.400
And that makes it pretty, pretty nice.


00:09:48.400 --> 00:09:49.680
For example, also in CI,


00:09:49.680 --> 00:09:52.120
when you want to test your own software and stuff like this,


00:09:52.120 --> 00:09:53.280
you can use the same commands


00:09:53.280 --> 00:09:55.160
to set up basically the same packages


00:09:55.160 --> 00:09:58.520
across different, yeah, platforms.


00:09:58.520 --> 00:09:59.800
- Yeah, nice.


00:09:59.800 --> 00:10:04.040
And so kind of like what Wheels did for pip and pypi,


00:10:04.040 --> 00:10:06.920
Conda was way ahead of that game, right?


00:10:06.920 --> 00:10:08.320
But with a harder challenge


00:10:08.320 --> 00:10:11.840
because it wasn't just Python packages,


00:10:11.840 --> 00:10:13.680
it was all these different ones, right?


00:10:13.680 --> 00:10:14.920
- Yeah.


00:10:14.920 --> 00:10:16.360
Yeah, including Python itself.


00:10:16.360 --> 00:10:17.920
So that's also one of the things


00:10:17.920 --> 00:10:20.120
that people sometimes maybe not realize,


00:10:20.120 --> 00:10:22.800
but Python itself is actually properly packaged


00:10:22.800 --> 00:10:27.800
in Conda for us and installable via Conda or Mamba or Pixie.


00:10:27.800 --> 00:10:29.480
- Mm-hmm, excellent.


00:10:29.480 --> 00:10:33.160
Ruben, any thing you want to add to that


00:10:33.160 --> 00:10:36.800
before we start talking about what you all are creating?


00:10:36.800 --> 00:10:39.000
- Yeah, so from my history,


00:10:39.000 --> 00:10:42.120
it's like this multi-platform stuff


00:10:42.120 --> 00:10:43.560
is left used in robotics


00:10:43.560 --> 00:10:47.480
because a lot of the stuff is still running in Linux,


00:10:47.480 --> 00:10:51.040
but it moved it from the ability to run it only on Ubuntu


00:10:51.040 --> 00:10:53.400
to, yeah, any version you want.


00:10:53.400 --> 00:10:57.960
And you could install any version of the robotic software


00:10:57.960 --> 00:11:01.360
you're running on like any version of Ubuntu.


00:11:01.360 --> 00:11:03.880
So where we were locked, not just to Linux,


00:11:03.880 --> 00:11:06.320
but locked to a distribution of Linux,


00:11:06.320 --> 00:11:08.720
we were now like completely unbound


00:11:08.720 --> 00:11:11.960
and the developers can set their own environments,


00:11:11.960 --> 00:11:15.600
which is just really powerful for the user itself.


00:11:15.600 --> 00:11:19.360
And that brought it back into our company


00:11:19.360 --> 00:11:20.760
in a much better way.


00:11:21.240 --> 00:11:23.160
- Yeah, that's excellent.


00:11:23.160 --> 00:11:25.600
I'm always blown away at how much traffic


00:11:25.600 --> 00:11:28.040
these package managers have,


00:11:28.040 --> 00:11:31.360
how much bandwidth they use and things like that.


00:11:31.360 --> 00:11:34.120
Who's hosting Conda Forge


00:11:34.120 --> 00:11:37.840
and where you get that stuff from?


00:11:37.840 --> 00:11:39.960
- So currently, Conda Forge


00:11:39.960 --> 00:11:42.160
is entirely hosted by anaconda.org.


00:11:42.160 --> 00:11:47.120
We do have a couple of mirrors available,


00:11:47.120 --> 00:11:48.880
but they are not really used.


00:11:48.880 --> 00:11:51.720
But one of the more exciting mirrors that we have


00:11:51.720 --> 00:11:53.600
is on GitHub itself.


00:11:53.600 --> 00:11:55.760
GitHub has this GitHub packages feature


00:11:55.760 --> 00:11:58.720
and we are using an OCI registry


00:11:58.720 --> 00:12:02.760
where you would usually put your like Docker containers


00:12:02.760 --> 00:12:04.400
and stuff like that.


00:12:04.400 --> 00:12:08.880
We upload all the Conda packages there just as a backup.


00:12:08.880 --> 00:12:11.080
And we're planning to make it usable as well.


00:12:11.080 --> 00:12:13.600
So that would be nice for like your own GitHub actions


00:12:13.600 --> 00:12:15.680
and stuff because they could just like take the package


00:12:15.680 --> 00:12:17.960
from sort of GitHub internal.


00:12:17.960 --> 00:12:21.800
- Right, just write down the server rack in the data center.


00:12:21.800 --> 00:12:22.640
- Yeah, exactly.


00:12:22.640 --> 00:12:25.560
- Keep it local.


00:12:25.560 --> 00:12:27.040
It's always good to be local.


00:12:27.040 --> 00:12:28.280
- Yep.


00:12:28.280 --> 00:12:29.480
- Okay, cool.


00:12:29.480 --> 00:12:34.360
So let's, I wanna focus mostly on Pixie for our conversation


00:12:34.360 --> 00:12:37.120
because I think that's got a lot of excitement.


00:12:37.120 --> 00:12:39.360
Maybe we'll get some time to talk about Mamba


00:12:39.360 --> 00:12:41.240
and other things as well.


00:12:41.240 --> 00:12:46.240
But yeah, you all wrote this interesting announcement


00:12:46.280 --> 00:12:49.280
and entitled, "Let's Stop Dependency Hell,"


00:12:49.280 --> 00:12:52.120
talking about Pixie here.


00:12:52.120 --> 00:12:54.880
And so I think we can just sort of talk through


00:12:54.880 --> 00:12:56.160
some of the ideas you laid out there


00:12:56.160 --> 00:12:59.960
and that'll give people a good idea of what this is all about.


00:12:59.960 --> 00:13:01.360
- Yeah, let's do it.


00:13:01.360 --> 00:13:02.640
- Yeah.


00:13:02.640 --> 00:13:05.000
So first of all, let's start with some of the problems


00:13:05.000 --> 00:13:06.600
you're trying to solve here.


00:13:06.600 --> 00:13:10.520
So say we've all experienced issues with reproducibility


00:13:10.520 --> 00:13:12.440
and dependency management.


00:13:12.440 --> 00:13:15.520
I will tell you just yesterday,


00:13:15.520 --> 00:13:18.120
and if it was later in the day for me,


00:13:18.120 --> 00:13:20.160
it would probably be today,


00:13:20.160 --> 00:13:24.080
I'm running into a problem with my courses website


00:13:24.080 --> 00:13:27.280
where I try to install both the developer dependencies


00:13:27.280 --> 00:13:28.960
and the production dependencies.


00:13:28.960 --> 00:13:31.320
And it's like, this one requires


00:13:31.320 --> 00:13:32.640
greater than this dependency,


00:13:32.640 --> 00:13:34.520
and this one requires less than that dependency.


00:13:34.520 --> 00:13:35.600
You can't install it.


00:13:35.600 --> 00:13:39.280
I'm like, well, how am I supposed to do this?


00:13:39.280 --> 00:13:41.680
I'd rather have it shaky than impossible.


00:13:41.680 --> 00:13:46.520
So, you know, it's dependency challenges


00:13:46.520 --> 00:13:48.680
are all too present for me.


00:13:48.680 --> 00:13:53.040
But yeah, let's maybe you can lay out some of the ideas,


00:13:53.040 --> 00:13:54.440
like what you had in mind when you're talking


00:13:54.440 --> 00:13:57.800
about reproducibility and challenges here.


00:13:57.800 --> 00:14:00.040
- Yeah, I think you're not alone, first of all.


00:14:00.040 --> 00:14:03.680
So a lot of people have these kind of problems,


00:14:03.680 --> 00:14:07.640
and it's also not only in the Python world, let's say,


00:14:07.640 --> 00:14:10.040
but I think it's maybe a bit more pronounced


00:14:10.040 --> 00:14:10.880
in the Python world,


00:14:10.880 --> 00:14:12.280
because there are so many packages


00:14:12.280 --> 00:14:15.440
and the way that package management in the Python world works.


00:14:15.440 --> 00:14:18.080
- Yeah, I feel like we can always look over


00:14:18.080 --> 00:14:19.040
at the JavaScript.


00:14:19.040 --> 00:14:20.200
People feel a little bit better,


00:14:20.200 --> 00:14:21.960
but it's still a challenge for us.


00:14:21.960 --> 00:14:24.120
- That's true, yeah.


00:14:24.120 --> 00:14:31.240
So, well, we are, with Pixie, just to take one step back.


00:14:31.240 --> 00:14:35.320
So we kind of started to, again,


00:14:35.320 --> 00:14:39.640
rewrite the entirety of how you manage conda packages.


00:14:40.240 --> 00:14:45.240
With Pixie or with the lower level tools


00:14:45.240 --> 00:14:47.440
that we're using in Pixie, which are called,


00:14:47.440 --> 00:14:48.840
it's like a set of crates


00:14:48.840 --> 00:14:51.600
that is under the Redlar repository.


00:14:51.600 --> 00:14:56.360
And those are like, I don't know, eight or nine crates


00:14:56.360 --> 00:14:59.600
that basically do everything from like fetching the package,


00:14:59.600 --> 00:15:02.320
resolving the versions that you want to have,


00:15:02.320 --> 00:15:04.320
reading the metadata from the packages


00:15:04.320 --> 00:15:07.040
and linking it into the virtual environment,


00:15:07.040 --> 00:15:08.960
because we're creating these virtual environments


00:15:08.960 --> 00:15:11.760
on the hard drive and we have a central cache


00:15:11.760 --> 00:15:12.600
and things like this.


00:15:12.600 --> 00:15:14.480
And so Redlar is kind of the low level tools


00:15:14.480 --> 00:15:15.800
that take care of all of this.


00:15:15.800 --> 00:15:19.000
And it's written more or less from scratch in Rust.


00:15:19.000 --> 00:15:21.760
I mean, obviously we're reusing a lot of the nice things


00:15:21.760 --> 00:15:23.360
that we found in the Rust ecosystem.


00:15:23.360 --> 00:15:25.800
So there are many very useful crates,


00:15:25.800 --> 00:15:31.720
but yeah, basically that's sort of the bottom line thing


00:15:31.720 --> 00:15:32.640
that we're doing.


00:15:32.640 --> 00:15:35.440
And what's also nice about it


00:15:35.440 --> 00:15:38.000
is that we are spinning off multiple things


00:15:38.000 --> 00:15:39.200
from the same set of crates.


00:15:39.200 --> 00:15:40.640
So it's not only Pixie,


00:15:40.640 --> 00:15:42.320
there's also one thing called Redlar build,


00:15:42.320 --> 00:15:44.600
which is actually building the conda packages.


00:15:44.600 --> 00:15:45.560
And there is another,


00:15:45.560 --> 00:15:47.640
and then we have the backend of our website,


00:15:47.640 --> 00:15:49.920
prefix.dev, which is also written in Rust


00:15:49.920 --> 00:15:51.520
and also uses Redlar underneath.


00:15:51.520 --> 00:15:54.240
So that's really nice for us.


00:15:54.240 --> 00:15:56.000
- So maybe if I was,


00:15:56.000 --> 00:15:57.960
if I wanted to stick with say conda,


00:15:57.960 --> 00:16:01.280
could I still use Redlar build


00:16:01.280 --> 00:16:04.400
and then somehow upload that to conda forge


00:16:04.400 --> 00:16:05.280
something along those lines?


00:16:05.280 --> 00:16:06.320
- Yeah. - Okay.


00:16:06.320 --> 00:16:07.840
- You can totally,


00:16:07.840 --> 00:16:12.720
that's kind of the baseline sort of commonality


00:16:12.720 --> 00:16:13.680
between all of these tools


00:16:13.680 --> 00:16:16.400
is that we are sharing the same sort of conda packages


00:16:16.400 --> 00:16:17.400
and the same metadata.


00:16:17.400 --> 00:16:20.000
And like, yeah,


00:16:20.000 --> 00:16:23.280
we definitely want to be 100% compatible package-wise


00:16:23.280 --> 00:16:24.280
with conda for now.


00:16:24.280 --> 00:16:26.560
- Excellent.


00:16:26.560 --> 00:16:28.120
- We might have features later on,


00:16:28.120 --> 00:16:31.360
but we wanna go through,


00:16:31.360 --> 00:16:33.440
like conda as a project has also


00:16:33.440 --> 00:16:35.200
become much more community oriented


00:16:35.200 --> 00:16:36.320
and there's like a process


00:16:36.320 --> 00:16:38.200
called conda enhancement proposals.


00:16:38.200 --> 00:16:41.280
And we have already written a few of those.


00:16:41.280 --> 00:16:42.840
So there are many ideas,


00:16:42.840 --> 00:16:44.920
but we can talk about that later.


00:16:44.920 --> 00:16:47.000
- Yeah, trying to improve the overall system


00:16:47.000 --> 00:16:48.480
instead of overthrow it.


00:16:48.480 --> 00:16:49.320
- Yes, yes.


00:16:49.320 --> 00:16:53.600
Yeah, like we would love to like improve the entirety


00:16:53.600 --> 00:16:56.760
of like conda packages, conda forge and all of this.


00:16:56.760 --> 00:16:58.440
Like that's our main dream.


00:16:58.440 --> 00:17:04.960
But yeah, so,


00:17:04.960 --> 00:17:07.640
and then with some of the low level tools


00:17:07.640 --> 00:17:08.520
in Redline with Pixi,


00:17:08.520 --> 00:17:10.120
we're kind of combining a bunch of tools


00:17:10.120 --> 00:17:11.720
that already existed.


00:17:11.720 --> 00:17:14.600
And one thing essential for reproducibility


00:17:14.600 --> 00:17:16.400
is that you have log files.


00:17:16.400 --> 00:17:18.600
So at the point where you are sort of resolving


00:17:18.600 --> 00:17:21.160
your dependencies,


00:17:21.160 --> 00:17:23.000
we are also writing them into a log file


00:17:23.000 --> 00:17:25.320
and that's like something known from poetry,


00:17:25.320 --> 00:17:29.360
from NPM, Yarn, Cargo also has it.


00:17:29.360 --> 00:17:31.320
And there's also a conda project


00:17:31.320 --> 00:17:32.800
that's called conda log


00:17:33.720 --> 00:17:34.920
that writes log files.


00:17:34.920 --> 00:17:37.320
And so we have adopted the same format


00:17:37.320 --> 00:17:38.400
that conda log uses,


00:17:38.400 --> 00:17:40.920
which is a YAML based log file format


00:17:40.920 --> 00:17:43.160
and implemented in Redline


00:17:43.160 --> 00:17:45.480
and we are exposing it and using it in Pixi.


00:17:45.480 --> 00:17:48.640
So anytime you like add a new dependency to your project,


00:17:48.640 --> 00:17:50.640
we write it in a log file


00:17:50.640 --> 00:17:53.880
and we make sure that like,


00:17:53.880 --> 00:17:57.760
you can install the same packages,


00:17:57.760 --> 00:17:58.720
the same set of packages,


00:17:58.720 --> 00:18:01.640
the same versions and SHA hashes


00:18:01.640 --> 00:18:03.760
in like the future.


00:18:03.760 --> 00:18:06.480
And the other part about reproducibility


00:18:06.480 --> 00:18:08.320
and that's more on the repository side


00:18:08.320 --> 00:18:11.560
is that conda forge never deletes old packages.


00:18:11.560 --> 00:18:13.920
So that's similar to PyPI,


00:18:13.920 --> 00:18:14.960
but not really this,


00:18:14.960 --> 00:18:18.800
like it's different in a lot of like Linux distributions,


00:18:18.800 --> 00:18:20.440
but with PyPI,


00:18:20.440 --> 00:18:21.560
it's also the case that,


00:18:21.560 --> 00:18:24.320
you know, old versions are just kept around.


00:18:24.320 --> 00:18:28.160
- Do you ever worry that that might not be sustainable?


00:18:28.160 --> 00:18:31.040
Like it's fine now,


00:18:31.040 --> 00:18:32.360
I mean, 20 years of like,


00:18:32.360 --> 00:18:35.240
we cannot pay for the thing from 20 years.


00:18:35.240 --> 00:18:38.840
Like it's, we just can't get enough donations


00:18:38.840 --> 00:18:41.480
to support Flask 0.1.


00:18:41.480 --> 00:18:44.280
We just can't, it's out.


00:18:44.280 --> 00:18:46.120
- I mean, sure.


00:18:46.120 --> 00:18:47.760
Like that's the problem of the person


00:18:47.760 --> 00:18:50.440
that uses Flask 0.1, right?


00:18:50.440 --> 00:18:52.440
That's not the problem of the repository.


00:18:52.440 --> 00:18:54.560
I think we just make sure that,


00:18:54.560 --> 00:18:55.960
you could still run it


00:18:55.960 --> 00:18:58.000
and you should probably sandbox it like crazy


00:18:58.000 --> 00:19:01.360
so that there are no like zero days


00:19:01.360 --> 00:19:03.040
that could affect your system.


00:19:03.040 --> 00:19:05.440
- Well, also you do have some things


00:19:05.440 --> 00:19:10.440
that are like self-hosted conda capabilities


00:19:10.440 --> 00:19:12.320
that maybe we'll get a chance to talk about.


00:19:12.320 --> 00:19:16.920
Like theoretically you could download these


00:19:16.920 --> 00:19:21.560
and save as a company or an organization or a researcher,


00:19:21.560 --> 00:19:24.720
you could get the ones that actually count for you, right?


00:19:24.720 --> 00:19:25.760
- Yeah.


00:19:25.760 --> 00:19:27.800
Like, I mean, only have a subset of the packages


00:19:27.800 --> 00:19:28.640
that you need.


00:19:28.640 --> 00:19:30.520
- Yeah, say I'm using 50 packages


00:19:30.520 --> 00:19:32.480
with the transitive closure of everything I'm using.


00:19:32.480 --> 00:19:35.000
And so I'm just gonna make sure I have every version


00:19:35.000 --> 00:19:40.000
of those on Dropbox or on a hard drive I put away somewhere.


00:19:40.000 --> 00:19:41.720
Yeah.


00:19:41.720 --> 00:19:42.800
- It's actually pretty funny


00:19:42.800 --> 00:19:45.280
because what you create on your local system


00:19:45.280 --> 00:19:48.080
is a cache of all the packages that you ever used.


00:19:48.080 --> 00:19:50.960
And you could activate that cache as a channel,


00:19:50.960 --> 00:19:52.320
like what CondaForge is,


00:19:52.320 --> 00:19:53.440
you could make your own channel


00:19:53.440 --> 00:19:55.600
of all your packages locally.


00:19:55.600 --> 00:19:58.640
This is something we used when internet went down


00:19:58.640 --> 00:20:01.240
in our company and we still needed to share packages


00:20:01.240 --> 00:20:02.080
with each other.


00:20:02.080 --> 00:20:03.720
We needed to make our environments


00:20:03.720 --> 00:20:06.680
and just some people would spin up their own channel


00:20:06.680 --> 00:20:08.040
and you could use it from there.


00:20:08.040 --> 00:20:08.880
It's just a different.


00:20:08.880 --> 00:20:09.720
- Oh, awesome.


00:20:09.720 --> 00:20:10.720
Yeah, yeah, that's awesome.


00:20:10.720 --> 00:20:15.720
Cool, I derailed your,


00:20:15.720 --> 00:20:19.120
there we go.


00:20:19.120 --> 00:20:22.040
- No, but yeah, I think like log files


00:20:22.040 --> 00:20:24.960
are the basis for reproducibility.


00:20:24.960 --> 00:20:28.360
And then the fact that packages are never deleted.


00:20:28.360 --> 00:20:35.000
And I think that's something that like log files


00:20:35.000 --> 00:20:40.080
make it look a little bit like a Docker container sort of,


00:20:40.080 --> 00:20:43.760
because you know exactly what's in your software environment.


00:20:43.760 --> 00:20:45.440
We don't control the outside


00:20:45.440 --> 00:20:47.640
and we don't do sandboxing as of now,


00:20:47.640 --> 00:20:51.600
but that's kind of the way we think about log files.


00:20:51.600 --> 00:20:54.120
And it just makes it very convenient


00:20:54.120 --> 00:20:57.080
also to ship basically that log file


00:20:57.080 --> 00:20:59.960
plus the Pixie Toml and stuff to your coworker


00:20:59.960 --> 00:21:01.400
and they can just run it.


00:21:01.400 --> 00:21:05.720
And we also resolve for multiple operating systems


00:21:05.720 --> 00:21:07.440
at the same time.


00:21:07.440 --> 00:21:10.400
So you can say, you can specify in your Pixie Toml


00:21:10.400 --> 00:21:12.960
if you want Linux, macOS and Windows,


00:21:12.960 --> 00:21:15.520
and we resolve everything at the same time


00:21:15.520 --> 00:21:18.680
in parallel with async Rust code and stuff like this.


00:21:18.680 --> 00:21:20.320
So it's pretty fast and nice.


00:21:20.320 --> 00:21:23.560
And yeah, the idea is that you can send it to your coworker.


00:21:23.560 --> 00:21:25.400
They can just do a Pixie run start,


00:21:25.400 --> 00:21:27.720
which would just give them everything they need


00:21:27.720 --> 00:21:29.800
and have them up and going.


00:21:29.800 --> 00:21:32.360
- Yeah, really cool.


00:21:32.360 --> 00:21:35.720
So in your announcement for Pixie,


00:21:35.720 --> 00:21:38.200
one of the things you said is you're looking


00:21:38.200 --> 00:21:41.840
for the convenience of modern package managers,


00:21:41.840 --> 00:21:42.960
such as Cargo.


00:21:42.960 --> 00:21:49.680
What's different than say pip and PyPI versus Cargo?


00:21:49.680 --> 00:21:52.960
Like when you say that, what are these new features?


00:21:52.960 --> 00:21:55.080
Like I wish we had this already.


00:21:55.080 --> 00:21:56.680
We don't, so I'm gonna build it.


00:21:56.680 --> 00:21:58.560
- So,


00:21:58.560 --> 00:22:08.440
I think one thing that's just really nice with Cargo is,


00:22:08.440 --> 00:22:10.920
and that also attracts so many contributors to Rust project,


00:22:10.920 --> 00:22:13.560
at least, like that's the way I feel about it,


00:22:13.560 --> 00:22:18.400
is that it's so easy to just say Cargo run whatever,


00:22:18.400 --> 00:22:20.440
and it's most of the time works


00:22:20.440 --> 00:22:22.720
and you just do Cargo build and like it builds


00:22:22.720 --> 00:22:27.720
and that's the experience that we want to recreate with Pixie


00:22:27.720 --> 00:22:30.320
and Cargo also comes with log files


00:22:30.320 --> 00:22:35.000
and Cargo just does this pretty nicely.


00:22:35.000 --> 00:22:36.360
I mean, there are some peculiarities


00:22:36.360 --> 00:22:41.360
about how Rust builds packages or things about dependencies


00:22:41.360 --> 00:22:43.440
where the result is pretty different,


00:22:43.440 --> 00:22:46.360
let's say from like Python ecosystem and stuff like this,


00:22:46.360 --> 00:22:48.840
but the baseline experience is definitely


00:22:48.840 --> 00:22:50.280
what we're also striving for.


00:22:51.480 --> 00:22:53.760
And part of the problem is maybe also


00:22:53.760 --> 00:22:55.640
that pip is not managing Python.


00:22:55.640 --> 00:22:56.800
So you always have that,


00:22:56.800 --> 00:22:58.280
a little bit of a chicken and egg problem


00:22:58.280 --> 00:23:01.360
where you need to get Python first to be able to run Pip.


00:23:01.360 --> 00:23:04.040
And with Pixie, you don't have that problem


00:23:04.040 --> 00:23:05.360
because we also manage Python.


00:23:05.360 --> 00:23:07.240
So you can specify in your Pixie terminal


00:23:07.240 --> 00:23:09.240
what version of Python you want.


00:23:09.240 --> 00:23:12.280
You get it on Windows, macOS and Linux in the same way.


00:23:12.280 --> 00:23:14.560
And everything is just one command


00:23:14.560 --> 00:23:17.720
and everything is also locked in your log file, et cetera.


00:23:17.720 --> 00:23:20.240
So that's kind of, yeah,


00:23:20.240 --> 00:23:23.640
we just control a bit more than Pip.


00:23:23.640 --> 00:23:28.200
And I think that's what's giving us some power.


00:23:28.200 --> 00:23:30.920
And then pip also, like as far as I'm aware,


00:23:30.920 --> 00:23:32.640
and we recently had discussions


00:23:32.640 --> 00:23:37.640
with Python package management developers.


00:23:37.640 --> 00:23:40.720
They haven't come up with a log file format


00:23:40.720 --> 00:23:42.200
that works for everyone yet.


00:23:42.200 --> 00:23:44.360
So Poetry has their own implementation


00:23:44.360 --> 00:23:46.200
and a bunch of other tools


00:23:46.200 --> 00:23:47.360
maybe have their own implementations.


00:23:47.360 --> 00:23:50.480
- Right, there's the pip log from Pipenv and others, yeah.


00:23:50.480 --> 00:23:52.600
- Right, yeah.


00:23:52.600 --> 00:23:56.880
But yeah, so we're also kind of working on that.


00:23:56.880 --> 00:23:57.720
I don't know if you saw that,


00:23:57.720 --> 00:24:00.840
but we just announced another tool


00:24:00.840 --> 00:24:01.840
that's also low level,


00:24:01.840 --> 00:24:03.120
sort of on the same level as Red Lab,


00:24:03.120 --> 00:24:04.400
but it's called RIP


00:24:04.400 --> 00:24:08.720
and it deals with Python resolving and wheel files.


00:24:08.720 --> 00:24:12.360
And so we want to kind of cross over those two worlds


00:24:12.360 --> 00:24:14.680
where we resolve the Connor packages first


00:24:14.680 --> 00:24:17.840
and we resolve the Python packages after,


00:24:17.840 --> 00:24:20.520
and we stick everything into the same log file


00:24:20.520 --> 00:24:23.120
that will for now be similar to the,


00:24:23.120 --> 00:24:26.080
yeah, basically based on the Conda log format,


00:24:26.080 --> 00:24:27.200
which is a YAML file.


00:24:27.200 --> 00:24:29.920
- Interesting, so this RIP,


00:24:29.920 --> 00:24:30.760
I'm familiar with that,


00:24:30.760 --> 00:24:33.720
I didn't necessarily in my mind tie it back to Pixie,


00:24:33.720 --> 00:24:36.800
but would that allow you to,


00:24:36.800 --> 00:24:38.080
could you mix and match?


00:24:38.080 --> 00:24:40.200
Like some stuff comes off Conda forwards


00:24:40.200 --> 00:24:42.240
and some stuff comes off of PyPI,


00:24:42.240 --> 00:24:44.880
but you express that in your dependency file?


00:24:44.880 --> 00:24:48.720
- Yeah, like there are parts of the semantics


00:24:48.720 --> 00:24:51.360
that aren't yet figured out, let's say,


00:24:51.360 --> 00:24:53.960
but the idea is definitely that you can install Python


00:24:53.960 --> 00:24:55.680
and NumPy, for example, from Conda forwards,


00:24:55.680 --> 00:24:59.360
and then, I don't know, scikit-learn from PyPI.


00:24:59.360 --> 00:25:02.720
Like that's maybe not the example of how you would use it,


00:25:02.720 --> 00:25:03.960
but-- - Yeah, of course, right.


00:25:03.960 --> 00:25:06.480
Maybe you do one of the web frameworks, right?


00:25:06.480 --> 00:25:11.480
Like FastAPI versus some of the scientific stuff from Conda.


00:25:11.920 --> 00:25:14.280
- Yeah, I find at least the official Conda stuff,


00:25:14.280 --> 00:25:18.760
sometimes certain frameworks are a little bit behind


00:25:18.760 --> 00:25:22.340
and there are situations where having the latest one


00:25:22.340 --> 00:25:25.120
within an hour matters a lot.


00:25:25.120 --> 00:25:27.500
You know, for example, hey, it turns out,


00:25:27.500 --> 00:25:28.560
theoretically, this is not real,


00:25:28.560 --> 00:25:31.760
it turns out that, say, Flask has a super bad


00:25:31.760 --> 00:25:33.400
remote code execution problem.


00:25:33.400 --> 00:25:37.700
We just found out that if you send a cat emoji


00:25:37.700 --> 00:25:39.560
as part of the URL, it's all over.


00:25:39.560 --> 00:25:41.120
So patch it now, right?


00:25:41.120 --> 00:25:43.040
Like you don't wanna wait for that


00:25:43.040 --> 00:25:44.640
to like slowly get through some,


00:25:44.640 --> 00:25:45.720
you need that now, right?


00:25:45.720 --> 00:25:50.160
In PyPI, I find it's kind of the tip


00:25:50.160 --> 00:25:52.120
of the latest in that regard.


00:25:52.120 --> 00:25:57.120
- Yeah, so I do agree to some extent.


00:25:57.120 --> 00:26:00.480
So it's like we also found that a lot of,


00:26:00.480 --> 00:26:05.840
there are these noarch packages, like pure Python packages,


00:26:05.840 --> 00:26:10.280
and I think, and there's just way more packages on PyPI,


00:26:10.280 --> 00:26:13.040
and the turn of managing that on Conda Forge is a bit high.


00:26:13.040 --> 00:26:16.080
So that's also like, we have lots of reasons,


00:26:16.080 --> 00:26:17.240
and also in real world examples,


00:26:17.240 --> 00:26:20.840
we often find people mixing PyPI, pip, and Conda.


00:26:20.840 --> 00:26:22.880
So that's why we're thinking like,


00:26:22.880 --> 00:26:26.240
we need proper sort of support for PyPI in our tool


00:26:26.240 --> 00:26:27.880
to make it really nice for Python developers.


00:26:27.880 --> 00:26:30.280
- Yeah, it would take it to another level for sure,


00:26:30.280 --> 00:26:32.200
and it would certainly make it stand out


00:26:32.200 --> 00:26:36.280
from what Conda does or what pip does, honestly.


00:26:36.280 --> 00:26:39.160
- Yeah, and like Conda, for example,


00:26:39.160 --> 00:26:41.800
there is a way to kind of like add some Python dependency


00:26:41.800 --> 00:26:45.080
or pip dependencies, but it's really just invoking pip


00:26:45.080 --> 00:26:46.160
as like a sub process,


00:26:46.160 --> 00:26:47.800
and then installing some additional stuff


00:26:47.800 --> 00:26:49.080
into your environment.


00:26:49.080 --> 00:26:51.600
And it's not really nice, not really tightly integrated,


00:26:51.600 --> 00:26:54.400
and so we actually kind of did the work


00:26:54.400 --> 00:26:59.400
and wrote a resolver in Rust, so SAT solver,


00:26:59.400 --> 00:27:04.240
and we've just extended it to also deal with Python


00:27:04.240 --> 00:27:08.000
or PyPI metadata, which is kind of what RIP is.


00:27:09.000 --> 00:27:11.240
- Yeah, so that's going to be very interesting


00:27:11.240 --> 00:27:14.240
to figure out how to integrate those things


00:27:14.240 --> 00:27:16.640
and like really make them work nicely together.


00:27:16.640 --> 00:27:20.080
- Yeah, I wanna talk about the ergonomics using Pixie,


00:27:20.080 --> 00:27:22.800
but first, you know, baby Ruben,


00:27:22.800 --> 00:27:23.800
you could address this first,


00:27:23.800 --> 00:27:27.320
but I opened this whole conversation


00:27:27.320 --> 00:27:29.760
with a thousand flowers blooming


00:27:29.760 --> 00:27:32.920
around the package management story,


00:27:32.920 --> 00:27:35.800
and I think for a long time,


00:27:35.800 --> 00:27:38.680
what people had seen was they're going to try


00:27:38.680 --> 00:27:42.320
to innovate within Python, so you install Python,


00:27:42.320 --> 00:27:43.320
you create your environment,


00:27:43.320 --> 00:27:45.240
and then like you have a different workflow


00:27:45.240 --> 00:27:46.920
with different tools.


00:27:46.920 --> 00:27:51.440
But they're starting, some of the new ideas


00:27:51.440 --> 00:27:52.960
are starting to move to the outside,


00:27:52.960 --> 00:27:55.680
like we'll also manage Python itself.


00:27:55.680 --> 00:27:57.240
If you say you want Python 3.10


00:27:57.240 --> 00:28:00.560
and you only have 3.11 installed, we'll take care of that.


00:28:00.560 --> 00:28:03.160
And something built on Python has a real hard time


00:28:04.320 --> 00:28:06.760
installing Python, 'cause there's this chicken and egg,


00:28:06.760 --> 00:28:08.720
probably needs it first, right?


00:28:08.720 --> 00:28:10.880
And it sounds like you all are taking that approach


00:28:10.880 --> 00:28:14.200
of we're gonna be outside of Python,


00:28:14.200 --> 00:28:16.200
you know, built in Rust or any binary


00:28:16.200 --> 00:28:18.640
that just runs on its own would work.


00:28:18.640 --> 00:28:19.480
- Yeah, exactly.


00:28:19.480 --> 00:28:20.960
- Have a greater control, right?


00:28:20.960 --> 00:28:24.080
So yeah, I know, just what are your thoughts on that?


00:28:24.080 --> 00:28:27.760
- Yeah, so one of the strong points is Pixie


00:28:27.760 --> 00:28:30.800
that you can install it as a standalone binary,


00:28:30.800 --> 00:28:32.400
so you have a simple script


00:28:32.400 --> 00:28:34.160
or you can even just download it


00:28:34.160 --> 00:28:35.880
and put it in your machine


00:28:35.880 --> 00:28:38.440
and then you can install whatever you want.


00:28:38.440 --> 00:28:40.760
So you're not limited to Python alone.


00:28:40.760 --> 00:28:44.240
And in a lot of cases, you wanna mix a lot of stuff.


00:28:44.240 --> 00:28:48.400
Sometimes you need a specific version of SSH


00:28:48.400 --> 00:28:50.880
or sometimes you need a specific version of OpenSSL


00:28:50.880 --> 00:28:53.200
or whatever that needs your package.


00:28:53.200 --> 00:28:57.800
And you would have these long lists of getting started


00:28:57.800 --> 00:29:00.160
to like, oh, you need to install this with APT


00:29:00.160 --> 00:29:04.640
or you need to install this with name anything,


00:29:04.640 --> 00:29:05.680
any other package manager,


00:29:05.680 --> 00:29:07.760
and then you can run pip install


00:29:07.760 --> 00:29:09.320
and then it should all work.


00:29:09.320 --> 00:29:13.480
And Pixie kinda moves it back to you have to have Pixie


00:29:13.480 --> 00:29:15.720
and you have to have the source code of the package


00:29:15.720 --> 00:29:18.720
that you're running or you're directly like using Pixie


00:29:18.720 --> 00:29:19.680
to install something.


00:29:19.680 --> 00:29:22.680
And like you're most of the time,


00:29:22.680 --> 00:29:26.120
just two commands away from running the actual code


00:29:26.120 --> 00:29:27.600
that you're trying to run


00:29:27.600 --> 00:29:31.640
instead of going to read some kind of readme


00:29:31.640 --> 00:29:33.160
from a person on the internet.


00:29:33.160 --> 00:29:38.680
- Yeah, and it's also pretty challenging for newcomers


00:29:38.680 --> 00:29:39.800
to programming. - Yes, exactly.


00:29:39.800 --> 00:29:42.960
- You're like, I just wanna run this.


00:29:42.960 --> 00:29:44.240
Yeah, exactly, I just wanna run this.


00:29:44.240 --> 00:29:46.600
You're like, but what am I doing all this terminal stuff?


00:29:46.600 --> 00:29:48.840
Like, I just wanna run, I wrote the program,


00:29:48.840 --> 00:29:49.920
I want it to go.


00:29:49.920 --> 00:29:53.680
I feel like maybe that's part of why notebooks


00:29:53.680 --> 00:29:55.880
and that whole notebooks, Jupyter side of things


00:29:55.880 --> 00:29:59.200
is so popular because like assuming somebody


00:29:59.200 --> 00:30:01.320
has created a server and got it started for you,


00:30:01.320 --> 00:30:03.680
like you don't worry about those things, right?


00:30:03.680 --> 00:30:05.680
- Yeah, exactly. - Yeah.


00:30:05.680 --> 00:30:12.080
So let's talk about kind of that beginner experience.


00:30:12.080 --> 00:30:16.080
If you have an example on your website somewhere


00:30:16.080 --> 00:30:19.920
where it just shows, if you just check out a repository


00:30:19.920 --> 00:30:22.920
that's already been configured to use Pixie,


00:30:22.920 --> 00:30:27.640
it's just clone, Pixie, run, is it run start


00:30:27.640 --> 00:30:28.920
or something like that, right?


00:30:28.920 --> 00:30:30.520
You don't have to create the environments


00:30:30.520 --> 00:30:33.360
and even that could potentially happen without Python


00:30:33.360 --> 00:30:35.240
even on the machine initially, right?


00:30:35.240 --> 00:30:39.000
- So yeah, so a funny part of Pixie is,


00:30:39.000 --> 00:30:41.120
Pixie itself is a Pixie project.


00:30:41.120 --> 00:30:44.360
So if we want to build Pixie, it is a Rust project,


00:30:44.360 --> 00:30:47.560
but we run Pixie run build in this case,


00:30:47.560 --> 00:30:49.840
or Pixie run install.


00:30:50.000 --> 00:30:55.000
So you kind of move everything back into the tasks in Pixie


00:30:55.000 --> 00:30:58.400
and you can run it using Pixie.


00:30:58.400 --> 00:31:00.680
And Pixie will take care of your environment.


00:31:00.680 --> 00:31:05.920
- Yeah, so basically, as I also said before,


00:31:05.920 --> 00:31:07.800
we are learning a lot, for example, from Cargo.


00:31:07.800 --> 00:31:10.480
So we also have a single Pixie Toml file


00:31:10.480 --> 00:31:13.240
that kind of defines all of your dependencies,


00:31:13.240 --> 00:31:15.400
a bit of metadata about your project,


00:31:15.400 --> 00:31:18.320
and then you can define these tasks.


00:31:18.320 --> 00:31:20.440
And so like what we see on the screen


00:31:20.440 --> 00:31:22.600
is that we have a task that's called start


00:31:22.600 --> 00:31:25.320
and that just runs Python main.py.


00:31:25.320 --> 00:31:27.760
So that's pretty straightforward.


00:31:27.760 --> 00:31:32.560
But obviously, like you can go further,


00:31:32.560 --> 00:31:34.640
like you can have tasks that depend on other tasks


00:31:34.640 --> 00:31:36.240
and that we're learning a lot from.


00:31:36.240 --> 00:31:38.360
There's a project called taskfile.dev.


00:31:38.360 --> 00:31:42.840
And we also want to integrate caching into these tasks


00:31:42.840 --> 00:31:45.760
so that if you like one task might download something


00:31:45.760 --> 00:31:48.200
on your system, like some assets that you need,


00:31:48.200 --> 00:31:49.600
like images and stuff.


00:31:49.600 --> 00:31:51.040
And if you already have them cached,


00:31:51.040 --> 00:31:52.440
then you don't need to re-download them


00:31:52.440 --> 00:31:53.800
and these kinds of things.


00:31:53.800 --> 00:31:56.640
So we're really like wanting to build a simple,


00:31:56.640 --> 00:31:58.920
but powerful task system in there.


00:31:58.920 --> 00:32:00.200
And that benefits greatly


00:32:00.200 --> 00:32:02.080
from having these dependencies available.


00:32:02.080 --> 00:32:05.200
Because like in this case, what we see on the screen,


00:32:05.200 --> 00:32:08.840
we have two dependencies and one of those is Python 3.11.


00:32:08.840 --> 00:32:12.520
And that means the moment you run Pixie run start,


00:32:12.520 --> 00:32:14.520
it will actually look at the log file


00:32:14.520 --> 00:32:15.680
and look at what you have


00:32:15.680 --> 00:32:17.240
in your local environment installed


00:32:17.240 --> 00:32:19.440
and the environments are always local to the project,


00:32:19.440 --> 00:32:21.640
which is also a difference to Condite Mamba.


00:32:21.640 --> 00:32:24.160
So it will look into that environment


00:32:24.160 --> 00:32:26.400
and check if Python 3.11 is there.


00:32:26.400 --> 00:32:28.840
And if the version that you have in your environment


00:32:28.840 --> 00:32:31.600
corresponds to the one that's listed in the log file,


00:32:31.600 --> 00:32:33.360
and if not, it will download the version


00:32:33.360 --> 00:32:34.960
and install it into your environment


00:32:34.960 --> 00:32:37.000
and like make sure that you have all the stuff


00:32:37.000 --> 00:32:42.000
that's necessary or listed to run what you need.


00:32:42.000 --> 00:32:43.960
- Nice.


00:32:43.960 --> 00:32:46.360
So for example, you got in your example,


00:32:46.360 --> 00:32:50.120
Python 3.11 for some flexibility


00:32:50.120 --> 00:32:51.520
there on the very, very end.


00:32:51.520 --> 00:32:56.280
Does that download a binary version


00:32:56.280 --> 00:32:57.600
or does it build from source


00:32:57.600 --> 00:33:00.760
or what happens when it needs that?


00:33:00.760 --> 00:33:04.240
- Yeah, so typically, like Conda


00:33:04.240 --> 00:33:05.400
is a binary package manager.


00:33:05.400 --> 00:33:08.240
So usually what you download is binary.


00:33:08.240 --> 00:33:12.520
We're working on the source dependency capabilities,


00:33:12.520 --> 00:33:14.800
where also Rackler build, what I mentioned before,


00:33:14.800 --> 00:33:16.280
is going to play a big role.


00:33:16.280 --> 00:33:20.000
Because the idea is that you can also run Pixie build


00:33:20.000 --> 00:33:20.960
at some point soon,


00:33:20.960 --> 00:33:23.000
and that will build your Conda package


00:33:23.000 --> 00:33:24.800
out of your Pixie project.


00:33:24.800 --> 00:33:26.640
But we would use the same capabilities


00:33:26.640 --> 00:33:31.640
to basically also allow you to get local dependencies


00:33:31.640 --> 00:33:35.600
and then build them ad hoc


00:33:35.600 --> 00:33:37.400
and put them into your environment.


00:33:37.400 --> 00:33:39.120
- Yeah, so I suppose it's probably,


00:33:39.120 --> 00:33:40.680
oh, go ahead, Ruben, sorry.


00:33:40.680 --> 00:33:43.040
- Yeah, so that comes back to the example you gave before


00:33:43.040 --> 00:33:46.720
with the problem that there's a huge server debug


00:33:46.720 --> 00:33:51.720
or something, and you would want to use a non-support,


00:33:51.720 --> 00:33:55.520
yeah, a version that's not shared around the world yet.


00:33:55.520 --> 00:33:58.760
So you need this GitHub link


00:33:58.760 --> 00:34:00.280
and that package you need to install.


00:34:00.280 --> 00:34:02.080
And that's something we still want to support


00:34:02.080 --> 00:34:06.520
through this local or URL-based dependency.


00:34:06.520 --> 00:34:09.240
But for that, you first need to be able to build it.


00:34:09.240 --> 00:34:12.120
- Yeah, kind of like the Git plus on pip install.


00:34:12.120 --> 00:34:13.840
- Yeah, yeah, exactly.


00:34:13.840 --> 00:34:19.000
- All right, I found out where this little section was here,


00:34:19.000 --> 00:34:22.800
where this, Pixie is made for collaboration


00:34:22.800 --> 00:34:23.640
on your announcement,


00:34:23.640 --> 00:34:25.560
where it just says Git clone some repo,


00:34:25.560 --> 00:34:29.200
Pixie run, start build, whatever.


00:34:29.200 --> 00:34:34.200
This, maybe just talk through what happens there,


00:34:34.200 --> 00:34:36.720
because if I don't even have Python,


00:34:36.720 --> 00:34:37.960
much less a virtual environment,


00:34:37.960 --> 00:34:40.240
much less the things installed,


00:34:40.240 --> 00:34:41.960
you know, if I try this at Python,


00:34:41.960 --> 00:34:45.520
if I, they just say clone this, go here, Python run.


00:34:45.520 --> 00:34:46.480
Like if you don't have Python,


00:34:46.480 --> 00:34:48.480
it'll just say Python, what is that?


00:34:48.480 --> 00:34:50.560
If you do have Python, it'll say, you know,


00:34:50.560 --> 00:34:52.680
FastAPI, what is that?


00:34:52.680 --> 00:34:55.000
Right, like there's a lot of steps


00:34:55.000 --> 00:34:56.920
that this really simplifies.


00:34:56.920 --> 00:34:58.000
And that's kind of what I was talking about


00:34:58.000 --> 00:34:59.680
with the beginners as well.


00:34:59.680 --> 00:35:02.360
Like, you know, maybe speak to what's happening here.


00:35:02.360 --> 00:35:06.600
- Yeah, so when you do Pixie run,


00:35:06.600 --> 00:35:10.160
it will create, and you have nothing on your system, right?


00:35:10.160 --> 00:35:12.680
Except for Pixie and that repository.


00:35:12.680 --> 00:35:16.520
Then it's going to create a hidden folder


00:35:16.520 --> 00:35:17.760
inside of your project.


00:35:17.760 --> 00:35:20.040
That's called .pixie.


00:35:20.040 --> 00:35:22.760
And in there, it will install all of these tools


00:35:22.760 --> 00:35:24.200
that are dependencies of the project.


00:35:24.200 --> 00:35:27.240
So Python, NumPy, scikit-learn, whatever.


00:35:27.240 --> 00:35:33.160
And that, like, and then when you do Pixie run,


00:35:33.160 --> 00:35:36.240
it will invoke, actually there's a thing called


00:35:36.240 --> 00:35:38.000
Dino task share, which we're using.


00:35:39.440 --> 00:35:42.560
And that's basically something, like, it looks like Bash,


00:35:42.560 --> 00:35:43.800
but it also works in Windows,


00:35:43.800 --> 00:35:45.560
which is like the key feature here.


00:35:45.560 --> 00:35:50.400
So that will sort of run the task.


00:35:50.400 --> 00:35:53.240
And in this case, like some task is probably defined


00:35:53.240 --> 00:35:55.280
inside of the Pixie Tummel.


00:35:55.280 --> 00:35:57.520
And that might run something like Python, I don't know,


00:35:57.520 --> 00:36:02.240
start Flask or start Jupyter or, you know,


00:36:02.240 --> 00:36:05.120
whatever the developer desires to do.


00:36:06.480 --> 00:36:09.920
But yeah, like the cool thing is that it will,


00:36:09.920 --> 00:36:11.880
like in the background, activate the environment,


00:36:11.880 --> 00:36:15.800
like the virtual environment and use it to run your software.


00:36:15.800 --> 00:36:18.560
- Okay. Yeah, that's really cool.


00:36:18.560 --> 00:36:21.560
- And that, yeah, most of that kind of happens


00:36:21.560 --> 00:36:22.400
behind the scenes.


00:36:22.400 --> 00:36:25.160
So also with Conda, for example, or Mamba,


00:36:25.160 --> 00:36:28.240
it's usually multiple steps.


00:36:28.240 --> 00:36:30.760
So usually what you would do is you do like,


00:36:30.760 --> 00:36:33.120
Mamba create my environment,


00:36:33.120 --> 00:36:35.080
and then that environment would have some name


00:36:35.080 --> 00:36:37.480
and then you would need to do Mamba activate my environment.


00:36:37.480 --> 00:36:41.520
And then only you would be able to run stuff.


00:36:41.520 --> 00:36:44.080
And what you're running is also probably going


00:36:44.080 --> 00:36:46.800
to look more complicated than just typing Pixie run,


00:36:46.800 --> 00:36:49.080
some task, which does all of that.


00:36:49.080 --> 00:36:51.680
- Right. The some task is almost an alias


00:36:51.680 --> 00:36:54.040
for the actual run command, right?


00:36:54.040 --> 00:36:55.160
- Yes.


00:36:55.160 --> 00:36:56.000
- Yeah. Yeah.


00:36:56.000 --> 00:36:57.000
- It could be something very complicated.


00:36:57.000 --> 00:36:58.440
And it could also be multiple tasks


00:36:58.440 --> 00:37:00.120
that actually run in the background


00:37:00.120 --> 00:37:02.240
because they can depend on each other.


00:37:02.240 --> 00:37:03.080
- Excellent.


00:37:04.320 --> 00:37:06.880
I really like that the virtual environment


00:37:06.880 --> 00:37:11.280
or all the binary configuration stuff


00:37:11.280 --> 00:37:15.120
is a sub directory of the project.


00:37:15.120 --> 00:37:17.520
That's always bothered me about Conda.


00:37:17.520 --> 00:37:20.280
You know, if I go, I've got,


00:37:20.280 --> 00:37:25.120
I think I have about 260 GitHub repos on my GitHub profile.


00:37:25.120 --> 00:37:27.440
And I check out other people's stuff and check it out.


00:37:27.440 --> 00:37:30.280
And so if I go just to my file system and I go in there,


00:37:30.280 --> 00:37:33.480
I'm like, I haven't messed with this for a year.


00:37:33.480 --> 00:37:34.520
Was that on the old computer?


00:37:34.520 --> 00:37:35.360
Is on my laptop?


00:37:35.360 --> 00:37:36.200
Is on my mini?


00:37:36.200 --> 00:37:37.320
Like, what was that on?


00:37:37.320 --> 00:37:39.400
I don't, so it could be I haven't set it up


00:37:39.400 --> 00:37:40.880
or maybe I have, right?


00:37:40.880 --> 00:37:44.120
And if I go there and I see there's a VNV folder


00:37:44.120 --> 00:37:46.000
or something along those lines, I'm like, oh yeah,


00:37:46.000 --> 00:37:46.960
it might be out of date,


00:37:46.960 --> 00:37:48.720
but I definitely have done something with this here.


00:37:48.720 --> 00:37:50.040
I probably can run it.


00:37:50.040 --> 00:37:53.640
Whereas the Conda style, like you don't know.


00:37:53.640 --> 00:37:54.960
What did you name it?


00:37:54.960 --> 00:37:57.280
If you have 200 of them, what is the right one?


00:37:57.280 --> 00:37:58.840
How do I activate it?


00:37:58.840 --> 00:38:02.200
And then also if something kind of goes haywire,


00:38:02.200 --> 00:38:06.120
it's like, you know what, I'm just gonna RMRF that folder


00:38:06.120 --> 00:38:08.560
and it's out, just recreate it


00:38:08.560 --> 00:38:10.520
on the new version of whatever, right?


00:38:10.520 --> 00:38:11.720
But if it's somewhere else,


00:38:11.720 --> 00:38:13.680
you know, there's just like this disconnect.


00:38:13.680 --> 00:38:16.080
I know there's like a command flag to override


00:38:16.080 --> 00:38:18.040
or something to like get Conda to put it locally,


00:38:18.040 --> 00:38:20.160
but defaults are powerful, right?


00:38:20.160 --> 00:38:22.360
And I really like that it's like there


00:38:22.360 --> 00:38:24.120
and you can just blast away the .pixie


00:38:24.120 --> 00:38:27.680
and start over if you need to.


00:38:27.680 --> 00:38:30.720
- And we're also using the same tricks that Conda uses


00:38:30.720 --> 00:38:32.440
in a bunch of other package managers.


00:38:32.440 --> 00:38:35.640
So like if you can have these multiple environments,


00:38:35.640 --> 00:38:38.440
but they actually share the underlying files.


00:38:38.440 --> 00:38:41.040
So if you use the same Python 3.11 version


00:38:41.040 --> 00:38:43.000
in multiple environments, it's not,


00:38:43.000 --> 00:38:44.640
yeah, like you don't duplicate those files.


00:38:44.640 --> 00:38:47.040
You don't lose a lot of storage, for example.


00:38:47.040 --> 00:38:48.000
- Oh, that's nice.


00:38:48.000 --> 00:38:49.200
- And the other thing that's really cool,


00:38:49.200 --> 00:38:50.640
and I mean, Conda also gives you that,


00:38:50.640 --> 00:38:53.080
but you can have completely different Python versions


00:38:53.080 --> 00:38:54.120
in all of these environments.


00:38:54.120 --> 00:38:57.640
And it's very like straightforward to use.


00:38:57.640 --> 00:39:01.080
Like you don't need to like, I don't know,


00:39:01.080 --> 00:39:02.800
run it through containers or stuff like that.


00:39:02.800 --> 00:39:07.800
It's just like all in your system and yeah, very nice.


00:39:07.800 --> 00:39:09.640
- Yeah, excellent.


00:39:09.640 --> 00:39:10.840
Yeah, yeah.


00:39:10.840 --> 00:39:11.760
Oops, let's see.


00:39:11.760 --> 00:39:16.680
I would also wanna, yeah.


00:39:16.680 --> 00:39:18.280
So one thing that I ran across here


00:39:18.280 --> 00:39:22.840
that was pretty interesting while just researching this


00:39:22.840 --> 00:39:27.840
is you said Pixie and Conda, like Nix,


00:39:27.840 --> 00:39:30.000
are language agnostics.


00:39:30.000 --> 00:39:31.880
And I'm like, what is this Nix thing?


00:39:31.880 --> 00:39:34.680
And that brought me over to NixOS.


00:39:34.680 --> 00:39:36.120
What is this?


00:39:36.120 --> 00:39:43.640
- Nix or yeah, Nix basically is a functional package manager.


00:39:43.640 --> 00:39:47.920
So it works with a functional programming language,


00:39:47.920 --> 00:39:50.720
which is kind of an interesting idea.


00:39:50.720 --> 00:39:55.720
And a lot of people that know Nix really love it.


00:39:55.720 --> 00:39:59.520
So we would like for Pixie to also be as loved as Nix is


00:39:59.520 --> 00:40:00.360
by Nix people.


00:40:00.360 --> 00:40:05.840
And basically what's nice about


00:40:05.840 --> 00:40:07.320
the functional programming language


00:40:07.320 --> 00:40:10.880
is that it kind of, you know, from the input, the output,


00:40:10.880 --> 00:40:14.600
so you can cache the function execution and you know, okay,


00:40:14.600 --> 00:40:17.240
like if the function didn't change


00:40:17.240 --> 00:40:18.240
and the inputs didn't change,


00:40:18.240 --> 00:40:19.840
then the output is also not going to change.


00:40:19.840 --> 00:40:21.280
- Right, you can cache the heck out of it.


00:40:21.280 --> 00:40:24.840
You can parallelize it so much and so on, yeah.


00:40:24.840 --> 00:40:26.600
- And that's kind of what, like,


00:40:26.600 --> 00:40:30.280
that's how I understand Nix is that basically


00:40:30.280 --> 00:40:31.880
you have a function that you execute to,


00:40:31.880 --> 00:40:33.320
let's say, get Bash on your system


00:40:33.320 --> 00:40:35.280
or get Python on your system.


00:40:35.280 --> 00:40:39.000
And once you have executed that function


00:40:39.000 --> 00:40:40.640
for that specific Python version,


00:40:40.640 --> 00:40:42.000
you know that you have, you know,


00:40:42.000 --> 00:40:44.680
Python with that hash in your system somewhere.


00:40:44.680 --> 00:40:46.480
And then Nix has some magic to kind of


00:40:46.480 --> 00:40:49.360
string things together so that


00:40:49.360 --> 00:40:52.920
you can also sort of do something like a conda activate


00:40:52.920 --> 00:40:57.600
where it would put the right version of Python, NumPy


00:40:57.600 --> 00:40:59.280
and whatever you installed through Nix


00:40:59.280 --> 00:41:02.640
onto your like system path and make it usable.


00:41:02.640 --> 00:41:08.760
And so I think Nix and Pixie are competitors.


00:41:08.760 --> 00:41:12.560
Anyway, the thing about the functional language


00:41:12.560 --> 00:41:15.560
is that it also makes it like way less beginner friendly,


00:41:15.560 --> 00:41:18.200
at least kind of my opinion.


00:41:19.320 --> 00:41:20.160
- Yeah, I agree.


00:41:20.160 --> 00:41:22.880
- And the way Pixie kind of works


00:41:22.880 --> 00:41:26.720
is like really straightforward in a way.


00:41:26.720 --> 00:41:28.280
Like you just define your dependencies


00:41:28.280 --> 00:41:30.840
and ranges and stuff and you get the binaries.


00:41:30.840 --> 00:41:32.880
With Nix, sometimes you need to,


00:41:32.880 --> 00:41:34.720
like usually you build things from source,


00:41:34.720 --> 00:41:36.600
so that's also a difference.


00:41:36.600 --> 00:41:38.680
I think they have like distributed caches


00:41:38.680 --> 00:41:40.280
that you could use and things like that.


00:41:40.280 --> 00:41:42.960
But honestly, I'm not a user of Nix,


00:41:42.960 --> 00:41:46.400
so I'm not sure how widely these caches,


00:41:46.400 --> 00:41:47.960
like widely used these caches are.


00:41:47.960 --> 00:41:51.480
But we definitely look at Nix


00:41:51.480 --> 00:41:54.720
as like also another source of like inspiration.


00:41:54.720 --> 00:41:58.680
And I think they have something really good going for them


00:41:58.680 --> 00:42:00.560
because people that use Nix,


00:42:00.560 --> 00:42:03.120
they are like super evangelical about it.


00:42:03.120 --> 00:42:04.840
- Yeah.


00:42:04.840 --> 00:42:06.440
- Yeah.


00:42:06.440 --> 00:42:07.840
- Well, it also probably helps


00:42:07.840 --> 00:42:09.760
its functional programming, right?


00:42:09.760 --> 00:42:11.240
People who do functional programming,


00:42:11.240 --> 00:42:14.200
like they love functional programming.


00:42:14.200 --> 00:42:17.120
- The pureness of it is pretty nice.


00:42:17.120 --> 00:42:20.040
And then Nix OS also goes like a step further


00:42:20.040 --> 00:42:23.240
where you can sort of manage your entire like configuration


00:42:23.240 --> 00:42:25.720
and everything through the same system.


00:42:25.720 --> 00:42:27.040
And that's also pretty powerful.


00:42:27.040 --> 00:42:29.880
And maybe we can find some interesting ways


00:42:29.880 --> 00:42:31.920
of like supporting something similar.


00:42:31.920 --> 00:42:34.880
But in a way, like if you look at Pixie,


00:42:34.880 --> 00:42:37.320
I think we are trying to,


00:42:37.320 --> 00:42:39.880
like we don't actually care so much about Conda in a way,


00:42:39.880 --> 00:42:41.840
or like maybe that's also the wrong way to put it.


00:42:41.840 --> 00:42:46.680
But basically what we're looking is also like,


00:42:46.680 --> 00:42:47.920
how does Docker do things?


00:42:47.920 --> 00:42:49.440
And how does Nix do things?


00:42:49.440 --> 00:42:53.040
And like, how can we kind of like learn from those tools?


00:42:53.040 --> 00:42:56.360
And yeah.


00:42:56.360 --> 00:42:59.120
- We have a pretty well-defined vision for ourselves.


00:42:59.120 --> 00:43:02.240
And the main part is that we just want to make it easy


00:43:02.240 --> 00:43:03.480
to get started.


00:43:03.480 --> 00:43:05.840
So you shouldn't have to hassle


00:43:05.840 --> 00:43:07.760
of learning a new thing to get started.


00:43:07.760 --> 00:43:11.920
You should just know like the bare minimum of information


00:43:11.920 --> 00:43:13.440
on how to run something.


00:43:13.440 --> 00:43:15.000
And Pixie is there to help you.


00:43:15.000 --> 00:43:18.440
Instead of we do something like with a complete vision


00:43:18.440 --> 00:43:19.400
that's making it perfect.


00:43:19.400 --> 00:43:21.680
And we're even doing it in a specific OS


00:43:21.680 --> 00:43:23.240
that you need to install.


00:43:23.240 --> 00:43:25.720
We want this to be used on every OS.


00:43:25.720 --> 00:43:27.280
And we want this to be used by everyone.


00:43:27.280 --> 00:43:31.120
So you can share your code with anyone, anywhere.


00:43:31.120 --> 00:43:31.960
- Yeah.


00:43:31.960 --> 00:43:33.160
- Something we really focus on.


00:43:33.160 --> 00:43:35.960
- Sure, the clone and then just Pixie run.


00:43:35.960 --> 00:43:39.520
That's pretty easy.


00:43:39.520 --> 00:43:41.560
It's pretty easy for people to do, right?


00:43:41.560 --> 00:43:44.600
- I would say so.


00:43:44.600 --> 00:43:45.720
- Yeah.


00:43:45.720 --> 00:43:47.000
So that's the experience


00:43:47.000 --> 00:43:49.760
if someone's set up a project for you.


00:43:49.760 --> 00:43:50.960
On your announcement post,


00:43:50.960 --> 00:43:54.320
you'll have a nice little example of,


00:43:54.320 --> 00:43:59.160
not a terribly complicated example of an app


00:43:59.160 --> 00:44:00.640
that you might or a project you set up.


00:44:00.640 --> 00:44:04.440
But maybe just talk through like if I want to start


00:44:04.440 --> 00:44:06.760
with just maybe I have a GitHub repo already,


00:44:06.760 --> 00:44:08.520
but I haven't set it up.


00:44:08.520 --> 00:44:10.080
Like what's the process there?


00:44:10.080 --> 00:44:14.520
- So you would, if you already have a GitHub repository


00:44:14.520 --> 00:44:16.560
for example, you would just do Pixie init


00:44:16.560 --> 00:44:20.440
and then give it, yeah, basically you would just say dot


00:44:20.440 --> 00:44:22.200
because that's your current folder.


00:44:22.200 --> 00:44:23.360
Or if you don't have anything,


00:44:23.360 --> 00:44:26.240
you would just do something like Pixie.ini my project.


00:44:26.240 --> 00:44:28.280
And that will create the my project folder for you


00:44:28.280 --> 00:44:30.880
with a Pixie.toml file inside.


00:44:30.880 --> 00:44:34.920
And then once you have that, you can do Pixie add Python


00:44:34.920 --> 00:44:38.240
and you can use like the specifiers from Conda.


00:44:38.240 --> 00:44:41.480
So you could do something like Python equals 3.11


00:44:41.480 --> 00:44:44.200
and that would get you Python 3.11


00:44:44.200 --> 00:44:46.120
into the dependencies of that project.


00:44:46.120 --> 00:44:49.920
And then when you, and it also installed at that point.


00:44:49.920 --> 00:44:52.520
And after it installs, it creates that log file


00:44:52.520 --> 00:44:56.160
that you can also like should check into your repository


00:44:56.160 --> 00:44:58.720
so that you know what the latest versions were that were


00:44:58.720 --> 00:45:00.840
like working with the project.


00:45:00.840 --> 00:45:01.760
- Okay.


00:45:01.760 --> 00:45:04.520
Like the pinned, basically the pinned versions


00:45:04.520 --> 00:45:06.240
or constraints, yeah.


00:45:06.240 --> 00:45:08.520
- Yeah, one other thing that happens when you do Pixie add


00:45:08.520 --> 00:45:10.680
is that it actually goes and tries to figure out


00:45:10.680 --> 00:45:12.280
like what's the latest version that's available


00:45:12.280 --> 00:45:13.480
for that package.


00:45:13.480 --> 00:45:16.840
And then already puts a pin into your dependencies.


00:45:16.840 --> 00:45:19.320
So what we see on the screen is like we do Pixie add cow pie


00:45:19.320 --> 00:45:22.760
and then it adds cow pie 1.1.5.star.


00:45:22.760 --> 00:45:24.960
So that's a pretty specific version already.


00:45:24.960 --> 00:45:26.960
- Nice.


00:45:26.960 --> 00:45:30.120
And you haven't done it here, but so the example is Pixie


00:45:30.120 --> 00:45:32.760
run cow pie and then the parameters, hello blog reader.


00:45:32.760 --> 00:45:36.040
And it like does the cow saying hello blog reader.


00:45:36.040 --> 00:45:39.360
But when you talked earlier about the tasks or whatever


00:45:39.360 --> 00:45:42.360
you could just say create a task called cow


00:45:42.360 --> 00:45:45.400
and it is Python cow pie, hello blog reader.


00:45:45.400 --> 00:45:46.240
Right.


00:45:46.240 --> 00:45:47.360
And that you would just say Pixie run cow


00:45:47.360 --> 00:45:48.680
and the same thing would happen.


00:45:48.680 --> 00:45:50.680
Is that, do I got that all put together?


00:45:50.680 --> 00:45:51.520
- Yep.


00:45:51.520 --> 00:45:52.360
Yep.


00:45:52.360 --> 00:45:53.180
Yep.


00:45:53.180 --> 00:45:54.020
That's absolutely the case.


00:45:54.020 --> 00:45:57.360
And, but basically everything, any binary executable


00:45:57.360 --> 00:45:59.120
that you have in your environment, like in this case,


00:45:59.120 --> 00:46:01.920
cow pie, you can also call those Pixie run whatever.


00:46:01.920 --> 00:46:03.720
Like, so you can do Pixie run Python


00:46:03.720 --> 00:46:06.880
and it would start Python 3.11 or whatever you have installed


00:46:06.880 --> 00:46:08.280
inside of that environment.


00:46:08.280 --> 00:46:09.120
- Okay. Yeah.


00:46:09.120 --> 00:46:11.400
And that would actually do the REPL and everything.


00:46:11.400 --> 00:46:12.220
- Yeah. Yeah.


00:46:12.220 --> 00:46:14.240
Just like having it globally installed.


00:46:14.240 --> 00:46:18.640
- So one thing that does, yeah, sorry, go ahead.


00:46:18.640 --> 00:46:19.480
- Yeah.


00:46:19.480 --> 00:46:21.320
So one other feature of Pixie that we haven't mentioned


00:46:21.320 --> 00:46:24.000
before is that you can still do global install.


00:46:24.000 --> 00:46:26.080
So sometimes you have that comment line tool


00:46:26.080 --> 00:46:27.320
that you really love.


00:46:27.320 --> 00:46:30.200
One of the things we, I usually install is bat,


00:46:30.200 --> 00:46:32.200
which is like cat with wings.


00:46:32.200 --> 00:46:36.680
And so what you can do with Pixie is you can do Pixie


00:46:36.680 --> 00:46:40.480
global installed bat and that will install bat


00:46:40.480 --> 00:46:42.080
and make it globally available.


00:46:42.080 --> 00:46:45.440
So you can run it from wherever it's not tied


00:46:45.440 --> 00:46:46.880
to any like project environment.


00:46:46.880 --> 00:46:50.340
It's just on your system in your home folder, essentially.


00:46:50.340 --> 00:46:54.720
And you can just run bat wherever you are and it works.


00:46:54.720 --> 00:46:55.640
- Yeah.


00:46:55.640 --> 00:47:00.000
The one that comes to mind for me a lot is PIPX.


00:47:00.000 --> 00:47:00.820
- Yeah.


00:47:00.820 --> 00:47:01.660
- As one of them.


00:47:01.660 --> 00:47:04.480
- Where we got this kind of,


00:47:04.480 --> 00:47:06.600
it's using similar mechanisms to that.


00:47:06.600 --> 00:47:09.400
So every tool that you install this way


00:47:09.400 --> 00:47:14.040
is installed into its own virtual environment.


00:47:14.040 --> 00:47:15.760
So they don't have any overlap.


00:47:15.760 --> 00:47:20.080
You can install versions that are completely unrelated.


00:47:20.080 --> 00:47:20.920
- Right.


00:47:20.920 --> 00:47:22.680
Maybe even different Pythons, right?


00:47:22.680 --> 00:47:23.520
- Yeah.


00:47:23.520 --> 00:47:24.720
- Yeah.


00:47:24.720 --> 00:47:26.360
Hey Wolf, I think you might be a little farther away


00:47:26.360 --> 00:47:27.600
from your mic than you were before.


00:47:27.600 --> 00:47:28.440
- Oh, sorry.


00:47:28.440 --> 00:47:29.280
- Yeah, no worries.


00:47:29.280 --> 00:47:31.720
Just change the volume a little.


00:47:31.720 --> 00:47:32.560
Yeah, no worries.


00:47:32.560 --> 00:47:36.400
One thing that I also like a lot about this,


00:47:36.400 --> 00:47:41.280
and pour one out for poor old Pep something, something,


00:47:41.280 --> 00:47:46.000
something about the Dunder PyPackages folder.


00:47:46.000 --> 00:47:47.280
I can't remember what the Pep number is.


00:47:47.280 --> 00:47:52.280
But basically the idea that if I'm just in the right place,


00:47:52.280 --> 00:47:57.940
the run command should grab whatever local environment


00:47:57.940 --> 00:47:58.880
is the one I've set up,


00:47:58.880 --> 00:48:01.440
rather than explicitly going and finding the environment,


00:48:01.440 --> 00:48:04.280
activating the environment, et cetera.


00:48:04.280 --> 00:48:07.280
- So it looks like when you say Pixie run,


00:48:07.280 --> 00:48:10.440
there's no Pixie activate or any of those things, right?


00:48:10.440 --> 00:48:11.280
How's that work?


00:48:11.280 --> 00:48:16.720
- Yeah, so the way conda environments work


00:48:16.720 --> 00:48:19.280
is that you need to have some sort of little activation


00:48:19.280 --> 00:48:21.680
thing where basically the past variable,


00:48:21.680 --> 00:48:23.840
environment variables changed and adjusted.


00:48:23.840 --> 00:48:27.000
And some other activation scripts are run.


00:48:27.000 --> 00:48:29.880
And with Pixie, what we're doing is we run those


00:48:29.880 --> 00:48:32.760
in the background and then we extract all the environment


00:48:32.760 --> 00:48:35.240
variables that are necessary for the activation


00:48:35.240 --> 00:48:36.200
basically to work.


00:48:36.200 --> 00:48:42.200
And then we just inject it right before we execute


00:48:42.200 --> 00:48:46.040
what you want to execute, like Copy in this case.


00:48:46.040 --> 00:48:48.720
- Yeah, so there's like an implicit activate,


00:48:48.720 --> 00:48:51.080
or you don't even have to say activate in Python.


00:48:51.080 --> 00:48:54.600
You can just, if you just use that Python,


00:48:54.600 --> 00:48:58.720
you say the path to the virtual environment Python run,


00:48:58.720 --> 00:48:59.960
that's sufficient, yeah?


00:49:01.000 --> 00:49:03.200
- Yeah, that's more or less what happens.


00:49:03.200 --> 00:49:07.400
Sometimes packages can have different requirements


00:49:07.400 --> 00:49:08.480
when it comes to activation.


00:49:08.480 --> 00:49:10.840
So like Python doesn't have many requirements


00:49:10.840 --> 00:49:12.720
when it comes to activation, but some other packages,


00:49:12.720 --> 00:49:15.560
they might need some other environment variables


00:49:15.560 --> 00:49:17.280
that are specific to the environment location


00:49:17.280 --> 00:49:18.840
where they are installed, et cetera.


00:49:18.840 --> 00:49:21.200
- Sure, well, even Python virtual environments


00:49:21.200 --> 00:49:24.440
can get weird where you can set environment variables


00:49:24.440 --> 00:49:27.000
that get set during the activation


00:49:27.000 --> 00:49:28.360
of the virtual environment, right?


00:49:28.360 --> 00:49:29.880
Like I don't think many people do that


00:49:29.880 --> 00:49:32.360
'cause it's transient, but it could.


00:49:32.360 --> 00:49:35.440
- We also have a pixie shell command.


00:49:35.440 --> 00:49:37.360
So if you want to have that experience


00:49:37.360 --> 00:49:39.440
of like an activated environment,


00:49:39.440 --> 00:49:43.440
you can use pixie shell and then it is like basically a shell


00:49:43.440 --> 00:49:45.960
that acts like an activated environment.


00:49:45.960 --> 00:49:47.480
Like Poetry has the same and many other.


00:49:47.480 --> 00:49:48.440
- Yeah, sure.


00:49:48.440 --> 00:49:55.000
Now, the example here shows like I'm in the top level


00:49:55.000 --> 00:49:56.840
of the project and I say pixie run.


00:49:56.840 --> 00:49:59.360
What if I'm like three directories down?


00:49:59.920 --> 00:50:01.880
I say pixie run, what happens then?


00:50:01.880 --> 00:50:05.120
- Yeah, then the exact same thing will happen


00:50:05.120 --> 00:50:07.720
because pixie runs from the root of the project


00:50:07.720 --> 00:50:10.840
and all your tasks are by default running


00:50:10.840 --> 00:50:12.080
from the root of the project.


00:50:12.080 --> 00:50:15.720
So you define them with the path in your project


00:50:15.720 --> 00:50:19.680
as they are always, and then where you are,


00:50:19.680 --> 00:50:23.640
you can run those tasks as they are.


00:50:23.640 --> 00:50:26.080
But if you want to run something in that directory,


00:50:26.080 --> 00:50:29.640
you can just use pixie run and then your own commands


00:50:29.640 --> 00:50:32.240
to act on that directory.


00:50:32.240 --> 00:50:35.040
There's this other way of using it.


00:50:35.040 --> 00:50:40.040
Like the pixie itself will run down the path that you're in


00:50:40.040 --> 00:50:44.120
and we'll find the first pixie project that it encounters.


00:50:44.120 --> 00:50:47.800
And for instance, pixie itself has some examples.


00:50:47.800 --> 00:50:50.000
So if you move into the examples directory


00:50:50.000 --> 00:50:51.840
and then in one of the examples,


00:50:51.840 --> 00:50:53.960
those are their own pixie project.


00:50:53.960 --> 00:50:56.440
So if you run it there, pixie run start,


00:50:56.440 --> 00:50:59.240
it will start the example instead of the--


00:50:59.240 --> 00:51:00.080
- Interesting.


00:51:00.080 --> 00:51:02.920
So you could have a nested one, like there's a main one,


00:51:02.920 --> 00:51:06.440
but then inside you could have a little sub pixie projects.


00:51:06.440 --> 00:51:11.360
Yeah, a little bit like Node and NPM in that regard.


00:51:11.360 --> 00:51:12.200
- Yeah.


00:51:12.200 --> 00:51:17.920
- We have an issue that's open about mono repo support.


00:51:17.920 --> 00:51:19.760
- Yeah, so I was gonna say, this sounds like,


00:51:19.760 --> 00:51:21.400
yeah, this sounds like a really good idea


00:51:21.400 --> 00:51:22.880
for mono repo support.


00:51:23.840 --> 00:51:27.440
- So there's a different problem


00:51:27.440 --> 00:51:29.560
that you normally would mono repos


00:51:29.560 --> 00:51:32.200
have some shared dependencies.


00:51:32.200 --> 00:51:35.720
So if you, for instance,


00:51:35.720 --> 00:51:39.160
have in your root of your repository,


00:51:39.160 --> 00:51:42.440
you have Python dependency defined,


00:51:42.440 --> 00:51:47.400
then you want that shared between all the packages,


00:51:47.400 --> 00:51:50.440
yeah, down in your repo tree.


00:51:50.440 --> 00:51:53.200
So that's something we still have to support.


00:51:53.200 --> 00:51:56.280
So right now there are like actual separate projects


00:51:56.280 --> 00:51:59.360
and the pixie tool will just find the first projects


00:51:59.360 --> 00:52:02.320
it encounters, but we need some kind of way


00:52:02.320 --> 00:52:05.680
to define a workspace or mono repo,


00:52:05.680 --> 00:52:07.280
if you would say it like that.


00:52:07.280 --> 00:52:10.000
And then you could like link those environments together.


00:52:10.000 --> 00:52:13.120
And if you start a lower level one,


00:52:13.120 --> 00:52:16.800
you would start the main one with it


00:52:16.800 --> 00:52:18.280
or something like that.


00:52:18.280 --> 00:52:19.640
- Got it, all right.


00:52:19.640 --> 00:52:21.720
Look at the dependencies of the top one


00:52:21.720 --> 00:52:22.960
and then you might add some more


00:52:22.960 --> 00:52:25.320
in your little sub project type of thing,


00:52:25.320 --> 00:52:27.000
something like that.


00:52:27.000 --> 00:52:27.960
Well, even what you already have


00:52:27.960 --> 00:52:30.120
sounds pretty excellent for you.


00:52:30.120 --> 00:52:32.400
- Yeah, so currently if you have like a system


00:52:32.400 --> 00:52:34.600
where you have a backend server


00:52:34.600 --> 00:52:36.640
that's completely Python or Rust or whatever,


00:52:36.640 --> 00:52:38.600
you could have that as a separate project


00:52:38.600 --> 00:52:41.600
and then have another project that is like the front end.


00:52:41.600 --> 00:52:44.960
So you do some, you install MPM there or whatever.


00:52:44.960 --> 00:52:48.520
And those are completely separate within your repository


00:52:48.520 --> 00:52:51.840
and the main repository is just some tooling


00:52:51.840 --> 00:52:55.160
to for instance, limit everything


00:52:55.160 --> 00:52:57.160
or something like that,


00:52:57.160 --> 00:52:59.960
or install your base dependencies


00:52:59.960 --> 00:53:02.880
that you wanna use in the complete repository,


00:53:02.880 --> 00:53:05.640
but you could already split it up pretty nicely.


00:53:05.640 --> 00:53:13.400
- Yeah, well, I'm sure if you have a truly large organization


00:53:13.400 --> 00:53:16.520
with the mono repo, which for people that don't know,


00:53:16.520 --> 00:53:18.840
that just means like all the code


00:53:18.840 --> 00:53:21.880
or the whole organization is in one huge repository


00:53:21.880 --> 00:53:23.480
instead of a bunch of projects.


00:53:23.480 --> 00:53:26.000
But dependencies across projects,


00:53:26.000 --> 00:53:28.960
it's just within that kind of that file structure.


00:53:28.960 --> 00:53:30.000
It's a lot.


00:53:30.000 --> 00:53:32.640
I was complaining about having a dependency


00:53:32.640 --> 00:53:35.400
that had two things that went in the same library,


00:53:35.400 --> 00:53:38.040
both lower than and greater than some version number.


00:53:38.040 --> 00:53:41.200
That's for one project.


00:53:41.200 --> 00:53:42.040
You put it all together,


00:53:42.040 --> 00:53:43.680
it's only gonna get more challenging.


00:53:43.680 --> 00:53:46.360
So tools like this, these sub projects and stuff,


00:53:46.360 --> 00:53:47.480
I think could help go like,


00:53:47.480 --> 00:53:49.440
all right, this part needs these things


00:53:49.440 --> 00:53:51.280
'cause that's the data science part.


00:53:51.280 --> 00:53:52.520
This other part needs that thing


00:53:52.520 --> 00:53:54.680
'cause that's the microservice part.


00:53:54.680 --> 00:53:56.960
- Yeah, exactly.


00:53:56.960 --> 00:53:59.800
- Nice.


00:53:59.800 --> 00:54:04.760
So what else do people know about Pixie?


00:54:04.760 --> 00:54:13.120
Taking PRs and contributions?


00:54:13.120 --> 00:54:14.000
- Definitely.


00:54:15.080 --> 00:54:16.760
We also started like pretty early.


00:54:16.760 --> 00:54:19.240
So we love people that test Pixie


00:54:19.240 --> 00:54:23.040
and tell us the feedback on like our Discord channel


00:54:23.040 --> 00:54:25.080
or on like GitHub.


00:54:25.080 --> 00:54:27.680
I think we have discussions open as well and issues.


00:54:27.680 --> 00:54:30.840
Any feedbacks appreciated.


00:54:30.840 --> 00:54:34.200
And we're really like trying to take package management


00:54:34.200 --> 00:54:37.080
to the next level that includes like building packages,


00:54:37.080 --> 00:54:39.120
that includes like package signing,


00:54:39.120 --> 00:54:41.560
stuff like this, security, et cetera.


00:54:43.360 --> 00:54:46.440
There are so many things and issues to work on.


00:54:46.440 --> 00:54:48.640
And I think it's going to be very fun.


00:54:48.640 --> 00:54:49.480
- Yeah.


00:54:49.480 --> 00:54:51.640
- I'm also actually organizing packaging con.


00:54:51.640 --> 00:54:56.600
That's happening in like a week from now actually.


00:54:56.600 --> 00:54:59.200
And really looking forward to that.


00:54:59.200 --> 00:55:03.200
So that's going to be fun to chat with a lot of other.


00:55:03.200 --> 00:55:06.080
- Does it have an online component?


00:55:06.080 --> 00:55:07.400
- Yeah, virtual.


00:55:07.400 --> 00:55:09.640
So it's in Berlin, but it's also hybrid.


00:55:09.640 --> 00:55:12.000
So you can join virtually if you want.


00:55:12.000 --> 00:55:14.960
- Will the videos be on something like YouTube later?


00:55:14.960 --> 00:55:17.720
- Yep, yep, for sure.


00:55:17.720 --> 00:55:18.560
- Okay, cool.


00:55:18.560 --> 00:55:20.080
If the timing lines up,


00:55:20.080 --> 00:55:21.920
you'll have to give me the link to the videos


00:55:21.920 --> 00:55:24.560
and I'll put it into the show notes for people.


00:55:24.560 --> 00:55:27.080
We might somehow miss like the conference runs,


00:55:27.080 --> 00:55:28.440
but the videos aren't yet up.


00:55:28.440 --> 00:55:30.360
But if they are, send me a link


00:55:30.360 --> 00:55:31.560
and we'll make it part of the show


00:55:31.560 --> 00:55:33.320
so people can check it out.


00:55:33.320 --> 00:55:36.880
- And one of Prefix Bas will also talk about


00:55:36.880 --> 00:55:38.640
these Rust crates that we've been building


00:55:38.640 --> 00:55:40.880
and how it all fits together.


00:55:40.880 --> 00:55:42.120
If you want to learn more about that


00:55:42.120 --> 00:55:44.080
and if you want to contribute,


00:55:44.080 --> 00:55:45.880
like also if you want to learn Rust,


00:55:45.880 --> 00:55:48.280
like we're more than happy to kind of like help you,


00:55:48.280 --> 00:55:53.280
like guide you as time permits, obviously, but we-


00:55:53.280 --> 00:55:57.640
- We're trying to be really active on our channels.


00:55:57.640 --> 00:56:00.600
So on GitHub, we have some good first issues.


00:56:00.600 --> 00:56:03.680
And if you have some questions, just ask around.


00:56:03.680 --> 00:56:05.400
And then our Discord, we're very active


00:56:05.400 --> 00:56:10.280
and really try to react as fast as possible to anything.


00:56:10.280 --> 00:56:12.000
- Right at the bottom of prefix.dev,


00:56:12.000 --> 00:56:16.640
you've got your little Discord icon down there.


00:56:16.640 --> 00:56:20.960
So people can click on that to kind of be part of it, right?


00:56:20.960 --> 00:56:21.800
- I think it's also-


00:56:21.800 --> 00:56:22.840
- You try to litter it there.


00:56:22.840 --> 00:56:23.680
Yeah.


00:56:23.680 --> 00:56:28.200
- I see that you, yeah, I see you all both are like me


00:56:28.200 --> 00:56:31.800
and have like decided, not accepted that


00:56:31.800 --> 00:56:34.560
that X Twitter is called X.


00:56:34.560 --> 00:56:36.800
- Yeah.


00:56:36.800 --> 00:56:38.560
- I'm not changing my mind.


00:56:40.200 --> 00:56:42.240
- They should come out with the final logo, right?


00:56:42.240 --> 00:56:44.080
Like that can't be it.


00:56:44.080 --> 00:56:47.040
- I can't be it, it's like a child drew it.


00:56:47.040 --> 00:56:49.240
Like I'm just, this is what I got and it's there.


00:56:49.240 --> 00:56:51.920
Maybe I need, I should probably put an EX Twitter in there


00:56:51.920 --> 00:56:54.800
just for, you know.


00:56:54.800 --> 00:56:57.320
Yeah.


00:56:57.320 --> 00:57:00.920
And then a quick question from Elliot's,


00:57:00.920 --> 00:57:02.680
any meaning behind the name Pixie?


00:57:02.680 --> 00:57:06.280
- We thought very long about the name.


00:57:07.560 --> 00:57:09.760
We had a bunch of different versions,


00:57:09.760 --> 00:57:14.480
like initially we thought PX, just P and X.


00:57:14.480 --> 00:57:16.400
But that was-


00:57:16.400 --> 00:57:17.240
- Have you considered X?


00:57:17.240 --> 00:57:19.400
I can hear you just use that for whatever.


00:57:19.400 --> 00:57:21.480
Just kidding, sorry, back to Twitter for a second.


00:57:21.480 --> 00:57:23.000
- That name is burnt.


00:57:23.000 --> 00:57:23.840
- It is burnt.


00:57:23.840 --> 00:57:28.040
- We also thought about PAX, like P-A-X,


00:57:28.040 --> 00:57:30.600
but that's apparently executable


00:57:30.600 --> 00:57:32.000
that you already have on your system


00:57:32.000 --> 00:57:33.600
if you're using Linux or Mac.


00:57:33.600 --> 00:57:34.440
So that didn't work because-


00:57:34.440 --> 00:57:35.280
- Oh, that'd be tricky.


00:57:35.280 --> 00:57:37.400
- The completion is broken and all of that.


00:57:37.400 --> 00:57:41.760
We thought about P-E-X, I don't know.


00:57:41.760 --> 00:57:44.240
Like we wanted to derive it a little bit


00:57:44.240 --> 00:57:45.240
from the name prefix


00:57:45.240 --> 00:57:47.240
because that's kind of the company name.


00:57:47.240 --> 00:57:50.080
But Pixie seemed really cool


00:57:50.080 --> 00:57:53.320
because it's apparently a magical fairy


00:57:53.320 --> 00:57:56.560
and we can make a package management magic.


00:57:56.560 --> 00:57:57.520
- Yeah, exactly.


00:57:57.520 --> 00:57:58.680
I think the name is great.


00:57:58.680 --> 00:58:01.200
It's short enough to type, it's pretty unique.


00:58:01.200 --> 00:58:04.640
You can, it's somewhat Googleable, right?


00:58:04.640 --> 00:58:06.480
- Yeah, you can pronounce it.


00:58:06.480 --> 00:58:07.320
- Yeah.


00:58:07.320 --> 00:58:09.360
- That was also important to it.


00:58:09.360 --> 00:58:11.440
- Yeah, you don't have to debate,


00:58:11.440 --> 00:58:13.520
is it Pi-Pi or is it Pi-P-I?


00:58:13.520 --> 00:58:14.960
Like, let's say, no, like,


00:58:14.960 --> 00:58:17.480
make it lowercase, it's not an acronym,


00:58:17.480 --> 00:58:19.400
you don't say the letters.


00:58:19.400 --> 00:58:24.240
- And before, like, we created this thing called Micromamba,


00:58:24.240 --> 00:58:27.000
which I don't want to like go into too much detail,


00:58:27.000 --> 00:58:28.840
but a lot of people complained


00:58:28.840 --> 00:58:31.000
about Micromamba being too long to type.


00:58:31.000 --> 00:58:34.560
So we had to stay under the five character limit.


00:58:34.560 --> 00:58:37.520
- Yeah, I think there's value in that.


00:58:37.520 --> 00:58:39.000
There's definitely value in that.


00:58:39.000 --> 00:58:41.040
So let's close out our conversation


00:58:41.040 --> 00:58:42.640
with where you all are headed.


00:58:42.640 --> 00:58:43.520
What's next?


00:58:43.520 --> 00:58:47.760
- Yeah, like, we are super excited


00:58:47.760 --> 00:58:49.920
about a bunch of upcoming features.


00:58:49.920 --> 00:58:52.080
One is definitely what I already mentioned, Pixie Build,


00:58:52.080 --> 00:58:55.200
so that you can build packages right away from Pixie.


00:58:55.200 --> 00:58:57.520
Source--


00:58:57.520 --> 00:59:00.240
- To prepare them for Conda Forge, right?


00:59:00.240 --> 00:59:01.320
- Well, for Conda Forge,


00:59:01.320 --> 00:59:03.720
or like maybe you also have some internal stuff


00:59:03.720 --> 00:59:06.040
for your own private things and stuff.


00:59:06.040 --> 00:59:09.520
And we just want to make that easy,


00:59:09.520 --> 00:59:11.200
because that is currently way too hard


00:59:11.200 --> 00:59:14.200
to like make a Conda packages, like a bunch of steps.


00:59:14.200 --> 00:59:19.600
And that also kind of precludes


00:59:19.600 --> 00:59:22.360
that you could use source and get dependencies


00:59:22.360 --> 00:59:24.680
for like other Pixie projects,


00:59:24.680 --> 00:59:26.120
because basically what we do,


00:59:26.120 --> 00:59:28.240
what we will do in the background is like,


00:59:28.240 --> 00:59:30.520
if you depend on a source dependency


00:59:30.520 --> 00:59:31.480
for another Pixie project,


00:59:31.480 --> 00:59:34.200
we will build it into a like package on the fly


00:59:34.200 --> 00:59:36.080
and then put it into your environment.


00:59:36.080 --> 00:59:40.600
And then like integrating with the PyPI ecosystem,


00:59:40.600 --> 00:59:43.040
that's what we're actually working on the most right now.


00:59:43.040 --> 00:59:46.520
And that is the RIP thing that I told you about.


00:59:46.520 --> 00:59:47.360
- Yeah, that's awesome.


00:59:47.360 --> 00:59:49.360
- Because we just see a lot of need in the community


00:59:49.360 --> 00:59:53.280
to have this, a lot of, yeah,


00:59:53.280 --> 00:59:55.960
projects in the wild are kind of mixing it.


00:59:55.960 --> 00:59:57.760
- Yeah, if you get it working with PyPI,


00:59:57.760 --> 01:00:01.160
I will switch my stuff over and give it a try,


01:00:01.160 --> 01:00:02.000
and see how it works.


01:00:02.000 --> 01:00:03.720
So, but until then I can't, right?


01:00:03.720 --> 01:00:06.960
I've just got, I've got like hundreds of packages


01:00:06.960 --> 01:00:10.200
and a lot of them I'm sure are just unique to PyPI.


01:00:10.200 --> 01:00:16.400
- Yeah, so we are not far away.


01:00:16.400 --> 01:00:18.760
Like I think the hard bits are solved


01:00:18.760 --> 01:00:20.040
and that was like resolving


01:00:20.040 --> 01:00:22.800
because it works quite different from Conda.


01:00:22.800 --> 01:00:25.080
You need to like get the individual wheel files


01:00:25.080 --> 01:00:26.440
to get the metadata, et cetera.


01:00:26.440 --> 01:00:28.160
And like, that doesn't scale


01:00:28.160 --> 01:00:30.080
if you need all the metadata upfront,


01:00:30.080 --> 01:00:31.560
which is actually the case in Conda.


01:00:31.560 --> 01:00:33.320
You have all the metadata upfront,


01:00:33.320 --> 01:00:34.560
but with PyPI you don't.


01:00:34.560 --> 01:00:36.360
And so we had to make the solver lazy.


01:00:36.360 --> 01:00:37.680
We had to make the solver generic


01:00:37.680 --> 01:00:40.200
and we are through that process now.


01:00:40.200 --> 01:00:43.240
And now it's basically just engineering work


01:00:43.240 --> 01:00:46.120
in that sense to integrate it with Pixie.


01:00:46.120 --> 01:00:49.080
But it's going to happen and it's going to be nice, I'm sure.


01:00:49.080 --> 01:00:51.880
Yeah, we also have some ideas of like,


01:00:51.880 --> 01:00:56.880
can we somehow merge Pixie Toml into PyProject Toml


01:00:57.480 --> 01:01:01.920
so that it's like more natural to like Python developers


01:01:01.920 --> 01:01:03.640
and you only need to manage one file.


01:01:03.640 --> 01:01:05.840
And I think PyProject Toml gives us the flexibility


01:01:05.840 --> 01:01:07.600
that we would need to do that.


01:01:07.600 --> 01:01:08.440
- I think it does.


01:01:08.440 --> 01:01:11.320
You've got things like Hatch and others


01:01:11.320 --> 01:01:14.280
that kind of got a way to go in there.


01:01:14.280 --> 01:01:16.040
- Yeah.


01:01:16.040 --> 01:01:18.320
And then we have some other ideas


01:01:18.320 --> 01:01:20.040
that are a bit more out there maybe,


01:01:20.040 --> 01:01:21.280
but or not really,


01:01:21.280 --> 01:01:24.040
but like we already have a set up Pixie action for GitHub.


01:01:24.040 --> 01:01:25.680
That's really nice.


01:01:27.320 --> 01:01:29.400
And then another idea is like,


01:01:29.400 --> 01:01:31.520
how can you go from a virtual environment


01:01:31.520 --> 01:01:34.000
to a Docker image easily?


01:01:34.000 --> 01:01:37.480
So that's also something that we're thinking about.


01:01:37.480 --> 01:01:39.000
- Okay. - These kind of things.


01:01:39.000 --> 01:01:41.640
- But yeah, all very exciting.


01:01:41.640 --> 01:01:42.520
- Awesome.


01:01:42.520 --> 01:01:44.320
- How long has this been around?


01:01:44.320 --> 01:01:45.720
Your blog post is two months old,


01:01:45.720 --> 01:01:48.120
but it's announcing this stuff, so.


01:01:48.120 --> 01:01:52.760
- Yeah, I mean, I think we maybe made the repository public


01:01:52.760 --> 01:01:55.520
a month earlier than the blog post or so,


01:01:55.520 --> 01:01:59.520
but it like prefix as a company


01:01:59.520 --> 01:02:04.080
is like just very little over a year old.


01:02:04.080 --> 01:02:08.000
And that's when we like really started to build the website,


01:02:08.000 --> 01:02:11.480
the platform, Pixie, Rattler and all of these things.


01:02:11.480 --> 01:02:15.520
So I think Pixie we started maybe like five months ago.


01:02:15.520 --> 01:02:18.920
So not too old, still very fresh.


01:02:18.920 --> 01:02:19.760
- Yeah, yeah.


01:02:19.760 --> 01:02:22.880
It still has that new software smell.


01:02:22.880 --> 01:02:25.440
- Yeah. (laughing)


01:02:25.440 --> 01:02:29.440
- Yeah, I hope we don't get the, yeah, like.


01:02:29.440 --> 01:02:30.280
- The old and moldy stuff.


01:02:30.280 --> 01:02:32.280
- But we also know how to, yeah.


01:02:32.280 --> 01:02:33.400
- You don't want that.


01:02:33.400 --> 01:02:37.160
- But still, like personally,


01:02:37.160 --> 01:02:40.160
I'm very surprised how stable it is already.


01:02:40.160 --> 01:02:43.640
And I think that's partly due to the use of Rust


01:02:43.640 --> 01:02:47.520
and the fact that we can very heavily check


01:02:47.520 --> 01:02:51.240
some of the inner workings of the tool before we ship it.


01:02:51.240 --> 01:02:53.000
- Yeah.


01:02:54.080 --> 01:02:56.000
Well, it looks like it's off to a really good start.


01:02:56.000 --> 01:02:57.440
I like a lot of the ideas here.


01:02:57.440 --> 01:02:59.880
So yeah, keep up the good work.


01:02:59.880 --> 01:03:02.680
Before we wrap it up, we're basically out of time,


01:03:02.680 --> 01:03:07.680
but you know, there's the,


01:03:07.680 --> 01:03:09.920
always the open source dream of,


01:03:09.920 --> 01:03:13.120
I'm gonna build a project, it's gonna get super popular.


01:03:13.120 --> 01:03:15.440
The dream used to be,


01:03:15.440 --> 01:03:18.560
I'm gonna do some consulting around it, right?


01:03:18.560 --> 01:03:21.200
I've created Project X, Project X is popular


01:03:21.200 --> 01:03:23.160
so I can charge high consulting rates.


01:03:23.160 --> 01:03:24.560
That's the dream of the 90s.


01:03:24.560 --> 01:03:26.080
I think the new dream is,


01:03:26.080 --> 01:03:29.040
I'm going to start a company around my project


01:03:29.040 --> 01:03:31.760
and have some kind of open core model


01:03:31.760 --> 01:03:33.360
and something interesting there.


01:03:33.360 --> 01:03:36.680
You guys have prefix.dev.


01:03:36.680 --> 01:03:38.240
What's the dream for you?


01:03:38.240 --> 01:03:40.080
How are you approaching this?


01:03:40.080 --> 01:03:42.120
I think a ton of people would be interested


01:03:42.120 --> 01:03:45.520
to just hear how did you make that happen, you know?


01:03:45.520 --> 01:03:49.560
- So you saved the hardest question for last.


01:03:49.560 --> 01:03:52.240
- You don't have to answer it,


01:03:52.240 --> 01:03:54.200
but I do think it's interesting, yeah.


01:03:54.200 --> 01:03:59.800
- I think package management is a hard problem


01:03:59.800 --> 01:04:04.560
and there are lots of sort of sub problems


01:04:04.560 --> 01:04:07.920
that I would say enterprise customers


01:04:07.920 --> 01:04:09.640
in a way are willing to pay for.


01:04:09.640 --> 01:04:13.040
That includes like security,


01:04:13.040 --> 01:04:16.720
managed repositories, let's say,


01:04:16.720 --> 01:04:19.320
like basically Red Hats and like,


01:04:19.320 --> 01:04:21.080
more or less Red Hats product


01:04:21.080 --> 01:04:22.920
is that they have just like,


01:04:22.920 --> 01:04:26.560
I know five or 10 years or something like of support


01:04:26.560 --> 01:04:30.600
for like old versions of packages for enterprise customers.


01:04:30.600 --> 01:04:34.760
And I think we have a pretty interesting approach


01:04:34.760 --> 01:04:38.560
to package management that is pretty easy to kind of grasp.


01:04:38.560 --> 01:04:43.000
And like part of why we want to make PixieBuild a thing


01:04:43.000 --> 01:04:45.080
is also because we want people to make more packages


01:04:45.080 --> 01:04:46.480
and then upload them to our website


01:04:46.480 --> 01:04:49.880
and kind of grow this entire thing in popularity


01:04:49.880 --> 01:04:54.400
and make it super useful so that we hopefully end up


01:04:54.400 --> 01:04:57.760
with customers that are supporting our work.


01:04:57.760 --> 01:04:59.120
- Awesome.


01:04:59.120 --> 01:05:01.080
Well, good luck to both of you


01:05:01.080 --> 01:05:02.440
and thanks for being on the show


01:05:02.440 --> 01:05:04.200
to share what you're up to.


01:05:04.200 --> 01:05:05.400
- Sure.


01:05:05.400 --> 01:05:06.240
Thank you.


01:05:06.240 --> 01:05:07.080
- Yep, bye all.

