WEBVTT

00:00:00.000 --> 00:00:02.800
- Hello, YouTube.


00:00:02.800 --> 00:00:04.240
Hello, Chris.


00:00:04.240 --> 00:00:05.080
- Hey, Michael.


00:00:05.080 --> 00:00:08.840
- Hey, great to have you here on the live stream for now.


00:00:08.840 --> 00:00:09.840
And those of you watching,


00:00:09.840 --> 00:00:14.840
please put comments and thoughts out into the live chat.


00:00:14.840 --> 00:00:18.760
And if you're watching later, yeah, well, thanks for watching.


00:00:18.760 --> 00:00:21.240
So let's kick this off, Chris.


00:00:21.240 --> 00:00:23.520
Chris, welcome to Talk Python To Me.


00:00:23.520 --> 00:00:24.520
- Yeah, thanks for having me.


00:00:24.520 --> 00:00:25.740
Happy to be here.


00:00:25.740 --> 00:00:27.120
- Yeah, I'm happy to have you here.


00:00:27.120 --> 00:00:28.080
It's gonna be a lot of fun.


00:00:28.080 --> 00:00:32.380
we're gonna talk a lot of data engineering things,


00:00:32.380 --> 00:00:34.860
try to loop that back to the more traditional


00:00:34.860 --> 00:00:36.140
software development side.


00:00:36.140 --> 00:00:39.520
You have a really cool open source project


00:00:39.520 --> 00:00:41.420
and startup in Prefect.


00:00:41.420 --> 00:00:44.200
And we're both gonna talk about the product


00:00:44.200 --> 00:00:48.220
as well as making an open source successful business model,


00:00:48.220 --> 00:00:49.900
which is really cool.


00:00:49.900 --> 00:00:52.740
I'm very into that and that's very important to me.


00:00:52.740 --> 00:00:55.500
And I love to highlight cases of people doing that well.


00:00:55.500 --> 00:00:57.580
It looks like you all are.


00:00:57.580 --> 00:00:58.420
- Oh, excellent, yeah.


00:00:58.420 --> 00:01:00.460
It's a, as we'll see as we get into it,


00:01:00.460 --> 00:01:03.500
it's a core part of how we view the world.


00:01:03.500 --> 00:01:04.820
- Yeah, that's awesome.


00:01:04.820 --> 00:01:06.220
Before we get to all that though,


00:01:06.220 --> 00:01:07.380
let's start with your story.


00:01:07.380 --> 00:01:10.060
How'd you get into programming and Python?


00:01:10.060 --> 00:01:12.700
- Hoo, so I think like a lot of,


00:01:12.700 --> 00:01:14.020
so I was born in the '80s,


00:01:14.020 --> 00:01:16.000
so like a lot of people in my generation, right,


00:01:16.000 --> 00:01:19.180
we got into HTML and building websites


00:01:19.180 --> 00:01:20.860
on AngelFire and Geocities.


00:01:20.860 --> 00:01:22.720
So, you know, from the early days,


00:01:22.720 --> 00:01:25.460
I was into playing around with computers.


00:01:25.460 --> 00:01:29.820
I would say didn't really get into Python


00:01:29.820 --> 00:01:34.140
until probably high school is when I first started dabbling.


00:01:34.140 --> 00:01:37.180
And it was really just, I was working at a bank.


00:01:37.180 --> 00:01:39.060
I was like trying to automate some small things


00:01:39.060 --> 00:01:41.720
and to be clear, I did not get very far.


00:01:41.720 --> 00:01:46.380
It was a mildly successful undertaking.


00:01:46.380 --> 00:01:48.180
And then college kind of similar story.


00:01:48.180 --> 00:01:49.540
Like it was one of those things that I just would,


00:01:49.540 --> 00:01:51.540
I had a couple of books, I would play around with it.


00:01:51.540 --> 00:01:53.280
It was always just a fun activity for me,


00:01:53.280 --> 00:01:56.880
but I never had any serious focus on it.


00:01:56.880 --> 00:01:59.740
I think in college, when I started to get into


00:01:59.740 --> 00:02:01.280
really econometrics,


00:02:01.280 --> 00:02:03.520
is when I started to play more seriously


00:02:03.520 --> 00:02:06.020
and start to try to understand some of the


00:02:06.020 --> 00:02:07.920
performance implications of what I was doing


00:02:07.920 --> 00:02:09.860
and things like that.


00:02:09.860 --> 00:02:14.860
And then taking kind of the next level in grad school,


00:02:14.860 --> 00:02:17.440
a friend of mine and myself


00:02:17.440 --> 00:02:19.080
thought that we were smart enough


00:02:19.080 --> 00:02:21.000
to build some machine learning models for trading.


00:02:21.000 --> 00:02:23.200
And we did all of that in combination of Python


00:02:23.200 --> 00:02:25.120
and R, surprise.


00:02:25.120 --> 00:02:27.320
- Okay, that's amazing, yeah.


00:02:27.320 --> 00:02:30.400
- We lost some money, but it was a great lesson


00:02:30.400 --> 00:02:34.680
in understanding data and exactly what you're doing.


00:02:34.680 --> 00:02:38.880
And genuinely, so I was studying pure math in grad school


00:02:38.880 --> 00:02:42.800
and that experiment and kind of the actual


00:02:42.800 --> 00:02:45.280
like visceral outcome of it is what really got me


00:02:45.280 --> 00:02:47.120
into studying machine learning more deeply.


00:02:47.120 --> 00:02:47.960
'Cause I was like, wait a second,


00:02:47.960 --> 00:02:49.420
there's something interesting here.


00:02:49.420 --> 00:02:51.140
And so started to dig in more.


00:02:53.000 --> 00:02:55.480
That must have been a really cool experience.


00:02:55.480 --> 00:02:56.920
Even if you did lose money.


00:02:56.920 --> 00:03:02.140
- It's important to put some skin in the game.


00:03:02.140 --> 00:03:03.200
- Exactly, right?


00:03:03.200 --> 00:03:06.720
Like it's a hobby until you start to take it seriously


00:03:06.720 --> 00:03:07.760
and try to get real outcomes.


00:03:07.760 --> 00:03:12.760
Because there's always these layers or these levels, right?


00:03:12.760 --> 00:03:14.840
Like I'm going to learn this thing


00:03:14.840 --> 00:03:16.760
and poke around and kind of get it to work.


00:03:16.760 --> 00:03:20.040
Or I'm gonna learn this thing so that it actually works.


00:03:20.040 --> 00:03:22.560
Or I'm gonna learn this thing so I can explain it


00:03:22.560 --> 00:03:25.520
When there's three ways, they all kind of do the same thing.


00:03:25.520 --> 00:03:27.880
I can explain when to choose which one, right?


00:03:27.880 --> 00:03:29.920
And the more seriously you take it


00:03:29.920 --> 00:03:30.880
and the more is on the line,


00:03:30.880 --> 00:03:34.360
the more you kind of, you get that real understanding of it.


00:03:34.360 --> 00:03:38.400
- I mean, just, I know that this is a little off of Python,


00:03:38.400 --> 00:03:40.520
but I think that resonates with me so much


00:03:40.520 --> 00:03:43.120
on every dimension when it comes to learning something.


00:03:43.120 --> 00:03:46.120
You have to, it's not a passive activity.


00:03:46.120 --> 00:03:46.960
You have to engage with it.


00:03:46.960 --> 00:03:49.580
And it's, in my opinion, the only way to learn anything,


00:03:49.580 --> 00:03:52.040
math, programming, business, whatever.


00:03:52.040 --> 00:03:55.400
- Totally agree.


00:03:55.400 --> 00:04:00.040
Speaking of math, you have a math background, right?


00:04:00.040 --> 00:04:02.080
- I do, proudly so.


00:04:02.080 --> 00:04:02.920
- Yeah, awesome.


00:04:02.920 --> 00:04:04.360
So do I.


00:04:04.360 --> 00:04:08.200
I just last episode spoke with the SymPy,


00:04:08.200 --> 00:04:11.920
S-Y-M-Py guys about doing symbolic math with Python.


00:04:11.920 --> 00:04:14.480
And that was pretty fascinating stuff.


00:04:14.480 --> 00:04:17.000
Have you played with any of the symbolic stuff?


00:04:17.000 --> 00:04:18.320
- I have played with it, yeah.


00:04:18.320 --> 00:04:20.220
I had no serious project,


00:04:20.220 --> 00:04:21.720
like genuinely just playing around with it


00:04:21.720 --> 00:04:24.840
to see kind of what it's capable of, it is really cool.


00:04:24.840 --> 00:04:25.680
- Yeah.


00:04:25.680 --> 00:04:28.040
- I will definitely, I will go look up that episode, yeah.


00:04:28.040 --> 00:04:28.880
- Awesome.


00:04:28.880 --> 00:04:30.720
What kind of math did you study?


00:04:30.720 --> 00:04:33.480
- So I started my PhD program


00:04:33.480 --> 00:04:35.120
focusing on arithmetic geometry,


00:04:35.120 --> 00:04:36.800
which for people out there,


00:04:36.800 --> 00:04:39.800
it's one of the more abstract forms of math.


00:04:39.800 --> 00:04:42.000
I still really like that stuff a lot, honestly,


00:04:42.000 --> 00:04:44.120
but what I found was that--


00:04:44.120 --> 00:04:46.360
- Is that like manifolds and stuff like that?


00:04:46.360 --> 00:04:49.880
- Not quite, it's a little bit,


00:04:49.880 --> 00:04:51.880
So they use a lot of the same,


00:04:51.880 --> 00:04:55.040
a lot of their arguments are kind of by analogy


00:04:55.040 --> 00:04:56.600
with things like manifolds,


00:04:56.600 --> 00:05:00.240
but you're studying geometric structures


00:05:00.240 --> 00:05:03.440
that are way more discrete than a manifold.


00:05:03.440 --> 00:05:08.440
And so like the spectrum of prime numbers on the integers


00:05:08.440 --> 00:05:11.600
is like a geometric object


00:05:11.600 --> 00:05:13.280
for the purposes of arithmetic geometry.


00:05:13.280 --> 00:05:15.320
And, you know, hard to visualize,


00:05:15.320 --> 00:05:17.680
but it just turns out a lot of the formal definitions


00:05:17.680 --> 00:05:22.320
geometry have these really deep analogs and arithmetic and you can actually


00:05:22.320 --> 00:05:26.080
learn a lot and the most famous example of this that I think a lot of people


00:05:26.080 --> 00:05:29.680
will probably be familiar with this Fermat's last theorem. Yeah that's right.


00:05:29.680 --> 00:05:34.120
So that was all using those techniques yeah that's right. Exactly. So they're


00:05:34.120 --> 00:05:39.000
really heavy-duty to solve very simple two-state problems. Yeah there's there's


00:05:39.000 --> 00:05:44.640
a really good book about Fermat's last theorem by this guy named... seems like a


00:05:44.640 --> 00:05:49.400
a mole or something like that.


00:05:49.400 --> 00:05:50.600
Maybe I'll find and put the show notes.


00:05:50.600 --> 00:05:51.980
Just absolutely fascinating book.


00:05:51.980 --> 00:05:54.340
Really, and it just talks about the history.


00:05:54.340 --> 00:05:55.860
Yeah, yeah, it really talks about the struggle


00:05:55.860 --> 00:05:58.540
that guy who solved it went through.


00:05:58.540 --> 00:06:01.420
Cool, well, how about now?


00:06:01.420 --> 00:06:02.260
You're at Prefect, right?


00:06:02.260 --> 00:06:03.560
What do you do day to day?


00:06:03.560 --> 00:06:07.540
- Oh, so, oh, actually, I didn't finish


00:06:07.540 --> 00:06:08.540
where I went with grad school,


00:06:08.540 --> 00:06:10.580
which is relevant to how kind of I got to Prefect,


00:06:10.580 --> 00:06:13.820
which I ended up going into optimization theory,


00:06:13.820 --> 00:06:16.380
still on the pure side, so still very much proof-based,


00:06:16.380 --> 00:06:18.460
but that was right when machine learning


00:06:18.460 --> 00:06:20.100
was becoming a thing, right after I had done


00:06:20.100 --> 00:06:22.660
this experiment with my friend and started getting into it.


00:06:22.660 --> 00:06:24.700
And so that's kind of how I started


00:06:24.700 --> 00:06:27.180
to head more towards industry.


00:06:27.180 --> 00:06:31.340
And for me, I consider myself a problem solver.


00:06:31.340 --> 00:06:34.060
And so I was always very good at solving problems,


00:06:34.060 --> 00:06:36.300
but I'll admit I wasn't always the best


00:06:36.300 --> 00:06:38.160
at maybe like justifying a grant proposal


00:06:38.160 --> 00:06:39.420
or something like that.


00:06:39.420 --> 00:06:40.820
And so that's kind of when I started


00:06:40.820 --> 00:06:42.420
to think more about industry


00:06:42.420 --> 00:06:44.720
and started doing some consulting to test the waters.


00:06:44.720 --> 00:06:48.080
And so anyways, long story short, got into data,


00:06:48.080 --> 00:06:49.200
got into machine learning,


00:06:49.200 --> 00:06:51.520
got into tooling for machine learning,


00:06:51.520 --> 00:06:55.480
got into backend engineering for hosting the tooling,


00:06:55.480 --> 00:06:56.320
et cetera, et cetera.


00:06:56.320 --> 00:06:59.400
And then met with Jeremiah, who's the CEO of Prefect.


00:06:59.400 --> 00:07:01.720
- Just stucks you in, right?


00:07:01.720 --> 00:07:03.960
- Exactly, it's a black hole.


00:07:03.960 --> 00:07:04.800
- Yeah, cool.


00:07:04.800 --> 00:07:10.480
And so you started out working at banks doing


00:07:12.160 --> 00:07:15.800
sort of homegrown data engineering, right?


00:07:15.800 --> 00:07:18.640
Is that maybe a good way to describe it?


00:07:18.640 --> 00:07:20.080
- Homegrown a lot of things, yes.


00:07:20.080 --> 00:07:22.240
So homegrown data engineering, one of them,


00:07:22.240 --> 00:07:26.120
homegrown model building was another big, big thing,


00:07:26.120 --> 00:07:28.680
homegrown data governance at one point,


00:07:28.680 --> 00:07:32.720
homegrown data platform.


00:07:32.720 --> 00:07:35.480
And actually the data platform is particularly interesting


00:07:35.480 --> 00:07:38.440
because looking back, it kind of felt like a microcosm


00:07:38.440 --> 00:07:41.360
of a lot of the tool explosion we've seen lately,


00:07:41.360 --> 00:07:44.360
where the platform we were building was for data scientists


00:07:44.360 --> 00:07:47.260
to deploy their model to and connect it up to data sources


00:07:47.260 --> 00:07:48.600
that we would keep up to date


00:07:48.600 --> 00:07:50.360
'cause that's where the data engineering comes in


00:07:50.360 --> 00:07:53.120
and then business analysts are the actual downstream users.


00:07:53.120 --> 00:07:55.600
And they would interact with these models through an API


00:07:55.600 --> 00:07:58.640
that we would build for them on top of the models,


00:07:58.640 --> 00:08:00.060
but it was still in Python.


00:08:00.060 --> 00:08:02.480
So they would actually have to write Python,


00:08:02.480 --> 00:08:03.480
which was really interesting.


00:08:03.480 --> 00:08:04.320
So we got to teach them classes on it.


00:08:04.320 --> 00:08:05.840
- That is interesting.


00:08:05.840 --> 00:08:07.120
Yeah, yeah.


00:08:07.120 --> 00:08:10.560
I've seen non-developer types do that before.


00:08:10.560 --> 00:08:13.480
I've seen it in like a real time stock trading,


00:08:13.480 --> 00:08:16.680
you know, like brokerages and hedge funds.


00:08:16.680 --> 00:08:17.520
- Right.


00:08:17.520 --> 00:08:19.840
- And yeah, it's like, you're gonna learn Python


00:08:19.840 --> 00:08:22.080
because you need to talk to the tool.


00:08:22.080 --> 00:08:24.160
I've also seen people learn SQL


00:08:24.160 --> 00:08:26.080
who have no business knowing SQL otherwise,


00:08:26.080 --> 00:08:27.840
but for sort of a similar reasons.


00:08:27.840 --> 00:08:28.680
- Yeah, yeah.


00:08:28.680 --> 00:08:31.520
And SQL is a little bit more approachable, I think, yeah.


00:08:31.520 --> 00:08:34.600
But Python is just a little,


00:08:34.600 --> 00:08:37.120
it's easier to kind of shoot yourself in the foot with Python


00:08:37.120 --> 00:08:37.960
I think if you don't really know Python.


00:08:37.960 --> 00:08:39.560
- Well, it's just more open-ended, right?


00:08:39.560 --> 00:08:40.400
- Yeah.


00:08:40.400 --> 00:08:42.080
It's way more open-ended.


00:08:42.080 --> 00:08:43.040
Cool.


00:08:43.040 --> 00:08:47.920
All right, so you talk a lot about negative engineering concepts


00:08:47.920 --> 00:08:53.600
and how you've structured Prefect to help alleviate, eliminate,


00:08:53.600 --> 00:08:56.560
solve, prevent some of those problems.


00:08:56.560 --> 00:09:00.960
So maybe we should start the conversation in sort of twofold.


00:09:00.960 --> 00:09:04.720
Maybe give us a quick overview of what you might call data engineering,


00:09:04.720 --> 00:09:07.320
and then what are these negative engineering things that


00:09:07.320 --> 00:09:09.160
live in that space?


00:09:09.160 --> 00:09:12.540
So yeah, and I think these two concepts are related,


00:09:12.540 --> 00:09:14.860
but I think negative engineering is definitely more general.


00:09:14.860 --> 00:09:16.860
So let me start with negative engineering


00:09:16.860 --> 00:09:18.780
and then we'll kind of drill in.


00:09:18.780 --> 00:09:21.220
So negative engineering, we've got a blog post


00:09:21.220 --> 00:09:24.880
that we published, I think three years ago at this point,


00:09:24.880 --> 00:09:26.500
on negative engineering.


00:09:26.500 --> 00:09:28.380
Encourage anyone who's interested, go read it.


00:09:28.380 --> 00:09:30.820
I think since we have released that blog post,


00:09:30.820 --> 00:09:33.020
we have refined kind of our own understanding


00:09:33.020 --> 00:09:33.900
and thinking about this.


00:09:33.900 --> 00:09:35.700
And one thing that I kind of noticed


00:09:35.700 --> 00:09:38.960
is negative engineering got this sentiment,


00:09:38.960 --> 00:09:40.960
It's just anything I don't really like to do.


00:09:40.960 --> 00:09:42.960
And that's not actually--


00:09:42.960 --> 00:09:44.960
Those are negative engineering, I'll tell you what.


00:09:44.960 --> 00:09:46.960
Got nothing done in those meetings.


00:09:46.960 --> 00:09:48.960
Exactly. And like, "Eh, I don't think so."


00:09:48.960 --> 00:09:50.960
And so, yeah, to be really precise


00:09:50.960 --> 00:09:52.960
with the way we think about this, positive engineering


00:09:52.960 --> 00:09:54.960
is code or interacting


00:09:54.960 --> 00:09:56.960
with software systems that you do


00:09:56.960 --> 00:09:58.960
explicitly to achieve an outcome.


00:09:58.960 --> 00:10:00.960
So, I


00:10:00.960 --> 00:10:02.960
run a SQL query


00:10:02.960 --> 00:10:04.960
to populate my


00:10:04.960 --> 00:10:06.960
dashboard or something like that.


00:10:06.960 --> 00:10:10.480
very concrete connection to some sort of outcome.


00:10:10.480 --> 00:10:13.720
And then negative engineering are code you write,


00:10:13.720 --> 00:10:17.480
systems you interact with that ensure those outcomes.


00:10:17.480 --> 00:10:20.160
I in, so like insurance.


00:10:20.160 --> 00:10:23.400
And so defensive code is a great example


00:10:23.400 --> 00:10:24.520
of negative engineering.


00:10:24.520 --> 00:10:26.000
It's something that you're writing.


00:10:26.000 --> 00:10:28.440
When you're writing those try accepts and everything,


00:10:28.440 --> 00:10:32.760
you're really hedging against anticipated failure modes


00:10:32.760 --> 00:10:34.600
that you're trying to account for right now.


00:10:34.600 --> 00:10:36.080
- The data was always well formed.


00:10:36.080 --> 00:10:39.680
would never crash. If the servers was always up, it would never crash.


00:10:39.680 --> 00:10:41.640
Exactly.


00:10:41.640 --> 00:10:42.160
Exactly.


00:10:42.160 --> 00:10:45.160
You get the reports, the sentry messages or whatever.


00:10:45.160 --> 00:10:50.880
Exactly. And so observability, I think, complete negative engineering.


00:10:50.880 --> 00:10:53.200
Observability is not something you do for its own sake.


00:10:53.200 --> 00:10:58.040
You do it in anticipation of an unknown future failure mode.


00:10:58.040 --> 00:10:59.880
It's a pretty negative outcome.


00:10:59.880 --> 00:11:01.000
You want to avoid.


00:11:01.000 --> 00:11:04.000
Exactly. Yeah, failure is like the first class citizen here, right?


00:11:04.280 --> 00:11:08.280
something failed and you want to figure out what happens so that you can fix it,


00:11:08.280 --> 00:11:11.560
to really tie it to insurance even more directly,


00:11:11.560 --> 00:11:18.600
all of the things we're talking about are situations where a small error has a


00:11:18.600 --> 00:11:21.880
disproportionately large negative impact on an outcome.


00:11:21.880 --> 00:11:27.240
So scheduling is an example here. If you have Cron running on a server,


00:11:27.240 --> 00:11:31.720
running a Python script, and something you do, maybe you load just


00:11:31.720 --> 00:11:35.080
far too much data in your script and the machine crashes out of memory.


00:11:35.080 --> 00:11:37.120
You don't get an alert.


00:11:37.120 --> 00:11:38.360
You don't get--


00:11:38.360 --> 00:11:41.240
You wake up the next morning and 30 jobs have not run.


00:11:41.240 --> 00:11:42.320
You don't know why.


00:11:42.320 --> 00:11:43.680
You have to figure out why.


00:11:43.680 --> 00:11:45.800
By the time you figure it out, you're five hours deep.


00:11:45.800 --> 00:11:47.520
Maybe not that long, but two hours deep.


00:11:47.520 --> 00:11:49.440
And using a service or a system--


00:11:49.440 --> 00:11:50.600
We'll talk about the details.


00:11:50.600 --> 00:11:54.480
Like Prefect or some other type of observability negative engineering tool,


00:11:54.480 --> 00:11:56.480
you would potentially get a text alert.


00:11:56.480 --> 00:11:59.640
Or at a minimum, you would wake up and immediately see,


00:11:59.640 --> 00:12:00.760
"Oh, that happened at 1 a.m.


00:12:00.760 --> 00:12:02.600
I know what happened, let me just fix it really quickly.


00:12:02.600 --> 00:12:04.120
And you're back up to speed.


00:12:04.120 --> 00:12:05.560
- Interesting.


00:12:05.560 --> 00:12:06.400
- Yeah.


00:12:06.400 --> 00:12:07.400
- Frank on the audience says,


00:12:07.400 --> 00:12:10.640
"Defensive programming, that means good handling


00:12:10.640 --> 00:12:12.040
on exceptions and so forth."


00:12:12.040 --> 00:12:14.360
And I think that's interesting, Frank.


00:12:14.360 --> 00:12:18.160
I think I do agree, but it sounds to me, Chris,


00:12:18.160 --> 00:12:20.240
like you're even talking like way broader.


00:12:20.240 --> 00:12:23.560
Like, do you, if you're writing an API,


00:12:23.560 --> 00:12:25.760
do you have to even think about hosting that


00:12:25.760 --> 00:12:28.200
or making sure that it's scaled out correct?


00:12:28.200 --> 00:12:32.320
or like, you know, observability as tracking error reporting


00:12:32.320 --> 00:12:34.080
in the broad sense of,


00:12:34.080 --> 00:12:36.320
sure, you should be doing the small defensive programming,


00:12:36.320 --> 00:12:39.000
but also to deal with these negative engineering problems.


00:12:39.000 --> 00:12:41.160
But like, there's whole businesses


00:12:41.160 --> 00:12:43.040
around dealing with segments of it.


00:12:43.040 --> 00:12:45.040
- Exactly, exactly.


00:12:45.040 --> 00:12:48.000
And I think putting a word to it,


00:12:48.000 --> 00:12:50.240
as simple as it may seem,


00:12:50.240 --> 00:12:52.880
really helps, especially for building a company


00:12:52.880 --> 00:12:54.920
and a product, like refine and target.


00:12:54.920 --> 00:12:56.680
Like what are the features that are important to us


00:12:56.680 --> 00:12:59.280
and which ones are not important, at least at this time.


00:12:59.280 --> 00:13:02.160
And especially in orchestration and data engineering,


00:13:02.160 --> 00:13:05.080
I mean, it's very tempting to build cool stuff


00:13:05.080 --> 00:13:06.480
'cause there's lots of cool stuff you can build,


00:13:06.480 --> 00:13:09.080
but are you guaranteeing an outcome?


00:13:09.080 --> 00:13:11.040
Are you insuring against some outcome?


00:13:11.040 --> 00:13:12.480
Like, are you sure you know exactly


00:13:12.480 --> 00:13:14.960
what you're providing here when you build that cool thing?


00:13:14.960 --> 00:13:16.560
- Right.


00:13:16.560 --> 00:13:19.680
So you guys use, you try to identify some of these areas


00:13:19.680 --> 00:13:21.200
that have negative engineering


00:13:21.200 --> 00:13:23.000
that data engineers run into,


00:13:23.000 --> 00:13:24.760
and you're like, how do we build a framework


00:13:24.760 --> 00:13:28.320
such that they don't have to worry about or think about that.


00:13:28.320 --> 00:13:29.440
- Exactly, exactly.


00:13:29.440 --> 00:13:31.600
And so for data engineering,


00:13:31.600 --> 00:13:36.600
I think of this as it's any software engineering that you do


00:13:36.600 --> 00:13:41.780
that either moves data, cleans data, or prepares data,


00:13:41.780 --> 00:13:44.200
either for another person to ingest


00:13:44.200 --> 00:13:46.360
or maybe another system to ingest,


00:13:46.360 --> 00:13:48.160
but it's all the activities surrounding that.


00:13:48.160 --> 00:13:52.280
And I think for, I know maybe not everyone listening


00:13:52.280 --> 00:13:54.400
in the data space specifically,


00:13:54.400 --> 00:13:56.080
So just as the easiest example,


00:13:56.080 --> 00:13:59.000
we have a production database running behind some web server,


00:13:59.000 --> 00:14:01.720
some API, and you want to do analytics on it.


00:14:01.720 --> 00:14:03.320
Well, maybe you're using Postgres,


00:14:03.320 --> 00:14:05.680
not the best analytics database.


00:14:05.680 --> 00:14:07.440
And also you don't want to actually write a query


00:14:07.440 --> 00:14:08.800
that takes down the database.


00:14:08.800 --> 00:14:09.640
So what do you do?


00:14:09.640 --> 00:14:11.520
You take the data out, you put it into BigQuery


00:14:11.520 --> 00:14:12.960
or Snowflake or somewhere else,


00:14:12.960 --> 00:14:14.680
you run your analytics over there.


00:14:14.680 --> 00:14:17.060
- Right, you probably totally change the schemas


00:14:17.060 --> 00:14:20.680
because you want to, in a relational database,


00:14:20.680 --> 00:14:23.320
somewhat in a document database, maybe a little less,


00:14:23.320 --> 00:14:25.100
but definitely in a relational database,


00:14:25.100 --> 00:14:27.040
your job is third normal form.


00:14:27.040 --> 00:14:31.100
Like how do I not have any data that repeats?


00:14:31.100 --> 00:14:34.360
I'll have a 10 way join rather than have something repeat.


00:14:34.360 --> 00:14:37.520
But when you wanna do reporting, those joins are killers.


00:14:37.520 --> 00:14:39.300
You just want like, I wanna do a straight query


00:14:39.300 --> 00:14:43.600
where this column is that and just like wreck,


00:14:43.600 --> 00:14:46.680
wreck the normalization for performance reasons, right?


00:14:46.680 --> 00:14:50.160
You can ask the questions in very interesting ways,


00:14:50.160 --> 00:14:53.040
like many ways in simple queries


00:14:53.040 --> 00:14:55.880
rather than being a SQL master.


00:14:55.880 --> 00:14:56.960
- Exactly, exactly.


00:14:56.960 --> 00:14:59.240
And keeping that system running,


00:14:59.240 --> 00:15:01.720
keeping the data fresh, keeping the schemas in sync,


00:15:01.720 --> 00:15:03.360
that's a lot of work actually.


00:15:03.360 --> 00:15:06.440
And that's one of the classic examples of data engineering.


00:15:06.440 --> 00:15:09.280
There's a lot of other stuff too, but that's the classic.


00:15:09.280 --> 00:15:11.200
- Yeah, one of the things I see stand out,


00:15:11.200 --> 00:15:12.520
I don't want to get the API right away,


00:15:12.520 --> 00:15:14.560
but I just see like coming out of the API


00:15:14.560 --> 00:15:16.960
that you all built is there's like retries,


00:15:16.960 --> 00:15:19.120
like right front and center, like here's a task


00:15:19.120 --> 00:15:22.880
and I want it to retry with this plan, right?


00:15:22.880 --> 00:15:26.080
of this number of times, there's probably like a back off story.


00:15:26.080 --> 00:15:26.580
Mm hmm.


00:15:26.580 --> 00:15:28.040
Yeah, exactly.


00:15:28.040 --> 00:15:32.940
And that's another great example of small error, the tiniest network


00:15:32.940 --> 00:15:36.880
blip, your Kubernetes, I don't know, I've seen cube DNS sometimes just


00:15:36.880 --> 00:15:38.040
doesn't do what it's supposed to do.


00:15:38.040 --> 00:15:40.880
Somebody was flipping over the load balancer and you hit it at just the


00:15:40.880 --> 00:15:42.480
wrong time and there it goes, right?


00:15:42.480 --> 00:15:43.240
Yeah, exactly.


00:15:43.240 --> 00:15:45.960
And now next thing, you know, I mean, a lot of different things can


00:15:45.960 --> 00:15:47.320
happen depending on the script you wrote.


00:15:47.320 --> 00:15:50.520
Maybe you did a lot of good defensive programming yourself and the try


00:15:50.520 --> 00:15:52.260
I accept was a little bit too much.


00:15:52.260 --> 00:15:54.600
And so your next task actually runs


00:15:54.600 --> 00:15:56.320
despite the first one failing.


00:15:56.320 --> 00:15:58.480
And maybe it passes the exception downstream.


00:15:58.480 --> 00:16:00.320
And now you have this cascade of errors


00:16:00.320 --> 00:16:01.720
that you have no idea what they mean.


00:16:01.720 --> 00:16:03.840
And another thing with negative engineering


00:16:03.840 --> 00:16:07.120
is dependency management, making sure that if this fails,


00:16:07.120 --> 00:16:09.120
things that depend on it do not run


00:16:09.120 --> 00:16:11.680
unless they're configured to run only on failure.


00:16:11.680 --> 00:16:13.480
- Yeah, worst case scenario, they say,


00:16:13.480 --> 00:16:15.320
"Yes, this is a good investment, you should buy it."


00:16:15.320 --> 00:16:16.640
Or, "Yes, this is a good decision."


00:16:16.640 --> 00:16:17.840
And they like, it's...


00:16:17.840 --> 00:16:19.640
- Exactly, exactly.


00:16:19.640 --> 00:16:21.640
- Zero, 'cause the task failed to find the price.


00:16:21.640 --> 00:16:23.200
So of course you should buy it.


00:16:23.200 --> 00:16:25.240
- Exactly, you wanna know that it happened


00:16:25.240 --> 00:16:26.560
and make sure that the effect,


00:16:26.560 --> 00:16:28.080
the blast radius is minimized.


00:16:28.080 --> 00:16:29.520
And that's really what it's all about.


00:16:29.520 --> 00:16:31.000
And like retry is a perfect example


00:16:31.000 --> 00:16:32.080
of just one of those small things


00:16:32.080 --> 00:16:34.400
that can cascade in weird, unexpected ways.


00:16:34.400 --> 00:16:37.320
- Yeah, what are some of the other areas of crufter


00:16:37.320 --> 00:16:40.360
of these problems you see in data engineering?


00:16:40.360 --> 00:16:41.760
- Logging is a big one.


00:16:41.760 --> 00:16:43.400
Just having a place where you can see


00:16:43.400 --> 00:16:46.800
some centralized set of important logs.


00:16:46.800 --> 00:16:48.320
- The more you use like Kubernetes


00:16:48.320 --> 00:16:53.120
more like you kind of micro-service it out, the harder it is to know what's going on in


00:16:53.120 --> 00:16:54.120
the logging story.


00:16:54.120 --> 00:17:00.900
Well, right. And the definition we work with in the modern data stack are data tools that


00:17:00.900 --> 00:17:04.800
deliver their feature over an API. And so if you think about that, you're dealing with


00:17:04.800 --> 00:17:11.720
inherently this giant micro-service system that you want to coordinate and see in some


00:17:11.720 --> 00:17:16.360
centralized place in some meaningful way. And collaboration, versioning, those are all


00:17:16.360 --> 00:17:23.560
other things, caching, so just configurable like storage locations for things. And then maybe the


00:17:23.560 --> 00:17:29.800
biggest one that is both simple, but I see people building this internally all the time,


00:17:29.800 --> 00:17:35.000
which is just exposing an API, a parameterized API for just triggering some type of job.


00:17:35.000 --> 00:17:39.400
Next thing you know, it needs to be available, you know, throughout your whole network,


00:17:39.400 --> 00:17:43.000
it needs to be off, it needs to be monitored and tracked and audited.


00:17:43.000 --> 00:17:43.640
Maybe versioned.


00:17:44.520 --> 00:17:46.200
- Yeah. - Maybe version, exactly.


00:17:46.200 --> 00:17:47.040
- Oh my gosh. - Exactly.


00:17:47.040 --> 00:17:48.400
- Yeah. - And it just gets,


00:17:48.400 --> 00:17:49.240
all of a sudden you're like,


00:17:49.240 --> 00:17:53.160
okay, I'm building an entire system and my job is not this.


00:17:53.160 --> 00:17:55.640
- Yeah, it's one of those things that seems so simple.


00:17:55.640 --> 00:17:59.120
Like, I would love it if you would just really help us out,


00:17:59.120 --> 00:18:00.240
you know, Michael here,


00:18:00.240 --> 00:18:02.620
if you could just give me a quick little API


00:18:02.620 --> 00:18:04.160
that we could just call that API.


00:18:04.160 --> 00:18:05.680
I mean, look, I'll just, here's the JSON,


00:18:05.680 --> 00:18:06.960
it's like that big.


00:18:06.960 --> 00:18:09.960
And if I could just call it, boy, things would just unlock.


00:18:09.960 --> 00:18:13.800
And then it's like a holiday and it's not working


00:18:13.800 --> 00:18:16.680
now I'm dealing with like, how did I get this job?


00:18:16.680 --> 00:18:17.520
Right?


00:18:17.520 --> 00:18:18.340
- Right, right.


00:18:18.340 --> 00:18:19.180
- Yeah.


00:18:19.180 --> 00:18:21.160
- And the second someone says just anything,


00:18:21.160 --> 00:18:22.440
you're like, oh, I'm on edge.


00:18:22.440 --> 00:18:23.280
What do you mean?


00:18:23.280 --> 00:18:24.100
Are you sure?


00:18:24.100 --> 00:18:25.320
- Exactly.


00:18:25.320 --> 00:18:26.160
I don't want it.


00:18:26.160 --> 00:18:27.640
Give it to someone else.


00:18:27.640 --> 00:18:29.080
Let's give it to someone else.


00:18:29.080 --> 00:18:30.400
Awesome.


00:18:30.400 --> 00:18:31.240
All right.


00:18:31.240 --> 00:18:32.400
Well, you know, maybe that's a good time


00:18:32.400 --> 00:18:36.120
to talk a little bit more in detail about Prefect.


00:18:36.120 --> 00:18:40.120
So you all have on the GitHub page,


00:18:40.120 --> 00:18:41.240
if I track it down,


00:18:41.240 --> 00:18:44.280
You've got an interesting way to discuss it.


00:18:44.280 --> 00:18:48.380
It says, "Prefect is the new workflow management system


00:18:48.380 --> 00:18:50.780
"designed for modern infrastructure


00:18:50.780 --> 00:18:53.480
"and powered by the open source Prefect Core.


00:18:53.480 --> 00:18:55.580
"Users organize tasks into flows


00:18:55.580 --> 00:18:57.400
"and Prefect takes care of the rest."


00:18:57.400 --> 00:18:58.660
So there's a lot of stuff here


00:18:58.660 --> 00:19:00.380
that I thought might be fun to dive into.


00:19:00.380 --> 00:19:04.860
So new workflow management system


00:19:04.860 --> 00:19:06.980
as opposed to what was there before.


00:19:06.980 --> 00:19:10.340
So maybe we could sort of take this apart a bit.


00:19:10.340 --> 00:19:11.740
- Yeah, so we have--


00:19:11.740 --> 00:19:14.040
- What do you mean by new workflow?


00:19:14.040 --> 00:19:14.880
- We have--


00:19:14.880 --> 00:19:17.060
- I know you also have a new new one coming as well, right?


00:19:17.060 --> 00:19:18.340
- Yeah, yeah, we have new new.


00:19:18.340 --> 00:19:20.660
You always gotta keep rebuilding.


00:19:20.660 --> 00:19:22.880
We have a great post on at least part of this


00:19:22.880 --> 00:19:24.220
that I encourage you to go check out


00:19:24.220 --> 00:19:26.120
called the History of Dataflow Automation


00:19:26.120 --> 00:19:28.740
that really will get, our head of product wrote it,


00:19:28.740 --> 00:19:31.660
and it's just a great kind of tour through the history.


00:19:31.660 --> 00:19:35.900
But so for us, a lot of the different workflows,


00:19:35.900 --> 00:19:36.900
so workflow management, right?


00:19:36.900 --> 00:19:41.900
you have some set of business logic tasks


00:19:41.900 --> 00:19:43.900
that are strung together with some dependency.


00:19:43.900 --> 00:19:46.060
It could be a lot of conditionals or something like that.


00:19:46.060 --> 00:19:47.540
You wanna run it usually on a schedule,


00:19:47.540 --> 00:19:50.060
but sometimes ad hoc or maybe event-based.


00:19:50.060 --> 00:19:53.540
And there's a lot of different systems


00:19:53.540 --> 00:19:55.920
for managing these quote unquote workflows.


00:19:55.920 --> 00:19:59.700
Many of them, I guess one way to think about it


00:19:59.700 --> 00:20:01.540
is they're cut by context.


00:20:01.540 --> 00:20:02.860
What context are you operating in?


00:20:02.860 --> 00:20:05.900
Is this like a data context or like Zapier, for example,


00:20:05.900 --> 00:20:07.360
is very consumer facing.


00:20:07.360 --> 00:20:10.380
- If you think about Zapier


00:20:10.380 --> 00:20:12.260
with all these different automations,


00:20:12.260 --> 00:20:14.060
all these triggers, and then all these actions,


00:20:14.060 --> 00:20:18.100
it's just like, the plumbing of that must be insane.


00:20:18.100 --> 00:20:20.440
- Exactly, and that's a workflow, it's totally valid.


00:20:20.440 --> 00:20:23.000
And their user persona is a no-code person,


00:20:23.000 --> 00:20:24.460
also totally valid.


00:20:24.460 --> 00:20:28.600
And so for us, new workflow management system


00:20:28.600 --> 00:20:31.020
means kind of the next generation


00:20:31.020 --> 00:20:33.560
after a lot of the Hadoop tooling.


00:20:33.560 --> 00:20:36.880
So Hadoop, as you can kind of see in this post too,


00:20:36.880 --> 00:20:41.560
Hadoop caused an explosion of just really cool new tools.


00:20:41.560 --> 00:20:46.360
And Airflow, Luigi, Azkaban,


00:20:46.360 --> 00:20:49.960
I feel like there's another one, maybe Uzi,


00:20:49.960 --> 00:20:52.080
a lot of these kind of came out of that air


00:20:52.080 --> 00:20:55.240
to manage these distributed jobs.


00:20:55.240 --> 00:20:56.960
And so they're kind of like,


00:20:56.960 --> 00:21:01.700
I think of them as like distributed state-based cron.


00:21:01.700 --> 00:21:04.580
You can put them on a well-defined schedule.


00:21:04.580 --> 00:21:06.900
They manage the, so it's actual dependency management,


00:21:06.900 --> 00:21:08.420
which Cron does not do.


00:21:08.420 --> 00:21:12.020
And they can do it kind of across multiple computers,


00:21:12.020 --> 00:21:14.260
which is really convenient.


00:21:14.260 --> 00:21:16.060
And so for us-- - In a real simple way,


00:21:16.060 --> 00:21:17.500
it's like kind of the Cron,


00:21:17.500 --> 00:21:18.780
it is kind of like Cron, right?


00:21:18.780 --> 00:21:21.140
Like just look here for data


00:21:21.140 --> 00:21:22.900
and then just run this process against it.


00:21:22.900 --> 00:21:26.620
But it's so much more with the dependencies


00:21:26.620 --> 00:21:27.780
and then pass it to here.


00:21:27.780 --> 00:21:31.620
And then, yeah, right, it's just the flow of it.


00:21:31.620 --> 00:21:34.100
You'd be insane to try that with just timing.


00:21:34.100 --> 00:21:36.100
Exactly, exactly.


00:21:36.100 --> 00:21:39.620
And so, new for us can mean a lot of different things,


00:21:39.620 --> 00:21:41.620
but I'll just say since we just talked about it,


00:21:41.620 --> 00:21:44.420
it's really taking an approach of scheduling is important,


00:21:44.420 --> 00:21:47.300
and alerting on failures of scheduling is important,


00:21:47.300 --> 00:21:49.300
but we're like expanding the vision there.


00:21:49.300 --> 00:21:51.300
And it's much more about this negative engineering,


00:21:51.300 --> 00:21:53.300
which includes observability,


00:21:53.300 --> 00:21:55.300
configuration management, event-driven work,


00:21:55.300 --> 00:21:57.300
not just scheduled work.


00:21:57.300 --> 00:21:59.300
Scale is really important because data scientists


00:21:59.300 --> 00:22:01.300
have a lot of the same needs as data engineers,


00:22:01.300 --> 00:22:04.780
Those tools were not meant for data scientists.


00:22:04.780 --> 00:22:05.620
- Right.


00:22:05.620 --> 00:22:06.460
- Yeah.


00:22:06.460 --> 00:22:09.980
- Yeah, you were talking, I heard you speak about


00:22:09.980 --> 00:22:14.500
wanting to run a bunch of experiments,


00:22:14.500 --> 00:22:16.500
like hundreds of thousands of experiments


00:22:16.500 --> 00:22:18.140
as a data scientist.


00:22:18.140 --> 00:22:21.280
And some of the other tools would talk about


00:22:21.280 --> 00:22:24.740
running operations in tens per minute


00:22:24.740 --> 00:22:27.340
or tens, something like that.


00:22:27.340 --> 00:22:28.540
And you're like, I need something that does it


00:22:28.540 --> 00:22:31.140
in tens or hundreds per second.


00:22:31.140 --> 00:22:38.340
Yeah, I mean, anything that allows you to just explore a search space of hyperparameters


00:22:38.340 --> 00:22:43.300
and do so in a way that is easy to quickly find some subset of those parameters


00:22:43.300 --> 00:22:47.140
and see whether they succeeded or failed, you can define that criteria.


00:22:47.140 --> 00:22:52.100
You can raise an exception, for example, if some output just violates some assumption you have,


00:22:52.100 --> 00:22:54.820
and then that way it shows up as red, it's like you're not going to look at that.


00:22:56.220 --> 00:23:01.140
And managing an interface to the infrastructure


00:23:01.140 --> 00:23:03.220
is another big part of this.


00:23:03.220 --> 00:23:04.780
So I guess maybe I'm jumping ahead,


00:23:04.780 --> 00:23:07.300
but the next part is design for modern infrastructure.


00:23:07.300 --> 00:23:08.940
And I think modern infrastructure


00:23:08.940 --> 00:23:10.500
can mean a lot of different things.


00:23:10.500 --> 00:23:13.940
For us, it means first off that there's


00:23:13.940 --> 00:23:16.980
a diverse array of infrastructure people use.


00:23:16.980 --> 00:23:19.020
And so creating a system that can plug and play


00:23:19.020 --> 00:23:19.980
with a lot of them.


00:23:19.980 --> 00:23:23.500
So we support, for example, some of the more popular ways


00:23:23.500 --> 00:23:26.100
of deploying Prefect Flows are in Kubernetes.


00:23:26.100 --> 00:23:30.820
and in Fargate, so kind of like a serverless style model.


00:23:30.820 --> 00:23:32.900
Also, you can do it on your local machine.


00:23:32.900 --> 00:23:35.180
And so just having that kind of unified interface


00:23:35.180 --> 00:23:37.940
to interact with all these things is one aspect of modern.


00:23:37.940 --> 00:23:42.340
Another is that local development


00:23:42.340 --> 00:23:45.060
to cloud development story that's really important.


00:23:45.060 --> 00:23:49.220
You want to make sure that these are as close as possible


00:23:49.220 --> 00:23:52.180
to each other so that you can debug things locally


00:23:52.180 --> 00:23:53.340
and things like that.


00:23:53.340 --> 00:23:58.680
And so that's another aspect is we try really hard and 2.0 gets this way better than 1.0


00:23:58.680 --> 00:24:05.620
for the record of mirroring what code is exactly running, you know, in prod versus your local.


00:24:05.620 --> 00:24:10.280
Something that always makes me nervous when I hear people talking about, oh, this is cloud


00:24:10.280 --> 00:24:15.940
native and you can just, just, there's like 50 different services in this particular cloud.


00:24:15.940 --> 00:24:18.540
And so why don't you just leverage like nine or 10 of them?


00:24:18.540 --> 00:24:23.060
And I just always think, you know, well, what is the development going to feel like for


00:24:23.060 --> 00:24:27.860
You know, how, if I'm on a spotty internet connection or something like that,


00:24:27.860 --> 00:24:30.500
is it just inaccessible to work on?


00:24:30.500 --> 00:24:33.980
Do I have to just completely sort of live in this cloud world?


00:24:33.980 --> 00:24:39.500
And, it sounds like there's, a more sort of a local version that you


00:24:39.500 --> 00:24:41.620
can try and work with as well here.


00:24:41.620 --> 00:24:42.460
Yeah.


00:24:42.460 --> 00:24:47.400
And one of the things that we achieved with 2.0 is we refactored kind of where


00:24:47.400 --> 00:24:50.020
orchestration, different aspects of orchestration takes place.


00:24:50.220 --> 00:24:56.300
And so all of the true orchestration logic that we want to own runs behind an API.


00:24:56.300 --> 00:25:01.740
And the reason that I'm saying, I'm like emphasizing that is in 1.0, that's not 100% true.


00:25:01.740 --> 00:25:07.540
And so when you run a workflow locally, it's talking to an API, maybe it's your self-hosted


00:25:07.540 --> 00:25:08.500
open source API.


00:25:08.500 --> 00:25:10.820
So it's maybe responding slightly differently.


00:25:10.820 --> 00:25:15.940
But the code path running on your machine and its requirements and everything else is


00:25:15.940 --> 00:25:18.780
exactly the same as what's going to run in production.


00:25:18.780 --> 00:25:21.160
and just might talk to a different URL.


00:25:21.160 --> 00:25:22.380
- Sure.


00:25:22.380 --> 00:25:23.940
Okay, yeah, and I guess it's,


00:25:23.940 --> 00:25:25.940
let me stick on this,


00:25:25.940 --> 00:25:27.280
we were halfway through your sentence,


00:25:27.280 --> 00:25:30.980
and then I do wanna talk more about the cloud and stuff.


00:25:30.980 --> 00:25:32.740
No, but, so,


00:25:32.740 --> 00:25:37.740
powered by the open source Preflex core workflow engine.


00:25:37.740 --> 00:25:41.980
All right, so, tell us about that.


00:25:41.980 --> 00:25:45.820
- So, we, you know, we've, since day one,


00:25:45.820 --> 00:25:50.380
always wanted to put as much open source as is reasonable.


00:25:50.380 --> 00:25:53.700
And one of the ways that we think about


00:25:53.700 --> 00:25:54.980
what we put in the open source,


00:25:54.980 --> 00:25:57.940
and then I'll tell you what this workflow engine is,


00:25:57.940 --> 00:26:01.100
are what are the things that we are maximally leveraged


00:26:01.100 --> 00:26:05.540
to support extensions of and new configurations of?


00:26:05.540 --> 00:26:07.420
And our core workflow engine


00:26:07.420 --> 00:26:08.660
is definitely one of those things.


00:26:08.660 --> 00:26:10.620
We're the experts in it.


00:26:10.620 --> 00:26:13.300
And that engine is the thing that manages, for example,


00:26:13.300 --> 00:26:16.460
that a downstream dependency can't run


00:26:16.460 --> 00:26:19.620
if it's upstream failed or maybe just hasn't completed yet.


00:26:19.620 --> 00:26:23.860
The caching logic is a part of that workflow engine,


00:26:23.860 --> 00:26:25.800
the triggering logic for the workflow,


00:26:25.800 --> 00:26:27.020
the scheduling of the workflow,


00:26:27.020 --> 00:26:28.620
all of that stuff's open source.


00:26:28.620 --> 00:26:31.820
- That's the UI visibility


00:26:31.820 --> 00:26:34.380
towards tracking bit as well, right?


00:26:34.380 --> 00:26:36.280
- 100%, yep, that is all open source


00:26:36.280 --> 00:26:37.740
and we build it as a part.


00:26:37.740 --> 00:26:40.980
So we actually have a dedicated front end team


00:26:40.980 --> 00:26:44.060
and we build the UI and package it up


00:26:44.060 --> 00:26:47.460
in the packages of prebuilt website.


00:26:47.460 --> 00:26:49.340
- Yeah, I'm not sure where I would,


00:26:49.340 --> 00:26:50.300
oh, here we go, I found it.


00:26:50.300 --> 00:26:52.700
- Oh, there we go, that's the G.co, yeah.


00:26:52.700 --> 00:26:57.660
- Yeah, so I mean, this UI to see what's working,


00:26:57.660 --> 00:27:00.220
what's not working, how often is it succeeded,


00:27:00.220 --> 00:27:02.220
you know, what's succeeded, what's failing,


00:27:02.220 --> 00:27:04.340
what jobs are unhealthy, for example,


00:27:04.340 --> 00:27:06.660
like that's all negative engineering, right?


00:27:06.660 --> 00:27:07.940
Your job wasn't to start out


00:27:07.940 --> 00:27:10.660
to build this observability web front end.


00:27:10.660 --> 00:27:12.800
your job was to get the data in and then get it


00:27:12.800 --> 00:27:15.600
to the database and start doing it for, you know,


00:27:15.600 --> 00:27:17.900
analysis or whatever.


00:27:17.900 --> 00:27:19.160
- Exactly.


00:27:19.160 --> 00:27:22.000
- Predictions, but here you are,


00:27:22.000 --> 00:27:23.920
in view going after it, right?


00:27:23.920 --> 00:27:24.900
Or whatever it is.


00:27:24.900 --> 00:27:25.760
- No, it is viewed.


00:27:25.760 --> 00:27:26.600
Good call, good call.


00:27:26.600 --> 00:27:27.440
- Right on.


00:27:27.440 --> 00:27:28.260
- Yeah.


00:27:28.260 --> 00:27:31.360
And so, and one of the ways I think about this dashboard view


00:27:31.360 --> 00:27:33.780
is it gives you this landing page to,


00:27:33.780 --> 00:27:36.040
you have some mental model of your expectations.


00:27:36.040 --> 00:27:38.660
You can check quickly if they are violated here.


00:27:38.660 --> 00:27:40.760
And then if so, dig in further, click around.


00:27:40.760 --> 00:27:45.140
And if not, you know, we are more than happy when people exit out of the UI and are like,


00:27:45.140 --> 00:27:46.140
we're moving on.


00:27:46.140 --> 00:27:47.460
It's like, perfect, we did our job then.


00:27:47.460 --> 00:27:48.460
Yeah, that's good.


00:27:48.460 --> 00:27:50.460
But yeah, that's pretty neat.


00:27:50.460 --> 00:27:52.740
So that's part of the core engine.


00:27:52.740 --> 00:27:53.740
Yep, 100%.


00:27:53.740 --> 00:27:58.580
And so things like auth, for example, are not part of that.


00:27:58.580 --> 00:28:03.340
So in that case, like, there's a lot of ways auth can get extended, there's a lot of different


00:28:03.340 --> 00:28:08.820
ways that we might implement it. And that's not exactly right. Our, our, our competitive


00:28:08.820 --> 00:28:12.580
advantage supporting different ways that you might deploy off securely. And so it's like,


00:28:12.580 --> 00:28:17.340
Nope, that's our platform feature, we can do it in the way we know, know best, and can


00:28:17.340 --> 00:28:18.340
do it securely.


00:28:18.340 --> 00:28:25.180
Sure. And so it's worth pointing out, I suppose, that the way it works is, there's the open


00:28:25.180 --> 00:28:31.220
source engine, and then there's the Python API. And then you talked about different ways


00:28:31.220 --> 00:28:33.340
is to run it and to host it, right?


00:28:33.340 --> 00:28:36.740
So one way to host it is to just use your cloud, right?


00:28:36.740 --> 00:28:40.180
You've got the Preflect cloud


00:28:40.180 --> 00:28:42.520
where it just runs with all these things.


00:28:42.520 --> 00:28:45.200
There's others I could run it.


00:28:45.200 --> 00:28:47.840
I could self host that core workflow engine


00:28:47.840 --> 00:28:50.260
or just run it on my laptop or whatever.


00:28:50.260 --> 00:28:53.380
- So it's a little bit more complicated than that actually.


00:28:53.380 --> 00:28:56.060
- All right, no it's all good.


00:28:56.060 --> 00:29:00.060
- So Jeremiah and I both come from like finance world.


00:29:00.060 --> 00:29:02.520
And so a lot of our first kind of early design partners


00:29:02.520 --> 00:29:04.600
and advisors come from that world.


00:29:04.600 --> 00:29:07.000
And one of the challenges one of our advisors gave us


00:29:07.000 --> 00:29:11.180
was very genuinely, I don't want to learn your tech stack


00:29:11.180 --> 00:29:13.980
so that I can host it within my tech stack.


00:29:13.980 --> 00:29:16.960
And there's no way I'm ever gonna give you my code or data


00:29:16.960 --> 00:29:19.180
because it's highly proprietary.


00:29:19.180 --> 00:29:20.720
That's your problem.


00:29:20.720 --> 00:29:22.980
And we're like, okay, well, that sounds impossible, right?


00:29:22.980 --> 00:29:25.300
- I think companies are already so freaked out


00:29:25.300 --> 00:29:30.300
about losing the data without even meaningfully


00:29:30.300 --> 00:29:32.020
giving it to someone else, right?


00:29:32.020 --> 00:29:34.340
They're already like, well, we might lose this.


00:29:34.340 --> 00:29:35.740
We might, you know, might be ransomware.


00:29:35.740 --> 00:29:36.860
There might be other things, right?


00:29:36.860 --> 00:29:38.980
And so the idea of just handing it over


00:29:38.980 --> 00:29:42.780
does seem probably pretty far out there for a lot of them.


00:29:42.780 --> 00:29:46.620
- Exactly, and so what we designed after a long time,


00:29:46.620 --> 00:29:47.580
we really like thought about it,


00:29:47.580 --> 00:29:51.820
but we did this back in 2018, maybe beginning of,


00:29:51.820 --> 00:29:54.160
Yeah, 2018.


00:29:54.160 --> 00:29:56.320
We came up with a model where orchestration


00:29:56.320 --> 00:29:58.080
takes place over an API.


00:29:58.080 --> 00:29:59.600
And if you really think about it,


00:29:59.600 --> 00:30:00.520
think of other orchestrators.


00:30:00.520 --> 00:30:02.480
Cron, Kubernetes is a container orchestrator.


00:30:02.480 --> 00:30:04.000
They operate on metadata.


00:30:04.000 --> 00:30:07.480
They operate on container registry locations and specs


00:30:07.480 --> 00:30:09.640
for how you expect it to run.


00:30:09.640 --> 00:30:12.280
And once we had that insight, we designed the system


00:30:12.280 --> 00:30:15.040
so that the cloud-hosted API that we run


00:30:15.040 --> 00:30:20.480
operates purely in metadata, result locations, flow names,


00:30:20.480 --> 00:30:25.360
flow versions, things like that. And then you run an open source agent anywhere that


00:30:25.360 --> 00:30:32.280
you want, and it operates on a pure outbound pull-in model. So all of our features are


00:30:32.280 --> 00:30:37.080
based on the agent pulling and then your workflow also potentially doing some communication.


00:30:37.080 --> 00:30:40.080
And because of that, you know, there's still this outbound connection you have to think


00:30:40.080 --> 00:30:43.280
about, you still have to trust us with your some of your parameters. And you know, there's


00:30:43.280 --> 00:30:48.520
definitely still some security surface area that we have to think about. But we do not


00:30:48.520 --> 00:30:52.280
hosts your data, and we do not have access to your execution.


00:30:52.280 --> 00:30:55.760
And that unlocked this problem for us.


00:30:55.760 --> 00:30:57.960
And so as long as we have enough agents that


00:30:57.960 --> 00:31:00.000
can be deployed in lots of different places,


00:31:00.000 --> 00:31:03.640
then we can deliver a lot of value.


00:31:03.640 --> 00:31:05.200
Yeah, that's pretty excellent.


00:31:05.200 --> 00:31:10.600
So if you want to host it in AWS or Kubernetes or Linode


00:31:10.600 --> 00:31:13.840
or wherever, that's up to you, huh?


00:31:13.840 --> 00:31:16.760
Exactly, 100% up to you.


00:31:16.760 --> 00:31:20.880
Is there a way where I could do it somewhat offline?


00:31:20.880 --> 00:31:23.680
Like for example, with the open source core engine,


00:31:23.680 --> 00:31:25.240
does that still go back to you guys


00:31:25.240 --> 00:31:28.100
or is that sort of local?


00:31:28.100 --> 00:31:29.080
- No, that's totally local


00:31:29.080 --> 00:31:31.160
and it's designed with the same hybrid approach.


00:31:31.160 --> 00:31:34.440
You could have your platform team,


00:31:34.440 --> 00:31:36.760
maybe your DevOps team hosting the API for you


00:31:36.760 --> 00:31:38.240
and the database behind it.


00:31:38.240 --> 00:31:40.840
And then you as the data team can manage your agents


00:31:40.840 --> 00:31:42.520
and just as long as you have access to the API,


00:31:42.520 --> 00:31:44.960
you can set it up the exact same way internally if you want.


00:31:44.960 --> 00:31:48.740
And we've seen places do that for sure.


00:31:48.740 --> 00:31:49.720
- Sure.


00:31:49.720 --> 00:31:51.080
Yeah, that's really neat.


00:31:51.080 --> 00:31:55.780
Let's maybe talk through a quick example of using it.


00:31:55.780 --> 00:31:56.620
Oh, hold on.


00:31:56.620 --> 00:31:58.980
Well, the last part of that sentence,


00:31:58.980 --> 00:32:02.960
which is users organize tasks into flows.


00:32:02.960 --> 00:32:07.740
And so let's look at a quick example maybe


00:32:07.740 --> 00:32:10.300
of the code that you might do here.


00:32:10.300 --> 00:32:11.260
Let's see.


00:32:11.260 --> 00:32:13.340
Sure, here, this is probably decent.


00:32:13.340 --> 00:32:17.580
It's always tricky to talk about code on audio formats,


00:32:17.580 --> 00:32:20.460
but just give us a sense of what does it look like


00:32:20.460 --> 00:32:23.140
to write code for Prefect?


00:32:23.140 --> 00:32:25.020
- Yeah, so one of our design principles, right?


00:32:25.020 --> 00:32:26.300
We talked a little while ago


00:32:26.300 --> 00:32:27.540
about this negative engineering problem.


00:32:27.540 --> 00:32:30.860
It kind of emerges and eventually you're doing


00:32:30.860 --> 00:32:32.740
all those activities that you didn't care about.


00:32:32.740 --> 00:32:33.780
And kind of in an interesting way,


00:32:33.780 --> 00:32:36.780
we try to mirror that with the way Prefect gets adopted.


00:32:36.780 --> 00:32:39.820
So I love to call it incremental adoption.


00:32:39.820 --> 00:32:43.720
I want the complexity of what you're trying to achieve


00:32:43.720 --> 00:32:46.980
and the amount of code you have to write to scale,


00:32:46.980 --> 00:32:48.720
I mean, ideally like sub-linearly or something,


00:32:48.720 --> 00:32:50.180
but you know, scale together.


00:32:50.180 --> 00:32:52.020
And so an example you have here,


00:32:52.020 --> 00:32:54.100
our 2.0 takes this way further,


00:32:54.100 --> 00:32:56.760
but we operate on this decorator model.


00:32:56.760 --> 00:32:58.860
So just really simple, you have Python functions,


00:32:58.860 --> 00:32:59.860
you already wrote them,


00:32:59.860 --> 00:33:01.640
you presumably already even have the script


00:33:01.640 --> 00:33:03.680
and you just want to sprinkle in some prefects


00:33:03.680 --> 00:33:06.460
so that you get some observability into it.


00:33:06.460 --> 00:33:08.940
And then if you wanna start to do more and more things,


00:33:08.940 --> 00:33:10.400
you might have to write more and more code,


00:33:10.400 --> 00:33:12.560
but it's appropriate for the activity


00:33:12.560 --> 00:33:14.920
that you're trying to achieve.


00:33:14.920 --> 00:33:18.200
And so yeah, we try to be really simple.


00:33:18.200 --> 00:33:20.280
We like it when people get the feeling


00:33:20.280 --> 00:33:24.400
that this is a toy package that you play around that just


00:33:24.400 --> 00:33:27.080
has these heavy duty impacts.


00:33:27.080 --> 00:33:30.320
And so yeah, tasks are the smallest unit of work


00:33:30.320 --> 00:33:31.400
that we can look at.


00:33:31.400 --> 00:33:33.520
Tasks can do things like retry.


00:33:33.520 --> 00:33:34.280
They can cache.


00:33:34.280 --> 00:33:37.160
They have well-defined inputs and outputs.


00:33:37.160 --> 00:33:41.960
Flows are containers for managing dependencies of tasks.


00:33:41.960 --> 00:33:45.160
They also have well-defined inputs and outputs,


00:33:45.160 --> 00:33:47.040
also have their own states,


00:33:47.040 --> 00:33:50.520
but flows are the things that can be scheduled


00:33:50.520 --> 00:33:52.480
and triggered via API,


00:33:52.480 --> 00:33:54.300
and tasks are kind of just the smaller,


00:33:54.300 --> 00:33:56.960
more granular units of orchestration


00:33:56.960 --> 00:33:58.960
within those workflows.


00:33:58.960 --> 00:34:01.160
- Nice, and so the way that this looks is,


00:34:01.160 --> 00:34:02.720
it looks just like a function,


00:34:02.720 --> 00:34:05.200
and you kind of just call it


00:34:05.200 --> 00:34:06.800
with the arguments or whatever.


00:34:06.800 --> 00:34:10.360
And then you put a task decorator on there,


00:34:10.360 --> 00:34:11.480
which is pretty interesting.


00:34:11.480 --> 00:34:14.200
And that's where the retry thing can be.


00:34:14.200 --> 00:34:15.040
- Exactly.


00:34:15.040 --> 00:34:17.520
- Then you also have a context manager,


00:34:17.520 --> 00:34:19.000
which I think is a nice pattern.


00:34:19.000 --> 00:34:21.080
So you have a context manager to create the flow


00:34:21.080 --> 00:34:24.380
and then you basically simulate doing all the work


00:34:24.380 --> 00:34:25.660
with an abstract parameter


00:34:25.660 --> 00:34:28.080
and then you kind of set it off, right?


00:34:28.080 --> 00:34:31.320
- So that is true in 1.0.


00:34:31.320 --> 00:34:33.600
However, what we found-


00:34:33.600 --> 00:34:34.840
- Something new is coming, okay.


00:34:34.840 --> 00:34:36.380
- Yeah, this is important.


00:34:36.380 --> 00:34:39.440
That context manager, all that code runs,


00:34:39.440 --> 00:34:42.120
like you called out, and so it compiles this,


00:34:42.120 --> 00:34:45.100
you know, DAG, that's everyone, directed acyclic graph.


00:34:45.100 --> 00:34:51.240
What we realized in talking to a lot of our users on 1.0


00:34:51.240 --> 00:34:54.640
is that confronting the DAG,


00:34:54.640 --> 00:34:57.400
'cause sometimes people would write their own Python code


00:34:57.400 --> 00:34:59.120
that wasn't prefect in that context manager,


00:34:59.120 --> 00:35:01.200
and it would actually run, it wouldn't be deferred,


00:35:01.200 --> 00:35:02.160
and they would get confused,


00:35:02.160 --> 00:35:03.600
and they're like, "Why do I have to care about this?"


00:35:03.600 --> 00:35:08.200
And we started to realize that this DAG model really


00:35:08.200 --> 00:35:11.520
came most likely out of the constraints of YAML,


00:35:11.520 --> 00:35:13.080
flat file formats.


00:35:13.080 --> 00:35:15.560
And they were mirrored in all the different tools that


00:35:15.560 --> 00:35:16.780
were built on top of that.


00:35:16.780 --> 00:35:19.120
And then all of a sudden, everyone's talking about DAGs.


00:35:19.120 --> 00:35:20.500
And the data engineer, when they're


00:35:20.500 --> 00:35:22.280
writing a script to move data around,


00:35:22.280 --> 00:35:23.160
should focus on the script.


00:35:23.160 --> 00:35:25.200
They shouldn't focus on this abstract programming


00:35:25.200 --> 00:35:29.720
concept of can't do control flow, essentially,


00:35:29.720 --> 00:35:32.080
without really thinking deeply about it.


00:35:32.080 --> 00:35:35.760
And so in 2.0, we removed this context manager.


00:35:35.760 --> 00:35:38.680
Flows are also now specified via decorator.


00:35:38.680 --> 00:35:42.040
So the deferred computation is just function definition.


00:35:42.040 --> 00:35:45.240
And now we will discover the tasks at runtime


00:35:45.240 --> 00:35:48.320
and you can implement native Python logic in your flows.


00:35:48.320 --> 00:35:50.640
And that's totally fine by us.


00:35:50.640 --> 00:35:53.280
So it just unlocks the expressiveness


00:35:53.280 --> 00:35:56.080
of what you can write in Prefect really natively.


00:35:56.080 --> 00:35:56.900
- That's awesome.


00:35:56.900 --> 00:35:59.680
So you can have like loops or if statements


00:35:59.680 --> 00:36:01.160
or whatever you wanna write standard.


00:36:01.160 --> 00:36:03.440
- Oh yeah, while statements even, yeah.


00:36:03.440 --> 00:36:05.200
You can have flows that change structure


00:36:05.200 --> 00:36:07.680
from run to run, all of it.


00:36:07.680 --> 00:36:08.520
- Okay.


00:36:08.520 --> 00:36:10.680
Yeah, that's really neat.


00:36:10.680 --> 00:36:12.880
So the thing that strikes me here is,


00:36:12.880 --> 00:36:14.480
you kind of write regular Python code


00:36:14.480 --> 00:36:15.880
and you put a decorator or two on it


00:36:15.880 --> 00:36:20.640
and it just works in a different but similar way.


00:36:20.640 --> 00:36:23.760
And that's a little bit of that


00:36:23.760 --> 00:36:25.640
negative engineering influence as well.


00:36:25.640 --> 00:36:27.680
It's like, how do I take normal stuff


00:36:27.680 --> 00:36:30.180
without too much work and make it


00:36:30.180 --> 00:36:32.460
more general for pipelines.


00:36:32.460 --> 00:36:34.980
- Exactly, and we call it workflows as code


00:36:34.980 --> 00:36:36.940
instead of code as workflows.


00:36:36.940 --> 00:36:39.140
Or sorry, code as workflows,


00:36:39.140 --> 00:36:42.420
because you have the code, it is the workflow,


00:36:42.420 --> 00:36:44.740
and now you just want us to care about it,


00:36:44.740 --> 00:36:47.740
and so we should be minimally invasive when we do that.


00:36:47.740 --> 00:36:49.400
Because the second you have to refactor


00:36:49.400 --> 00:36:51.820
your code significantly, you're back in negative engineering


00:36:51.820 --> 00:36:53.260
because you have to think about the consequences


00:36:53.260 --> 00:36:54.540
of the refactor and everything else.


00:36:54.540 --> 00:36:56.700
So we want to avoid that as much as humanly possible,


00:36:56.700 --> 00:36:58.900
or you still have to do a little bit, but.


00:36:58.900 --> 00:37:01.500
Yeah, a couple of things that I saw that stood out to me,


00:37:01.500 --> 00:37:03.780
checking out your API here that was interesting.


00:37:03.780 --> 00:37:07.260
One was I can have async methods


00:37:07.260 --> 00:37:09.220
and async execution of these things.


00:37:09.220 --> 00:37:11.060
So async and await style,


00:37:11.060 --> 00:37:13.780
async def methods and await operations.


00:37:13.780 --> 00:37:15.620
You want to talk about that support?


00:37:15.620 --> 00:37:19.660
- Yeah, so if you actually go to orion-docs.prefect.io,


00:37:19.660 --> 00:37:22.340
that's where a lot of our 2.0 docs are currently located


00:37:22.340 --> 00:37:23.820
while we're still in beta,


00:37:23.820 --> 00:37:26.300
but they will of course, and then hyphen docs.


00:37:28.740 --> 00:37:29.740
- Yeah, so this Async work. - Yeah, this is probably


00:37:29.740 --> 00:37:31.260
where it's not, yeah.


00:37:31.260 --> 00:37:35.620
- Yeah, big shout out to a Prefect Engineer,


00:37:35.620 --> 00:37:37.740
Michael Adkins, who really took a lot of time


00:37:37.740 --> 00:37:40.380
to dig into the guts of Async.


00:37:40.380 --> 00:37:43.420
And he set it up so that you can do crazy things.


00:37:43.420 --> 00:37:46.860
You can have synchronously defined flows


00:37:46.860 --> 00:37:50.540
with asynchronous tasks, and our engine, the executor,


00:37:50.540 --> 00:37:52.700
will manage it all for you, just to make sure


00:37:52.700 --> 00:37:54.540
that they're running in the right event loops and things.


00:37:54.540 --> 00:37:55.860
- Like, oh, we gotta create a loop


00:37:55.860 --> 00:37:58.460
and just run this in a wait, 'cause internally,


00:37:58.460 --> 00:38:01.180
it's synchronized or something like that, right?


00:38:01.180 --> 00:38:02.620
- Exactly, exactly.


00:38:02.620 --> 00:38:06.700
And so it's really slick and it gives at least users


00:38:06.700 --> 00:38:07.940
who know how to write async code


00:38:07.940 --> 00:38:10.140
kind of this native feeling of parallelism.


00:38:10.140 --> 00:38:11.820
It's not, we all know it's not quite parallelism,


00:38:11.820 --> 00:38:13.380
but it gives you at least that feeling,


00:38:13.380 --> 00:38:15.340
especially when you're doing a modern data stack,


00:38:15.340 --> 00:38:19.100
if it's all API driven, you've got a lot of network I/O.


00:38:19.100 --> 00:38:21.620
- It's talking to databases, it's talking to file I/O,


00:38:21.620 --> 00:38:23.580
it's talking to external APIs,


00:38:23.580 --> 00:38:25.820
like all of those are perfectly scalable.


00:38:25.820 --> 00:38:27.460
- Exactly, exactly.


00:38:27.460 --> 00:38:29.720
- Yeah, cool.


00:38:29.720 --> 00:38:34.360
So you can have, you know, @task,


00:38:34.360 --> 00:38:37.400
say I'm just gonna do an async def some function.


00:38:37.400 --> 00:38:38.880
The example you have in your docs,


00:38:38.880 --> 00:38:43.640
your Orion docs is using HTTPX async clients


00:38:43.640 --> 00:38:46.060
to go talk to the GitHub stuff.


00:38:46.060 --> 00:38:47.800
Yeah.


00:38:47.800 --> 00:38:50.160
Oh yeah, here you also have,


00:38:50.160 --> 00:38:53.640
here's your @flow decorator, right, for this thing.


00:38:53.640 --> 00:38:54.480
- Yep.


00:38:54.480 --> 00:38:57.240
And another thing too that we did that I'm really proud of


00:38:57.240 --> 00:38:59.120
that I've already started to see kind of be


00:38:59.120 --> 00:39:00.760
one of the ways people onboard in a prefect


00:39:00.760 --> 00:39:04.000
is previously with the API,


00:39:04.000 --> 00:39:06.200
you had to pre-register your flow


00:39:06.200 --> 00:39:09.800
and tell the API this thing exists, get ready for it.


00:39:09.800 --> 00:39:12.840
And then runs had to get created server side


00:39:12.840 --> 00:39:15.200
before they could run client side.


00:39:15.200 --> 00:39:17.360
With the new model, we set everything up


00:39:17.360 --> 00:39:19.860
and all of this was this like deep study and bookkeeping.


00:39:19.860 --> 00:39:21.880
Like how can we create stable indices


00:39:21.880 --> 00:39:24.000
or stable identifiers for things that,


00:39:24.000 --> 00:39:26.520
we can identify across processes and runs.


00:39:26.520 --> 00:39:29.480
And so in the new model, you can take this flow.


00:39:29.480 --> 00:39:31.520
And if you are just pointing to our cloud API,


00:39:31.520 --> 00:39:34.680
you can call it as a function interactively,


00:39:34.680 --> 00:39:36.520
and it will still communicate with cloud API


00:39:36.520 --> 00:39:38.680
just as if it was a deployed workflow.


00:39:38.680 --> 00:39:40.720
And so what that means though,


00:39:40.720 --> 00:39:42.760
sorry, just going back to the incremental adoption story


00:39:42.760 --> 00:39:45.080
is you can use cron,


00:39:45.080 --> 00:39:48.380
and then you can just put one line of code


00:39:48.380 --> 00:39:50.520
on your main function at flow,


00:39:50.520 --> 00:39:53.240
keep cron running with that Python script,


00:39:53.240 --> 00:39:56.320
and you've immediately gotten a really pretty


00:39:56.320 --> 00:39:58.560
kind of record of all of the jobs that Kron's running.


00:39:58.560 --> 00:40:00.800
And if it fails, you'll get the failure alerts


00:40:00.800 --> 00:40:02.840
and everything else and Kron's still your scheduler,


00:40:02.840 --> 00:40:04.120
which is totally fine by us.


00:40:04.120 --> 00:40:06.440
- Sure, oh, that's interesting.


00:40:06.440 --> 00:40:08.000
- Yeah, and then, you know, at some point,


00:40:08.000 --> 00:40:09.740
you wanna start to see into the future,


00:40:09.740 --> 00:40:11.280
and that's when you have to use our scheduler


00:40:11.280 --> 00:40:12.880
instead of Kron, but you know,


00:40:12.880 --> 00:40:14.780
but once again, incremental adoption.


00:40:14.780 --> 00:40:17.720
- Yeah, the API here is pretty wild.


00:40:17.720 --> 00:40:22.200
You're exploding a list,


00:40:22.200 --> 00:40:26.320
get a list comprehension of calls to the task


00:40:26.320 --> 00:40:28.380
to an async I/O gather.


00:40:28.380 --> 00:40:30.600
Yeah, that's a pretty intense line right there.


00:40:30.600 --> 00:40:32.280
But I like it.


00:40:32.280 --> 00:40:33.720
Not intense in the way that it's like,


00:40:33.720 --> 00:40:35.400
oh my gosh, what is this insanity?


00:40:35.400 --> 00:40:36.240
But it's a lot better.


00:40:36.240 --> 00:40:38.240
- Yeah, it's doing a lot though, yeah.


00:40:38.240 --> 00:40:39.080
- Yeah, yeah.


00:40:39.080 --> 00:40:41.520
You know, there's the joke T-shirt maybe you've seen it.


00:40:41.520 --> 00:40:44.400
It says, "I learned Python, it was a great weekend."


00:40:44.400 --> 00:40:47.240
Right, like that's true for like variables


00:40:47.240 --> 00:40:48.720
and loops and functions,


00:40:48.720 --> 00:40:51.560
but like then you see stuff like, oh wait.


00:40:51.560 --> 00:40:53.360
- Yeah, there's more patterns here.


00:40:53.360 --> 00:40:56.000
- Might be more than a weekend, give me a moment.


00:40:56.000 --> 00:40:58.840
No, this is really cool, I really like this new API.


00:40:58.840 --> 00:41:00.640
So when's 2.0 a thing?


00:41:00.640 --> 00:41:03.600
When is it released?


00:41:03.600 --> 00:41:08.080
- Our planned release date, or I shouldn't say date,


00:41:08.080 --> 00:41:11.000
but just like target, you can expect it some,


00:41:11.000 --> 00:41:13.560
one of the weeks or something around it in July 1st.


00:41:13.560 --> 00:41:15.760
But we are still releasing.


00:41:15.760 --> 00:41:18.760
So if anyone out there is intrigued by this,


00:41:18.760 --> 00:41:20.600
especially if you're completely new to Prefect,


00:41:20.600 --> 00:41:22.480
I definitely encourage you to just start


00:41:22.480 --> 00:41:24.800
with one of our beta 2.0 releases.


00:41:24.800 --> 00:41:29.180
They're way slicker, way easier to get your head around,


00:41:29.180 --> 00:41:31.280
more interesting, and there's still like,


00:41:31.280 --> 00:41:33.200
everything's working, we just,


00:41:33.200 --> 00:41:35.520
there's some critical paths that we haven't


00:41:35.520 --> 00:41:37.600
fully released yet that we wanna make sure are there


00:41:37.600 --> 00:41:40.520
and tested heavily before we go into GA.


00:41:40.520 --> 00:41:42.680
- Right, but if what's there works for people,


00:41:42.680 --> 00:41:44.720
that they could use it?


00:41:44.720 --> 00:41:46.680
- Oh yeah, should definitely work.


00:41:46.680 --> 00:41:48.640
If you run into weird bugs like that, let us know.


00:41:48.640 --> 00:41:53.640
- Yeah, how does it plug into like the cloud visibility


00:41:53.640 --> 00:41:58.560
layer and all that is if I run some one and want some two,


00:41:58.560 --> 00:42:00.720
is it gonna go crazy or is it?


00:42:00.720 --> 00:42:02.600
- No, so they both will be configured


00:42:02.600 --> 00:42:04.320
to talk to the right API.


00:42:04.320 --> 00:42:07.260
And so you won't be able to see them in the same place.


00:42:07.260 --> 00:42:10.600
So that's, you know, unfortunate if you will,


00:42:10.600 --> 00:42:14.440
but you can definitely run them side by side.


00:42:14.440 --> 00:42:16.000
I mean, the environments aren't compatible,


00:42:16.000 --> 00:42:18.000
so you'll have to have different Python environments


00:42:18.000 --> 00:42:23.440
running them in. But yeah, but otherwise, yeah, I mean, I think some of our 1.0 clients are starting


00:42:23.440 --> 00:42:29.200
to... pip install prefect is equal equal one something or equal equal two or something along


00:42:29.200 --> 00:42:33.280
those lines, right? You'd like need different libraries. Yeah. So if you just did pip install


00:42:33.280 --> 00:42:38.000
prefect right now, you'd get a official 1.0 release. I don't remember the number. So you'll


00:42:38.000 --> 00:42:43.360
have to make sure that you allow for pre-release in your pip command. So either I think if you


00:42:43.360 --> 00:42:45.580
you just specify it, equals equals 2.0.


00:42:45.580 --> 00:42:49.240
I think we're at like B3 right now,


00:42:49.240 --> 00:42:50.700
then you'll get it.


00:42:50.700 --> 00:42:52.320
But yeah, you have to explicitly call it out


00:42:52.320 --> 00:42:54.820
since it's not, since it's still on beta.


00:42:54.820 --> 00:42:59.880
- I always like going to pypi.org.


00:42:59.880 --> 00:43:02.920
It just, like it's 375,000.


00:43:02.920 --> 00:43:05.280
- I know, it's an amazing.


00:43:05.280 --> 00:43:07.960
- Yeah, so one, one, two, one is the current one,


00:43:07.960 --> 00:43:12.520
but in here, yeah, you're 2.0 beta three.


00:43:12.520 --> 00:43:14.960
And we are planning to cut another release later this week.


00:43:14.960 --> 00:43:16.540
So you can expect before.


00:43:16.540 --> 00:43:19.560
- Probably it'll be before by the time people


00:43:19.560 --> 00:43:21.600
get around to hearing this and I get around to it.


00:43:21.600 --> 00:43:22.440
- Yeah, that's true.


00:43:22.440 --> 00:43:24.360
- So on, yeah, yeah, yeah.


00:43:24.360 --> 00:43:25.880
But still really cool.


00:43:25.880 --> 00:43:28.560
So basically your advice to people who are like,


00:43:28.560 --> 00:43:30.360
hey, this sounds interesting, I wanna check it out.


00:43:30.360 --> 00:43:32.040
Like just start with two.


00:43:32.040 --> 00:43:33.600
- Yeah, I'd say just start with two.


00:43:33.600 --> 00:43:36.640
It's working, easier to grok,


00:43:36.640 --> 00:43:40.300
and I think is more powerful and more flexible


00:43:40.300 --> 00:43:41.320
for different use cases,


00:43:41.320 --> 00:43:44.340
especially if you're thinking outside of data.


00:43:44.340 --> 00:43:45.180
- Sure.


00:43:45.180 --> 00:43:49.780
So when I hear people talk about data engineering,


00:43:49.780 --> 00:43:51.380
you know, if you go into that world,


00:43:51.380 --> 00:43:54.900
you see all these amazing tools that people have built


00:43:54.900 --> 00:43:57.200
that look like, wow, these are really amazing.


00:43:57.200 --> 00:43:59.500
And to me, they feel quite similar,


00:43:59.500 --> 00:44:03.300
like Prefect and, you know, friends.


00:44:03.300 --> 00:44:06.260
It feels real similar to the web frameworks, right?


00:44:06.260 --> 00:44:09.260
Like Flask or Django, you know, like, okay.


00:44:09.260 --> 00:44:11.340
So for example, what I mean by that is in Flask,


00:44:11.340 --> 00:44:13.180
all I have to do is I have to say,


00:44:13.180 --> 00:44:15.060
here's a function that goes to this URL


00:44:15.060 --> 00:44:18.140
and I just write the code and return a dictionary


00:44:18.140 --> 00:44:18.980
or something like that.


00:44:18.980 --> 00:44:23.980
I don't have to think about headers, cookies, connect,


00:44:23.980 --> 00:44:27.980
you know, like stay connected header, HTTP to traffic.


00:44:27.980 --> 00:44:30.060
Like I just do the little bit


00:44:30.060 --> 00:44:33.260
and it just, it puts it all together for me.


00:44:33.260 --> 00:44:35.420
And in the data engineering world,


00:44:35.420 --> 00:44:36.580
there's a bunch of stuff like that,


00:44:36.580 --> 00:44:41.180
that I feel many people are wholly unaware of probably.


00:44:41.180 --> 00:44:44.420
- Yeah, there is an explosion of tooling


00:44:44.420 --> 00:44:45.740
in data engineering right now


00:44:45.740 --> 00:44:49.520
and also in kind of the adjacent analytics world.


00:44:49.520 --> 00:44:51.500
I think this kind of goes back to what I was saying


00:44:51.500 --> 00:44:53.660
about how we kind of crystallize this concept


00:44:53.660 --> 00:44:54.620
of negative engineering.


00:44:54.620 --> 00:44:56.380
And it's just important.


00:44:56.380 --> 00:44:57.780
I think all of these tools come


00:44:57.780 --> 00:44:59.660
from some very real use case, right?


00:44:59.660 --> 00:45:01.780
And I think it's just important to figure out,


00:45:01.780 --> 00:45:03.620
like the way I talk to people about this stuff


00:45:03.620 --> 00:45:07.820
is you shouldn't really pick a tool just on its current feature set.


00:45:07.820 --> 00:45:11.220
You should pick it on its vision, as well as whether it works for you today,


00:45:11.220 --> 00:45:12.820
because you're going to change a lot,


00:45:12.820 --> 00:45:14.720
and you want to make sure that the tool is changing with you,


00:45:14.720 --> 00:45:17.020
because these tools, especially the Explosion of Startups,


00:45:17.020 --> 00:45:18.620
were all changing quite quickly,


00:45:18.620 --> 00:45:21.020
and you want to make sure that we're changing in an aligned way,


00:45:21.020 --> 00:45:23.420
and having that fleshed out vision is important.


00:45:23.420 --> 00:45:25.320
And if it's just a tool that seems cool,


00:45:25.320 --> 00:45:29.620
but like, "What exactly is this doing for me?"


00:45:29.620 --> 00:45:32.320
Like precisely, if you can't really articulate that,


00:45:32.320 --> 00:45:34.640
then, you know, that's not to say you shouldn't keep using it


00:45:34.640 --> 00:45:36.840
or something, but just that's always my exercise


00:45:36.840 --> 00:45:38.080
that I do with new tools.


00:45:38.080 --> 00:45:41.980
- Yeah, when it's something as fundamental as this,


00:45:41.980 --> 00:45:44.320
you kind of have to think about,


00:45:44.320 --> 00:45:46.960
I'm gonna live with this for a while.


00:45:46.960 --> 00:45:49.760
Do I wanna have this as my roommate


00:45:49.760 --> 00:45:51.600
when I come to work, sort of, right?


00:45:51.600 --> 00:45:52.800
- Do I wanna debug this?


00:45:52.800 --> 00:45:54.640
Do I wanna exactly extend it?


00:45:54.640 --> 00:45:56.700
You know, you're definitely gonna do something weird with it.


00:45:56.700 --> 00:45:59.840
We've all done weird things with every tool we've used.


00:45:59.840 --> 00:46:01.400
- Oh yeah, absolutely.


00:46:01.400 --> 00:46:06.400
- All right, so my question to you about this sort of


00:46:06.400 --> 00:46:08.760
like parallel to Flask and the web frameworks


00:46:08.760 --> 00:46:10.200
and various other things,


00:46:10.200 --> 00:46:14.600
this is solving a lot of negative engineering problems


00:46:14.600 --> 00:46:16.820
for data scientists and data engineers.


00:46:16.820 --> 00:46:21.840
What do you see, where do you see maybe people like me


00:46:21.840 --> 00:46:26.440
who mostly do APIs and web apps and things along those lines


00:46:26.440 --> 00:46:29.600
like where should I be using stuff like this?


00:46:29.600 --> 00:46:31.240
And where do you see this solving problems


00:46:31.240 --> 00:46:33.280
for people who don't traditionally put on


00:46:33.280 --> 00:46:36.000
the data science, data engineering hat?


00:46:36.000 --> 00:46:39.440
- So there's two places that I think are relevant.


00:46:39.440 --> 00:46:43.360
I think the first is just really kind of tactical,


00:46:43.360 --> 00:46:45.440
just tracking of background work,


00:46:45.440 --> 00:46:46.680
tracking of background tasks, right?


00:46:46.680 --> 00:46:49.520
Like Celery is a popular example for something like this.


00:46:49.520 --> 00:46:51.440
Prefect can-


00:46:51.440 --> 00:46:52.640
- Yeah, let me give you an example.


00:46:52.640 --> 00:46:55.720
So in my world, I might hit a button


00:46:55.720 --> 00:46:57.760
and have to send out thousands of emails


00:46:57.760 --> 00:46:59.040
because of that, right?


00:46:59.040 --> 00:47:01.320
And then maybe based on that, it might,


00:47:01.320 --> 00:47:03.240
if it bounces, take them out of the email list


00:47:03.240 --> 00:47:04.800
or whatever, right?


00:47:04.800 --> 00:47:06.680
- Exactly, you wanna record the fact,


00:47:06.680 --> 00:47:08.360
it's a perfect example.


00:47:08.360 --> 00:47:10.760
So just anything like that for a background task.


00:47:10.760 --> 00:47:11.800
And that's one of the things too,


00:47:11.800 --> 00:47:13.480
that we're gonna try to make even simpler


00:47:13.480 --> 00:47:16.200
because we have focused a little bit on the data space


00:47:16.200 --> 00:47:19.200
and the very easy changes we can make to kind of extend that.


00:47:19.200 --> 00:47:21.000
And then the second thing,


00:47:21.000 --> 00:47:23.360
and this is the way I always kind of like


00:47:23.360 --> 00:47:24.200
to think about GreefFact,


00:47:24.200 --> 00:47:27.080
it's one way you can consider everything I've been saying


00:47:27.080 --> 00:47:29.680
is we're kind of like the SRE toolkit


00:47:29.680 --> 00:47:31.280
at the business logic layer.


00:47:31.280 --> 00:47:34.360
And it's something that kind of everybody could just use.


00:47:34.360 --> 00:47:36.120
Just that single pane of glass,


00:47:36.120 --> 00:47:37.840
you get alerts, you get notifications,


00:47:37.840 --> 00:47:39.040
you can collaborate with people,


00:47:39.040 --> 00:47:40.840
and it's just kind of all right there for you.


00:47:40.840 --> 00:47:41.880
And at the end of the day,


00:47:41.880 --> 00:47:44.040
like, you know, you don't really have to manage the code


00:47:44.040 --> 00:47:45.840
that much if you're just using the UI.


00:47:45.840 --> 00:47:48.320
And so I think that's how we can expand


00:47:48.320 --> 00:47:50.880
by just kind of giving people that value.


00:47:50.880 --> 00:47:52.520
You want to look at the things that are happening.


00:47:52.520 --> 00:47:54.400
You want to see a place where all of your systems


00:47:54.400 --> 00:47:55.600
are just right there,


00:47:55.600 --> 00:47:56.880
and it's at the business logic layer.


00:47:56.880 --> 00:47:58.580
You're not looking at CPU and memory all the time,


00:47:58.580 --> 00:48:01.020
although you could display that if you wanted to.


00:48:01.020 --> 00:48:03.180
- So how about this as an example?


00:48:03.180 --> 00:48:08.180
I create an e-commerce site and I want to track,


00:48:08.180 --> 00:48:11.460
I just want visibility into people buying stuff.


00:48:11.460 --> 00:48:14.380
What's working, what's failing, what's the rate,


00:48:14.380 --> 00:48:17.100
the bosses, I need something on the web


00:48:17.100 --> 00:48:19.140
that I can look at this and watch it get reported.


00:48:19.140 --> 00:48:21.900
- Exactly, and the key thing here, right,


00:48:21.900 --> 00:48:24.580
that you said is like puts it in prefix camp


00:48:24.580 --> 00:48:27.300
and not in say, Datadogs camp,


00:48:27.300 --> 00:48:31.660
is you wanna track the user button click, for example,


00:48:31.660 --> 00:48:34.820
like some business logic thing.


00:48:34.820 --> 00:48:37.420
Whereas something like Datadog is an SRE


00:48:37.420 --> 00:48:39.380
or observability tool that's gonna tell you


00:48:39.380 --> 00:48:40.960
your API throughput.


00:48:40.960 --> 00:48:44.340
Prefect isn't trying to do negative engineering


00:48:44.340 --> 00:48:45.740
for your raw infrastructure,


00:48:45.740 --> 00:48:47.860
it's trying to do it for your business logic.


00:48:47.860 --> 00:48:48.700
- Got it.


00:48:48.700 --> 00:48:49.940
Okay, yeah, very interesting.


00:48:49.940 --> 00:48:54.180
So Prefect, open source.


00:48:54.180 --> 00:48:56.740
If I want, I can just take it and do my own thing, right?


00:48:56.740 --> 00:48:57.660
- Oh yeah, go for it.


00:48:57.660 --> 00:49:02.660
It is Apache 2.0 licensed as of maybe a month ago.


00:49:02.660 --> 00:49:06.380
So before we had a few different licenses floating around


00:49:06.380 --> 00:49:08.380
but now we're all in, all Apache 2.0.


00:49:08.380 --> 00:49:11.300
- Okay, give me the elevator pitch on Apache 2.0.


00:49:11.300 --> 00:49:13.380
Like what does that mean I can do, sort of?


00:49:13.380 --> 00:49:16.440
- It means you can do quite literally anything


00:49:16.440 --> 00:49:19.660
as long as you don't violate trademarks, essentially.


00:49:19.660 --> 00:49:22.460
And so, you know, don't violate the logo


00:49:22.460 --> 00:49:23.900
and stuff like that.


00:49:23.900 --> 00:49:27.140
- Yeah, exactly, it's very, very generous.


00:49:27.140 --> 00:49:29.980
You don't have to check with us or anything like that.


00:49:29.980 --> 00:49:31.900
- Sure, okay, excellent.


00:49:31.900 --> 00:49:33.420
Yeah, you guys are doing a lot of stuff,


00:49:33.420 --> 00:49:34.700
not just with Prefect,


00:49:34.700 --> 00:49:37.540
but with other projects out there as well, right?


00:49:37.540 --> 00:49:38.380
- Yeah, we are.


00:49:38.380 --> 00:49:41.140
We really, kind of like I said at the beginning,


00:49:41.140 --> 00:49:44.620
tried to instill this kind of open source ethos


00:49:44.620 --> 00:49:46.900
that, even at the business layer,


00:49:46.900 --> 00:49:50.100
like we're trying really hard to genuinely deliver value,


00:49:50.100 --> 00:49:52.740
right, and that includes to our customers and users,


00:49:52.740 --> 00:49:54.420
but also to just the broader ecosystem


00:49:54.420 --> 00:49:58.260
that we find ourselves in, which is exploding right now.


00:49:58.260 --> 00:50:02.220
And so we have a lot of different efforts that we--


00:50:02.220 --> 00:50:04.220
yeah, I can definitely go through and list them


00:50:04.220 --> 00:50:06.100
all, like ways we try to--


00:50:06.100 --> 00:50:07.260
Yeah, sure.


00:50:07.260 --> 00:50:09.140
Yeah, give us a little bit.


00:50:09.140 --> 00:50:10.460
So we do a few different things.


00:50:10.460 --> 00:50:14.260
So one thing that we do is we will send pizza


00:50:14.260 --> 00:50:17.060
to basically any conference or meetup talk that


00:50:17.060 --> 00:50:19.780
has a talk featuring Prefect.


00:50:19.780 --> 00:50:21.820
So you just have to submit a quick application.


00:50:21.820 --> 00:50:22.880
will probably reach out to you.


00:50:22.880 --> 00:50:25.400
And then, you know, that's pretty much it there.


00:50:25.400 --> 00:50:30.140
If you are a Prefect Engineer,


00:50:30.140 --> 00:50:32.340
we have kind of this like advocacy program.


00:50:32.340 --> 00:50:34.700
And if you get involved with that,


00:50:34.700 --> 00:50:36.700
we've sent people to conferences before


00:50:36.700 --> 00:50:38.900
that are not Prefect employees.


00:50:38.900 --> 00:50:41.900
So that's another thing that we try to give back.


00:50:41.900 --> 00:50:43.620
More concretely on the business side,


00:50:43.620 --> 00:50:45.980
we, every engineering team at Prefect,


00:50:45.980 --> 00:50:49.600
so right now there are five kind of distinct teams.


00:50:49.600 --> 00:50:52.120
They each get a $10,000 annual budget


00:50:52.120 --> 00:50:55.200
to sponsor any and all open source projects


00:50:55.200 --> 00:50:58.640
or just maintainers directly that they think are impactful,


00:50:58.640 --> 00:51:01.300
maybe for their work or maybe for our ecosystem.


00:51:01.300 --> 00:51:02.960
And so some of them, just to give you an example,


00:51:02.960 --> 00:51:05.240
one of the ones that kind of kicked this whole thing off


00:51:05.240 --> 00:51:07.980
was we sponsor MKDocs Material Theme,


00:51:07.980 --> 00:51:10.420
just really slick theming.


00:51:10.420 --> 00:51:11.880
And so that was the first one.


00:51:11.880 --> 00:51:13.840
We also sponsor a lot of Vue projects


00:51:13.840 --> 00:51:17.280
and we're gonna be expanding this to like FastAPI


00:51:17.280 --> 00:51:21.200
and some other ones that we just have to dot our I's


00:51:21.200 --> 00:51:23.120
and everything and cross our T's.


00:51:23.120 --> 00:51:27.200
And then, so this is kind of an escalating rate intensity.


00:51:27.200 --> 00:51:29.840
And kind of the last thing is we've actually,


00:51:29.840 --> 00:51:33.480
pretty much the company has gotten into investing


00:51:33.480 --> 00:51:37.160
in certain open source tools that we think are very


00:51:37.160 --> 00:51:38.880
compatible with some of the things we want to do.


00:51:38.880 --> 00:51:42.000
And so the big one, the headline one here is Textualize.


00:51:42.000 --> 00:51:46.360
So Will, the author of, exactly,


00:51:46.360 --> 00:51:47.680
I always am afraid to say this last thing


00:51:47.680 --> 00:51:49.960
because I'm afraid I'm going to say it wrong.


00:51:49.960 --> 00:51:52.600
So he's the author of Rich and Textual.


00:51:52.600 --> 00:51:55.920
And as everyone knows now, it's all out there.


00:51:55.920 --> 00:51:57.440
So he's building the service Textualize


00:51:57.440 --> 00:52:00.200
for hosting these text-based terminal applications


00:52:00.200 --> 00:52:02.000
and distributing them through the web.


00:52:02.000 --> 00:52:03.280
So in kind of an interesting sense,


00:52:03.280 --> 00:52:07.520
it's like spiritually similar to the hybrid model, right?


00:52:07.520 --> 00:52:09.320
You can kind of run one of these agents


00:52:09.320 --> 00:52:12.280
and we've always wanted to expose richer interactions


00:52:12.280 --> 00:52:14.240
with Prefect agents running in your infrastructure


00:52:14.240 --> 00:52:15.320
through our UI.


00:52:15.320 --> 00:52:18.760
And when we talked to Will, I was like, "Oh, this is it. This is perfect."


00:52:18.760 --> 00:52:21.480
And it's got all the right theming differences.


00:52:21.480 --> 00:52:23.120
You'll be able to tell this is something you wrote.


00:52:23.120 --> 00:52:29.040
It's very text-driven compared to our more branded assets lurking around the UI.


00:52:29.040 --> 00:52:31.920
And so, yeah, we invested in his company.


00:52:31.920 --> 00:52:34.000
Awesome.


00:52:34.000 --> 00:52:34.880
I'm really glad to hear that.


00:52:34.880 --> 00:52:37.160
I'm also really glad for Rich that he's got that going.


00:52:37.160 --> 00:52:40.320
He's been making such progress.


00:52:40.320 --> 00:52:44.240
Oh, yeah. He gets to the top of my head every other day.


00:52:44.240 --> 00:52:45.320
I feel so bad.


00:52:45.320 --> 00:52:46.480
I'm very happy for Will,


00:52:46.480 --> 00:52:48.380
and he's been doing so much with Rich.


00:52:48.380 --> 00:52:51.960
My brother's named Rich, it's a problem.


00:52:51.960 --> 00:52:55.520
So, but you go and I'm finding so many of these projects,


00:52:55.520 --> 00:52:56.720
I'm like, oh, this is really interesting,


00:52:56.720 --> 00:52:58.640
especially for our Python Bytes podcast,


00:52:58.640 --> 00:52:59.800
we're just covering packages


00:52:59.800 --> 00:53:01.600
and things that are interesting that week.


00:53:01.600 --> 00:53:03.720
And more often than not, you're like,


00:53:03.720 --> 00:53:04.960
that's got a really cool UI.


00:53:04.960 --> 00:53:06.520
Oh, I see in the dependency,


00:53:06.520 --> 00:53:09.560
requirements.txt or pyproject.toml,


00:53:09.560 --> 00:53:12.760
and Rich is at the heart of making that look good, so.


00:53:12.760 --> 00:53:14.680
So yeah, we use it.


00:53:14.680 --> 00:53:16.240
It is great.


00:53:16.240 --> 00:53:17.080
- Yeah, absolutely.


00:53:17.080 --> 00:53:18.840
It totally is.


00:53:18.840 --> 00:53:22.160
So one of the final things I want to talk to you about


00:53:22.160 --> 00:53:26.680
is creating a business around open source


00:53:26.680 --> 00:53:29.080
with this very permissible model that you're giving away.


00:53:29.080 --> 00:53:30.840
And I think it's super admirable.


00:53:30.840 --> 00:53:34.680
I know there's other companies doing it


00:53:34.680 --> 00:53:38.480
to various degrees and to various degrees of success.


00:53:38.480 --> 00:53:41.380
You know, like MongoDB comes to mind, for example,


00:53:41.380 --> 00:53:42.560
and, you know, Red Hat and stuff.


00:53:42.560 --> 00:53:47.560
But all these examples that I see are just like, fantastic.


00:53:47.560 --> 00:53:50.400
Look at what you guys are doing.


00:53:50.400 --> 00:53:53.520
I mean, you're investing in other open source projects


00:53:53.520 --> 00:53:57.680
by having a successful business


00:53:57.680 --> 00:54:02.680
with this open source core engine as the core.


00:54:02.680 --> 00:54:04.680
And so I just wanted to give you a chance


00:54:04.680 --> 00:54:05.920
to talk about the business model,


00:54:05.920 --> 00:54:07.780
maybe riff on that a bit,


00:54:07.780 --> 00:54:11.280
give people advice out there who are doing their own thing.


00:54:11.280 --> 00:54:15.120
Like another one that comes to mind is you guys do a lot with Dask and like Coiled is


00:54:15.120 --> 00:54:21.240
now sort of in a similar position with Dask and hosting Dask as a service sort of.


00:54:21.240 --> 00:54:22.240
Right.


00:54:22.240 --> 00:54:23.240
Yeah.


00:54:23.240 --> 00:54:24.240
And we're partners with Coiled too.


00:54:24.240 --> 00:54:26.520
So we keep up to date on our integrations there.


00:54:26.520 --> 00:54:31.480
So yeah, our business model for cloud and it's, you know, unsurprisingly, we're going


00:54:31.480 --> 00:54:35.140
to get some slight changes, but like spiritually they're very similar.


00:54:35.140 --> 00:54:39.280
So first and foremost, we really want to make sure, especially like the hobbyists, the open


00:54:39.280 --> 00:54:47.080
source projects out there, you can come in and use the system to actually achieve powerful


00:54:47.080 --> 00:54:53.080
use cases for free. And so one of the ways that we came up with our free tier volume,


00:54:53.080 --> 00:54:59.020
which is 20,000 free task runs a month, is we asked ourselves for just a very bare bones


00:54:59.020 --> 00:55:03.240
Airflow deployment running, like how many tasks would you turn through a month? And


00:55:03.240 --> 00:55:08.980
And you could run a business's ETL processes off of that volume.


00:55:08.980 --> 00:55:10.920
And so that's kind of roughly where we pick this number.


00:55:10.920 --> 00:55:14.360
So we do think that this satisfies real business need.


00:55:14.360 --> 00:55:19.280
And then the reason that you would move out of it would be for pretty standard reasons.


00:55:19.280 --> 00:55:21.000
You want to unlock more scale.


00:55:21.000 --> 00:55:23.360
So then you talk to us.


00:55:23.360 --> 00:55:26.800
You want to add more users because you're capped on users.


00:55:26.800 --> 00:55:29.160
And maybe even you want more teams.


00:55:29.160 --> 00:55:32.520
So if you're an actual enterprise, you're presumably going to have some more permission


00:55:32.520 --> 00:55:34.840
structures that you need to grapple with.


00:55:34.840 --> 00:55:36.680
And so that's when our enterprise tier comes in,


00:55:36.680 --> 00:55:38.820
SSO integrations, all of that fun stuff.


00:55:38.820 --> 00:55:42.880
And kind of, this isn't really gonna change


00:55:42.880 --> 00:55:44.920
in spirit for 2.0, it's gonna be pretty similar.


00:55:44.920 --> 00:55:46.920
There's gonna be some sort of throughput metric,


00:55:46.920 --> 00:55:49.360
maybe it's task runs, maybe it's storage,


00:55:49.360 --> 00:55:51.520
something else that, you know, a lot of it's free.


00:55:51.520 --> 00:55:54.480
And then you wanna add more users, more workspaces,


00:55:54.480 --> 00:55:57.120
you start to talk to us and then kind of it grows.


00:55:57.120 --> 00:55:59.160
You know, if you start to have really big performance needs


00:55:59.160 --> 00:56:02.760
or you have requirements for data locality


00:56:02.760 --> 00:56:03.600
and things like that,


00:56:03.600 --> 00:56:06.120
like we start to talk, you know, enterprise plans.


00:56:06.120 --> 00:56:07.560
So we tried to align it.


00:56:07.560 --> 00:56:08.520
And one of the things too,


00:56:08.520 --> 00:56:12.360
that was an insight for me to really think about


00:56:12.360 --> 00:56:15.040
in the early days was like business models,


00:56:15.040 --> 00:56:17.240
you're not selling the code you write.


00:56:17.240 --> 00:56:20.040
And that's why open source, you know, works.


00:56:20.040 --> 00:56:22.520
You're, there's some value that you're providing


00:56:22.520 --> 00:56:24.880
and you have to find what that is.


00:56:24.880 --> 00:56:28.720
And like for us, it's kind of almost like funny


00:56:28.720 --> 00:56:31.400
having to host and maintain an API locally


00:56:31.400 --> 00:56:32.840
is negative engineering.


00:56:32.840 --> 00:56:34.920
And so that's not what you're trying to do.


00:56:34.920 --> 00:56:36.160
You're trying to schedule jobs.


00:56:36.160 --> 00:56:39.080
And so kind of migrating up to cloud


00:56:39.080 --> 00:56:40.560
is tends to be a natural thing,


00:56:40.560 --> 00:56:42.240
unless you've got the resources to manage it


00:56:42.240 --> 00:56:43.840
and scale it out, which is also perfectly fine.


00:56:43.840 --> 00:56:45.920
- Well, and the thing is,


00:56:45.920 --> 00:56:49.400
there's a lot of expertise in running systems like this.


00:56:49.400 --> 00:56:50.720
- Yeah, there really is.


00:56:50.720 --> 00:56:51.960
Yeah, and the database too,


00:56:51.960 --> 00:56:54.200
you want it to be scalable and yeah.


00:56:54.200 --> 00:56:56.960
- Yeah, so I think there's a lot of value.


00:56:56.960 --> 00:56:58.160
I think it makes perfect sense.


00:56:58.160 --> 00:57:02.500
like give you the core for free and you can run it


00:57:02.500 --> 00:57:04.320
and you can maintain it, it can be your baby


00:57:04.320 --> 00:57:08.600
or it can be kind of hands off and we'll take care of it.


00:57:08.600 --> 00:57:10.240
Right, like you said, authentication


00:57:10.240 --> 00:57:11.720
and all that kind of stuff.


00:57:11.720 --> 00:57:15.120
- Yeah, and we have a really active,


00:57:15.120 --> 00:57:18.560
like a crazy active Slack community.


00:57:18.560 --> 00:57:20.640
So, you know, if you're doing that yourself


00:57:20.640 --> 00:57:22.120
and self hosting, they can go ask there


00:57:22.120 --> 00:57:24.160
and I'm sure you're gonna get a lot of responses.


00:57:24.160 --> 00:57:26.040
I think there's 16,000 people,


00:57:26.040 --> 00:57:27.200
something like that in there right now.


00:57:27.200 --> 00:57:29.680
- Wow, okay. - I mean, it's active.


00:57:29.680 --> 00:57:32.640
Like, messages pretty much, you know,


00:57:32.640 --> 00:57:34.680
flying by pretty regularly.


00:57:34.680 --> 00:57:38.840
And then, oh, our discourse as well is up and coming.


00:57:38.840 --> 00:57:41.400
- Yeah, I think it's worth maybe just highlighting.


00:57:41.400 --> 00:57:44.320
You guys have almost 9,000 stars on GitHub,


00:57:44.320 --> 00:57:48.080
which is, that's quite far up there.


00:57:48.080 --> 00:57:49.880
That's pretty awesome.


00:57:49.880 --> 00:57:51.080
- Yeah. - So, yeah,


00:57:51.080 --> 00:57:52.880
that's, y'all must be proud.


00:57:52.880 --> 00:57:54.880
- Yeah, we, you know, it's always fun


00:57:54.880 --> 00:57:55.760
when you're open source project.


00:57:55.760 --> 00:57:59.280
We reached the number one trending repo on GitHub one time.


00:57:59.280 --> 00:58:00.440
This was maybe two years ago.


00:58:00.440 --> 00:58:01.280
- Oh, wow.


00:58:01.280 --> 00:58:02.400
- We were, yeah.


00:58:02.400 --> 00:58:05.640
We had a random happy hour that night


00:58:05.640 --> 00:58:06.880
just to celebrate that it was fun.


00:58:06.880 --> 00:58:08.360
(laughing)


00:58:08.360 --> 00:58:09.440
- How long has it been out?


00:58:09.440 --> 00:58:10.960
When did you start it?


00:58:10.960 --> 00:58:12.280
- So let's see.


00:58:12.280 --> 00:58:15.640
The Prefect, the company is four years old


00:58:15.640 --> 00:58:17.980
and I believe we open sourced,


00:58:17.980 --> 00:58:22.120
I wanna say in December of 2018.


00:58:22.120 --> 00:58:26.100
So the core at least has been out for a while.


00:58:26.100 --> 00:58:28.580
And then cloud was maybe six months later


00:58:28.580 --> 00:58:31.300
when the first version of cloud got out.


00:58:31.300 --> 00:58:32.140
- Cool.


00:58:32.140 --> 00:58:35.540
Yeah, so not brand new, but not super old.


00:58:35.540 --> 00:58:36.680
- Yeah, battle tested,


00:58:36.680 --> 00:58:40.020
but definitely still got a lot to build.


00:58:40.020 --> 00:58:40.880
- Yeah, for sure.


00:58:40.880 --> 00:58:44.060
Did you guys build it on Python 3 only?


00:58:44.060 --> 00:58:47.020
- Yeah, Python 3 only.


00:58:47.020 --> 00:58:50.620
Yeah, we tried to just build for the future, right?


00:58:50.620 --> 00:58:51.620
- Yeah.


00:58:51.620 --> 00:58:53.120
- I have the same philosophy.


00:58:53.120 --> 00:58:55.360
(laughing)


00:58:55.360 --> 00:58:59.560
You end up in a place with a lot of negative engineering


00:58:59.560 --> 00:59:02.440
if you try to support too much, too far back, I would say.


00:59:02.440 --> 00:59:03.840
Yeah, for the community, you got the Slack


00:59:03.840 --> 00:59:04.660
and that's pretty awesome.


00:59:04.660 --> 00:59:06.480
You got the discourse.


00:59:06.480 --> 00:59:08.680
Then you also have Club 42.


00:59:08.680 --> 00:59:10.400
And if people just go to your website


00:59:10.400 --> 00:59:11.960
and they go to community, they'll see this.


00:59:11.960 --> 00:59:13.900
You'll see the I want a pizza if you've got a user group.


00:59:13.900 --> 00:59:17.240
But I'm guessing this has to do something


00:59:17.240 --> 00:59:18.160
with Hitchhiker's Guide.


00:59:18.160 --> 00:59:20.400
What's the story with this Club 42 thing?


00:59:20.400 --> 00:59:23.560
- Yeah, so Hitchhiker's Guide definitely is a theme for us.


00:59:23.560 --> 00:59:25.800
Everyone gets a free copy when you join.


00:59:25.800 --> 00:59:30.800
Club 42 is our application only, so you can apply.


00:59:30.800 --> 00:59:34.000
It's not invite only.


00:59:34.000 --> 00:59:36.560
Set, it's a private group of kind of


00:59:36.560 --> 00:59:38.920
external advocates of Prefect.


00:59:38.920 --> 00:59:41.360
So people who just really want to get early access


00:59:41.360 --> 00:59:43.840
to things, who have proven themselves to be


00:59:43.840 --> 00:59:46.480
positive forces in our community, which to be clear,


00:59:46.480 --> 00:59:47.680
doesn't mean that they're necessarily,


00:59:47.680 --> 00:59:49.320
like some of them are technical experts,


00:59:49.320 --> 00:59:50.600
but you don't necessarily have to be.


00:59:50.600 --> 00:59:53.320
The point is just that you kind of help our community


00:59:53.320 --> 00:59:55.760
succeed in whatever way that makes sense.


00:59:55.760 --> 00:59:56.680
Just keep it healthy.


00:59:56.680 --> 00:59:58.320
- Yeah, yeah, that's fantastic.


00:59:58.320 --> 01:00:01.920
- Yeah, we run like special events with them


01:00:01.920 --> 01:00:03.560
and they get early access to everything.


01:00:03.560 --> 01:00:06.260
They were the first people that got cloud 2.0 access.


01:00:06.260 --> 01:00:08.280
- I think that's really valuable.


01:00:08.280 --> 01:00:09.840
I think more companies should be doing it.


01:00:09.840 --> 01:00:11.920
I know MongoDB did that for a while.


01:00:11.920 --> 01:00:14.200
I don't, I think they stopped.


01:00:14.200 --> 01:00:16.420
You know, Microsoft has Microsoft MVPs


01:00:16.420 --> 01:00:18.320
and I'm pretty sure Docker has something similar,


01:00:18.320 --> 01:00:20.360
but yeah, it's a cool idea.


01:00:20.360 --> 01:00:21.740
I'm glad you guys are doing it.


01:00:21.740 --> 01:00:23.320
- Yeah, it's really fun.


01:00:23.320 --> 01:00:24.920
And just to kind of get, right,


01:00:24.920 --> 01:00:26.920
you get a bunch of people all caring about one thing


01:00:26.920 --> 01:00:30.000
kind of together and interesting conversations


01:00:30.000 --> 01:00:31.160
always happen.


01:00:31.160 --> 01:00:31.980
- For sure.


01:00:31.980 --> 01:00:35.520
All right, we're getting short on our time here, Chris,


01:00:35.520 --> 01:00:38.760
but I guess one more thing I can imagine,


01:00:38.760 --> 01:00:44.720
I know a lot of people who are working for amazing companies


01:00:44.720 --> 01:00:48.200
are starting to reevaluate the amazingness of it.


01:00:48.200 --> 01:00:50.420
now that they've got to go back to the office


01:00:50.420 --> 01:00:52.700
or like the rules have changed


01:00:52.700 --> 01:00:53.840
and then they've changed again


01:00:53.840 --> 01:00:56.540
and they may be thinking of other positions.


01:00:56.540 --> 01:00:59.140
What's the hiring situation?


01:00:59.140 --> 01:01:01.780
You guys have open positions to work on this fun stuff?


01:01:01.780 --> 01:01:04.040
- We do have open positions.


01:01:04.040 --> 01:01:06.300
We're fully remote, so no worries on that.


01:01:06.300 --> 01:01:08.660
Although we do have plenty of opportunities


01:01:08.660 --> 01:01:11.540
for meeting people in person as well, optionally.


01:01:11.540 --> 01:01:14.340
So we have kind of these hubs that people can apply to


01:01:14.340 --> 01:01:16.620
and they'll show up like 20 people at a time


01:01:16.620 --> 01:01:18.900
and have like a mini internal conference.


01:01:18.900 --> 01:01:20.580
Now we're having our first full company offsite


01:01:20.580 --> 01:01:21.620
later in July, it's gonna be really fun.


01:01:21.620 --> 01:01:24.580
But anyways, yes, we have open roles, highly encouraged.


01:01:24.580 --> 01:01:27.960
If you don't, so right now, the biggest roles on my mind


01:01:27.960 --> 01:01:30.020
are kind of more in the platform space.


01:01:30.020 --> 01:01:32.760
So SRE style roles, platform engineer roles.


01:01:32.760 --> 01:01:35.100
And so if that appeals to you


01:01:35.100 --> 01:01:36.580
or you have any experience there, let us know.


01:01:36.580 --> 01:01:39.820
And if you don't see a role on our website


01:01:39.820 --> 01:01:42.620
that maybe fits you, don't be shy about reaching out


01:01:42.620 --> 01:01:44.620
'cause sometimes these things take a long time


01:01:44.620 --> 01:01:47.140
as formally should keep a conversation going.


01:01:47.140 --> 01:01:49.500
- Sure, so I have this special power,


01:01:49.500 --> 01:01:51.780
it doesn't match one of your three listings,


01:01:51.780 --> 01:01:54.020
but I bet it could help somehow, right?


01:01:54.020 --> 01:01:54.860
- Exactly, exactly.


01:01:54.860 --> 01:01:57.140
I mean, you know, it happens, it happens.


01:01:57.140 --> 01:01:59.340
It's happened to Prefect before, so yeah.


01:01:59.340 --> 01:02:02.340
My email is chris@prefect.io,


01:02:02.340 --> 01:02:04.740
so you can feel free to just email me.


01:02:04.740 --> 01:02:06.340
- Yeah, fantastic, that's great.


01:02:06.340 --> 01:02:10.060
All right, I think that might be


01:02:10.060 --> 01:02:12.740
where we gotta leave it for data engineering and Prefect,


01:02:12.740 --> 01:02:14.920
but very, very interesting.


01:02:14.920 --> 01:02:15.900
But before you get out of here,


01:02:15.900 --> 01:02:17.500
you got to answer the final two questions.


01:02:17.500 --> 01:02:19.560
If you're going to write some Python code these days,


01:02:19.560 --> 01:02:21.360
what editor are you pulling out?


01:02:21.360 --> 01:02:24.400
- Oh, put me on the spot.


01:02:24.400 --> 01:02:26.440
I'm still a Vim user.


01:02:26.440 --> 01:02:30.920
I, you know, I'm a platform survivalist.


01:02:30.920 --> 01:02:33.560
If I find myself in the corners of an old system,


01:02:33.560 --> 01:02:35.280
I want to be, I want to feel powerful.


01:02:35.280 --> 01:02:37.280
And so Vim is where I'm at. - For sure.


01:02:37.280 --> 01:02:42.120
I think there's still a ton of people who are on the Vim


01:02:42.120 --> 01:02:44.360
and the Emacs, I mean, they can't talk to each other.


01:02:44.360 --> 01:02:45.560
They don't get along or anything, but.


01:02:45.560 --> 01:02:46.400
- Right, right.


01:02:46.400 --> 01:02:47.920
(laughing)


01:02:47.920 --> 01:02:51.460
- I started out programming, doing Emacs


01:02:51.460 --> 01:02:53.160
on Silicon Graphics machines.


01:02:53.160 --> 01:02:56.120
- Wait, so what's your now editor choice?


01:02:56.120 --> 01:02:58.440
- Right now, these days, I'm on PyCharm.


01:02:58.440 --> 01:02:59.480
- Okay, that's a good choice.


01:02:59.480 --> 01:03:00.920
PyCharm and VS Code seem very--


01:03:00.920 --> 01:03:04.560
- Yeah, I use VS Code as well for small little things.


01:03:04.560 --> 01:03:06.080
And if I'm like, here's my big project,


01:03:06.080 --> 01:03:08.400
then PyCharm is the choice, yeah.


01:03:08.400 --> 01:03:11.960
And then, notable PyPI package,


01:03:11.960 --> 01:03:13.820
I mean, Pippinstall Prefect is one of them,


01:03:13.820 --> 01:03:15.840
but like some library that you've seen


01:03:15.840 --> 01:03:17.360
that you're like, "Oh, this thing is amazing.


01:03:17.360 --> 01:03:19.480
"I really should tell the world about it."


01:03:19.480 --> 01:03:21.200
- Rich in textual, for sure.


01:03:21.200 --> 01:03:22.400
- Oh yeah.


01:03:22.400 --> 01:03:25.000
- FastAPI, I think is amazing.


01:03:25.000 --> 01:03:27.200
I really think that you can scale out


01:03:27.200 --> 01:03:29.840
some pretty powerful web servers with that.


01:03:29.840 --> 01:03:30.800
- It's really pretty amazing.


01:03:30.800 --> 01:03:33.840
I was just doing that before we jumped on the call.


01:03:33.840 --> 01:03:35.240
- Oh, nice, nice.


01:03:35.240 --> 01:03:37.480
And then, we did mention it earlier,


01:03:37.480 --> 01:03:40.720
Dask is a really powerful Python framework


01:03:40.720 --> 01:03:42.480
for distributed computing.


01:03:42.480 --> 01:03:44.040
Definitely easy to get started with


01:03:44.040 --> 01:03:45.720
and really powerful as you scale.


01:03:45.720 --> 01:03:52.600
Those are the ones that come to mind immediately.


01:03:52.600 --> 01:03:54.820
- Cool, no, those are all fantastic.


01:03:54.820 --> 01:03:57.600
All right, Chris, final call to action.


01:03:57.600 --> 01:03:59.160
People are interested in Prefect.


01:03:59.160 --> 01:04:00.240
What do you tell them?


01:04:00.240 --> 01:04:01.080
What do they do?


01:04:01.080 --> 01:04:04.960
- Definitely join our Slack and go to our GitHub.


01:04:04.960 --> 01:04:06.880
That's where you'll really be able to immediately


01:04:06.880 --> 01:04:08.680
kind of get involved in the action,


01:04:08.680 --> 01:04:10.120
figure out what's going on,


01:04:10.120 --> 01:04:12.680
just ask around for best practices,


01:04:12.680 --> 01:04:14.500
how to get started, get some project ideas,


01:04:14.500 --> 01:04:15.760
whatever the case may be.


01:04:15.760 --> 01:04:19.080
- Yeah, and you have a nice tutorial,


01:04:19.080 --> 01:04:21.960
but maybe what you would recommend,


01:04:21.960 --> 01:04:25.280
Orion docs, orion-docs.prefect.io,


01:04:25.280 --> 01:04:27.680
do you like the tutorial to follow along for now?


01:04:27.680 --> 01:04:30.680
- Yes, yes, I would definitely recommend Orion Docs


01:04:30.680 --> 01:04:32.680
to get started.


01:04:32.680 --> 01:04:35.680
And we'll slowly start making these more discoverable


01:04:35.680 --> 01:04:37.720
over the coming weeks.


01:04:37.720 --> 01:04:38.840
- Cool, I'll put it in the share notes


01:04:38.840 --> 01:04:40.240
so people can get to it.


01:04:40.240 --> 01:04:41.280
- Awesome.


01:04:41.280 --> 01:04:42.720
- Awesome, all right, well,


01:04:42.720 --> 01:04:43.960
it's really great to chat with you.


01:04:43.960 --> 01:04:45.560
Thanks for being here.


01:04:45.560 --> 01:04:46.680
- Yeah, thank you so much, Michael.


01:04:46.680 --> 01:04:47.800
This was really fun.


01:04:47.800 --> 01:04:49.040
- Yeah, it sure was, bye.


01:04:49.040 --> 01:04:59.040
[BLANK_AUDIO]

