WEBVTT

00:00:00.000 --> 00:00:04.440
Hey Joe, welcome to Talk Python to Me.


00:00:04.440 --> 00:00:06.640
>> Hi Michael, it's a pleasure to be here.


00:00:06.640 --> 00:00:09.280
>> It's a pleasure to have you here.


00:00:09.280 --> 00:00:12.000
We're talking Python to an R person.


00:00:12.000 --> 00:00:14.240
What's going on here? What's happening?


00:00:14.240 --> 00:00:15.440
>> I know, right?


00:00:15.440 --> 00:00:17.520
>> Cats and dogs living together.


00:00:17.520 --> 00:00:20.080
Oh my gosh. No, it's great.


00:00:20.080 --> 00:00:21.040
Glad to have you here.


00:00:21.040 --> 00:00:22.800
>> Yeah. Thanks.


00:00:22.800 --> 00:00:26.040
>> Yeah, you bet. So we're going to talk about Shiny,


00:00:26.040 --> 00:00:29.560
which has traditionally been UI framework,


00:00:29.560 --> 00:00:34.120
a web framework for kind of a rad, rapid development


00:00:34.120 --> 00:00:38.920
for R applications that need some interactivity.


00:00:38.920 --> 00:00:42.000
But you have a big release for the Python people.


00:00:42.000 --> 00:00:44.440
That's also interesting and worth talking about.


00:00:44.440 --> 00:00:48.160
So that's the topic of today's show.


00:00:48.160 --> 00:00:49.000
- Yeah, absolutely.


00:00:49.000 --> 00:00:52.240
I hope you starting out mentioning R


00:00:52.240 --> 00:00:54.560
that people haven't dropped off already.


00:00:54.560 --> 00:00:57.480
I promise this will have lots to say about Python


00:00:57.480 --> 00:00:59.280
and Shiny for Python.


00:00:59.280 --> 00:01:04.440
Of course, I'm sure signing up for Python is going to be super fun.


00:01:04.440 --> 00:01:06.960
Before we get to that, though, let's get started with your story.


00:01:06.960 --> 00:01:07.960
How did you get into programming?


00:01:07.960 --> 00:01:11.560
R and then what brought you over to Python?


00:01:11.560 --> 00:01:14.280
At least temporarily or partially?


00:01:14.280 --> 00:01:15.280
Yeah.


00:01:15.280 --> 00:01:19.600
My background was in web programming really more than anything else.


00:01:19.600 --> 00:01:24.080
I got into programming actually through desktop publishing and graphic design.


00:01:24.080 --> 00:01:27.180
That was what I was really excited about.


00:01:27.180 --> 00:01:29.620
And in college that turned into web design.


00:01:29.620 --> 00:01:36.860
I went to college from 1996 through 2000 so that the height of the dot com sort of craziness.


00:01:36.860 --> 00:01:39.180
And I just found my baby and all that stuff.


00:01:39.180 --> 00:01:40.180
Oh yeah, absolutely.


00:01:40.180 --> 00:01:41.180
That's dot com.


00:01:41.180 --> 00:01:42.180
That's right.


00:01:42.180 --> 00:01:49.580
And I just found myself sort of pulled into just all the cool things that we could do


00:01:49.580 --> 00:01:55.620
on the web and went from sort of front end web development, which meant something very


00:01:55.620 --> 00:01:57.620
different back then than it does today.


00:01:57.620 --> 00:01:59.620
I mean, HTML, right?


00:01:59.620 --> 00:02:00.620
HTML, yep.


00:02:00.620 --> 00:02:03.260
Basically, string interpolation as a career.


00:02:03.260 --> 00:02:06.180
That was what I was all about.


00:02:06.180 --> 00:02:10.460
And that sort of led me into really falling in love with programming as a discipline.


00:02:10.460 --> 00:02:16.380
And I got more into the backend, more into sort of closer and closer to the systems level


00:02:16.380 --> 00:02:17.380
programming.


00:02:17.380 --> 00:02:22.020
I just really enjoyed being sort of full stack,


00:02:22.020 --> 00:02:26.060
both on the website and even spent a few years


00:02:26.060 --> 00:02:27.860
doing Windows desktop programming,


00:02:27.860 --> 00:02:30.700
just to kind of see what that world was like.


00:02:30.700 --> 00:02:34.900
And one of the things that I,


00:02:34.900 --> 00:02:36.880
like one of the best things that happened to me early


00:02:36.880 --> 00:02:39.740
in my career was hooking up with JJ Allaire,


00:02:39.740 --> 00:02:41.660
who's the founder of RStudio


00:02:41.660 --> 00:02:43.060
and the founder of two other companies


00:02:43.060 --> 00:02:45.860
that I worked for previous to that in Boston.


00:02:45.860 --> 00:02:49.260
And I kind of got to the point in my career


00:02:49.260 --> 00:02:52.740
where I was more interested in the people I was working with


00:02:52.740 --> 00:02:56.860
than the technologies or even the idea.


00:02:56.860 --> 00:02:59.460
I knew I liked startups and I knew I liked working for JJ


00:02:59.460 --> 00:03:01.420
and the people that he had around him.


00:03:01.420 --> 00:03:03.220
And he got excited about R.


00:03:03.220 --> 00:03:07.780
I don't, I think his friend who was like a high school


00:03:07.780 --> 00:03:10.460
science teacher somehow got turned on to R


00:03:10.460 --> 00:03:15.140
and JJ was fascinated by the fact that,


00:03:15.140 --> 00:03:21.980
this is in 2008 or 2009, there was this GPL licensed platform


00:03:21.980 --> 00:03:25.820
for doing what traditionally people would do in very


00:03:25.820 --> 00:03:29.820
proprietary platforms like all these statistics packages that


00:03:29.820 --> 00:03:32.740
you might have been forced to learn in college, you know, back


00:03:32.740 --> 00:03:39.020
in the 2000s. And here was this pretty rough, pretty raw, but


00:03:39.020 --> 00:03:41.700
all the pieces were their kind of platform for doing all this


00:03:41.700 --> 00:03:47.860
stuff with code. And he immediately saw something and I definitely saw nothing. But I believed


00:03:47.860 --> 00:03:55.900
in JJ and he had the idea to build an IDE in a web browser for this R language. And


00:03:55.900 --> 00:04:00.340
I was like, I don't see the chain in thinking that leads you to think that this is a good


00:04:00.340 --> 00:04:07.640
idea but also sounds super fun. And I would love to see if it's possible to build an IDE


00:04:07.640 --> 00:04:15.040
the web. And so in the beginning, really, I was in R completely by accident. And I didn't


00:04:15.040 --> 00:04:20.200
even really learn much R as I was building, helping to build the RStudio IDE.


00:04:20.200 --> 00:04:22.520
That's kind of the irony of those types of platforms, right?


00:04:22.520 --> 00:04:23.520
100%.


00:04:23.520 --> 00:04:28.100
When I talk to people about Jupyter Notebooks, they're enabling Python people, but they're


00:04:28.100 --> 00:04:29.560
writing TypeScript.


00:04:29.560 --> 00:04:30.560
That's exactly right.


00:04:30.560 --> 00:04:31.560
You know that.


00:04:31.560 --> 00:04:32.560
That's right.


00:04:32.560 --> 00:04:33.800
What's the story for RStudio, Cy?


00:04:33.800 --> 00:04:38.800
Yeah, yeah. Oh, it's a crazy story technology wise.


00:04:38.800 --> 00:04:43.360
Well, the part that's not crazy, the sort of hardcore server bits are written in C++.


00:04:43.360 --> 00:04:48.200
But the front end is written in Java, which is then transpiled to JavaScript using a package called Google Web Toolkit.


00:04:48.200 --> 00:05:00.120
Oh yeah, okay, sure.


00:05:00.120 --> 00:05:01.600
Okay, so you've heard of GWT.


00:05:01.600 --> 00:05:03.520
I haven't written anything with it, but yeah, I know it, sure.


00:05:00.360 --> 00:05:05.360
Yeah, I mean in a world before TypeScript and before React,


00:05:05.360 --> 00:05:10.920
this really was a godsend, to be able to have static typing


00:05:10.920 --> 00:05:15.800
and the right sort of abstractions to be able to really build large scale.


00:05:15.800 --> 00:05:21.440
I mean, RStudio is a giant piece of software,


00:05:21.440 --> 00:05:24.040
hundreds and hundreds of thousands of lines of code.


00:05:24.040 --> 00:05:26.320
And I think the very best JavaScript developers can write code bases


00:05:26.400 --> 00:05:29.080
that large of pure JavaScript, but not me.


00:05:29.080 --> 00:05:34.800
I definitely needed the crutch of static type checking.


00:05:34.800 --> 00:05:40.560
And anyway, yeah, and working on RStudio IDE was a blast.


00:05:40.560 --> 00:05:42.440
And the best thing about it was I


00:05:42.440 --> 00:05:44.360
got to meet so many data scientists.


00:05:44.360 --> 00:05:46.400
And at the time, we called them statisticians.


00:05:46.400 --> 00:05:47.820
Now they're called data scientists.


00:05:47.820 --> 00:05:52.080
But learning what they do, what the problems they were solving


00:05:52.080 --> 00:05:56.440
was so interesting, and that eventually led to Shiny.


00:05:56.440 --> 00:05:59.840
And that's when I really started getting serious about actually


00:05:59.840 --> 00:06:03.760
writing R code in my day-to-day, which was a fascinating journey


00:06:03.760 --> 00:06:05.360
in and of itself.


00:06:05.360 --> 00:06:05.860
>>Luis: Yeah.


00:06:05.860 --> 00:06:11.720
Well, I would say that your faith was well-placed, right?


00:06:11.720 --> 00:06:14.220
Even if you're like, I'm not sure about this RStudio thing.


00:06:14.220 --> 00:06:17.000
I think some people have heard of it.


00:06:17.000 --> 00:06:18.720
>>Tom: Yeah.


00:06:18.720 --> 00:06:24.480
Yeah, it really has been such an incredible ride.


00:06:24.480 --> 00:06:28.880
And there were many steps along the way where I was like,


00:06:28.880 --> 00:06:30.880
this does not really make a ton of sense to me.


00:06:30.880 --> 00:06:36.800
But JJ has proven out time and time again that things


00:06:36.800 --> 00:06:38.160
that he cares about, it turns out


00:06:38.160 --> 00:06:40.840
that there are other people that care about it.


00:06:40.840 --> 00:06:45.400
So he was really super into reproducible research


00:06:45.400 --> 00:06:47.200
before it was on everybody's lips.


00:06:47.200 --> 00:06:49.360
And he really spent a lot of time


00:06:49.360 --> 00:06:51.560
trying to make that world better for R.


00:06:51.560 --> 00:06:55.120
And by then, I'd certainly learned


00:06:55.120 --> 00:06:57.560
to sort of trust in his instincts.


00:06:57.560 --> 00:06:59.720
And just time after time, there have


00:06:59.720 --> 00:07:02.440
been many bets like that that have paid off really well.


00:07:02.440 --> 00:07:05.720
It must have been pretty gratifying to work


00:07:05.720 --> 00:07:08.120
on this project and then talk to these data scientists


00:07:08.120 --> 00:07:12.080
and say, here, oh, we're doing this work at the Large Hadron


00:07:12.080 --> 00:07:16.640
Collider, or we're doing this work to solve cancer.


00:07:16.640 --> 00:07:18.840
And let me, you got to, can you help me with this?


00:07:18.840 --> 00:07:21.360
I'm trying to like work on this protein folding or, you know,


00:07:21.360 --> 00:07:22.280
something like that, right?


00:07:22.280 --> 00:07:24.800
It was probably some really cool experiences you had like that.


00:07:24.800 --> 00:07:25.720
- A hundred percent.


00:07:25.720 --> 00:07:30.720
Yeah. I think the first time I ever demoed Shiny in particular


00:07:30.720 --> 00:07:33.680
at a user group meeting, and I was super nervous


00:07:33.680 --> 00:07:38.160
and went a little overboard on having like lots of demos.


00:07:38.160 --> 00:07:41.320
And one of them, this is back in 2012,


00:07:41.320 --> 00:07:46.320
was charting the spread of AIDS throughout the world


00:07:46.320 --> 00:07:51.320
and showing the sort of levels rise and fall as time went on.


00:07:51.320 --> 00:07:56.320
And it was interesting at the time because AIDS was sort of receding


00:07:56.320 --> 00:08:01.320
as education and drugs were getting better, except in South Africa, it was getting much, much worse


00:08:01.320 --> 00:08:06.320
before finally starting to get better because of many reasons.


00:08:06.320 --> 00:08:11.320
And so I showed this demo and then afterwards a friend of mine who I didn't know what he worked on,


00:08:11.320 --> 00:08:12.580
I didn't know what we worked on.


00:08:12.580 --> 00:08:14.620
I just knew him through these user group meetings.


00:08:14.620 --> 00:08:16.660
Came up and said, oh yeah, I'm working at,


00:08:16.660 --> 00:08:18.260
I think he was at Fred Hutch at the time,


00:08:18.260 --> 00:08:21.100
working on an AIDS vaccine.


00:08:21.100 --> 00:08:25.060
And we're using Shiny to basically be the bridge


00:08:25.060 --> 00:08:27.200
between the biostatisticians and the biologists


00:08:27.200 --> 00:08:30.460
and looking at the results of these assays


00:08:30.460 --> 00:08:32.140
or whatever it was that they were analyzing.


00:08:32.140 --> 00:08:33.420
That was just blew me away.


00:08:33.420 --> 00:08:37.260
And absolutely, every conference I go to,


00:08:37.260 --> 00:08:39.180
many times a year between then and now,


00:08:39.180 --> 00:08:44.180
I've just been humbled by the kind of things


00:08:44.180 --> 00:08:46.300
that people are doing with Shiny.


00:08:46.300 --> 00:08:48.580
- Yeah, I can relate.


00:08:48.580 --> 00:08:51.140
I hear some stories like that as well,


00:08:51.140 --> 00:08:52.580
and I imagine it's just 10x when you're building


00:08:52.580 --> 00:08:55.860
developer tools like that.


00:08:55.860 --> 00:08:57.580
So how about now?


00:08:57.580 --> 00:08:58.380
What are you doing day to day?


00:08:58.380 --> 00:09:00.340
- Yeah, well my title is CTO.


00:09:00.340 --> 00:09:04.020
That is an honorary title that I think reflects


00:09:04.020 --> 00:09:07.620
that I was the first employee,


00:09:05.760 --> 00:09:08.880
but I don't do traditional CTO type activities


00:09:08.880 --> 00:09:10.100
most of the time.


00:09:10.100 --> 00:09:13.320
My day to day, I help lead the Shiny team specifically,


00:09:13.320 --> 00:09:17.440
which is a team of maybe 10 or 11 right now,


00:09:17.440 --> 00:09:18.520
mostly engineers.


00:09:18.520 --> 00:09:22.160
And we split our time between Shiny for R


00:09:22.160 --> 00:09:23.080
and Shiny for Python.


00:09:23.080 --> 00:09:25.560
Right now, probably more on the Shiny for Python side,


00:09:25.560 --> 00:09:27.460
given that there's so much more to do.


00:09:27.460 --> 00:09:30.920
And right now I am in the thick of it,


00:09:30.920 --> 00:09:34.500
writing features for the next release of Shiny for Python.


00:09:34.500 --> 00:09:39.420
really getting to lean into React.


00:09:39.420 --> 00:09:41.900
I've been working with some really fun


00:09:41.900 --> 00:09:45.980
like headless table libraries to build data grids


00:09:45.980 --> 00:09:48.780
with fast virtualized scrolling.


00:09:48.780 --> 00:09:51.020
That should be a really nice addition


00:09:51.020 --> 00:09:53.460
to Shiny for Python for the next release.


00:09:53.460 --> 00:09:55.860
- Okay, yeah, that sounds really cool.


00:09:55.860 --> 00:09:58.340
Well, let's talk about Shiny itself.


00:09:58.340 --> 00:10:01.040
I suspect a lot of people on the data science side


00:10:01.040 --> 00:10:04.380
have heard of Shiny, even though it's in the R space.


00:10:04.380 --> 00:10:07.140
I know the conversations come up around it.


00:10:07.140 --> 00:10:11.500
Other ones that live in a similar orbit,


00:10:11.500 --> 00:10:13.220
maybe, or Streamlit.


00:10:13.220 --> 00:10:16.020
I've had Adrian, the founder of Streamlit, on before,


00:10:16.020 --> 00:10:19.740
and we've got Dash, and Panel, and Pinecone, and others.


00:10:19.740 --> 00:10:24.420
That sets the stage for what this could be about.


00:10:24.420 --> 00:10:28.420
Maybe give folks a sense of just what is Shiny,


00:10:28.420 --> 00:10:32.020
and maybe even in its R form originally,


00:10:32.020 --> 00:10:40.820
and then we can talk about the Python side. Yeah, absolutely. So Shiny is a way to create


00:10:40.820 --> 00:10:47.620
web applications easily without having to learn a lot of web development technologies like HTML,


00:10:47.620 --> 00:10:54.980
CSS, and JavaScript. Especially JavaScript. Especially JavaScript, 100%. The interactive


00:10:54.980 --> 00:10:59.300
part of all these, like this callback, it's that, 100%.


00:10:59.300 --> 00:11:00.340
Yeah.


00:11:00.340 --> 00:11:05.780
And it was conceived primarily for data science.


00:11:05.780 --> 00:11:09.060
I think a lot of the ideas behind Shiny are quite general,


00:11:09.060 --> 00:11:11.560
and I'm sure we'll delve more into that.


00:11:11.560 --> 00:11:16.100
But we, in the creation design of this,


00:11:16.100 --> 00:11:19.620
we really are laser focused on data science and the kinds


00:11:19.620 --> 00:11:21.380
of problems that people want to solve


00:11:21.380 --> 00:11:24.820
by creating interactive visualizations,


00:11:24.820 --> 00:11:28.420
interactive reports, and even workflow applications,


00:11:28.420 --> 00:11:32.860
but all of it around the analyzing of data.


00:11:32.860 --> 00:11:38.900
This was, in 2012, this was a pretty radical notion.


00:11:38.900 --> 00:11:41.740
And I think there was a little bit of skepticism


00:11:41.740 --> 00:11:44.420
from some people close to us who were thinking,


00:11:44.420 --> 00:11:46.580
you're going to make data science?


00:11:46.580 --> 00:11:51.580
I would data science scientists want to become web developers.


00:11:51.580 --> 00:11:54.620
And I think this was--


00:11:54.620 --> 00:11:56.860
the answer was like, there are really a lot of problems


00:11:56.860 --> 00:12:00.460
that they can solve using interactive artifacts.


00:12:00.460 --> 00:12:02.140
But the whole point is that they do not


00:12:02.140 --> 00:12:04.180
have to become web developers.


00:12:04.180 --> 00:12:06.860
Yeah, I was going to say, you should turn that on its head


00:12:06.860 --> 00:12:10.140
and say, they don't want to become web developers, which


00:12:10.140 --> 00:12:12.380
is exactly the value proposition.


00:12:12.380 --> 00:12:14.000
They want to share their work, and they


00:12:14.000 --> 00:12:16.300
want to make it interactive and collaborative.


00:12:16.300 --> 00:12:18.700
but the last thing they want, generally speaking,


00:12:18.700 --> 00:12:23.700
is to like, oh, and I'm diving into Vue and React and,


00:12:23.700 --> 00:12:25.940
yeah, all that stuff, right?


00:12:25.940 --> 00:12:27.360
- Absolutely, yeah.


00:12:27.360 --> 00:12:33.360
And that being said, I think I personally am,


00:12:33.360 --> 00:12:37.980
I've been doing web development since basically 1996,


00:12:37.980 --> 00:12:41.340
and the idea of working day in and day out


00:12:41.340 --> 00:12:43.860
on a project that was really sort of like


00:12:43.860 --> 00:12:48.900
my first website type, something that had a lot of guardrails,


00:12:48.900 --> 00:12:53.220
something that really limited you to whatever few tools


00:12:53.220 --> 00:12:54.740
were in its toolbox.


00:12:54.740 --> 00:12:56.740
That wouldn't be really satisfying or interesting


00:12:56.740 --> 00:12:57.580
for me.


00:12:57.580 --> 00:13:00.580
So even though Shiny is designed to be very easy to get started


00:13:00.580 --> 00:13:02.820
and for you not to have to know JavaScript or anything


00:13:02.820 --> 00:13:04.380
like that, if you do know JavaScript,


00:13:04.380 --> 00:13:07.260
if you do know HTML and CSS, if you live and breathe


00:13:07.260 --> 00:13:10.780
that stuff, but you want to create a convenient way


00:13:10.780 --> 00:13:14.260
to create data science-related applications.


00:13:14.260 --> 00:13:16.860
Shiny really lets you lean into those skills as well


00:13:16.860 --> 00:13:20.180
and use HTML, CSS, and JavaScript to enhance or customize


00:13:20.180 --> 00:13:22.820
or extend Shiny for your own purposes.


00:13:22.820 --> 00:13:24.780
It's really important to us to capture


00:13:24.780 --> 00:13:26.740
sort of both ends of that spectrum.


00:13:26.740 --> 00:13:29.000
- Yeah, okay.


00:13:29.000 --> 00:13:31.300
We'll talk about the programming model and how it works,


00:13:31.300 --> 00:13:35.960
but I think maybe the first big contrast


00:13:35.960 --> 00:13:37.540
that I'd like you to set up for us


00:13:37.540 --> 00:13:41.080
is thinking of the Python side now,


00:13:41.080 --> 00:13:42.880
like why not just Jupyter Notebooks?


00:13:42.880 --> 00:13:46.880
Why not Jupyter Notebooks or JupyterLab and just,


00:13:46.880 --> 00:13:51.640
we have that, that's on the web sort of, kind of sometimes.


00:13:51.640 --> 00:13:52.480
(laughing)


00:13:52.480 --> 00:13:54.040
It depends how we wanna put it up there


00:13:54.040 --> 00:13:57.500
or share it or let it be executable, but, you know.


00:13:57.500 --> 00:13:59.880
- Sure. - Compared to that.


00:13:59.880 --> 00:14:01.080
I think it's pretty different, but you know,


00:14:01.080 --> 00:14:02.080
I think it's something that people


00:14:02.080 --> 00:14:03.680
maybe wanna get their head around.


00:14:03.680 --> 00:14:05.160
- Yeah, no, totally.


00:14:05.160 --> 00:14:07.360
You're right, I mean, you hear a lot of the same words


00:14:07.360 --> 00:14:08.160
being used, right?


00:14:08.160 --> 00:14:10.160
Like, it's browser-based applications


00:14:10.160 --> 00:14:11.820
that do interactive things.


00:14:11.820 --> 00:14:15.160
And I think the difference is that Jupyter and JupyterLab,


00:14:15.160 --> 00:14:18.620
those are sort of the places where data scientists can


00:14:18.620 --> 00:14:19.640
do work, right?


00:14:19.640 --> 00:14:22.200
Where you can ask unbounded kinds of questions


00:14:22.200 --> 00:14:23.560
from your data.


00:14:23.560 --> 00:14:26.800
That's where you iterate, where you do exploratory data


00:14:26.800 --> 00:14:31.200
analysis, where you write functions and things like that.


00:14:31.200 --> 00:14:33.920
And yeah, you do have this beautiful immediacy


00:14:33.920 --> 00:14:35.840
to the results that you get, right?


00:14:35.840 --> 00:14:39.120
That's why everybody really loves working in notebooks.


00:14:39.120 --> 00:14:42.120
And Shiny and frameworks like it are really


00:14:42.120 --> 00:14:45.280
for communicating outwards.


00:14:45.280 --> 00:14:47.680
It's really not for the data scientists


00:14:47.680 --> 00:14:50.960
to write code for their own understanding most of the time.


00:14:50.960 --> 00:14:54.280
It's really about creating a web application


00:14:54.280 --> 00:14:56.640
to show somebody else.


00:14:56.640 --> 00:15:01.240
So let's say that you are collaborating


00:15:01.240 --> 00:15:05.080
with some people that don't have the programming chops that you


00:15:05.080 --> 00:15:08.220
do that have never launched a REPL in their life


00:15:08.220 --> 00:15:09.620
or installed Python.


00:15:09.620 --> 00:15:11.900
And you want to give them the ability


00:15:11.900 --> 00:15:15.340
to ask questions of your data and of your analysis.


00:15:15.340 --> 00:15:18.500
Maybe what-if scenarios, or in the simplest case,


00:15:18.500 --> 00:15:22.140
think like a BI dashboard or something like that.


00:15:22.140 --> 00:15:26.980
Nobody's asking why execs need to look at a BI dashboard


00:15:26.980 --> 00:15:31.060
instead of running SQL queries on their own inside


00:15:31.060 --> 00:15:32.020
of a console.


00:15:32.020 --> 00:15:32.980
And this is similar.


00:15:32.980 --> 00:15:39.460
So if you want to create an interactive artifact for other people to consume, then Shiny and


00:15:39.460 --> 00:15:43.380
frameworks like it come into play, and Jupyter not as much.


00:15:43.380 --> 00:15:49.860
I mean, you can certainly save Jupyter notebooks and then sort of share a link to the published


00:15:49.860 --> 00:15:50.860
notebook.


00:15:50.860 --> 00:15:57.940
But the interactivity is either non-existent or more limited when you do things that way.


00:15:57.940 --> 00:15:58.940
Right.


00:15:58.940 --> 00:15:59.940
Absolutely.


00:15:59.940 --> 00:16:02.580
the full notebook because the last thing you want


00:16:02.580 --> 00:16:04.820
is the general public typing


00:16:04.820 --> 00:16:07.820
- That's right. - Panther code in there


00:16:07.820 --> 00:16:10.140
or arbitrary Python code,


00:16:10.140 --> 00:16:12.540
but you wanna give them some interactivity.


00:16:12.540 --> 00:16:14.500
You know, maybe we could look at this little example


00:16:14.500 --> 00:16:17.900
down here just to, you know, just talk through


00:16:17.900 --> 00:16:20.780
like what an app might look like.


00:16:20.780 --> 00:16:23.780
Right on the homepage, shiny.poset.co,


00:16:23.780 --> 00:16:27.380
you have, you know, I think this is kind of a big


00:16:28.380 --> 00:16:34.860
statement towards your commitment to Python. It's like right on the home page on equal on par with


00:16:34.860 --> 00:16:38.940
R. It says get started with R, get started with Python. You scroll down, it has the R in the Python code, right?


00:16:38.940 --> 00:16:43.580
Like they're, you know, oh yeah, we also we're making an attempt at this Python thing. But you've got this


00:16:43.580 --> 00:16:49.340
example, do you want to just give us a quick talk to what this app is? It looks like it evaluates


00:16:49.340 --> 00:16:55.660
things about ducks and that's all I can tell about it. Yeah, so this is using the Palmer's


00:16:55.660 --> 00:16:57.620
penguins data sets.


00:16:57.620 --> 00:16:58.540
>> Penguins rather, OK.


00:16:58.540 --> 00:17:00.060
>> Yeah, yeah.


00:17:00.060 --> 00:17:02.700
So on the left, we have a sidebar


00:17:02.700 --> 00:17:04.100
with a number of controls.


00:17:04.100 --> 00:17:06.500
There's two select boxes.


00:17:06.500 --> 00:17:07.700
There's some check boxes.


00:17:07.700 --> 00:17:09.780
And then there's a couple of toggle switches.


00:17:09.780 --> 00:17:14.180
And on the right, you have a matplotlib-generated scatter


00:17:14.180 --> 00:17:16.860
plot with some marginal plots added on.


00:17:16.860 --> 00:17:22.820
And this is sort of the "Hello, World" of Shiny,


00:17:22.820 --> 00:17:28.140
where you have one or more outputs and some inputs


00:17:28.140 --> 00:17:32.740
that, when you change them, the output automatically updates.


00:17:32.740 --> 00:17:35.860
In this case, you can decide what variables


00:17:35.860 --> 00:17:39.380
do you want to apply to the x and y-axes.


00:17:39.380 --> 00:17:42.900
And then you can filter it by the species of penguin.


00:17:42.900 --> 00:17:45.420
And then there are a couple of toggles


00:17:45.420 --> 00:17:49.220
to just decide whether you want coloring by species


00:17:49.220 --> 00:17:51.860
and whether you want the marginal plots or not.


00:17:51.860 --> 00:17:55.260
And it sort of does everything that you


00:17:55.260 --> 00:17:58.700
would expect it to do when you select and deselect


00:17:58.700 --> 00:18:00.620
those values.


00:18:00.620 --> 00:18:03.560
>>Yeah, so for example, you have filter by species,


00:18:03.560 --> 00:18:04.980
and Gen 2 is checked.


00:18:04.980 --> 00:18:08.540
But if I uncheck it, the whole UI


00:18:08.540 --> 00:18:13.220
redraws with just showing the other two species of penguin.


00:18:13.220 --> 00:18:17.020
And you can turn the species on and off,


00:18:17.020 --> 00:18:21.300
and turn some whether or not it highlights based on that.


00:18:21.300 --> 00:18:24.740
You've got a dropdown for different things you might compare,


00:18:24.740 --> 00:18:28.740
and you can just toggle those, and the UI changes kind of like


00:18:28.740 --> 00:18:31.380
you wrote a fancy front-end JavaScript framework,


00:18:31.380 --> 00:18:33.380
where that's happening behind the scenes, right?


00:18:33.380 --> 00:18:35.380
That's right. That's right.


00:18:35.380 --> 00:18:37.380
Sorry, I didn't mean to cut you off there.


00:18:37.380 --> 00:18:39.860
Yeah, and just to be clear, when you say the UI redraws,


00:18:39.860 --> 00:18:41.860
we're not talking about a whole page reload.


00:18:41.860 --> 00:18:43.860
I mean, it's not 1998.


00:18:43.860 --> 00:18:48.820
It is the things that need to update on the page.


00:18:48.820 --> 00:18:53.820
- Yeah, I think it's a really interesting way


00:18:53.820 --> 00:18:59.700
to create programs and there's a couple other things


00:18:59.700 --> 00:19:00.900
I've seen that are like this,


00:19:00.900 --> 00:19:05.020
but I really, I think it's a super slick framework.


00:19:05.020 --> 00:19:08.300
Before we get into it, Diego's got a question.


00:19:08.300 --> 00:19:10.340
It says, "Could China be used to do fancy math,


00:19:10.340 --> 00:19:13.380
"say for someone trying to upload their GitHub website


00:19:13.380 --> 00:19:15.500
"for their PhD thesis model?"


00:19:15.500 --> 00:19:17.380
Like, what can we create?


00:19:17.380 --> 00:19:23.220
Like, could you create a kind of a LaTeX looking integrated thing with interactive math bits


00:19:23.220 --> 00:19:24.220
in there?


00:19:24.220 --> 00:19:25.220
Right, right.


00:19:25.220 --> 00:19:26.220
Yeah, yeah.


00:19:26.220 --> 00:19:29.420
So yes, you do have the ability to do...


00:19:29.420 --> 00:19:33.980
Well, I could interpret that question one of two ways.


00:19:33.980 --> 00:19:39.540
Can you do the computation for this PhD thesis model?


00:19:39.540 --> 00:19:40.620
In that case, absolutely.


00:19:40.620 --> 00:19:44.900
It's just whatever you can express in Python or R for that matter.


00:19:44.900 --> 00:19:49.420
In terms of putting LaTeX equations on the screen,


00:19:49.420 --> 00:19:55.060
yes, this is a completely built-in feature for Shiny for R.


00:19:55.060 --> 00:19:57.940
And for Shiny for Python, it's a little less slick,


00:19:57.940 --> 00:19:59.940
but we do have an example application


00:19:59.940 --> 00:20:01.900
that shows how to drop in.


00:20:01.900 --> 00:20:03.900
It's based on MathJax, basically.


00:20:03.900 --> 00:20:06.300
So you can include the resources for MathJax


00:20:06.300 --> 00:20:12.300
and then write your equation in LaTeX format.


00:20:12.300 --> 00:20:14.700
And yeah, it'll render.


00:20:14.700 --> 00:20:18.220
Diego, I hope that answers your question.


00:20:18.220 --> 00:20:19.100
>>Hope so as well.


00:20:19.100 --> 00:20:20.580
Yep.


00:20:20.580 --> 00:20:21.540
Seems like it.


00:20:21.540 --> 00:20:31.220
All right, so let's jump over to the GitHub page


00:20:31.220 --> 00:20:33.460
for a minute here and talk through some of the things


00:20:33.460 --> 00:20:36.620
that you all call out right at the top.


00:20:36.620 --> 00:20:40.100
So it's open source for one, right?


00:20:40.100 --> 00:20:41.820
That's a big deal.


00:20:41.820 --> 00:20:43.940
It's under the MIT license right here on GitHub


00:20:43.940 --> 00:20:46.080
under pi-shiny.


00:20:46.080 --> 00:20:47.560
- Yeah.


00:20:47.560 --> 00:20:50.140
I should add, full disclosure,


00:20:50.140 --> 00:20:52.760
we are a for-profit company.


00:20:52.760 --> 00:20:55.580
We are a B Corp, actually we're a benefit corp,


00:20:55.580 --> 00:20:57.480
but we are for-profit.


00:20:57.480 --> 00:21:00.560
And Shiny for Python is completely open source,


00:21:00.560 --> 00:21:05.560
MIT license, no sort of gotchas there.


00:21:05.560 --> 00:21:09.200
But when it comes to deploy your Shiny app,


00:21:09.200 --> 00:21:11.640
we have a variety of different ways you can do that


00:21:11.640 --> 00:21:13.480
that we offer as a company.


00:21:13.480 --> 00:21:18.560
We have an open source on-prem solution called Shiny Server.


00:21:18.560 --> 00:21:24.480
We have hosted cloud hosting that we manage


00:21:24.480 --> 00:21:26.360
that you can easily deploy to.


00:21:26.360 --> 00:21:28.440
And we have free and paid tiers.


00:21:28.440 --> 00:21:31.500
And we also have Posit Connect, which


00:21:31.500 --> 00:21:36.080
is a more comprehensive platform for enterprises


00:21:36.080 --> 00:21:37.880
to allow their data scientists to communicate


00:21:37.880 --> 00:21:39.520
with the rest of the organization.


00:21:39.520 --> 00:21:46.240
And that has very robust enterprise-grade Shiny for Python hosting built in, and that is a paid product.


00:21:46.240 --> 00:21:52.560
- Okay. So does it have special ways to access your SQL server on your enterprise?


00:21:52.560 --> 00:22:01.120
You know, like, authenticated access to data or auth to the thing itself to protect it and so on?


00:22:01.120 --> 00:22:07.600
- Yeah, for sure, auth to the thing itself, and it integrates with your LDAP or SSO-type systems.


00:22:07.600 --> 00:22:12.600
And it helps with scaling your application.


00:22:12.600 --> 00:22:15.800
So it will sort of monitor how much load


00:22:15.800 --> 00:22:18.360
each of your Python processes is getting


00:22:18.360 --> 00:22:21.480
and then spawn automatically scale up.


00:22:21.480 --> 00:22:24.600
It can hook up to Kubernetes in the backend


00:22:24.600 --> 00:22:26.500
so that your Shiny apps,


00:22:26.500 --> 00:22:30.200
the Python computation is happening in pods on the backend.


00:22:30.200 --> 00:22:31.920
So lots and lots of different ways


00:22:31.920 --> 00:22:34.820
that it sort of tries to make things easier.


00:22:34.820 --> 00:22:35.880
- Sure. Okay, cool.


00:22:35.880 --> 00:22:36.720
Very cool.


00:22:36.720 --> 00:22:41.720
So basically, short story is,


00:22:41.720 --> 00:22:44.720
Shiny for Python's open source.


00:22:44.720 --> 00:22:46.520
I could take the on-prem open source thing


00:22:46.520 --> 00:22:49.080
and just host it myself if I wanted.


00:22:49.080 --> 00:22:50.920
I presume that means I could also fire up a virtual machine


00:22:50.920 --> 00:22:54.880
in the cloud and install it up there


00:22:54.880 --> 00:22:57.480
and that's my on-prem if I wish.


00:22:57.480 --> 00:23:00.120
- Yeah, absolutely.


00:23:00.120 --> 00:23:01.040
And this is also, Shiny for Python is built


00:23:01.040 --> 00:23:03.360
on top of Starlet, which is the same underlying framework


00:23:03.120 --> 00:23:04.400
that FastAPI uses.


00:23:04.400 --> 00:23:08.240
So it's almost true that anywhere you can host FastAPI,


00:23:08.240 --> 00:23:10.080
you can host Shiny for Python.


00:23:10.080 --> 00:23:11.160
- Oh, interesting.


00:23:11.160 --> 00:23:15.040
Just put some G unicorn, uv corn workers in front of it.


00:23:15.040 --> 00:23:16.640
- Except G unicorn.


00:23:16.640 --> 00:23:18.760
Yeah, the only exception is that


00:23:18.760 --> 00:23:20.440
because Shiny for Python is stateful


00:23:20.440 --> 00:23:22.040
and we can talk more about that.


00:23:22.040 --> 00:23:24.520
I'm assuming we're gonna talk a little bit


00:23:24.520 --> 00:23:27.920
about how we compare to some of the other things out there.


00:23:27.920 --> 00:23:31.600
We do need, if you're gonna load balance


00:23:31.600 --> 00:23:33.320
across multiple processes, it does


00:23:33.320 --> 00:23:36.040
have to be a stateful load balancer, which


00:23:36.040 --> 00:23:37.760
is normally quite easy to do.


00:23:37.760 --> 00:23:39.560
But gunicorn is not stateless.


00:23:39.560 --> 00:23:41.080
It's not sticky.


00:23:41.080 --> 00:23:41.920
It's stateless, yeah.


00:23:41.920 --> 00:23:42.420
Sorry.


00:23:42.420 --> 00:23:42.920
Yeah.


00:23:42.920 --> 00:23:45.600
So you need a sticky load balancer.


00:23:45.600 --> 00:23:48.080
And oh, I should also mention that Hugging Face


00:23:48.080 --> 00:23:50.760
is another place that you can deploy Shiny for Python apps


00:23:50.760 --> 00:23:52.680
these days.


00:23:52.680 --> 00:23:54.440
Yeah, excellent.


00:23:54.440 --> 00:23:59.160
OK, well, I think that that's certainly a fair trade-off.


00:23:59.160 --> 00:24:02.520
So the commercial side of your story,


00:24:02.520 --> 00:24:05.840
which we started talking about by opening a new company


00:24:05.840 --> 00:24:07.600
and going to work on that, is really


00:24:07.600 --> 00:24:13.040
about shiny as a service and a shiny cloud.


00:24:13.040 --> 00:24:15.960
So it's easy to not worry about the deployment side.


00:24:15.960 --> 00:24:17.800
The app itself, the framework itself,


00:24:17.800 --> 00:24:19.880
is about not worrying about writing web stuff.


00:24:19.880 --> 00:24:23.560
The deployment thing is still a deal.


00:24:23.560 --> 00:24:25.160
If you just say-- and then just get--


00:24:25.160 --> 00:24:27.840
dear data scientists, you fire up your Linux machines


00:24:27.840 --> 00:24:29.640
and you keep them up to date and secure.


00:24:29.640 --> 00:24:32.760
And that doesn't feel great to a lot of data scientists


00:24:32.760 --> 00:24:33.960
either, I'm sure.


00:24:33.960 --> 00:24:35.840
- Yeah, yeah, that's right.


00:24:35.840 --> 00:24:40.840
So I think with our open source on-prem hosting,


00:24:40.840 --> 00:24:43.200
it's like that, it's just a piece of software


00:24:43.200 --> 00:24:44.640
that you install on Linux.


00:24:44.640 --> 00:24:48.160
And with Connect, it's more like your IT department


00:24:48.160 --> 00:24:49.200
sets this up for you.


00:24:49.200 --> 00:24:54.200
And then you straight from your local machine,


00:24:54.200 --> 00:24:56.800
once you have your Shiny app working,


00:24:56.800 --> 00:25:02.680
you just type in a command like rsconnect deploy and point it at your server and everything gets taken care of for you,


00:25:02.680 --> 00:25:08.240
including, you know, getting all the right Python dependencies installed on the server and using the right version of Python.


00:25:08.240 --> 00:25:18.120
And hopefully, the act of, you know, we have we have customers that are writing multiple new shiny apps a day and


00:25:18.120 --> 00:25:25.320
deploying multiple new shiny apps a day. And you know, they're the usefulness of that app might be a day or it might be,


00:25:25.760 --> 00:25:30.760
five years and we want to serve both sides of that spectrum.


00:25:30.760 --> 00:25:32.840
- I suspect that does make a lot of sense


00:25:32.840 --> 00:25:34.920
if you're a data scientist exploring something,


00:25:34.920 --> 00:25:37.920
you can be like, hey, look, I came up with this today,


00:25:37.920 --> 00:25:38.760
what did you think?


00:25:38.760 --> 00:25:40.760
And it may be the next day based on feedback,


00:25:40.760 --> 00:25:41.960
you do something completely different


00:25:41.960 --> 00:25:44.120
and it's become irrelevant, right?


00:25:44.120 --> 00:25:46.960
- Yeah, you know what, one interesting thing about this is,


00:25:46.960 --> 00:25:49.880
you hear about something like Shiny for Python,


00:25:49.880 --> 00:25:54.120
like Streamlit or Dash, and you think that this is,


00:25:54.120 --> 00:26:01.120
you know, this is really about displacing say Power BI and Tableau, right?


00:26:01.120 --> 00:26:06.120
But actually, in our experience with Shiny for R,


00:26:06.120 --> 00:26:10.120
the first thing it displaced were gigantic PDFs that people were sending around.


00:26:10.120 --> 00:26:13.120
You know, like I have generated all of this data for my analysis.


00:26:13.120 --> 00:26:15.120
I don't know what you want.


00:26:15.120 --> 00:26:20.120
So here is like a 500-page PDF filled with tables for you to go explore.


00:26:20.120 --> 00:26:23.280
And with Shiny, you can present something


00:26:23.280 --> 00:26:24.600
that's much more interactive.


00:26:24.600 --> 00:26:28.280
That makes it much easier for some domain expert


00:26:28.280 --> 00:26:30.520
on the other side to find a needle in the haystack


00:26:30.520 --> 00:26:31.360
that you happen to be working with.


00:26:31.360 --> 00:26:33.880
- Well, you completely removed that cycle,


00:26:33.880 --> 00:26:35.600
that iteration cycle of,


00:26:35.600 --> 00:26:37.600
well, what if we used a different number


00:26:37.600 --> 00:26:39.840
for this constraint here?


00:26:39.840 --> 00:26:41.720
What if we only filtered, it's like,


00:26:41.720 --> 00:26:42.760
that's part of the UI,


00:26:42.760 --> 00:26:44.680
that's part of what you deliver is that interactivity.


00:26:44.680 --> 00:26:46.840
And as far as displacing things,


00:26:46.840 --> 00:26:48.680
it sounds like you're displacing SharePoint.


00:26:48.680 --> 00:26:51.960
if that could just be completely erased from the world,


00:26:51.960 --> 00:26:53.000
that would be awesome.


00:26:53.000 --> 00:26:56.000
Because every interaction I have with that software


00:26:56.000 --> 00:26:58.960
of sharing like corporate stock sharing is just like,


00:26:58.960 --> 00:27:00.520
oh boy, here we go.


00:27:00.520 --> 00:27:05.520
Okay, let's take it top to bottom maybe for here in this.


00:27:05.520 --> 00:27:07.120
Although I do have to point out,


00:27:07.120 --> 00:27:09.040
I could tell you still have that love for R


00:27:09.040 --> 00:27:12.600
because it's still 0.2% R.


00:27:12.600 --> 00:27:13.680
(laughing)


00:27:13.680 --> 00:27:18.240
I love it, it's 47% Python, 47% JavaScript,


00:27:18.240 --> 00:27:19.820
0.2% R.


00:27:19.820 --> 00:27:23.840
I just want to make it clear, you do not have to install R to run Shiny for Python.


00:27:23.840 --> 00:27:29.520
I think that R is, there's a couple of scripts that we use that we grab resources from the


00:27:29.520 --> 00:27:32.240
Shiny for R repo.


00:27:32.240 --> 00:27:37.160
And I think that was one of the first things that one of our programmers did and they didn't


00:27:37.160 --> 00:27:38.160
know Python yet.


00:27:38.160 --> 00:27:39.800
So they wrote it in R.


00:27:39.800 --> 00:27:40.800
That's fine.


00:27:40.800 --> 00:27:41.800
It's fine.


00:27:41.800 --> 00:27:46.440
I just thought it was funny that it's there, but just a shade of it.


00:27:46.440 --> 00:27:47.440
Okay.


00:27:47.440 --> 00:27:53.040
thing that you point out here is how is Shiny different from some of the things I said that


00:27:53.040 --> 00:27:55.840
it was like, for example, Streamlit or Dash?


00:27:55.840 --> 00:27:56.840
Yeah, absolutely.


00:27:56.840 --> 00:27:59.520
Maybe touch on that a little.


00:27:59.520 --> 00:28:00.520
Sure.


00:28:00.520 --> 00:28:04.120
And I think really the one that comes up the most is Streamlit.


00:28:04.120 --> 00:28:08.840
Man, Streamlit really has taken the world by storm, it seems like, since they came out


00:28:08.840 --> 00:28:11.720
in, what was it, 2018, something like that?


00:28:11.720 --> 00:28:12.920
Yeah, I think it's 2018.


00:28:12.920 --> 00:28:14.920
It's only been a few years.


00:28:14.920 --> 00:28:19.920
clearly really resonated with the Python world.


00:28:19.920 --> 00:28:24.240
And I do have to say, I was very taken aback by the simplicity of their programming model when it first came out.


00:28:24.240 --> 00:28:31.000
And I pay a little bit of attention to new things that come out and purport to be high-level web frameworks.


00:28:31.000 --> 00:28:40.920
And most of the time they were sort of like, "Okay, I recognize the trade-offs that they're making here."


00:28:42.400 --> 00:28:45.640
But the Streamlit one was definitely a very bold choice


00:28:45.640 --> 00:28:47.240
that they made.


00:28:47.240 --> 00:28:51.680
Streamlit, I think it feels to me


00:28:51.680 --> 00:28:55.400
that they really prioritized ease of getting started


00:28:55.400 --> 00:29:03.960
and having the simplest possible mental model in a much higher


00:29:03.960 --> 00:29:06.760
level of priority than everything else, which


00:29:06.760 --> 00:29:07.760
is a bold stance.


00:29:07.760 --> 00:29:09.880
And I really applaud them for being sort of clear


00:29:09.880 --> 00:29:11.760
about what their vision is.


00:29:11.760 --> 00:29:15.160
So Streamlit is unbelievably easy to get started with.


00:29:15.160 --> 00:29:16.360
I think primarily because,


00:29:16.360 --> 00:29:17.840
I don't know if you've done a lot of Streamlit,


00:29:17.840 --> 00:29:19.880
but it has this top to bottom execution model.


00:29:19.880 --> 00:29:21.160
- A lot of time, but yeah.


00:29:21.160 --> 00:29:24.040
- Yeah, like if you were to start out with


00:29:24.040 --> 00:29:27.400
not a Jupyter notebook, but like a regular Python script


00:29:27.400 --> 00:29:29.720
that was doing a bunch of data analysis stuff,


00:29:29.720 --> 00:29:33.960
you know, reading data, maybe doing some transformations


00:29:33.960 --> 00:29:37.520
and then outputting some, you know, tables and plots.


00:29:37.520 --> 00:29:40.040
Streamlit lets you take that sort of straight up


00:29:40.040 --> 00:29:44.240
and down script and sprinkle in some Streamlit inputs


00:29:44.240 --> 00:29:46.560
and outputs, and boom.


00:29:46.560 --> 00:29:49.040
Like you have now written an interactive Streamlit app.


00:29:49.040 --> 00:29:52.640
You just say, Streamlit run, and then the name of the file,


00:29:52.640 --> 00:29:54.120
and it just works.


00:29:54.120 --> 00:29:58.000
And in that sense, it's quite incredible.


00:29:58.000 --> 00:30:00.860
It's very easy to get started with.


00:30:00.860 --> 00:30:05.040
And the cost to spin up a new Streamlit app


00:30:05.040 --> 00:30:07.640
is so low that--


00:30:07.640 --> 00:30:10.800
I was actually talking to a YouTuber, Fenilo--


00:30:10.800 --> 00:30:12.720
I don't remember his last name.


00:30:12.720 --> 00:30:14.720
I think there's one Fenilo in the Streamlit world.


00:30:14.720 --> 00:30:17.400
And he was saying that he actually


00:30:17.400 --> 00:30:18.920
uses this instead of Jupyter Notebooks


00:30:18.920 --> 00:30:23.160
to do interactive exploratory data analysis, which


00:30:23.160 --> 00:30:25.160
I thought was interesting.


00:30:25.160 --> 00:30:29.200
But the sort of drawback of having this simple of a model


00:30:29.200 --> 00:30:33.720
is that it really works well for the simplest apps.


00:30:33.720 --> 00:30:40.520
And then the model is a little bit too simple for even


00:30:40.520 --> 00:30:42.400
moderately complex--


00:30:42.400 --> 00:30:46.640
it's not even complex, but just like you, sooner or later,


00:30:46.640 --> 00:30:53.000
will often, in a surprising way, smack into some surprising wall.


00:30:53.000 --> 00:30:56.440
And this is not something that is theoretical.


00:30:56.440 --> 00:30:59.580
We definitely have talked to a lot of Streamlit users.


00:30:59.580 --> 00:31:02.120
And even the happy ones will say,


00:31:02.120 --> 00:31:03.840
we really, this is just for prototypes


00:31:03.840 --> 00:31:06.600
and then we throw them out because you just cannot,


00:31:06.600 --> 00:31:10.240
you can't think of Streamlit apps as something


00:31:10.240 --> 00:31:12.820
that can grow with you as your needs grow.


00:31:12.820 --> 00:31:18.960
So I think the sort of time from zero to value


00:31:18.960 --> 00:31:21.540
for Streamlit is almost zero.


00:31:21.540 --> 00:31:23.880
That's incredibly quick.


00:31:23.880 --> 00:31:28.360
But the time from value to the time of,


00:31:28.360 --> 00:31:30.560
okay, now we're gonna throw this thing out and--


00:31:30.560 --> 00:31:32.960
the last 20%.


00:31:32.960 --> 00:31:35.320
Yeah, and it's actually not the last 20%.


00:31:35.320 --> 00:31:38.200
I think it's more like the last 60%.


00:31:38.200 --> 00:31:40.680
And I mean, that might be uncharitable and unbiased.


00:31:40.680 --> 00:31:43.720
But honestly, using this framework,


00:31:43.720 --> 00:31:46.000
which it's not to take away from their achievements.


00:31:46.000 --> 00:31:49.960
It clearly has resonated incredibly strongly


00:31:49.960 --> 00:31:51.720
with a lot of people in the Python world.


00:31:51.720 --> 00:31:55.440
But I think no one who uses Streamlit seriously


00:31:55.440 --> 00:31:58.400
will tell you that you can do most of the things


00:31:58.400 --> 00:32:01.400
that you want in this sort of top to bottom execution model.


00:32:01.400 --> 00:32:07.120
You will often, in surprisingly quick ways,


00:32:07.120 --> 00:32:09.200
run into limitations there.


00:32:09.200 --> 00:32:12.400
And I do want to say, like Streamlit, they recognized this.


00:32:12.400 --> 00:32:16.680
And after some time, they added some features


00:32:16.680 --> 00:32:22.020
that try to give you ways to work around that top


00:32:22.020 --> 00:32:23.960
to bottom execution model.


00:32:23.960 --> 00:32:25.760
They introduced the notion of session state,


00:32:25.760 --> 00:32:28.400
And they introduced multiple attempts


00:32:28.400 --> 00:32:31.880
at nice caching abstractions.


00:32:31.880 --> 00:32:38.640
And I think they make somewhat more complex apps possible.


00:32:38.640 --> 00:32:42.800
But I really-- I mean, I'm happy to recommend Streamlit


00:32:42.800 --> 00:32:44.720
for those easy cases.


00:32:44.720 --> 00:32:49.120
I cannot recommend Streamlit once you start


00:32:49.120 --> 00:32:50.560
getting into session state.


00:32:50.560 --> 00:32:53.760
It really is quite a fragile paradigm to be coding in.


00:32:53.760 --> 00:32:58.720
And by the way, just to make it clear here,


00:32:58.720 --> 00:33:04.720
I don't have a huge financial motivation to lie about this.


00:33:04.720 --> 00:33:09.080
Posit Connect, which is the way we make money in this area,


00:33:09.080 --> 00:33:11.720
it is designed to host Streamlit as well.


00:33:11.720 --> 00:33:14.040
And we have a lot of customers that do that.


00:33:14.040 --> 00:33:16.600
So it doesn't matter to us whether you use Shiny or


00:33:16.600 --> 00:33:17.680
Streamlit.


00:33:17.680 --> 00:33:19.800
I mean, it matters to me personally.


00:33:19.800 --> 00:33:22.360
It makes me feel good when people use Shiny.


00:33:22.360 --> 00:33:28.240
But as a business, we 100% love when our customers use Streamlit.


00:33:28.240 --> 00:33:32.160
And but it really is, I think--


00:33:32.160 --> 00:33:34.680
we'll talk more about reactive programming later, I hope.


00:33:34.680 --> 00:33:39.680
But what it doesn't give you is a nice model


00:33:39.680 --> 00:33:40.960
for the complicated stuff.


00:33:40.960 --> 00:33:43.440
It only gives you a nice model for the very, very simplest


00:33:43.440 --> 00:33:45.240
stuff.


00:33:45.240 --> 00:33:48.040
Which serves an important role, but also means


00:33:48.040 --> 00:33:50.760
that Shiny might serve an important role, too.


00:33:50.760 --> 00:33:52.220
Another question from the audience,


00:33:52.220 --> 00:33:54.400
I think maybe worth a diversion is,


00:33:54.400 --> 00:33:56.640
you got real world examples of Shiny for Python


00:33:56.640 --> 00:33:58.200
that you could talk about?


00:33:58.200 --> 00:33:59.800
And I'll let me take a step back


00:33:59.800 --> 00:34:03.760
since it's so brand new, just Shiny, right?


00:34:03.760 --> 00:34:06.960
Because I feel like the feature set is pretty similar.


00:34:06.960 --> 00:34:09.120
It's just like the R people have been at it


00:34:09.120 --> 00:34:10.280
for a lot longer, you know?


00:34:10.280 --> 00:34:11.800
- Yeah, absolutely.


00:34:11.800 --> 00:34:12.800
And just to make clear,


00:34:12.800 --> 00:34:16.020
so Shiny for R has been around since 2012.


00:34:16.020 --> 00:34:19.320
Shiny for Python has been an alpha since last year,


00:34:19.320 --> 00:34:22.920
And we just took the alpha tag off in the last, I don't know,


00:34:22.920 --> 00:34:25.880
six weeks or maybe less than that.


00:34:25.880 --> 00:34:27.560
Yeah, so I think--


00:34:27.560 --> 00:34:31.120
and I'm sorry I didn't come prepared with any more links


00:34:31.120 --> 00:34:33.680
than what's on the website.


00:34:33.680 --> 00:34:36.200
But there is a--


00:34:36.200 --> 00:34:38.560
we have a Discord where people are starting to gather


00:34:38.560 --> 00:34:39.960
and talk about some of the things


00:34:39.960 --> 00:34:42.880
that they're doing with Shiny for Python.


00:34:42.880 --> 00:34:46.120
So yeah, I think on the left here,


00:34:46.120 --> 00:34:49.040
If you select, say, orbit simulation--


00:34:49.040 --> 00:34:51.280
Yeah, the orbit simulation is cool.


00:34:51.280 --> 00:34:55.480
This is a demo written by one of our engineers.


00:34:55.480 --> 00:34:57.140
But this is using--


00:34:57.140 --> 00:34:59.180
well, first of all, we haven't talked about this,


00:34:59.180 --> 00:35:00.680
but this is actually using Wasm.


00:35:00.680 --> 00:35:04.520
So there is no Python running on the background here.


00:35:04.520 --> 00:35:08.760
This is using a feature of Shiny called Shiny Live.


00:35:08.760 --> 00:35:10.960
So this is using Pyodide, which is


00:35:10.960 --> 00:35:13.360
the same sort of Python in the browser technology


00:35:13.360 --> 00:35:15.600
that PyScript is currently using.


00:35:15.600 --> 00:35:19.620
And you still write your Shiny app using Python.


00:35:19.620 --> 00:35:23.000
You still don't have to write any HTML, CSS, and JavaScript.


00:35:23.000 --> 00:35:27.200
But when you run it, you can run it straight out of a web


00:35:27.200 --> 00:35:29.560
browser, as you can see here.


00:35:29.560 --> 00:35:32.520
So that's why it took a little bit longer to get started,


00:35:32.520 --> 00:35:35.560
is because it's installing Python into your browser


00:35:35.560 --> 00:35:38.000
and installing AstroPipe.


00:35:38.000 --> 00:35:39.320
ALEC LEE: Well, you say a while.


00:35:39.320 --> 00:35:41.000
It took like two seconds the first time.


00:35:41.000 --> 00:35:42.240
[INAUDIBLE]


00:35:42.240 --> 00:35:43.740
BRIAN KARDELL: Yeah, I forget that.


00:35:43.740 --> 00:35:47.620
For your listeners, they won't be able to see that way.


00:35:47.620 --> 00:35:52.980
Yeah, so this is an example of a relatively simple set


00:35:52.980 --> 00:35:58.300
of inputs and one 3D output that I think, in this case,


00:35:58.300 --> 00:36:01.020
is being rendered with matplotlib.


00:36:01.020 --> 00:36:05.580
And you can choose some different parameters


00:36:05.580 --> 00:36:09.980
about the Earth, Moon, and Sun, and Planet X.


00:36:09.980 --> 00:36:14.260
And it has arbitrarily complicated calculations


00:36:14.260 --> 00:36:16.460
happening on the back end by AstroPi to determine


00:36:16.460 --> 00:36:18.440
how these bodies would move when they're


00:36:18.440 --> 00:36:20.580
affected by each other's gravity.


00:36:20.580 --> 00:36:24.240
So there's a lot of Shiny apps that


00:36:24.240 --> 00:36:27.220
are like this, that there is one particular algorithm,


00:36:27.220 --> 00:36:30.140
one particular model that it's demonstrating,


00:36:30.140 --> 00:36:33.340
and then wanting to show what happens when


00:36:33.340 --> 00:36:35.020
you try different parameters.


00:36:35.020 --> 00:36:38.860
I'd say this is in the simplest category of Shiny apps


00:36:38.860 --> 00:36:43.340
in terms of what's easy to imagine here.


00:36:43.340 --> 00:36:46.580
And yeah, there's some other stuff on the left there.


00:36:46.580 --> 00:36:51.260
Some of these example apps show the use of different widgets.


00:36:51.260 --> 00:36:53.000
So there's one for Plotly there.


00:36:53.000 --> 00:36:55.760
You can use the Plotly JavaScript-based


00:36:55.760 --> 00:36:59.300
visualization library with Shiny for Python


00:36:59.300 --> 00:37:05.000
if you want your scatter plots to have tooltips that show


00:37:05.000 --> 00:37:06.080
data, for example.


00:37:06.080 --> 00:37:10.360
I mean, this particular one seems not to do that much.


00:37:10.360 --> 00:37:12.120
And you can use--


00:37:12.120 --> 00:37:14.600
Yeah, there's a Wordle clone.


00:37:14.600 --> 00:37:21.760
I love how it looks like a mobile phone keyboard.


00:37:21.760 --> 00:37:23.280
I have a whole keyboard right here.


00:37:23.280 --> 00:37:26.400
Now you could type into the mobile phone keyboard.


00:37:26.400 --> 00:37:27.560
Yeah.


00:37:27.560 --> 00:37:28.280
Wordy?


00:37:28.280 --> 00:37:29.480
No, it didn't take it.


00:37:29.480 --> 00:37:30.560
Come on.


00:37:30.560 --> 00:37:31.060
No.


00:37:31.060 --> 00:37:35.520
That's pretty funny.


00:37:35.520 --> 00:37:41.080
Yeah. Yeah. Those are just the beginning ones, right? You even have camera input. I don't


00:37:41.080 --> 00:37:46.880
know what that's going to do. I guess. Oh, this is designed for a phone. Yeah. We have


00:37:46.880 --> 00:37:51.960
another example that's not on here that will use your webcam. But yeah, it's okay. But


00:37:51.960 --> 00:37:58.120
it doesn't I don't think it works on the WASM mode. So yeah, there's probably security limitations


00:37:58.120 --> 00:38:03.720
and or other. Yeah. Yeah. I will say one thing that you won't see as much here that you do


00:38:03.720 --> 00:38:09.400
do see on Shiny for R is interactive dashboards,


00:38:09.400 --> 00:38:11.720
or even non-interactive real-time streaming


00:38:11.720 --> 00:38:15.360
dashboards, not because the underlying technology is not


00:38:15.360 --> 00:38:19.120
there, but because the actual UI widgets for making something


00:38:19.120 --> 00:38:23.360
that looks like a dashboard is in Shiny for R,


00:38:23.360 --> 00:38:24.720
but not in Shiny for Python.


00:38:24.720 --> 00:38:29.100
But that is coming within the next, I don't know,


00:38:29.100 --> 00:38:30.560
hopefully week or two weeks.


00:38:30.560 --> 00:38:32.060
So we have a new release coming that


00:38:32.060 --> 00:38:33.360
adds a lot more UI stuff.


00:38:33.360 --> 00:38:36.200
And that is a very, very common use of Shiny


00:38:36.200 --> 00:38:38.240
is for people that are creating dashboards that


00:38:38.240 --> 00:38:42.660
show key performance indicators and time series plots


00:38:42.660 --> 00:38:47.640
and geographic data plotted on an interactive leaflet map.


00:38:47.640 --> 00:38:50.780
That's the bread and butter for a lot of data scientists


00:38:50.780 --> 00:38:53.000
out there who are using Shiny.


00:38:53.000 --> 00:38:53.720
OK.


00:38:53.720 --> 00:38:58.000
That sounds very exciting and the kind of stuff


00:38:58.000 --> 00:39:00.480
that no one wants to do on the web.


00:39:00.480 --> 00:39:02.680
Very few people want to do directly on the web.


00:39:02.680 --> 00:39:04.800
you want to be able to just grab a library.


00:39:04.800 --> 00:39:05.640
- Yeah.


00:39:05.640 --> 00:39:06.460
- All right, so I sent us a little bit


00:39:06.460 --> 00:39:09.280
on this diversion here over those,


00:39:09.280 --> 00:39:13.840
but maybe the next thing would be reactive programming.


00:39:13.840 --> 00:39:15.380
Tell us about that.


00:39:15.380 --> 00:39:19.720
- Yeah, so Shiny was really born out of this idea


00:39:19.720 --> 00:39:20.980
of reactive programming.


00:39:20.980 --> 00:39:23.100
That was the motivating concept.


00:39:23.100 --> 00:39:26.240
And for people who haven't heard that term before,


00:39:26.240 --> 00:39:29.400
maybe heard it, but never really were clear on what it means


00:39:29.400 --> 00:39:32.700
Reactive programming is a programming paradigm


00:39:32.700 --> 00:39:36.300
that can be applied to many different programming languages


00:39:36.300 --> 00:39:41.760
where it's about making it easy to program against values


00:39:41.760 --> 00:39:45.120
that are changing over time.


00:39:45.120 --> 00:39:49.140
So in a normal programming paradigm,


00:39:49.140 --> 00:39:53.120
if you have a value x, say, x equals 1,


00:39:53.120 --> 00:39:57.280
and then you have y equals x plus 1,


00:39:57.280 --> 00:40:01.320
And then you change the value of x, the value of y does not change, right?


00:40:01.320 --> 00:40:02.920
It's not reactive in that way.


00:40:02.920 --> 00:40:12.960
Whereas if you were in Excel and you had, you know, one cell using another cell plus one, then you would expect that to change.


00:40:12.960 --> 00:40:18.560
So Excel is sort of the most common example of a reactive model that I'm familiar with.


00:40:18.560 --> 00:40:20.320
And I see.


00:40:20.520 --> 00:40:24.400
So you wire up the data to say, this number depends


00:40:24.400 --> 00:40:27.000
on these other numbers, and this one depends on that formula.


00:40:27.000 --> 00:40:29.960
And the underlying reactive system just


00:40:29.960 --> 00:40:33.000
says, we're going to do the minimum amount of recompute


00:40:33.000 --> 00:40:34.880
to keep them up to date.


00:40:34.880 --> 00:40:36.160
That's exactly right.


00:40:36.160 --> 00:40:37.480
That's exactly right.


00:40:37.480 --> 00:40:39.560
So in this case, the values that are changing


00:40:39.560 --> 00:40:43.720
might be a slider that is in your user interface.


00:40:43.720 --> 00:40:48.200
And when the user drags that slider from 0 to 5,


00:40:48.200 --> 00:40:51.520
There might be all sorts of downstream calculations


00:40:51.520 --> 00:40:53.840
that need to recompute now because you've


00:40:53.840 --> 00:40:55.280
changed that value.


00:40:55.280 --> 00:40:59.560
And in a world prior to reactive programming,


00:40:59.560 --> 00:41:04.280
the dominant model was, and maybe in a lot of places


00:41:04.280 --> 00:41:06.480
still, is callback-based programming,


00:41:06.480 --> 00:41:09.840
or event handling is the other name for it.


00:41:09.840 --> 00:41:12.180
And that's-- if you've ever used a framework that


00:41:12.180 --> 00:41:15.080
had something called an onclick or something like that,


00:41:15.080 --> 00:41:16.440
you're doing event handling.


00:41:16.440 --> 00:41:17.480
This button is pressed.


00:41:17.480 --> 00:41:22.120
I am going to execute this exact code in response


00:41:22.120 --> 00:41:23.440
to a button click.


00:41:23.440 --> 00:41:25.020
And in that world, which is a world


00:41:25.020 --> 00:41:28.160
that I inhabited for many years, doing full-time, very


00:41:28.160 --> 00:41:30.960
complicated UI programming using that model--


00:41:30.960 --> 00:41:32.880
Sounds like some desktop programming, maybe


00:41:32.880 --> 00:41:35.480
some C#, Windows Forms, something like that.


00:41:35.480 --> 00:41:36.600
That's right.


00:41:36.600 --> 00:41:37.360
Exactly.


00:41:37.360 --> 00:41:40.080
I worked at Microsoft working on Windows Forms apps


00:41:40.080 --> 00:41:41.920
that we shipped.


00:41:41.920 --> 00:41:46.880
And RStudio was created in that paradigm as well.


00:41:46.880 --> 00:41:50.660
And it's actually quite difficult


00:41:50.660 --> 00:41:52.540
to do that kind of programming well.


00:41:52.540 --> 00:41:54.560
It's very easy to understand how to code


00:41:54.560 --> 00:41:58.180
in event-driven sort of way or using callbacks.


00:41:58.180 --> 00:42:01.340
But to get your callback logic right


00:42:01.340 --> 00:42:05.980
as the number of events, the number of outputs


00:42:05.980 --> 00:42:09.340
and the number of intermediate sort of calculations


00:42:09.340 --> 00:42:14.100
as they increase, it's really hard to number one,


00:42:14.100 --> 00:42:16.940
keep it performant, and number two, keep it correct.


00:42:16.940 --> 00:42:22.340
And the idea for doing a web framework for data scientists


00:42:22.340 --> 00:42:25.340
actually predates me finding out about reactive programming.


00:42:25.340 --> 00:42:26.420
And I actually said no.


00:42:26.420 --> 00:42:29.140
Like, I actually-- JJ and I talked about it.


00:42:29.140 --> 00:42:31.700
And I was like, we could do it and we should not,


00:42:31.700 --> 00:42:35.460
unless we come up with some way that is better than event


00:42:35.460 --> 00:42:35.940
handling.


00:42:35.940 --> 00:42:38.260
Because what I didn't want to do was


00:42:38.260 --> 00:42:42.140
make it easy to come up with answers that were incorrect,


00:42:42.140 --> 00:42:45.140
which is what I think callback-based programming makes


00:42:45.140 --> 00:42:48.020
it very easy for you to forget to update some aspect


00:42:48.020 --> 00:42:49.140
of your calculation.


00:42:49.140 --> 00:42:52.180
And now you have an answer, it's just not the right answer.


00:42:52.180 --> 00:42:53.680
- Right, you update two graphs,


00:42:53.680 --> 00:42:56.420
but there's some number that has like a total in it.


00:42:56.420 --> 00:42:58.260
And you forget in your event handler,


00:42:58.260 --> 00:43:00.060
you got to update all three.


00:43:00.060 --> 00:43:03.140
And so then it looks like it knows, but yeah.


00:43:03.140 --> 00:43:04.660
- Yeah, you'd have to update all three


00:43:04.660 --> 00:43:06.540
in the correct order potentially, right?


00:43:06.540 --> 00:43:08.180
'Cause one of those sub calculations


00:43:08.180 --> 00:43:09.100
might depend on the other.


00:43:09.100 --> 00:43:14.100
So the whole thing, it is certainly possible to create


00:43:14.100 --> 00:43:19.140
very complex or even simple to complex interactive stuff


00:43:19.140 --> 00:43:23.260
using callbacks, but I never felt like


00:43:23.260 --> 00:43:24.660
this was a great way to work.


00:43:24.660 --> 00:43:27.940
And when I was building these desktop apps,


00:43:27.940 --> 00:43:30.200
I often felt at the end of the day,


00:43:30.200 --> 00:43:32.100
like I had been operating at the very edges


00:43:32.100 --> 00:43:33.700
of my mental capacity.


00:43:33.700 --> 00:43:38.940
And it's even worse when you go to modify existing code


00:43:38.940 --> 00:43:43.540
or, God forbid, have to help debug somebody else's UI code.


00:43:43.540 --> 00:43:47.260
I mean, it really is very, very difficult.


00:43:47.260 --> 00:43:50.940
And I heard about Reactive programming


00:43:50.940 --> 00:43:54.500
via this JavaScript framework called Meteor.


00:43:54.500 --> 00:43:56.420
And I don't know if you've heard of Meteor.


00:43:56.420 --> 00:43:56.900
It was--


00:43:56.900 --> 00:43:58.460
>>I've heard of it, but I haven't ever used it.


00:43:58.460 --> 00:43:59.940
>>Yeah, not a lot of people have.


00:43:59.940 --> 00:44:02.140
I think it was very influential in terms of its ideas,


00:44:02.140 --> 00:44:05.180
but it didn't catch on anything like React.


00:44:05.180 --> 00:44:10.500
But Meteor, I heard about it in 2012.


00:44:10.500 --> 00:44:17.020
And I can't really convey how awe-inspiring it was to see.


00:44:17.020 --> 00:44:19.820
I think I saw a five-minute demo that was


00:44:19.820 --> 00:44:21.380
on the front page of Hacker News.


00:44:21.380 --> 00:44:25.780
And I was just flabbergasted at what


00:44:25.780 --> 00:44:27.500
they were doing in this demo.


00:44:27.500 --> 00:44:29.900
And there were no event handlers anywhere,


00:44:29.900 --> 00:44:33.740
and yet everything was just completely snappily updating.


00:44:33.740 --> 00:44:38.740
And I was so taken aback by this that it stuck in my brain


00:44:38.740 --> 00:44:39.460
for weeks.


00:44:39.460 --> 00:44:40.900
I was like, how do they do that?


00:44:40.900 --> 00:44:42.860
That doesn't make any sense to me.


00:44:42.860 --> 00:44:46.660
And I finally did some Googling around,


00:44:46.660 --> 00:44:48.260
and there was a Stack Overflow answer


00:44:48.260 --> 00:44:52.820
that indicated this is more or less how it works.


00:44:52.820 --> 00:44:57.180
And with that clue, I downloaded their source code


00:44:57.180 --> 00:45:01.300
and found my way to how exactly it was implemented.


00:45:01.300 --> 00:45:03.620
And I actually was getting on a plane.


00:45:03.620 --> 00:45:05.780
And I downloaded the repo before I got on the plane.


00:45:05.780 --> 00:45:07.500
I was like, by the time this plane lands,


00:45:07.500 --> 00:45:08.940
I'm going to figure this out.


00:45:08.940 --> 00:45:13.620
And it actually is a beautifully elegant mechanism


00:45:13.620 --> 00:45:17.660
that I'll probably talk about someday.


00:45:17.660 --> 00:45:19.220
I mean, we could talk about it now,


00:45:19.220 --> 00:45:22.460
but I think it'll probably be the rest of our time.


00:45:22.460 --> 00:45:26.620
But it's a beautifully elegant and ultimately quite simple


00:45:26.620 --> 00:45:30.140
mechanism that underlies all this magic.


00:45:30.140 --> 00:45:33.200
And when I saw that, and eventually it


00:45:33.200 --> 00:45:35.120
took me a couple of weeks to connect the dots,


00:45:35.120 --> 00:45:36.800
but when I realized, wait a minute,


00:45:36.800 --> 00:45:39.320
this could be how data scientists could


00:45:39.320 --> 00:45:42.080
create highly interactive things without fear,


00:45:42.080 --> 00:45:43.560
without worrying that they're going


00:45:43.560 --> 00:45:46.280
to forget to update some intermediate thing


00:45:46.280 --> 00:45:47.600
and get the wrong answer.


00:45:47.600 --> 00:45:48.820
Or worse, they wouldn't worry about it.


00:45:48.820 --> 00:45:50.560
They'd just get the wrong answer and then


00:45:50.560 --> 00:45:52.820
be angry after the fact, right?


00:45:52.820 --> 00:45:54.240
We're going to retract that paper.


00:45:54.240 --> 00:45:54.840
I'm sorry.


00:45:54.840 --> 00:45:56.400
Yeah.


00:45:56.400 --> 00:45:57.800
Yeah.


00:45:57.800 --> 00:46:02.480
And on the R side, it really has--


00:46:02.480 --> 00:46:04.880
these ideas have proven themselves out.


00:46:04.880 --> 00:46:06.560
Year after year after year, I think


00:46:06.560 --> 00:46:08.500
people are building incredibly cool things


00:46:08.500 --> 00:46:11.960
in reactive programming with no background in software


00:46:11.960 --> 00:46:17.080
engineering, much less hardcore front end web development.


00:46:17.080 --> 00:46:21.600
So I really do believe there are a lot of different ways people


00:46:21.600 --> 00:46:24.800
are solving this problem in Python.


00:46:24.800 --> 00:46:26.680
Streamlit and Dash each have their own takes.


00:46:26.680 --> 00:46:29.880
and Pinecone and Solara, all these different ones.


00:46:29.880 --> 00:46:34.880
And the ones that sort of have thought carefully


00:46:34.880 --> 00:46:40.520
about this problem of how do you help people programming


00:46:40.520 --> 00:46:43.400
against what is inherently a dynamic system


00:46:43.400 --> 00:46:45.280
while staying safe, while making sure


00:46:45.280 --> 00:46:47.720
that you're getting the right answers every time


00:46:47.720 --> 00:46:49.440
and doing it in an efficient way.


00:46:49.440 --> 00:46:52.480
Those are the ones that I think are closest


00:46:52.480 --> 00:46:53.560
to the spirit of Shiny.


00:46:53.560 --> 00:46:57.800
And that's really why I think Shiny for Python


00:46:57.800 --> 00:46:58.920
needed to exist.


00:46:58.920 --> 00:47:02.040
Because I looked at Dash and Streamlit,


00:47:02.040 --> 00:47:06.560
and I just felt like, I'm glad that people are really


00:47:06.560 --> 00:47:08.640
getting a lot of value out of these,


00:47:08.640 --> 00:47:11.080
especially out of Streamlit.


00:47:11.080 --> 00:47:14.200
But I really feel like this needs to exist as well.


00:47:14.200 --> 00:47:17.640
We really need an industrial strength reactive framework


00:47:17.640 --> 00:47:21.560
for things that are not just top to bottom execution.


00:47:21.560 --> 00:47:26.240
>> Yeah. One thing that's standing out to me on the page here is you talk about


00:47:26.240 --> 00:47:32.480
there are a few utility functions to help manage or utility things to help manage reactivity.


00:47:32.480 --> 00:47:40.680
And one is context blocks with isolate and other ones are decorators for functions.


00:47:40.680 --> 00:47:50.360
And those two things are pretty solid Pythonic constructs of the language.


00:47:50.360 --> 00:48:01.600
Right. And so, you know, it looks like you put some thought into not just writing R code in Python, but trying to embrace some of the Pythonic language capabilities.


00:48:01.600 --> 00:48:15.360
Yeah, that's absolutely right. It was really important to us when we were talking about the design philosophy for Shiny for Python to really make it a Python first experience.


00:48:16.200 --> 00:48:23.200
And that's not necessarily--


00:48:23.200 --> 00:48:25.040
I think the other choice is defensible too,


00:48:25.040 --> 00:48:26.840
which is let's make these two frameworks look


00:48:26.840 --> 00:48:28.880
as similar as possible so that you can seamlessly


00:48:28.880 --> 00:48:30.600
move from one to the other.


00:48:30.600 --> 00:48:36.380
And I was just not convinced that anyone would really


00:48:36.380 --> 00:48:39.760
enjoy writing R-style code in Python.


00:48:39.760 --> 00:48:40.280
I wouldn't.


00:48:40.280 --> 00:48:41.760
I mean, that just feels--


00:48:41.760 --> 00:48:43.800
something feels hacky about that.


00:48:43.800 --> 00:48:45.440
So yeah, we definitely spent some time--


00:48:45.440 --> 00:48:46.560
And I'm not new to Python.


00:48:46.560 --> 00:48:50.320
I think I learned Python originally in 2003,


00:48:50.320 --> 00:48:51.760
something like that.


00:48:51.760 --> 00:48:53.560
And I've spent some time with the language.


00:48:53.560 --> 00:48:59.200
So yeah, it felt to me like so much of Shiny is--


00:48:59.200 --> 00:49:01.720
this reactive programming is about creating


00:49:01.720 --> 00:49:06.640
independent units of either this is code that generates a plot


00:49:06.640 --> 00:49:10.280
or this is code that calculates a data frame.


00:49:10.280 --> 00:49:12.960
And taking those little bits of code


00:49:12.960 --> 00:49:17.440
and deciding when is the right time for each of them to run.


00:49:17.440 --> 00:49:19.960
Because there are dependencies between these different blocks.


00:49:19.960 --> 00:49:23.080
And the notion of these being functions


00:49:23.080 --> 00:49:26.440
that have decorators on them felt to me


00:49:26.440 --> 00:49:28.800
like a pretty spot-on analogy.


00:49:28.800 --> 00:49:31.480
Like you're creating a chunk of code, which in Python


00:49:31.480 --> 00:49:34.800
is a function, and then you are annotating it


00:49:34.800 --> 00:49:39.040
with an indicator of your intent.


00:49:39.040 --> 00:49:40.800
So in Shiny, you would write--


00:49:40.800 --> 00:49:43.720
For a plot output, you would say def plot1,


00:49:43.720 --> 00:49:45.940
or whatever you named that plot.


00:49:45.940 --> 00:49:47.920
You would have your matplotlib code inside.


00:49:47.920 --> 00:49:51.720
And then as a decorator to that function, you would say,


00:49:51.720 --> 00:49:52.560
this is an output.


00:49:52.560 --> 00:49:57.240
And the type of the output is a plot.


00:49:57.240 --> 00:50:00.240
Now, I will say, that being said,


00:50:00.240 --> 00:50:02.720
I have been a little bit surprised how many data


00:50:02.720 --> 00:50:05.240
scientists in Python I've talked to have not


00:50:05.240 --> 00:50:07.000
worked with decorators.


00:50:07.000 --> 00:50:10.240
I mean, most of them are familiar enough.


00:50:10.240 --> 00:50:13.600
But a non-zero amount of people have told me,


00:50:13.600 --> 00:50:15.160
I haven't done decorators before,


00:50:15.160 --> 00:50:16.800
and this is a little bit scary.


00:50:16.800 --> 00:50:18.760
So that was not something that I was anticipating


00:50:18.760 --> 00:50:19.720
going into this.


00:50:19.720 --> 00:50:22.120
- Yeah, so I got a couple thoughts.


00:50:22.120 --> 00:50:26.400
One is, if you went with your alternate reality,


00:50:26.400 --> 00:50:29.280
where you said, let's make them as identical as possible,


00:50:29.280 --> 00:50:31.960
there's certainly a case to be made for that, I agree.


00:50:31.960 --> 00:50:35.840
But that would sort of say the primary audience


00:50:35.840 --> 00:50:39.080
is the people that flows between R and Python.


00:50:39.080 --> 00:50:39.920
- Exactly.


00:50:39.920 --> 00:50:42.360
- It's certainly non-zero, but it's not like,


00:50:42.360 --> 00:50:45.040
let's try to resonate most deeply


00:50:45.040 --> 00:50:47.920
with just the Python community full stop


00:50:47.920 --> 00:50:51.040
rather than the transit folks.


00:50:51.040 --> 00:50:52.520
- Yeah, that's right.


00:50:52.520 --> 00:50:55.680
- So I would say, I mean, looking in from the outside


00:50:55.680 --> 00:50:57.880
that this looks like a good choice.


00:50:57.880 --> 00:51:02.720
Second, the with concepts and the decorators


00:51:02.720 --> 00:51:07.080
and data scientists is, I think one of the powers of Python,


00:51:07.080 --> 00:51:08.940
the reason a lot of data scientists use it


00:51:08.940 --> 00:51:12.140
is you can be really effective with a partial understanding,


00:51:12.140 --> 00:51:15.180
a highly partial understanding of what Python is


00:51:15.180 --> 00:51:16.500
and how it works, right?


00:51:16.500 --> 00:51:18.620
Like you might not know how to create a class,


00:51:18.620 --> 00:51:20.020
you might not even know how to create a function,


00:51:20.020 --> 00:51:22.980
but you can still pip install a few cool libraries


00:51:22.980 --> 00:51:25.700
or conda install them and then run top to bottom


00:51:25.700 --> 00:51:28.580
five lines that generate an amazing output, right?


00:51:28.580 --> 00:51:31.180
And so I think there's a,


00:51:31.180 --> 00:51:33.300
not talking about all data science,


00:51:33.300 --> 00:51:37.340
but I think there's a slice of kind of pretty new


00:51:37.340 --> 00:51:39.100
to Python data science who are like,


00:51:39.100 --> 00:51:41.060
came from somewhere else, like I heard this is awesome


00:51:41.060 --> 00:51:43.180
and I'm starting to get some traction with it.


00:51:43.180 --> 00:51:45.380
But even they haven't gone into,


00:51:45.380 --> 00:51:48.980
you know, crazy concepts of decorators that take functions,


00:51:48.980 --> 00:51:51.980
star R wraps them and returns other functions.


00:51:51.980 --> 00:51:56.980
You know, like that said, from a syntactical perspective,


00:51:56.980 --> 00:51:58.780
I think it's pretty easy, like, oh, this function,


00:51:58.780 --> 00:51:59.700
it has to be reactive.


00:51:59.700 --> 00:52:01.560
So I put @reactive event on it.


00:52:01.560 --> 00:52:04.060
- Yeah, that's right.


00:52:04.060 --> 00:52:05.060
Yeah, yeah.


00:52:07.320 --> 00:52:12.020
Amir asks if there's any examples with user authentication.


00:52:12.020 --> 00:52:16.040
I know you guys have your gallery,


00:52:16.040 --> 00:52:18.040
which is where I skipped before,


00:52:18.040 --> 00:52:20.540
but the gallery I think is maybe easier to quickly browse,


00:52:20.540 --> 00:52:22.380
but there's more in the examples.


00:52:22.380 --> 00:52:24.840
- Yeah, and honestly, we are a little behind


00:52:24.840 --> 00:52:26.320
on the examples.


00:52:26.320 --> 00:52:29.440
We spent a lot of the last six months working on features


00:52:29.440 --> 00:52:30.760
and not on examples.


00:52:30.760 --> 00:52:33.120
- You've been busy building the thing,


00:52:33.120 --> 00:52:35.840
not talking about what you could do.


00:52:35.840 --> 00:52:38.520
Yeah, so I think we need our examples to catch up a little bit.


00:52:38.520 --> 00:52:47.920
I will say that user authentication is something that we have as part of both our hosted platform


00:52:47.920 --> 00:52:51.580
and for Posit Connect.


00:52:51.580 --> 00:52:56.560
So I think a lot of companies that are trying to sort of have a similar business model as


00:52:56.560 --> 00:53:07.320
us and have a open source framework and also some kind of enterprise hosting often draw


00:53:07.320 --> 00:53:08.720
the line that way.


00:53:08.720 --> 00:53:13.580
That authentication is one of the things that isn't in the framework, it wraps the framework.


00:53:13.580 --> 00:53:19.100
That being said, in Shiny for R, people definitely went ahead and wrote their own packages that


00:53:19.100 --> 00:53:22.420
put authentication into the framework and made it open source.


00:53:22.420 --> 00:53:29.060
And I'm sure those things are going to happen in Shiny for Python very quickly as well.


00:53:29.060 --> 00:53:30.860
How similar is the execution model?


00:53:30.860 --> 00:53:40.180
Like the internals, what's happening conceptually on the server stuff or on the web side?


00:53:40.180 --> 00:53:43.420
I would say from...


00:53:43.420 --> 00:53:45.820
There's a couple of ways to answer that.


00:53:45.820 --> 00:53:50.820
I would say right now it is surprisingly close,


00:53:50.820 --> 00:53:54.660
which is not really what we were anticipating.


00:53:54.660 --> 00:53:57.980
Shiny for Python is written in async I/O,


00:53:57.980 --> 00:54:01.860
and that async framework is quite different


00:54:01.860 --> 00:54:06.460
than how async works in R.


00:54:06.460 --> 00:54:10.260
I think we, after spending a lot of time on this implementation,


00:54:11.100 --> 00:54:13.460
The mental model for the Shiny app author


00:54:13.460 --> 00:54:15.500
is actually quite similar.


00:54:15.500 --> 00:54:18.100
So where we ended up, I think it does--


00:54:18.100 --> 00:54:20.060
for all intents and purposes, as an app author,


00:54:20.060 --> 00:54:21.940
it's a very similar execution model.


00:54:21.940 --> 00:54:26.500
So each user-- if you were to launch a Shiny for Python app


00:54:26.500 --> 00:54:28.540
right now from your--


00:54:28.540 --> 00:54:31.300
not from Wasm, but using a regular Shiny for Python,


00:54:31.300 --> 00:54:33.780
running it out of Python, and you connected three web


00:54:33.780 --> 00:54:37.180
browsers, they would all be running in the same process.


00:54:37.180 --> 00:54:43.500
Each one gets their own copy of their own session, basically.


00:54:43.500 --> 00:54:45.500
So there's no confusing whose inputs


00:54:45.500 --> 00:54:46.780
are applying to whose outputs.


00:54:46.780 --> 00:54:48.980
Everybody has their own copies of inputs and outputs,


00:54:48.980 --> 00:54:50.940
and they're wired together.


00:54:50.940 --> 00:54:53.740
But it's all running on the same process,


00:54:53.740 --> 00:54:54.820
and it's all running--


00:54:54.820 --> 00:54:58.020
currently, they all run on the same thread.


00:54:58.020 --> 00:54:59.940
We do that on purpose because you can also


00:54:59.940 --> 00:55:01.180
have shared reactives.


00:55:01.180 --> 00:55:06.620
So you could have global variables that, essentially,


00:55:06.620 --> 00:55:10.740
when one browser updates them, everybody gets an update.


00:55:10.740 --> 00:55:13.380
And you could have some kind of shared scoreboard or a chat


00:55:13.380 --> 00:55:16.220
room or whatever.


00:55:16.220 --> 00:55:20.660
That being said, if you want, you can also do async.


00:55:20.660 --> 00:55:24.300
So your outputs and calculations can also be async functions.


00:55:24.300 --> 00:55:27.020
And therefore, your session, if it's


00:55:27.020 --> 00:55:29.540
doing some kind of long-running async calculation,


00:55:29.540 --> 00:55:33.020
can give up its control of the thread


00:55:33.020 --> 00:55:35.740
to some other session that can execute.


00:55:35.740 --> 00:55:37.780
>> Right, or it's doing some database thing


00:55:37.780 --> 00:55:39.580
where it's pulling in a bunch of data.


00:55:39.580 --> 00:55:42.300
I can say, "Wait on the database, you guys keep going."


00:55:42.300 --> 00:55:44.220
>> Yeah, that's right.


00:55:44.220 --> 00:55:49.540
>> Okay. So we're getting short on time here.


00:55:49.540 --> 00:55:53.900
Let me ask you two more questions.


00:55:53.900 --> 00:55:58.660
First one is, I think from a community perspective,


00:55:58.660 --> 00:56:01.260
like what opens up now?


00:56:01.260 --> 00:56:03.860
So we have R and we have Python,


00:56:03.860 --> 00:56:05.500
and there are similarities between these,


00:56:05.500 --> 00:56:07.600
but there's really smart people doing creative


00:56:07.600 --> 00:56:09.240
and powerful stuff on both sides.


00:56:09.240 --> 00:56:14.680
Because of the chronology, I guess,


00:56:14.680 --> 00:56:18.200
mostly I imagine that there's more shiny work


00:56:18.200 --> 00:56:21.160
that's happened on the R side than on the Python side.


00:56:21.160 --> 00:56:24.000
But how much does this make it possible


00:56:24.000 --> 00:56:28.360
for people who maybe wrote a book with shiny for R


00:56:28.360 --> 00:56:30.620
and they might want a Python version?


00:56:30.620 --> 00:56:35.080
It seems to me that having this as an option,


00:56:35.080 --> 00:56:40.080
if the whole UI is now kind of almost equivalent,


00:56:40.080 --> 00:56:43.640
if not syntactically identical,


00:56:43.640 --> 00:56:46.380
like, "Oh, all of a sudden we could have these two versions


00:56:46.380 --> 00:56:49.060
or we could move from one side of that fence to the other


00:56:49.060 --> 00:56:52.360
and still stick with Shiny


00:56:52.360 --> 00:56:53.600
and the same reactive programming model."


00:56:53.600 --> 00:56:56.160
Yeah.


00:56:56.160 --> 00:56:58.320
So I want to make sure I get your question right.


00:56:58.320 --> 00:57:00.920
Are you talking about people who are sort of


00:57:00.920 --> 00:57:03.340
in the Shiny ecosystem who have extension packages


00:57:01.860 --> 00:57:02.700
and things like that?


00:57:02.700 --> 00:57:05.060
Or are you talking about people who write shiny apps?


00:57:05.060 --> 00:57:06.000
- People who write shiny apps.


00:57:06.000 --> 00:57:09.860
People who are like users creating these shiny apps.


00:57:09.860 --> 00:57:11.420
Maybe they created them in shiny for R


00:57:11.420 --> 00:57:13.080
and they're like, I've always wanted to do a Python one,


00:57:13.080 --> 00:57:15.660
but I really like shiny, so I'm not going anywhere.


00:57:15.660 --> 00:57:17.700
You know, but now there's shiny for Python.


00:57:17.700 --> 00:57:20.060
You're like, oh, maybe this is a way to have


00:57:20.060 --> 00:57:21.640
that as an option, right?


00:57:21.640 --> 00:57:24.340
Or I'm a teacher teaching a class at a college


00:57:24.340 --> 00:57:25.740
and I did it with shiny and R


00:57:25.740 --> 00:57:28.220
and they're telling me I have to move to Python.


00:57:28.220 --> 00:57:29.460
I thought I'd use Streamlib,


00:57:29.460 --> 00:57:30.660
but maybe now I can move over.


00:57:30.660 --> 00:57:35.040
Like, how much do you see that scenario coming into play now?


00:57:35.040 --> 00:57:36.500
- We absolutely are, yeah.


00:57:36.500 --> 00:57:38.940
And I think I underestimated this a little bit.


00:57:38.940 --> 00:57:40.860
I think what I was anticipating is that people


00:57:40.860 --> 00:57:44.180
who are very comfortable with Shiny for R


00:57:44.180 --> 00:57:45.580
and comfortable with R in general


00:57:45.580 --> 00:57:49.080
might see Shiny for Python as sort of a threat,


00:57:49.080 --> 00:57:52.320
as the Shiny team has given up on R


00:57:52.320 --> 00:57:54.000
and all they care about is Python now


00:57:54.000 --> 00:57:57.300
and they're selling out to the Python crowd or whatever.


00:57:57.300 --> 00:58:00.300
And that really has not been the case at all.


00:58:00.300 --> 00:58:02.700
And then Joe, you come on this podcast and oh my goodness.


00:58:02.700 --> 00:58:03.700
Yeah.


00:58:03.700 --> 00:58:04.700
Yeah, that's right.


00:58:04.700 --> 00:58:05.700
I'm just kidding.


00:58:05.700 --> 00:58:06.700
Yeah.


00:58:06.700 --> 00:58:11.580
In fact, it's almost been a sense of relief.


00:58:11.580 --> 00:58:14.940
And that applies as well to, you know, our company name was RStudio.


00:58:14.940 --> 00:58:16.700
We rebranded Deposit.


00:58:16.700 --> 00:58:21.700
And similarly, you know, we announced both things at the same conference that we were


00:58:21.700 --> 00:58:26.340
going from RStudio to Deposit in terms of our company name and Shiny for Python is now


00:58:26.340 --> 00:58:29.340
going to be a thing in addition to Shiny for R.


00:58:29.340 --> 00:58:38.540
And I almost feel like the predominant emotion that we got from our community was relief.


00:58:38.540 --> 00:58:43.980
Because I think unless you're in very specific fields, there's nobody that doesn't have some


00:58:43.980 --> 00:58:46.240
Python around them, right?


00:58:46.240 --> 00:58:52.140
That maybe your team does R, but then you have this sibling team that maybe is more


00:58:52.140 --> 00:58:56.480
ML model heavy, and they definitely use Python, or your IT department really is a lot more


00:58:56.480 --> 00:58:59.180
comfortable deploying Python.


00:58:59.180 --> 00:59:07.020
And I think as much as people love R, knowing that they have the option, knowing that they


00:59:07.020 --> 00:59:13.740
can take these ideas that they really like from R and be able to reuse them in Python.


00:59:13.740 --> 00:59:18.820
I mean, yes, there will be some syntax to learn, but that's never the hard part, right?


00:59:18.820 --> 00:59:21.660
I mean, the hard part is everything that you express in the syntax.


00:59:21.660 --> 00:59:23.940
The libraries and the UIs and all that.


00:59:23.940 --> 00:59:24.940
Yeah.


00:59:24.940 --> 00:59:25.940
Yeah.


00:59:25.940 --> 00:59:28.380
So that's really what we've heard is that people, even if they're like totally happy


00:59:28.380 --> 00:59:33.780
with Shiny for R, they're happy that Shiny for Python exists because they know that if


00:59:33.780 --> 00:59:38.300
the time comes where they have to add that to their toolkit, that it's an option and


00:59:38.300 --> 00:59:43.580
they don't have to now try to map everything that they know and take for granted from Shiny


00:59:43.580 --> 00:59:48.060
to have to map that to Dash or to Streamlit or Panel or something like that.


00:59:48.060 --> 00:59:53.340
Yeah, you know, another example is you work at a university where R is actually really


00:59:53.340 --> 00:59:55.340
has a good stronghold, right?


00:59:55.340 --> 00:59:58.340
It has a-- especially in the math and statistics department.


00:59:58.340 --> 01:00:01.340
But maybe you're working with some astronomers,


01:00:01.340 --> 01:00:04.340
and their whole research group does Python,


01:00:04.340 --> 01:00:05.340
and you want to work with them.


01:00:05.340 --> 01:00:09.340
But you also want to bring shiny, right?


01:00:09.340 --> 01:00:13.340
So that's what-- all that conversation right there


01:00:13.340 --> 01:00:16.340
kind of encapsulates why I thought this would be a really


01:00:16.340 --> 01:00:18.340
cool topic to have you on the show,


01:00:18.340 --> 01:00:22.340
is it kind of opens up this bridge for a lot of people


01:00:22.340 --> 01:00:24.580
for a lot of people in a lot of directions.


01:00:24.580 --> 01:00:26.780
- Yeah, and speaking of bridges,


01:00:26.780 --> 01:00:29.380
a member of my team pointed out that,


01:00:29.380 --> 01:00:31.900
he's someone who in his previous job


01:00:31.900 --> 01:00:34.820
went from an R organization


01:00:34.820 --> 01:00:37.500
to like a more Python heavy organization.


01:00:37.500 --> 01:00:40.560
And as someone who's coming from the R world,


01:00:40.560 --> 01:00:43.020
it can be a little bit intimidating


01:00:43.020 --> 01:00:46.340
to sort of start at the bottom of the ladder again,


01:00:46.340 --> 01:00:50.060
especially if you're in some kind of team situation


01:00:50.060 --> 01:00:51.540
where you're expected to be productive


01:00:51.540 --> 01:00:58.460
to contribute to the team. And Shiny for Python, especially being new, people are coming from


01:00:58.460 --> 01:01:04.700
the R world and sort of find themselves, whether by choice or involuntarily, needing to do


01:01:04.700 --> 01:01:10.940
Python, that Shiny for Python might be an interesting, like you said, bridge for them


01:01:10.940 --> 01:01:17.020
to go from one ecosystem to the other while maintaining a certain level of familiarity


01:01:17.020 --> 01:01:22.020
to be able to deliver a lot of value.


01:01:22.020 --> 01:01:24.660
Because one of the reasons I think Shiny


01:01:24.660 --> 01:01:28.180
really resonated on the R side is because the things


01:01:28.180 --> 01:01:30.300
that you build with Shiny, if they have value,


01:01:30.300 --> 01:01:32.260
they are extremely visible.


01:01:32.260 --> 01:01:33.440
They're extremely visible to your coworkers,


01:01:33.440 --> 01:01:35.620
inside your organization.


01:01:35.620 --> 01:01:39.620
You're talking about how people coming up


01:01:39.620 --> 01:01:42.460
and saying how they've built impactful things with Shiny.


01:01:42.460 --> 01:01:46.260
Another common theme I heard was how much Shiny


01:01:44.900 --> 01:01:54.180
help their careers. Going from doing work in a REPL or a notebook and instead being


01:01:54.180 --> 01:02:00.940
able to deliver very dramatic, interactive applications is a really powerful way to have


01:02:00.940 --> 01:02:03.300
an impact in your organization.


01:02:03.300 --> 01:02:08.640
It is. And I think data scientists, and especially this kind of visual, "let me turn the knobs


01:02:08.640 --> 01:02:12.280
and see what happens type of experience


01:02:12.280 --> 01:02:15.920
is the type of person that has the ear of pretty high up folks.


01:02:15.920 --> 01:02:18.160
And if you've got powerful tools like this


01:02:18.160 --> 01:02:21.680
to make a good impression, you're like, they asked me--


01:02:21.680 --> 01:02:23.960
I asked them if they could give us predictions of this


01:02:23.960 --> 01:02:25.040
or if they could rethink this.


01:02:25.040 --> 01:02:27.280
And they came back with a new web app the next day.


01:02:27.280 --> 01:02:28.080
Are you kidding me?


01:02:28.080 --> 01:02:30.520
Took us six months to redesign our stupid website


01:02:30.520 --> 01:02:33.520
for the homepage, something like this, right?


01:02:33.520 --> 01:02:36.320
And so it lets you look good, right, to the right people.


01:02:36.320 --> 01:02:38.000
That's right, 100%.


01:02:38.000 --> 01:02:40.000
Yeah, cool.


01:02:40.000 --> 01:02:42.560
Joe, I'd say you're making a big impact here.


01:02:42.560 --> 01:02:46.200
We got Alan out there saying, "I just started using Shiny during this live stream."


01:02:46.200 --> 01:02:47.700
Yes.


01:02:47.700 --> 01:02:52.300
How hard is it to deploy this into an AWS EC2 instance, for example?


01:02:52.300 --> 01:02:54.000
Yeah, you totally can.


01:02:54.000 --> 01:02:59.700
So I think the easiest thing to do is to look up Shiny Server.


01:02:59.700 --> 01:03:05.500
Most of the documentation talks about, you know, you might find it on the R side of the website,


01:03:05.500 --> 01:03:06.900
but it's actually all the same.


01:03:06.900 --> 01:03:12.860
So if you're using Ubuntu, it's a simple install


01:03:12.860 --> 01:03:14.340
of a Debian package.


01:03:14.340 --> 01:03:19.400
If you're using Fedora, it's an RPM.


01:03:19.400 --> 01:03:23.860
And it should be pretty easy to get started with.


01:03:23.860 --> 01:03:26.820
But also, don't forget that you can also just sling it


01:03:26.820 --> 01:03:30.500
into our free hosting, especially


01:03:30.500 --> 01:03:31.900
if you're just getting started.


01:03:31.900 --> 01:03:35.740
>>Luis: Yeah, excellent, excellent.


01:03:35.740 --> 01:03:38.740
Roadmap, let's close it out with roadmap.


01:03:38.740 --> 01:03:42.220
>>Yeah, so in the upcoming release,


01:03:42.220 --> 01:03:46.700
we have been focused a lot on UI components.


01:03:46.700 --> 01:03:48.980
And that's something that we're going to continue


01:03:48.980 --> 01:03:51.940
to focus on for a while.


01:03:51.940 --> 01:03:55.820
I think we definitely want to make


01:03:55.820 --> 01:04:01.340
the more dashboard-y type applications very easy to write.


01:04:01.340 --> 01:04:07.940
And we also are wanting to beef up on the output side


01:04:07.940 --> 01:04:09.380
some of our widgets.


01:04:09.380 --> 01:04:11.500
So we don't have a great table widget right now.


01:04:11.500 --> 01:04:13.180
It just kind of takes a Pandas table


01:04:13.180 --> 01:04:17.540
and renders it to HTML using Pandas Styler.


01:04:17.540 --> 01:04:25.880
But we want to have a fast scalable virtual grid,


01:04:25.880 --> 01:04:27.380
basically.


01:04:27.380 --> 01:04:33.820
And also for more interactive type outputs like that,


01:04:33.820 --> 01:04:36.540
I should mention that we support IPy widgets natively.


01:04:36.540 --> 01:04:39.820
So most IPy widgets will just drop right in,


01:04:39.820 --> 01:04:42.220
including Plotly and PyDeck.


01:04:42.220 --> 01:04:46.700
And well, most of them work just fine.


01:04:46.700 --> 01:04:50.780
And we'll be doing more to make some of those


01:04:50.780 --> 01:04:52.380
feel a little bit more native.


01:04:52.380 --> 01:04:54.540
And the IPy widget stuff works great.


01:04:54.540 --> 01:04:56.980
But I think we also want to make it


01:04:56.980 --> 01:04:59.060
feel a little bit more functional in some cases


01:04:59.060 --> 01:05:02.340
than object-oriented.


01:05:02.340 --> 01:05:05.380
Yeah, and we have a lot of examples to write,


01:05:05.380 --> 01:05:07.060
a lot of documentation to write.


01:05:07.060 --> 01:05:10.100
And there are also quite a few features


01:05:10.100 --> 01:05:14.100
to port over from Shiny for R. And the last thing I'll say


01:05:14.100 --> 01:05:17.340
is that automated testing is something


01:05:17.340 --> 01:05:20.860
that we are working on as well, making it easier for you


01:05:20.860 --> 01:05:24.980
to write automated tests for your Shiny for Python apps.


01:05:24.980 --> 01:05:26.860
It's an approach that's based on Playwright


01:05:26.860 --> 01:05:29.340
that we use internally right now,


01:05:29.340 --> 01:05:32.380
but we're gonna have helper classes and functions


01:05:32.380 --> 01:05:36.940
to make it a little less boilerplatey


01:05:36.940 --> 01:05:41.180
to write these kinds of tests for Shiny for Python apps.


01:05:41.180 --> 01:05:43.060
- Nice, Playwright's really cool.


01:05:43.060 --> 01:05:47.180
- Yeah, yeah, very, very, yeah, very, very cool.


01:05:47.180 --> 01:05:50.500
- Like Selenium, but more Pythonic, so.


01:05:50.500 --> 01:05:51.340
>> Yeah.


01:05:51.340 --> 01:05:51.900
>> Yeah.


01:05:51.900 --> 01:05:53.580
>> Well, it's a cool roadmap.


01:05:53.580 --> 01:05:55.460
People want-- if they've got ideas,


01:05:55.460 --> 01:05:57.220
they want to reach out to you.


01:05:57.220 --> 01:06:00.020
Is GitHub an option?


01:06:00.020 --> 01:06:00.980
Do they open an issue?


01:06:00.980 --> 01:06:01.980
Do they email you?


01:06:01.980 --> 01:06:03.260
How do they reach you?


01:06:03.260 --> 01:06:05.340
>> Yeah, so we have a--


01:06:05.340 --> 01:06:08.660
GitHub issue is always appreciated.


01:06:08.660 --> 01:06:12.660
And we will absolutely read those and engage.


01:06:12.660 --> 01:06:17.220
We also have a Discord for things that are a little more--


01:06:17.220 --> 01:06:21.060
if you want a little bit more of a back and forth.


01:06:21.060 --> 01:06:22.980
Or do you just want to meet us?


01:06:22.980 --> 01:06:26.300
Do you just want to talk about any of the design decisions


01:06:26.300 --> 01:06:30.900
we've made or how we might be different than XYZ framework?


01:06:30.900 --> 01:06:33.420
We're happy to talk to anyone and everyone.


01:06:33.420 --> 01:06:34.820
And I think to get to the Discord


01:06:34.820 --> 01:06:38.900
is on our GitHub home page, I believe.


01:06:38.900 --> 01:06:40.180
Excellent.


01:06:40.180 --> 01:06:41.900
Let's see if I can find a Discord.


01:06:41.900 --> 01:06:42.660
There you have it.


01:06:42.660 --> 01:06:44.500
Join us on Discord right on the home page


01:06:44.500 --> 01:06:46.540
and the readme of the GitHub.


01:06:46.540 --> 01:06:47.620
- Yeah.


01:06:47.620 --> 01:06:49.220
- Awesome.


01:06:49.220 --> 01:06:51.460
All right, Joe, thanks for being here.


01:06:51.460 --> 01:06:52.300
- Thanks for creating this. - Thank you.


01:06:52.300 --> 01:06:53.120
- This is cool.


01:06:53.120 --> 01:06:57.020
I think it's a nice contribution and really,


01:06:57.020 --> 01:06:57.980
like I said, it's a cool bridge


01:06:57.980 --> 01:07:00.660
between the R and Python communities.


01:07:00.660 --> 01:07:01.680
- Oh, thank you.


01:07:01.680 --> 01:07:03.660
If you don't mind me saying so,


01:07:03.660 --> 01:07:05.840
I really enjoy your podcast


01:07:05.840 --> 01:07:09.620
and I think that you're quite good at this


01:07:09.620 --> 01:07:11.860
and I just really appreciate all the conversations


01:07:11.860 --> 01:07:13.040
that you've had.


01:07:13.040 --> 01:07:16.040
You seem like just a really generous interviewer,


01:07:16.040 --> 01:07:22.000
and you do a really great job of helping people really


01:07:22.000 --> 01:07:24.560
feel three-dimensional, even when we're talking


01:07:24.560 --> 01:07:25.880
about very technical stuff.


01:07:25.880 --> 01:07:26.960
So I appreciate that.


01:07:26.960 --> 01:07:28.800
>>Luis: I really appreciate that.


01:07:28.800 --> 01:07:29.560
That's super kind.


01:07:29.560 --> 01:07:30.640
Thank you for saying that.


01:07:30.640 --> 01:07:32.160
And thank you for being on the show.


01:07:32.160 --> 01:07:32.680
So--


01:07:32.680 --> 01:07:33.680
>>Tom: Yeah, my pleasure.


01:07:33.680 --> 01:07:35.720
>>Luis: We'll put all the links in the show notes


01:07:35.720 --> 01:07:36.560
for all these things.


01:07:36.560 --> 01:07:37.880
People can check them out there.


01:07:37.880 --> 01:07:39.600
And yeah, see you next time.


01:07:39.600 --> 01:07:41.800
>>Tom: All right, thanks so much.


01:07:41.800 --> 01:07:51.800
[BLANK_AUDIO]

