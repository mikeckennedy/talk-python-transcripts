WEBVTT

00:00:00.001 --> 00:00:04.160
Peter, welcome back to Talk Python to Me.

00:00:04.160 --> 00:00:05.560
Awesome to have you here.

00:00:05.560 --> 00:00:10.880
Hi Michael, and my fellow Python developers.

00:00:10.880 --> 00:00:13.600
Yeah, it's real good to have you here.

00:00:13.600 --> 00:00:16.560
I know that there was a lot of excitement about Flet.

00:00:16.560 --> 00:00:21.320
In fact, I got a message just a couple of weeks ago from somebody saying,

00:00:21.320 --> 00:00:23.880
"Is Flet what you used to write your mobile apps?"

00:00:23.880 --> 00:00:27.120
And I'm like, "No, because that was a while ago."

00:00:27.120 --> 00:00:32.360
And I kind of wish that was an option, but it wasn't an option for us at the time.

00:00:32.360 --> 00:00:36.480
Anyway, I think Flutter is going strong.

00:00:36.480 --> 00:00:39.240
I think there's a lot of excitement around it.

00:00:39.240 --> 00:00:45.280
And certainly, there's an excitement for building mobile applications in Python.

00:00:45.280 --> 00:00:47.840
Sure, yeah.

00:00:47.840 --> 00:00:51.560
It's, yeah, Flutter is getting stronger and stronger.

00:00:51.560 --> 00:00:58.920
You know, like recently I saw there was an attempt to fork Flutter, you know?

00:00:58.920 --> 00:01:05.800
Because like there was a feeling in the community that it's not moving anywhere, you know?

00:01:05.800 --> 00:01:08.800
But I don't believe that.

00:01:08.800 --> 00:01:16.560
Even that guy mentioned that there are like 50 developers working on Flutter right now at Google.

00:01:16.560 --> 00:01:22.800
So yeah, Flutter is getting better and better and their release cycle is pretty awesome, you know?

00:01:22.800 --> 00:01:23.800
Yeah.

00:01:23.800 --> 00:01:25.920
It's really hard to catch up.

00:01:25.920 --> 00:01:26.920
I know.

00:01:26.920 --> 00:01:28.160
That can actually be a problem.

00:01:28.160 --> 00:01:32.160
I just updated Flutter on my Mac Mini.

00:01:32.160 --> 00:01:36.960
And I had out of date CocoaPods and Ruby.

00:01:36.960 --> 00:01:39.520
And there's a whole tool chain that people need to know about.

00:01:39.520 --> 00:01:41.560
Maybe we can talk a little bit about the tool chain.

00:01:41.560 --> 00:01:46.160
But yeah, you're constantly chasing versions and releases and updates.

00:01:46.160 --> 00:01:49.440
And then you've got Android Studio versions.

00:01:49.440 --> 00:01:51.600
You've got Xcode.

00:01:51.600 --> 00:01:53.120
There's a lot there.

00:01:53.120 --> 00:01:54.160
Yeah.

00:01:54.160 --> 00:01:54.720
Yeah.

00:01:54.720 --> 00:02:00.800
You know, we recently started using Flutter version manager, FEM.

00:02:00.800 --> 00:02:02.160
And it's pretty good.

00:02:02.160 --> 00:02:05.200
Yeah, because they're updating so fast, you know?

00:02:05.200 --> 00:02:07.520
It's really hard to catch up.

00:02:07.520 --> 00:02:09.120
Yeah, it sure is.

00:02:09.120 --> 00:02:10.160
All right.

00:02:10.160 --> 00:02:12.080
We'll talk about that in just a second.

00:02:12.080 --> 00:02:13.840
But maybe a quick introduction.

00:02:13.840 --> 00:02:16.160
It has been.

00:02:16.160 --> 00:02:21.280
I guess it's worth giving a shout out back in summer 2022.

00:02:21.280 --> 00:02:30.000
You were on the show when Flutter first came out to tell everyone about Flutter and how it's

00:02:30.000 --> 00:02:33.040
basically Flutter plus Python for UI.

00:02:33.040 --> 00:02:34.080
But it's been a while.

00:02:34.080 --> 00:02:39.680
So tell people quickly who you are and we can get into the project.

00:02:39.680 --> 00:02:41.280
Sure.

00:02:41.280 --> 00:02:49.440
My name is Theodore Fitzner and I'm the founder and developer of Flutter framework.

00:02:49.440 --> 00:02:55.120
Like Flutter for Python for Flutter.

00:02:55.600 --> 00:02:57.920
Flutter and Flutter.

00:02:57.920 --> 00:03:02.240
Yeah, it's been two and a half years since we released the first version.

00:03:02.240 --> 00:03:07.600
It's not like the first version, but the first release of web.

00:03:07.600 --> 00:03:14.480
And since that time we gained really great traction.

00:03:15.840 --> 00:03:27.520
to my mind, we got 12,000 stars on GitHub, 70 contributors, 5K members on Discord channel.

00:03:30.160 --> 00:03:32.480
I found the statistics for pypy Pi.

00:03:32.480 --> 00:03:39.280
It's like almost 3 million downloads from pypy or from web package.

00:03:39.280 --> 00:03:40.960
So it's pretty great.

00:03:40.960 --> 00:03:47.440
It's a great community, great people, a lot of feedback, a lot of issues.

00:03:48.560 --> 00:03:49.600
So it's pretty nice.

00:03:49.600 --> 00:03:52.480
So yeah.

00:03:52.480 --> 00:03:55.680
Yeah, that's awesome.

00:03:55.680 --> 00:03:58.080
And it definitely seems like it's going strong.

00:03:58.080 --> 00:04:08.000
I do think maybe it's worth actually talking a bit about what Flutter is before we dive into Python for Flutter with Flutter, right?

00:04:08.000 --> 00:04:09.120
Mm-hmm.

00:04:09.120 --> 00:04:14.080
Give people a quick sense of what is this Flutter thing that we're talking about.

00:04:14.080 --> 00:04:14.480
Sure.

00:04:14.480 --> 00:04:14.800
Yeah.

00:04:14.800 --> 00:04:15.280
Yeah.

00:04:15.280 --> 00:04:19.760
So Flutter is a cross-platform framework.

00:04:19.760 --> 00:04:27.360
It works for web, iOS, Android, and all desktop platforms.

00:04:27.360 --> 00:04:35.840
It allows you to write nice apps, really nice apps with great UI in doc language.

00:04:36.480 --> 00:04:39.040
So you have to learn a new language.

00:04:39.040 --> 00:04:44.000
And Flutter is a framework.

00:04:44.000 --> 00:04:47.600
So it's like, it's not just UI, it's application framework.

00:04:47.600 --> 00:04:55.920
It has all the things to build the app and publish it.

00:04:55.920 --> 00:05:03.120
Yeah, there's the language, which is Dart, not Flutter.

00:05:03.120 --> 00:05:07.920
But then Flutter has all the UI widgets and the mechanisms.

00:05:07.920 --> 00:05:22.160
But it also is a whole series of build tools that will take that and create things that you can upload to the mobile app stores, like Apple's App Store, or Google Play, or other places, right?

00:05:22.160 --> 00:05:23.120
Like desktop apps.

00:05:23.120 --> 00:05:23.680
Yeah.

00:05:23.680 --> 00:05:27.360
So there's a bunch of layers to what Flutter really is, I think.

00:05:28.480 --> 00:05:28.800
Yeah.

00:05:28.800 --> 00:05:37.120
And also the interesting part about Flutter is that it has like a painted UI.

00:05:37.120 --> 00:05:44.720
So it started from the Sphere Engine and now they have their own engine impeller.

00:05:45.120 --> 00:05:49.520
So the UI is basically painted on the canvas.

00:05:49.520 --> 00:05:54.800
So it looks similar everywhere on every device.

00:05:54.800 --> 00:06:00.240
Like some frameworks, like for example, React Native, they use native controls.

00:06:01.680 --> 00:06:02.960
Like in loop.

00:06:02.960 --> 00:06:10.320
Like, but Flutter, it looks similar on every device.

00:06:10.320 --> 00:06:13.360
So this is the nice thing.

00:06:13.360 --> 00:06:19.840
The thing that's nice, you know, it's cool that it runs everywhere, but sometimes that can fall short.

00:06:20.560 --> 00:06:23.680
The biggest example of this for me is Java applications.

00:06:23.680 --> 00:06:32.320
When they have their own file browsing dialogue, you're like, oh, this is not, this is clearly not a native sort of thing going on here.

00:06:32.320 --> 00:06:34.800
You know, on a desktop situation.

00:06:34.800 --> 00:06:37.840
They don't look like Windows dialogues.

00:06:37.840 --> 00:06:39.440
They don't look like macOS dialogues.

00:06:39.440 --> 00:06:40.720
They just look like Java dialogues.

00:06:40.720 --> 00:06:45.600
But, so that can be a problem or limitation.

00:06:46.480 --> 00:06:50.880
But Flutter tries to look like the native controls.

00:06:50.880 --> 00:06:51.680
Right?

00:06:51.680 --> 00:06:54.560
And there's, there's the, what do they call them?

00:06:54.560 --> 00:07:02.720
The Cupertino widgets and the material design widgets that, so it tries to adapt to the platforms it's on.

00:07:02.720 --> 00:07:04.080
Yeah.

00:07:04.080 --> 00:07:06.400
This one is called adaptive.

00:07:06.400 --> 00:07:06.640
Yeah.

00:07:06.640 --> 00:07:11.520
So yeah, it's, it's like this material design is built in.

00:07:11.520 --> 00:07:14.640
There is Cupertino controls.

00:07:14.640 --> 00:07:17.200
Also, I, I thought there are,

00:07:17.200 --> 00:07:23.680
fake body packages for micro S and, windows like, doing design.

00:07:23.680 --> 00:07:31.520
By the way about dialogue, you know, if, like, this, it's called file picker and it,

00:07:31.520 --> 00:07:33.680
it looks different for all platforms.

00:07:33.680 --> 00:07:37.360
So it's not always, drawn like the UI.

00:07:37.920 --> 00:07:44.320
Uh, you can write like a native package, like using the, the underlying, operating system API.

00:07:44.320 --> 00:07:50.560
So the, the dialogue looks, pretty standard on macOS or windows.

00:07:50.560 --> 00:07:52.960
So, yeah, it's not always so bad.

00:07:52.960 --> 00:07:54.000
Yeah.

00:07:54.000 --> 00:07:55.440
Yeah, no, it's, it's good.

00:07:56.560 --> 00:08:04.480
It is for building apps all over the place, flutter, but I would say it's, it's real traction

00:08:04.480 --> 00:08:06.000
seems to be in the mobile app space.

00:08:06.000 --> 00:08:06.480
Right.

00:08:06.480 --> 00:08:07.040
What do you think?

00:08:07.040 --> 00:08:11.120
Primarily iOS and Android.

00:08:11.120 --> 00:08:12.320
Yeah.

00:08:12.320 --> 00:08:20.720
Uh, someone, someone recently, asked me about like, why, why not to react, react native.

00:08:20.720 --> 00:08:23.280
Uh, so why you chose.

00:08:23.280 --> 00:08:29.200
And I went to Google, like, you know, like, typing like flutter DS, react native.

00:08:29.200 --> 00:08:37.760
And, interesting, it became more popular this year, 2024.

00:08:38.320 --> 00:08:45.360
Uh, so we, it, what it's a little bit ahead of react native, flutter in this year.

00:08:45.360 --> 00:08:46.240
So, wow.

00:08:46.240 --> 00:08:46.720
Yeah.

00:08:46.720 --> 00:08:46.960
Yeah.

00:08:46.960 --> 00:08:47.280
Yeah.

00:08:47.280 --> 00:08:53.680
So it's, it's, it's according to, step workflow question area, something like that.

00:08:53.680 --> 00:09:03.600
So, so yeah, it is, it's gaining popularity and I would say yes, flutter is more, is more,

00:09:03.600 --> 00:09:10.080
mobile fast framework despite they have, awesome support for desktop platforms or where,

00:09:10.080 --> 00:09:13.360
um, it's still mobile first.

00:09:13.360 --> 00:09:19.360
And, when we talked about water, we, we should probably talk first about mobile devices.

00:09:19.360 --> 00:09:19.760
Yeah.

00:09:19.760 --> 00:09:23.760
And, these benefits it brings to mobile development.

00:09:23.760 --> 00:09:24.320
That's right.

00:09:24.320 --> 00:09:30.240
Uh, yeah.

00:09:30.240 --> 00:09:32.400
Yeah.

00:09:32.400 --> 00:09:33.280
It's, it's pretty interesting.

00:09:33.280 --> 00:09:35.040
I just looked on stack overflow trends.

00:09:35.040 --> 00:09:36.720
Let's see if I can find it.

00:09:36.720 --> 00:09:38.960
And yeah, look at that.

00:09:38.960 --> 00:09:43.840
The flutter is quite, quite a bit higher than react native.

00:09:43.840 --> 00:09:45.760
More, more than I expected.

00:09:47.760 --> 00:09:48.000
Yeah.

00:09:48.000 --> 00:09:49.120
Okay.

00:09:49.120 --> 00:09:53.120
So I'll put a link to that in the show notes for the stack overflow trends.

00:09:53.120 --> 00:09:53.920
Yeah.

00:09:53.920 --> 00:09:54.080
Yeah.

00:09:54.080 --> 00:09:54.960
Still.

00:09:54.960 --> 00:09:57.520
Uh, what are the reasons behind that?

00:09:57.520 --> 00:10:08.000
You know, it's, maybe, maybe it's, it's ecosystem maybe because it's pretty easy to

00:10:08.000 --> 00:10:17.200
find, an extension, to find like some nice package on pub.dev, you know, maybe it's,

00:10:17.200 --> 00:10:22.480
uh, because it looks nice on both iOS and Android and it looks similar.

00:10:22.480 --> 00:10:29.120
Maybe, maybe because, you know, that itself, I know, people, people tend to criticize

00:10:29.120 --> 00:10:36.320
dark, but I have some experience writing in JavaScript, TypeScript, and that I can say that

00:10:36.320 --> 00:10:39.280
it was really nice learning dark.

00:10:39.280 --> 00:10:42.320
And it's so it's a, it's a great language.

00:10:42.320 --> 00:10:49.600
And honestly, I know it's unpopular, but I feel it's kind of like better, you know, than

00:10:49.600 --> 00:10:50.480
JavaScript too.

00:10:50.480 --> 00:10:52.160
It's just my opinion.

00:10:52.160 --> 00:10:57.120
So once you learn it, you can do everything.

00:10:57.120 --> 00:10:57.920
It's pretty nice.

00:10:57.920 --> 00:10:59.840
Maybe because of that.

00:10:59.840 --> 00:11:00.720
Yeah.

00:11:00.720 --> 00:11:00.720
Yeah.

00:11:00.720 --> 00:11:00.960
Yeah.

00:11:00.960 --> 00:11:02.000
Perhaps, perhaps.

00:11:02.000 --> 00:11:06.720
And before we move off Flutter, just real quick, I want to give a quick shout out to

00:11:06.720 --> 00:11:08.240
Lauren, the developer I worked with.

00:11:08.240 --> 00:11:14.400
He and I built the Talk Python courses apps in Flutter, which is why I have

00:11:14.400 --> 00:11:18.000
more than just like reading the docs experience in it.

00:11:18.000 --> 00:11:21.040
And it, those, those apps are going strong today.

00:11:21.040 --> 00:11:21.680
They're really great.

00:11:21.680 --> 00:11:26.000
Although I'm about to release a new version because you never stop releasing new versions.

00:11:26.000 --> 00:11:31.520
Even if you think you're done, something changes behind the scenes with iOS or Android.

00:11:31.520 --> 00:11:32.320
This time it's Android.

00:11:32.320 --> 00:11:32.720
Oh yeah.

00:11:32.720 --> 00:11:33.600
Yeah.

00:11:33.600 --> 00:11:37.520
Like, oh, that package that used to do this thing, it doesn't do it anymore.

00:11:37.520 --> 00:11:38.320
Like, oh no.

00:11:38.320 --> 00:11:38.640
Okay.

00:11:38.640 --> 00:11:39.120
Yeah.

00:11:39.120 --> 00:11:39.520
Yeah.

00:11:39.520 --> 00:11:40.320
Okay.

00:11:40.320 --> 00:11:41.360
So that's the foundation.

00:11:41.360 --> 00:11:42.320
That's Flutter.

00:11:42.320 --> 00:11:44.800
Flat.

00:11:44.800 --> 00:11:45.760
Tell us about flat.

00:11:45.760 --> 00:11:49.600
I mean, you talked about the downloads, but like, where does it fit in this Flutter ecosystem?

00:11:50.880 --> 00:12:02.000
So, well, it's not a flat is, is a, is a, a, a, a, a native framework.

00:12:02.000 --> 00:12:10.320
It's not just, as you can think, it's not just a translator to, from Python to Dart.

00:12:10.320 --> 00:12:20.080
It's not just bindings for Flutter widgets, like PyQt, PySight,

00:12:20.080 --> 00:12:30.640
for example, but it's, it's a standalone framework that uses Flutter for, for each UI.

00:12:30.640 --> 00:12:33.040
So flat is an application framework.

00:12:33.040 --> 00:12:38.080
It's not just UI and it uses Flutter to build its UI.

00:12:38.080 --> 00:12:38.960
Yeah.

00:12:38.960 --> 00:12:38.960
Yeah.

00:12:38.960 --> 00:12:40.080
I see.

00:12:40.080 --> 00:12:53.840
So people should think of it more as an independent UI and application framework for Python, not so much as a extension of Flutter into the Python world.

00:12:53.840 --> 00:12:55.760
Is that maybe the way to think of it?

00:12:55.760 --> 00:12:56.560
Right.

00:12:56.560 --> 00:12:57.120
Right.

00:12:57.120 --> 00:13:06.080
We're still, we're still trying to go away from this, label, you know, it's, it's kind of, but it was really nice.

00:13:06.080 --> 00:13:06.640
Like, right.

00:13:06.640 --> 00:13:07.040
Like, right.

00:13:07.040 --> 00:13:11.280
Flutter, Epson, Python, it, it, it, it works pretty good.

00:13:11.280 --> 00:13:18.240
Like, in, in terms of, CEO, for example, but, but, but it's not true.

00:13:18.240 --> 00:13:35.120
Like it's, it's, it's, it's, it's a framework that uses, we could, we could like, I, I, I mean, potentially we could replace it with something else like this backend, you know, with like, compose or, you know, react native, but no, it's fine.

00:13:35.120 --> 00:13:38.720
And, it's really, it's really great.

00:13:38.720 --> 00:13:48.160
We, we, we, we, we have our own controls and it's not always, one-to-one maybe, maybe, but it's,

00:13:48.160 --> 00:13:57.840
it's like, maybe or flat controls, they are built out of like multiple flutter widgets.

00:13:57.840 --> 00:14:01.760
So we combine multiple flutter widgets into controls.

00:14:01.760 --> 00:14:16.800
Uh, yeah, because sometimes if you, if you have some flutter experience, sometimes you can notice that it's, getting really, DUI getting really,

00:14:18.080 --> 00:14:31.760
complex or like, you know, like, like a lot of, controls like wrapped into, like, widgets right into other widgets.

00:14:31.760 --> 00:14:36.400
Like, for example, if you want to center something, there is a center widget.

00:14:36.880 --> 00:14:40.880
If you want to limit the size, the resize box.

00:14:40.880 --> 00:14:47.280
So flat combines many widgets into more like controls.

00:14:47.280 --> 00:14:48.960
And, those are properties.

00:14:48.960 --> 00:14:57.920
So it's like, it's, it's flutter in, serve to fighting developers in by tonic way.

00:14:58.880 --> 00:14:59.440
I would see.

00:14:59.440 --> 00:14:59.760
Okay.

00:14:59.760 --> 00:15:00.400
Nice.

00:15:00.400 --> 00:15:06.400
And on your, if people want to browse these controls widgets, what do you want to call them?

00:15:06.400 --> 00:15:10.880
There's a whole controls section in your docs.

00:15:11.840 --> 00:15:15.440
And I'll, I'll link to the docs, but just on the left, it says controls and you go through there.

00:15:15.440 --> 00:15:21.120
There's layout controls, navigation controls, you know, app bar type things that you might expect from

00:15:21.120 --> 00:15:23.840
standard mobile apps.

00:15:23.840 --> 00:15:27.920
And of course, like I sort of pointed out, you got the Cupertino versions and you've got the,

00:15:27.920 --> 00:15:31.760
the non Cupertino material design versions.

00:15:31.760 --> 00:15:37.600
So people can have a look at that and just get a sense for all the controls, but there are many,

00:15:37.600 --> 00:15:39.280
how many controls do you know off the top of your head?

00:15:39.280 --> 00:15:41.760
Oh, it's like a hundred plus, I would say.

00:15:41.760 --> 00:15:44.160
Yeah.

00:15:44.160 --> 00:15:46.960
And some really nice ones, right?

00:15:46.960 --> 00:15:54.000
Like you've got a, you've got a web view, you've got maps, animations, charts, quite a bit.

00:15:54.000 --> 00:15:54.720
Yeah.

00:15:54.720 --> 00:16:00.480
Web view is, is not available for like for all platforms at the moment.

00:16:00.800 --> 00:16:05.520
Uh, it's mostly for mobile and, for my players, if I'm not mistaken.

00:16:05.520 --> 00:16:12.160
So, yeah, it's kind of like there is a platform limitation right now that, for Windows

00:16:12.160 --> 00:16:18.560
that, that doesn't allow to have a proper web view, on Windows platform, for example.

00:16:18.560 --> 00:16:19.440
Oh, yes.

00:16:19.440 --> 00:16:19.920
I remember that.

00:16:19.920 --> 00:16:20.640
That's yeah.

00:16:20.640 --> 00:16:21.040
Yeah.

00:16:21.040 --> 00:16:21.600
Yeah.

00:16:21.600 --> 00:16:22.320
What a hassle.

00:16:22.320 --> 00:16:28.240
But yeah, there is, you know, work going on.

00:16:28.240 --> 00:16:29.840
Yeah.

00:16:29.840 --> 00:16:37.440
So, you know, you were on the show before to talk about Flet and those were pretty early

00:16:37.440 --> 00:16:39.520
days then, right?

00:16:39.520 --> 00:16:39.600
Yeah.

00:16:39.600 --> 00:16:41.280
To over two years ago.

00:16:41.280 --> 00:16:44.640
A lot of you've been, you're going strong.

00:16:44.640 --> 00:16:48.800
Like you said, you talked about the downloads and the contributors and stars and all that.

00:16:48.800 --> 00:16:49.440
That's awesome.

00:16:50.160 --> 00:16:52.320
So, so you, what have you all been up to?

00:16:52.320 --> 00:16:55.200
What's where's this effort gone?

00:16:55.200 --> 00:16:56.640
Like what, what progress have you made?

00:16:57.760 --> 00:17:21.160
So, yeah, we started from really simple design. It was pre-built executable for every platform, mostly like for desktop platform, which is able to display all control we have.

00:17:21.160 --> 00:17:36.660
And that executable was and is part of a wheel, flat wheel. So if you do keep install flat, you install this executable with the Python API itself.

00:17:37.560 --> 00:17:51.220
But then we started getting more and more requests, like asking, like, how would I put all this beautiful stuff to a mobile device? Or how do I do a standalone app?

00:17:51.560 --> 00:18:01.160
And well, the answer is we should generate executable and Python should be part of it.

00:18:01.160 --> 00:18:10.260
Python, your program, set by the libraries you use for your program, all this stuff should be part of this executable.

00:18:10.560 --> 00:18:25.560
So we started, it's been a lot of work to produce standalone package for desktop, for web and for mobile.

00:18:25.560 --> 00:18:37.560
So, Flutter is a good start for that. So the question was Python itself and the third-party packages.

00:18:37.560 --> 00:18:52.560
So, we decided that, like, okay, Python, for desktop platform, it's pretty straightforward.

00:18:52.560 --> 00:19:07.560
You just take a regular, basically regular Python and bundle it into your executable or application bundle and that's it.

00:19:07.560 --> 00:19:10.560
So it's pretty straightforward.

00:19:10.560 --> 00:19:14.560
For mobile devices, there is a challenge.

00:19:14.560 --> 00:19:31.560
And we know that multiple projects, when are working on this problem, like the most popular Kyvi and Beware,

00:19:31.560 --> 00:19:41.560
those guys started back, started solving this problem back in 2010, maybe 2012, if I'm not mistaken.

00:19:41.560 --> 00:19:48.560
And they did a really great job and they still doing great, you know.

00:19:48.560 --> 00:19:50.560
So,

00:19:50.560 --> 00:19:56.560
Yeah, I know Beware has got a lot of recent support as well through the Anaconda team, which is really great.

00:19:56.560 --> 00:19:59.560
Yeah, yeah, yeah, sure. Absolutely. Yeah.

00:19:59.560 --> 00:20:02.560
So, we will get back to Beware.

00:20:02.560 --> 00:20:03.560
Yeah, like, okay.

00:20:03.560 --> 00:20:06.560
But, so we started from Kyvi.

00:20:06.560 --> 00:20:20.560
I don't know, at that point, like two years ago, I thought that I saw maybe that Kyvi is more popular and I decided to explore like this way,

00:20:20.560 --> 00:20:33.560
whether Kyvi could be used as a foundation for a plant or we can grab portions of Kyvi and make something different, you know.

00:20:33.560 --> 00:20:41.560
And, well, it was a good, it was a good for the start, obviously.

00:20:41.560 --> 00:20:42.560
Obviously.

00:20:42.560 --> 00:20:54.560
And, we managed to, to use Kyvi tooling, like Python for Android, Python for iOS, and their command line and their libraries and their recipes to compile runtime, Python runtime and third party modules and use them in

00:20:54.560 --> 00:21:12.560
So, I mean, there was, you know, there was, you know, there was, you know,

00:21:12.560 --> 00:21:19.560
And, well, you guys ended up moving off of it, right?

00:21:19.560 --> 00:21:20.560
Yes.

00:21:20.560 --> 00:21:41.560
So, recipes was great and it's still a great idea, but there are, there were limitations, you know, like, like, first of all, Kyvi recipes, some of those recipes, they're pretty outdated.

00:21:41.560 --> 00:22:05.560
So, I tried building a few recipes, so I forked Kyvi and tried building new recipes by myself and it wasn't, it wasn't easy task, you know, it's kind of, so recipes, like, it's, it's, it's basically Python code.

00:22:05.560 --> 00:22:14.560
And, there are a lot of, you know, it's, you should know about like a lot of debugging.

00:22:14.560 --> 00:22:26.560
So, I was, I was really struggling, trying to build new recipes and update existing recipes in, in, for Kyvi, you know.

00:22:26.560 --> 00:22:45.560
And also the biggest, the biggest issue with the, with the Kyvi, Kyvi's approach was, so you have to build all, all the Python runtime and all the modules, like packages by yourself.

00:22:45.560 --> 00:22:46.560
Yeah.

00:22:46.560 --> 00:22:47.560
All the time.

00:22:47.560 --> 00:22:50.560
Like, if the user, yeah, it's, it's kind of, it's kind of, it's kind of paid.

00:22:50.560 --> 00:23:06.560
So, you, you should, you should have Android SDK installed and all environment variables in place, you know, like, and, I mean, it could be a real struggle to build and it's, it takes time.

00:23:06.560 --> 00:23:27.560
Sometimes, like, if you, if you add NumPy Pandas to your app, as a dependencies, it could take like, like half an hour to build all the packages and fingers crossed, you know, like, whether it finishes, okay, you know, or you get some weird, pretty error.

00:23:27.560 --> 00:23:28.560
Yeah.

00:23:28.560 --> 00:23:29.560
So, it wasn't, it wasn't nice.

00:23:29.560 --> 00:23:30.560
No, it wasn't, it wasn't nice.

00:23:30.560 --> 00:23:42.560
I mean, it worked, this approach worked for simple things, you know, with the, where your app requires fewer Python packages.

00:23:42.560 --> 00:23:55.560
But if it's not something trivial, it's either no recipe or outdated recipe, or you have to build your own recipe, et cetera, et cetera.

00:23:55.560 --> 00:23:56.560
So, yeah.

00:23:56.560 --> 00:24:05.560
And the recipe is basically saying how to build some particular library or Python itself for Android or for iOS or something.

00:24:05.560 --> 00:24:06.560
Is that right?

00:24:06.560 --> 00:24:07.560
Yeah.

00:24:07.560 --> 00:24:08.560
Yeah.

00:24:08.560 --> 00:24:09.560
We can, we can dig, we can dig into that.

00:24:09.560 --> 00:24:10.560
Yeah.

00:24:10.560 --> 00:24:12.560
But it's kind of basically like settings.

00:24:12.560 --> 00:24:21.560
It's, it's a bunch of settings for compiler, for linker, and how to move resulting files, you know.

00:24:21.560 --> 00:24:22.560
Yeah.

00:24:22.560 --> 00:24:24.560
That, that doesn't sound that easy.

00:24:24.560 --> 00:24:25.560
Yeah.

00:24:25.560 --> 00:24:26.560
Oh, yeah, absolutely.

00:24:26.560 --> 00:24:27.560
Yeah.

00:24:27.560 --> 00:24:28.560
It's, it's C, C++.

00:24:28.560 --> 00:24:29.560
Yeah.

00:24:29.560 --> 00:24:33.560
I can, I can, I can talk about this later, you know.

00:24:33.560 --> 00:24:34.560
Yeah, yeah.

00:24:34.560 --> 00:24:39.560
No, it's probably, probably people get enough of an idea from it.

00:24:39.560 --> 00:24:45.560
Is this, I know that you were using or you published serious Python.

00:24:45.560 --> 00:24:47.560
Is this sort of your answer to that?

00:24:47.560 --> 00:24:48.560
Yeah.

00:24:48.560 --> 00:24:57.560
So as we, as we do open source and Kali and other projects are open source.

00:24:57.560 --> 00:25:02.560
I, I thought maybe it's a good idea to contribute something to open source, right?

00:25:02.560 --> 00:25:14.560
I mean, we can, we can do this as a, as a part of our application template, for example, and not dealing with this plugin, you know, but I thought maybe someone else would be interested in using Python with your Flutter app.

00:25:14.560 --> 00:25:33.560
So serious Python is, is really low level package that allows you to embed Python engine into your Flutter application.

00:25:33.560 --> 00:25:46.560
So, yeah, so, and the, I, I'm not sure if it's even popular, you know, but maybe someone can use it for some purposes.

00:25:46.560 --> 00:25:47.560
Yeah.

00:25:47.560 --> 00:25:48.560
Yeah.

00:25:48.560 --> 00:25:49.560
It's, it's nice.

00:25:49.560 --> 00:25:53.560
Do you do anything with Python build standalone?

00:25:53.560 --> 00:26:07.560
You know, UV is started making it really easy to install Python, all the different platforms of it by leveraging Python build standalone that was previously run by Greg now by Astral.

00:26:07.560 --> 00:26:08.560
Yes.

00:26:08.560 --> 00:26:10.560
Or, or do you do something else?

00:26:10.560 --> 00:26:11.560
Yeah.

00:26:11.560 --> 00:26:12.560
Like where you build, you build.

00:26:12.560 --> 00:26:17.560
So you're talking about this GitHub project building every version of fighting.

00:26:17.560 --> 00:26:18.560
Yeah.

00:26:18.560 --> 00:26:19.560
Yeah.

00:26:19.560 --> 00:26:20.560
Yeah.

00:26:20.560 --> 00:26:24.560
We use, we use this, this repository for desktop.

00:26:24.560 --> 00:26:25.560
Okay.

00:26:25.560 --> 00:26:36.560
So yeah, we use this repository for desktop as a, as a starting point and we don't want pre-built Python from that repo and we actually repackaged it.

00:26:36.560 --> 00:26:37.560
Nice.

00:26:37.560 --> 00:26:49.560
So for me, for mobile, now we use a different approach and I can talk about this for, for web, for web we use, Plyoday.

00:26:49.560 --> 00:26:50.560
Right.

00:26:50.560 --> 00:26:51.560
Yeah.

00:26:51.560 --> 00:27:02.560
Well, let's maybe talk for a little bit about the runtime side of things and we could talk about packaging after that.

00:27:02.560 --> 00:27:04.560
So, sure.

00:27:04.560 --> 00:27:06.560
Flutter goes into all different places.

00:27:06.560 --> 00:27:08.560
More than most platforms.

00:27:08.560 --> 00:27:09.560
You can build desktop apps.

00:27:09.560 --> 00:27:11.560
You can build note mobile apps.

00:27:11.560 --> 00:27:12.560
mobile apps.

00:27:12.560 --> 00:27:17.560
You can also build web apps, kind of a competitor to Angular or something like that.

00:27:17.560 --> 00:27:18.560
Right.

00:27:18.560 --> 00:27:30.560
And if you're going to have Python runtimes in these different locations, and that's kind of why I was asking about Python build standalone is, you know, there's all these variations of places that could be, which is quite tricky.

00:27:30.560 --> 00:27:31.560
Right.

00:27:31.560 --> 00:27:39.560
So the web version is, wasm WebAssembly based, right?

00:27:39.560 --> 00:27:40.560
Yep.

00:27:40.560 --> 00:27:41.560
Yep.

00:27:41.560 --> 00:27:42.560
Yep.

00:27:42.560 --> 00:27:43.560
Yep.

00:27:43.560 --> 00:27:58.520
Yes, right now, FlatWebEc could be deployed in two modes in two states, like client side and service side.

00:27:59.120 --> 00:28:18.920
So if it's deployed as a server-side app, obviously the Flutter part runs in the browser and Python runs in the server and it's standard Python with any module, you can use anything.

00:28:18.920 --> 00:28:28.760
And client side talks to server by WebSockets.

00:28:28.760 --> 00:28:39.760
So all UI changes are streamed via WebSockets to a client and all events go back to server-side.

00:28:40.760 --> 00:28:49.880
So this is one mode, it's called server-side, and another mode is client-side or static web-side.

00:28:49.880 --> 00:29:03.500
You can build, you can publish FlatApp as a static website and put it on Cloudflare or GitHub pages or whatever you like.

00:29:03.500 --> 00:29:04.480
Nice.

00:29:04.480 --> 00:29:08.120
Yeah, you put the WebAssembly files there and it just picks it up and goes, right?

00:29:08.120 --> 00:29:21.440
Yeah, it's Flutter itself and Python, FireDyne, which is WebAssembly, which is Python and WebAssembly.

00:29:21.440 --> 00:29:35.360
So we don't compile Flutter, FlatFlutter part into WebAssembly yet because we have a lot of dependencies

00:29:35.360 --> 00:29:49.800
and not all of them support Flutter, but it's definitely on our roadmap and whatever branch trying to produce Flutter build.

00:29:49.800 --> 00:29:57.920
So it would be really nice because the size would be much smaller, the size of Flutter web would be much slower.

00:29:57.920 --> 00:30:06.360
So it's probably, like right now it's 10 megabytes maybe, and it's going to be like 2 megabytes something.

00:30:06.360 --> 00:30:11.980
So it's going to be really nice when we do that.

00:30:11.980 --> 00:30:13.660
Yeah, that'd be great.

00:30:13.660 --> 00:30:21.600
And with the right amount of caching, the right style of caching, you know, it's not that big of a deal, right?

00:30:22.300 --> 00:30:22.900
Yeah, I know.

00:30:22.900 --> 00:30:27.940
And yeah, PyDyne is a pretty strong project.

00:30:27.940 --> 00:30:37.660
It has the biggest number of packages supported.

00:30:37.660 --> 00:30:41.500
So it's great.

00:30:41.700 --> 00:30:42.700
It's great.

00:30:42.700 --> 00:30:42.700
It's great.

00:30:42.700 --> 00:30:43.700
It's great.

00:30:43.700 --> 00:30:44.700
It's great.

00:30:44.700 --> 00:30:45.700
It's great.

00:30:45.700 --> 00:30:46.700
It's great.

00:30:46.700 --> 00:30:47.700
It's great.

00:30:47.700 --> 00:30:48.700
Yeah.

00:30:48.700 --> 00:31:01.700
You know, I believe that the Python core devs are also working on getting Python itself to be a sort of officially built for WebAssembly.

00:31:01.700 --> 00:31:05.700
I know Brett Cannon's done a ton of work for this as well.

00:31:05.700 --> 00:31:08.700
Does that help you guys in any way?

00:31:08.700 --> 00:31:09.700
Absolutely.

00:31:09.700 --> 00:31:10.700
Yeah.

00:31:10.700 --> 00:31:19.700
It's actually right now we use this built-in Python support.

00:31:19.700 --> 00:31:23.700
So we migrated from Kyivy to this approach.

00:31:23.700 --> 00:31:29.700
And it's thanks to Beware guys, Russell and Malcolm.

00:31:29.700 --> 00:31:32.700
So Russell is iOS, Malcolm is Android.

00:31:32.700 --> 00:31:43.700
So they did a great, a really great job putting like this iOS and Android support into Python project itself.

00:31:43.700 --> 00:31:57.700
And now they like actually they implemented this support for Python 3.13 in the backported to lower versions.

00:31:57.700 --> 00:31:58.700
So how nice.

00:31:58.700 --> 00:32:00.700
Yeah, absolutely.

00:32:00.700 --> 00:32:12.700
It's like when I when I first when I first first saw the proposal, you know, it's for iOS, first of all.

00:32:12.700 --> 00:32:14.700
I really like it.

00:32:14.700 --> 00:32:16.700
You know, it's really great.

00:32:16.700 --> 00:32:26.700
I mean, like the way producing binary libraries, you know, like for and and packaging them.

00:32:26.700 --> 00:32:34.700
It's really good because we can use dynamic libraries versus static libraries in Kyivy.

00:32:34.700 --> 00:32:40.700
Like in Kyivy everything like all these third party modules.

00:32:40.700 --> 00:32:46.700
You can file your machine every time they produce static libraries.

00:32:46.700 --> 00:32:48.700
Basically like dot A files for iOS.

00:32:48.700 --> 00:32:49.700
Okay.

00:32:49.700 --> 00:33:00.700
And and finally and they like the entire code base is like it's single executable at the end, you know, like everything like Numpy, like all this stuff is a single file.

00:33:00.700 --> 00:33:08.700
I mean, and you cannot reuse some of those libraries, you know, like when when you package them into iOS app.

00:33:08.700 --> 00:33:27.700
So yeah, when when I saw I really love the approach and I am the I understood, you know, that it's probably the way going forward, you know, and you see it's kind of like it's it's getting like a standard right now.

00:33:27.700 --> 00:33:33.700
So yeah, I mean, I think it's a standard right now, but I think it's a standard right now.

00:33:33.700 --> 00:33:35.700
So yeah, I think it's a standard right now.

00:33:35.700 --> 00:33:36.700
So yeah, I think it's a standard right now.

00:33:36.700 --> 00:33:37.700
So yeah, I think it's a standard right now.

00:33:37.700 --> 00:33:38.700
So yeah, I think it's a standard right now.

00:33:38.700 --> 00:33:39.700
So yeah, I think it's a standard right now.

00:33:39.700 --> 00:33:40.700
So yeah, I think it's a standard right now.

00:33:40.700 --> 00:33:41.700
So yeah, I think it's a standard right now.

00:33:41.700 --> 00:33:42.700
So yeah, I think it's a standard right now.

00:33:42.700 --> 00:33:43.700
So yeah, I think it's a standard right now.

00:33:43.700 --> 00:33:44.700
So yeah, I think it's a standard right now.

00:33:44.700 --> 00:33:45.700
So yeah, I think it's a standard right now.

00:33:45.700 --> 00:33:46.700
So yeah, I think it's a standard right now.

00:33:46.700 --> 00:33:47.700
So yeah, I think it's a standard right now.

00:33:47.700 --> 00:33:48.700
So yeah, I think it's a standard right now.

00:33:48.700 --> 00:33:50.700
So yeah, I think it's a standard right now.

00:33:50.700 --> 00:33:51.700
So yeah, I think it's a standard right now.

00:33:51.700 --> 00:33:52.700
So yeah, I think it's a standard right now.

00:33:52.700 --> 00:33:53.700
So yeah, I think it's a standard right now.

00:33:53.700 --> 00:33:54.700
So yeah, I think it's a standard right now.

00:33:54.700 --> 00:33:55.700
So yeah, I think it's a standard right now.

00:33:55.700 --> 00:33:56.700
So yeah, I think it's a standard right now.

00:33:56.700 --> 00:33:57.700
So yeah, I think it's a standard right now.

00:33:57.700 --> 00:33:58.700
So yeah, I think it's a standard right now.

00:33:58.700 --> 00:33:59.700
So yeah, I think it's a standard right now.

00:33:59.700 --> 00:34:00.700
So yeah, I think it's a standard right now.

00:34:00.700 --> 00:34:01.700
So yeah, I think it's a standard right now.

00:34:01.700 --> 00:34:02.700
So yeah, I think it's a standard right now.

00:34:02.700 --> 00:34:03.700
So yeah, I think it's a standard right now.

00:34:03.700 --> 00:34:04.700
So yeah, I think it's a standard right now.

00:34:04.700 --> 00:34:05.700
So yeah, I think it's a standard right now.

00:34:05.700 --> 00:34:06.700
So yeah, I think it's a standard right now.

00:34:06.700 --> 00:34:07.700
So yeah, I think it's a standard right now.

00:34:07.700 --> 00:34:08.700
So yeah, I think it's a standard right now.

00:34:08.700 --> 00:34:09.700
So yeah, I think it's a standard right now.

00:34:09.700 --> 00:34:10.700
So yeah, I think it's a standard right now.

00:34:10.700 --> 00:34:11.700
So yeah, I think it's a standard right now.

00:34:11.700 --> 00:34:12.700
So yeah, I think it's a standard right now.

00:34:12.700 --> 00:34:13.700
So yeah, I think it's a standard right now.

00:34:13.700 --> 00:34:14.700
So yeah, I think it's a standard right now.

00:34:14.700 --> 00:34:15.700
So yeah, I think it's a standard right now.

00:34:15.700 --> 00:34:16.700
So yeah, I think it's a standard right now.

00:34:16.700 --> 00:34:17.700
So yeah, I think it's a standard right now.

00:34:17.700 --> 00:34:18.700
So yeah, I think it's a standard right now.

00:34:18.700 --> 00:34:19.700
So yeah, I think it's a standard right now.

00:34:19.700 --> 00:34:20.700
So yeah, I think it's a standard right now.

00:34:20.700 --> 00:34:21.700
So yeah, I think it's a standard right now.

00:34:21.700 --> 00:34:22.700
So yeah, I think it's a standard right now.

00:34:22.700 --> 00:34:23.700
So yeah, I think it's a standard right now.

00:34:23.700 --> 00:34:24.700
So yeah, I think it's a standard right now.

00:34:24.700 --> 00:34:25.700
So yeah, I think it's a standard right now.

00:34:25.700 --> 00:34:26.700
So yeah, I think it's a standard right now.

00:34:26.700 --> 00:34:27.700
So yeah, I think it's a standard right now.

00:34:27.700 --> 00:34:28.700
So yeah, I think it's a standard right now.

00:34:28.700 --> 00:34:29.700
So yeah, I think it's a standard right now.

00:34:29.700 --> 00:34:30.700
So yeah, I think it's a standard right now.

00:34:30.700 --> 00:34:31.700
Excellent.

00:34:31.700 --> 00:34:39.700
And the, the NumPy folks, for example, as you said, they could use their expertise to get NumPy,

00:34:39.700 --> 00:34:47.700
this NumPy C code and Python code to build for WebAssembly and just put that in as automation

00:34:47.700 --> 00:34:51.700
and GitHub and everyone else in the world doesn't have to solve it over and over, right?

00:34:51.700 --> 00:35:02.700
Yeah, I think it's, I mean, the Python 3.13 Python itself is, is, is pretty French, you know,

00:35:02.700 --> 00:35:10.700
I think it's a, many packages are still on, like, don't support it, right?

00:35:10.700 --> 00:35:17.700
So I believe like, in, in, at some point, those projects will start doing their, will start

00:35:17.700 --> 00:35:24.700
producing their own iOS and Android wheels and publishing them to pypy once it's supported.

00:35:24.700 --> 00:35:29.700
So yeah, and of course, they can reuse our expertise.

00:35:29.700 --> 00:35:30.700
Yeah.

00:35:30.700 --> 00:35:31.700
Yeah.

00:35:31.700 --> 00:35:32.700
Yeah.

00:35:32.700 --> 00:35:38.700
You're, you're making me dream, dream big, you know, like wheels for iOS and wheels for Android.

00:35:38.700 --> 00:35:45.700
Could you, could you imagine a day where it's as easy to just get libraries for the mobile

00:35:45.700 --> 00:35:48.700
platforms as it is for Mac or Linux or whatever?

00:35:48.700 --> 00:35:54.700
Yeah, it's, it's still, you know, I can tell it's still, not many people working in this

00:35:54.700 --> 00:35:55.700
area.

00:35:55.700 --> 00:36:07.700
And, what I can tell you, it's, like modern processors, modern CPUs in Android and iOS,

00:36:07.700 --> 00:36:11.700
uh, like Apple devices, they're pretty powerful, you know?

00:36:11.700 --> 00:36:17.700
Uh, I remember there were a lot of like, those times, like Twitter, Twitter, Twitter,

00:36:17.700 --> 00:36:26.700
2012, 2010, when, Kylie and, B-Ware started, there were a lot of issues trying

00:36:26.700 --> 00:36:31.700
to squeeze this desktop C code into a mobile processor.

00:36:31.700 --> 00:36:32.700
Yeah.

00:36:32.700 --> 00:36:34.700
Now it's much easier.

00:36:34.700 --> 00:36:39.700
Most of those packages could be compiled as is without any treats, without any,

00:36:39.700 --> 00:36:40.700
features, you know?

00:36:40.700 --> 00:36:41.700
Wow.

00:36:41.700 --> 00:36:43.700
So, yeah.

00:36:43.700 --> 00:36:46.700
So it's, it's pretty, it's pretty nice.

00:36:46.700 --> 00:36:52.700
Maybe again, in the future we will have this, as a standard thing, you know?

00:36:52.700 --> 00:36:53.700
Yeah.

00:36:53.700 --> 00:37:01.700
Last pycon or the, maybe the Python before started, I think it was a Salt Lake.

00:37:01.700 --> 00:37:02.700
Anyway, it doesn't really matter.

00:37:02.700 --> 00:37:09.700
Recently, Carol Willing at the PyCon US keynote talked about how mobile is such an important

00:37:09.700 --> 00:37:16.700
platform and, you know, there's people like you and Russell Keith McGee and the B-Ware team

00:37:16.700 --> 00:37:18.700
working on it.

00:37:18.700 --> 00:37:25.700
But I think it feels a little chicken and an egg to me, you know?

00:37:25.700 --> 00:37:31.700
If, if it was a little easier, I think a bunch of, there would be a huge bunch of people that

00:37:31.700 --> 00:37:36.700
jump into it, but there's, it's like, it takes projects like Flet and the B-Ware one to just

00:37:36.700 --> 00:37:37.700
kind of unlock it.

00:37:37.700 --> 00:37:45.700
And then I think once it gets unlocked, people are going to realize and just go for it, you know?

00:37:45.700 --> 00:37:46.700
Yeah.

00:37:46.700 --> 00:37:47.700
Yeah, absolutely.

00:37:47.700 --> 00:37:53.700
It's, it's, having, having Python on the mobile devices is, is pretty awesome.

00:37:53.700 --> 00:38:03.700
You know, it's like for Android, for example, it's, it's, it adds maybe like eight megabytes

00:38:03.700 --> 00:38:05.700
of size to your app.

00:38:05.700 --> 00:38:06.700
So it's not so large.

00:38:06.700 --> 00:38:08.700
You know, it makes sense.

00:38:08.700 --> 00:38:09.700
Python is a great language.

00:38:09.700 --> 00:38:14.700
It's, it's, it's great for, for beginners, you know, for scientists.

00:38:14.700 --> 00:38:24.700
So it's, it's, it's really, I don't know, like addictive, you know, like to write the apps

00:38:24.700 --> 00:38:27.700
for, for everything in Python.

00:38:27.700 --> 00:38:34.700
I, I become like, I, I've been using Python for three years already and, I still love

00:38:34.700 --> 00:38:35.700
it, you know?

00:38:35.700 --> 00:38:41.700
Like I write most of my, like, even like, scripts, you know, like in Python, like,

00:38:41.700 --> 00:38:44.700
so I, I'm looking back on.

00:38:44.700 --> 00:38:45.700
Yeah.

00:38:45.700 --> 00:38:48.700
I've worked in, yeah, I've worked in a lot of programming languages myself, static and dynamic

00:38:48.700 --> 00:38:49.700
ones.

00:38:49.700 --> 00:38:53.700
And yeah, it's Python is comfortable.

00:38:53.700 --> 00:38:54.700
It's nice.

00:38:54.700 --> 00:38:55.700
Yeah.

00:38:55.700 --> 00:38:56.700
All right.

00:38:56.700 --> 00:39:01.700
I want to talk about packaging and I know that's the area that you've been working on

00:39:01.700 --> 00:39:02.700
a lot as well.

00:39:02.700 --> 00:39:06.700
And as a segue, let's take a question from the audience.

00:39:06.700 --> 00:39:10.700
Alan out there asks, I'm someone taking a careful look at Flet.

00:39:10.700 --> 00:39:17.700
My question is, what is the process of getting a finished app reviewed by Apple or Google?

00:39:17.700 --> 00:39:24.700
I think, let me rephrase that into slightly different part.

00:39:24.700 --> 00:39:29.700
Part because the reviewed by Apple or Google, there's like a voodoo doll and you stick it

00:39:29.700 --> 00:39:33.700
with a few pins and then you like rub it with an oil and then they, they approve your app,

00:39:33.700 --> 00:39:34.700
right?

00:39:34.700 --> 00:39:35.700
Like that seems to be the process.

00:39:35.700 --> 00:39:36.700
It's been so hard.

00:39:36.700 --> 00:39:42.700
But yeah, I think the thing is, how do you get it built in a way that you can submit it

00:39:42.700 --> 00:39:43.700
to the app store?

00:39:43.700 --> 00:39:45.700
And then it's just down to, right?

00:39:45.700 --> 00:39:46.700
So what's the process?

00:39:46.700 --> 00:39:55.700
So this is one of those rough questions, you know, it's, it's good.

00:39:55.700 --> 00:39:59.700
And you should have a list of rough questions here.

00:39:59.700 --> 00:40:00.700
You're ready to answer.

00:40:00.700 --> 00:40:09.700
So right now we, you can build APK or AAB for Android.

00:40:09.700 --> 00:40:17.700
You can sign it, but you have to upload the file manually right now into-

00:40:17.700 --> 00:40:18.700
I see.

00:40:18.700 --> 00:40:20.700
So you have to sideload it basically at the moment.

00:40:20.700 --> 00:40:21.700
Yeah, yeah, yeah.

00:40:21.700 --> 00:40:30.700
So I mean, you produce, so flag build command allows you to build an AAB file, which is basically

00:40:30.700 --> 00:40:33.700
APK for multiple platforms signing.

00:40:33.700 --> 00:40:38.700
And then you upload it by yourself through the web interface of Google Play.

00:40:38.700 --> 00:40:39.700
Oh, let me go back then.

00:40:39.700 --> 00:40:41.700
Then that's not sideloading it.

00:40:41.700 --> 00:40:43.700
That's just not having it auto upload.

00:40:43.700 --> 00:40:44.700
Yeah.

00:40:44.700 --> 00:40:45.700
But yeah.

00:40:45.700 --> 00:40:46.700
Okay.

00:40:46.700 --> 00:40:47.700
That that's, that's encouraging.

00:40:47.700 --> 00:40:57.700
So for, for our, so we have our own flat app in both Google Play and App Store.

00:40:57.700 --> 00:41:01.700
It's for testing apps on mobile devices.

00:41:01.700 --> 00:41:10.700
It basically like the same flat client that connects to app through web circuits and the app itself

00:41:10.700 --> 00:41:12.700
is running on your machine.

00:41:12.700 --> 00:41:13.700
So yeah.

00:41:13.700 --> 00:41:20.700
And honestly, right now we publish it with, with fast lane.

00:41:20.700 --> 00:41:30.700
So there is a CI job that publishes both iOS and Android versions with fast lane.

00:41:30.700 --> 00:41:31.700
Fast lane.

00:41:31.700 --> 00:41:32.700
I'm not sure.

00:41:32.700 --> 00:41:39.700
Maybe we will, we will, we'll do the instructions how to use fast lane because it's great too.

00:41:39.700 --> 00:41:47.700
And it's, it's pretty easy to synchronize certificates, you know, for app store and publish your app and

00:41:47.700 --> 00:41:49.700
make that information for app.

00:41:49.700 --> 00:41:50.700
So yeah.

00:41:50.700 --> 00:41:50.700
So yeah.

00:41:50.700 --> 00:41:58.700
But right now you can, you can build IPA, you can build AAB, but you have to upload them manually.

00:41:58.700 --> 00:41:59.700
I think that's fine.

00:41:59.700 --> 00:42:00.700
Yeah.

00:42:00.700 --> 00:42:05.700
And then the review process starts, but that's the voodoo doll part where you get the voodoo doll

00:42:05.700 --> 00:42:08.700
out and you hit it with the, the, the needles.

00:42:08.700 --> 00:42:09.700
Yeah.

00:42:09.700 --> 00:42:10.700
Yeah.

00:42:10.700 --> 00:42:11.700
Yeah.

00:42:11.700 --> 00:42:15.700
But, but I can tell you people, people usually concerned about like, is it, whether is it allowed

00:42:15.700 --> 00:42:22.700
to have Python or like the, like stuff like that in your app.

00:42:22.700 --> 00:42:26.700
And would it be approved by Apple, by Google?

00:42:26.700 --> 00:42:29.700
And I can tell you, it works pretty well.

00:42:29.700 --> 00:42:32.700
We dock food our own stuff.

00:42:32.700 --> 00:42:35.700
So we build clip app using clap.

00:42:35.700 --> 00:42:41.700
So, the way it's packaged inside, it's getting approved.

00:42:41.700 --> 00:42:44.700
Um, there are some issues.

00:42:44.700 --> 00:42:46.700
I can tell you, there are some issues.

00:42:46.700 --> 00:42:57.700
Uh, for example, disable, we, we, we use to disable, X, X 86 devices right away.

00:42:57.700 --> 00:43:06.700
And, because, they're like Google play, mutual machines, they show just like a black screen,

00:43:06.700 --> 00:43:13.700
you know, like, and, like the market share for, for those devices pretty small right now.

00:43:13.700 --> 00:43:15.700
So we disabled that.

00:43:15.700 --> 00:43:22.700
So it took us the review, but it works, it works.

00:43:22.700 --> 00:43:23.700
Nice.

00:43:23.700 --> 00:43:24.700
Awesome.

00:43:24.700 --> 00:43:25.700
Okay.

00:43:25.700 --> 00:43:32.700
I want to talk through the, the publishing workflow that you all have with the new CLI tools you got,

00:43:32.700 --> 00:43:35.700
but let's just dive into one more thing real quick.

00:43:35.700 --> 00:43:43.700
So when I have my Python code running, let's just say iOS, I have my Python code running on an iPhone.

00:43:43.700 --> 00:43:48.700
How, what is the runtime look like?

00:43:48.700 --> 00:43:51.700
Is that regular CPython?

00:43:51.700 --> 00:43:55.700
Can I add a, a standard package as a wheel?

00:43:55.700 --> 00:43:58.700
Like, could I use HTTP X?

00:43:58.700 --> 00:44:04.700
Like, what is the story around the execution environment and the external packages and so on?

00:44:04.700 --> 00:44:09.700
So, well, yeah, it's, it's CPython.

00:44:09.700 --> 00:44:17.700
And, as I said, right now we use, or this serious Python package, it uses, Python that, that is, built by those scripts, which are part of, Python 3.13.

00:44:17.700 --> 00:44:31.700
Mm-hmm.

00:44:31.700 --> 00:44:39.700
So, like, theoretically, if you, if you go there to Python repository and look into those,

00:44:39.700 --> 00:44:49.700
folders, you will see instructions, you can, you can follow those instructions and build runtime, like build CPython for both iOS and Android.

00:44:49.700 --> 00:45:03.700
But yes, this is, it's not BASM, it's, CPython compiled into, native iOS or Android code, like, for, for platform, not like code, assemble.

00:45:03.700 --> 00:45:14.700
And, binary packages, yes, you have to, repackage, you have to build binary packages targeting those platforms as well.

00:45:14.700 --> 00:45:20.700
And for that purposes, we use, model for project by beware.

00:45:20.700 --> 00:45:23.700
Uh, it's pretty nice.

00:45:23.700 --> 00:45:25.700
It's, it's, it's an awesome project.

00:45:25.700 --> 00:45:29.700
It's a, it's a brainchild of, Malcolm and Russell.

00:45:29.700 --> 00:45:33.700
And, yeah.

00:45:33.700 --> 00:45:58.700
And, so it uses, in its, in its turn, it uses cross and package, which is basically, the way to simulate, like it, like it allows you to create virtual environment, in Python things that it's being run on a mobile device, you know?

00:45:58.700 --> 00:46:07.700
So it's like, basically model forge is, is, is like, you, you do, people install something.

00:46:07.700 --> 00:46:14.700
And, it feels like for Python, it feels like it's being run this command on, on a mobile device.

00:46:14.700 --> 00:46:22.700
And you, it uses, like if it's binary package and there is setup.py or by project.toml.

00:46:22.700 --> 00:46:30.700
It uses, mobile compilers, cross compilers to build, dot.so file.

00:46:30.700 --> 00:46:31.700
And for you.

00:46:31.700 --> 00:46:32.700
I see.

00:46:32.700 --> 00:46:44.700
So if a pip install action requires a local build of something, it will use the mobile compilers with the target platform being like iPhone or whatever.

00:46:44.700 --> 00:46:45.700
Right.

00:46:45.700 --> 00:46:45.700
Right.

00:46:45.700 --> 00:46:46.700
Right.

00:46:46.700 --> 00:46:53.700
So it's like the, the, the whole, the whole page is like this cross and it tweaks Python into thinking.

00:46:53.700 --> 00:47:04.700
It's kind of like running on, on the mobile device, you know, like, and it has these compilers, this archiver, this linker, you know, et cetera.

00:47:04.700 --> 00:47:20.700
So like, and it, it's, it's, it's pretty, it's pretty smart, thing, you know, like in most cases, so you should do a recipe, but this time recipe is, is basically a YAML file.

00:47:20.700 --> 00:47:23.700
It's, you know, like meta.yaml.

00:47:23.700 --> 00:47:31.700
And in most cases, if it's standard C, if it's simple package, you don't have to do anything.

00:47:31.700 --> 00:47:33.700
It works right away.

00:47:33.700 --> 00:47:35.700
You can build it for Android.

00:47:35.700 --> 00:47:37.700
You can build it for iOS.

00:47:37.700 --> 00:47:43.700
It takes literally minutes to produce a binary wheel for both platforms.

00:47:43.700 --> 00:47:44.700
Wow.

00:47:44.700 --> 00:47:45.700
Okay.

00:47:45.700 --> 00:47:46.700
That's fantastic.

00:47:46.700 --> 00:47:47.700
Yeah.

00:47:47.700 --> 00:47:48.700
Yeah.

00:47:48.700 --> 00:47:49.700
That's really cool.

00:47:49.700 --> 00:47:50.700
Yeah.

00:47:50.700 --> 00:47:51.700
I'll definitely link that in the show notes.

00:47:51.700 --> 00:47:55.700
to wherever I put it, the publishing side of things.

00:47:55.700 --> 00:48:01.700
So maybe we could talk through a little bit about the, the CLI and the process.

00:48:01.700 --> 00:48:02.700
Maybe.

00:48:02.700 --> 00:48:03.700
Yeah.

00:48:03.700 --> 00:48:07.700
Tell us, tell us how we go through this to get something built here.

00:48:07.700 --> 00:48:21.700
So the first, the first release, the first releases of web, way using, the like so-called web, like offering flat path command and using the,

00:48:21.700 --> 00:48:30.420
Py installer to produce executable, but it works for desktop platforms as well only.

00:48:30.420 --> 00:48:40.700
And to produce the package on the bundle for the mobile platform, you need to do more.

00:48:40.700 --> 00:48:47.420
It's still possible, as those guys are basically z-trials inside.

00:48:47.420 --> 00:48:56.180
You can build the AAB, you can build the APK, you can build IPA by yourself or using Xcode tools.

00:48:56.180 --> 00:49:01.560
And it's like it's the approach B-Ware takes, for example.

00:49:01.560 --> 00:49:09.900
So the briefcase, it builds like packages basically from scratch, you know.

00:49:09.900 --> 00:49:15.260
But for Flutter, we use, we require to use Flutter SDK.

00:49:15.260 --> 00:49:20.940
So there is a new command, like build, which uses Flutter SDK.

00:49:20.940 --> 00:49:28.020
And it's basically like a wrapper around the Flutter build command, which allows you to build

00:49:28.020 --> 00:49:34.260
the app for desktop, for web, for mobile.

00:49:34.260 --> 00:49:43.020
So inside, we take template.

00:49:43.020 --> 00:49:48.940
We take template and we create a new Flutter app and we build this Flutter app.

00:49:48.940 --> 00:49:49.940
Right.

00:49:49.940 --> 00:49:54.940
And just for people listening, the template looks something like, here's a folder with a

00:49:54.940 --> 00:50:00.620
images and here's a main.py and a pyproject.toml, stuff that Python people would be familiar with.

00:50:00.620 --> 00:50:01.620
Yeah.

00:50:01.620 --> 00:50:02.620
Yeah.

00:50:02.620 --> 00:50:06.300
So this is template for the app and the template for Flutter app.

00:50:06.300 --> 00:50:08.980
It's something internal.

00:50:08.980 --> 00:50:11.980
You don't have to look into that, you know.

00:50:11.980 --> 00:50:12.980
It's like...

00:50:12.980 --> 00:50:13.980
Yeah.

00:50:13.980 --> 00:50:16.980
It gets kind of complicated for the different platforms and linking them together and stuff.

00:50:16.980 --> 00:50:24.660
So, you know, the problem with Flutter is like the difference because we want to support extensions.

00:50:24.660 --> 00:50:33.580
We want to allow people using those nice extensions packages on .def.

00:50:33.580 --> 00:50:36.700
So we cannot have the same process every time.

00:50:36.700 --> 00:50:45.820
We should really run a Flutter build to, like for example, include a media kit for video control

00:50:45.820 --> 00:50:50.800
or audio players package for audio control.

00:50:50.800 --> 00:50:53.400
So it's not the same.

00:50:53.400 --> 00:50:54.440
It's always...

00:50:54.440 --> 00:51:05.240
So it should be built from Dart to this, you know, code Flutter produces.

00:51:05.240 --> 00:51:06.240
Yeah.

00:51:06.240 --> 00:51:07.240
Yeah.

00:51:07.240 --> 00:51:08.460
That's a lot of what Flutter is.

00:51:08.460 --> 00:51:14.180
It's like orchestrating all the pieces to build into the right stuff to go into the mobile apps.

00:51:14.180 --> 00:51:15.180
Exactly.

00:51:15.180 --> 00:51:16.180
Exactly.

00:51:16.180 --> 00:51:17.180
Yeah.

00:51:17.180 --> 00:51:18.180
Yeah.

00:51:18.180 --> 00:51:19.180
Okay.

00:51:19.180 --> 00:51:21.180
So we've got this pyproject.toml.

00:51:21.180 --> 00:51:27.180
And you even have a create CLI command like Flutter create my app or whatever.

00:51:27.180 --> 00:51:28.180
Yeah.

00:51:28.180 --> 00:51:31.400
And it will go and get that all out there, right?

00:51:31.400 --> 00:51:32.400
So really nice.

00:51:32.400 --> 00:51:33.400
Yeah.

00:51:33.400 --> 00:51:39.740
It's all recent stuff and it's still pretty rough, but it's great.

00:51:39.740 --> 00:51:40.740
Yeah.

00:51:40.740 --> 00:51:43.360
And here you have Flutter build and then target platform.

00:51:43.360 --> 00:51:52.600
And where target platform is APK, that is Android, AAB IPA, which is iOS, web, macOS, Windows,

00:51:52.600 --> 00:51:53.600
and Linux.

00:51:53.600 --> 00:51:59.800
That's a pretty impressive list of package destinations for building in an executable.

00:51:59.800 --> 00:52:00.800
So if I build...

00:52:00.800 --> 00:52:02.040
Let's suppose this.

00:52:02.040 --> 00:52:03.360
If I build a...

00:52:03.360 --> 00:52:04.360
Let's say Windows.

00:52:04.360 --> 00:52:12.940
If I say target equals Windows, what files or file or executable or what do I get when

00:52:12.940 --> 00:52:13.600
I run that?

00:52:13.600 --> 00:52:15.600
Do I get just a .exe?

00:52:15.600 --> 00:52:19.600
Do I get a .exe with DLLs or a whole bunch of other stuff?

00:52:19.600 --> 00:52:20.600
Yeah.

00:52:20.600 --> 00:52:31.360
Unfortunately, it's not a single .exe, but it's exe and a bunch of DLLs.

00:52:31.360 --> 00:52:33.540
Yes, it's...

00:52:33.540 --> 00:52:41.600
If you look inside the folder, you'll see like this executable then Python itself, Python

00:52:41.600 --> 00:52:49.540
runtime, which is a bunch of lead files, you know, and DLLs, Python files themselves.

00:52:49.540 --> 00:52:57.780
Then your app coming as a zip file.

00:52:57.780 --> 00:53:05.720
And also different kind of DLLs from plugins, from extension packages, platter packages.

00:53:05.720 --> 00:53:10.720
Like for video, for example, it's going to be like four more DLLs, something.

00:53:10.720 --> 00:53:11.720
Sure.

00:53:11.720 --> 00:53:15.720
So yeah, it's a bunch of things.

00:53:15.720 --> 00:53:16.720
Yeah, but...

00:53:16.720 --> 00:53:17.720
Yeah.

00:53:17.720 --> 00:53:25.900
But it's something I could put into an installer or copy to a Windows machine and then create

00:53:25.900 --> 00:53:29.900
a shortcut to the .exe and it looks like an app to the user.

00:53:29.900 --> 00:53:30.900
Yeah.

00:53:30.900 --> 00:53:34.900
You can make self-extracting archive or MSI.

00:53:34.900 --> 00:53:35.900
Yeah, exactly.

00:53:35.900 --> 00:53:36.900
Okay.

00:53:36.900 --> 00:53:37.900
And for macOS?

00:53:37.900 --> 00:53:38.900
For macOS, it's a bundle.

00:53:38.900 --> 00:53:39.900
Is that a .app bundle?

00:53:39.900 --> 00:53:40.900
Yeah, .app, yeah.

00:53:40.900 --> 00:53:41.900
But it's a standard bundle that looks like a file, but it's a folder, you know?

00:53:41.900 --> 00:53:41.900
So works like a charm, you know, like having the right structure.

00:53:41.900 --> 00:53:48.900
Again, the app inside is part of Flutter asset, which is like, it's called like car file.

00:53:48.900 --> 00:53:49.900
It's not even a zip, it's called the file.

00:53:49.900 --> 00:53:50.900
Yeah, it's a standard bundle.

00:53:50.900 --> 00:53:51.900
It's a bundle.

00:53:51.900 --> 00:53:52.900
It's a bundle.

00:53:52.900 --> 00:53:53.900
It's a .app bundle.

00:53:53.900 --> 00:53:54.900
Yeah.

00:53:54.900 --> 00:53:55.900
Yeah.

00:53:55.900 --> 00:53:56.900
But it's a standard bundle that looks like a file, but it's a folder, you know?

00:53:56.900 --> 00:53:58.900
So works like a charm, you know, like having the right structure.

00:53:58.900 --> 00:54:08.900
Again, the app inside is part of Flutter asset, which is like, it's called like car file.

00:54:08.900 --> 00:54:15.900
It's not like even a zip, it's car file, and which has all the assets.

00:54:15.900 --> 00:54:16.900
Nice.

00:54:16.900 --> 00:54:19.900
But again, it's a work in progress, you know?

00:54:19.900 --> 00:54:20.900
Yeah.

00:54:20.900 --> 00:54:21.900
Yeah.

00:54:21.900 --> 00:54:23.900
All right, are you ready for the hard question now?

00:54:23.900 --> 00:54:25.900
Those are awesome answers.

00:54:25.900 --> 00:54:33.900
But here's the one that has been driving me crazy, is so many of these platforms, by that

00:54:33.900 --> 00:54:43.900
way, that I mean, Windows and Mac have anti-malware, anti-phishing protections, which is good.

00:54:43.900 --> 00:54:50.900
But that means if you build a .app file and just try to run it, it'll say, this is from an

00:54:50.900 --> 00:54:51.900
untrusted developer.

00:54:51.900 --> 00:54:54.900
We'll probably, you want to move it to the trash?

00:54:54.900 --> 00:54:55.900
You know what I mean?

00:54:55.900 --> 00:55:01.900
Like, the lack of notarization, or on Windows, if it's not digitally signed with a trusted

00:55:01.900 --> 00:55:06.900
certificate, it gets treated with like a yellow warning.

00:55:06.900 --> 00:55:13.900
Is there a way to digitally sign these, or notarize them through Apple?

00:55:13.900 --> 00:55:15.900
So, yeah, it's...

00:55:15.900 --> 00:55:16.900
I know Flutter can do it.

00:55:16.900 --> 00:55:20.900
So maybe you could shell, maybe it shells down to the Flutter side of how that works.

00:55:20.900 --> 00:55:24.900
Flutter can do it, but still, it looks pretty complicated, you know?

00:55:24.900 --> 00:55:25.900
Oh, yeah.

00:55:25.900 --> 00:55:28.900
Even from my perspective, like, it looks pretty creepy.

00:55:28.900 --> 00:55:37.900
But I have this item on my desk right now, to start from micro-IS, because there was a complaint

00:55:37.900 --> 00:55:44.900
from one user recently, like two days ago, and I still had this issue.

00:55:44.900 --> 00:55:56.900
a lot of people, like, I'm going to do whatever you like.

00:55:56.900 --> 00:56:03.900
Like, no, I'm going to go through all the slabs, because right now, honestly, we don't even use

00:56:03.900 --> 00:56:09.900
sandbox mode in produced .app file, you know?

00:56:09.900 --> 00:56:21.900
So we start from there, and there was an issue with loading Python binaries, like package binaries.

00:56:21.900 --> 00:56:25.900
I'm going to solve that problem as well.

00:56:25.900 --> 00:56:28.900
So, yeah, definitely, it's our next step.

00:56:28.900 --> 00:56:37.900
Yeah, we, as you see, we're getting closer and closer to building real apps, and we're getting more

00:56:37.900 --> 00:56:43.900
developers building real apps, and they want to publish them.

00:56:43.900 --> 00:56:48.900
It's not just experimental, you know, anymore.

00:56:48.900 --> 00:56:54.900
Like, they want to publish them, and we are working on that right now, like publishing.

00:56:54.900 --> 00:56:55.900
Awesome.

00:56:55.900 --> 00:56:56.900
Yeah, that's awesome.

00:56:56.900 --> 00:57:02.900
And it's actually, it's our number one priority for the next year, you know?

00:57:02.900 --> 00:57:03.900
Yeah.

00:57:03.900 --> 00:57:12.900
I'll tell you, if you had that dialed, I mean, that means, that opens up desktop apps completely.

00:57:12.900 --> 00:57:13.900
Right?

00:57:13.900 --> 00:57:14.900
Yeah, absolutely.

00:57:14.900 --> 00:57:21.900
So, we will, I will start from macOS, because I have probably more, a little bit more experience

00:57:21.900 --> 00:57:23.900
with my class right now.

00:57:23.900 --> 00:57:26.900
And then I want to continue with the Windows Store.

00:57:26.900 --> 00:57:30.900
I never, I never published anything to Windows Store before.

00:57:30.900 --> 00:57:37.900
So, it's going to be an interesting journey, you know, but, yeah, Windows Store as well.

00:57:37.900 --> 00:57:43.900
Well, yeah, even if you just digitally signed it, so that if you downloaded off someone else's

00:57:43.900 --> 00:57:48.900
website, it wouldn't go, oh my gosh, this is an executable that's untrusted, run away, you know?

00:57:48.900 --> 00:57:49.900
Yeah, yeah, yeah, that's right.

00:57:49.900 --> 00:57:58.900
I, I, we actually, sign our MSIs right now, for, for other products.

00:57:58.900 --> 00:58:02.900
And, it's kind of like conspiracy, you know?

00:58:02.900 --> 00:58:09.900
Like, so you have to use a really expensive certificate to pass through, what was it like,

00:58:09.900 --> 00:58:19.900
screen, Windows screen, something like, so it's not just even like code signing and not even easy

00:58:19.900 --> 00:58:20.900
code signing.

00:58:20.900 --> 00:58:21.900
No, it's, it's something else.

00:58:21.900 --> 00:58:22.900
Yeah.

00:58:22.900 --> 00:58:23.900
Yeah.

00:58:23.900 --> 00:58:25.900
On macOS, it's Gatekeeper and these sorts of things.

00:58:25.900 --> 00:58:26.900
Yeah.

00:58:26.900 --> 00:58:27.900
Yeah.

00:58:27.900 --> 00:58:31.900
I remember it's like, $600 per year, something like that, at least.

00:58:31.900 --> 00:58:37.900
If you want to pass, this Windows 11 screen, yeah.

00:58:37.900 --> 00:58:38.900
Yeah.

00:58:38.900 --> 00:58:40.900
Otherwise it's always a warning.

00:58:40.900 --> 00:58:41.900
Always.

00:58:41.900 --> 00:58:42.900
Yeah.

00:58:42.900 --> 00:58:43.900
Yeah.

00:58:43.900 --> 00:58:45.900
Where's the, where's the let's encrypt for desktop apps?

00:58:45.900 --> 00:58:48.900
Come on, people, somebody help us out.

00:58:48.900 --> 00:58:52.900
Where's the cert bot for let's for, for desktop apps.

00:58:52.900 --> 00:58:56.900
But yeah, I, you know, like it's, it's there for a reason because people kept getting wrecked

00:58:56.900 --> 00:59:01.900
by ransomware and all sorts of stuff, but it does make building desktop apps challenging.

00:59:01.900 --> 00:59:03.900
Well, yeah, but we'll get there.

00:59:03.900 --> 00:59:04.900
No worries.

00:59:04.900 --> 00:59:05.900
Yeah.

00:59:05.900 --> 00:59:06.900
I love it.

00:59:06.900 --> 00:59:07.900
Yeah.

00:59:07.900 --> 00:59:08.900
All right.

00:59:08.900 --> 00:59:09.900
What else should we say about, about this here?

00:59:09.900 --> 00:59:11.900
Um, I guess controls.

00:59:11.900 --> 00:59:13.900
I know there was a question.

00:59:13.900 --> 00:59:14.900
I see a video.

00:59:14.900 --> 00:59:20.900
There was a question out in the audience also from Alan's is about camera controls.

00:59:20.900 --> 00:59:23.900
Is this a thing that you guys support yet?

00:59:23.900 --> 00:59:24.900
Sure.

00:59:24.900 --> 00:59:25.900
Sure.

00:59:25.900 --> 00:59:34.900
We, we started working on that, but it's, it's not like it was kind of like, testing the

00:59:34.900 --> 00:59:44.900
waters, you know, like, it's kind of like we, we, at this moment we are trying to harmonize

00:59:44.900 --> 00:59:45.900
API, flat API, flat API.

00:59:45.900 --> 00:59:55.900
And, as I see it right now, we, we're going to split all controls into like visual controls

00:59:55.900 --> 00:59:56.900
and, and so-called services.

00:59:56.900 --> 01:00:08.900
So camera is going to be service because yeah, right now it's, sometimes it's, it's kind of messy, you know, like, to use non-visual controls.

01:00:08.900 --> 01:00:12.900
You have to add them like to overlay or something.

01:00:12.900 --> 01:00:23.900
And, like if you jump to a different page, like audio could stop, you know, like, so we, we're going to re-implement that.

01:00:23.900 --> 01:00:26.900
And, camera is true.

01:00:26.900 --> 01:00:28.900
Camera is, is number one parameter right now.

01:00:28.900 --> 01:00:34.900
That's why there is a, there is a draft pull request and, we're not closing it.

01:00:34.900 --> 01:00:38.900
So we, we keep it, we keep it in mind all the time.

01:00:38.900 --> 01:00:39.900
Okay.

01:00:39.900 --> 01:00:52.900
The reason I even brought that up right now is because part of this packaging process, you have to state things like your, permissions that you're requesting, like access to location.

01:00:52.900 --> 01:01:03.900
And you also have to include which, optional controls you want to build like audio recorder or geolocation or maps and things like that.

01:01:03.900 --> 01:01:03.900
Right.

01:01:03.900 --> 01:01:04.900
Right.

01:01:04.900 --> 01:01:05.900
Yep.

01:01:05.900 --> 01:01:13.900
And, this is, something we're gonna, we're gonna change by the next release as well.

01:01:13.900 --> 01:01:26.900
So we, we will make this process more streamlined easier to, to add new controls, or services and, include them into build process.

01:01:26.900 --> 01:01:27.900
Got it.

01:01:27.900 --> 01:01:28.900
Yeah.

01:01:28.900 --> 01:01:28.900
Yeah.

01:01:28.900 --> 01:01:34.900
Well, even having them under, a subsection of your pipe project.tomal is pretty nice actually.

01:01:34.900 --> 01:01:35.900
Yeah.

01:01:35.900 --> 01:01:38.900
So it's, it's looks, it looks standard, you know?

01:01:38.900 --> 01:01:39.900
Yeah.

01:01:39.900 --> 01:01:41.900
It looks like it belongs, which is really nice.

01:01:41.900 --> 01:01:42.900
Right.

01:01:42.900 --> 01:01:52.900
And obviously you've got icons and splash screens and all of those types of things that you have to include in order to build, especially mobile apps.

01:01:52.900 --> 01:01:55.900
So it even an icon for a dot app or a dot exe.

01:01:55.900 --> 01:01:56.900
Mm-hmm.

01:01:56.900 --> 01:01:57.900
Yeah.

01:01:57.900 --> 01:01:58.900
Yeah.

01:01:58.900 --> 01:02:00.900
I guess one more thing.

01:02:00.900 --> 01:02:01.900
We got time for it.

01:02:01.900 --> 01:02:08.900
One more thing to call out here about this packaging and side of things, or maybe, maybe two, but this one's pretty interesting is by default,

01:02:08.900 --> 01:02:21.900
flat will flat build, will just pile your Python app together and assume that it must be fine, but you have a --compile app option that will compile your Python files.

01:02:21.900 --> 01:02:24.900
Now people listening might think, well, but there's no Python compiler.

01:02:24.900 --> 01:02:25.900
There is a Python compiler.

01:02:25.900 --> 01:02:27.900
You just don't do anything with it.

01:02:27.900 --> 01:02:29.900
It's in the interpreter, right?

01:02:29.900 --> 01:02:38.900
So when Python loads your Python files, it converts it to a bytecode and then interprets it, right?

01:02:38.900 --> 01:02:44.900
But you can have it compile that to PYC files, which will detect problems, right?

01:02:44.900 --> 01:02:45.900
That's kind of cool.

01:02:45.900 --> 01:02:46.900
Mm-hmm.

01:02:46.900 --> 01:02:47.900
Yeah.

01:02:47.900 --> 01:02:48.900
Yeah.

01:02:48.900 --> 01:02:50.900
So, yeah, tell people about that a bit.

01:02:50.900 --> 01:03:06.900
One of the reasons we introduced those options is that if you always compile and there are some issues inside user code, the entire process fails, you know?

01:03:06.900 --> 01:03:19.900
Like, I mean, like, even at least one single syntax error somewhere in your app leads to, like, a failed build process.

01:03:19.900 --> 01:03:23.900
So we introduced those options.

01:03:23.900 --> 01:03:28.900
And also, you can disable compilation.

01:03:28.900 --> 01:03:33.900
So it could be easy to, you know, debug your app.

01:03:33.900 --> 01:03:34.900
Yeah.

01:03:34.900 --> 01:03:41.900
But again, it's people asking, like, is it, like, can I see what's going on?

01:03:41.900 --> 01:03:48.900
Like, if I'm, like, downloaded your app and looked inside, like, can I see what's going on inside my app?

01:03:48.900 --> 01:03:49.900
Like, can users see?

01:03:49.900 --> 01:04:02.900
Well, it's not the, the way to proper protect your app from someone, like, from looking into the logic, you know?

01:04:02.900 --> 01:04:05.900
It's, it's not 100% protection.

01:04:05.900 --> 01:04:08.900
So maybe you should use obfuscators.

01:04:08.900 --> 01:04:10.900
And we'll have some ideas to build obfuscating.

01:04:10.900 --> 01:04:11.900
Oh, really?

01:04:11.900 --> 01:04:19.900
I was gonna, I was thinking obfuscators were kind of like a separate thing that you just, you're considering.

01:04:19.900 --> 01:04:20.900
Okay.

01:04:20.900 --> 01:04:22.900
It's, it's, it's, it's, it's, uncharted.

01:04:22.900 --> 01:04:32.900
I mean, like, it's, yeah, imagine if, if it doesn't work.

01:04:32.900 --> 01:04:34.900
I mean, it's good if it works.

01:04:34.900 --> 01:04:45.900
Like if, if you obfuscate it and it works, but, Python is pretty complex thing because, it's, it operates, by text files, you know?

01:04:45.900 --> 01:04:54.900
Like, so you can break some paths and, you know, like, like module names, you know, like, and, whatnot.

01:04:54.900 --> 01:04:55.900
I'm not sure.

01:04:55.900 --> 01:04:57.900
Like, if it's even like,

01:04:57.900 --> 01:04:58.900
Yeah, exactly.

01:04:58.900 --> 01:05:04.900
If it obfuscates the import statement or it said import requests, like that's not gonna work anymore.

01:05:04.900 --> 01:05:05.900
Yeah.

01:05:05.900 --> 01:05:07.900
Cause that's how Python works.

01:05:07.900 --> 01:05:08.900
You need to see it.

01:05:08.900 --> 01:05:09.900
Yeah.

01:05:09.900 --> 01:05:10.900
Yeah.

01:05:10.900 --> 01:05:11.900
Yeah.

01:05:11.900 --> 01:05:12.900
Yeah.

01:05:12.900 --> 01:05:23.900
If I compile my Python files, my py files, does that omit them from the project and only include the pyc files or how does that work?

01:05:23.900 --> 01:05:24.900
Sure.

01:05:24.900 --> 01:05:25.900
Yeah, sure.

01:05:25.900 --> 01:05:27.900
Uh, we, we remove .py.

01:05:27.900 --> 01:05:28.900
Okay.

01:05:28.900 --> 01:05:33.900
That's already pretty, pretty good levels of obfuscation.

01:05:33.900 --> 01:05:44.900
There are disassemblers and decompilers for C code for, especially for .net and Java, you can get those back to almost source level decompilation.

01:05:44.900 --> 01:05:45.900
Yeah.

01:05:45.900 --> 01:05:46.900
And sort of thing.

01:05:46.900 --> 01:05:52.900
So yeah, that's, that's kind of close to, at least close to, I would say it puts it on par with .net level of obfuscation.

01:05:52.900 --> 01:05:53.900
Yeah.

01:05:53.900 --> 01:05:54.900
Yeah.

01:05:54.900 --> 01:05:55.900
Yeah.

01:05:55.900 --> 01:05:56.900
All right.

01:05:56.900 --> 01:06:00.900
The last thing I guess, we should talk about real quick is just permission.

01:06:00.900 --> 01:06:10.900
So if you live in this mobile world, this is Android manifest.xml or info.plist or .entitemence and all these things.

01:06:10.900 --> 01:06:18.900
And so you support these platform specific deals pretty much because flutter supports them, right?

01:06:18.900 --> 01:06:19.900
Mm-hmm.

01:06:19.900 --> 01:06:19.900
Mm-hmm.

01:06:19.900 --> 01:06:20.900
Mm-hmm.

01:06:20.900 --> 01:06:21.900
Mm-hmm.

01:06:21.900 --> 01:06:29.900
So it's, it's, it's, it's not like pre-canned permissions.

01:06:29.900 --> 01:06:31.900
The, the, you, you can put anything you like.

01:06:31.900 --> 01:06:31.900
It's, basically it's whatever you put here, into PyProject.tomal or, common line arguments, it goes, you know, directly to this, flat build, template.

01:06:31.900 --> 01:06:48.900
So it's, it's, in fact, it's, the template is a cookie cutter template.

01:06:48.900 --> 01:06:59.900
And, there are a bunch of, for each statements, you know, like, going through all these arrays.

01:06:59.900 --> 01:07:06.900
So whatever you put here, it goes to those entitlements, peelings and, manifest file.

01:07:06.900 --> 01:07:07.900
Nice.

01:07:07.900 --> 01:07:08.900
So it's pretty, it's pretty flexible.

01:07:08.900 --> 01:07:09.900
Yeah.

01:07:09.900 --> 01:07:10.900
But sure.

01:07:10.900 --> 01:07:13.900
We have like some pre, predefined.

01:07:13.900 --> 01:07:14.900
Cool.

01:07:14.900 --> 01:07:21.900
So when you say it's a cookie cutter thing, it's not just like a template.

01:07:21.900 --> 01:07:24.900
It literally uses the Python cookie cutter library, right?

01:07:24.900 --> 01:07:25.900
Mm-hmm.

01:07:25.900 --> 01:07:26.900
Yep.

01:07:26.900 --> 01:07:27.900
Yep.

01:07:27.900 --> 01:07:32.900
So it's, the template, it, it, it, it's, it's in a separate, repository.

01:07:32.900 --> 01:07:42.900
So every command, the loss that, template and, provides the data, combines template and data.

01:07:42.900 --> 01:07:43.900
And,

01:07:43.900 --> 01:07:44.900
Yeah.

01:07:44.900 --> 01:07:49.900
And, produces this, Flutter app and then it goes to Flutter build.

01:07:49.900 --> 01:07:50.900
Cool.

01:07:50.900 --> 01:07:51.900
It looks great.

01:07:51.900 --> 01:07:52.900
It looks great.

01:07:52.900 --> 01:07:53.900
And it looks great.

01:07:53.900 --> 01:07:56.900
And it also looks like a lot of work.

01:07:56.900 --> 01:07:59.900
So congratulations on making it as far.

01:07:59.900 --> 01:08:00.900
Yeah.

01:08:00.900 --> 01:08:01.900
Thank you.

01:08:01.900 --> 01:08:02.900
Yeah.

01:08:02.900 --> 01:08:04.900
It's so a lot of work.

01:08:04.900 --> 01:08:05.900
Yeah.

01:08:05.900 --> 01:08:06.900
Yeah.

01:08:06.900 --> 01:08:07.900
Yeah.

01:08:07.900 --> 01:08:08.900
Let's see.

01:08:08.900 --> 01:08:10.900
I wanted to just have you real quickly close out.

01:08:10.900 --> 01:08:12.900
I don't know where I stuck it somewhere in here.

01:08:12.900 --> 01:08:15.900
Uh, the roadmap for, for where you're going.

01:08:15.900 --> 01:08:18.900
So maybe tell us.

01:08:18.900 --> 01:08:19.900
So, yeah.

01:08:19.900 --> 01:08:20.900
What's in the future?

01:08:20.900 --> 01:08:25.900
What's, what's in the near term that people can count on?

01:08:25.900 --> 01:08:26.900
And then we'll wrap up our show.

01:08:26.900 --> 01:08:27.900
Yeah.

01:08:27.900 --> 01:08:28.900
Sure.

01:08:28.900 --> 01:08:29.900
We, yeah.

01:08:29.900 --> 01:08:32.900
Maybe this roadmap is already, outdated, but yeah.

01:08:32.900 --> 01:08:41.900
First of all, we want to, we want to have this one, 1.0 because it's, maybe it's a psychological thing.

01:08:41.900 --> 01:08:47.900
You know, it's, like people, developers feel stability.

01:08:47.900 --> 01:08:54.900
You know, when there is 1.0, it's, it says that the framework is ready for, for serious apps.

01:08:54.900 --> 01:08:55.900
I mean, like, I mean,

01:08:55.900 --> 01:08:56.900
Yeah.

01:08:56.900 --> 01:08:58.900
It's a commitment to, to sustainability.

01:08:58.900 --> 01:08:59.900
Like we think we're ready.

01:08:59.900 --> 01:09:00.900
Yeah.

01:09:00.900 --> 01:09:01.900
Right.

01:09:01.900 --> 01:09:02.900
Right.

01:09:02.900 --> 01:09:08.900
And it's committed commitment for sustainability and it's commitment for proper release schedule.

01:09:08.900 --> 01:09:16.900
So we'll keep this release after releasing it and we'll be providing patches to this 1.0, et cetera, et cetera.

01:09:16.900 --> 01:09:20.900
So you can, you can start doing real apps using 1.0.

01:09:20.900 --> 01:09:38.900
So it's 1.0 and we, we, we are, we're doing a lot of work trying to harmonize API, trying to remove outdated stuff, trying to, like, have,

01:09:38.900 --> 01:09:44.100
consistent naming conventions across different controls you know it's like

01:09:44.100 --> 01:09:50.280
property names method names remove different duplicates so it's a lot of

01:09:50.280 --> 01:10:08.200
work and almost there so definitely like another thing is improving

01:10:08.200 --> 01:10:12.940
developer experience right so improving developer experience part of improving

01:10:12.940 --> 01:10:18.460
developer experience like for example we will be pre-installing all

01:10:18.460 --> 01:10:26.320
dependencies to make flat build command work work really smooth in your

01:10:26.320 --> 01:10:30.320
computer like right now we have to install flutter by cell but we'll be

01:10:30.320 --> 01:10:37.500
installing correct version of flutter on your behalf and that's cool yeah Java

01:10:37.500 --> 01:10:42.240
could be a plan real thing like sending his Java phone

01:10:42.240 --> 01:10:50.480
your fear of people who have not been through flutter projects they don't know

01:10:50.480 --> 01:10:57.380
they don't know all the little tools and the version mismatches and I've got this

01:10:57.380 --> 01:11:02.980
version of Android Studio but the Android SDK version wasn't checked correctly and so now

01:11:02.980 --> 01:11:07.400
I can't you know like that what you're saying is there's a lot of stuff that you could help

01:11:07.400 --> 01:11:12.800
out with and make that smoother but it's challenging yeah yeah and still it's still

01:11:12.800 --> 01:11:19.800
you need Android Studio yeah you can spend a lot of time configuring those things you know what maybe next year we're gonna we're gonna work start working on the service like I call it packaging and publishing service okay so so you could somehow link a GitHub branch like a production branch or something if you push that you can do it.

01:11:19.800 --> 01:11:22.180
- We can spend a lot of time configuring those things.

01:11:22.180 --> 01:11:27.100
You know what, maybe next year we're gonna start working

01:11:27.100 --> 01:11:32.100
on the service like, I call it a packaging

01:11:32.100 --> 01:11:35.160
and publishing service.

01:11:35.160 --> 01:11:36.300
- Okay, so.

01:11:36.300 --> 01:11:40.860
- So you could somehow link a GitHub branch,

01:11:40.860 --> 01:11:42.340
like a production branch or something.

01:11:42.340 --> 01:11:43.760
If you push to that, you guys grab it

01:11:43.760 --> 01:11:45.960
and you'll build all the assets.

01:11:45.960 --> 01:11:47.120
- Absolutely, yeah.

01:11:47.120 --> 01:11:48.200
- Nice, okay.

01:11:48.200 --> 01:11:50.160
- So you can push your just, you know,

01:11:50.160 --> 01:11:54.540
your coding this directly to this service

01:11:54.540 --> 01:11:58.020
and get artifact back, you know,

01:11:58.020 --> 01:12:02.720
like a MSI file or APP file.

01:12:02.720 --> 01:12:04.100
- That'd be awesome actually.

01:12:04.100 --> 01:12:05.520
Yeah, that's very cool.

01:12:05.520 --> 01:12:09.060
- Yeah, and you don't need to deal with all these dependencies,

01:12:09.060 --> 01:12:12.220
like all this stuff, you know, it's,

01:12:12.220 --> 01:12:16.900
you just do your part, your like Python code and that's it.

01:12:16.900 --> 01:12:20.660
- And the rest will be done inside the, yeah, in the cloud.

01:12:20.660 --> 01:12:24.240
So that's the idea, that's the plan.

01:12:24.240 --> 01:12:26.040
- Very promising.

01:12:26.040 --> 01:12:26.880
I love it.

01:12:26.880 --> 01:12:29.360
And I love all this work, all this progress you guys have made.

01:12:29.360 --> 01:12:33.040
So thanks for coming back on and sharing with everyone.

01:12:33.040 --> 01:12:34.120
Let's close it out.

01:12:34.120 --> 01:12:35.000
Final call to action.

01:12:35.000 --> 01:12:36.240
People are interested in Flet.

01:12:36.240 --> 01:12:37.240
What do you tell them?

01:12:37.240 --> 01:12:43.240
- So go ahead, download the latest version.

01:12:43.240 --> 01:12:49.240
Try doing your app and join our Discord channel.

01:12:49.240 --> 01:12:52.000
So, and let us know what you think.

01:12:52.000 --> 01:12:53.000
Yeah.

01:12:53.000 --> 01:12:54.000
- Awesome.

01:12:54.000 --> 01:12:55.000
All right.

01:12:55.000 --> 01:12:56.000
Thanks a bunch.

01:12:56.000 --> 01:12:57.000
See you later.

01:12:57.000 --> 01:12:57.880
- Yeah.

01:12:57.880 --> 01:12:58.880
Thank you guys.

01:12:58.880 --> 01:12:59.880
Bye.

01:12:59.880 --> 01:13:00.440
- Yeah.

01:13:00.440 --> 01:13:01.440
Thank you guys.

01:13:01.440 --> 01:13:02.440
Bye.

