WEBVTT

00:00:00.001 --> 00:00:03.600
JJ, Carlos, welcome to Talk Python To Me.

00:00:03.600 --> 00:00:04.560
Great to have you two here.

00:00:04.560 --> 00:00:06.020
Thank you.

00:00:06.020 --> 00:00:06.620
It's great to be here.

00:00:06.620 --> 00:00:09.820
It's really fun to have you both here.

00:00:09.820 --> 00:00:16.320
It's the week of Posit for me here at Talk Python.

00:00:16.320 --> 00:00:23.760
Just coincidentally having two groups from Posit on at basically almost the same time.

00:00:24.120 --> 00:00:33.700
Last recording, last episode was Great Tables, which made me have a much deeper understanding and appreciation for what you can do with tables.

00:00:33.700 --> 00:00:36.620
I thought, well, what is there more than kind of an Excel look to it?

00:00:36.620 --> 00:00:37.820
Formatting maybe.

00:00:37.820 --> 00:00:40.180
Yeah, that's what most people think.

00:00:40.180 --> 00:00:43.220
And then they see like four examples and like, oh, okay.

00:00:43.220 --> 00:00:44.100
Yeah, that's right.

00:00:44.100 --> 00:00:44.540
Exactly.

00:00:44.540 --> 00:00:45.820
Yeah, exactly.

00:00:45.820 --> 00:00:48.060
But no tables.

00:00:48.060 --> 00:00:52.520
There might be a table in the presentation today, but that's not the topic.

00:00:52.880 --> 00:00:57.580
It's more about leveling up your notebook game, right?

00:00:57.580 --> 00:01:14.200
Yeah, I think that's the most sort of straightforward win for Python users is sort of the ability to go from a Jupyter notebook to a website, to an academic article, to a report.

00:01:14.200 --> 00:01:15.780
To an e-book.

00:01:15.780 --> 00:01:16.280
Yeah.

00:01:16.280 --> 00:01:21.700
To an e-book, sort of growing from a notebook to the many different ways in which you want to share it with people.

00:01:22.360 --> 00:01:32.040
I mean, put maybe just a little bit more broadly, you know, we data scientists create all kinds of very, very valuable things with their code.

00:01:32.040 --> 00:01:34.480
And this can be, as we said, you know, tables.

00:01:34.480 --> 00:01:35.760
It can be visualizations.

00:01:35.760 --> 00:01:38.080
It can be the results of models.

00:01:38.780 --> 00:01:42.280
And then how do I project that out into the world?

00:01:42.280 --> 00:01:44.500
How do I make it valuable for other people?

00:01:44.500 --> 00:01:48.480
And a lot of times that means turning it into some kind of production output.

00:01:48.480 --> 00:01:53.620
You know, a PDF, a report, a dashboard, you know, a website.

00:01:53.620 --> 00:01:58.200
And so I'd say that's, you know, in the large what Quarto is about.

00:01:59.200 --> 00:02:01.560
Yeah, I think it's a super cool tech.

00:02:01.560 --> 00:02:07.660
I've been hearing a lot of people recommend it lately, which is always a good sign, always encouraging.

00:02:07.660 --> 00:02:12.720
Before we dive into that whole side of things, though, let's hear a little bit about yourself.

00:02:12.720 --> 00:02:14.500
You know, who are you?

00:02:14.500 --> 00:02:14.600
Sure.

00:02:14.600 --> 00:02:15.200
A quick introduction.

00:02:15.200 --> 00:02:20.020
And how did you get to working on Quarto and data science and all that?

00:02:20.020 --> 00:02:20.880
Sure.

00:02:21.600 --> 00:02:31.160
My name is JJ Allaire, and I have been a kind of software tool builder for, I guess it's almost 30 years now, which dates me quite a bit.

00:02:31.160 --> 00:02:33.260
But I've worked on how that catches up on you.

00:02:33.260 --> 00:02:34.520
It's really like what?

00:02:34.520 --> 00:02:34.960
Yeah.

00:02:34.960 --> 00:02:44.360
And I've worked on, you know, web servers and development tools and authoring tools and programming languages and lots of different things.

00:02:44.360 --> 00:02:55.640
But about, I guess, coming up on 14, almost 15 years ago, 14, 15 years ago, I decided that I wanted to focus on open source software.

00:02:55.640 --> 00:03:04.240
And I had early in my career, prior to becoming a software engineer, I was very into quantitative analysis for economics and political science.

00:03:04.240 --> 00:03:06.860
And I used a bunch of the tools that were available at the time.

00:03:06.920 --> 00:03:18.080
And so when I found out about, this is actually even before, like, PyData was a thing, before Pandas was a thing, I was like, oh, there's open source statistical computing, R, amazing.

00:03:18.080 --> 00:03:19.960
I can just work on that.

00:03:19.960 --> 00:03:21.080
So that's kind of what I did.

00:03:21.080 --> 00:03:28.780
I set out to improve the, I'd say, the computing tools around R, and I worked on RStudio.

00:03:29.040 --> 00:03:45.780
And then that has, I won't go into all the gory details of that, but really that led into a lot of these use cases, because a lot of the people using R were trying to figure out how to share and publish their work, whether they be writing scientific articles or inside a company presenting things.

00:03:46.320 --> 00:03:53.980
And so I worked on a thing called R Markdown, which was like, you know, merging R and Markdown for publishing things.

00:03:53.980 --> 00:04:02.800
And then that more recently led to, wow, like, it's great that we did this thing for R, but that's like 10% of the universe.

00:04:02.800 --> 00:04:05.700
So can we, can we generalize this?

00:04:05.700 --> 00:04:07.320
And that was like the genesis of Kordo.

00:04:07.320 --> 00:04:12.040
Like, let's generalize this idea and make it truly multi-engine.

00:04:12.320 --> 00:04:20.240
And it really is, it's, it works with R, it works with Jupyter, it works with, you know, the Julia, is it the Plato?

00:04:20.240 --> 00:04:23.600
No, no, the Julia, there's a Julia engine.

00:04:23.600 --> 00:04:25.540
There's two Julia engines, actually.

00:04:25.540 --> 00:04:27.060
And it works with observable.

00:04:27.060 --> 00:04:33.540
So the idea was like, let's take this core idea and make it work everywhere where there's interesting computations happening.

00:04:33.540 --> 00:04:35.160
So anyway, that's a little of my history.

00:04:35.160 --> 00:04:36.080
Yeah, amazing.

00:04:36.200 --> 00:04:49.240
And if you, if you capture or have tools for the Python space and for the JavaScript space and the R space, that's a good coverage of the data science world.

00:04:49.240 --> 00:04:50.620
Yeah, it seems to be.

00:04:50.620 --> 00:04:51.240
Yeah, yeah.

00:04:51.240 --> 00:04:51.840
That was hard.

00:04:51.840 --> 00:04:52.120
Yeah.

00:04:52.120 --> 00:04:52.980
Yeah.

00:04:52.980 --> 00:04:53.520
Awesome.

00:04:53.520 --> 00:04:54.900
Carlos, how about you?

00:04:54.900 --> 00:04:56.340
Thanks.

00:04:56.340 --> 00:04:58.060
My name is Carlos Scheidegger.

00:04:58.060 --> 00:04:59.960
I'm an engineer here at Plasid.

00:04:59.960 --> 00:05:04.460
I've been working in on Kordo since I joined about two and a half years ago.

00:05:05.400 --> 00:05:07.820
My background is in computer science.

00:05:07.820 --> 00:05:10.600
I'm a recovering academic, like I tell folks.

00:05:10.600 --> 00:05:14.040
I came to the US in 2005 for grad school.

00:05:14.040 --> 00:05:18.000
And I was working on a completely different area.

00:05:18.000 --> 00:05:20.860
I was working in sort of like geometry process and computer graphics.

00:05:21.460 --> 00:05:35.620
But as part of my work in research, I started realizing that a lot of the experiments we were publishing in papers had sort of a depth of like parameter settings and sort of choices and things that like really dominated the output result.

00:05:35.620 --> 00:05:43.300
And it was really hard to go on a paper and see what was happening there and sort of be able to figure out like what were the choices that someone made when they published the work?

00:05:43.300 --> 00:05:44.620
How do I compare my work to theirs?

00:05:44.760 --> 00:05:55.720
And so I switched and as part of my graduate work, I built a system in Python for sort of reproducible computational analysis and sort of how do you share this work?

00:05:55.720 --> 00:06:00.680
And sort of, you know, as you're sharing like a PDF, you'd get like all of the parameters and all of the things that came with them.

00:06:00.800 --> 00:06:05.560
So this was back in 2008, sort of ancient history at this point.

00:06:05.560 --> 00:06:15.160
I then sort of joined AT&T Research at that point and they have a really strong R team there and sort of started doing some related work there.

00:06:15.160 --> 00:06:20.740
And that's sort of how I crossed paths with JJ as they were founding our studio back a long time ago.

00:06:20.740 --> 00:06:22.760
And we more or less kept in touch.

00:06:23.080 --> 00:06:35.760
And so I eventually joined academia and kept interest in sort of this work on how do we make sure that the experiments that we have are as easily shareable as the artifacts that we end up all reading, like the PDFs, the websites.

00:06:35.760 --> 00:06:42.360
But if you need to go back to figure out what did actually happen there, we want to make that as easy as possible.

00:06:42.360 --> 00:06:45.640
And so the idea of Quarto resonated really strongly with me.

00:06:45.760 --> 00:06:54.440
And so as I was realizing that there's a lot of academia that I didn't, wasn't a great fit for me personally.

00:06:54.440 --> 00:06:56.680
We can have a separate conversation about that.

00:06:56.680 --> 00:07:02.140
I reached out to JJ and he talked about Quarto and said, this sounds like a great project.

00:07:02.140 --> 00:07:06.680
And we really hit it off and I've been working on it since we started.

00:07:06.680 --> 00:07:08.240
So that's a couple of years.

00:07:08.240 --> 00:07:09.200
That's cool.

00:07:09.200 --> 00:07:09.800
That's right.

00:07:11.720 --> 00:07:19.320
I think there's a lot of overlap on the data science side between R people and Python people and R tools and Python tools.

00:07:19.320 --> 00:07:25.140
There's a lot more overlap than I think folks realize from the outside.

00:07:25.140 --> 00:07:31.260
When you sort of notice that like the people working on these tools end up sort of picking the tool that's best for the job.

00:07:31.260 --> 00:07:32.280
And Python is fantastic.

00:07:32.280 --> 00:07:34.180
Like I've been writing it for 20 years.

00:07:34.820 --> 00:07:44.280
And sort of you find people trying to find similar solutions to problems and sort of some things are more easily expressible or easily to reach for in one language or another.

00:07:44.280 --> 00:07:52.980
But I think in 2024, the story is that more often than we realize like teams and even people are like they're polyglots.

00:07:52.980 --> 00:07:53.360
Right.

00:07:53.360 --> 00:07:55.780
So they will speak like they will write enough Python.

00:07:55.780 --> 00:07:56.720
They write enough R.

00:07:56.720 --> 00:08:00.340
But they want something that sort of works together as well as you can.

00:08:00.340 --> 00:08:03.780
And so that's something that we've focused on Quarto very, very explicitly.

00:08:03.780 --> 00:08:09.620
So you can have a website in which, you know, half of your team is working in R and half of your team is working on Jupyter Notebooks.

00:08:09.620 --> 00:08:14.540
And they both can work on the environments that are most comfortable.

00:08:14.540 --> 00:08:14.960
More observable.

00:08:14.960 --> 00:08:16.140
Observable.

00:08:16.140 --> 00:08:18.980
So directly in HTML and JavaScript.

00:08:19.340 --> 00:08:35.080
So that's really part of what we're trying to do is sort of make it as natural as possible for people to keep continuing their work, but then be able to publish it and sort of not forget like all of the computational things that came with it and make it easily accessible and so on.

00:08:36.740 --> 00:08:45.520
I think also another demographic, another group in this is the people who are receiving the research, receiving the stuff.

00:08:45.520 --> 00:08:47.320
They might not be either of those people.

00:08:47.320 --> 00:08:51.060
They don't want to see a bunch of code and then a DF.head.

00:08:51.060 --> 00:08:53.020
And then a plot.

00:08:53.020 --> 00:08:55.540
And then they want a report looking thing.

00:08:55.540 --> 00:08:56.460
That's right.

00:08:56.460 --> 00:08:57.140
Yeah.

00:08:57.140 --> 00:09:00.040
And we've definitely done a lot because it really does vary.

00:09:00.040 --> 00:09:02.560
I would say the preponderance of people are in that category.

00:09:02.560 --> 00:09:06.360
I would say maybe 80, 85% of the people are in that category.

00:09:06.360 --> 00:09:09.560
But then you do get the odd person who says, well, wait a minute.

00:09:09.560 --> 00:09:10.920
You know, where did this come from?

00:09:10.920 --> 00:09:18.000
So we have a bunch of things, you know, like for publishing notebooks that let you, you know, interactively show the code or not.

00:09:18.000 --> 00:09:18.820
Show all the codes.

00:09:18.820 --> 00:09:20.260
Don't, you know, show the source code.

00:09:20.260 --> 00:09:28.000
You know, we have a feature where, like, you see a plot in a website and it's just a plot.

00:09:28.000 --> 00:09:28.480
There's nothing.

00:09:28.480 --> 00:09:31.120
And there's a little text here at the bottom that says source notebook.

00:09:31.120 --> 00:09:34.000
You click it and now suddenly you're in a notebook that you don't want.

00:09:34.000 --> 00:09:39.080
So ways to make it available, make the computations available without hitting people over the head.

00:09:39.080 --> 00:09:39.960
That's cool.

00:09:39.960 --> 00:09:43.640
It's almost the equivalent of right click view source of the early web.

00:09:43.640 --> 00:09:44.400
Right, right, right.

00:09:44.400 --> 00:09:44.800
Exactly.

00:09:44.800 --> 00:09:46.020
But for data science.

00:09:46.020 --> 00:09:48.500
Yeah, that's very much the output we're looking for.

00:09:48.620 --> 00:09:56.960
But really, to your point, I mean, that's why when I say production output, it's like the quality of output that people are used to getting, you know, out of like office.

00:09:56.960 --> 00:10:03.020
Or when people make professional PDF reports, that's kind of what people are looking for at some level.

00:10:03.020 --> 00:10:04.720
Sometimes people just want, hey, just give me the information.

00:10:04.720 --> 00:10:05.980
I don't need it to be.

00:10:06.020 --> 00:10:07.580
But a lot of times they want the production quality.

00:10:07.580 --> 00:10:10.800
And so we do spend quite a bit of time on making that possible.

00:10:10.800 --> 00:10:11.940
Sure.

00:10:11.940 --> 00:10:19.960
And I would say the other thing that it seems like this solves a bunch is the I have a notebook I created myself.

00:10:19.960 --> 00:10:21.740
How do I share it with the world?

00:10:21.740 --> 00:10:22.100
Yeah.

00:10:22.100 --> 00:10:22.560
Yeah.

00:10:22.760 --> 00:10:29.780
A lot of data scientists are like, there's interesting solutions out there, but there's a lot of uncertainty on what to do.

00:10:29.780 --> 00:10:32.900
You know, do I need to learn how to do Django or Flask?

00:10:32.900 --> 00:10:33.760
Probably not.

00:10:33.760 --> 00:10:41.260
Do you lean on something like Streamlit where you kind of program to their model, but it's cool and interactive?

00:10:41.260 --> 00:10:42.780
Right.

00:10:42.780 --> 00:10:43.780
What do you do?

00:10:43.780 --> 00:10:49.560
You export to a PDF and just, or HTML, just here's the notebook, but static, right?

00:10:49.560 --> 00:10:55.040
None of those are, Streamlit's a pretty interesting option, but it's a very focused sort of tool, right?

00:10:55.040 --> 00:10:56.980
It's not a publication tool for sure.

00:10:56.980 --> 00:10:58.440
It's more interactive tool.

00:10:58.440 --> 00:10:59.460
For sure.

00:10:59.460 --> 00:10:59.920
Yeah.

00:10:59.920 --> 00:11:13.420
And I think that one of the really interesting things that happens when you sort of engage with the folks that are actually trying to produce this, like in a company or, you know, in an academic department or like in a government agency,

00:11:13.420 --> 00:11:17.640
those stories you just said, like, do I want a PDF?

00:11:17.640 --> 00:11:18.720
Do I want an HTML?

00:11:18.980 --> 00:11:21.420
They are all true, but for different stakeholders.

00:11:21.420 --> 00:11:31.780
So, you know, if I'm a data scientist in a company and I want the CTO to see what I'm doing, the CTO is not going to have time to go pour over the sort of gigantic report that has all the details.

00:11:31.780 --> 00:11:38.760
They want something that has up-to-date data that looks in a sort of expected, like might have the company branding and so on.

00:11:38.820 --> 00:11:42.460
And ideally something that is like email to them, like on a daily basis, right?

00:11:42.460 --> 00:11:55.780
So, we want the same notebook that you've used to sort of create your analysis to go as easily from that into something that can be like a scheduled send with CI or with one perhaps positive commercial offerings.

00:11:55.780 --> 00:12:03.140
So, you know, you can easily publish it as HTML through GitHub pages, through Netlify, or through your own provider.

00:12:03.140 --> 00:12:04.100
I see.

00:12:04.100 --> 00:12:08.420
So, you get basically a static site that you can publish to as you see fit, right?

00:12:08.420 --> 00:12:08.680
Okay.

00:12:08.800 --> 00:12:09.140
That's right.

00:12:09.140 --> 00:12:13.060
So, at the very basic, right, Quarto, we sort of jumped the gun a little bit.

00:12:13.060 --> 00:12:23.720
Quarto is a command line tool that you can use, and you can take your notebook, right, as an input, like your IPINB file, and just say Quarto render, and then we will produce an HTML file.

00:12:23.720 --> 00:12:26.880
So, you're sharing your screen now.

00:12:26.880 --> 00:12:36.580
So, if you go and get started on Quarto.org's webpage, which is where we are right now, you sort of, you see there's a tutorial for computations on the left sidebar.

00:12:36.920 --> 00:12:39.700
And then there's sort of a number of different pathways that you can go through there.

00:12:39.700 --> 00:12:43.420
And one of them is Jupyter, which is actually the one that you're seeing there by default.

00:12:43.420 --> 00:12:49.240
And so, in here, we're highlighting that you can take, like, your Jupyter notebook or your Jupyter lab input.

00:12:49.240 --> 00:12:53.220
Once it's saved to a file, you can just use Quarto directly to produce an HTML.

00:12:53.220 --> 00:12:55.540
So, you can say Quarto render HTML.

00:12:55.540 --> 00:12:56.720
You can say Quarto preview.

00:12:56.720 --> 00:13:01.560
And that would generate sort of like a local hosted website.

00:13:01.560 --> 00:13:02.940
But you can say Quarto publish.

00:13:03.140 --> 00:13:11.980
And then we have publishing sort of targets to Hugging Face, to our own Quarto pub free service, to GitHub pages, to a number of other places.

00:13:12.700 --> 00:13:19.320
So, at a very high level, you can take your notebook as it is, and you can produce a really nice-looking HTML page that's available.

00:13:19.980 --> 00:13:28.520
And one of the really fun recent things that happened is Hamel Hussain, NB Dev guy, sort of fantastic author.

00:13:28.520 --> 00:13:31.000
So, he's working for Answers AI now.

00:13:31.000 --> 00:13:40.460
And they just published a service where you can literally go on Answers AI and point to a GitHub repository that has an IPNB page.

00:13:40.620 --> 00:13:48.280
And they will dynamically sort of on the back end find that GitHub page, create the Quarto page from your notebook, and then just publish it.

00:13:48.280 --> 00:13:48.900
Right?

00:13:48.900 --> 00:13:50.220
So, like sort of zero-click.

00:13:50.220 --> 00:13:57.480
If you have a public repository on GitHub and you just want an HTML page to share with someone else, you literally do not have to do anything.

00:13:57.480 --> 00:13:59.900
You can just go there, get the output.

00:14:00.540 --> 00:14:03.780
And so, that's a really sort of like zero-click way to do that.

00:14:03.780 --> 00:14:04.220
Yeah.

00:14:04.220 --> 00:14:05.300
And then we want...

00:14:05.300 --> 00:14:06.300
Go ahead, Jay.

00:14:06.300 --> 00:14:08.620
I was going to say, it's called NBSanity.

00:14:08.620 --> 00:14:11.660
You can find it at NBSanity.com.

00:14:11.660 --> 00:14:12.600
I love it.

00:14:12.600 --> 00:14:14.040
Yeah, I'll definitely put a link for the show notes.

00:14:14.040 --> 00:14:18.840
In the show notes also, I think there should be a link to Hamel's blog post announcing it.

00:14:18.840 --> 00:14:26.540
And he goes into more details because one of the cool things is that you can actually use, even if you're not running Quarto, you can put a bunch of the Quarto options in there.

00:14:26.540 --> 00:14:29.700
You can say, oh, I want to show source code or not show source code.

00:14:29.740 --> 00:14:30.940
It makes source code expandable.

00:14:30.940 --> 00:14:36.320
And if you just put those in your notebook, when they render it, then they actually use those.

00:14:36.320 --> 00:14:40.960
So, it's sort of a way to use Quarto to publish your notebooks without even installing Quarto.

00:14:40.960 --> 00:14:42.120
Wow.

00:14:42.120 --> 00:14:43.480
So, it's pretty cool.

00:14:43.480 --> 00:14:45.300
Yeah.

00:14:45.300 --> 00:14:52.160
It basically, if you can just figure out the URL to put together, it'll just pull it together for you.

00:14:52.160 --> 00:14:52.800
Yeah.

00:14:53.260 --> 00:15:03.860
And I think that is like the concept of Quarto, which is, okay, I have Python code or I have a notebook and I want to project it and I want to do that in a flexible way.

00:15:03.860 --> 00:15:06.320
And that's, you know, that sort of web is like a default case.

00:15:06.460 --> 00:15:19.580
But I think the thing that people should also understand is that we really do go quite a ways beyond that with like making PDFs, making Word documents, you know, stitching things together in a website, you know, making presentations, you know.

00:15:19.980 --> 00:15:22.160
So, it's, there's a lot there.

00:15:22.160 --> 00:15:26.200
One of the curses of it is actually, it can be a little hard to explain.

00:15:26.200 --> 00:15:27.180
It's like, what is Quarto?

00:15:27.180 --> 00:15:30.500
Oh, publish anywhere, anything, any computation, any language.

00:15:30.500 --> 00:15:31.520
It doesn't, all the stuff.

00:15:31.520 --> 00:15:31.880
It doesn't.

00:15:32.020 --> 00:15:37.040
It doesn't really concretely connect with anything I'm thinking that I want to do, you know.

00:15:37.040 --> 00:15:42.360
But if you dig into it, it does, I think, connect pretty well to the things that people want to do.

00:15:42.360 --> 00:15:47.600
But I think there's interesting value to be gained from those kinds of decisions.

00:15:47.600 --> 00:15:53.260
Michael, I know you had recently Charlie Marsh on the podcast in uv and Ruff and all these tools, right?

00:15:53.260 --> 00:16:05.260
And sort of uv has taken a few of these moves that like, you know, make perfect sense, which is as you start sort of like consolidating these tools, there's a lot of really interesting use cases that arise naturally from the way you can compose them, right?

00:16:05.260 --> 00:16:10.240
So, yes, we have render, we have publish, we have preview, and it takes a little bit of time for you to explain.

00:16:10.240 --> 00:16:13.520
But in the end, you get the system that sort of like grows with you.

00:16:13.520 --> 00:16:20.820
And like, we hope it will be the tool that people reach for when they have sort of like data science, technical content production needs.

00:16:21.380 --> 00:16:31.860
Instead of trying to, like yourself, trying to piece together, say, I'm going to try to convert my notebook to Markdown, then use Pandoc on this, and then run this tool against it.

00:16:31.860 --> 00:16:35.640
If you guys own that whole workflow, then there's new opportunities.

00:16:35.640 --> 00:16:36.240
Is that what you're saying?

00:16:36.240 --> 00:16:36.600
That's right.

00:16:36.600 --> 00:16:37.040
That's correct.

00:16:37.040 --> 00:16:37.380
That's right.

00:16:37.380 --> 00:16:37.820
Yep.

00:16:37.820 --> 00:16:38.200
Yep.

00:16:38.200 --> 00:16:44.000
So, as an example, folks have, you know, we talked about Hamel and NB Dev.

00:16:44.000 --> 00:16:49.860
Another web page that folks might have known or sort of website and company is Fast AI, right?

00:16:49.860 --> 00:16:52.740
So, Jeremy Howard's sort of initiative.

00:16:52.740 --> 00:16:56.020
Fast AI is a Quarto website, sort of, you know.

00:16:56.020 --> 00:16:56.460
No kidding.

00:16:56.460 --> 00:16:57.060
Yeah.

00:16:57.060 --> 00:16:59.540
So, just go on Fast AI right now.

00:16:59.540 --> 00:17:01.780
If you open the source.

00:17:01.780 --> 00:17:03.160
Yeah.

00:17:03.160 --> 00:17:05.040
So, fast.ai is the.

00:17:05.040 --> 00:17:05.760
Yeah.

00:17:05.760 --> 00:17:06.140
Got it.

00:17:06.140 --> 00:17:06.820
Yeah.

00:17:06.820 --> 00:17:07.400
Right there.

00:17:07.400 --> 00:17:07.640
Yeah.

00:17:07.640 --> 00:17:10.020
So, this is actually a Quarto website.

00:17:10.020 --> 00:17:12.240
So, the blog here is where it's all of these.

00:17:12.240 --> 00:17:16.000
So, if you see there, it's published with Quarto 1635 or something there.

00:17:16.800 --> 00:17:21.080
And these are all written directly from notebooks.

00:17:21.080 --> 00:17:24.360
So, the entries in here on the blog entries, they're all IPyNB files.

00:17:24.360 --> 00:17:32.860
And then, Quarto, among the other things you can do is sort of collate all of the different sort of blog entries you have.

00:17:32.860 --> 00:17:34.960
Make listings so you can filter them.

00:17:35.360 --> 00:17:36.560
So, this is very useful for a blog.

00:17:36.560 --> 00:17:41.800
It's useful for folks that have sort of like an ongoing set of reports that like need to be sorted chronologically.

00:17:41.800 --> 00:17:46.900
If you have an academic website and you want to list your articles, that kind of stuff comes up all the time.

00:17:46.900 --> 00:17:51.420
But the input for all of those are IPyNB files, right?

00:17:51.420 --> 00:17:54.920
So, jenny and HTML work entirely in IPyNB.

00:17:54.920 --> 00:17:57.400
And so, from there, we generate the HTML.

00:17:57.400 --> 00:18:01.300
We sort of extract the headers and create the listings all sort of automatically.

00:18:01.300 --> 00:18:04.920
So, this is like an entirely Quarto website.

00:18:04.920 --> 00:18:06.480
That's incredible.

00:18:06.480 --> 00:18:11.100
I guess it makes sense being a static website that it's pretty well suited for this.

00:18:11.660 --> 00:18:18.940
A lot of these tools that I talk to people about, they're like, this is a great thing for internal publishing of our site.

00:18:18.940 --> 00:18:21.960
Or it's a great thing if you were going to interact with it.

00:18:21.960 --> 00:18:25.720
But it's kind of heavyweight and it doesn't really support a lot of design.

00:18:25.720 --> 00:18:30.200
And it's not a – you would never build your public website with this.

00:18:30.200 --> 00:18:32.440
It's like what I hear from a lot of these tools, right?

00:18:32.440 --> 00:18:33.700
But it's – this is pretty excellent.

00:18:33.700 --> 00:18:34.940
Yes, you definitely can.

00:18:34.940 --> 00:18:45.100
Yeah, we leaned pretty hard into, you know, allowing a lot of CSS customization.

00:18:45.100 --> 00:18:49.060
So, we use Bootstrap and we have a whole theming system.

00:18:49.060 --> 00:18:50.360
It's really based on Bootstrap themes.

00:18:50.360 --> 00:18:53.780
But you can use SCSS directly to create your own themes.

00:18:53.780 --> 00:18:56.860
So, you know, you can just go like, oh, make me a nice website.

00:18:56.860 --> 00:18:57.940
I don't want to think about it.

00:18:57.940 --> 00:18:58.940
People do that.

00:18:58.940 --> 00:19:05.320
But then people who really want to, like, party on, I want to make this look just so, can absolutely do it.

00:19:05.320 --> 00:19:06.300
Yeah.

00:19:06.300 --> 00:19:07.040
Great.

00:19:07.040 --> 00:19:07.860
Because –

00:19:07.860 --> 00:19:08.760
Go ahead, Marco.

00:19:08.760 --> 00:19:12.820
I was going to say, we might miss a little bit of the details for folks who are only listening.

00:19:12.820 --> 00:19:20.560
But another example that you might want to search, just to show sort of, you know, the range where you can go from – it's also another quarter website.

00:19:20.560 --> 00:19:26.000
So, if you just search for real-world data science, this is an initiative from the Royal Statistical Society.

00:19:26.320 --> 00:19:29.600
They have a website which – yep, right, that one.

00:19:29.600 --> 00:19:33.220
So, they have a number of different writers.

00:19:33.220 --> 00:19:35.700
They write sort of, like, columns and content pieces and ideas.

00:19:35.700 --> 00:19:37.780
This is also a quarter website.

00:19:37.780 --> 00:19:40.480
So, I believe this one is based on Markdown.

00:19:40.480 --> 00:19:44.740
So, they are using – instead of IPINB as inputs, they use R Markdown.

00:19:44.740 --> 00:19:48.380
But the same sort of thing.

00:19:48.380 --> 00:19:53.040
And the only reason I'm bringing this up is that you can see how very different it looks, right?

00:19:53.040 --> 00:19:54.560
So, it has categories and things like that.

00:19:54.920 --> 00:20:03.000
But if you want to take sort of, you know, the time to do these and sort of have all the – like, the banner images and sort of, like, that kind of thing, you can absolutely do it.

00:20:03.000 --> 00:20:03.320
You can do that, yeah.

00:20:03.320 --> 00:20:08.980
And the result, you get to publish through a number of different places that you might want to.

00:20:08.980 --> 00:20:09.940
Cool.

00:20:09.940 --> 00:20:10.160
Yeah.

00:20:10.160 --> 00:20:15.640
For people listening, it kind of has that landing page look with the hero section with big pictures.

00:20:15.640 --> 00:20:17.960
You know, it doesn't feel very notebook-y at all.

00:20:17.960 --> 00:20:18.720
That's for sure.

00:20:18.720 --> 00:20:28.740
Another use case out in the chat is Kevin O'Malley says, I teach a summer school on using Quarto for academic publishing in the university I work in.

00:20:28.740 --> 00:20:29.600
It's a great tool.

00:20:29.600 --> 00:20:32.640
But we spend a lot of time thinking about how to make documentation better.

00:20:32.640 --> 00:20:33.000
Interesting.

00:20:33.000 --> 00:20:34.460
Yeah.

00:20:34.460 --> 00:20:41.360
Documentation is a – I mean, part of – we – I think Quarto's documentation is very good.

00:20:41.600 --> 00:20:49.840
Like, I honestly say this without – I think it's, you know, I don't want to say best in class because folks have actually realized how important documentation is.

00:20:49.840 --> 00:20:52.460
And there's a lot of really good documentation out there.

00:20:52.460 --> 00:20:53.720
But I think we're up there.

00:20:53.720 --> 00:20:55.140
I think our documentation is very good.

00:20:55.140 --> 00:20:57.400
It doesn't mean that it couldn't be better.

00:20:57.400 --> 00:21:04.760
And I think part of the issue with Quarto is that diffusion of entry points that we talked about earlier, right?

00:21:04.760 --> 00:21:06.380
Do you want to make a single PDF?

00:21:06.380 --> 00:21:07.440
Do you want a website?

00:21:07.440 --> 00:21:08.600
Do you want –

00:21:08.600 --> 00:21:09.280
Dashboard.

00:21:09.280 --> 00:21:09.860
Yeah.

00:21:10.100 --> 00:21:12.600
And all of those become different places.

00:21:12.600 --> 00:21:14.320
Are you coming from a Julia background?

00:21:14.320 --> 00:21:15.740
Are you coming from a Python background?

00:21:15.740 --> 00:21:17.040
Are you coming from an R background?

00:21:17.040 --> 00:21:20.700
So we tried to create these, like, different entry points on the Get Started webpage.

00:21:20.700 --> 00:21:26.300
And our guides are customized for VS Code experience, for Jupyter experience, and so on.

00:21:26.300 --> 00:21:32.220
But we 100% agree that documentation remains one of the hardest parts for us.

00:21:32.220 --> 00:21:44.260
If you click on the guide tab at the top, you'll see that – I know everyone can't see this, but, like, it's just such a vast number of things.

00:21:44.260 --> 00:21:46.000
And it is easy to feel lost.

00:21:46.000 --> 00:21:47.800
We try to organize it.

00:21:47.800 --> 00:21:50.000
But it's like, what does this not do?

00:21:50.000 --> 00:21:50.540
You know?

00:21:51.340 --> 00:21:53.200
A little bit of a choose-your-own-adventure.

00:21:53.200 --> 00:21:56.000
It's a little bit of that, which is not always what people are looking for.

00:21:56.000 --> 00:21:59.060
They might be looking for, like, no, tell me I want to get this to happen.

00:21:59.060 --> 00:22:00.880
Just give me step one through four.

00:22:00.880 --> 00:22:04.260
And I think we could probably stand to do a little more of that.

00:22:04.260 --> 00:22:07.800
Yeah, but this tree is – this is kind of a decision tree.

00:22:07.800 --> 00:22:09.360
You know, like, what are you trying to do authoring?

00:22:09.360 --> 00:22:11.460
Are you trying to do diagrams?

00:22:11.460 --> 00:22:11.940
Okay.

00:22:11.940 --> 00:22:12.880
Are you using Python?

00:22:13.020 --> 00:22:14.700
Okay, you go down this path, and then we'll help you.

00:22:14.700 --> 00:22:15.380
Yeah, yeah, yeah.

00:22:15.380 --> 00:22:21.500
One thing I want to touch on, just – I know a lot of people have not experienced this.

00:22:21.500 --> 00:22:22.980
I know you two have.

00:22:22.980 --> 00:22:23.560
I have.

00:22:23.560 --> 00:22:25.020
And it's mind-blowing.

00:22:25.020 --> 00:22:29.720
This is somewhat built upon Pandoc, right?

00:22:29.720 --> 00:22:30.920
Yep, yep.

00:22:30.920 --> 00:22:31.440
Yes.

00:22:31.440 --> 00:22:32.360
We can –

00:22:32.360 --> 00:22:34.360
Pandoc is ridiculous, right?

00:22:34.360 --> 00:22:35.240
It's ridiculous, yeah.

00:22:35.240 --> 00:22:40.840
It is, like, the most – the biggest workhorse software that no one knows about.

00:22:41.020 --> 00:22:43.400
You know, it is an incredible piece of software.

00:22:43.400 --> 00:22:44.900
Yeah.

00:22:44.900 --> 00:22:53.900
If you're like, well, I have a LaTeX document, and I want it as a media wiki markup format.

00:22:53.900 --> 00:22:56.040
Could I possibly – yeah, you could just convert those.

00:22:56.040 --> 00:22:56.480
Yeah.

00:22:56.480 --> 00:22:59.540
If you – if people – I'll link to it, the Pandoc.org website.

00:22:59.540 --> 00:22:59.860
Yeah.

00:22:59.860 --> 00:23:02.020
On the right, there's a little gray –

00:23:02.020 --> 00:23:03.440
Yeah.

00:23:03.440 --> 00:23:06.020
I don't know what you would call it, but it's a gray –

00:23:06.020 --> 00:23:10.800
It looks like if you drew the diagram for rock, paper, scissors, but 500 ways.

00:23:10.800 --> 00:23:11.440
Yeah.

00:23:11.440 --> 00:23:12.680
It shows all the connections.

00:23:12.680 --> 00:23:13.320
All the connections.

00:23:13.320 --> 00:23:13.780
All the connections.

00:23:13.780 --> 00:23:14.880
How do I get – yeah.

00:23:14.880 --> 00:23:19.820
Basically, given one format, what other formats can it go to?

00:23:20.540 --> 00:23:24.560
And literally, it's illegible because it converts so many things to others.

00:23:24.560 --> 00:23:27.040
And that's a really interesting foundation for you guys, right?

00:23:27.040 --> 00:23:33.420
Well, I wanted to talk about this a little bit because I think that the really big idea behind Pandoc is –

00:23:33.420 --> 00:23:36.440
a consequence of the big idea is that you can do all this conversion.

00:23:37.020 --> 00:23:43.460
But the big idea behind Pandoc, if you're familiar, like, in programming languages, when you're parsing and writing interpreters,

00:23:43.460 --> 00:23:46.920
you have this abstract syntax tree, right?

00:23:46.920 --> 00:23:47.560
Or IL.

00:23:47.560 --> 00:23:51.800
There's a sort of abstract representation of the program.

00:23:51.800 --> 00:23:53.760
And then you can compute on it.

00:23:53.760 --> 00:23:59.720
And I think what Pandoc has done is they've created, essentially, an abstract representation of a document.

00:23:59.720 --> 00:24:06.380
And so we think of documents as just like, oh, we just spray a bunch of content into a file, and it's just a big blob.

00:24:06.920 --> 00:24:09.780
And Pandoc to use documents as something you can compute on.

00:24:09.780 --> 00:24:16.960
And so all the things that might be in a document, you know, tables and footnotes and figures and bullet lists and, you know,

00:24:16.960 --> 00:24:20.400
all these things are in an abstract model.

00:24:20.400 --> 00:24:28.140
And so what happens is it takes that, you know, whatever that is, Word doc or markdown file, and it brings it into its abstract model.

00:24:28.140 --> 00:24:29.860
And now you can actually compute on the document.

00:24:29.860 --> 00:24:34.980
And that's really actually the heart of how Quarto is able to do – you know, Quarto is built on Pandoc.

00:24:35.200 --> 00:24:40.780
And that's how we're able to do almost everything is that we're actually not just dealing with text and markup.

00:24:40.780 --> 00:24:46.160
We're dealing with this sort of abstract model of a document, and then we can do all these powerful things with it.

00:24:46.160 --> 00:24:47.940
So I don't know if you want to expound on that.

00:24:47.940 --> 00:24:51.500
You probably could expound way too long on that, Carlos, if you chose to.

00:24:52.060 --> 00:25:00.060
But I think the shortest important bit is, yeah, so Pandoc operates on this abstract syntax tree.

00:25:00.060 --> 00:25:01.780
It's a document that has paragraphs.

00:25:01.780 --> 00:25:07.260
Paragraphs can have spans with, you know, strong text, underlying text, and things like that.

00:25:07.260 --> 00:25:19.800
And we – you can think of Quarto as a very, very big orchestrator of Pandoc and sort of like configuration orchestrator or like choreographer for Pandoc.

00:25:19.800 --> 00:25:22.500
So Quarto itself is a command line application.

00:25:22.500 --> 00:25:25.500
We ship Pandoc with it.

00:25:25.500 --> 00:25:27.760
So like our bundles all include Pandoc with it.

00:25:27.940 --> 00:25:36.200
But fundamentally, we are a TypeScript application that sort of puts itself in front of Pandoc and then after it, right?

00:25:36.200 --> 00:25:45.520
So, you know, all of the complicated things you might want to do to generate multiple websites, to extract bits of the documents, to know the titles, to create your blog posts and your entries, right?

00:25:45.520 --> 00:25:51.340
So Quarto gets in front of it, does all of that orchestration work, then calls Pandoc a number of times.

00:25:51.340 --> 00:25:51.580
Yeah.

00:25:51.780 --> 00:25:54.300
And then calls sort of some post processors.

00:25:54.300 --> 00:26:08.820
And the way this integrates with engines and Jupyter and so on is our – what we call engines in Quarto are the things that turn your document that has executable code with a document that has the results of the execution, right?

00:26:08.880 --> 00:26:21.960
And so all that needs to happen for an engine in Quarto to exist is that it takes Markdown or Jupyter Notebooks as input and then it produces Jupyter Notebooks as output or the Markdown annotated with those results.

00:26:22.120 --> 00:26:26.220
And then we just sort of process them and send to Pandoc, right?

00:26:26.220 --> 00:26:29.680
So really, Pandoc is at the center of what we can do with Quarto.

00:26:29.680 --> 00:26:36.620
And you can think of Quarto as just sort of sitting around it and sort of expanding the scope of the things you can do with Pandoc.

00:26:36.620 --> 00:26:38.600
We've done a few more things.

00:26:38.600 --> 00:26:47.840
Like if you – to use Pandoc, typically, you know, there's, you know, 160 command line options and you just kind of figure out how to – you know, it's tremendously powerful.

00:26:47.840 --> 00:26:50.760
So we've tried to, I would say, organize that experience a little bit.

00:26:51.220 --> 00:26:56.280
So it's like, oh, I just say I want a PDF and it's in YAML and I do a couple options and it does the right thing.

00:26:56.280 --> 00:27:02.560
So I think, you know, you can think of Pandoc properly as like this sort of engine that you can do anything with.

00:27:02.560 --> 00:27:07.200
And we try to give you like the happy path to a bunch of things that you probably want to do.

00:27:07.200 --> 00:27:16.320
I think that's hugely valuable because while Pandoc is great, it's also super complicated.

00:27:16.320 --> 00:27:20.320
And a lot of times if you want to combine different documents, you know, maybe –

00:27:20.320 --> 00:27:26.700
I'm actually working on a project that has a bunch of markdown files, but they really need to be one markdown file in a certain order.

00:27:26.700 --> 00:27:28.500
And then that thing gets processed.

00:27:28.500 --> 00:27:31.620
But then as it gets transformed, there needs to be changes to it.

00:27:31.620 --> 00:27:34.460
And, you know, I'm – I can program.

00:27:34.460 --> 00:27:35.840
I can write that code to do it.

00:27:35.940 --> 00:27:41.900
But there's a ton of common use cases like take this notebook and publish it on the web.

00:27:41.900 --> 00:27:42.720
Yeah.

00:27:42.720 --> 00:27:45.080
That could just be built into your tool, right?

00:27:45.080 --> 00:27:46.460
So one of the –

00:27:46.460 --> 00:27:47.240
And even the thing that –

00:27:47.240 --> 00:27:47.500
I'm sorry.

00:27:47.500 --> 00:27:47.700
Go ahead.

00:27:47.700 --> 00:27:48.700
Go ahead.

00:27:48.700 --> 00:27:49.120
It's okay.

00:27:49.580 --> 00:27:56.300
I was going to say, even the thing you're talking about, I need to paste together a bunch of files and turn it into a single file or turn it into a book or turn it into a –

00:27:56.300 --> 00:28:01.060
you know, those are things that we can – we facilitate those sort of things as well, you know.

00:28:01.060 --> 00:28:01.560
Nice.

00:28:01.560 --> 00:28:01.820
Yeah.

00:28:01.820 --> 00:28:03.480
This is really a book, actually.

00:28:03.480 --> 00:28:07.640
And it's got 20 chapters and each one is in its own file.

00:28:07.640 --> 00:28:11.880
And when it's a website, I just want it to be like a website that lets you navigate my book.

00:28:11.880 --> 00:28:15.880
When it's a Word doc, I want them all concatenated together into a Word doc, you know, et cetera.

00:28:15.880 --> 00:28:16.100
Right.

00:28:16.100 --> 00:28:19.380
And then final destinations, an EPUB and a PDF or something.

00:28:19.380 --> 00:28:19.560
Yeah.

00:28:19.560 --> 00:28:20.000
EPUB.

00:28:20.000 --> 00:28:20.200
Yeah.

00:28:20.200 --> 00:28:20.680
Yeah.

00:28:20.680 --> 00:28:21.500
EPUB or PDF.

00:28:21.500 --> 00:28:21.900
Sure.

00:28:21.900 --> 00:28:22.140
Yeah.

00:28:22.140 --> 00:28:26.300
Make the EPUB – you know, create the EPUB archive just so.

00:28:26.300 --> 00:28:27.220
And yeah.

00:28:27.220 --> 00:28:27.640
So.

00:28:27.640 --> 00:28:29.380
Sorry, Carlos.

00:28:29.380 --> 00:28:36.520
I was just going to say that to Michael's use case of sort of having a number of markdown documents and so on.

00:28:36.520 --> 00:28:38.860
I wouldn't presume to say you should use Quarto.

00:28:38.860 --> 00:28:40.640
Maybe it's a good tool for you.

00:28:41.000 --> 00:28:47.360
But one of the things that we do believe in very strongly is sort of making – sort of it's a principle that we try to abide by.

00:28:47.360 --> 00:28:52.360
It's sort of making hard things easy but never at the expense of making very hard things impossible.

00:28:52.360 --> 00:28:55.860
So, you know, we will provide you the happy path.

00:28:55.860 --> 00:28:57.880
We sort of, you know, the standard YAML options.

00:28:57.880 --> 00:28:59.180
We have validation for them.

00:28:59.180 --> 00:28:59.940
We have completion.

00:28:59.940 --> 00:29:03.220
We have sort of integrated documentation if you're in VS Code, for example.

00:29:03.220 --> 00:29:09.720
But if you need to actually extend things, we give you a number of escape hatches and entry points.

00:29:10.180 --> 00:29:19.940
And so if you're in a Quarto project, for example, we have a fairly complete system of like pre-render scripts and post-render scripts where we'll give you the set of things that we found on your project.

00:29:19.940 --> 00:29:22.260
You can run TypeScript code against it.

00:29:22.260 --> 00:29:23.620
You can run Python code against it.

00:29:23.620 --> 00:29:27.460
Tell us what you've done to pre-process our project or to post-process our project.

00:29:27.460 --> 00:29:44.060
So if you need to start by collating markdown documents or by, you know, going to some database and pulling the documents that you want to render on a webpage, all of those things are enabled by this pretty extensive extension system for lack of a better term.

00:29:44.140 --> 00:29:52.680
But we try to put extension entry points in as many places as we can so that folks are not stranded when they go from a simple project to inevitably something that's more complicated.

00:29:52.680 --> 00:29:58.900
So try to make Quarto grow with them as your project tends to inevitably grow as well.

00:30:00.180 --> 00:30:01.920
Yeah, that sounds really great.

00:30:01.920 --> 00:30:08.140
When I'm sure there's some pre-built extensions, but I also imagine that we could write our own.

00:30:08.140 --> 00:30:08.960
That's right.

00:30:08.960 --> 00:30:10.240
Is that in JavaScript?

00:30:10.240 --> 00:30:12.420
Is that in any language?

00:30:12.660 --> 00:30:13.540
Is that shelling out?

00:30:13.540 --> 00:30:18.500
Well, let me tell you.

00:30:18.500 --> 00:30:21.480
So a couple of the things are pretty open.

00:30:21.480 --> 00:30:27.860
So what Carlos said about pre-render, post-render, sure, any language.

00:30:27.860 --> 00:30:28.960
That can be just the shell.

00:30:28.960 --> 00:30:29.380
Okay.

00:30:29.380 --> 00:30:36.660
There's a thing called Pandoc filters, which is essentially take the AST in and produce and, you know, transform the AST.

00:30:36.660 --> 00:30:39.600
Those also can be written in any language, filters.

00:30:39.800 --> 00:30:44.760
So, for example, there are two different libraries to write them in Python, but people write them in all kinds of languages.

00:30:44.760 --> 00:30:45.600
That's available.

00:30:45.600 --> 00:30:55.180
But I would say the official mechanism for extending that has more affordances, more APIs, more flexibility that we have is based on Lua.

00:30:55.180 --> 00:30:59.180
Because Pandoc has an embedded Lua interpreter in it.

00:30:59.180 --> 00:31:03.220
So as it's running, they give you access to the runtime.

00:31:03.220 --> 00:31:10.100
And you can do all sorts of really flexible things inside Pandoc as you're running.

00:31:10.100 --> 00:31:20.640
So Lua is, if people aren't familiar with it, was originally created actually for embedded game engines.

00:31:21.000 --> 00:31:28.360
So the idea is we need very, very fast, very fast execution, very high-level language.

00:31:28.360 --> 00:31:33.580
Very, you know, it looks not dissimilar from Python, I would say.

00:31:33.580 --> 00:31:36.760
But it runs very fast.

00:31:36.760 --> 00:31:42.780
So, for example, you know, like the Cloudflare kind of, what is it called?

00:31:43.560 --> 00:31:48.680
And the one that's going to avoid for like writing super high-performance like REST proxies uses Lua.

00:31:48.680 --> 00:31:54.280
So like, okay, this code is going to run on every HTTP request that happens.

00:31:54.280 --> 00:31:57.360
We're not writing that in any language that isn't just going to be screaming fast.

00:31:57.480 --> 00:32:02.840
So I think the reason why Pandoc used Lua was they said, well, we can very easily embed it.

00:32:02.840 --> 00:32:03.940
And it's going to be fast.

00:32:03.940 --> 00:32:10.280
Because when you're processing documents with a lot of nodes in them, you really want to be using a language that's very fast at runtime.

00:32:10.280 --> 00:32:11.620
So it is Lua.

00:32:11.620 --> 00:32:15.840
And if you go to our website, there's a whole section on extensions.

00:32:15.840 --> 00:32:18.460
And we do quite a bit to, let's see.

00:32:18.460 --> 00:32:20.840
Yeah, go to, where is extensions, Carlos?

00:32:20.840 --> 00:32:21.700
It's got to be.

00:32:21.800 --> 00:32:28.080
Yeah, if you just search for extensions, you should be able to find good documentation.

00:32:28.080 --> 00:32:31.240
And sort of, yeah, you can start from templates.

00:32:31.240 --> 00:32:32.680
That's right.

00:32:32.680 --> 00:32:36.060
There's a bunch of ones that people, yeah, these are ones people have already done.

00:32:36.060 --> 00:32:37.860
So they've sort of added features.

00:32:37.860 --> 00:32:40.620
Oh, you guys support the concept of shortcodes.

00:32:40.620 --> 00:32:41.540
Yes, we have.

00:32:41.540 --> 00:32:43.600
Yes, we have short, you can write your own shortcodes.

00:32:43.600 --> 00:32:44.220
Yeah, exactly.

00:32:44.220 --> 00:32:44.580
Yeah.

00:32:44.580 --> 00:32:49.540
So you can write that the two kind of workhorse extensions are shortcodes and filters.

00:32:50.040 --> 00:32:52.620
And so shortcodes are like content injectors.

00:32:52.620 --> 00:32:55.180
Filters are content transformers.

00:32:55.180 --> 00:33:01.040
And so you can see examples of, you know, different shortcodes and filters that people have.

00:33:01.040 --> 00:33:01.420
Yeah.

00:33:01.420 --> 00:33:06.420
So an example for people who maybe are not familiar with this idea is pretty common in static websites.

00:33:06.420 --> 00:33:07.580
Yeah.

00:33:07.580 --> 00:33:08.720
Static site generators.

00:33:08.720 --> 00:33:12.300
For example, Hugo has the concept of shortcodes as well.

00:33:12.300 --> 00:33:17.920
And it's like, I want to write a markdown, but I also want to embed a YouTube video.

00:33:17.920 --> 00:33:18.680
Exactly.

00:33:18.680 --> 00:33:19.900
80% of the width.

00:33:19.900 --> 00:33:22.080
And that is like an iframe and all sorts of things.

00:33:22.080 --> 00:33:22.480
Exactly.

00:33:22.480 --> 00:33:25.120
The video shortcode we support natively.

00:33:25.120 --> 00:33:26.100
Yeah.

00:33:26.100 --> 00:33:28.660
So we have a video shortcode that's built in.

00:33:28.660 --> 00:33:30.700
We wrote a video shortcode built in.

00:33:30.700 --> 00:33:32.440
Because for this, it's so common.

00:33:32.440 --> 00:33:34.620
But, you know, people make these specialized ones.

00:33:34.740 --> 00:33:37.020
One of my favorite ones was somebody who was like a shortcode.

00:33:37.020 --> 00:33:39.420
And you like give it some kind of, I don't know what that was.

00:33:39.420 --> 00:33:43.860
It was like some kind of like chemistry or biology, you know, code.

00:33:43.860 --> 00:33:48.040
And it creates this like interactive molecule visualizer, you know, right?

00:33:48.040 --> 00:33:48.400
Yeah.

00:33:48.400 --> 00:33:54.080
Like a 3D, whatever the language for 3D stuff in the browser is that came out.

00:33:54.080 --> 00:33:54.240
Yeah.

00:33:54.240 --> 00:33:55.500
And it's wild.

00:33:55.500 --> 00:33:56.580
And you're just a shortcode.

00:33:56.580 --> 00:33:58.140
You give it one little code and it just does it.

00:33:58.140 --> 00:33:58.960
So, yeah.

00:33:58.960 --> 00:34:01.960
So these are, again, these are written in Lua.

00:34:01.960 --> 00:34:07.580
But, and part of that is also because we want, again, this idea of being,

00:34:07.580 --> 00:34:09.420
Pandoc supports Lua.

00:34:09.420 --> 00:34:12.540
But we also want people to run these extensions with zero dependencies.

00:34:12.540 --> 00:34:15.580
So, like, if I'm a, you know, I write an extension.

00:34:15.580 --> 00:34:18.720
I don't know if you've got R or Python or like, I don't know what you're,

00:34:18.720 --> 00:34:23.300
what you're, you know, and I don't want to have to satisfy a bunch of dependencies.

00:34:23.300 --> 00:34:27.500
So we want to have like fast dependency free and well and agree with Pandoc.

00:34:27.500 --> 00:34:28.900
So that's why we ended up with Lua.

00:34:28.900 --> 00:34:30.760
And we like it.

00:34:30.760 --> 00:34:33.120
And it's served us well.

00:34:33.120 --> 00:34:34.940
We've done, we did some stuff in our quarter extension.

00:34:34.940 --> 00:34:40.860
We do a bunch of like, we actually add a bunch of like static typing annotations for Lua

00:34:40.860 --> 00:34:44.020
so that it's like we get really nice autocomplete and linting and stuff.

00:34:44.020 --> 00:34:44.480
So.

00:34:44.480 --> 00:34:44.800
Yeah.

00:34:44.800 --> 00:34:45.280
Cool.

00:34:45.280 --> 00:34:52.100
You know, JJ, five years ago, if you said I need to write an extension in Lua.

00:34:52.100 --> 00:34:53.020
Yeah.

00:34:53.020 --> 00:34:55.100
I would have to learn Lua.

00:34:55.100 --> 00:34:56.980
Maybe not well, but I would have to.

00:34:56.980 --> 00:34:57.260
Yeah.

00:34:57.260 --> 00:34:59.000
I could probably write that.

00:34:59.000 --> 00:34:59.000
Oh yeah.

00:34:59.000 --> 00:35:03.320
I could probably write it in Python or, or R and then just tell ChatGPT.

00:35:03.320 --> 00:35:03.740
I want that.

00:35:03.740 --> 00:35:05.120
You definitely could.

00:35:05.120 --> 00:35:05.660
Yeah.

00:35:05.660 --> 00:35:06.720
Yes.

00:35:06.720 --> 00:35:07.300
Yeah.

00:35:07.300 --> 00:35:09.260
So what do you guys think about this?

00:35:09.260 --> 00:35:13.640
This crazy LLM stuff that's taken over programming.

00:35:14.640 --> 00:35:16.580
I think, I think, I think it's pretty interesting.

00:35:16.580 --> 00:35:23.960
I think it's, I would say that I was kind of a little wary of it until I saw, I'd say probably

00:35:23.960 --> 00:35:29.740
Claude 3.5 and 01 are a huge, a huge step change in capability.

00:35:30.260 --> 00:35:32.280
And so I was kind of waiting for that.

00:35:32.280 --> 00:35:39.720
Um, but seeing that I would say they're already now quite effective at accelerating many parts of development.

00:35:40.720 --> 00:35:53.780
I think part of what we have to do is figure out the, the, the sort of what is the right, I think for, for many, most types of software for the foreseeable future, it's going to be human in the loop.

00:35:54.500 --> 00:35:55.480
Um, I believe.

00:35:55.480 --> 00:35:57.400
And so what is the interface for human in the loop?

00:35:57.400 --> 00:35:58.300
What does it look like?

00:35:58.300 --> 00:36:02.380
Is it, you know, it can go all the way from do a thing that's complicated.

00:36:02.380 --> 00:36:04.680
Let me see the diff and I'll approve it too.

00:36:04.680 --> 00:36:07.820
I just want to talk about it and then I'll do it too.

00:36:07.820 --> 00:36:12.160
Let's talk about it and you can do some things, you know, and I'll tell you that they look good or not.

00:36:12.160 --> 00:36:17.780
I think that's a really interesting area of exploration for, for the tool building community for the next.

00:36:17.780 --> 00:36:19.460
Yeah, it's, it's, I agree.

00:36:19.460 --> 00:36:20.040
It's super interesting.

00:36:20.040 --> 00:36:23.640
I, I, I don't have it build stuff for me, but there's a lot of times I'll be like.

00:36:24.240 --> 00:36:29.800
I could look this up, but I'd, I'd like to see an example from it and then I'll, I'll take it and make it mine.

00:36:29.800 --> 00:36:32.240
Or I have a thing, explain it to me.

00:36:32.240 --> 00:36:34.100
Like, what does this regular expression do?

00:36:34.100 --> 00:36:35.560
Or what does this curl command do again?

00:36:35.560 --> 00:36:36.900
I can't be bothered to study.

00:36:36.900 --> 00:36:39.440
I have a funny anecdote about this.

00:36:39.440 --> 00:36:40.660
Cause I, cause I do the same thing.

00:36:40.660 --> 00:36:41.620
Like, let me look this up.

00:36:41.620 --> 00:36:49.380
So I was like, I was writing a VS, I was working on a VS Code extension and I was basically trying to save some state, you know, per workspace state.

00:36:49.380 --> 00:36:52.360
And I'm like, I know there's like, there's a one liner for this actually VS Code.

00:36:52.360 --> 00:36:53.540
They have this built in.

00:36:53.540 --> 00:36:56.080
So I said, I just want to do some pro workspace state.

00:36:56.080 --> 00:36:57.060
Like, how do I do that?

00:36:57.060 --> 00:36:58.020
And it goes, great.

00:36:58.020 --> 00:37:00.520
And it goes like, I'll make workspace state manager.

00:37:00.520 --> 00:37:05.060
And it produces like 180 lines of code, you know, and it's got all this kind of events.

00:37:05.060 --> 00:37:05.960
It's got all this stuff.

00:37:05.960 --> 00:37:08.660
And I'm like, isn't, I was like, isn't there like a one liner?

00:37:08.660 --> 00:37:09.780
Like, Oh, totally.

00:37:09.780 --> 00:37:10.780
There is a one liner.

00:37:10.780 --> 00:37:12.280
Like here, it's right here.

00:37:12.940 --> 00:37:19.660
You do have to, you know, when you have it try to build stuff for you, you have to kind of go, you know, don't lead the witness too much.

00:37:19.660 --> 00:37:20.040
You know?

00:37:20.040 --> 00:37:20.380
Yeah.

00:37:20.380 --> 00:37:20.860
Yeah.

00:37:20.860 --> 00:37:21.060
Yeah.

00:37:21.060 --> 00:37:21.320
For sure.

00:37:21.320 --> 00:37:22.600
I want to hear Carlos's thoughts.

00:37:22.600 --> 00:37:31.200
But I, I will just add that I think people who try to just say, I'm going to take this thing and just have it build the thing and then build the next thing.

00:37:31.320 --> 00:37:37.100
And if you take it too far, you're going to end up with a pile of something you cannot understand, you cannot maintain.

00:37:37.100 --> 00:37:38.740
It doesn't quite do the thing.

00:37:38.740 --> 00:37:39.980
That's exactly right.

00:37:39.980 --> 00:37:40.180
Yeah.

00:37:40.180 --> 00:37:40.520
Yeah.

00:37:40.520 --> 00:37:41.960
Carlos, you spend a lot of time.

00:37:41.960 --> 00:37:42.520
Yeah.

00:37:42.520 --> 00:37:43.020
Yeah.

00:37:43.020 --> 00:37:43.520
I agree.

00:37:43.520 --> 00:37:47.720
Carlos, you spend a lot of time universities teaching people.

00:37:47.720 --> 00:37:49.440
Yeah.

00:37:49.440 --> 00:37:51.100
It's interesting.

00:37:51.100 --> 00:37:54.980
I left, I think, just before this became really, really bad.

00:37:54.980 --> 00:37:56.620
My spouse actually teaches Intro to Python.

00:37:57.620 --> 00:38:09.800
And so, you know, she's sort of much closer to the thick of the bad parts of like sort of exposing like this really access to LLMs for folks who don't otherwise understand what's happening.

00:38:09.800 --> 00:38:11.260
And so I'm of two minds of this.

00:38:11.260 --> 00:38:26.260
One is I think there's something fundamentally complicated for us to handle, us as in like society and humans, which is it is much harder to tell that something might be wrong than to generate the output.

00:38:26.260 --> 00:38:26.660
Right.

00:38:26.840 --> 00:38:28.860
Sort of it's really complicated.

00:38:28.860 --> 00:38:29.160
Right.

00:38:29.160 --> 00:38:31.440
Like it's actually just genuinely hard to do so.

00:38:31.440 --> 00:38:33.880
And it's even harder when you don't have the expertise.

00:38:33.880 --> 00:38:42.740
And so it's absolutely the case that there's a number of folks that are using ChatGPT to generate code, to generate sort of solutions to homework is like the bad case that happens all the time.

00:38:42.740 --> 00:38:42.980
Right.

00:38:42.980 --> 00:38:43.460
Yeah.

00:38:43.460 --> 00:38:53.960
But even if you sort of step that aside and say like there's no grade in play or anything like that, the risk is that folks really don't have the ability to tell when something is going bad or wrong.

00:38:53.960 --> 00:38:55.740
And I think that's a complicated thing to do.

00:38:56.060 --> 00:39:02.420
The counterpoint that I think is quite interesting is that we have computers right in front of us.

00:39:02.420 --> 00:39:02.740
Right.

00:39:02.740 --> 00:39:08.420
Like, you know, if ChatGPT gives me like a snippet of Python code, one thing I can do with it is I can run it myself.

00:39:08.420 --> 00:39:08.940
Right.

00:39:08.940 --> 00:39:10.240
Like, you know, I can go and check it.

00:39:10.480 --> 00:39:10.760
Right.

00:39:10.760 --> 00:39:18.820
And so I think the places where I find it to be extremely valuable are like when it tells me something that I can very easily verify whether or not it's the case.

00:39:18.820 --> 00:39:19.100
Right.

00:39:19.100 --> 00:39:24.620
Sort of like I say, OK, can I tangentially I'm trying to teach myself Rust because it's 2024.

00:39:25.020 --> 00:39:26.540
And like that's what everyone else is doing.

00:39:26.540 --> 00:39:31.020
And I found it to be sort of exceedingly valuable to just sort of like, you know, ask for something.

00:39:31.020 --> 00:39:32.000
How do you do that in Rust?

00:39:32.160 --> 00:39:37.100
And it gives me something and I just, you know, sort of use the code and then like I go look at what it does and sort of.

00:39:37.320 --> 00:39:39.720
But I'm actually the one running the Rust code.

00:39:39.720 --> 00:39:40.000
Right.

00:39:40.000 --> 00:39:44.920
Or something else is there's there's a like third party that can verify the output in like a meaningful sense.

00:39:44.920 --> 00:39:49.380
And that combination to me seems really powerful.

00:39:49.380 --> 00:39:55.480
Sort of like the ability to sort of, you know, generate these potential things with my ability to quickly check whether they are true or not.

00:39:55.480 --> 00:39:56.860
That seems transformative to me.

00:39:56.860 --> 00:39:57.480
Totally agree.

00:39:57.480 --> 00:39:57.780
Yeah.

00:39:57.780 --> 00:40:04.620
And so so that's where I think it's most exciting work that's going to come out is how do we combine like these things.

00:40:04.840 --> 00:40:25.260
And one fascinating thing to me is that if you think about like PyLens, PyRite or Pydantic, these sort of like typing efforts for Python that exist in many other languages, something like an LLM gets to benefit a lot from it on both sides because the annotation is information that it can use to sort of figure out what it actually needs to tell you.

00:40:25.260 --> 00:40:30.860
But you can also use the annotations because the annotations means that there are fewer valid programs out there.

00:40:30.860 --> 00:40:31.100
Right.

00:40:31.100 --> 00:40:32.260
That's what a type system does.

00:40:32.260 --> 00:40:34.200
It disallows some programs to exist.

00:40:34.720 --> 00:40:38.000
And so if it gives you a wrong result, it's much more obvious that that's the case.

00:40:38.000 --> 00:40:38.380
Right.

00:40:38.380 --> 00:40:39.460
You might see a type error.

00:40:39.460 --> 00:40:40.520
That's exactly right.

00:40:40.520 --> 00:40:41.040
That's right.

00:40:41.040 --> 00:40:41.220
Yeah.

00:40:41.220 --> 00:40:44.980
And so that to me is where I think all of this stuff is happening.

00:40:44.980 --> 00:40:48.740
If you, so you mentioned you're a mathematician by training, Michael.

00:40:48.740 --> 00:40:55.100
So Terence Tao is a Fields Medalist, sort of very famous number theorist guy.

00:40:55.100 --> 00:41:00.060
He's been talking a lot about his efforts to use Lean, which is an automated theorem prover.

00:41:00.620 --> 00:41:07.580
So people are sort of trying to formalize mathematics through like, you know, automated theorem prover programming language that has like formal semantics and so on.

00:41:07.580 --> 00:41:12.880
And using LLMs for sort of coming up with ideas for like the proof strategies and so on.

00:41:12.880 --> 00:41:18.160
And there, if it doesn't, if the theorem is proven wrong, it will tell you right away.

00:41:18.160 --> 00:41:21.520
And so that's the kind of thing that's very, very powerful to me.

00:41:21.520 --> 00:41:21.980
Yeah.

00:41:21.980 --> 00:41:22.640
Yeah.

00:41:22.640 --> 00:41:23.300
I'll often.

00:41:23.300 --> 00:41:23.980
That makes me nervous.

00:41:23.980 --> 00:41:24.780
Go ahead, JJ.

00:41:24.780 --> 00:41:25.040
Sorry.

00:41:25.040 --> 00:41:31.760
I was going to say, I'll often for something that's a little complicated, you know, I'll, I'll have it generated.

00:41:31.900 --> 00:41:35.020
I'll look at, look, as Carla said, I'll look it over, I'll run it.

00:41:35.020 --> 00:41:40.320
And then I'll say, I'll, I'll say like, now write me a ton of tests, you know, and then like, did you test for this?

00:41:40.320 --> 00:41:41.140
Did you test for that?

00:41:41.140 --> 00:41:41.420
Did you?

00:41:41.420 --> 00:41:50.140
And then suddenly there's like 80 tests and that helps it's, that's a little bit, it's not, that's not a guarantee, but it helps with that closed domain kind of thing.

00:41:50.360 --> 00:41:54.540
Not a proof checker, but, but you know, it's approximately that.

00:41:54.540 --> 00:41:56.080
Yeah.

00:41:56.080 --> 00:41:59.100
I didn't mean necessarily take us this deep down the LLM path, but it's amazing.

00:41:59.100 --> 00:42:00.100
It's super interesting.

00:42:00.100 --> 00:42:01.100
It's easy to go there.

00:42:01.100 --> 00:42:02.120
It's easy to go there.

00:42:02.120 --> 00:42:02.360
Yeah.

00:42:02.360 --> 00:42:04.220
It's affecting all of us so much.

00:42:04.220 --> 00:42:09.540
And I think it's going to bifurcate the, the software developer world.

00:42:09.540 --> 00:42:13.080
On one hand, I think folks who are like you guys are saying, I can check it.

00:42:13.080 --> 00:42:14.800
I'll take it and then I'll run with it.

00:42:14.800 --> 00:42:17.920
It's only going to make it better, faster, right?

00:42:17.920 --> 00:42:19.280
You want a Cordeaux extension.

00:42:19.460 --> 00:42:20.540
You don't know Lua, no problem.

00:42:20.540 --> 00:42:21.040
It doesn't matter.

00:42:21.040 --> 00:42:21.280
Yeah.

00:42:21.280 --> 00:42:21.640
Right.

00:42:21.640 --> 00:42:22.520
We'll make that work fine.

00:42:22.520 --> 00:42:35.360
On the other hand, I think, you know, to your wife's position, Carlos, I think there's a really serious danger that LLMs will stunt the growth of students.

00:42:35.360 --> 00:42:37.800
You already see the hard problems.

00:42:37.800 --> 00:42:39.760
Unfortunately, this is already happening.

00:42:39.760 --> 00:42:40.180
Yeah.

00:42:40.740 --> 00:42:49.500
And it's a shame because in computer science specifically, the fix is easy, right?

00:42:49.500 --> 00:42:51.060
The computer is right in front of you.

00:42:51.060 --> 00:42:51.400
Yeah.

00:42:51.400 --> 00:42:52.660
You can test that, right?

00:42:52.660 --> 00:42:58.160
Like that kind of perspective that like, you know, you have a computer in front of you that can run code and tell you what it's doing.

00:42:58.160 --> 00:42:59.980
There's nothing stopping you from doing that.

00:42:59.980 --> 00:43:01.640
That perspective is so important, right?

00:43:01.800 --> 00:43:03.340
That's why open source is so amazing.

00:43:03.340 --> 00:43:06.960
You can like go into the Python code and like download it and try different things.

00:43:06.960 --> 00:43:09.140
There's no one stopping you from doing that.

00:43:09.880 --> 00:43:26.580
So for computer science, I do think that we have an easier way out where I think this is terrifying is where folks use LLMs as a search engine with having no idea that this thing invents the fact that, I don't know, like, George W. Bush has issued a part of the history.

00:43:26.580 --> 00:43:28.860
That kind of stuff comes up, right?

00:43:28.860 --> 00:43:31.440
People publish stuff on the news without realizing this.

00:43:31.440 --> 00:43:32.300
It's already here.

00:43:32.300 --> 00:43:33.280
And it's not just students.

00:43:33.280 --> 00:43:34.100
It's everyone.

00:43:34.100 --> 00:43:34.780
Yeah.

00:43:34.780 --> 00:43:36.580
It's a slightly broader point.

00:43:36.580 --> 00:43:38.240
And then we can get off the LLM train here.

00:43:38.240 --> 00:43:51.420
But a slightly broader point that typically to get the most out of these things in a lot of domains, and this could be law or medicine, programming, you really need like substantial human expertise to oversee them.

00:43:51.420 --> 00:43:56.000
And that person probably has 10 years of experience.

00:43:56.000 --> 00:43:57.920
And so great.

00:43:57.920 --> 00:43:58.180
Okay.

00:43:58.180 --> 00:44:00.140
So those people are going to become more and more valuable.

00:44:00.140 --> 00:44:02.120
I know how to be the human in the loop.

00:44:02.120 --> 00:44:06.600
But how do we develop the new, the 10 years of experience?

00:44:06.600 --> 00:44:12.360
How do I ever get the 10 years of experience if I'm constantly letting the LLM do things and I'm never learning anything?

00:44:12.360 --> 00:44:14.420
So that's the crisis, I would say.

00:44:14.420 --> 00:44:15.540
It's an absolute crisis.

00:44:15.540 --> 00:44:17.440
It's going to be a real problem in a few years.

00:44:17.440 --> 00:44:22.720
How do you make the gap from new, out of school to I have the 10 years experience?

00:44:22.720 --> 00:44:24.500
That is going to be a huge problem.

00:44:24.500 --> 00:44:25.620
It is a huge problem.

00:44:25.620 --> 00:44:29.320
But do you know William Gibson's quote about, like, the future is already here.

00:44:29.320 --> 00:44:30.480
It's just not even distributed.

00:44:30.480 --> 00:44:32.240
That problem already exists.

00:44:32.620 --> 00:44:34.360
It doesn't need LLMs for that, right?

00:44:34.360 --> 00:44:36.480
This problem of checking expertise, right?

00:44:36.480 --> 00:44:38.640
To tie back to the Quarto conversation, right?

00:44:38.640 --> 00:44:48.180
Like, a number of, there's, like, what got me started in the reproducibility crisis is this inability for us to tell whether some output of an academic paper is correct or not.

00:44:48.180 --> 00:44:48.820
Right?

00:44:48.880 --> 00:44:50.260
Like, it's really much harder to check.

00:44:50.260 --> 00:44:55.280
That is the same problem that now absolutely everyone is going to run into on every place, right?

00:44:55.280 --> 00:45:06.000
And where I think Quarto has something to say about it, like, this entire project of computational reproducibility and documents that have the code that generated them is that you have the ability to check, right?

00:45:06.060 --> 00:45:12.160
So, you know, our manuscript support that JJ alluded to early, right?

00:45:12.160 --> 00:45:13.740
When you create a website, right?

00:45:13.740 --> 00:45:14.660
You have the entire website.

00:45:14.660 --> 00:45:17.420
And there's a link to the side that's, like, here's the code that generated it.

00:45:17.420 --> 00:45:18.700
You can run it on Binder, right?

00:45:18.700 --> 00:45:19.920
You can run it in code spaces.

00:45:19.920 --> 00:45:21.220
And so you can check.

00:45:21.220 --> 00:45:23.360
When you look right here, that's in the upper right.

00:45:23.360 --> 00:45:24.280
Yeah, this thing right here.

00:45:24.280 --> 00:45:24.920
That's right.

00:45:25.080 --> 00:45:27.440
So that shows the code statically, right?

00:45:27.440 --> 00:45:39.580
So there's a separate mode in which you not only have, like, the source code that you can see it, but you actually have the full IP and be, like, available for you to run it on Binder and, like, check for yourself that it's actually producing the results that you expect, right?

00:45:39.580 --> 00:45:49.680
So you can go from the pros that is hard to tell whether it's true to the code that actually runs so you can at least see what the person is using to make the claims that they did.

00:45:50.100 --> 00:46:01.260
And I think that kind of, like, integrated metadata that, like, sort of corroborates the statements you're making is only going to become more important as we go forward rather than less.

00:46:01.260 --> 00:46:03.220
Yeah, I agree.

00:46:03.220 --> 00:46:06.720
That harkens back to your reproducible science initiatives, right?

00:46:06.720 --> 00:46:07.520
That's exactly right.

00:46:07.520 --> 00:46:07.940
Yeah.

00:46:07.940 --> 00:46:13.440
So let's talk about using Quarto.

00:46:13.440 --> 00:46:14.780
Where can I run it?

00:46:14.780 --> 00:46:19.780
So it looks like it's supported at least on the major OSs, Mac, Windows, Linux.

00:46:20.340 --> 00:46:20.700
Right.

00:46:20.700 --> 00:46:21.300
That's right.

00:46:21.300 --> 00:46:24.740
It's a command line tool that you can install separately.

00:46:24.740 --> 00:46:26.180
You can also just pip install it.

00:46:26.180 --> 00:46:27.620
Oh, interesting.

00:46:27.620 --> 00:46:27.940
Okay.

00:46:27.940 --> 00:46:28.320
Yeah.

00:46:28.320 --> 00:46:30.540
A lot of people do that.

00:46:30.540 --> 00:46:36.040
And you can pip install older versions and, you know, versions from GitHub and all that sort of thing.

00:46:37.200 --> 00:46:42.360
In terms of, I would say, you can just use it with any editor with a command line tool.

00:46:42.360 --> 00:46:49.060
I do think it benefits from some tooling, like some autocomplete and some amount of just, like, hey, preview this thing.

00:46:49.060 --> 00:46:49.820
Show it to me.

00:46:49.820 --> 00:46:53.660
And so there is pretty good tooling across.

00:46:53.660 --> 00:46:55.320
So there's, like, a Jupyter extension.

00:46:55.920 --> 00:46:59.200
There's a VS Code extension that does quite a bit of stuff.

00:46:59.200 --> 00:47:01.680
There's a NeoVim extension.

00:47:01.680 --> 00:47:04.760
There's support, integrated support in our studio.

00:47:04.760 --> 00:47:07.440
So that's important.

00:47:07.440 --> 00:47:15.060
If you go to our, like, if you go to our, like, get started thing, you can see we sort of, let's see.

00:47:15.060 --> 00:47:16.240
I think you have to scroll up.

00:47:17.760 --> 00:47:19.100
You go to get started.

00:47:19.100 --> 00:47:25.960
It'll kind of, if you scroll down, we kind of say to you, like, okay, what's your preferred tooling environment?

00:47:25.960 --> 00:47:30.780
And we kind of set you up in that environment with the right extensions or other things.

00:47:30.780 --> 00:47:33.200
And so there's always use a text editor.

00:47:33.200 --> 00:47:35.400
But, you know, I think the tooling is helpful.

00:47:35.400 --> 00:47:36.400
Yeah.

00:47:36.400 --> 00:47:45.040
So one of the things I was thinking about when I was asking that, two of the things, really, that I think are rough edges that you probably solve,

00:47:45.040 --> 00:47:53.980
that people don't necessarily know they're rough edges yet until they try it, is one, Pandoc has a lot of dependencies that are not obviously dependencies.

00:47:53.980 --> 00:48:03.800
Like, for example, I was trying to get some file out of Pandoc, and it was saying, this LaTeX thing is not installed on your Mac.

00:48:03.800 --> 00:48:04.800
I'm like, I don't even want LaTeX.

00:48:04.800 --> 00:48:06.020
Why is this here?

00:48:06.020 --> 00:48:07.280
Why is this happening here, right?

00:48:07.280 --> 00:48:08.820
We definitely, yes, yes, yes.

00:48:08.820 --> 00:48:10.940
We have definitely solved that.

00:48:10.940 --> 00:48:14.440
So it depends on the scenario.

00:48:14.560 --> 00:48:16.980
So for LaTeX, we don't embed a LaTeX distribution.

00:48:16.980 --> 00:48:24.400
However, if we notice you don't have LaTeX, we tell you, just type quarto install tool.

00:48:24.400 --> 00:48:27.400
You know, what is our LaTeX distribution?

00:48:27.400 --> 00:48:27.880
Tiny tech.

00:48:27.880 --> 00:48:29.060
Tiny tech.

00:48:29.060 --> 00:48:30.420
Install tiny tech.

00:48:30.420 --> 00:48:36.840
And then that's actually a tech distribution that we maintain that is, like, very small, has different form factors,

00:48:36.840 --> 00:48:40.620
and isn't, like, five gigabytes to start with, and does auto-installation of packages.

00:48:41.020 --> 00:48:43.700
So for that, we kind of say, yeah, you need LaTeX.

00:48:43.700 --> 00:48:45.580
We're going to make it super easy so it's a one-liner.

00:48:45.580 --> 00:48:46.320
You can get LaTeX.

00:48:46.320 --> 00:48:51.620
In other cases, like, Types is another, many people may or may not have heard of.

00:48:51.620 --> 00:48:53.740
It's sort of a competitor to LaTeX.

00:48:53.740 --> 00:48:57.320
It's another PDF, among other things, PDF engines.

00:48:58.320 --> 00:49:00.740
And it's a phenomenal tool.

00:49:00.740 --> 00:49:03.900
It's, you know, creates incredible output.

00:49:03.900 --> 00:49:11.780
It has a much, to me, like, more sort of natural and scalable programmable interface than LaTeX does.

00:49:12.040 --> 00:49:19.860
We just embed the Types runtime in Quarto because it's not very, there's not much to it.

00:49:19.860 --> 00:49:21.160
You know, it's not huge.

00:49:21.160 --> 00:49:22.620
Yeah, yeah, that's cool.

00:49:22.620 --> 00:49:29.340
If you haven't used Types and you use PDFs, you generate PDFs as part of your day job,

00:49:29.600 --> 00:49:35.580
and you've heard of LaTeX and you have the reaction that every single person that needed to use LaTeX is,

00:49:35.580 --> 00:49:40.600
it's like fondness for the pain it caused and the quality of the documents it generates.

00:49:40.600 --> 00:49:43.680
Oh, it generates incredible, it doesn't get better.

00:49:43.680 --> 00:49:44.920
It doesn't get better.

00:49:44.920 --> 00:49:49.080
Types gets to what I would say is 90% of the quality that LaTeX does.

00:49:49.080 --> 00:49:52.780
There are some microtopography tricks that they haven't quite incorporated yet.

00:49:52.860 --> 00:49:54.560
But they do a number of other things.

00:49:54.560 --> 00:49:58.700
And so Types is genuinely amazing.

00:49:58.700 --> 00:50:01.340
I could not recommend it more strongly.

00:50:01.340 --> 00:50:02.680
It's a little weird to type.

00:50:02.680 --> 00:50:05.520
It's typst.app.

00:50:05.520 --> 00:50:07.100
It's another open source product.

00:50:07.100 --> 00:50:11.380
They have an offering that is sort of like a collaborative editor where you do those things,

00:50:11.380 --> 00:50:12.760
but you can use it as a command line.

00:50:12.760 --> 00:50:18.220
T-Y-P-T-Y-P-S-T.

00:50:18.220 --> 00:50:19.140
T as in typist.

00:50:19.140 --> 00:50:20.960
Typist without an I.

00:50:22.660 --> 00:50:23.220
T-Y-P-S-T.

00:50:23.220 --> 00:50:23.840
That's right.

00:50:23.840 --> 00:50:24.120
Yeah.

00:50:24.120 --> 00:50:24.660
Okay.

00:50:24.660 --> 00:50:25.240
Yeah, got it.

00:50:25.240 --> 00:50:25.480
All right.

00:50:25.480 --> 00:50:25.620
Wow.

00:50:25.620 --> 00:50:27.480
Yeah, we can edit that to the show notes.

00:50:27.480 --> 00:50:31.660
It's hard to phonetically tell me how to type it and search it, but it's amazing.

00:50:31.660 --> 00:50:34.140
Once you know, this is not going to come up.

00:50:34.140 --> 00:50:34.920
It's very searchable.

00:50:34.920 --> 00:50:35.480
Okay.

00:50:35.480 --> 00:50:36.260
I'll put it in the show notes.

00:50:36.260 --> 00:50:38.380
It's a fantastic, fantastic searchable.

00:50:38.380 --> 00:50:43.620
Pandoc supports outputting from Markdown to Types because, of course, they do.

00:50:43.620 --> 00:50:45.980
And so we can do that as well.

00:50:45.980 --> 00:50:47.620
And it's phenomenal.

00:50:47.620 --> 00:50:52.620
It's incredibly, like, I hope in five years we will not have to,

00:50:52.620 --> 00:50:54.120
reach for LaTeX.

00:50:54.120 --> 00:50:55.740
It's early, right?

00:50:55.740 --> 00:50:57.360
It's sort of existed for a couple of years.

00:50:57.360 --> 00:51:01.740
But I am genuinely, the team is extremely impressive.

00:51:01.740 --> 00:51:08.660
It will not surprise anyone if I say it's a Rust application because, again, of course it is.

00:51:08.660 --> 00:51:13.040
But amazingly technical work.

00:51:13.040 --> 00:51:15.420
Compilation is impossibly fast.

00:51:15.420 --> 00:51:21.240
To me, the difference between using LaTeX and Types is the difference between using Mercurial and Git.

00:51:21.240 --> 00:51:29.900
If you ever remember the first experience when you said Git something and you just got the result back and you thought something went wrong, it could not possibly be this fast.

00:51:30.460 --> 00:51:32.400
That's the same impression you have from Types.

00:51:32.400 --> 00:51:36.080
It generates this amazing PDF in, like, 0.2 seconds.

00:51:36.080 --> 00:51:39.840
And you just look at your computer like, I cannot believe this just happened.

00:51:39.840 --> 00:51:41.380
It's really nice.

00:51:41.380 --> 00:51:42.360
So we support that.

00:51:42.360 --> 00:51:44.340
We've made a big investment in Types.

00:51:44.340 --> 00:51:46.540
And so we bundled the runtime.

00:51:46.540 --> 00:51:47.660
Amazing.

00:51:47.660 --> 00:51:49.060
We're bullish on it.

00:51:49.060 --> 00:51:50.340
All right.

00:51:50.340 --> 00:51:52.040
I'm going to have to learn more about this.

00:51:52.040 --> 00:51:52.760
This is very exciting.

00:51:53.760 --> 00:51:54.240
Yeah.

00:51:54.240 --> 00:51:54.460
Okay.

00:51:54.460 --> 00:52:01.500
So that was the one thing I want to talk about was the rough edges of tools like Pandoc and others.

00:52:01.500 --> 00:52:01.940
Yeah.

00:52:01.940 --> 00:52:06.220
The other I want to talk about with you all is continuous integration.

00:52:06.220 --> 00:52:12.680
So you could set up, say, an automation in GitHub where somebody pushes a new version of a notebook.

00:52:12.680 --> 00:52:14.820
It automatically pushes out.

00:52:14.820 --> 00:52:15.100
Yeah.

00:52:15.100 --> 00:52:16.680
So we've got Docker integration.

00:52:16.680 --> 00:52:18.300
We've got GitHub Actions integration.

00:52:18.300 --> 00:52:19.320
What's the story?

00:52:19.860 --> 00:52:20.060
Yeah.

00:52:20.060 --> 00:52:24.920
So if you go in the guide here, I know folks listening won't see this, but we'll just talk through.

00:52:24.920 --> 00:52:25.780
Go to publishing.

00:52:25.780 --> 00:52:31.880
You can see we sort of have this idea of, yeah, I guess you can go to publishing basics there.

00:52:31.880 --> 00:52:32.020
Yeah.

00:52:32.020 --> 00:52:34.320
Overview of everything.

00:52:34.320 --> 00:52:36.060
So we basically have this idea.

00:52:36.060 --> 00:52:40.600
We have a quarto publish command that can kind of publish to lots of different destinations.

00:52:40.600 --> 00:52:46.620
So it can publish to Netlify, GitHub pages, you know, some posit things.

00:52:46.620 --> 00:52:49.580
We have our own little hosting service, Hugging Face Spaces.

00:52:50.260 --> 00:52:52.520
So the idea is we know how to talk to all those.

00:52:52.520 --> 00:52:53.920
And so you can just say quarto publish.

00:52:53.920 --> 00:52:57.940
And it'll remember, oh, you published to this URL before you want to update it.

00:52:57.940 --> 00:53:00.200
So that's like the workhorse for publishing.

00:53:00.200 --> 00:53:02.080
And then all of that works.

00:53:02.080 --> 00:53:04.460
And you can see at the bottom, there's a note publishing with CI.

00:53:04.960 --> 00:53:14.780
And all of this can work by basically like put your token in CI, you know, you know, export the token in the environment, call publish.

00:53:14.780 --> 00:53:21.180
And so lots and lots of people use CI to update things with quarto.

00:53:21.180 --> 00:53:26.440
And they may be, again, they may be publishing to get a pages, maybe Netlify, maybe Hugging Face, maybe another service.

00:53:26.440 --> 00:53:27.000
Yeah.

00:53:27.000 --> 00:53:29.040
You want to give a shout out to Kordo Pub?

00:53:29.040 --> 00:53:30.280
Yes.

00:53:30.280 --> 00:53:31.040
Yeah.

00:53:31.040 --> 00:53:31.940
The Kordo Pub is just a free service.

00:53:31.940 --> 00:53:32.220
I don't know.

00:53:32.220 --> 00:53:33.260
I don't really know much about it.

00:53:33.260 --> 00:53:33.740
What is this?

00:53:34.180 --> 00:53:40.000
It's literally just a free service that you can use to publish static documents and websites.

00:53:40.000 --> 00:53:47.740
And really all we wanted to do here, it doesn't support all the fancy features like authentication and custom domains and all that.

00:53:47.740 --> 00:53:50.080
Our goal, and there are other services that do that.

00:53:50.080 --> 00:53:55.300
But our goal was to have a free service that makes it dead simple to publish your thing.

00:53:55.300 --> 00:53:59.700
You get your own, you know, your own like subdomain and you can just publish stuff.

00:53:59.700 --> 00:54:02.620
So we wanted to be just like, I can definitely publish my thing to the web.

00:54:03.560 --> 00:54:05.660
And so that's kind of what it's for.

00:54:05.660 --> 00:54:11.760
And then if you want to do things like, for example, if you're using GitHub Pages, well, now I can, you know, I can like have it authenticate.

00:54:11.760 --> 00:54:15.000
So only people who have access to the repo have access to the GitHub Pages.

00:54:15.000 --> 00:54:18.500
Or, you know, if I'm using Netlify, I can do all manner of fancy things.

00:54:18.500 --> 00:54:23.160
So it's designed to be simple, easy, and free to kind of get yourself out to the web.

00:54:23.160 --> 00:54:29.480
So I use that like when I'm, if I go give a presentation and I have a slide deck and it's written in Kordo, I just put it on Kordo Pub, you know.

00:54:29.480 --> 00:54:29.940
Yeah.

00:54:29.940 --> 00:54:30.620
Beautiful.

00:54:30.620 --> 00:54:36.820
So I suppose one of the other publishing destinations, other, is just a pile of HTML, CSS.

00:54:36.820 --> 00:54:37.380
That's right.

00:54:37.380 --> 00:54:37.900
Figure that out.

00:54:37.900 --> 00:54:38.620
Exactly.

00:54:38.620 --> 00:54:38.900
Yep.

00:54:38.900 --> 00:54:39.680
Put it wherever.

00:54:39.680 --> 00:54:40.020
Yep.

00:54:40.020 --> 00:54:43.360
It's just going to make, Kordo is just going to make a directory for a website.

00:54:43.360 --> 00:54:46.360
It'll be underscore site, you know, for a PDF.

00:54:46.500 --> 00:54:51.220
It'll be a PDF and throw down some NGINX or Caddy and off you go.

00:54:51.220 --> 00:54:51.580
Exactly.

00:54:51.580 --> 00:54:52.360
Do whatever.

00:54:52.360 --> 00:54:52.700
Yeah.

00:54:52.700 --> 00:54:53.220
That's right.

00:54:53.220 --> 00:54:53.800
That's right.

00:54:53.800 --> 00:55:04.140
One thing I will note about the CI just before we switch subjects is we have a repository that I think we linked to somewhere where we have a number of examples of using GitHub Actions.

00:55:04.140 --> 00:55:15.140
So it's GitHub slash Kordo dev slash Kordo actions that we maintain and we document with a number of different use cases that folks might want to do if they need to like grab dependencies.

00:55:15.140 --> 00:55:15.520
Right.

00:55:15.580 --> 00:55:21.760
So your CI often where the sharp edges are that you're going to have to install R, you're going to have to install Python and so on.

00:55:21.760 --> 00:55:26.400
And so we have sort of, you know, a number of actions that will install Kordo, we'll render it, and we'll publish it.

00:55:26.400 --> 00:55:33.140
So from there, you can just take it where it is, drop some of these into your own repository, and then you're off to the races.

00:55:33.140 --> 00:55:39.320
So this is another place where we're trying to like reduce the sharp edges to like actually get people to see the stuff you built.

00:55:39.320 --> 00:55:39.920
Yeah.

00:55:41.860 --> 00:55:42.440
Yeah, cool.

00:55:42.440 --> 00:55:46.000
I'll link to it in the show notes so people can find it and use it.

00:55:46.000 --> 00:55:47.000
All right.

00:55:47.000 --> 00:55:49.460
We have time maybe.

00:55:49.460 --> 00:55:53.200
If we lightning rounded a little bit, we got time for two things.

00:55:53.200 --> 00:55:54.180
I think we can do it.

00:55:54.180 --> 00:55:54.680
We can do it here.

00:55:54.680 --> 00:56:05.700
So one, this is open source under what license?

00:56:05.700 --> 00:56:06.300
MIT.

00:56:06.300 --> 00:56:10.580
MIT, which basically means that commercially you can do whatever.

00:56:10.580 --> 00:56:15.260
So Kordo is sort of unencumbered in that sense that people can get run of it.

00:56:15.260 --> 00:56:15.440
Yeah.

00:56:15.440 --> 00:56:16.120
That's right.

00:56:16.120 --> 00:56:16.740
Exactly right.

00:56:16.740 --> 00:56:17.060
Yeah.

00:56:17.060 --> 00:56:19.760
What's the business model?

00:56:19.760 --> 00:56:20.960
How does this tie back to Posit?

00:56:20.960 --> 00:56:22.540
Why is this?

00:56:22.540 --> 00:56:34.980
Posit has a product called Posit Connect that is essentially like an, I would call it an enterprise publishing platform for what we call data products.

00:56:35.720 --> 00:56:37.620
And so Posit Connect does a lot of things.

00:56:37.620 --> 00:56:39.080
It publishes shiny apps.

00:56:39.080 --> 00:56:40.040
It does streamlet apps.

00:56:40.040 --> 00:56:40.960
It does dash apps.

00:56:40.960 --> 00:56:41.960
It does flask apps.

00:56:41.960 --> 00:56:43.280
It does apps.

00:56:43.280 --> 00:56:46.080
And it also does content.

00:56:46.080 --> 00:56:48.140
So it does websites or documents.

00:56:48.320 --> 00:56:52.360
And then it adds some things like, oh, you can schedule the content.

00:56:52.360 --> 00:57:00.000
So like, you know, run this, update this once a day, update this website once a day, or whenever this thing updates, you know, send an email to these people.

00:57:00.200 --> 00:57:01.880
So that's the idea.

00:57:01.880 --> 00:57:05.800
So Posit Connect is a commercial product that we sell.

00:57:05.800 --> 00:57:15.040
And so I think from a business model standpoint, if people are successful with Cordo, as obviously we make it very easy to publish it to everywhere.

00:57:15.040 --> 00:57:19.780
We're not trying to privilege, you know, or say, oh, oh, you know, it's a roach motel.

00:57:19.780 --> 00:57:21.620
You have to publish with Posit Connect.

00:57:21.620 --> 00:57:23.140
But we're, you know, we do.

00:57:23.140 --> 00:57:24.100
Hotel California.

00:57:24.100 --> 00:57:24.900
Yeah.

00:57:24.900 --> 00:57:25.200
Yeah.

00:57:25.200 --> 00:57:25.520
We do.

00:57:25.520 --> 00:57:27.800
We do try to have a value added product.

00:57:27.800 --> 00:57:35.600
It focuses, I'd say, honestly, more on the like internal publishing, you know, than the public publishing.

00:57:35.600 --> 00:57:36.660
Yeah, that's cool.

00:57:36.660 --> 00:57:42.500
And just for full disclosure, if people haven't listened to other episodes, you guys have sponsored the show before for Posit Connect.

00:57:42.500 --> 00:57:43.720
And I want to say thank you for that.

00:57:43.720 --> 00:57:43.940
Okay.

00:57:43.940 --> 00:57:44.380
Yeah.

00:57:44.380 --> 00:57:44.620
Awesome.

00:57:44.620 --> 00:57:45.300
I really appreciate it.

00:57:45.300 --> 00:57:47.320
But this is not sponsored, right?

00:57:47.320 --> 00:57:48.980
This is just a Google project.

00:57:48.980 --> 00:57:49.280
So.

00:57:49.280 --> 00:57:50.720
Okay.

00:57:50.720 --> 00:57:55.960
So that was, yeah, that was one of the ones I wanted to talk about.

00:57:55.960 --> 00:57:58.380
Just like how open is it?

00:57:58.380 --> 00:58:02.260
It feels a little bit like the Visual Studio Code model.

00:58:02.260 --> 00:58:03.640
Microsoft makes this.

00:58:03.640 --> 00:58:07.880
It would be awesome if there were some great integrations to Azure and encourage people.

00:58:07.880 --> 00:58:10.480
Oh, right, right, right, right.

00:58:10.480 --> 00:58:12.100
You can do it for whatever, right?

00:58:12.140 --> 00:58:12.920
People love it for whatever.

00:58:12.920 --> 00:58:16.040
But if there's the right use case, then, hey, it's a perfect tool.

00:58:16.040 --> 00:58:17.480
Yeah, a little bit of that.

00:58:17.480 --> 00:58:23.880
We've sort of like, hey, we've tooled this up for internal enterprise usage as much as we can.

00:58:23.880 --> 00:58:28.220
I'd say we've had lots of contributions.

00:58:28.220 --> 00:58:37.800
I think our biggest external contribution was, would you say, Carlos, the folks from Julia added the Julia engine, which is a pretty substantial piece of work.

00:58:37.800 --> 00:58:38.580
Yeah.

00:58:38.960 --> 00:58:43.440
And so we very much like to collaborate and take pull requests.

00:58:43.440 --> 00:58:44.060
Yeah.

00:58:44.060 --> 00:58:45.120
The viewers are welcome, huh?

00:58:45.120 --> 00:58:45.840
For sure.

00:58:45.840 --> 00:58:47.520
Are very welcome.

00:58:47.520 --> 00:58:47.780
Yeah.

00:58:47.780 --> 00:58:54.100
And currently, Quarto is, I think, you know, a large code base that is not super approachable.

00:58:54.100 --> 00:58:56.480
I think that's a fair assessment that we would agree with.

00:58:56.640 --> 00:59:06.460
We are spending a lot of time in 2025 actually figuring out ways to sort of let the community in and sort of change the ways that people can write extensions and sort of make it easier for people to build on it.

00:59:06.460 --> 00:59:11.800
I will say that in contrast to the way that Microsoft does like VS Code versus Codeium, right?

00:59:11.800 --> 00:59:13.780
So we don't have two split products, right?

00:59:13.780 --> 00:59:14.920
So we have just Quarto.

00:59:14.920 --> 00:59:19.860
But it is true that inside Quarto, there are sort of things that only make sense.

00:59:19.860 --> 00:59:23.700
So there's a publish to like RStudio Connect, for example, right?

00:59:23.700 --> 00:59:29.760
So there are things that integrates with RStudio that are inside the Quarto code base that are there because of RStudio.

00:59:29.760 --> 00:59:33.960
Well, I think that's an entirely fair tradeoff that people can make, right?

00:59:33.960 --> 00:59:35.640
They don't have to use those tools if they don't want to.

00:59:35.820 --> 00:59:36.280
Not at all.

00:59:36.280 --> 00:59:36.860
Not at all.

00:59:36.860 --> 00:59:37.120
Yeah.

00:59:37.120 --> 00:59:37.500
Yeah.

00:59:37.500 --> 00:59:39.660
But you want to serve your customers as best you can.

00:59:39.660 --> 00:59:40.380
That's right.

00:59:40.380 --> 00:59:40.640
Yeah.

00:59:40.640 --> 00:59:41.120
Yeah.

00:59:41.120 --> 00:59:43.500
Okay.

00:59:43.500 --> 00:59:47.720
I don't know who wants to take this one, but people know Node.js.

00:59:47.720 --> 01:00:00.840
And one of the great ironies of a lot of these data science tools is a lot of the people working on them, for example, Jupyter themselves, it's kind of like, we'll take one for the team and we'll write all the JavaScript to make it interactive.

01:00:00.840 --> 01:00:03.820
So you all can stick in your data science language and not worry about it.

01:00:03.820 --> 01:00:04.300
That's right.

01:00:04.300 --> 01:00:06.000
It sounds a little bit like that here.

01:00:06.000 --> 01:00:07.960
And so you guys are using Deno.

01:00:07.960 --> 01:00:08.720
Do you know Deno?

01:00:08.720 --> 01:00:11.240
One, how do you say that?

01:00:11.240 --> 01:00:15.860
Two, it's like an alternative to Node.js, right?

01:00:15.860 --> 01:00:17.640
What's the deal with this internal story?

01:00:17.640 --> 01:00:18.120
Yeah.

01:00:18.180 --> 01:00:19.620
I don't know if it's pronounced Deno.

01:00:19.620 --> 01:00:21.780
I just usually pronounce Deno.

01:00:21.780 --> 01:00:23.760
I think Deno's right, right?

01:00:24.140 --> 01:00:24.620
Yeah.

01:00:24.620 --> 01:00:28.820
So it has V8 inside it, just like Node does.

01:00:28.820 --> 01:00:35.140
It's actually founded by the same, by Ryan Dahl, who is the founder of Node, and he's now CEO and founder of Deno, the company behind it.

01:00:36.340 --> 01:00:42.260
So the main thing with Deno is sort of, it really wants to be TypeScript first.

01:00:42.500 --> 01:00:52.580
So you can run JavaScript, but Deno has sort of like a really built-in type checker that uses sort of like, you know, the TypeScript type checker, but it's really quite built in.

01:00:52.960 --> 01:00:57.700
And it has a really advanced capability system for folks that need to bundle things.

01:00:57.700 --> 01:01:01.980
You can run Deno and say, run Deno, but do not allow it to go onto the net, right?

01:01:01.980 --> 01:01:06.940
So run Deno, but do not allow eval to like import other things.

01:01:06.940 --> 01:01:13.540
Run Deno, but allow only access to the file system or do not allow access to the file system or do not allow.

01:01:13.540 --> 01:01:16.840
So they have a really fine grained capability system that is quite nice.

01:01:18.120 --> 01:01:30.140
And for us, so that was, so one of the things that we wanted was something that sort of let us just do that and quick and sort of, it's easily also embeddable.

01:01:30.140 --> 01:01:33.360
So Deno is like a single binary that you get to ship and you get V8 with it.

01:01:33.360 --> 01:01:36.380
And so we just bundle Deno internally.

01:01:36.380 --> 01:01:44.920
And so it's just a pleasant like modern alternative to Node where most of the standard library and all of those are TypeScript first.

01:01:45.460 --> 01:01:48.260
And so you have the really nice type annotations.

01:01:48.260 --> 01:01:51.980
The standard library is all in TypeScript and you get access to that.

01:01:51.980 --> 01:01:54.640
And so that's what drew us to it.

01:01:54.640 --> 01:01:54.900
This is cool.

01:01:54.900 --> 01:01:55.580
Yeah.

01:01:55.580 --> 01:01:56.360
I didn't know.

01:01:56.360 --> 01:01:58.720
I mean, I'd heard of it, but I hadn't really paid much attention.

01:01:58.720 --> 01:01:59.780
Wow.

01:01:59.780 --> 01:02:00.300
It's popular.

01:02:00.300 --> 01:02:04.480
A hundred thousand GitHub stars and it's less than two years old or something like that.

01:02:04.480 --> 01:02:04.800
It's not.

01:02:04.800 --> 01:02:05.300
Yeah.

01:02:05.300 --> 01:02:06.120
Yeah.

01:02:06.120 --> 01:02:07.340
It's quite popular.

01:02:07.340 --> 01:02:09.060
They have a number of interesting things.

01:02:09.060 --> 01:02:17.740
So the company is built behind and trying to use this Deno deploy, which is sort of like this, you know, serverless where you ship TypeScript edge computing.

01:02:17.740 --> 01:02:22.000
And so, you know, you can have like a very small piece of TypeScript instead of having Node that runs on the edge.

01:02:22.000 --> 01:02:24.420
And so that kind of, that's their business model.

01:02:24.420 --> 01:02:29.080
For us, it's just a modern alternative to Node with all the lessons.

01:02:29.080 --> 01:02:29.660
Awesome runtime.

01:02:29.660 --> 01:02:30.540
Yeah.

01:02:30.540 --> 01:02:31.300
You can have that.

01:02:31.300 --> 01:02:31.620
That's cool.

01:02:32.580 --> 01:02:41.520
All right, guys, I think we're out of time here as much as I want to talk more about it, but let's leave it with a little bit of a call to action.

01:02:41.520 --> 01:02:43.300
People are interested with Quarto.

01:02:43.300 --> 01:02:44.440
Yep.

01:02:44.440 --> 01:02:45.400
They want to get started.

01:02:45.400 --> 01:02:46.020
What do you all tell them?

01:02:46.020 --> 01:02:57.120
I would go, I would go to the Quarto.org website and I would literally just, there's a get started button and it basically will let you pick your tool, whatever VS Code or Jupyter or just NeoVim.

01:02:57.120 --> 01:03:04.280
And then it'll take you through a tutorial that's step-by-step that shows you the basic mechanics of the tool.

01:03:04.280 --> 01:03:11.260
And then it shows you how to, how it works with computations, how you can embed code and run the code and control how the code is run and all that.

01:03:11.260 --> 01:03:17.420
So I think if you go through that tutorial, it'll probably take you, you know, half an hour or something like that.

01:03:17.420 --> 01:03:25.500
You will have a very strong, you'll be up and running and you'll have a, you'll be in your favorite tool and you'll have a very strong idea of what the thing can do and how it's useful.

01:03:25.680 --> 01:03:30.400
And then from there, I'd kind of just go back to the homepage and sort of browse through and say, okay, what can I do with this?

01:03:30.400 --> 01:03:34.680
So I can make dashboards, I can make presentations, I can make reports, I can make websites.

01:03:34.680 --> 01:03:39.720
And I think it'll be easier to connect concretely with those things once you've gone through the tutorial.

01:03:39.720 --> 01:03:45.940
The other thing I want to point out is we have a pretty active discussion forum on GitHub.

01:03:46.900 --> 01:03:49.360
We don't have a Discord, we'll probably fix that in 2025.

01:03:50.800 --> 01:04:09.640
But we do keep a very close eye on both issues and on discussions and sort of, you know, we are, we try very hard to be responsive to everyone and sort of, you know, if people want to share their work or ask questions, sort of take, you know, the, the quarter sort of documentation and then figure out like, you know, okay, what are the things?

01:04:09.680 --> 01:04:11.220
How do I put them together and they have questions?

01:04:11.220 --> 01:04:15.540
We are like, we keep a really, really close eye on that and we try to be very responsive.

01:04:15.540 --> 01:04:20.760
So I would encourage people to just hop on, on GitHub discussion, ask questions and we'll be there to help you.

01:04:20.760 --> 01:04:21.600
Yeah.

01:04:21.600 --> 01:04:22.380
Excellent.

01:04:23.000 --> 01:04:29.860
It's nice to get some discussions because a lot of times people will come and if there's no discussions, they'll file an issue, which is really a question.

01:04:29.860 --> 01:04:31.820
And you're like, well, when do I close this?

01:04:31.820 --> 01:04:37.180
Because I kind of answered it, but you don't necessarily know you answered it and they don't close it because it's, that's right.

01:04:37.180 --> 01:04:37.520
Yeah.

01:04:37.520 --> 01:04:37.800
That's right.

01:04:37.800 --> 01:04:38.020
Yeah.

01:04:38.020 --> 01:04:39.120
So awesome.

01:04:39.120 --> 01:04:42.380
Well, congratulations, both of you on such a cool project.

01:04:42.380 --> 01:04:45.120
And I know it's, it's doing good things for a lot of people.

01:04:45.120 --> 01:04:47.760
So I want to quickly shout out just the folks.

01:04:47.880 --> 01:05:02.380
So, you know, there's a large number of group folks like inside Posit that both help, like, you know, sort of besides JJ and Charles who contributed early, Christoph Derview, Gordon Woodhull, Charlotte Wickham, Mene, Mikael is a huge help on our issues as well.

01:05:02.380 --> 01:05:06.600
So it, it, it takes, it takes a village and I just want to shout out those folks too.

01:05:06.600 --> 01:05:07.660
Yeah.

01:05:07.660 --> 01:05:08.140
Yes.

01:05:08.140 --> 01:05:09.140
Cool.

01:05:09.140 --> 01:05:09.780
That's excellent.

01:05:09.780 --> 01:05:10.820
All right.

01:05:10.820 --> 01:05:11.440
Bye guys.

01:05:11.440 --> 01:05:11.900
Thanks for being here.

01:05:11.900 --> 01:05:12.320
Thank you.

01:05:12.320 --> 01:05:12.980
Take care.

01:05:12.980 --> 01:05:14.280
Thank you.

01:05:14.280 --> 01:05:15.920
Thank you.

