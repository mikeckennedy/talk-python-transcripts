WEBVTT

00:00:00.000 --> 00:00:03.800
- Everyone out there on YouTube, thanks for being here.


00:00:03.800 --> 00:00:06.280
So excited to have you watching live.


00:00:06.280 --> 00:00:08.840
As always, put your thoughts into the live chat


00:00:08.840 --> 00:00:11.080
and we'll try to make them part of the show.


00:00:11.080 --> 00:00:14.880
And with that, Marcus, welcome to Talk Bythonomy.


00:00:14.880 --> 00:00:17.200
- Hi, Michael, thanks for having me.


00:00:17.200 --> 00:00:19.640
- I'm excited to talk about notebooks


00:00:19.640 --> 00:00:21.520
and all the notebook things.


00:00:21.520 --> 00:00:23.480
This is gonna be a very broad,


00:00:23.480 --> 00:00:25.560
not necessarily super deep episode,


00:00:25.560 --> 00:00:28.600
but we're gonna talk about a ton of cool


00:00:28.600 --> 00:00:31.720
little extensions and widgets and libraries


00:00:31.720 --> 00:00:35.320
that you can plug into your Jupyter work and make it awesome.


00:00:35.320 --> 00:00:38.360
And I really like talking about these topics


00:00:38.360 --> 00:00:40.320
where it's like, oh, that's only a 10 minute commitment


00:00:40.320 --> 00:00:42.440
to see if it's gonna help me out or not, right?


00:00:42.440 --> 00:00:44.760
And not like some huge framework you gotta learn.


00:00:44.760 --> 00:00:46.760
And there's gonna be a lot for people to take away


00:00:46.760 --> 00:00:49.260
if they do anything at all with notebooks, I think.


00:00:49.260 --> 00:00:53.060
- Yeah, and I think one of the nice things about notebooks


00:00:53.060 --> 00:00:55.860
is they're very easy to use.


00:00:55.860 --> 00:01:01.140
I think the barrier to entry to you just being able to do something tangible with them is


00:01:01.140 --> 00:01:06.580
very low, much more so than maybe a lot of other things.


00:01:06.580 --> 00:01:12.420
Yeah, they're very, very welcoming environments, especially if someone set them up for you,


00:01:12.420 --> 00:01:16.100
if it's one of the hosted ones, or like if you're not in there trying to configure a


00:01:16.100 --> 00:01:22.180
kernel with a special, a special virtual environment, like how do I, how do I get to the right installs


00:01:22.180 --> 00:01:23.180
and why is this there?


00:01:23.180 --> 00:01:26.100
- Yeah, all the other hubs running on Kubernetes.


00:01:26.100 --> 00:01:26.940
- Yes, exactly.


00:01:26.940 --> 00:01:28.540
But once you kind of be on that shell


00:01:28.540 --> 00:01:30.060
and many people have that set up for them,


00:01:30.060 --> 00:01:31.940
then it's ready to roll.


00:01:31.940 --> 00:01:33.540
All right, so gonna be tons of fun


00:01:33.540 --> 00:01:34.600
to talk about these things,


00:01:34.600 --> 00:01:36.740
but before we get to them, let's start with your story.


00:01:36.740 --> 00:01:38.240
How'd you get into programming?


00:01:38.240 --> 00:01:42.220
- How did I get into programming?


00:01:42.220 --> 00:01:45.720
I think sort of started when my parents decided


00:01:45.720 --> 00:01:48.420
to buy a computer when I was eight years old,


00:01:48.420 --> 00:01:49.880
back in the '90s.


00:01:49.880 --> 00:01:55.880
And then at 12, I started to realize,


00:01:55.880 --> 00:01:57.680
oh, you can program these things.


00:01:57.680 --> 00:02:02.760
And some well-intentioned adult bought me a book on C.


00:02:02.760 --> 00:02:06.880
And 12-year-olds and pointers doesn't mix.


00:02:06.880 --> 00:02:07.560
It was horrible.


00:02:07.560 --> 00:02:08.840
See, the easy parts.


00:02:08.840 --> 00:02:09.400
Yeah, exactly.


00:02:09.400 --> 00:02:10.280
Just void star star.


00:02:10.280 --> 00:02:10.880
Come on, kids.


00:02:10.880 --> 00:02:11.400
Get with it.


00:02:11.400 --> 00:02:13.160
Yeah, yeah.


00:02:13.160 --> 00:02:17.520
That was just conceptual a bit too much for a 12-year-old.


00:02:17.520 --> 00:02:22.080
But then luckily, once I got into high school,


00:02:22.080 --> 00:02:25.280
they actually taught us Boral and Delphi.


00:02:25.280 --> 00:02:27.160
I don't know if you ever came across that.


00:02:27.160 --> 00:02:34.120
It was a very easy-to-use, GUI-driven way


00:02:34.120 --> 00:02:35.480
to get into programming.


00:02:35.480 --> 00:02:38.240
And you could do lots of things even


00:02:38.240 --> 00:02:41.760
that a 14-year-old would find exciting, right?


00:02:41.760 --> 00:02:45.120
Not just the C-style, "Hello, world,"


00:02:45.120 --> 00:02:47.560
and I can print numbers in a loop,


00:02:47.560 --> 00:02:50.520
but actually like fun, GUI-like stuff.


00:02:50.520 --> 00:02:53.180
- You know, I never used that,


00:02:53.180 --> 00:02:57.100
but I used Visual Basic and some Windows Forms


00:02:57.100 --> 00:02:57.940
and other stuff.


00:02:57.940 --> 00:03:02.880
And I really think even today, that style development,


00:03:02.880 --> 00:03:07.160
it's kind of withered and it's too bad, right?


00:03:07.160 --> 00:03:09.900
It used to be so amazing.


00:03:09.900 --> 00:03:12.680
You would just go over there, you know, button, text box,


00:03:12.680 --> 00:03:15.120
I click on this thing, here's what it calls.


00:03:15.120 --> 00:03:17.360
The interaction was so simple.


00:03:17.360 --> 00:03:20.400
And now you're doing, you know, maybe you're doing the web


00:03:20.400 --> 00:03:23.000
and it's like, I'm gonna do web pack.


00:03:23.000 --> 00:03:24.820
And then you'll bring in all these things


00:03:24.820 --> 00:03:28.880
and I'm doing TypeScript and then it's all CSS and HTML.


00:03:28.880 --> 00:03:31.380
And I'm not bemoaning that style of development,


00:03:31.380 --> 00:03:34.160
but it's like, that's kind of replaced this.


00:03:34.160 --> 00:03:36.120
Just give me a visual of what it looks like


00:03:36.120 --> 00:03:38.160
and let me build something simple.


00:03:38.160 --> 00:03:41.560
- I feel like it was a very good pedagogical tool


00:03:41.560 --> 00:03:45.280
to teach programming and GUI development.


00:03:45.280 --> 00:03:48.680
I remember we did find things like rectangles on the screen


00:03:48.680 --> 00:03:50.960
that just chased each other around, right?


00:03:50.960 --> 00:03:54.720
And that was like, that was a fun way into programming.


00:03:54.720 --> 00:03:55.560
- Yeah.


00:03:55.560 --> 00:03:59.860
- And I think there's some bits like that still around.


00:03:59.860 --> 00:04:01.320
Isn't it?


00:04:01.320 --> 00:04:03.960
What's the like programming learning language?


00:04:03.960 --> 00:04:06.000
Something with an animal, is it small talk


00:04:06.000 --> 00:04:08.800
or the thing with the turtles?


00:04:08.800 --> 00:04:11.300
- Yeah, yeah, the turtle where you can do some drawing,


00:04:11.300 --> 00:04:12.140
There's that.


00:04:12.140 --> 00:04:12.980
- Yeah, yeah.


00:04:12.980 --> 00:04:14.500
- There's an Anvil actually,


00:04:14.500 --> 00:04:18.260
which is a Python sort of front end


00:04:18.260 --> 00:04:19.460
and back end web framework.


00:04:19.460 --> 00:04:20.300
- Build blocks.


00:04:20.300 --> 00:04:21.580
- It's really, really similar.


00:04:21.580 --> 00:04:23.860
My daughter used that to play with it a lot,


00:04:23.860 --> 00:04:28.860
but yeah, I would love to see like a visual basic pie


00:04:28.860 --> 00:04:30.020
or something like that.


00:04:30.020 --> 00:04:32.060
Like that would be so amazing.


00:04:32.060 --> 00:04:33.540
- Maybe it exists, yeah.


00:04:33.540 --> 00:04:37.100
But like, so that's what I really like started developing


00:04:37.100 --> 00:04:39.060
or programming on my own.


00:04:39.900 --> 00:04:42.020
Then I went to university.


00:04:42.020 --> 00:04:43.820
That was in the early 2000s.


00:04:43.820 --> 00:04:46.660
And they taught us mostly Java, but also


00:04:46.660 --> 00:04:50.940
sort of a weird mix of logic-oriented programming,


00:04:50.940 --> 00:04:52.340
functional programming.


00:04:52.340 --> 00:04:56.260
And I really only ever got in touch with Python


00:04:56.260 --> 00:05:00.900
when I did my master's in the States during some courses.


00:05:00.900 --> 00:05:07.260
And then professionally, I learned proper Python


00:05:07.260 --> 00:05:09.580
when I was working in London.


00:05:09.580 --> 00:05:13.100
And that was a company, Man Group,


00:05:13.100 --> 00:05:15.780
with a lot of really good Python developers.


00:05:15.780 --> 00:05:20.300
And back there, I picked up proper Python


00:05:20.300 --> 00:05:23.820
and stuck with it ever since.


00:05:23.820 --> 00:05:28.780
And if I have a choice, I will stick to it.


00:05:28.780 --> 00:05:30.780
It's interesting that we come from--


00:05:30.780 --> 00:05:33.620
my background was not that different than yours in some ways.


00:05:33.620 --> 00:05:36.660
I did C++ in the early days.


00:05:36.660 --> 00:05:39.180
And you think as you advance in your career


00:05:39.180 --> 00:05:42.260
and you get more technically capable and stuff,


00:05:42.260 --> 00:05:43.500
you would think, well, you're going to be doing


00:05:43.500 --> 00:05:45.600
more intense stuff and more like deep dive.


00:05:45.600 --> 00:05:47.040
Like now you're writing like kernel drivers.


00:05:47.040 --> 00:05:48.540
Like it is for me at least,


00:05:48.540 --> 00:05:49.700
and it sounds like you a little,


00:05:49.700 --> 00:05:52.100
quite the opposite, like more towards some of these


00:05:52.100 --> 00:05:54.300
higher level languages that let you


00:05:54.300 --> 00:05:55.420
build really amazing things,


00:05:55.420 --> 00:05:58.420
but you're not juggling like pointers to pointers


00:05:58.420 --> 00:06:00.900
and like all this crazy aspects, right?


00:06:00.900 --> 00:06:02.860
- I think the first thing,


00:06:02.860 --> 00:06:04.940
like your expectation that you're describing


00:06:04.940 --> 00:06:08.260
is maybe a function of sort of technical expertise.


00:06:08.260 --> 00:06:10.020
And the second development, what actually,


00:06:10.020 --> 00:06:13.540
what you end up doing, right, is a function of age, right?


00:06:13.540 --> 00:06:16.060
That you've like, as you become older,


00:06:16.060 --> 00:06:18.140
you focus more on the high levels.


00:06:18.140 --> 00:06:19.460
- You just want to get stuff done.


00:06:19.460 --> 00:06:20.780
You don't care about showing off


00:06:20.780 --> 00:06:22.300
that you can make this compile, right?


00:06:22.300 --> 00:06:24.780
- What's the shortest way for me to be?


00:06:24.780 --> 00:06:26.780
And very often that's Python.


00:06:26.780 --> 00:06:27.980
- Yeah, yeah, absolutely it is.


00:06:27.980 --> 00:06:29.620
All right, so some real time follow-ups.


00:06:29.620 --> 00:06:30.740
Audiences, help us out here.


00:06:30.740 --> 00:06:33.220
Don says, "Delphi is a wonderful way


00:06:33.220 --> 00:06:35.300
back into Pascal from the college days."


00:06:35.300 --> 00:06:37.420
Indeed, and some of those languages,


00:06:37.420 --> 00:06:40.260
Logo was one of these visual building ones,


00:06:40.260 --> 00:06:43.460
as well as the one with the cat is Scratch,


00:06:43.460 --> 00:06:44.940
which what an amazing name.


00:06:44.940 --> 00:06:47.500
I haven't really used Scratch, but that's cool.


00:06:47.500 --> 00:06:48.340
All right, how about--


00:06:48.340 --> 00:06:51.380
- Cats or animals in general seem to be good metaphors


00:06:51.380 --> 00:06:53.160
for teaching programming.


00:06:53.160 --> 00:06:54.640
- Yes, they do.


00:06:54.640 --> 00:06:58.940
And O'Reilly Publishers, the publisher O'Reilly


00:06:58.940 --> 00:07:00.500
has built their entire book series


00:07:00.500 --> 00:07:03.040
on unique animals and programming.


00:07:03.040 --> 00:07:05.660
All right, well, how about now?


00:07:05.660 --> 00:07:07.140
What are you doing these days?


00:07:07.140 --> 00:07:12.500
So right now I am a founding partner at Blue Balance Capital.


00:07:12.500 --> 00:07:20.700
We are a small independent alternative asset management firm based in Vienna, Austria.


00:07:20.700 --> 00:07:26.340
I started this company three years ago with my partners.


00:07:26.340 --> 00:07:31.140
Before that, I worked at an asset management firm in London.


00:07:31.140 --> 00:07:37.140
Yet before that, I worked at Goldman Sachs as a quantitative analyst.


00:07:37.140 --> 00:07:47.140
And so basically, during my professional career, I was always more a sort of data analyst,


00:07:47.140 --> 00:07:50.140
rather than a systems developer.


00:07:50.140 --> 00:07:56.140
So everything, or most of the things I use Python for are more from the perspective of


00:07:56.140 --> 00:08:03.060
here's a piece of data. And I want to sort of analyze that data set to better understand


00:08:03.060 --> 00:08:10.580
like, I don't know, a company or an economic trend or an industry or a particular trade.


00:08:10.580 --> 00:08:16.940
So I was always interested in Python in the context of like some data set in some insight


00:08:16.940 --> 00:08:21.240
that you can glean from analyzing that data set.


00:08:21.240 --> 00:08:25.320
How much of that was taking a block of historical data,


00:08:25.320 --> 00:08:31.280
like here's the last quarters, and reports or whatever,


00:08:31.280 --> 00:08:34.240
versus trying to make predictions,


00:08:34.240 --> 00:08:37.720
like real-time trading or other types of real-time


00:08:37.720 --> 00:08:38.560
information?


00:08:38.560 --> 00:08:42.120
So I think the starting point is almost always


00:08:42.120 --> 00:08:44.760
some kind of time series.


00:08:44.760 --> 00:08:50.320
And then the asset management for Mancubra


00:08:50.320 --> 00:08:53.560
was they were actually developing automated trading


00:08:53.560 --> 00:08:54.280
systems.


00:08:54.280 --> 00:08:55.960
So it was very much the first thing


00:08:55.960 --> 00:09:01.000
you described, where you have an input that is a time series,


00:09:01.000 --> 00:09:04.120
you apply some transformation, and then a computer actually


00:09:04.120 --> 00:09:07.600
produces trades on the back of that.


00:09:07.600 --> 00:09:11.000
Whereas at other times, more like what I do now,


00:09:11.000 --> 00:09:14.160
is you think about it, you get some insight from the data,


00:09:14.160 --> 00:09:17.520
but then there's also some other real-world considerations


00:09:17.520 --> 00:09:21.800
or exogenous factors that you think about as a human person


00:09:21.800 --> 00:09:23.140
and then make your decision.


00:09:23.140 --> 00:09:26.360
So I think for me, it was the whole gamut of sort of,


00:09:26.360 --> 00:09:30.520
the product is a direct trade that a machine puts on


00:09:30.520 --> 00:09:32.440
or a trade that you put on,


00:09:32.440 --> 00:09:35.760
or maybe just some advice that you give to a company.


00:09:35.760 --> 00:09:36.580
- Right, right.


00:09:36.580 --> 00:09:37.920
We're thinking that tech,


00:09:37.920 --> 00:09:40.520
generally the tech indexes are going down


00:09:40.520 --> 00:09:42.480
over the next three months versus,


00:09:42.480 --> 00:09:44.560
buy today, sell tomorrow, yeah?


00:09:44.560 --> 00:09:46.120
Buy now, sell tomorrow. - Predictions are hard,


00:09:46.120 --> 00:09:48.440
- Especially about the future, yeah.


00:09:48.440 --> 00:09:53.120
- Yeah, well, especially now with COVID and wars and like.


00:09:53.120 --> 00:09:58.080
- I mean, I have been in finance for more than 10 years now,


00:09:58.080 --> 00:10:01.100
but I've never seen anything like the last two years.


00:10:01.100 --> 00:10:03.080
- Yeah, it's nuts.


00:10:03.080 --> 00:10:05.320
- I think much more happened in the last two years


00:10:05.320 --> 00:10:06.840
than in the 10 years before.


00:10:06.840 --> 00:10:10.720
- It is living through some history, isn't it?


00:10:10.720 --> 00:10:13.480
One more question on this background side of things.


00:10:15.000 --> 00:10:17.720
You did a lot of work for these other companies like Goldman,


00:10:17.720 --> 00:10:20.720
and now you're founding a smaller company.


00:10:20.720 --> 00:10:23.160
How do you feel that your programming


00:10:23.160 --> 00:10:25.880
and data science background has suited you


00:10:25.880 --> 00:10:29.720
to be more of leading this new company?


00:10:29.720 --> 00:10:36.300
- I think I have a great sort of education


00:10:36.300 --> 00:10:41.120
from both Goldman as well as Man Group.


00:10:41.120 --> 00:10:45.080
They're both very technically capable organizations


00:10:45.080 --> 00:10:47.520
with a lot of very smart people.


00:10:47.520 --> 00:10:51.880
And as I was starting out together with my partners


00:10:51.880 --> 00:10:53.220
as a very small team,


00:10:53.220 --> 00:10:55.920
one of the things that gave me comfort


00:10:55.920 --> 00:10:58.240
is that I have this stack of things


00:10:58.240 --> 00:10:59.800
that I know work together,


00:10:59.800 --> 00:11:01.600
I understand how they work together


00:11:01.600 --> 00:11:04.540
and how to sort of apply them to do useful things.


00:11:04.540 --> 00:11:09.000
So having that sort of under your tool belt,


00:11:09.000 --> 00:11:13.800
ready to go and not having to figure out sort of how to go together. But just on day one,


00:11:13.800 --> 00:11:21.160
here's an AWS instance or EC2 instance, spin it up, get a notebook running and produce some nice


00:11:21.160 --> 00:11:26.280
charts like that. That was something very valuable for me to just be able to do very quickly.


00:11:26.280 --> 00:11:33.080
Yeah, cool. That's what I would think. And I feel even if you have these skills, even if you're not


00:11:33.080 --> 00:11:38.760
the one writing, if you hire a team or you find a consultant, being able to speak with them and


00:11:38.760 --> 00:11:41.880
understand like, yeah, no, no, I have a recommendation.


00:11:41.880 --> 00:11:45.360
And I think actually this, you know, like, let me tell you, that tool is good, but this


00:11:45.360 --> 00:11:46.680
one is better and it would fit.


00:11:46.680 --> 00:11:49.360
But I think just that's super valuable.


00:11:49.360 --> 00:11:51.000
So I just wanted to kind of check.


00:11:51.000 --> 00:11:54.480
Yeah, like I tried, tried and tested stack of tools.


00:11:54.480 --> 00:11:59.440
And every once in a while you get to branch off and try some new shiny and see if it works,


00:11:59.440 --> 00:12:00.440
see if it sticks.


00:12:00.440 --> 00:12:04.040
But having this trusted thing that you know, and how it works is valuable.


00:12:04.040 --> 00:12:05.040
Yes.


00:12:05.040 --> 00:12:07.120
Like if you're doing JavaScript,


00:12:07.120 --> 00:12:09.240
you wanna have a really trusted tool


00:12:09.240 --> 00:12:11.080
that's been around for at least a month.


00:12:11.080 --> 00:12:11.920
- Yeah.


00:12:11.920 --> 00:12:13.920
- And then some, just kidding.


00:12:13.920 --> 00:12:15.960
Luckily we don't have it quite that bad in Python.


00:12:15.960 --> 00:12:17.200
It's a lot more stability there.


00:12:17.200 --> 00:12:20.760
Okay, well, let's talk about this list,


00:12:20.760 --> 00:12:24.000
which is why we got together and I invited you here,


00:12:24.000 --> 00:12:26.120
is this awesome JupyterList.


00:12:26.120 --> 00:12:27.200
Now, what is it, where'd it come from?


00:12:27.200 --> 00:12:29.580
I mean, most people are familiar with awesome lists,


00:12:29.580 --> 00:12:32.800
but maybe, what's the philosophy of yours?


00:12:33.880 --> 00:12:35.560
- Exactly, yes, so Awesome Lists,


00:12:35.560 --> 00:12:39.560
they're just like curated lists with resources


00:12:39.560 --> 00:12:45.840
that are useful or pertinent to some particular topic.


00:12:45.840 --> 00:12:49.240
And then in this case, it's Jupyter Notebooks.


00:12:49.240 --> 00:12:53.080
So this is really a list of things that,


00:12:53.080 --> 00:12:55.460
like I started it with 20 entries


00:12:55.460 --> 00:12:57.880
and then just put it up on GitHub.


00:12:57.880 --> 00:13:01.220
And then over time, just more people added to that list


00:13:01.220 --> 00:13:02.840
of things they find useful


00:13:02.840 --> 00:13:05.640
that have some relationship with Jupyter.


00:13:05.640 --> 00:13:08.920
And I think that up to this point,


00:13:08.920 --> 00:13:11.240
I think more than 100 people have collaborated


00:13:11.240 --> 00:13:14.360
and added things that they find useful to this list.


00:13:14.360 --> 00:13:16.440
So it's just like living, breathing thing


00:13:16.440 --> 00:13:18.360
of whatever people find useful


00:13:18.360 --> 00:13:20.200
that has a relationship to Jupyter.


00:13:20.200 --> 00:13:23.160
- I still find these very valuable,


00:13:23.160 --> 00:13:25.640
even though a good part of my job...


00:13:25.640 --> 00:13:27.160
Yeah, sorry.


00:13:27.160 --> 00:13:30.760
Even though a good part of my job is like to track what is new,


00:13:30.760 --> 00:13:32.360
what's interesting, what's trending,


00:13:32.360 --> 00:13:34.600
I find so many things that are new here.


00:13:34.600 --> 00:13:38.240
And when I first got to Python, I was like, wow, look,


00:13:38.240 --> 00:13:39.400
it just keeps going.


00:13:39.400 --> 00:13:41.720
I just thought there was three web frameworks


00:13:41.720 --> 00:13:43.760
or just one way to talk to a database.


00:13:43.760 --> 00:13:44.640
Look how many there are.


00:13:44.640 --> 00:13:45.480
It's so amazing.


00:13:45.480 --> 00:13:47.720
And it's always delightful.


00:13:47.720 --> 00:13:50.800
- It's kind of like, you probably remember


00:13:50.800 --> 00:13:53.240
like back in the old days of the internet,


00:13:53.240 --> 00:13:55.240
you had directories, right?


00:13:55.240 --> 00:13:57.080
- I mean, that was Yahoo.


00:13:57.080 --> 00:13:58.640
- That was the core search engines, right?


00:13:58.640 --> 00:13:59.480
- Yes.


00:13:59.480 --> 00:14:00.960
- You had these like catalogs of things


00:14:00.960 --> 00:14:03.540
And here's a website that is about cats,


00:14:03.540 --> 00:14:05.000
and here's one about dogs.


00:14:05.000 --> 00:14:08.160
And in some ways, it feels like in this day and age,


00:14:08.160 --> 00:14:09.880
we have come back to you actually


00:14:09.880 --> 00:14:14.160
have a person who is keeping some kind of directory of things


00:14:14.160 --> 00:14:17.200
that are useful or pertinent to a particular topic.


00:14:17.200 --> 00:14:18.360
It's kind of funny that way.


00:14:18.360 --> 00:14:24.920
And what's quite interesting for me is sort of one


00:14:24.920 --> 00:14:26.680
of the benefits that I have from doing this


00:14:26.680 --> 00:14:29.520
is that I see what other people find useful.


00:14:29.520 --> 00:14:31.720
And so for myself, I just know,


00:14:31.720 --> 00:14:34.520
hey, these are the things that people are using.


00:14:34.520 --> 00:14:36.520
And so I've got a good, pretty good radar


00:14:36.520 --> 00:14:38.840
of the whole Jupyter and notebook ecosystem


00:14:38.840 --> 00:14:42.800
just because I'm sort of curating this thing.


00:14:42.800 --> 00:14:46.160
- Yeah, you probably have had people recommend things


00:14:46.160 --> 00:14:48.000
and you're like, I have no idea what that is,


00:14:48.000 --> 00:14:49.000
but that looks awesome.


00:14:49.000 --> 00:14:50.700
So it belongs on awesome Jupyter.


00:14:50.700 --> 00:14:55.620
- Like I tried to be very inclusionist with this.


00:14:56.440 --> 00:15:00.440
And so when people include things on this list,


00:15:00.440 --> 00:15:04.300
I very rare, more often than not, I include them.


00:15:04.300 --> 00:15:06.140
And even in the cases where I'm like,


00:15:06.140 --> 00:15:09.240
I don't see myself using that,


00:15:09.240 --> 00:15:11.880
but I'm sure there's some category of people


00:15:11.880 --> 00:15:14.940
who might find that useful and it just goes on the list.


00:15:14.940 --> 00:15:19.780
- Yeah, it's, you don't wanna over index


00:15:19.780 --> 00:15:24.300
on your specific use of Jupyter and your, right?


00:15:24.300 --> 00:15:27.420
because we've got astronomers who are using this stuff.


00:15:27.420 --> 00:15:30.100
We've got economists, we've got biologists,


00:15:30.100 --> 00:15:31.580
we've got students, right?


00:15:31.580 --> 00:15:33.140
It's publishers. - Yeah, yeah.


00:15:33.140 --> 00:15:34.960
All sorts of folks, yeah, yeah, yeah.


00:15:34.960 --> 00:15:36.820
People who care more about, I don't know,


00:15:36.820 --> 00:15:40.060
like keeping, doing their computation on a cluster,


00:15:40.060 --> 00:15:42.720
other people who are more into visualization.


00:15:42.720 --> 00:15:44.780
You name it, you have it, yeah.


00:15:44.780 --> 00:15:48.340
- Right, like ML folks might have one concern.


00:15:48.340 --> 00:15:51.020
- A lot of people who use it in education,


00:15:51.020 --> 00:15:52.940
that's actually one of the sections in there


00:15:52.940 --> 00:15:57.460
is a whole section dedicated to education


00:15:57.460 --> 00:15:59.940
and people teaching courses using notebooks


00:15:59.940 --> 00:16:03.620
and what the best tools around that is for like,


00:16:03.620 --> 00:16:07.180
I don't know, maybe even grading homework assignments


00:16:07.180 --> 00:16:10.900
that you distribute to people in the form of notebooks.


00:16:10.900 --> 00:16:12.180
- Yeah, I definitely wanna highlight that


00:16:12.180 --> 00:16:15.000
because my, I haven't talked about it very much,


00:16:15.000 --> 00:16:20.000
but I was a graduate TA, so I graded a lot of calculus,


00:16:20.220 --> 00:16:24.360
a lot of linear algebra and various other applied


00:16:24.360 --> 00:16:27.780
calculating type things like MATLAB type of stuff


00:16:27.780 --> 00:16:30.260
and automating, oh, it would have been good.


00:16:30.260 --> 00:16:31.100
Okay, so--


00:16:31.100 --> 00:16:33.860
- You just replaced yourself with a regression test.


00:16:33.860 --> 00:16:34.940
(laughing)


00:16:34.940 --> 00:16:35.780
- Exactly.


00:16:35.780 --> 00:16:39.780
Submit your calculus test of a continuous integration.


00:16:39.780 --> 00:16:40.820
We'll see how you did.


00:16:40.820 --> 00:16:43.300
(laughing)


00:16:43.300 --> 00:16:44.980
So there's a couple of sections that I'm not sure


00:16:44.980 --> 00:16:47.060
I really wanna dive into 'cause I think,


00:16:48.020 --> 00:16:50.540
and they're not exactly the notebook ones,


00:16:50.540 --> 00:16:55.300
but one is this collaboration education stuff.


00:16:55.300 --> 00:16:56.700
So maybe we could start there.


00:16:56.700 --> 00:16:59.020
And let me just set the stage by saying,


00:16:59.020 --> 00:17:04.020
a little while ago, I met with Sam Lau, I talked with him.


00:17:04.020 --> 00:17:09.660
He and Philip Guo, they did a research project


00:17:09.660 --> 00:17:14.840
where they studied 60 different network environments,


00:17:15.460 --> 00:17:20.460
not just Jupyter, but like Google Colab and 58 others.


00:17:20.460 --> 00:17:23.420
And so just kind of putting it out there,


00:17:23.420 --> 00:17:26.820
like you might think just Jupyter


00:17:26.820 --> 00:17:28.580
versus JupyterLab is the discussion,


00:17:28.580 --> 00:17:31.660
but there's a whole lot of different places


00:17:31.660 --> 00:17:33.360
where you can do notebooks, right?


00:17:33.360 --> 00:17:38.980
- Yeah, some of them, like you can run on your own machine.


00:17:38.980 --> 00:17:40.220
That's sort of what I have


00:17:40.220 --> 00:17:43.380
in this runtime/environment section.


00:17:43.380 --> 00:17:46.980
those things tend to go in there. And there's a separate


00:17:46.980 --> 00:17:52.180
category of I call them in the list hosted notebook solutions


00:17:52.180 --> 00:17:54.580
that those are things that you don't really run on your own


00:17:54.580 --> 00:17:57.420
machine, but they run somewhere in the cloud. So I think


00:17:57.420 --> 00:18:01.100
basically, that is one way you can break them down into


00:18:01.100 --> 00:18:04.220
categories is just do you run them yourself? Or do they run on


00:18:04.220 --> 00:18:05.500
the cloud somewhere else?


00:18:05.500 --> 00:18:09.980
Yeah, one thing that I didn't see on the list, but maybe would


00:18:09.980 --> 00:18:12.020
be kind of its own request.


00:18:12.220 --> 00:18:18.060
Yeah, right. Here we go. Is the Jupyter JupyterLab desktop app.


00:18:18.060 --> 00:18:19.540
Have you seen this?


00:18:19.540 --> 00:18:22.020
Not sure I've seen that.


00:18:22.020 --> 00:18:27.140
Yeah. So what it is, is it's an electron JS app that bundles the


00:18:27.140 --> 00:18:31.700
runtime environment to be JupyterLab. And it comes with


00:18:31.700 --> 00:18:35.060
its own Python and everything. So it's a thing you can hand to


00:18:35.060 --> 00:18:38.220
somebody that runs locally that lets them do notebook stuff


00:18:38.220 --> 00:18:41.500
without them having to have Python installed and set up the


00:18:41.500 --> 00:18:45.340
environments and it just kind of has a little wizard to get it started, which is,


00:18:45.340 --> 00:18:49.220
I'm not sure I would use it personally, but it's pretty interesting.


00:18:49.220 --> 00:18:55.300
it sounds like a very low barrier to entry notebook environment.


00:18:55.300 --> 00:18:56.320
Yeah.


00:18:56.320 --> 00:19:01.460
Yeah. I think it could be good for, you know, like in a school


00:19:01.460 --> 00:19:04.420
environment where you're like, all right, kids just take this and run it.


00:19:04.420 --> 00:19:08.940
I don't want to have to debug why you can't install Python three 10, but you


00:19:08.940 --> 00:19:11.140
need three seven, you know, whatever.


00:19:11.420 --> 00:19:16.540
I think lots of different people have different kinds of Jupyter


00:19:16.540 --> 00:19:18.660
or notebook setups.


00:19:18.660 --> 00:19:21.300
Mine personally tends to be--


00:19:21.300 --> 00:19:24.380
I actually run mine in the cloud because I


00:19:24.380 --> 00:19:27.140
find it convenient to be able to access it


00:19:27.140 --> 00:19:29.100
from different machines.


00:19:29.100 --> 00:19:32.300
So I access it from work, and then I


00:19:32.300 --> 00:19:34.100
can access it from my notebook.


00:19:34.100 --> 00:19:37.100
Even when I'm at a friend's place or something,


00:19:37.100 --> 00:19:40.020
all I need is a browser to access it.


00:19:40.020 --> 00:19:44.340
and I can just continue where I left off on the other machine.


00:19:44.340 --> 00:19:47.180
>> You can probably be closer to the data, right?


00:19:47.180 --> 00:19:48.780
>> Exactly, right, yeah.


00:19:48.780 --> 00:19:51.420
You've got a lot faster pipe,


00:19:51.420 --> 00:19:53.460
and you're not that dependent on what


00:19:53.460 --> 00:20:00.020
your own network situation looks like wherever you are.


00:20:00.020 --> 00:20:01.820
>> Yeah, you're just shipping the answer,


00:20:01.820 --> 00:20:05.580
not the gig of data required to get the answer.


00:20:05.580 --> 00:20:08.380
>> Exactly, right. You've got a pretty beefy machine on


00:20:08.380 --> 00:20:13.980
other game that can deal with all the calculation. So I find that pretty cool. At some point I


00:20:13.980 --> 00:20:20.300
overdid it and even dockerized the whole thing and then I felt like that was getting more in the way


00:20:20.300 --> 00:20:27.340
of it than being helpful. Yeah, like I gave myself a DevOps job. Why did I do that?


00:20:27.340 --> 00:20:31.820
Yeah, exactly. I only maintain one of these installations. Why do I dockerize them?


00:20:31.820 --> 00:20:35.980
Yeah, that's actually a really good point. I have the same philosophy on web apps. It's like,


00:20:35.980 --> 00:20:37.440
"Well, if there's just gonna be one of them,


00:20:37.440 --> 00:20:38.440
and it's just me,


00:20:38.440 --> 00:20:42.160
how much flexibility does this thing really need?"


00:20:42.160 --> 00:20:43.320
Okay.


00:20:43.320 --> 00:20:47.240
So yeah, so there's a whole section on these


00:20:47.240 --> 00:20:50.580
with honestly many places I haven't heard of


00:20:50.580 --> 00:20:52.040
and ways to run it.


00:20:52.040 --> 00:20:55.500
But yeah, let's talk about two things


00:20:55.500 --> 00:20:58.760
in this collaboration education section.


00:20:58.760 --> 00:21:00.680
Three actually, but two are kind of in my mind,


00:21:00.680 --> 00:21:01.520
put them together.


00:21:01.520 --> 00:21:03.520
One is NBGrader, like real quick.


00:21:05.260 --> 00:21:06.980
This is a pretty cool project.


00:21:06.980 --> 00:21:08.700
Tell people about this.


00:21:08.700 --> 00:21:11.780
- So this is pretty much what I described before


00:21:11.780 --> 00:21:13.180
in the abstract.


00:21:13.180 --> 00:21:16.860
If you are a person in education and you teach a course


00:21:16.860 --> 00:21:21.480
and you want your students to do a particular assignment


00:21:21.480 --> 00:21:24.700
and then they send in their submissions,


00:21:24.700 --> 00:21:27.340
you don't wanna hand grade them one by one.


00:21:27.340 --> 00:21:29.940
If what you can do is formalize basically


00:21:29.940 --> 00:21:31.560
what you want the answers to look like


00:21:31.560 --> 00:21:33.780
in a form of regression tests.


00:21:33.780 --> 00:21:36.380
And that is basically what MVGrader is.


00:21:36.380 --> 00:21:38.380
So like you get one notebook


00:21:38.380 --> 00:21:41.180
and you define what you want the answers to look like


00:21:41.180 --> 00:21:44.420
and then it just does the rest of it for you.


00:21:44.420 --> 00:21:45.820
- That's pretty interesting.


00:21:45.820 --> 00:21:47.460
- I've never used it myself


00:21:47.460 --> 00:21:50.220
because I'm not working in academia.


00:21:50.220 --> 00:21:56.160
But like the value prop is obvious with that one.


00:21:56.160 --> 00:21:57.740
- Well, I think there's two values here.


00:21:57.740 --> 00:22:02.180
Obviously the less effort on the instructor


00:22:02.180 --> 00:22:07.180
There's also a little bit of more fairness.


00:22:07.180 --> 00:22:12.500
There's an interesting angle.


00:22:12.500 --> 00:22:16.300
I'm sure that this is true for grading.


00:22:16.300 --> 00:22:18.700
Is it morning and you're rested and patient


00:22:18.700 --> 00:22:21.800
or is it late and you're in a rush and you're frustrated?


00:22:21.800 --> 00:22:23.980
I don't know which affects which


00:22:23.980 --> 00:22:25.300
in terms of how the grades go


00:22:25.300 --> 00:22:27.140
but it's gotta have an effect, right?


00:22:27.140 --> 00:22:31.140
I was talking to some folks who did machine learning


00:22:31.140 --> 00:22:33.500
for discovering planets on Puck Python.


00:22:33.500 --> 00:22:38.500
And they said, after the afternoon coffee and cake


00:22:38.500 --> 00:22:42.140
or cookies or whatever it was they had at this university,


00:22:42.140 --> 00:22:44.740
more exoplanets to be discovered than ever.


00:22:44.740 --> 00:22:45.780
(laughing)


00:22:45.780 --> 00:22:50.780
- Yeah, I was always told to like call people after lunch.


00:22:50.780 --> 00:22:54.020
That's when they are usually most contained


00:22:54.020 --> 00:22:55.620
and most open to.


00:22:55.620 --> 00:22:59.140
- Exactly, and so there's probably a thing about grading.


00:22:59.140 --> 00:23:02.300
So the fact that this doesn't care, it doesn't get coffee.


00:23:02.300 --> 00:23:03.140
It gets a lot of time.


00:23:03.140 --> 00:23:05.700
- And I think there's also like a social science paper


00:23:05.700 --> 00:23:08.860
on like jury verdicts and sort of the harshness


00:23:08.860 --> 00:23:12.140
of jury verdicts over time of day, right?


00:23:12.140 --> 00:23:15.020
- That's a little bit harsh to think about, isn't it?


00:23:15.020 --> 00:23:16.860
Like I got an extra year in prison


00:23:16.860 --> 00:23:19.220
because they were grumpy, right?


00:23:19.220 --> 00:23:21.740
That's not how a judge should work.


00:23:21.740 --> 00:23:24.180
- Yeah, they didn't have their coffee yet.


00:23:24.180 --> 00:23:25.580
- Yeah, yeah.


00:23:25.580 --> 00:23:27.940
So the other angle that I think is interesting with this


00:23:27.940 --> 00:23:32.260
is if you're a student, you get to know


00:23:32.260 --> 00:23:35.060
whether or not you passed that question, right?


00:23:35.060 --> 00:23:37.600
A lot of times when you're doing complicated things,


00:23:37.600 --> 00:23:38.860
it's like, I think this is right,


00:23:38.860 --> 00:23:42.820
but if it's not, it's really straightforward,


00:23:42.820 --> 00:23:46.940
like a calculus, here's what the formula derivative is,


00:23:46.940 --> 00:23:48.380
but it's just slightly more nuanced.


00:23:48.380 --> 00:23:50.260
It's hard to know what the right answer is.


00:23:50.260 --> 00:23:51.500
And so here you're like, well, the test passed,


00:23:51.500 --> 00:23:53.140
so we're good to go, I like that.


00:23:53.140 --> 00:23:56.260
- I had a course like that at university once


00:23:56.260 --> 00:23:58.940
where you could do multiple submissions


00:23:58.940 --> 00:24:00.860
and the system would tell you


00:24:00.860 --> 00:24:02.540
like how many points you scored


00:24:02.540 --> 00:24:04.860
and it actually is sort of was very motivating


00:24:04.860 --> 00:24:09.540
to sort of keep going until you score a perfect answer.


00:24:09.540 --> 00:24:11.420
I think having something like that


00:24:11.420 --> 00:24:13.020
in a course would be super cool.


00:24:13.020 --> 00:24:15.380
- I totally agree.


00:24:15.380 --> 00:24:17.380
Before we move on real quick in the audience,


00:24:17.380 --> 00:24:19.780
David says, "I use InBGrader for my teaching.


00:24:19.780 --> 00:24:21.900
"It's super helpful."


00:24:21.900 --> 00:24:23.860
InBGrader identifies wrong answers


00:24:23.860 --> 00:24:26.220
and then you can go in and assign multiple credit.


00:24:26.220 --> 00:24:27.060
- Yeah, I love it.


00:24:27.060 --> 00:24:28.940
That's actually really neat.


00:24:28.940 --> 00:24:29.780
Really neat.


00:24:29.780 --> 00:24:30.620
Okay.


00:24:30.620 --> 00:24:34.820
The other one that's more of a educational demonstration


00:24:34.820 --> 00:24:38.180
or exploration is InBeTutor here.


00:24:38.180 --> 00:24:42.440
So InBeTutor lets you go in.


00:24:42.440 --> 00:24:46.540
Will you tell people about it if you're familiar with this?


00:24:46.540 --> 00:24:48.200
- I haven't used it lately.


00:24:48.200 --> 00:24:54.420
- So actually I mentioned Philip Guo and Sam Lau.


00:24:54.420 --> 00:24:58.100
They did Python tutor,


00:24:58.100 --> 00:25:00.740
which lets you go and write some Python code.


00:25:00.740 --> 00:25:03.420
And it shows you basically how it executes


00:25:03.420 --> 00:25:06.300
and how variables are related with pointers and stuff.


00:25:06.300 --> 00:25:07.900
And this is inspired by that.


00:25:07.900 --> 00:25:09.780
So what it lets you, not this one,


00:25:09.780 --> 00:25:12.860
it lets you basically run a,


00:25:12.860 --> 00:25:17.020
what is it a magic command with a percent?


00:25:17.020 --> 00:25:18.220
- It's cell magic.


00:25:18.220 --> 00:25:21.020
- Cell magic, you run some cell magic to turn it on.


00:25:21.020 --> 00:25:22.640
And then to the right of the cell,


00:25:22.640 --> 00:25:24.280
that starts showing the pointers


00:25:24.280 --> 00:25:25.380
and how things are relating.


00:25:25.380 --> 00:25:28.080
So if you're trying to understand computer science


00:25:28.080 --> 00:25:30.880
and things, I think this would be cool for teaching.


00:25:30.880 --> 00:25:33.200
- And you have your code and all you have to stick on


00:25:33.200 --> 00:25:36.120
to get the visualization is this one short cell magic


00:25:36.120 --> 00:25:38.160
and you get the rest for free.


00:25:38.160 --> 00:25:39.160
That's pretty cool.


00:25:39.160 --> 00:25:40.400
- Yeah, it's really cool.


00:25:40.400 --> 00:25:43.840
They give credit right here to online Python tutor.


00:25:43.840 --> 00:25:47.200
Let's see, there's some other ones.


00:25:47.200 --> 00:25:49.080
The Google, the Jupyter drive one


00:25:49.080 --> 00:25:52.120
to integrate Google drive looks pretty neat.


00:25:52.120 --> 00:25:55.040
I think it's a little bit expired when I opened it.


00:25:55.040 --> 00:25:57.360
- It is very, it is definitely more


00:25:57.360 --> 00:25:59.800
of the experimental flavor.


00:25:59.800 --> 00:26:00.640
- Yeah.


00:26:00.640 --> 00:26:03.080
- And I imagine sort of whoever develops this


00:26:03.080 --> 00:26:05.600
is also on the mercy of Google Drive


00:26:05.600 --> 00:26:08.840
keeping their API stable.


00:26:08.840 --> 00:26:10.480
- Yeah, absolutely.


00:26:10.480 --> 00:26:12.840
- And so I think that is one way,


00:26:12.840 --> 00:26:15.000
or in general, it's a non-trivial question


00:26:15.000 --> 00:26:17.720
figuring out how to best store your notebooks.


00:26:17.720 --> 00:26:18.980
I mean, if you're just one person,


00:26:18.980 --> 00:26:21.560
you can probably stick them into Google Drive.


00:26:21.560 --> 00:26:22.580
- Yeah.


00:26:22.580 --> 00:26:25.940
- But as soon as you have more than a handful


00:26:25.940 --> 00:26:28.780
of people working on the same set of notebooks,


00:26:28.780 --> 00:26:31.420
you probably want a solution


00:26:31.420 --> 00:26:33.580
that is a bit more sophisticated than that.


00:26:33.580 --> 00:26:35.900
- I totally agree.


00:26:35.900 --> 00:26:40.900
One of those solutions might be a proper Git story, right?


00:26:40.900 --> 00:26:42.900
And some of the tools we'll talk about


00:26:42.900 --> 00:26:44.260
are gonna cover that, right?


00:26:44.260 --> 00:26:45.660
- Yes, exactly, yeah.


00:26:45.660 --> 00:26:48.580
- The other one could be a collaborative,


00:26:48.580 --> 00:26:52.180
like a Google Colab or some other,


00:26:52.180 --> 00:26:54.020
one of these other environments where it's like Google Docs.


00:26:54.020 --> 00:26:55.980
- There's hosted environments that sort of have that


00:26:55.980 --> 00:26:59.060
as a built-in or you basically, the other way is


00:26:59.060 --> 00:27:01.460
you roll your own and make it Git-based


00:27:01.460 --> 00:27:04.300
and both have their advantages and disadvantages.


00:27:04.300 --> 00:27:09.300
I think with Git, you always like know a little bit better


00:27:09.300 --> 00:27:11.420
what you have and what it does.


00:27:11.420 --> 00:27:14.160
Whereas with the other one, that might come


00:27:14.160 --> 00:27:17.300
with some other fringe benefits like being able


00:27:17.300 --> 00:27:21.580
to comment on it or having versions of the notebook


00:27:21.580 --> 00:27:23.780
very nicely integrated with your GUI.


00:27:23.780 --> 00:27:28.460
So it's like whatever you prefer, like both work.


00:27:28.460 --> 00:27:31.780
- Yeah, the online ones often have like infrastructure


00:27:31.780 --> 00:27:33.860
that comes with them too, right?


00:27:33.860 --> 00:27:36.220
The ability to press go and run it on a GPU


00:27:36.220 --> 00:27:37.420
if you're willing to pay.


00:27:37.420 --> 00:27:38.980
- Yeah, yeah, yeah, yeah.


00:27:38.980 --> 00:27:41.220
- Yeah, cool, okay.


00:27:41.220 --> 00:27:45.060
I think that probably is the interesting ones


00:27:45.060 --> 00:27:46.860
that jumped out at me from there.


00:27:46.860 --> 00:27:50.020
And then our next one is visualization.


00:27:50.020 --> 00:27:52.740
I mean, this is at the heart of the value of notebooks


00:27:52.740 --> 00:27:54.340
in the first place.


00:27:54.340 --> 00:27:57.380
So, Altair, tell us about that.


00:27:57.380 --> 00:28:00.460
- So, I'm very unbiased,


00:28:00.460 --> 00:28:03.940
even though I'm not a developer of Altair,


00:28:03.940 --> 00:28:08.540
I think what that team has developed is pretty amazing.


00:28:08.540 --> 00:28:12.200
I use it for most of the things,


00:28:12.200 --> 00:28:15.540
for most of my visualization needs,


00:28:15.540 --> 00:28:16.820
or almost exclusively.


00:28:16.820 --> 00:28:22.140
What's neat about Altair is that it is declarative,


00:28:22.140 --> 00:28:24.660
and it is built on top of a technology,


00:28:24.660 --> 00:28:28.700
on top of another package, which is called Vega.


00:28:28.700 --> 00:28:35.660
And Vega is a platform agnostic visualization framework.


00:28:35.660 --> 00:28:38.060
So basically, what you have to do


00:28:38.060 --> 00:28:40.460
is, if you want to have a chart like that,


00:28:40.460 --> 00:28:44.380
you just write some JSON declaration of, basically,


00:28:44.380 --> 00:28:45.500
Here's your data set.


00:28:45.500 --> 00:28:47.900
This is the URL to the data set.


00:28:47.900 --> 00:28:49.780
It's a tabular format.


00:28:49.780 --> 00:28:53.980
The variable that I want on the x-axis is called foo.


00:28:53.980 --> 00:28:57.980
The variable that I want on the y-axis is called bar.


00:28:57.980 --> 00:28:59.380
And I want a scatter plot.


00:28:59.380 --> 00:29:02.740
And please make origin in this example here.


00:29:02.740 --> 00:29:04.820
Please make that the color of the dots.


00:29:04.820 --> 00:29:07.700
And you just specify that in a declarative format.


00:29:07.700 --> 00:29:10.940
And then what that allows you to do


00:29:10.940 --> 00:29:15.940
is you can create this declaration from Python,


00:29:15.940 --> 00:29:19.040
but it might just as well be JavaScript


00:29:19.040 --> 00:29:23.040
or even like a handwritten JSON, right?


00:29:23.040 --> 00:29:23.880
So-- - Right.


00:29:23.880 --> 00:29:26.180
There's some kind of JSON data.


00:29:26.180 --> 00:29:32.080
Basically Altair generates that data set


00:29:32.080 --> 00:29:34.180
that goes down to the next layer, right?


00:29:34.180 --> 00:29:35.020
- Exactly.


00:29:35.020 --> 00:29:38.880
So like Altair is the Python binding on top of Vega.


00:29:39.940 --> 00:29:44.940
And I think sort of declarative systems,


00:29:44.940 --> 00:29:48.140
most of the time they have a higher level of abstraction.


00:29:48.140 --> 00:29:51.320
They have more concise notation.


00:29:51.320 --> 00:29:54.660
And the way I always explain this to people


00:29:54.660 --> 00:29:56.240
when they ask about it is,


00:29:56.240 --> 00:30:01.480
Vega and Altair is to visualization


00:30:01.480 --> 00:30:05.260
what SQL is to data querying, right?


00:30:05.260 --> 00:30:09.920
Your SQL query, you can execute that from within Python,


00:30:09.920 --> 00:30:12.040
you can execute it from within a GUI.


00:30:12.040 --> 00:30:16.880
It's sort of a language agnostic specification


00:30:16.880 --> 00:30:19.100
of what data you want to query.


00:30:19.100 --> 00:30:23.120
And this is basically the same thing for visualizations.


00:30:23.120 --> 00:30:26.040
- Yeah, it looks really great.


00:30:26.040 --> 00:30:29.200
There's a beautiful picture of a scatter plot


00:30:29.200 --> 00:30:32.160
with a legend and multiple colors


00:30:32.160 --> 00:30:35.400
kind of pulling out some nuance in the data.


00:30:35.400 --> 00:30:38.800
And it's like, I don't know how many lines of code


00:30:38.800 --> 00:30:41.800
put that at maybe four if you didn't multi-line one of them?


00:30:41.800 --> 00:30:43.200
I mean, it's really--


00:30:43.200 --> 00:30:46.200
>>You can probably golf it together in four lines


00:30:46.200 --> 00:30:48.320
if you're-- yeah.


00:30:48.320 --> 00:30:49.440
>>Without semicolons.


00:30:49.440 --> 00:30:51.240
If you did semicolons, you could do it one,


00:30:51.240 --> 00:30:52.280
but that would be wrong.


00:30:52.280 --> 00:30:54.480
But like four reasonable lines, you


00:30:54.480 --> 00:30:55.840
could do this beautiful picture.


00:30:55.840 --> 00:31:01.480
>>And that already gives you a quite impressive visualization.


00:31:01.480 --> 00:31:04.200
I think it has some nice defaults,


00:31:04.200 --> 00:31:08.280
like it knows how to nicely space the labels on the axes


00:31:08.280 --> 00:31:11.400
and stuff like that.


00:31:11.400 --> 00:31:13.200
But what it still allows you to do


00:31:13.200 --> 00:31:17.400
is build pretty complex visualizations too.


00:31:17.400 --> 00:31:20.800
So there's this one example where you basically


00:31:20.800 --> 00:31:23.680
have a scatter plot on top, and then on the bottom,


00:31:23.680 --> 00:31:25.800
you have something like a histogram.


00:31:25.800 --> 00:31:31.280
And you can select the range in the histogram at the bottom,


00:31:31.280 --> 00:31:32.920
and there you go.


00:31:32.920 --> 00:31:36.160
And then you get this beautiful interactive animation.


00:31:36.160 --> 00:31:39.580
And you don't actually have to write any imperative code.


00:31:39.580 --> 00:31:42.280
You just specify what you want.


00:31:42.280 --> 00:31:46.160
And Altair and Vega kind of do the rest for you.


00:31:46.160 --> 00:31:49.160
So I write some JavaScript.


00:31:49.160 --> 00:31:54.360
But years ago, I used to see these really nice and beautiful


00:31:54.360 --> 00:31:56.640
animations that were built on D3.


00:31:56.640 --> 00:31:59.720
And I'm like, I want to do cool stuff like that.


00:31:59.720 --> 00:32:01.280
That's really pretty.


00:32:01.280 --> 00:32:02.960
But I don't know any JavaScript.


00:32:02.960 --> 00:32:06.800
And I feel like this is like leveling the playing field


00:32:06.800 --> 00:32:09.800
a little bit more and it allows you to do similar things


00:32:09.800 --> 00:32:11.340
from within Python.


00:32:11.340 --> 00:32:13.680
- It's really nice.


00:32:13.680 --> 00:32:17.040
One of the things that I think it's a little ironic


00:32:17.040 --> 00:32:18.880
is for the people who create these tools,


00:32:18.880 --> 00:32:21.320
like the people who created Altair,


00:32:21.320 --> 00:32:23.880
they have to write so much JavaScript


00:32:23.880 --> 00:32:25.220
and not that much Python, right?


00:32:25.220 --> 00:32:27.220
'Cause they're building these interactive,


00:32:27.220 --> 00:32:29.960
beautiful experiences on the front end for us.


00:32:29.960 --> 00:32:31.360
We get to write the Python


00:32:31.360 --> 00:32:34.360
And there's like a lot of that complex JavaScript


00:32:34.360 --> 00:32:37.480
is encapsulated into these tools


00:32:37.480 --> 00:32:38.660
that we don't have to think about,


00:32:38.660 --> 00:32:40.120
but we get to use, which is great.


00:32:40.120 --> 00:32:42.640
- It's a dirty job, but somebody's gotta do it.


00:32:42.640 --> 00:32:45.600
And like, I have a lot of appreciation


00:32:45.600 --> 00:32:48.560
what those folks are doing for the rest of us.


00:32:48.560 --> 00:32:50.140
- I do too.


00:32:50.140 --> 00:32:52.880
All right, so Altair is number one,


00:32:52.880 --> 00:32:54.560
right on the visualization.


00:32:54.560 --> 00:32:56.120
I mean, it doesn't hurt that it starts with A,


00:32:56.120 --> 00:32:57.960
but also maybe one of the best ones.


00:32:59.600 --> 00:33:02.240
- Some of the other shout outs.


00:33:02.240 --> 00:33:07.240
- In all fairness, these things are usually alphabetized.


00:33:07.240 --> 00:33:14.920
Every once in a while, I put things in the wrong place.


00:33:14.920 --> 00:33:17.160
And by now I even built myself a linter


00:33:17.160 --> 00:33:19.800
that keeps the lists nicely alphabetized.


00:33:19.800 --> 00:33:22.800
- I'm sure that makes a lot of sense.


00:33:22.800 --> 00:33:26.520
So, bokeh is one that's out there that's pretty well known.


00:33:26.520 --> 00:33:27.920
- People use a lot, yeah.


00:33:27.920 --> 00:33:29.300
- Yeah, yeah.


00:33:29.300 --> 00:33:33.820
Do you know one that I saw recently?


00:33:33.820 --> 00:33:34.940
Yeah, go ahead.


00:33:34.940 --> 00:33:36.740
- There's a lot of them, right?


00:33:36.740 --> 00:33:37.580
- There are.


00:33:37.580 --> 00:33:40.640
- I think when you talk about visualization,


00:33:40.640 --> 00:33:43.960
the other very popular ones are probably Matplotlib,


00:33:43.960 --> 00:33:48.140
which probably was one of the first plotting engines


00:33:48.140 --> 00:33:50.500
for our backends for Python.


00:33:50.500 --> 00:33:54.920
And then Seaborn, which kind of like builds on top of that.


00:33:54.920 --> 00:33:56.100
- Right, yeah, absolutely.


00:33:56.100 --> 00:33:57.280
Seaborn is nice.


00:33:57.280 --> 00:34:01.760
One that I've seen just recently on notebooks is TQDM.


00:34:01.760 --> 00:34:05.560
I've always used this from CLI applications.


00:34:05.560 --> 00:34:10.060
And TQDM is a way to just take a for loop


00:34:10.060 --> 00:34:12.400
and whatever you're gonna loop over,


00:34:12.400 --> 00:34:15.680
you just put that in TQDM, bracket that thing,


00:34:15.680 --> 00:34:20.680
and it becomes this live animated progress bar.


00:34:20.680 --> 00:34:24.320
Which is really neat.


00:34:24.320 --> 00:34:28.520
but I've only thought of this as a terminal CLI type of thing


00:34:28.520 --> 00:34:30.920
but it works in notebooks too, I just learned, right?


00:34:30.920 --> 00:34:32.860
- Yes, it does.


00:34:32.860 --> 00:34:35.920
TQDM is one of those like does exactly what it says


00:34:35.920 --> 00:34:37.360
on the team kind of things.


00:34:37.360 --> 00:34:40.000
It does one thing and it does it very, very well.


00:34:40.000 --> 00:34:42.480
- Yeah, it's not an incredible output,


00:34:42.480 --> 00:34:44.160
but at the same time, it's like, you know what?


00:34:44.160 --> 00:34:48.360
I wanna have a little bit of feedback for the users


00:34:48.360 --> 00:34:49.480
or for myself.


00:34:49.480 --> 00:34:52.280
And you're like, okay, it's just literally


00:34:52.280 --> 00:34:55.520
wrap your iterator in TQDM.


00:34:55.520 --> 00:34:59.400
I mean, it's a very natural thing to want.


00:34:59.400 --> 00:35:03.120
Just imagine you've got some long running computation


00:35:03.120 --> 00:35:05.520
over a loop, and you just don't want


00:35:05.520 --> 00:35:08.920
to stare at a blank screen for two minutes.


00:35:08.920 --> 00:35:12.480
You can kind of see how maybe the idea developed from there.


00:35:12.480 --> 00:35:15.400
I've got a lot of those type of things.


00:35:15.400 --> 00:35:20.880
Brian out in the audience says, "HV plot, HoloViews, Bokeh,


00:35:20.880 --> 00:35:23.360
and panel are all awesome and tightly interconnected.


00:35:23.360 --> 00:35:25.020
Yeah, those are really nice.


00:35:25.020 --> 00:35:33.040
Okay, all right, so next one is the publishing.


00:35:33.040 --> 00:35:34.440
This might be also a little bit


00:35:34.440 --> 00:35:36.120
at the very heart of notebooks.


00:35:36.120 --> 00:35:38.480
The original idea of the notebook was,


00:35:38.480 --> 00:35:40.760
I wanna have some explanation


00:35:40.760 --> 00:35:43.800
and then some executable code and then some visualization


00:35:43.800 --> 00:35:46.360
and turn almost like I want to tell the story


00:35:46.360 --> 00:35:49.680
of a research project or something like that, right?


00:35:49.680 --> 00:35:52.840
And so this section, it's right there, isn't it?


00:35:52.840 --> 00:35:54.640
- Yeah, exactly.


00:35:54.640 --> 00:35:58.120
I think it's sort of less clear what this category is


00:35:58.120 --> 00:36:00.320
as compared to some of the others,


00:36:00.320 --> 00:36:06.320
but it is basically anything in sort of that space


00:36:06.320 --> 00:36:08.320
of how do you run it?


00:36:08.320 --> 00:36:11.360
How do you tell a story with a notebook?


00:36:11.360 --> 00:36:16.360
How do you point out little things inside those notebooks?


00:36:17.720 --> 00:36:21.800
One of the entries in there that I find quite interesting


00:36:21.800 --> 00:36:24.800
and useful, and it's also pretty awesome


00:36:24.800 --> 00:36:28.800
from a technical perspective, is Binder.


00:36:28.800 --> 00:36:31.000
So what Binder allows you to do is


00:36:31.000 --> 00:36:35.200
you can basically take any GitHub or even GitLab


00:36:35.200 --> 00:36:42.040
or other hosted Git solution URL and put it in there.


00:36:42.040 --> 00:36:48.160
And then what Binder does is it builds a Docker image


00:36:48.160 --> 00:36:52.540
that has all the dependencies of those notebooks


00:36:52.540 --> 00:36:57.080
and builds that image, finds an executable node somewhere


00:36:57.080 --> 00:36:59.880
in the cloud in their infrastructure,


00:36:59.880 --> 00:37:02.920
and then points you to a Jupyter instance


00:37:02.920 --> 00:37:04.800
that has that notebook running.


00:37:04.800 --> 00:37:08.500
So what it allows you to do is you see a notebook on GitHub,


00:37:08.500 --> 00:37:10.120
and you're like, jeez, what if I want


00:37:10.120 --> 00:37:12.400
to poke around with this thing.


00:37:12.400 --> 00:37:15.720
You just go on binder, put in the URL


00:37:15.720 --> 00:37:18.520
and you can play around with a notebook interactively.


00:37:18.520 --> 00:37:20.840
- It's really cool.


00:37:20.840 --> 00:37:23.160
So people have seen the launch binder,


00:37:23.160 --> 00:37:26.800
little tag or whatever you call that on,


00:37:26.800 --> 00:37:29.120
on like a GitHub repo or somewhere else.


00:37:29.120 --> 00:37:31.380
I guess it could even be in an article


00:37:31.380 --> 00:37:34.160
that's then just points back over to one of these.


00:37:34.160 --> 00:37:36.120
If you click it, it just, as you said,


00:37:36.120 --> 00:37:37.840
it's gonna create an executable environment


00:37:37.840 --> 00:37:39.080
with the right dependencies


00:37:39.080 --> 00:37:42.280
and let you run your code there, which it's kind of impressive


00:37:42.280 --> 00:37:45.800
that that's available to the world openly, publicly,


00:37:45.800 --> 00:37:48.120
without authentication, right?


00:37:48.120 --> 00:37:53.120
- Yeah, I mean, it's an incredible engineering feat, right?


00:37:53.120 --> 00:37:59.960
Just all the considerations of like finding a node


00:37:59.960 --> 00:38:03.760
that has like sufficient sort of resources available


00:38:03.760 --> 00:38:06.440
to be able to do that, assembling.


00:38:06.440 --> 00:38:08.880
I mean, basically you don't know what people


00:38:08.880 --> 00:38:12.360
are gonna throw at you in those repos, right?


00:38:12.360 --> 00:38:13.920
And they're doing a pretty good job


00:38:13.920 --> 00:38:18.120
at sort of making a whole lot of notebooks executable.


00:38:18.120 --> 00:38:22.520
- I had Carol Willing, among others on the show recently


00:38:22.520 --> 00:38:24.280
to talk about Mastodon,


00:38:24.280 --> 00:38:27.080
and we talked about like the federated storing.


00:38:27.080 --> 00:38:29.920
There's a bunch of people who are creating servers


00:38:29.920 --> 00:38:32.240
and allowing others to use it,


00:38:32.240 --> 00:38:36.320
sort of volunteering to add a little bit of resources.


00:38:36.320 --> 00:38:39.600
And she said, a lot of what she sees over there


00:38:39.600 --> 00:38:43.360
actually was there's some parallels over in the binder


00:38:43.360 --> 00:38:46.300
space about how certain universities and other places


00:38:46.300 --> 00:38:47.000
are--


00:38:47.000 --> 00:38:50.560
we'll set up the ability to run some of these binders


00:38:50.560 --> 00:38:54.120
to add a little bit of compute and resource to the world.


00:38:54.120 --> 00:38:56.200
And yeah, it's similar.


00:38:56.200 --> 00:38:59.880
- I think it's very amazing.


00:38:59.880 --> 00:39:03.000
From what I can see, what goes on behind the scenes there


00:39:03.000 --> 00:39:06.540
is some of this I think is the execution


00:39:06.540 --> 00:39:10.040
is run on Google hardware.


00:39:10.040 --> 00:39:14.100
So like, and then the beyond Google,


00:39:14.100 --> 00:39:16.580
they have three other hardware providers.


00:39:16.580 --> 00:39:18.620
So not only do they manage to sort of make


00:39:18.620 --> 00:39:21.280
all those notebooks executable,


00:39:21.280 --> 00:39:24.700
but they even run them on four different sets


00:39:24.700 --> 00:39:27.600
of infrastructure, which is pretty amazing.


00:39:27.600 --> 00:39:31.000
- Yeah, very cool.


00:39:31.000 --> 00:39:32.860
Okay, so a couple of others,


00:39:32.860 --> 00:39:35.260
Another one here that really jumps out at me


00:39:35.260 --> 00:39:40.260
is Jupyter book over, let me pull up there.


00:39:40.260 --> 00:39:45.100
So build beautiful publication quality books


00:39:45.100 --> 00:39:48.060
and documents from computational content.


00:39:48.060 --> 00:39:49.120
Now really nice, huh?


00:39:49.120 --> 00:39:50.940
- Yeah.


00:39:50.940 --> 00:39:53.180
So I think they basically,


00:39:53.180 --> 00:39:56.940
I think there's a couple of sort of projects


00:39:56.940 --> 00:39:59.580
that try and do similar things,


00:39:59.580 --> 00:40:03.140
which is basically you create a set of notebooks


00:40:03.140 --> 00:40:08.140
and then you either get a webpage or you get a book.


00:40:08.140 --> 00:40:13.760
And two of the things that these are useful are,


00:40:13.760 --> 00:40:16.140
well, one, you're trying to write a book


00:40:16.140 --> 00:40:17.840
about some subject matter,


00:40:17.840 --> 00:40:22.420
like a machine learning book or something like that.


00:40:22.420 --> 00:40:25.860
And the other case where it's really useful


00:40:25.860 --> 00:40:28.720
is documentation, right?


00:40:28.720 --> 00:40:32.220
If you are a developer or a maintainer of a software package


00:40:32.220 --> 00:40:34.440
and you want to document your API,


00:40:34.440 --> 00:40:38.460
something like that can be very useful.


00:40:38.460 --> 00:40:43.920
What this gives you is not only the ability


00:40:43.920 --> 00:40:45.200
to write documentation,


00:40:45.200 --> 00:40:48.640
but also to include code in that documentation.


00:40:48.640 --> 00:40:52.920
And then in some cases, if you have the binder link,


00:40:52.920 --> 00:40:56.220
you can even set it up so that you've got a piece of code


00:40:56.220 --> 00:41:00.620
in there and people by clicking a tab next to it


00:41:00.620 --> 00:41:03.140
can even try out what that code does,


00:41:03.140 --> 00:41:06.220
fiddle with it a little bit and then see what that does.


00:41:06.220 --> 00:41:11.100
It allows you to do some pretty cool stuff.


00:41:11.100 --> 00:41:13.020
- That's a pretty interesting way to bring it back around.


00:41:13.020 --> 00:41:16.020
Like we've taken this computational thing, got it going,


00:41:16.020 --> 00:41:17.740
turned it into a static book that you have,


00:41:17.740 --> 00:41:19.580
but if you click this button, you can go back.


00:41:19.580 --> 00:41:21.020
- Yeah, yeah, yeah.


00:41:21.020 --> 00:41:23.020
- Yeah, one more, go ahead.


00:41:23.020 --> 00:41:27.200
- Yeah, what we just talked about also


00:41:27.200 --> 00:41:30.360
sounds very much like NBDev,


00:41:30.360 --> 00:41:35.360
which is actually a project that has a very similar flavor


00:41:35.360 --> 00:41:39.660
where it's specifically geared towards people


00:41:39.660 --> 00:41:42.580
who write software packages.


00:41:42.580 --> 00:41:48.140
And the idea there is that you take your code


00:41:48.140 --> 00:41:52.100
and you define your classes inside of a notebook.


00:41:52.100 --> 00:42:02.640
And then people can, so you can both actually have your code live inside that notebook.


00:42:02.640 --> 00:42:06.460
You can also define your tests in that notebook.


00:42:06.460 --> 00:42:11.420
And then some added benefits that you get from that is you can run your tests from a


00:42:11.420 --> 00:42:17.580
notebook and these things don't live in seven different places like your code base and then


00:42:17.580 --> 00:42:20.740
and your test base, and then your documentation repo,


00:42:20.740 --> 00:42:24.180
but they all live together in one space.


00:42:24.180 --> 00:42:26.380
And if you make a change that influences


00:42:26.380 --> 00:42:28.700
or has an impact on all three of them,


00:42:28.700 --> 00:42:31.020
you don't need to do it in three places,


00:42:31.020 --> 00:42:32.580
but you can just do it in the notebook


00:42:32.580 --> 00:42:33.820
where it's all together.


00:42:33.820 --> 00:42:38.380
- Of all the things that plug into Jupyter,


00:42:38.380 --> 00:42:40.560
I think I'm most impressed with NvDev.


00:42:40.560 --> 00:42:43.340
It's really, it's pretty nuts.


00:42:43.340 --> 00:42:44.180
- Yeah, yeah.


00:42:44.180 --> 00:42:47.580
I think this is Donald Knuth, right?


00:42:47.580 --> 00:42:50.500
He called this a literate programming environment.


00:42:50.500 --> 00:42:54.460
And I feel like this is the kind of stuff he envisaged


00:42:54.460 --> 00:42:58.260
way back in like '83 when he wrote his book


00:42:58.260 --> 00:43:00.220
about literate programming, right?


00:43:00.220 --> 00:43:02.120
This is really what he had in mind.


00:43:02.120 --> 00:43:04.300
- It took a while to get there.


00:43:04.300 --> 00:43:05.820
Yeah, the tools he was working with,


00:43:05.820 --> 00:43:07.260
they weren't like these.


00:43:07.260 --> 00:43:09.780
Yeah, so with MBDev, you can have your documentation,


00:43:09.780 --> 00:43:12.380
you can publish, you can take your notebook


00:43:12.380 --> 00:43:15.420
and export it or convert it into,


00:43:15.420 --> 00:43:18.280
or build it into a Python package or a Conda package,


00:43:18.280 --> 00:43:22.340
you can publish it to PyPI and Conda.


00:43:22.340 --> 00:43:25.140
You can have tests, you can have continuous integration.


00:43:25.140 --> 00:43:29.740
Then also you can, if you've got complicated code


00:43:29.740 --> 00:43:31.340
that you need to integrate in other ways,


00:43:31.340 --> 00:43:34.800
you can sync it to Python files and then back.


00:43:34.800 --> 00:43:37.860
I think that two-way integration is pretty cool for this.


00:43:37.860 --> 00:43:39.780
I really need to get this out of the notebook


00:43:39.780 --> 00:43:44.780
into Python directly, but then don't just carve it off,


00:43:44.780 --> 00:43:46.740
like keep them sort of connected, right?


00:43:46.740 --> 00:43:50.020
- Exactly, I think that's one of the key points there


00:43:50.020 --> 00:43:54.160
is that AMP BDEV allows you to do all of these things


00:43:54.160 --> 00:43:55.840
in the same place, right?


00:43:55.840 --> 00:43:59.300
Sure, you can do all of these things separately


00:43:59.300 --> 00:44:01.620
and a lot of people do them separately,


00:44:01.620 --> 00:44:04.400
but then having them all in one place


00:44:04.400 --> 00:44:08.860
is just so much easier when you say, make an API change.


00:44:08.860 --> 00:44:11.260
- Yeah, another one which wasn't really even


00:44:11.260 --> 00:44:13.820
shouted out there in that highlights that they have


00:44:13.820 --> 00:44:17.700
is in be clean, which if you're doing,


00:44:17.700 --> 00:44:19.820
and we talked about the two possible ways for collaboration,


00:44:19.820 --> 00:44:22.460
if you're doing the get way, you know,


00:44:22.460 --> 00:44:25.860
these notebooks, their files contain the output,


00:44:25.860 --> 00:44:27.780
which could-- - Yes, yeah.


00:44:27.780 --> 00:44:32.540
- They're rerun it, it's a merge conflict, right?


00:44:32.540 --> 00:44:34.860
And so this will strip out that kind of information


00:44:34.860 --> 00:44:36.060
to avoid merge conflicts.


00:44:36.060 --> 00:44:40.260
so it can be a real good way to sort of prepare it.


00:44:40.260 --> 00:44:42.940
I suspect that could be a Git pre-commit hook.


00:44:42.940 --> 00:44:44.140
I'm not sure, but probably.


00:44:44.140 --> 00:44:45.660
- Yeah, that's one way to do it.


00:44:45.660 --> 00:44:48.820
And sort of, I think sort of the fact


00:44:48.820 --> 00:44:53.540
that the notebook format contains the cell output


00:44:53.540 --> 00:44:56.900
and also some meta information is a bit of a blessing


00:44:56.900 --> 00:44:58.500
and a curse at the same time.


00:44:58.500 --> 00:45:03.000
On one hand, sort of when you have a notebook file,


00:45:04.980 --> 00:45:08.240
you can load it up and you immediately see the output


00:45:08.240 --> 00:45:11.540
without having to run the cells, right?


00:45:11.540 --> 00:45:14.820
So imagine someone sends you a notebook file


00:45:14.820 --> 00:45:16.720
and you cannot run it on your machine.


00:45:16.720 --> 00:45:19.660
You still get the benefit of seeing what their output was


00:45:19.660 --> 00:45:22.180
when they generated it.


00:45:22.180 --> 00:45:23.520
So it's nice for that.


00:45:23.520 --> 00:45:26.900
It's also nice for the fact that if you put it up on GitHub,


00:45:26.900 --> 00:45:30.700
GitHub can render this notebook file with the output


00:45:30.700 --> 00:45:32.620
in a very nice and sensible way.


00:45:32.620 --> 00:45:34.620
You immediately see what the output was.


00:45:34.620 --> 00:45:40.860
But the disadvantage of doing that is that whenever you rerun it,


00:45:40.860 --> 00:45:44.780
the contents of that file change,


00:45:44.780 --> 00:45:48.500
and it doesn't produce clean diffs, for example.


00:45:48.500 --> 00:45:52.500
If you just change one line and then that line produces a block,


00:45:52.500 --> 00:45:55.780
your diff might be a couple of kilobytes long, right?


00:45:55.780 --> 00:45:57.780
And you don't want that.


00:45:57.780 --> 00:46:00.820
And one of the tools that deals with that


00:46:00.820 --> 00:46:05.820
is something we had on the list, Chupytext.


00:46:05.820 --> 00:46:13.680
So Chupytext is basically,


00:46:13.680 --> 00:46:16.880
so Chupytext deals with this problem


00:46:16.880 --> 00:46:21.420
by basically giving you paired notebooks.


00:46:21.420 --> 00:46:26.420
So you have an IPNB file and you tell your Jupyter IDE,


00:46:29.460 --> 00:46:31.600
In addition to that IPNB file,


00:46:31.600 --> 00:46:35.940
I also want a markdown file or a PY file


00:46:35.940 --> 00:46:38.260
that contains just the input cells.


00:46:38.260 --> 00:46:43.220
And then what you can do is if you want to version


00:46:43.220 --> 00:46:47.300
your notebook is just check in that clean or stripped


00:46:47.300 --> 00:46:53.380
PY file or markdown file and rather ignore the IPNB.


00:46:53.380 --> 00:46:57.980
So that is what we actually do in our company.


00:46:57.980 --> 00:47:01.020
we have a couple of notebooks that serve as a reports


00:47:01.020 --> 00:47:05.460
and we edit them collaboratively.


00:47:05.460 --> 00:47:10.380
And the way we version them is by stripping out the output


00:47:10.380 --> 00:47:11.740
via two-byte text.


00:47:11.740 --> 00:47:14.540
And so you really get nice clean diffs


00:47:14.540 --> 00:47:15.860
and when someone makes a change,


00:47:15.860 --> 00:47:18.720
you can tell what they changed in a reasonable way.


00:47:18.720 --> 00:47:21.100
- Okay, yeah, that's super valuable.


00:47:21.100 --> 00:47:24.700
I do wanna go back to the mbdev for just one second


00:47:24.700 --> 00:47:27.060
because there's a big long list here


00:47:27.060 --> 00:47:29.520
that you would get if you just ran nbdev help.


00:47:29.520 --> 00:47:34.240
And so many that you're like, as a standalone command,


00:47:34.240 --> 00:47:36.200
they'll be like, oh my gosh, what an amazing tool.


00:47:36.200 --> 00:47:39.240
Like another one I just saw is nbdev changelog,


00:47:39.240 --> 00:47:41.600
which will create a changelog.mb file


00:47:41.600 --> 00:47:44.420
just from like your closed and labeled GitHub issues.


00:47:44.420 --> 00:47:47.040
And you know, like that's a cool feature on its own.


00:47:47.040 --> 00:47:50.400
I could see installing that and never even using a notebook


00:47:50.400 --> 00:47:53.400
and just running that on my Git repo, which is, you know.


00:47:53.400 --> 00:47:55.480
So there's a bunch of neat things here.


00:47:55.480 --> 00:47:57.440
- You know, like you look at the list, right?


00:47:57.440 --> 00:47:59.760
You look at the list and what MB dev does


00:47:59.760 --> 00:48:01.800
for more than five minutes,


00:48:01.800 --> 00:48:05.080
and it makes you want to build a software package.


00:48:05.080 --> 00:48:07.680
- Yes, it does.


00:48:07.680 --> 00:48:09.480
Which you could do with MB dev by the way.


00:48:09.480 --> 00:48:10.980
So that's kind of meta.


00:48:10.980 --> 00:48:16.280
All right, let me clean up a few of these things here.


00:48:16.280 --> 00:48:18.780
Another one around there is MB convert.


00:48:18.780 --> 00:48:24.840
- Yeah, so MB convert is, I mean, it's almost there


00:48:25.340 --> 00:48:27.220
in the name, right?


00:48:27.220 --> 00:48:29.500
Basically, one thing it gives you


00:48:29.500 --> 00:48:36.060
is a command line command where you can do nbconvert foo.ipnb


00:48:36.060 --> 00:48:41.100
and say, I want to convert this notebook to HTML.


00:48:41.100 --> 00:48:44.780
So you can script the conversion of notebook


00:48:44.780 --> 00:48:47.300
on a command line level.


00:48:47.300 --> 00:48:51.620
And then beyond that, what you can do with nbconvert


00:48:51.620 --> 00:48:57.280
is also accessible as a Python package.


00:48:57.280 --> 00:49:00.900
So you can control that notebook conversion


00:49:00.900 --> 00:49:03.840
from within your Python code.


00:49:03.840 --> 00:49:06.520
And that is useful for a number of things


00:49:06.520 --> 00:49:09.500
when you really want fine-grained control


00:49:09.500 --> 00:49:15.360
over how you execute or convert your notebook.


00:49:15.360 --> 00:49:17.520
So one of the things that I have built with that


00:49:17.520 --> 00:49:22.000
is basically a way to convert notebooks


00:49:22.000 --> 00:49:24.360
without the input cells.


00:49:24.360 --> 00:49:26.960
So if you wanna build a report out of a notebook


00:49:26.960 --> 00:49:30.000
and you have a non-technical audience


00:49:30.000 --> 00:49:32.600
and you wanna get the code out of their way


00:49:32.600 --> 00:49:34.960
and you really wanna just show them the output,


00:49:34.960 --> 00:49:39.120
that is something you can build with nbconvert.


00:49:39.120 --> 00:49:40.220
- That's really cool.


00:49:40.220 --> 00:49:42.040
I hadn't realized it did that.


00:49:42.040 --> 00:49:44.800
So here's what I wanna show you.


00:49:44.800 --> 00:49:46.760
And if you actually wanna see the code,


00:49:46.760 --> 00:49:50.920
click this binder version or view it statically on GitHub.


00:49:50.920 --> 00:49:52.140
- Yeah, exactly. - But for most people,


00:49:52.140 --> 00:49:55.000
they just wanna see here's the description


00:49:55.000 --> 00:49:57.080
and here's the figures, right?


00:49:57.080 --> 00:50:00.920
But it's still potentially accessible at least.


00:50:00.920 --> 00:50:02.400
- Yeah, yeah, totally.


00:50:02.400 --> 00:50:05.520
And I think notebooks are actually


00:50:05.520 --> 00:50:08.960
a quite nice way to design a report, right?


00:50:08.960 --> 00:50:11.220
Because what you have is building blocks


00:50:11.220 --> 00:50:15.760
and my report is I want the total number of orders


00:50:15.760 --> 00:50:18.920
for the last week and I want a chart.


00:50:18.920 --> 00:50:22.800
And then I want like the number of orders


00:50:22.800 --> 00:50:24.120
by zip code or whatever.


00:50:24.120 --> 00:50:28.000
And you build that in a notebook


00:50:28.000 --> 00:50:31.000
and then you just like in be converted


00:50:31.000 --> 00:50:34.840
with the input stripped out and you get an HTML file


00:50:34.840 --> 00:50:36.880
that you can serve on a web server


00:50:36.880 --> 00:50:39.680
and have something like a dashboard for your team.


00:50:39.680 --> 00:50:44.120
So it's super cool for building things like that.


00:50:44.120 --> 00:50:46.020
- Yeah, yeah, very neat.


00:50:46.020 --> 00:50:50.120
Okay, carry on here.


00:50:50.120 --> 00:50:53.640
One more in this section before we move on.


00:50:53.640 --> 00:50:57.840
There's a bunch, but I think Paper Mill is pretty unique.


00:50:57.840 --> 00:51:00.760
Do you wanna tell people about Paper Mill?


00:51:00.760 --> 00:51:04.240
- I haven't, to be honest, I haven't used it that much.


00:51:04.240 --> 00:51:07.720
- I haven't either, but I did read this


00:51:07.720 --> 00:51:13.560
Netflix Paper Mill article about what they were doing.


00:51:13.560 --> 00:51:17.340
And they were basically using--


00:51:17.340 --> 00:51:18.740
- Cobb-Kelley, yeah.


00:51:18.740 --> 00:51:22.220
- Yeah, they were doing some work to take notebooks


00:51:22.220 --> 00:51:24.420
and use those as like building blocks


00:51:24.420 --> 00:51:26.240
for managing their infrastructure.


00:51:26.240 --> 00:51:31.220
So there were a lot of interesting benefits


00:51:31.220 --> 00:51:36.180
and Paper Mill will let you basically turn the variables


00:51:36.180 --> 00:51:38.660
at the top of the notebook into inputs


00:51:38.660 --> 00:51:41.260
and then the variables at the end of the notebook as outputs


00:51:41.260 --> 00:51:42.700
and you could treat it like a function.


00:51:42.700 --> 00:51:47.440
So they're chaining these together for all sorts of crazy


00:51:47.440 --> 00:51:50.180
DevOps-y type things, I believe.


00:51:50.180 --> 00:51:54.880
It basically sounds like something I once rolled my own of,


00:51:54.880 --> 00:52:00.320
where basically what I just described that I'm doing with nbConvert,


00:52:00.320 --> 00:52:05.120
I once built a version where you could, in the first cell,


00:52:05.120 --> 00:52:07.760
have a variable and serve that like a function input,


00:52:07.760 --> 00:52:11.360
and it sounds like they probably did a much better job of


00:52:11.960 --> 00:52:18.680
Imagine you have a dashboard and then you've got one for the US and you want one for international orders, right?


00:52:18.680 --> 00:52:21.480
Or for canadian or heavy country, right?


00:52:21.480 --> 00:52:25.720
you can basically do that out of the same notebook file


00:52:25.720 --> 00:52:29.400
but just say hey, these are two separate versions


00:52:29.400 --> 00:52:33.400
One for the us one for canada one for mexico, whatever


00:52:33.400 --> 00:52:41.000
Exactly. One of the benefits that they said they were getting was if something goes wrong like if a step crashes


00:52:41.880 --> 00:52:44.000
because as you described the notebook,


00:52:44.000 --> 00:52:48.640
as it executes, it stores the exact output and the inputs.


00:52:48.640 --> 00:52:51.960
It's a snapshot in time of what happened when it went wrong.


00:52:51.960 --> 00:52:54.340
So instead of just having a log message of it went wrong


00:52:54.340 --> 00:52:55.720
and here was the input, it's like,


00:52:55.720 --> 00:52:56.720
well, here are all the steps


00:52:56.720 --> 00:52:58.800
and you can see the variables and the output coming


00:52:58.800 --> 00:52:59.780
and then here's the crash.


00:52:59.780 --> 00:53:02.040
You're like, oh, look, these are the three inputs


00:53:02.040 --> 00:53:02.880
and here's how this one got--


00:53:02.880 --> 00:53:04.600
- It actually gives you nice diagnostics.


00:53:04.600 --> 00:53:07.440
- Yeah, it's like a report of what went wrong.


00:53:07.440 --> 00:53:09.200
- It's almost like a,


00:53:09.200 --> 00:53:12.640
you have these parameterized tests, right?


00:53:12.640 --> 00:53:17.600
It is a parameterized test with some diagnostic output


00:53:17.600 --> 00:53:19.960
about what went wrong during that execution.


00:53:19.960 --> 00:53:21.120
That's pretty cool.


00:53:21.120 --> 00:53:23.600
>>Yeah, it's unique.


00:53:23.600 --> 00:53:27.040
So I think worth a shout out, I suppose, there.


00:53:27.040 --> 00:53:33.680
How about the version control side?


00:53:33.680 --> 00:53:35.640
Anything you want to give a shout out to there?


00:53:35.640 --> 00:53:41.680
That is a section that is a bit more well-defined and clearer


00:53:41.680 --> 00:53:44.080
what goes in there.


00:53:44.080 --> 00:53:46.320
It's basically all sorts of tools


00:53:46.320 --> 00:53:51.960
for diffing, merging, code reviewing, changes in notebooks.


00:53:51.960 --> 00:53:56.800
Nbdime is probably one of the more well-known packages


00:53:56.800 --> 00:53:59.040
in that category.


00:53:59.040 --> 00:54:00.480
That looks very well-built.


00:54:03.920 --> 00:54:08.040
- Basically, so imagine you have an image, right?


00:54:08.040 --> 00:54:10.760
In an IP and B file,


00:54:10.760 --> 00:54:15.520
you would usually get like a horrendously large diff


00:54:15.520 --> 00:54:19.880
if one of the things in that image changes.


00:54:19.880 --> 00:54:22.960
And this just displays it,


00:54:22.960 --> 00:54:25.880
that that diff not has 50 lines that change,


00:54:25.880 --> 00:54:27.760
but just like a neat,


00:54:27.760 --> 00:54:30.100
here's something that changed one line


00:54:30.100 --> 00:54:32.200
and doesn't mess up your whole diff.


00:54:32.200 --> 00:54:35.700
- Right, this plot changed, not these 700 lines


00:54:35.700 --> 00:54:37.480
of plot definition change.


00:54:37.480 --> 00:54:39.960
Yeah, yeah, very cool.


00:54:39.960 --> 00:54:41.740
And merging as well, which is neat.


00:54:41.740 --> 00:54:45.660
All right, well, we're getting a little short on time.


00:54:45.660 --> 00:54:48.540
Let's see, I wanna, I know you wanna give a shout out


00:54:48.540 --> 00:54:50.200
to DeepNote, both because you like them,


00:54:50.200 --> 00:54:52.960
but also they're a sponsor of the--


00:54:52.960 --> 00:54:54.200
- They support the list, yes.


00:54:54.200 --> 00:54:55.160
- They support the list, yeah.


00:54:55.160 --> 00:54:56.560
So maybe tell us about them.


00:54:56.560 --> 00:55:00.640
- So DeepNote is basically one of these


00:55:00.640 --> 00:55:02.880
hosted notebook solutions.


00:55:02.880 --> 00:55:04.400
We already mentioned Binder.


00:55:04.400 --> 00:55:07.240
We already mentioned Colab.


00:55:07.240 --> 00:55:11.120
And they have built one that is a bit more centered


00:55:11.120 --> 00:55:14.880
around collaboration of teams.


00:55:14.880 --> 00:55:19.000
You also get an execution environment


00:55:19.000 --> 00:55:22.960
with different sets of hardware from them.


00:55:22.960 --> 00:55:27.040
And they really emphasize collaboration.


00:55:27.040 --> 00:55:29.560
So you can comment and have discussions


00:55:29.560 --> 00:55:32.680
about individual cells in your notebook,


00:55:32.680 --> 00:55:36.960
you can very nicely see what changes other people did


00:55:36.960 --> 00:55:40.260
to your notebook and all of that in a very well-done,


00:55:40.260 --> 00:55:46.040
very dense GUI that makes a lot of things very easy for you.


00:55:46.040 --> 00:55:50.000
So if you're not already using one of these environments


00:55:50.000 --> 00:55:52.000
and you have a team that is maybe also not


00:55:52.000 --> 00:55:56.440
sort of particularly technically focused


00:55:56.440 --> 00:55:58.640
on like where it runs, how it runs,


00:55:58.640 --> 00:56:01.120
This is a very turnkey solution.


00:56:01.120 --> 00:56:06.120
- Right, less DevOps, more Google Docs type of style.


00:56:06.120 --> 00:56:09.200
- They solve a lot of those problems for you.


00:56:09.200 --> 00:56:10.840
- Yeah, it looks really neat.


00:56:10.840 --> 00:56:15.080
The collaboration seems very, very nice.


00:56:15.080 --> 00:56:17.880
I think that's a pretty unique thing


00:56:17.880 --> 00:56:19.560
to do in a polished way.


00:56:19.560 --> 00:56:22.720
- Yeah, and they also have nice integrations


00:56:22.720 --> 00:56:24.260
for a lot of data sources.


00:56:24.260 --> 00:56:28.140
So you can directly query SQL from their GUI


00:56:28.140 --> 00:56:33.140
in PySQL results into a data frame, right?


00:56:33.140 --> 00:56:36.840
So you can, you have one cell where you write your SQL


00:56:36.840 --> 00:56:39.060
and that goes directly into the data frame


00:56:39.060 --> 00:56:41.400
that you can then visualize in the next cell.


00:56:41.400 --> 00:56:47.360
So the ergonomics of EepNote are probably better


00:56:47.360 --> 00:56:50.400
than many other notebook solutions.


00:56:50.400 --> 00:56:51.400
- Yeah, that's pretty neat.


00:56:51.400 --> 00:56:53.160
And so, like you said, it's worth pointing out


00:56:53.160 --> 00:56:56.960
they're a sponsor of your list, not of our show,


00:56:56.960 --> 00:56:59.120
but they are a commercial thing,


00:56:59.120 --> 00:57:00.840
but they are commercial venture,


00:57:00.840 --> 00:57:03.080
but they do have a free version.


00:57:03.080 --> 00:57:04.400
You know, there's just,


00:57:04.400 --> 00:57:06.760
there's something for me where


00:57:06.760 --> 00:57:10.400
I feel like it's,


00:57:10.400 --> 00:57:12.520
I kind of like to support companies


00:57:12.520 --> 00:57:15.520
that are purpose built, right?


00:57:15.520 --> 00:57:18.560
Like DeepNote is built for running notebooks


00:57:18.560 --> 00:57:19.700
and collaboration,


00:57:19.700 --> 00:57:22.160
whereas a lot of these big tech things,


00:57:22.160 --> 00:57:23.640
it's like, well,


00:57:23.640 --> 00:57:25.440
I know Facebook's a social media company,


00:57:25.440 --> 00:57:26.840
but I could also do this other thing


00:57:26.840 --> 00:57:30.800
that runs on, or I could run this on Google.


00:57:30.800 --> 00:57:32.440
And there's something about like, okay,


00:57:32.440 --> 00:57:35.960
there's a company whose only job is to do this


00:57:35.960 --> 00:57:38.120
versus like, I'm not sure I could ever get support.


00:57:38.120 --> 00:57:39.680
Like if I had a problem with my Gmail,


00:57:39.680 --> 00:57:42.360
I don't know that I could ever get help, ever, right?


00:57:42.360 --> 00:57:44.920
Whereas like, if I went to an email company


00:57:44.920 --> 00:57:47.000
and got email from them, they would help me with email


00:57:47.000 --> 00:57:48.440
'cause it's their thing, right?


00:57:48.440 --> 00:57:51.120
- And I think where it shows is that


00:57:51.120 --> 00:57:54.000
they spent a lot of time thinking about


00:57:54.000 --> 00:58:00.720
how people use notebooks and what they want to do with those notebooks. And sort of, they think a


00:58:00.720 --> 00:58:08.640
bit beyond just sort of the Jupyter technical, but more the ergonomics of how you actually use


00:58:08.640 --> 00:58:15.840
a notebook within a team. And I think sort of, you can definitely tell that they know how to


00:58:15.840 --> 00:58:20.560
use notebooks and have thought about all the ways in which people use notebooks and how to make that


00:58:20.560 --> 00:58:23.720
- Nice, well, I've never used them,


00:58:23.720 --> 00:58:25.920
but if I have the need, I'll check it out.


00:58:25.920 --> 00:58:26.760
Sounds good.


00:58:26.760 --> 00:58:27.600
All right.


00:58:27.600 --> 00:58:29.200
What else?


00:58:29.200 --> 00:58:30.840
Maybe we got time for one more.


00:58:30.840 --> 00:58:32.320
Is there one we haven't talked about yet


00:58:32.320 --> 00:58:34.480
that you're like, "Oh, we really got to cover this one."


00:58:34.480 --> 00:58:38.240
- Let's do Cell Magics, right?


00:58:38.240 --> 00:58:39.080
- Okay.


00:58:39.080 --> 00:58:45.760
- If you maybe just Google for iPython Cell Magics.


00:58:45.760 --> 00:58:49.480
- I'll gag you for it.


00:58:49.480 --> 00:58:52.640
Yeah, they're not actually,


00:58:52.640 --> 00:58:56.120
they are not strictly a Jupyter thing,


00:58:56.120 --> 00:58:59.980
but I think they're a not so well-known thing


00:58:59.980 --> 00:59:01.220
that is super neat.


00:59:01.220 --> 00:59:07.240
And they are, since Jupyter itself started in,


00:59:07.240 --> 00:59:09.560
from, was born out of IPython,


00:59:09.560 --> 00:59:12.200
these are things that are also built into IPython.


00:59:12.200 --> 00:59:15.560
So one of them is, for example, percent debug.


00:59:15.560 --> 00:59:19.000
So when you have a notebook open and you get an exception


00:59:19.000 --> 00:59:23.240
and your code gives you an error message,


00:59:23.240 --> 00:59:27.760
you can then in a cell directly below that type


00:59:27.760 --> 00:59:32.760
percent debug and that will open up a debugger session


00:59:32.760 --> 00:59:35.120
that takes you directly to the point


00:59:35.120 --> 00:59:37.260
where your code fail, right?


00:59:37.260 --> 00:59:40.280
So if you write something like, I don't know,


00:59:40.280 --> 00:59:44.000
I access foo, the array foo,


00:59:44.000 --> 00:59:46.320
at an index position of five, right?


00:59:46.320 --> 00:59:47.840
And that's where your code fails.


00:59:47.840 --> 00:59:50.160
you can do %debug and look at,


00:59:50.160 --> 00:59:52.160
well, at that point in the execution,


00:59:52.160 --> 00:59:55.760
what was actually stored in the list foo?


00:59:55.760 --> 00:59:58.720
And did it actually have five elements


00:59:58.720 --> 01:00:00.560
or did I run out of bounds?


01:00:00.560 --> 01:00:03.000
So like whenever I get an error


01:00:03.000 --> 01:00:06.800
during an execution of a notebook and it's not obvious,


01:00:06.800 --> 01:00:09.200
I like to use %debug to find out


01:00:09.200 --> 01:00:11.360
what's going wrong with my code.


01:00:11.360 --> 01:00:12.960
- Very nice.


01:00:12.960 --> 01:00:16.920
- Another one that is very useful is %time.


01:00:16.920 --> 01:00:21.920
which is a, have you used that?


01:00:21.920 --> 01:00:24.760
- No, but I often want to answer this question.


01:00:24.760 --> 01:00:28.520
I'm like, is this getting a little bit faster


01:00:28.520 --> 01:00:29.360
or a little bit slower?


01:00:29.360 --> 01:00:31.200
And I don't really want to go into a profiler


01:00:31.200 --> 01:00:34.560
and I don't want to go to like write the date time


01:00:34.560 --> 01:00:36.840
or timestamp code to like print it out myself.


01:00:36.840 --> 01:00:38.140
It's just like, yeah.


01:00:38.140 --> 01:00:42.160
- I use it a lot in those situations where like,


01:00:42.160 --> 01:00:45.160
I've got way A to do something


01:00:45.160 --> 01:00:47.320
and wait B to do something, right?


01:00:47.320 --> 01:00:51.000
And then I wonder, is this actually faster


01:00:51.000 --> 01:00:54.380
or is this actually performance wise worse


01:00:54.380 --> 01:00:56.920
than doing it the other way?


01:00:56.920 --> 01:01:00.400
And this gives you just a very quick and dirty answer


01:01:00.400 --> 01:01:02.120
to like orders of magnitude.


01:01:02.120 --> 01:01:03.160
Is this the same level


01:01:03.160 --> 01:01:04.800
or should I be doing things differently?


01:01:04.800 --> 01:01:06.800
It's very useful for that.


01:01:06.800 --> 01:01:09.200
- Yeah, percent time and some function call


01:01:09.200 --> 01:01:11.240
and see what it takes.


01:01:11.240 --> 01:01:12.680
- It's brilliant.


01:01:12.680 --> 01:01:16.120
And then another one I want to mention


01:01:16.120 --> 01:01:22.760
is just exclamation point and then the shell command.


01:01:22.760 --> 01:01:25.680
It's very useful for--


01:01:25.680 --> 01:01:27.760
I think it's also available as %sx.


01:01:27.760 --> 01:01:33.720
So it's basically a shorthand.


01:01:33.720 --> 01:01:40.080
So you can do exclamation point ls to do a directory listing


01:01:40.080 --> 01:01:42.200
just to see what is in the directory.


01:01:42.200 --> 01:01:44.600
or you can do, I don't know,


01:01:44.600 --> 01:01:48.320
who am I to see what user you're running something as,


01:01:48.320 --> 01:01:52.120
or you can ping a machine to see if it's up


01:01:52.120 --> 01:01:54.480
directly from your notebook.


01:01:54.480 --> 01:01:58.520
So this is a quick and dirty way


01:01:58.520 --> 01:02:02.240
of running command line commands


01:02:02.240 --> 01:02:04.140
without having to leave your notebook.


01:02:04.140 --> 01:02:06.400
- It's really cool.


01:02:06.400 --> 01:02:08.080
You know, if you wouldn't just interact


01:02:08.080 --> 01:02:08.960
with the file system,


01:02:08.960 --> 01:02:10.600
or you see what files are available to me,


01:02:10.600 --> 01:02:12.120
or all these things, right?


01:02:12.120 --> 01:02:14.720
You wouldn't know because this hasn't published yet,


01:02:14.720 --> 01:02:17.280
but in the sequence of when these shows come out,


01:02:17.280 --> 01:02:19.040
I just talked to,


01:02:19.040 --> 01:02:24.040
or you're rooting from a data science command line.


01:02:24.040 --> 01:02:26.200
Have you seen this book?


01:02:26.200 --> 01:02:27.040
- No.


01:02:27.040 --> 01:02:28.120
- Yeah.


01:02:28.120 --> 01:02:30.440
Yeah, so it's got a bunch of interesting things


01:02:30.440 --> 01:02:35.520
that you can do on the command line for like querying data


01:02:35.520 --> 01:02:37.600
or running things in parallel,


01:02:37.600 --> 01:02:39.440
and a whole bunch of these,


01:02:41.480 --> 01:02:42.800
these sort of ideas of like,


01:02:42.800 --> 01:02:45.500
how do I do really cool stuff with the shell?


01:02:45.500 --> 01:02:48.220
And you just use your bang command


01:02:48.220 --> 01:02:50.760
and they become integrated into your notebook, right?


01:02:50.760 --> 01:02:52.940
Which is, I think that's super cool.


01:02:52.940 --> 01:02:56.120
- I mean, you can even take it to do things


01:02:56.120 --> 01:03:01.120
like you do an LS and then your Python session


01:03:01.120 --> 01:03:05.680
gets past the contents of that directory as a list


01:03:05.680 --> 01:03:08.200
and you can then use it as a variable


01:03:08.200 --> 01:03:10.180
and assign that list a variable.


01:03:10.180 --> 01:03:14.460
So it's like, that is really like easy,


01:03:14.460 --> 01:03:17.060
but also like very shoddy way of listing


01:03:17.060 --> 01:03:18.940
the directory contents very quickly.


01:03:18.940 --> 01:03:20.260
- Yeah, I mean, you should probably use that.


01:03:20.260 --> 01:03:21.660
- We shouldn't even mention that.


01:03:21.660 --> 01:03:23.620
- Yeah, don't tell people that.


01:03:23.620 --> 01:03:25.600
But if there's like really interesting stuff


01:03:25.600 --> 01:03:27.940
that's happening on the shell, you wanna use,


01:03:27.940 --> 01:03:29.780
like for example, there's this example says,


01:03:29.780 --> 01:03:34.780
total lines equals, which is a Jupyter level command.


01:03:34.780 --> 01:03:38.060
And then it says, bang, arrow to redirect input


01:03:38.060 --> 01:03:40.380
of some text file word count dash L.


01:03:40.380 --> 01:03:41.620
And that tells you how many lines are there.


01:03:41.620 --> 01:03:44.260
Like, maybe you want to make this all Python.


01:03:44.260 --> 01:03:46.540
So it doesn't, it's not powerful.


01:03:46.540 --> 01:03:49.460
- Sure, if you want to package this up, right?


01:03:49.460 --> 01:03:52.820
In a package, but if you only end up doing it once


01:03:52.820 --> 01:03:55.620
and you just want to know how many lines there are,


01:03:55.620 --> 01:03:56.700
that's a way to do it.


01:03:56.700 --> 01:03:59.700
- Right, you're in like an exploratory situation, right?


01:03:59.700 --> 01:04:00.780
You just generated this file.


01:04:00.780 --> 01:04:02.060
Now you want to know, I don't know.


01:04:02.060 --> 01:04:04.540
So there's, that's a really powerful one.


01:04:04.540 --> 01:04:05.980
I'm glad you brought that up.


01:04:07.900 --> 01:04:11.020
And then just the last one from there is--


01:04:11.020 --> 01:04:15.220
because it definitely saved me in a couple of very hairy


01:04:15.220 --> 01:04:19.420
situations-- is %history.


01:04:19.420 --> 01:04:27.240
So that basically gives you a history of the 20, 10,


01:04:27.240 --> 01:04:31.300
or however many last commands you executed in a Python


01:04:31.300 --> 01:04:33.300
session.


01:04:33.300 --> 01:04:35.740
Why it's sometimes useful is just


01:04:35.740 --> 01:04:39.940
imagine you accidentally delete a cell in a notebook.


01:04:39.940 --> 01:04:43.060
I mean, you can always undo that, right?


01:04:43.060 --> 01:04:44.100
But every once in a while,


01:04:44.100 --> 01:04:48.660
your undo history is so horribly messed up


01:04:48.660 --> 01:04:51.940
that you somehow sort of lost that cell forever.


01:04:51.940 --> 01:04:54.940
And there was like a lot of finely tuned code in that.


01:04:54.940 --> 01:04:57.980
So you can go back to that with percent history


01:04:57.980 --> 01:05:03.980
and get your deleted cells from beyond the grave.


01:05:04.780 --> 01:05:08.260
- Yeah, and you can do percent history dash in five.


01:05:08.260 --> 01:05:10.540
Just show me the last five changes.


01:05:10.540 --> 01:05:13.220
Yeah, it's really nice.


01:05:13.220 --> 01:05:14.820
Cool.


01:05:14.820 --> 01:05:16.740
All right, Marcus, I think we might be out of time,


01:05:16.740 --> 01:05:20.580
but what a cool project this awesome list is.


01:05:20.580 --> 01:05:24.300
- Yeah, I just like, we've got a lot of people listening in.


01:05:24.300 --> 01:05:28.660
I'm sure there's a lot more awesome packages,


01:05:28.660 --> 01:05:33.660
tools, resources that could and should go on this list.


01:05:34.100 --> 01:05:37.980
So if whoever is watching or listening to this


01:05:37.980 --> 01:05:42.700
has a package that they feel should be mentioned there,


01:05:42.700 --> 01:05:45.660
it's just as easy as doing a pull request


01:05:45.660 --> 01:05:49.240
and adding your favorite tool or resource to that list.


01:05:49.240 --> 01:05:53.280
We're very inclusionist on the list, right?


01:05:53.280 --> 01:05:56.620
We like to include people's suggestions.


01:05:56.620 --> 01:05:57.600
- Yeah, fantastic.


01:05:57.600 --> 01:06:00.780
There's a couple that I could see showing up there,


01:06:00.780 --> 01:06:03.260
like a few comments in the live stream


01:06:03.260 --> 01:06:05.760
Those could be PR, so have at it.


01:06:05.760 --> 01:06:06.920
That'd be awesome.


01:06:06.920 --> 01:06:07.760
Yeah. - Awesome.


01:06:07.760 --> 01:06:08.920
- All right, final two questions


01:06:08.920 --> 01:06:10.380
before I let you out of here though.


01:06:10.380 --> 01:06:11.960
If you're gonna write some Python code,


01:06:11.960 --> 01:06:14.120
what editor do you use these days?


01:06:14.120 --> 01:06:15.360
- Jupyter, of course.


01:06:15.360 --> 01:06:16.420
I overuse it.


01:06:16.420 --> 01:06:19.000
- Beautiful.


01:06:19.000 --> 01:06:22.320
And then notable PyPI or conda package


01:06:22.320 --> 01:06:24.980
or something out there, or even a Jupyter plugin.


01:06:24.980 --> 01:06:26.840
I know basically this entire show


01:06:26.840 --> 01:06:28.520
has been one after another,


01:06:28.520 --> 01:06:30.720
but something you wanna give a shout out to.


01:06:30.720 --> 01:06:34.360
If I can just give one a shout out, it's Altair.


01:06:34.360 --> 01:06:35.200
- Yeah.


01:06:35.200 --> 01:06:36.680
- You should be doing your plotting in Altair.


01:06:36.680 --> 01:06:38.780
- Altair, right on, yeah, it's quite nice.


01:06:38.780 --> 01:06:41.560
All right, well, thank you so much for being here.


01:06:41.560 --> 01:06:42.800
It's been great to have you on the show.


01:06:42.800 --> 01:06:44.200
- Thank you for having me.


01:06:44.200 --> 01:06:46.160
- Yeah, you bet, bye.


01:06:46.160 --> 01:06:47.320
- Have a good one, bye.

