WEBVTT

00:00:00.000 --> 00:00:06.080
We kick off the interviews with Devin Peterson from Ponder.


00:00:06.080 --> 00:00:10.420
Ponder is taking Modin, a distributed compute library for Python, and pushing data science


00:00:10.420 --> 00:00:14.120
compute directly into the database.


00:00:14.120 --> 00:00:18.000
Welcome.


00:00:18.000 --> 00:00:19.880
Welcome to Talk Python here on Startup Row.


00:00:19.880 --> 00:00:20.880
Thank you.


00:00:20.880 --> 00:00:21.880
Thank you.


00:00:21.880 --> 00:00:23.000
Yeah, it's fantastic to have you here.


00:00:23.000 --> 00:00:28.720
You know, we met yesterday here at PyCon US, and you were telling me about your project,


00:00:28.720 --> 00:00:33.720
and how it's built upon Modin, the open source project.


00:00:33.720 --> 00:00:35.200
And as I looked around, I'm like,


00:00:35.200 --> 00:00:36.680
everyone here has a story.


00:00:36.680 --> 00:00:39.560
And I just thought it'd be so great to have you on the show


00:00:39.560 --> 00:00:42.000
along with all the others and just kind of tell your story.


00:00:42.000 --> 00:00:45.520
You know, how did you get here to start up Rho at PyCon?


00:00:45.520 --> 00:00:47.720
- Yeah, it's interesting.


00:00:47.720 --> 00:00:50.560
So Modin started as my PhD project


00:00:50.560 --> 00:00:53.080
and I was doing my PhD at Berkeley


00:00:53.080 --> 00:00:57.080
and I started in the genomics world,


00:00:57.080 --> 00:00:59.640
trying to build large-scale data science tools


00:00:59.640 --> 00:01:03.200
for the people who actually do the science.


00:01:03.200 --> 00:01:04.520
I'm not a biologist myself.


00:01:04.520 --> 00:01:07.160
I don't know the first thing about biology, honestly.


00:01:07.160 --> 00:01:08.560
- But you got some good programming skills


00:01:08.560 --> 00:01:10.400
and they can always use that applied to their data, right?


00:01:10.400 --> 00:01:11.220
- Right, right.


00:01:11.220 --> 00:01:12.760
The problem was we were building tools in Spark


00:01:12.760 --> 00:01:14.920
and it was really hard for these Spark-like APIs


00:01:14.920 --> 00:01:16.800
to translate natively to the way


00:01:16.800 --> 00:01:18.480
that they were reasoning about data.


00:01:18.480 --> 00:01:19.960
And like, they're using Python.


00:01:19.960 --> 00:01:22.960
And so there's a very kind of natural way


00:01:22.960 --> 00:01:26.400
that scientists think about interacting with data


00:01:26.400 --> 00:01:28.040
that's not Spark, right?


00:01:28.040 --> 00:01:30.080
It's not as intuitive as intuitive in Spark,


00:01:30.080 --> 00:01:31.080
even PySpark, right?


00:01:31.080 --> 00:01:33.420
- So a lot of Python people avoid databases


00:01:33.420 --> 00:01:34.260
as much as they can,


00:01:34.260 --> 00:01:36.440
at least SQL and directly talking to them like that.


00:01:36.440 --> 00:01:39.360
- Yeah, totally, because like often the way,


00:01:39.360 --> 00:01:40.680
when you're exploring data,


00:01:40.680 --> 00:01:44.120
you have a mental model of how you want to interact


00:01:44.120 --> 00:01:45.080
with the data.


00:01:45.080 --> 00:01:47.360
And that is not SQL often.


00:01:47.360 --> 00:01:49.480
Like it's just the way that it is.


00:01:49.480 --> 00:01:50.320
- Yeah, yeah.


00:01:50.320 --> 00:01:53.400
- So yeah, I had a moment there


00:01:53.400 --> 00:01:55.640
where a data scientist was like,


00:01:55.640 --> 00:02:00.360
if I don't want your tool, can you just make my tool run faster?


00:02:00.360 --> 00:02:03.640
And so I was like, ah, yes, wait a second.


00:02:03.640 --> 00:02:05.080
This is actually a real project.


00:02:05.080 --> 00:02:08.720
And so I started like looking into pandas and looking into like, you know,


00:02:08.720 --> 00:02:13.880
the world of, you know, databases and like the kind of academic space.


00:02:13.880 --> 00:02:18.680
And nobody had really dug that deep into pandas because in the academic sense,


00:02:18.680 --> 00:02:21.600
everybody was like, okay, pandas is just a bad database.


00:02:21.600 --> 00:02:23.880
That's what database people thought at the time.


00:02:24.560 --> 00:02:28.020
So we did a bunch of work and it kind of turned out that's not the case.


00:02:28.020 --> 00:02:29.720
They're totally new things.


00:02:29.720 --> 00:02:33.060
And so from there, we built Modin and now with Ponder,


00:02:33.060 --> 00:02:37.720
we're kind of extending that to basically bridge these two worlds


00:02:37.720 --> 00:02:41.180
where you can use Python, but we're generating SQL on the back end


00:02:41.180 --> 00:02:45.060
and able to run pandas directly in your database or your data warehouse.


00:02:45.060 --> 00:02:46.360
Yeah, fantastic.


00:02:46.360 --> 00:02:50.480
So when I first heard about what you're doing at Ponder,


00:02:50.480 --> 00:02:52.900
I immediately thought of Dask.


00:02:52.900 --> 00:02:57.660
And Dask is another popular startup success,


00:02:57.660 --> 00:02:59.740
open source startup success story


00:02:59.740 --> 00:03:03.060
with Matthew Rockland and Forman Coil and stuff.


00:03:03.060 --> 00:03:05.380
And I mean, I think they may have outgrown Startup Row,


00:03:05.380 --> 00:03:07.300
but you know, good for them.


00:03:07.300 --> 00:03:08.220
- Yeah, totally.


00:03:08.220 --> 00:03:09.060
- My first thought was,


00:03:09.060 --> 00:03:10.940
okay, well, how is this different than Dask?


00:03:10.940 --> 00:03:13.620
But the big difference is Dask is grid computing


00:03:13.620 --> 00:03:15.700
and yours runs in the database.


00:03:15.700 --> 00:03:17.540
- Yeah, for Ponder definitely.


00:03:17.540 --> 00:03:19.100
Open source modem also integrates


00:03:19.100 --> 00:03:20.780
with Dask clusters as well.


00:03:20.780 --> 00:03:25.780
So Dask has Dask DataFrame, and that runs on Dask clusters.


00:03:25.780 --> 00:03:28.860
We can also run a mode and open source on Dask clusters.


00:03:28.860 --> 00:03:31.360
It's very important to us that whatever infrastructure


00:03:31.360 --> 00:03:34.220
that you have, you can run pandas on top of that.


00:03:34.220 --> 00:03:36.180
So Ponder is the next level of that,


00:03:36.180 --> 00:03:38.300
where if your data is in the database,


00:03:38.300 --> 00:03:39.580
it doesn't leave, right?


00:03:39.580 --> 00:03:41.540
We can just execute it directly there.


00:03:41.540 --> 00:03:45.780
And all of your assumptions from Python and pandas


00:03:45.780 --> 00:03:46.860
hold true in the database,


00:03:46.860 --> 00:03:48.980
even though the database actually doesn't like


00:03:48.980 --> 00:03:51.140
the assumptions that you might have in pandas, right?


00:03:51.140 --> 00:03:53.340
We emulate those behaviors and we've done a lot of work


00:03:53.340 --> 00:03:55.020
to actually make that feel very native.


00:03:55.020 --> 00:03:59.020
So that is a key difference with Ponder and Dask though,


00:03:59.020 --> 00:04:01.780
is that your data never leaves the database.


00:04:01.780 --> 00:04:04.060
So you don't have to have a separate Dask cluster


00:04:04.060 --> 00:04:07.060
to kind of pull the data into and execute on it there.


00:04:07.060 --> 00:04:08.540
You can just run things natively


00:04:08.540 --> 00:04:09.660
in the database or the data warehouse.


00:04:09.660 --> 00:04:10.860
- So if you have a large database,


00:04:10.860 --> 00:04:13.180
you already have a probably powerful database server,


00:04:13.180 --> 00:04:15.700
why transfer all the data off of that,


00:04:15.700 --> 00:04:16.780
load it into something else,


00:04:16.780 --> 00:04:18.300
analyze it and throw it away, right?


00:04:18.300 --> 00:04:19.860
- Exactly. - Make it run there.


00:04:19.860 --> 00:04:21.020
- Exactly, exactly.


00:04:21.020 --> 00:04:25.260
- Yeah, so maybe a quick elevator pitch type of thing


00:04:25.260 --> 00:04:28.540
might be like, you all take pandas


00:04:28.540 --> 00:04:31.840
and turn it into SQL statements that run on the database,


00:04:31.840 --> 00:04:33.340
but people get a program in pandas.


00:04:33.340 --> 00:04:34.540
- Yes, exactly. - Is that more or less it?


00:04:34.540 --> 00:04:36.820
- That's exactly it, yes.


00:04:36.820 --> 00:04:39.580
Some things that are really, really native in pandas,


00:04:39.580 --> 00:04:43.380
like describe, for example, df.describe.


00:04:43.380 --> 00:04:44.660
Super, super common.


00:04:44.660 --> 00:04:46.940
- It seems easy, like it just gives me some summary stats.


00:04:46.940 --> 00:04:48.280
- Yes, exactly.


00:04:48.280 --> 00:04:49.800
That's 300 lines of SQL.


00:04:49.800 --> 00:04:55.320
But you wouldn't believe it looking at it though, because you know, it seems so


00:04:55.320 --> 00:04:58.000
simple and it's, it is a simple, simple output, right?


00:04:58.000 --> 00:05:02.340
I want to get some summary statistics for my data, but SQL is so declarative


00:05:02.340 --> 00:05:05.900
and the language itself doesn't lend itself well to this type of iterative,


00:05:05.900 --> 00:05:07.560
interactive kind of like workflow.


00:05:07.560 --> 00:05:08.060
So.


00:05:08.060 --> 00:05:13.360
And the notebooks remember step by step, they have like a history sort of a


00:05:13.360 --> 00:05:16.400
memory, whereas SQLs, every statement is standalone.


00:05:16.400 --> 00:05:17.200
Exactly.


00:05:17.240 --> 00:05:21.380
So all or nothing basically, and you have to do the whole thing up front.


00:05:21.380 --> 00:05:23.700
And that's the thing people love about pandas is that you can


00:05:23.700 --> 00:05:25.220
incrementally build these things up.


00:05:25.220 --> 00:05:29.060
So, so we're giving that interface to SQL basically.


00:05:29.060 --> 00:05:29.620
Awesome.


00:05:29.620 --> 00:05:30.060
All right.


00:05:30.060 --> 00:05:34.520
Well, let's wrap this up with a bit of a, a bit of a talk, how you got to start a pro.


00:05:34.520 --> 00:05:35.720
How'd you start this company?


00:05:35.720 --> 00:05:36.520
Where are you?


00:05:36.520 --> 00:05:40.340
Like so many people are excited to take their open source work and instead


00:05:40.340 --> 00:05:43.480
of making it their side job or something they do part-time at their company,


00:05:43.480 --> 00:05:46.040
make it their full-time energy.


00:05:46.040 --> 00:05:46.880
I, and you're there.


00:05:46.880 --> 00:05:47.380
How'd you do it?


00:05:47.380 --> 00:05:47.880
Yeah.


00:05:47.880 --> 00:05:53.960
So the way that we started was we talked to a lot of companies


00:05:53.960 --> 00:05:56.960
where they basically asked us, can you


00:05:56.960 --> 00:05:58.840
make this work on top of our infrastructure?


00:05:58.840 --> 00:06:01.400
We didn't support-- we only supported in the open source


00:06:01.400 --> 00:06:02.680
brand ask.


00:06:02.680 --> 00:06:05.520
And we saw a motion there to have kind of an open core model.


00:06:05.520 --> 00:06:07.480
So we follow the open core model where


00:06:07.480 --> 00:06:08.840
these more enterprise-y features,


00:06:08.840 --> 00:06:11.640
like security features and being able to push into data


00:06:11.640 --> 00:06:12.520
warehouses, right?


00:06:12.520 --> 00:06:17.000
like an individual, you know, consultant may not have,


00:06:17.000 --> 00:06:19.160
you know, a data warehouse, they probably don't, right?


00:06:19.160 --> 00:06:20.400
But enterprises do.


00:06:20.400 --> 00:06:21.400
And these are the types of features


00:06:21.400 --> 00:06:22.600
that enterprises really care about.


00:06:22.600 --> 00:06:25.000
So this open core model, I think,


00:06:25.000 --> 00:06:26.760
lended itself really well to our business,


00:06:26.760 --> 00:06:29.680
particularly because, you know,


00:06:29.680 --> 00:06:31.920
enterprises will pay for these features.


00:06:31.920 --> 00:06:36.320
And so, yeah, and then we went out


00:06:36.320 --> 00:06:40.320
and we raised a seed round and, you know,


00:06:40.320 --> 00:06:43.680
solve the opportunity to come here and be in PyCon startup row.


00:06:43.680 --> 00:06:46.020
And fortunately, you know, it's a competitive process.


00:06:46.020 --> 00:06:46.680
Really it is.


00:06:46.680 --> 00:06:46.920
Yeah.


00:06:46.920 --> 00:06:50.720
We're, we're very, we feel very fortunate to be, you know, chosen


00:06:50.720 --> 00:06:54.400
among the few that are chosen here, but yeah, that's kind of our journey


00:06:54.400 --> 00:06:59.520
is, is basically, you know, starting talking like, so for folks out there


00:06:59.520 --> 00:07:02.440
who are like interested in this, talk to people who are using this, people


00:07:02.440 --> 00:07:05.060
who are interested in the problem that you're solving and figure out where


00:07:05.060 --> 00:07:08.960
the gaps are and kind of ask questions.


00:07:08.960 --> 00:07:10.760
Don't be afraid to ask, like, would you pay for this?


00:07:10.760 --> 00:07:11.920
Or how much would you pay for this?


00:07:11.920 --> 00:07:14.080
Those, those questions they're uncomfortable to ask.


00:07:14.080 --> 00:07:18.760
And like, especially as a developer, who's not used to presenting salesy


00:07:18.760 --> 00:07:22.640
type marketing things, you are, salespeople as kind of, yuck.


00:07:22.640 --> 00:07:23.040
I got it.


00:07:23.040 --> 00:07:23.960
It's a necessary evil.


00:07:23.960 --> 00:07:24.720
Totally.


00:07:24.720 --> 00:07:25.600
It totally is.


00:07:25.600 --> 00:07:25.960
Yeah.


00:07:25.960 --> 00:07:30.360
So, but, but you have to ask, because how do you know if you can kind of take that


00:07:30.360 --> 00:07:33.800
next step, unless you ask, Hey, would you pay $50 a month for this?


00:07:33.800 --> 00:07:35.400
Would you pay $10 a month for this?


00:07:35.400 --> 00:07:35.560
Right.


00:07:36.720 --> 00:07:39.640
you can't know unless you really go out there and ask.


00:07:39.640 --> 00:07:41.400
So that's what I would encourage folks to do


00:07:41.400 --> 00:07:43.480
if they're interested in this is, you know,


00:07:43.480 --> 00:07:46.440
find those gaps and really ask the hard questions


00:07:46.440 --> 00:07:48.120
that are kind of hard, but yeah.


00:07:48.120 --> 00:07:49.520
- Awesome, well, congratulations.


00:07:49.520 --> 00:07:50.800
Thanks for taking the time to talk to us.


00:07:50.800 --> 00:07:51.920
- Thank you, thank you.


00:07:51.920 --> 00:07:53.560
- Yeah, you bet, bye.


00:07:53.560 --> 00:07:56.200
Next up is Generally Intelligent and Josh Albrecht.


00:07:56.200 --> 00:07:58.640
Generally Intelligent is an independent research company


00:07:58.640 --> 00:08:01.480
developing AI agents with general intelligence


00:08:01.480 --> 00:08:03.920
that can be safely deployed in the real world.


00:08:03.920 --> 00:08:06.080
(silence)


00:08:06.080 --> 00:08:10.000
- Josh, welcome to Talk Python To Me.


00:08:10.000 --> 00:08:10.900
- Hey, thanks.


00:08:10.900 --> 00:08:11.740
- Hey, it's great to have you here.


00:08:11.740 --> 00:08:13.400
Tell people quickly who you are.


00:08:13.400 --> 00:08:15.800
- Yeah, so I'm Josh, Josh Albrecht.


00:08:15.800 --> 00:08:17.660
I'm the CTO of Generally Intelligent.


00:08:17.660 --> 00:08:20.560
We're an AI research company based in San Francisco.


00:08:20.560 --> 00:08:24.160
- Awesome, I love the humbleness.


00:08:24.160 --> 00:08:26.240
Generally, generally intelligent, right?


00:08:26.240 --> 00:08:28.960
You're not a super genius, but no, it's a clever name.


00:08:28.960 --> 00:08:30.120
I like it. - Thank you.


00:08:30.120 --> 00:08:31.320
- Yeah, yeah.


00:08:31.320 --> 00:08:33.680
And what's the problem you're solving here?


00:08:33.680 --> 00:08:35.820
- Yeah, we, you know, kind of, as it says on the tin,


00:08:35.820 --> 00:08:37.980
like we're working on artificial general intelligence.


00:08:37.980 --> 00:08:39.320
We don't usually like to use that term


00:08:39.320 --> 00:08:40.400
'cause it can mean lots of different things


00:08:40.400 --> 00:08:41.240
to lots of different people,


00:08:41.240 --> 00:08:43.640
but in general, what we're working on


00:08:43.640 --> 00:08:47.460
is making more capable, safer, more robust AI systems.


00:08:47.460 --> 00:08:49.720
And in particular, we're focused on agents,


00:08:49.720 --> 00:08:52.120
so systems that can act on their own.


00:08:52.120 --> 00:08:54.980
And like right now, mostly what we're focused on


00:08:54.980 --> 00:08:57.160
is agents that can work kind of in your browser,


00:08:57.160 --> 00:08:58.960
on your desktop, in your code editor,


00:08:58.960 --> 00:09:01.860
those kind of virtual environments and digital environments.


00:09:01.860 --> 00:09:04.860
How much of this are you envisioning running locally


00:09:04.860 --> 00:09:07.460
versus running on a big cluster in the cloud?


00:09:07.460 --> 00:09:09.580
- Yeah, I think it'd be nice someday in the future


00:09:09.580 --> 00:09:11.020
to have things run totally locally,


00:09:11.020 --> 00:09:13.160
but right now a lot of these technologies


00:09:13.160 --> 00:09:15.660
do require a large cluster of GPUs,


00:09:15.660 --> 00:09:16.880
which are very expensive,


00:09:16.880 --> 00:09:19.140
and most people don't even have a GPU


00:09:19.140 --> 00:09:20.380
or have a bunch of GPUs at home,


00:09:20.380 --> 00:09:22.560
so it's kind of hard to actually get it running locally.


00:09:22.560 --> 00:09:24.100
Hopefully someday in the future we'll be able to do that,


00:09:24.100 --> 00:09:26.340
but for now you'll probably need internet access


00:09:26.340 --> 00:09:27.180
to use a lot of these things.


00:09:27.180 --> 00:09:28.860
- Right, okay, so you're envisioning


00:09:28.860 --> 00:09:32.900
a bunch of these agents that have access to an API


00:09:32.900 --> 00:09:36.200
that can quickly respond over there.


00:09:36.200 --> 00:09:39.620
OK, so give us some ideas.


00:09:39.620 --> 00:09:41.640
- Yeah, so what this looks like concretely,


00:09:41.640 --> 00:09:43.720
you can imagine like a coding agent.


00:09:43.720 --> 00:09:46.040
So one thing you can do with GitHub Copilot right now


00:09:46.040 --> 00:09:48.020
is you can write a function declaration


00:09:48.020 --> 00:09:49.980
in a doc string and have it generate the function.


00:09:49.980 --> 00:09:51.660
But you can imagine for a coding agent,


00:09:51.660 --> 00:09:53.020
you can not only generate the function,


00:09:53.020 --> 00:09:55.300
but also generate some tests, run those tests,


00:09:55.300 --> 00:09:57.420
see errors in those tests, try and fix the errors,


00:09:57.420 --> 00:09:59.780
kind of do that whole life cycle to ideally give you


00:09:59.780 --> 00:10:02.300
a output that's actually a lot better.


00:10:02.300 --> 00:10:04.420
And then also, if you're thinking about this as an agent,


00:10:04.420 --> 00:10:05.820
maybe it's more of a back and forth.


00:10:05.820 --> 00:10:07.580
It's not just an auto-complete in your editor,


00:10:07.580 --> 00:10:09.140
but it can come back to you and say,


00:10:09.140 --> 00:10:10.780
you know, I'm sort of uncertain about this part here.


00:10:10.780 --> 00:10:11.600
What did you mean?


00:10:11.600 --> 00:10:13.580
Or, hmm, like, you know, I wrote these tests,


00:10:13.580 --> 00:10:14.860
but I'm not sure if it's quite what you wanted.


00:10:14.860 --> 00:10:17.020
Or maybe it's kind of running in the background


00:10:17.020 --> 00:10:17.980
and flagging different things


00:10:17.980 --> 00:10:18.900
that it sees in your code base.


00:10:18.900 --> 00:10:20.020
Like maybe you made some change


00:10:20.020 --> 00:10:22.380
and it can detect that your doc string is out of date


00:10:22.380 --> 00:10:23.340
and kind of flag that for you.


00:10:23.340 --> 00:10:26.100
So thinking about it more as like an actual pair programmer.


00:10:26.100 --> 00:10:31.100
- Okay, is it primarily focused on, yeah.


00:10:31.100 --> 00:10:33.980
Are you thinking to focus mostly on programming


00:10:33.980 --> 00:10:36.260
or is it more broad like,


00:10:36.260 --> 00:10:38.580
I'm looking for a great deal on this classic car.


00:10:38.580 --> 00:10:41.460
Go scour the internet and negotiate it for me.


00:10:41.460 --> 00:10:45.420
- Yeah, so the company is generally intelligent


00:10:45.420 --> 00:10:47.900
so we certainly do want to be able to address


00:10:47.900 --> 00:10:49.500
all these different use cases over time.


00:10:49.500 --> 00:10:51.500
I think for us right now,


00:10:51.500 --> 00:10:53.060
one of the domains that we are interested in is code,


00:10:53.060 --> 00:10:55.260
especially because it's so objective.


00:10:52.160 --> 00:10:53.180
you can know if it's right or wrong,


00:10:53.180 --> 00:10:54.180
you have tests, that sort of stuff.


00:10:54.180 --> 00:10:56.320
So it's a nice playground for ourselves


00:10:56.320 --> 00:10:57.640
and something that we can build for ourselves


00:10:57.640 --> 00:10:59.260
to kind of iterate on internally.


00:10:59.260 --> 00:11:02.160
But we're not exactly sure what the final product will be.


00:11:02.160 --> 00:11:04.240
We're also training our own kind of large language models.


00:11:04.240 --> 00:11:05.640
We might productize some stuff around those.


00:11:05.640 --> 00:11:07.480
So there's lots of possibilities.


00:11:07.480 --> 00:11:08.520
We're not wedded to anything yet.


00:11:08.520 --> 00:11:10.080
Thankfully, we have the luxury to kind of


00:11:10.080 --> 00:11:11.360
take a little bit of time to figure that out


00:11:11.360 --> 00:11:12.760
as a research company.


00:11:12.760 --> 00:11:13.680
- Yeah, that's excellent.


00:11:13.680 --> 00:11:15.160
What about science?


00:11:15.160 --> 00:11:16.400
- Yeah, science is definitely a thing


00:11:16.400 --> 00:11:17.640
that we're interested in.


00:11:17.640 --> 00:11:20.320
It's pretty hard and so, you know,


00:11:20.320 --> 00:11:22.080
do we necessarily want these things like,


00:11:22.080 --> 00:11:24.120
running around making things in test tubes or whatever,


00:11:24.120 --> 00:11:25.780
I think that's probably a little bit harder than coding,


00:11:25.780 --> 00:11:26.920
and coding's already pretty hard.


00:11:26.920 --> 00:11:28.040
So I think we'll get there.


00:11:28.040 --> 00:11:29.480
That's some of the stuff that we,


00:11:29.480 --> 00:11:31.580
personally on the team, are really excited about,


00:11:31.580 --> 00:11:34.640
to see how can we use these to uncover new cures


00:11:34.640 --> 00:11:35.520
for diseases or whatever.


00:11:35.520 --> 00:11:36.680
I'm really excited for that kind of stuff


00:11:36.680 --> 00:11:37.600
a little further in the future.


00:11:37.600 --> 00:11:38.420
- Yeah, that'd be amazing.


00:11:38.420 --> 00:11:41.500
I was just talking to someone on the expo floor hall here


00:11:41.500 --> 00:11:43.120
about protein folding.


00:11:43.120 --> 00:11:43.960
Right, that kind of stuff.


00:11:43.960 --> 00:11:46.700
That's kind of been elusive for people.


00:11:46.700 --> 00:11:49.080
They'd be more or less have just tried to brute force it.


00:11:49.080 --> 00:11:51.040
Right, with the folding at home thing.


00:11:51.040 --> 00:11:53.680
Let's just run every computer and just try every possibility.


00:11:53.680 --> 00:11:54.840
There's a lot of possibilities.


00:11:54.840 --> 00:11:55.840
- Yeah, yeah, exactly.


00:11:55.840 --> 00:11:57.240
- All right, so where's Python fitting here?


00:11:57.240 --> 00:11:59.080
What are some of the tools that you're using?


00:11:59.080 --> 00:12:01.480
- Yeah, so Python is, we love Python.


00:12:01.480 --> 00:12:03.720
We basically write everything in Python, or Bash,


00:12:03.720 --> 00:12:04.760
but mostly Python.


00:12:04.760 --> 00:12:06.520
Or Python generates a little bit of Bash,


00:12:06.520 --> 00:12:07.640
but it's mostly Python.


00:12:07.640 --> 00:12:11.720
So yeah, we use a lot of PyTorch for our models.


00:12:11.720 --> 00:12:14.560
And then other than that, let's see,


00:12:14.560 --> 00:12:15.600
what other libraries do we use?


00:12:15.600 --> 00:12:17.180
I mean, we use tons of Python libraries,


00:12:17.180 --> 00:12:20.520
like NumPy and Scikit and Adders.


00:12:20.520 --> 00:12:23.600
There's so many wonderful things that people have built


00:12:23.600 --> 00:12:25.960
that we just-- yeah, they're just so nice to work with.


00:12:25.960 --> 00:12:27.000
So we love the Python.


00:12:27.000 --> 00:12:28.980
You can kind of take it, open it up, look at all the source,


00:12:28.980 --> 00:12:31.280
and really understand everything in that full stack.


00:12:31.280 --> 00:12:32.740
For us doing research, that's really


00:12:32.740 --> 00:12:35.040
valuable to be able to know everything that's going on.


00:12:35.040 --> 00:12:37.760
You have these Lego block types of things.


00:12:37.760 --> 00:12:39.640
Like, what if we arranged it like this?


00:12:39.640 --> 00:12:42.120
You don't have to write the whole machine learning bit.


00:12:42.120 --> 00:12:45.240
You can click a few pieces together, and off it goes.


00:12:45.240 --> 00:12:47.480
Yeah, we build on top of Mosaic, for example,


00:12:47.480 --> 00:12:49.960
or other open source libraries that people put together


00:12:49.960 --> 00:12:52.320
for training stuff and kind of adapt it for yourself.


00:12:52.320 --> 00:12:53.520
It's so nice that you can just pull things in


00:12:53.520 --> 00:12:54.720
and so easily change everything.


00:12:54.720 --> 00:12:55.920
- Yeah, awesome.


00:12:55.920 --> 00:12:58.160
I must have somehow blinked along the way


00:12:58.160 --> 00:13:00.680
and these large language models


00:13:00.680 --> 00:13:02.000
just seem to have come out of nowhere


00:13:02.000 --> 00:13:04.280
and all of a sudden, you know,


00:13:04.280 --> 00:13:06.600
AI is one of these things, it's kind of worked,


00:13:06.600 --> 00:13:08.360
kind of recommended stuff, and now all of a sudden


00:13:08.360 --> 00:13:10.920
it's mind-bogglingly good.


00:13:10.920 --> 00:13:11.840
- Yeah.


00:13:11.840 --> 00:13:13.840
- Do things like TensorFlow and stuff


00:13:13.840 --> 00:13:15.400
work with these large language models?


00:13:15.400 --> 00:13:16.720
Or do you need other libraries?


00:13:16.720 --> 00:13:18.840
- Yeah, so TensorFlow and PyTorch


00:13:18.840 --> 00:13:22.160
are probably the two main machine learning libraries


00:13:22.160 --> 00:13:24.720
that people do deep learning systems on top of.


00:13:24.720 --> 00:13:27.320
Pretty sure that GPT-3 and GPT-4 were probably


00:13:27.320 --> 00:13:29.560
trained on top of PyTorch.


00:13:29.560 --> 00:13:32.240
I think a lot of the stuff at Google, like Palm and Bard


00:13:32.240 --> 00:13:34.280
and those types of things are trained on TensorFlow.


00:13:34.280 --> 00:13:36.120
But at the end of the day, they're actually very similar.


00:13:36.120 --> 00:13:38.080
And they're sort of converging to kind of similar ideas


00:13:38.080 --> 00:13:38.680
too as well.


00:13:38.680 --> 00:13:41.480
So it's interesting to see them evolve.


00:13:41.480 --> 00:13:42.800
- Yeah, fantastic.


00:13:42.800 --> 00:13:46.880
All right, last question, close out our conversation here.


00:13:46.880 --> 00:13:48.480
We're sitting here on Startup Row.


00:13:48.480 --> 00:13:53.480
just outside of startup row, I suppose.


00:13:53.480 --> 00:13:55.760
But there's a bunch of people out here


00:13:55.760 --> 00:13:58.880
who are working on open source projects


00:13:58.880 --> 00:14:00.760
who would like to somehow find a way


00:14:00.760 --> 00:14:02.760
to make it their passion, their job,


00:14:02.760 --> 00:14:04.960
spend more time on it, maybe make it a company.


00:14:04.960 --> 00:14:07.560
How'd you get here?


00:14:07.560 --> 00:14:08.400
Tell people your journey.


00:14:08.400 --> 00:14:09.640
- Yeah, so we got here in a little bit of a different route.


00:14:09.640 --> 00:14:14.040
So a lot of us were working at a previous company


00:14:14.040 --> 00:14:17.160
called Sorceress that did more of an applied


00:14:15.120 --> 00:14:20.120
machine learning thing, where we are taking machine learning


00:14:20.120 --> 00:14:22.400
and applying it to the job of recruiting


00:14:22.400 --> 00:14:23.940
and trying to figure out, can we find good people online


00:14:23.940 --> 00:14:26.760
that might be a good fit for a particular position


00:14:26.760 --> 00:14:28.400
and reach out to them and get them interested in the job


00:14:28.400 --> 00:14:32.080
and that sort of stuff.


00:14:32.080 --> 00:14:33.680
We went through YC with this in 2017


00:14:33.680 --> 00:14:35.740
and we raised our series A.


00:14:35.740 --> 00:14:37.000
Eventually, it was growing.


00:14:37.000 --> 00:14:38.520
We had a few million in revenue and customers


00:14:38.520 --> 00:14:40.080
and everything.


00:14:40.080 --> 00:14:40.800
In 2019, we were looking and it felt like


00:14:40.800 --> 00:14:43.680
there's so much really interesting stuff happening


00:14:40.440 --> 00:14:45.440
in self-supervised learning, and in deep learning,


00:14:45.440 --> 00:14:47.080
and in machine learning.


00:14:47.080 --> 00:14:48.340
And it feels like, you know,


00:14:48.340 --> 00:14:50.680
recruiting is very important,


00:14:50.680 --> 00:14:51.680
but is this going to be the most important thing


00:14:51.680 --> 00:14:53.220
in the world?


00:14:53.220 --> 00:14:53.560
Is this going to really be the thing that changes the world?


00:14:53.560 --> 00:14:55.360
Or will there be something a little bit larger


00:14:55.360 --> 00:14:57.080
in this more general purpose AI?


00:14:57.080 --> 00:14:58.680
And the more we thought about it,


00:14:58.680 --> 00:14:59.480
the more we felt like,


00:14:59.480 --> 00:15:00.480
the AI stuff is probably going to have a huge impact.


00:15:00.480 --> 00:15:02.480
We should really be working on that.


00:15:02.480 --> 00:15:04.120
We kind of wound down the previous company.


00:15:04.120 --> 00:15:06.000
A bunch of us moved over and started up


00:15:06.000 --> 00:15:07.380
generally intelligent,


00:15:07.380 --> 00:15:08.480
and then we've been working on stuff ever since then.


00:15:05.400 --> 00:15:08.800
- Fantastic, well, I know you've got some really cool stuff


00:15:08.800 --> 00:15:13.720
where the agents can sort of look at the code they're writing,


00:15:13.720 --> 00:15:16.300
think about it, evolve, and it's,


00:15:16.300 --> 00:15:17.740
it looks like a really interesting take,


00:15:17.740 --> 00:15:21.760
so congratulations, and I'll put a link to the,


00:15:21.760 --> 00:15:24.320
all your work in the show notes, people can check it out.


00:15:24.320 --> 00:15:25.280
- Yeah, sounds good.


00:15:25.280 --> 00:15:26.120
- Yeah.


00:15:26.120 --> 00:15:26.940
- Thank you very much.


00:15:26.940 --> 00:15:27.780
- Yeah, thanks for being here.


00:15:27.780 --> 00:15:28.620
- It was great to chat.


00:15:28.620 --> 00:15:29.640
- Yeah, you bet.


00:15:29.640 --> 00:15:32.200
Now we talk with Mo Sarat from Wairobots.


00:15:32.200 --> 00:15:33.940
They're building the database platform


00:15:33.940 --> 00:15:36.100
for geospatial analytics and AI.


00:15:36.100 --> 00:15:41.960
- Hey Mo, welcome to Talk Python.


00:15:41.960 --> 00:15:44.020
- Thank you so much.


00:15:44.020 --> 00:15:45.260
- Yeah, it's good to have you here.


00:15:45.260 --> 00:15:46.780
Let's start off with a quick introduction.


00:15:46.780 --> 00:15:47.620
How are you?


00:15:47.620 --> 00:15:48.440
- Absolutely.


00:15:48.440 --> 00:15:49.580
So my name is Mo,


00:15:49.580 --> 00:15:53.540
and I'm the co-founder and CEO of a company called Warabots.


00:15:53.540 --> 00:15:56.540
Warabots' grand vision is enable every organization


00:15:56.540 --> 00:15:59.220
to drive value from data via space and time.


00:15:59.220 --> 00:16:00.060
- Awesome.


00:16:00.060 --> 00:16:01.380
I love it, I love it.


00:16:01.380 --> 00:16:03.180
So, yeah, thanks for being here on the show.


00:16:03.180 --> 00:16:06.900
Let's dive into whereabouts of what is the problem


00:16:06.900 --> 00:16:08.720
you're solving, what are you guys building?


00:16:08.720 --> 00:16:11.240
- Think about like, again, every single data record


00:16:11.240 --> 00:16:13.280
that is collecting on a daily basis,


00:16:13.280 --> 00:16:15.820
even like we're here right now,


00:16:15.820 --> 00:16:19.120
we're talking on this podcast at this specific location


00:16:19.120 --> 00:16:20.400
at this specific time.


00:16:20.400 --> 00:16:22.440
So if you think about the space and time aspect,


00:16:22.440 --> 00:16:23.920
it's actually a very important aspect


00:16:23.920 --> 00:16:26.200
of every single piece of data that is being collected.


00:16:26.200 --> 00:16:28.080
- Right, if we're here next week, who knows what,


00:16:28.080 --> 00:16:29.760
why we're here, we could be here for a different reason.


00:16:29.760 --> 00:16:30.960
That might mean something different, right?


00:16:30.960 --> 00:16:32.740
- Absolutely, yeah, so that's exactly,


00:16:32.740 --> 00:16:36.160
So that space and time lens that you can apply to your data


00:16:36.160 --> 00:16:39.080
can actually also tell you a better story about your data.


00:16:39.080 --> 00:16:41.800
You can drive more value, more insights from your data


00:16:41.800 --> 00:16:43.760
if you apply that space and time lens.


00:16:43.760 --> 00:16:45.520
And this is basically what we are,


00:16:45.520 --> 00:16:48.100
not necessarily like this is exactly


00:16:48.100 --> 00:16:50.640
what we focus on in our company.


00:16:50.640 --> 00:16:52.560
But more specifically, I mean,


00:16:52.560 --> 00:16:56.920
we are trying to build like kind of a database infrastructure


00:16:56.920 --> 00:16:59.320
to enable people to use that space and time lens


00:16:59.320 --> 00:17:01.000
to drive value from their data.


00:17:01.000 --> 00:17:02.000
- Okay, fantastic.


00:17:02.000 --> 00:17:04.800
Now, when you talk about space and time and data,


00:17:04.800 --> 00:17:08.600
are we talking records in a time series database?


00:17:08.600 --> 00:17:11.240
Are we talking regular database or NoSQL?


00:17:11.240 --> 00:17:15.600
Or could it be even things like the log file from NGINX


00:17:15.600 --> 00:17:18.120
about the visitors to my website?


00:17:18.120 --> 00:17:19.960
What's the scope?


00:17:19.960 --> 00:17:21.400
The scope is actually very wide.


00:17:21.400 --> 00:17:23.720
So think about any data could be structured,


00:17:23.720 --> 00:17:26.960
semi-structured, unstructured data that you have.


00:17:26.960 --> 00:17:29.640
And as long as it have a geospatial aspect to it,


00:17:29.640 --> 00:17:34.920
geospatial aspect to here it means like if the record or the document has was


00:17:34.920 --> 00:17:41.100
let's say created in a specific location or represent an event that happened in a


00:17:41.100 --> 00:17:47.300
certain location at a certain time or represent like again like an object or


00:17:47.300 --> 00:17:51.220
an asset that you monitor at different locations at different times whatever it


00:17:51.220 --> 00:17:55.420
is it can be stored in any of these kind of formats as long as it have this kind


00:17:55.420 --> 00:18:01.940
a geospatial aspect to it, you can definitely apply that kind of geospatial or space-time


00:18:01.940 --> 00:18:02.940
lens to it.


00:18:02.940 --> 00:18:06.600
Right, okay, so what are some of the questions you might answer with Orbot?


00:18:06.600 --> 00:18:10.240
Questions that varies, I mean, so there are, it depends on the type of the data, it depends


00:18:10.240 --> 00:18:11.740
on the use case.


00:18:11.740 --> 00:18:15.320
You have a horizontal technology that enables you to enable so many industry verticals,


00:18:15.320 --> 00:18:16.920
but I'll give a couple of examples.


00:18:16.920 --> 00:18:18.920
Yeah, yeah, make it concrete for us.


00:18:18.920 --> 00:18:19.920
Absolutely.


00:18:19.920 --> 00:18:25.840
logistics company or a delivery company like the most I mean well-known delivery


00:18:25.840 --> 00:18:30.920
companies Amazon right I mean you go to the app you purchase an item or product


00:18:30.920 --> 00:18:36.080
and then the whole journey of that product from the supplier to the


00:18:36.080 --> 00:18:40.280
warehouse to the driver Amazon driver all the way that makes it to your door


00:18:40.280 --> 00:18:45.480
there is a whole kind of everything has a geospatial location to it attached to


00:18:45.480 --> 00:18:49.000
it the package is moving around you're located somewhere their house is a


00:18:49.000 --> 00:18:54.040
certain location handling the logistics behind all of that understanding how


00:18:54.040 --> 00:19:00.520
things are you're monitoring all these assets in space and time as it reaches


00:19:00.520 --> 00:19:06.160
the door this whole journey there's a lot of kind of data processing data


00:19:06.160 --> 00:19:09.880
analytics happening that you have to do through again the geospatial kind of


00:19:09.880 --> 00:19:13.960
aspect that you spatial contextual aspect of things so this is one example


00:19:13.960 --> 00:19:19.840
another example could be if you're like an insurance company and you're


00:19:19.840 --> 00:19:25.060
insuring homes for example and you want to understand what are the nearby kind


00:19:25.060 --> 00:19:29.220
of climate conditions natural disaster conditions compared to your home this


00:19:29.220 --> 00:19:34.120
also the home has a location these kind of natural disaster weather changes at


00:19:34.120 --> 00:19:39.460
different locations all the time that will impact how you take decisions about


00:19:39.460 --> 00:19:43.460
insuring these homes. Do I buy it? Do insurers want to insure it?


00:19:43.460 --> 00:19:47.180
Exactly. So that's another example again that the space and time


00:19:47.180 --> 00:19:52.300
lengths or the geospatial aspect impacts your decision when it comes to taking


00:19:52.300 --> 00:19:55.300
it's an important decision that you take in here. So that's another example. So


00:19:55.300 --> 00:19:59.980
these are just a couple use cases but there are tons of other use cases and


00:19:59.980 --> 00:20:05.100
and use cases that may not exist even yet. So there's a lot of movement now


00:20:05.100 --> 00:20:08.300
into climate tech and ag tech.


00:20:08.300 --> 00:20:11.640
And we are like, what we're trying to do at WeraBots


00:20:11.640 --> 00:20:13.940
is we're building the database infrastructure


00:20:13.940 --> 00:20:16.200
that enable the next generation,


00:20:16.200 --> 00:20:18.400
climate tech and agriculture technology.


00:20:18.400 --> 00:20:20.640
- So they can ask the questions that they might have,


00:20:20.640 --> 00:20:23.040
but you already have the machinery to answer them.


00:20:23.040 --> 00:20:25.500
- We have machinery to answer them.


00:20:25.500 --> 00:20:27.040
And they build their own secret sauce


00:20:27.040 --> 00:20:28.640
on top of our infrastructure.


00:20:28.640 --> 00:20:30.440
- So it's kind of a framework platform.


00:20:30.440 --> 00:20:31.340
- Absolutely, yeah.


00:20:31.340 --> 00:20:32.180
- Got it. - Yeah.


00:20:32.180 --> 00:20:34.040
- So Python, where's Python fit in this story?


00:20:34.040 --> 00:20:35.320
That's a great question.


00:20:35.320 --> 00:20:40.640
So geospatial data or the geospatial aspect of data


00:20:40.640 --> 00:20:42.240
has existed for so long, as you said.


00:20:42.240 --> 00:20:43.720
We live in the space-time continuum.


00:20:43.720 --> 00:20:46.520
Everything has a space-time aspect, geospatial aspect.


00:20:46.520 --> 00:20:50.640
But-- and that's why developers already have APIs


00:20:50.640 --> 00:20:52.200
to interact with geospatial data.


00:20:52.200 --> 00:20:54.520
And these APIs, the language varies.


00:20:54.520 --> 00:20:57.640
So there are some people that use SQL to interact


00:20:57.640 --> 00:21:01.120
with the data, process the data in either SQL databases


00:21:01.120 --> 00:21:03.880
or any other kind of SQL processing engine, right?


00:21:03.880 --> 00:21:10.680
But a lot of the geospatial developers or people developing with geospatial data, they use Python.


00:21:10.680 --> 00:21:14.040
There are so many libraries that use Python to actually...


00:21:14.040 --> 00:21:17.560
Example of these libraries is a library called Geopandas. It's a fantastic library.


00:21:17.560 --> 00:21:22.040
It's an extension to Pandas to kind of frangle and crunch geospatial data.


00:21:22.040 --> 00:21:25.400
Ask questions about what things are contained in here,


00:21:25.400 --> 00:21:27.320
what things are outside of here, how far away is it?


00:21:27.320 --> 00:21:29.000
Absolutely. So this is what Geopandas does.


00:21:29.960 --> 00:21:33.400
The only problem is that Geopandas is a library,


00:21:33.400 --> 00:21:35.800
has a great functionality, but again, it doesn't...


00:21:35.800 --> 00:21:38.600
It's not enterprise-ready for the most part,


00:21:38.600 --> 00:21:40.840
it doesn't scale, all that kind of stuff.


00:21:40.840 --> 00:21:43.240
So what we do at Robots is that we provide


00:21:43.240 --> 00:21:48.760
SQL API to the user to run spatial queries on the data,


00:21:48.760 --> 00:21:51.240
but we also provide a spatial Python API.


00:21:51.240 --> 00:21:54.920
Like if you're using Geopandas, you can use the same API,


00:21:54.920 --> 00:21:58.040
do the heavy lifting, enterprise scale,


00:21:58.040 --> 00:22:02.280
kind of processing of the data using our platform,


00:22:02.280 --> 00:22:06.280
and then do the major Geopanda's kind of functionality


00:22:06.280 --> 00:22:07.880
you're familiar with to, again,


00:22:07.880 --> 00:22:09.720
do the geospatial processing with it.


00:22:09.720 --> 00:22:11.720
So this is how it fits within Python.


00:22:11.720 --> 00:22:14.840
And actually, looking at our,


00:22:14.840 --> 00:22:17.400
we have an open-source software called Apache Sedona.


00:22:17.400 --> 00:22:20.920
It's an Apache under the Apache license,


00:22:20.920 --> 00:22:25.320
and it has all these APIs, SQL and Python,


00:22:25.320 --> 00:22:27.240
and Python is the most popular.


00:22:27.240 --> 00:22:31.840
So it's been the Python package alone on PyPy


00:22:31.840 --> 00:22:37.240
is being downloaded a million times over on a monthly basis as we're speaking today.


00:22:37.240 --> 00:22:40.520
So definitely Python fits very well within our...


00:22:40.520 --> 00:22:42.520
- Yeah, that's awesome. - Absolutely.


00:22:42.520 --> 00:22:49.320
So it sounds like your business, Wearbots, is a little bit following the OpenCore model, you say?


00:22:49.320 --> 00:22:51.520
- Yes. - Let's round out our conversation here with a...


00:22:51.520 --> 00:22:54.920
Talking about the business itself, how do you get a startup, Ro?


00:22:56.120 --> 00:22:58.520
We follow the OpenCore model, you're totally right about that.


00:22:58.520 --> 00:23:01.320
So we have our open source software Apache Sedona.


00:23:01.320 --> 00:23:05.960
It's available for free open source, very permissive license, the Apache license 2.0.


00:23:05.960 --> 00:23:10.920
And it's open source, it's also used in operational production in so many use cases.


00:23:10.920 --> 00:23:13.720
There are so many contributors outside. I'm the original creator of it,


00:23:13.720 --> 00:23:15.520
as well as my partner, Jia.


00:23:15.520 --> 00:23:18.620
We're both the original creators, but it's grew beyond us now.


00:23:18.620 --> 00:23:23.620
So there are like dozens, like 100 contributors now, something like this.


00:23:23.620 --> 00:23:26.380
And we use Sedona as an open core,


00:23:26.380 --> 00:23:28.380
but we build a whole platform around it.


00:23:28.380 --> 00:23:30.380
So if you want to think about what we do


00:23:30.380 --> 00:23:33.880
compared to the other data platforms in the market,


00:23:33.880 --> 00:23:37.380
there are generic data platforms like Snowflake Databricks.


00:23:37.380 --> 00:23:40.380
There are more specific, specialized data platforms


00:23:40.380 --> 00:23:42.380
like MongoDB for NoSQL.


00:23:42.380 --> 00:23:44.380
There's Neo4j for Graph.


00:23:44.380 --> 00:23:47.380
We are-- World of Bots is like


00:23:47.380 --> 00:23:49.380
the data platform for Geospatial.


00:23:49.380 --> 00:23:50.880
So this is basically--


00:23:50.880 --> 00:23:52.880
And we use Apache Sedona as an open core


00:23:52.880 --> 00:23:54.880
to enable us to do all of this.


00:23:54.880 --> 00:23:56.880
Fantastic. Alright, well,


00:23:56.880 --> 00:23:58.880
congratulations on being here.


00:23:58.880 --> 00:24:00.880
I wish you success with the whole project.


00:24:00.880 --> 00:24:02.880
Thanks for coming on the show.


00:24:02.880 --> 00:24:04.880
Thank you so much. I appreciate it. Looking forward to it.


00:24:04.880 --> 00:24:06.880
Thank you so much.


00:24:06.880 --> 00:24:08.880
Bye.


00:24:08.880 --> 00:24:12.540
who have created Python programmable spreadsheets


00:24:12.540 --> 00:24:15.680
that are super powered with Python and AI.


00:24:15.680 --> 00:24:18.360
I gotta tell you, this product looks super awesome.


00:24:18.360 --> 00:24:20.800
It looks so much better than things like Google Sheets


00:24:20.800 --> 00:24:23.800
or Excel, and I can't wait to get a chance to play with it.


00:24:23.800 --> 00:24:28.280
Hey guys.


00:24:28.280 --> 00:24:29.440
- Hello.


00:24:29.440 --> 00:24:31.320
- Welcome to Talk Python.


00:24:31.320 --> 00:24:32.440
- Yeah.


00:24:32.440 --> 00:24:33.600
- It's great to have you here.


00:24:33.600 --> 00:24:35.020
First, introduce yourselves.


00:24:35.020 --> 00:24:36.280
- Thanks for having us.


00:24:36.280 --> 00:24:39.280
I'm Dawa, I've been doing Python professionally


00:24:39.280 --> 00:24:41.140
for, I don't know, 20 years or so.


00:24:41.140 --> 00:24:44.640
- I'm Jack, I'm Dawa's co-founder.


00:24:44.640 --> 00:24:47.120
Been doing Python a little less than that,


00:24:47.120 --> 00:24:49.200
but met Dawa about five years ago,


00:24:49.200 --> 00:24:52.000
and we founded Neptune about a year ago.


00:24:52.000 --> 00:24:56.080
- Yeah, so let's dive into Neptune.


00:24:56.080 --> 00:24:59.500
What's the product, what's the problem you're solving?


00:24:59.500 --> 00:25:01.300
- Yeah, the proposition that we have


00:25:01.300 --> 00:25:02.960
is pretty straightforward.


00:25:02.960 --> 00:25:07.960
we build a spreadsheet on top of a Jupyter notebook engine,


00:25:07.960 --> 00:25:12.400
which basically gives you all the data science superpowers


00:25:12.400 --> 00:25:14.920
that the notebook gives you


00:25:14.920 --> 00:25:17.040
in a familiar spreadsheet environment,


00:25:17.040 --> 00:25:18.700
which means that you can share your work


00:25:18.700 --> 00:25:20.800
as a Python programmer much easier


00:25:20.800 --> 00:25:23.120
with people that are not familiar with notebooks


00:25:23.120 --> 00:25:25.600
because they have the universal data canvas


00:25:25.600 --> 00:25:26.440
of a spreadsheet.


00:25:26.440 --> 00:25:29.120
>> How interesting, because one of the big challenges


00:25:29.120 --> 00:25:31.840
data scientists often have is they work in Jupyter,


00:25:31.840 --> 00:25:36.400
they work in Jupyter, and then some executive wants to share it at a presentation, or they


00:25:36.400 --> 00:25:39.440
want to continue working on it, but they're not developers.


00:25:39.440 --> 00:25:40.440
So what do you do?


00:25:40.440 --> 00:25:44.800
You write an Excel file, and you hand that off, and then you re-import it somewhere,


00:25:44.800 --> 00:25:45.800
maybe?


00:25:45.800 --> 00:25:46.800
I don't know.


00:25:46.800 --> 00:25:47.800
Yeah, yeah.


00:25:47.800 --> 00:25:52.360
The typical flow is very much like you write out a CSV, you email that to the person that


00:25:52.360 --> 00:25:57.680
is going to put it into Excel, that person then creates a graph in Excel, screenshot


00:25:57.680 --> 00:26:02.280
that's graphed in Excel and sends it to the person that puts it in the presentation


00:26:02.280 --> 00:26:03.880
and then the CEO can do something with it.


00:26:03.880 --> 00:26:06.040
It goes either in PowerPoint or it goes in Word.


00:26:06.040 --> 00:26:08.440
Yeah, one of those two, right? Probably the picture.


00:26:08.440 --> 00:26:13.160
But that's a bunch of steps that are disassociated from data.


00:26:13.160 --> 00:26:15.360
So that's one problem, right? That's the one problem.


00:26:15.360 --> 00:26:21.720
But since no one really sees your product in action while we're talking here,


00:26:21.720 --> 00:26:23.360
maybe just a bit of an explanation.


00:26:23.360 --> 00:26:28.360
It looks very much like Google Docs,


00:26:28.360 --> 00:26:31.200
or one of the online Excel,


00:26:31.200 --> 00:26:33.720
I say Docs, I mean Sheets,


00:26:33.720 --> 00:26:35.440
one of the online spreadsheet things.


00:26:35.440 --> 00:26:37.160
It doesn't look like something embedded into notebooks.


00:26:37.160 --> 00:26:41.840
Yeah, that's right.


00:26:41.840 --> 00:26:42.480
It is a spreadsheet first and foremost.


00:26:42.480 --> 00:26:45.480
It looks a lot like Google Sheets,


00:26:45.480 --> 00:26:47.400
but you can run Python in it.


00:26:47.400 --> 00:26:49.280
You can run Python both directly in the spreadsheet cells.


00:26:49.280 --> 00:26:52.680
You can also define other functionality in Python


00:26:51.120 --> 00:26:52.320
and then run that with your spreadsheet.


00:26:52.320 --> 00:26:54.840
- Yeah, I mean, to me, that's where the magic is, right?


00:26:54.840 --> 00:26:59.520
Like, Excel or sheets, the spreadsheets more broadly,


00:26:59.520 --> 00:27:01.880
are super useful, but it's always like,


00:27:01.880 --> 00:27:03.440
"Hmm, how do I do an if statement


00:27:03.440 --> 00:27:05.120
"in this dreaded thing again?


00:27:05.120 --> 00:27:09.000
"And how do I do a max with a..."


00:27:09.000 --> 00:27:11.280
You know, just all the programming aspect


00:27:11.280 --> 00:27:12.920
of going beyond just having raw data


00:27:12.920 --> 00:27:15.000
is just like, "Oh boy, this is..."


00:27:15.000 --> 00:27:17.720
And you just showed me an example where like,


00:27:17.720 --> 00:27:19.440
here, you just write range of a thing


00:27:19.440 --> 00:27:20.760
and boom, it just writes that out.


00:27:20.760 --> 00:27:24.720
or you write up Python tertiary statement,


00:27:24.720 --> 00:27:26.340
and it just runs.


00:27:26.340 --> 00:27:29.440
- Right, yeah, but also common things in spreadsheets


00:27:29.440 --> 00:27:31.440
that are hard are data cleaning, right?


00:27:31.440 --> 00:27:33.160
You get some data from somewhere,


00:27:33.160 --> 00:27:34.500
and it's not quite right,


00:27:34.500 --> 00:27:37.680
and most of the time, people end up doing this by hand.


00:27:37.680 --> 00:27:40.260
And that's fine the first time you do it,


00:27:40.260 --> 00:27:43.000
the second time and the third time, it gets very annoying.


00:27:43.000 --> 00:27:44.960
While if you just write a little bit of Python,


00:27:44.960 --> 00:27:47.760
you can clean data like that,


00:27:47.760 --> 00:27:49.320
and then the next time you have the data,


00:27:49.320 --> 00:27:52.360
you just rerun the script and it's clean again.


00:27:52.360 --> 00:27:55.080
So that's a very powerful way of doing this thing.


00:27:55.080 --> 00:27:58.000
And we have a full Python environment.


00:27:58.000 --> 00:28:00.880
It's not just a lightweight, you know, runs in the browser.


00:28:00.880 --> 00:28:03.360
You can do pip install anything you want.


00:28:03.360 --> 00:28:05.600
So you can connect to any API out there,


00:28:05.600 --> 00:28:08.720
use any data, export any data.


00:28:08.720 --> 00:28:09.800
It's a complete environment.


00:28:09.800 --> 00:28:11.360
- Yeah, how interesting.


00:28:11.360 --> 00:28:14.400
There's a little window where you can write straight Python,


00:28:14.400 --> 00:28:17.680
you know, def some function that does arbitrary Python,


00:28:17.680 --> 00:28:21.060
and then you can invoke it like a function in the spreadsheet, right?


00:28:21.060 --> 00:28:22.560
Exactly.


00:28:22.560 --> 00:28:25.800
And you can talk to things on the internet?


00:28:25.800 --> 00:28:27.500
For example, I could do web scraping there?


00:28:27.500 --> 00:28:30.660
Just call an API, like a currency API?


00:28:30.660 --> 00:28:31.960
Yeah, exactly.


00:28:31.960 --> 00:28:32.960
Okay.


00:28:32.960 --> 00:28:35.000
Yeah, any REST call you want to make,


00:28:35.000 --> 00:28:38.440
you just import requests and go for it.


00:28:38.440 --> 00:28:39.780
Wow.


00:28:39.780 --> 00:28:41.280
So where does it run?


00:28:41.280 --> 00:28:45.240
Is this a PyScript, Pyodide?


00:28:45.240 --> 00:28:47.280
Is this Sculpt? Is this Docker?


00:28:47.280 --> 00:28:51.440
- It's all running in a Docker container, server side.


00:28:51.440 --> 00:28:52.320
That's how it works.


00:28:52.320 --> 00:28:55.380
And we do that for maximum flexibility,


00:28:55.380 --> 00:28:56.300
maximum capability.


00:28:56.300 --> 00:28:58.960
So it means that anything you can install,


00:28:58.960 --> 00:29:00.680
anything you can run on a Jupyter notebook


00:29:00.680 --> 00:29:03.320
running on Linux, you can run in Neptune.


00:29:03.320 --> 00:29:05.780
- I see, so we get full Python 3.11 or 3.10


00:29:05.780 --> 00:29:06.620
or whatever it is.


00:29:06.620 --> 00:29:07.440
- Yep, yep.


00:29:07.440 --> 00:29:11.120
And we ship with a bunch of useful packages pre-installed,


00:29:11.120 --> 00:29:13.200
but if you want to install something else,


00:29:13.200 --> 00:29:15.880
you just open up our dependency management window,


00:29:15.880 --> 00:29:17.880
install anything else you want to use.


00:29:17.880 --> 00:29:20.480
It's all very manageable, very configurable.


00:29:20.480 --> 00:29:22.640
- Well, it looks super good to me.


00:29:22.640 --> 00:29:26.160
What's the user model?


00:29:26.160 --> 00:29:28.320
Do I go and create an account on your site


00:29:28.320 --> 00:29:30.560
and it's kind of like Google Docs or what's the story?


00:29:30.560 --> 00:29:31.600
- Yep, exactly.


00:29:31.600 --> 00:29:32.440
You can try it out.


00:29:32.440 --> 00:29:35.000
You can go to neptine.com in the upper right,


00:29:35.000 --> 00:29:35.920
just click log in.


00:29:35.920 --> 00:29:36.760
You can create an account.


00:29:36.760 --> 00:29:39.800
It's totally free to use the free tier.


00:29:39.800 --> 00:29:42.280
Yeah, give it a shot.


00:29:42.280 --> 00:29:43.400
- Awesome.


00:29:43.400 --> 00:29:45.120
All right, final question.


00:29:45.120 --> 00:29:47.120
How did you guys get here to start up Rho?


00:29:47.120 --> 00:29:51.320
Everyone wants to build something amazing with open source,


00:29:51.320 --> 00:29:53.760
but how did you turn that into a business


00:29:53.760 --> 00:29:56.520
and something you can put your full time into?


00:29:56.520 --> 00:30:00.560
- I mean, I guess we're kind of lucky in that


00:30:00.560 --> 00:30:05.560
when we started, I pitched it to a bunch of people


00:30:05.560 --> 00:30:10.800
that due to no fault of their own got into some money


00:30:10.800 --> 00:30:13.560
and they were willing to back us.


00:30:13.560 --> 00:30:17.360
and then later we joined YC for the winter batch.


00:30:17.360 --> 00:30:18.200
- Awesome.


00:30:18.200 --> 00:30:22.440
- And in that process, we, you know,


00:30:22.440 --> 00:30:23.520
got a little bit of publicity


00:30:23.520 --> 00:30:25.520
and were picked up for the startup role.


00:30:25.520 --> 00:30:28.120
- Just to add to that too,


00:30:28.120 --> 00:30:30.920
based on our experience in Y Combinator,


00:30:30.920 --> 00:30:33.000
there are lots of open source tools out there


00:30:33.000 --> 00:30:36.440
that are able to get started on some commercial path,


00:30:36.440 --> 00:30:39.360
just based on the community that they're building,


00:30:39.360 --> 00:30:40.440
based on the users.


00:30:40.440 --> 00:30:41.720
- Right, right.


00:30:41.720 --> 00:30:42.640
- It's a very good path.


00:30:42.640 --> 00:30:45.140
I feel like this whole open core business model


00:30:45.140 --> 00:30:47.320
has really taken off in the last couple of years


00:30:47.320 --> 00:30:50.840
where it used to be a PayPal donate button


00:30:50.840 --> 00:30:54.040
and now it's a legitimate offering that businesses will buy


00:30:54.040 --> 00:30:56.200
and it's good.


00:30:56.200 --> 00:30:58.100
I think it's very positive.


00:30:58.100 --> 00:31:00.860
So I'm really impressed with what you guys built.


00:31:00.860 --> 00:31:01.840
I think it's awesome.


00:31:01.840 --> 00:31:03.340
I think people really like it.


00:31:03.340 --> 00:31:06.200
Yeah, so good luck.


00:31:06.200 --> 00:31:08.120
Thanks for being here.


00:31:08.120 --> 00:31:09.120
- Thank you so much.


00:31:09.120 --> 00:31:11.280
- Now up is next up.


00:31:11.280 --> 00:31:15.860
We have Federer Co Garza and Christian Tschula here to tell us about their time series startup


00:31:15.860 --> 00:31:19.960
ready to make predictions based on an open source time series ecosystem.


00:31:19.960 --> 00:31:21.520
Hey there.


00:31:21.520 --> 00:31:22.520
Hello.


00:31:22.520 --> 00:31:24.520
Welcome to Talk Python.


00:31:24.520 --> 00:31:25.520
Hello.


00:31:25.520 --> 00:31:26.520
Hello.


00:31:26.520 --> 00:31:27.520
Hello.


00:31:27.520 --> 00:31:28.520
Let's start with introductions.


00:31:28.520 --> 00:31:29.520
Who are you?


00:31:29.520 --> 00:31:30.520
So I am Christian Tschalu.


00:31:30.520 --> 00:31:31.520
I'm a co-founder of Nixla.


00:31:31.520 --> 00:31:32.520
Yep.


00:31:32.520 --> 00:31:33.520
Hello, I'm Federer.


00:31:33.520 --> 00:31:34.520
I'm CTO and co-founder of Nixla.


00:31:34.520 --> 00:31:35.520
Nice to meet you both.


00:31:35.520 --> 00:31:40.120
Hello, I'm Fedim, I'm CTO and co-founder of Nixla.


00:31:40.120 --> 00:31:41.680
Nice to meet you both.


00:31:41.680 --> 00:31:43.840
Welcome to the show.


00:31:43.840 --> 00:31:46.680
Really great to have you here at PyCon.


00:31:46.680 --> 00:31:51.880
And yeah, let's start with the problem you all are trying to solve.


00:31:51.880 --> 00:31:52.880
Okay, yeah.


00:31:52.880 --> 00:31:56.080
So at Nixla, what we do is time series forecasting.


00:31:56.080 --> 00:32:02.320
So as you know, time series forecasting is a very relevant task that a lot of companies


00:32:02.320 --> 00:32:05.040
and practitioners need to solve,


00:32:05.040 --> 00:32:08.320
essentially predicting future values of something, right?


00:32:08.320 --> 00:32:11.480
It could be demand of a product or the weather.


00:32:11.480 --> 00:32:13.960
So there are many use cases for forecasting.


00:32:13.960 --> 00:32:16.520
It's a very common problem in industry.


00:32:16.520 --> 00:32:18.840
And essentially, we want to provide tools


00:32:18.840 --> 00:32:20.880
to developers, engineers, researchers


00:32:20.880 --> 00:32:24.400
to be able to do this more efficiently


00:32:24.400 --> 00:32:27.000
and with good practices.


00:32:27.000 --> 00:32:29.440
And yeah, that's mostly it.


00:32:29.440 --> 00:32:36.480
Right. Okay. So is this a, like a Python API? Is this a database? What's, what is the actual


00:32:36.480 --> 00:32:39.280
product? I guess. Yeah.


00:32:39.280 --> 00:32:46.960
So we have an ecosystem of Python libraries and we have different libraries for different use


00:32:46.960 --> 00:32:53.040
cases. For example, we have the stats forecast library, which is, which specializes in


00:32:53.040 --> 00:32:55.200
statistical econometric models.


00:32:55.200 --> 00:32:58.680
And also we have a more


00:32:58.680 --> 00:33:04.080
complex models and libraries for deep learning


00:33:04.080 --> 00:33:07.360
and machine learning applications.


00:33:07.360 --> 00:33:10.320
- Nice, and have you trained some of these models yourself


00:33:10.320 --> 00:33:12.560
on certain data, things like that?


00:33:12.560 --> 00:33:15.000
Or where do you get the models from?


00:33:15.000 --> 00:33:18.000
- The idea behind the libraries is that you can use


00:33:18.000 --> 00:33:20.260
whatever your data is.


00:33:21.160 --> 00:33:26.160
The only restriction is that it must be time series data,


00:33:26.160 --> 00:33:28.440
but you can use whatever data you have.


00:33:28.440 --> 00:33:29.320
Yeah.


00:33:29.320 --> 00:33:30.440
- Okay.


00:33:30.440 --> 00:33:31.280
Fantastic.


00:33:31.280 --> 00:33:32.360
And where's,


00:33:32.360 --> 00:33:35.120
it's data,


00:33:35.120 --> 00:33:38.100
Python's at the heart of so much data processing these days.


00:33:38.100 --> 00:33:40.040
And, you know, I guess,


00:33:40.040 --> 00:33:44.040
give a shout out to all the different Python packages


00:33:44.040 --> 00:33:45.280
that you already out there, maybe.


00:33:45.280 --> 00:33:47.280
You wanna just give a rundown on those


00:33:47.280 --> 00:33:50.720
and what they're for and then talk about them?


00:33:50.720 --> 00:33:54.560
Yeah, so we have six packages right now.


00:33:54.560 --> 00:33:57.720
They are all libraries on GitHub that you can pip install


00:33:57.720 --> 00:33:59.120
or install it with Conda.


00:33:59.120 --> 00:34:01.560
And essentially, they focus on different ways


00:34:01.560 --> 00:34:02.840
of approaching forecasting.


00:34:02.840 --> 00:34:05.960
And they're essentially libraries built on Python.


00:34:05.960 --> 00:34:08.280
Depending, some are built on Numba.


00:34:08.280 --> 00:34:09.520
Other methods are in Python.


00:34:09.520 --> 00:34:10.760
Oh, you guys are using Numba?


00:34:10.760 --> 00:34:11.640
Oh, OK.


00:34:11.640 --> 00:34:12.760
And it makes a huge difference?


00:34:12.760 --> 00:34:13.240
Yeah.


00:34:13.240 --> 00:34:13.880
It makes a difference.


00:34:13.880 --> 00:34:14.280
All right.


00:34:14.280 --> 00:34:14.560
Yeah.


00:34:14.560 --> 00:34:17.400
Tell people really, really quickly, what is Numba?


00:34:17.400 --> 00:34:23.720
So, Numba is this library which allows you to compile just in time your code.


00:34:23.720 --> 00:34:27.480
So, it's a lot faster than using just plain Python.


00:34:27.480 --> 00:34:29.080
And how easy is it to use?


00:34:29.080 --> 00:34:30.680
It's really easy.


00:34:30.680 --> 00:34:31.080
Okay.


00:34:31.080 --> 00:34:39.240
Yeah. In fact, we wanted to make our library more efficient and more faster,


00:34:39.240 --> 00:34:43.320
and we did it in like two weeks only using Numba.


00:34:43.320 --> 00:34:45.880
So, it was really easy to use.


00:34:45.880 --> 00:34:47.000
Yeah. Awesome. Awesome.


00:34:47.000 --> 00:34:48.080
- Yeah.


00:34:48.080 --> 00:34:51.360
- And some other packages uses PyTorch.


00:34:51.360 --> 00:34:53.480
So like our deep learning methods,


00:34:53.480 --> 00:34:56.720
neural forecasting approaches are built on PyTorch


00:34:56.720 --> 00:34:58.320
or PyTorch Lightning.


00:34:58.320 --> 00:35:00.320
- Yeah, fantastic.


00:35:00.320 --> 00:35:02.400
So would you say that your business model


00:35:02.400 --> 00:35:04.340
is something of an open core model


00:35:04.340 --> 00:35:07.840
where it's kind of built on top of these libraries and...


00:35:07.840 --> 00:35:08.680
- Absolutely, yeah.


00:35:08.680 --> 00:35:10.480
So for now we have been focusing on


00:35:10.480 --> 00:35:13.800
building these libraries, the community.


00:35:13.800 --> 00:35:15.720
We have a very active community on Slack


00:35:15.720 --> 00:35:18.520
and people that use us and contribute with our code.


00:35:18.520 --> 00:35:22.560
And we are building services on top of these libraries,


00:35:22.560 --> 00:35:26.480
like enterprise solutions or hosting computation,


00:35:26.480 --> 00:35:28.800
or even simplifying the usage further.


00:35:28.800 --> 00:35:31.000
So for example, APIs where you can just simply


00:35:31.000 --> 00:35:32.280
pass your data.


00:35:32.280 --> 00:35:34.240
I want to know what is going to happen next.


00:35:34.240 --> 00:35:35.400
These data--


00:35:35.400 --> 00:35:36.880
- Do you pass it some historical data


00:35:36.880 --> 00:35:38.280
and ask it to make predictions?


00:35:38.280 --> 00:35:40.760
- Make predictions and then we produce the predictions.


00:35:40.760 --> 00:35:41.600
- Okay.


00:35:41.600 --> 00:35:43.160
- Yeah, this is one of types or...


00:35:44.720 --> 00:35:48.080
So we are working on these different applications and services.


00:35:48.080 --> 00:35:49.600
Awesome. It sounds really cool.


00:35:49.600 --> 00:35:50.100
Thanks.


00:35:50.100 --> 00:35:51.360
So final question.


00:35:51.360 --> 00:35:55.120
How did you make your way over here to Startup Row at PyCon?


00:35:55.120 --> 00:35:58.960
Like, how did you start your company and how did you get here?


00:35:58.960 --> 00:36:02.880
Yeah, it has been a long journey.


00:36:02.880 --> 00:36:03.520
Long story.


00:36:03.520 --> 00:36:10.720
I mean, we have been like for a year working on these libraries and services.


00:36:10.720 --> 00:36:14.080
And right now, we are focusing on building the startup, right?


00:36:14.080 --> 00:36:22.480
We want to be able to do this full time for a long time and really, yeah, build something


00:36:22.480 --> 00:36:24.520
that can help people.


00:36:24.520 --> 00:36:25.520
Yeah.


00:36:25.520 --> 00:36:26.520
Yeah.


00:36:26.520 --> 00:36:33.920
Are you looking to offer an API, like an open AI sort of model or running people's code


00:36:33.920 --> 00:36:36.520
as a service or what, where are you thinking you're going?


00:36:36.520 --> 00:36:37.520
Yeah.


00:36:37.520 --> 00:36:38.520
Yeah.


00:36:38.520 --> 00:36:39.520
That's definitely one of the options.


00:36:39.520 --> 00:36:43.560
But yeah, we are finishing our funding runs.


00:36:43.560 --> 00:36:46.000
And once we finish that--


00:36:46.000 --> 00:36:48.160
- Funding helps a lot on software development, right?


00:36:48.160 --> 00:36:49.360
- Funding helps a lot on development.


00:36:49.360 --> 00:36:51.920
And yeah, so we're exploring different venues.


00:36:51.920 --> 00:36:53.960
And there's very exciting things to come.


00:36:53.960 --> 00:36:57.460
- All right, well, we all wish you the best of luck


00:36:57.460 --> 00:36:59.520
on your project, and thanks for taking the time


00:36:59.520 --> 00:37:00.340
to talk to us.


00:37:00.340 --> 00:37:01.340
- No, thank you for inviting me.


00:37:01.340 --> 00:37:02.180
- Yeah, you bet.


00:37:02.180 --> 00:37:03.000
- Thanks. - Bye.


00:37:03.000 --> 00:37:04.400
- Bye.


00:37:04.400 --> 00:37:06.280
- We'll speak with Piero Molina from PrediBase.


00:37:06.280 --> 00:37:08.280
They empower you to rapidly build, iterate,


00:37:08.280 --> 00:37:12.280
and deploy ML models with their declarative machine learning platform.


00:37:12.280 --> 00:37:17.280
Piero, welcome to Talk Python To Me.


00:37:17.280 --> 00:37:19.280
Thank you very much for having me.


00:37:19.280 --> 00:37:21.280
Yeah, it's fantastic to have you here. Quick introduction for everyone.


00:37:21.280 --> 00:37:25.280
Sure. So, I'm Piero and I'm the CEO of Predebase.


00:37:25.280 --> 00:37:27.280
I can tell you about Predebase in a second.


00:37:27.280 --> 00:37:30.280
I'm also the author of Ludwig, which is an open source


00:37:30.280 --> 00:37:34.280
Python package for training machine learning models.


00:37:34.280 --> 00:37:36.280
And, yeah.


00:37:36.280 --> 00:37:41.280
Awesome, well, great to meet you.


00:37:41.280 --> 00:37:44.280
Tell us about your company.


00:37:44.280 --> 00:37:46.280
Yeah, so Predibase tries to solve the problem of the inefficiency


00:37:46.280 --> 00:37:52.280
in the development process of machine learning projects.


00:37:52.280 --> 00:37:55.280
Usually they take anywhere from six months to a year or even more, depending on the organizations, their degree of expertise in developing machine learning projects.


00:38:02.280 --> 00:38:07.280
So with using our platform, companies can get down to,


00:38:07.280 --> 00:38:09.920
from months to days of development,


00:38:09.920 --> 00:38:11.920
and that makes them substantially faster.


00:38:11.920 --> 00:38:14.720
Each machine learning project becomes cheaper,


00:38:14.720 --> 00:38:18.360
and organizations and teams


00:38:18.360 --> 00:38:20.480
can do many more machine learning projects.


00:38:20.480 --> 00:38:23.080
- Yeah, I mean, training is where the time


00:38:23.080 --> 00:38:26.040
and the money is spent, at least to computation.


00:38:26.040 --> 00:38:28.120
I mean, paying developers is expensive, too,


00:38:28.120 --> 00:38:31.680
but in terms of, people say, machine learning or AI,


00:38:31.680 --> 00:38:35.240
It takes all this energy and it does take energy to answer questions,


00:38:35.240 --> 00:38:37.600
but it really takes energy to train the models, right?


00:38:37.600 --> 00:38:38.800
Yeah, yeah, definitely.


00:38:38.800 --> 00:38:41.040
There's training models is a huge part.


00:38:41.040 --> 00:38:46.080
Managing the data and putting it in a shape and form that is useful for training


00:38:46.080 --> 00:38:51.880
the models is also another big piece of the reason why these teams take so long


00:38:51.880 --> 00:38:59.040
to develop models and also the usually there's several people involved in the


00:38:59.040 --> 00:38:59.640
process.


00:38:59.640 --> 00:39:01.360
There are different stakeholders.


00:39:01.360 --> 00:39:03.560
Some of them are more machine learning oriented.


00:39:03.560 --> 00:39:04.820
Some of them are more engineers.


00:39:04.820 --> 00:39:07.860
Some of them may be analysts or product developers


00:39:07.860 --> 00:39:10.120
that need to use the models downstream.


00:39:10.120 --> 00:39:13.900
And so the handoff of the artifacts


00:39:13.900 --> 00:39:18.160
and of the whole process between these different people


00:39:18.160 --> 00:39:20.660
is also a source of a lot of friction.


00:39:20.660 --> 00:39:22.160
And with the platform that we are building,


00:39:22.160 --> 00:39:23.700
we are trying also to reduce the friction


00:39:23.700 --> 00:39:24.660
as much as possible.


00:39:24.660 --> 00:39:25.740
- Yeah, sounds great.


00:39:25.740 --> 00:39:30.360
Is it about managing that workflow


00:39:30.360 --> 00:39:33.240
or is it about things like transfer learning


00:39:33.240 --> 00:39:37.860
and other more theoretical ideas?


00:39:37.860 --> 00:39:39.620
Like, where exactly are you doing this?


00:39:39.620 --> 00:39:40.460
- Yeah, yeah, yeah.


00:39:40.460 --> 00:39:42.660
So to give you like a little bit more of a picture,


00:39:42.660 --> 00:39:45.620
I would say where we are starting from


00:39:45.620 --> 00:39:48.160
is from Ludwig, which is his open source project.


00:39:48.160 --> 00:39:50.080
And what Ludwig allows people to do,


00:39:50.080 --> 00:39:54.040
it allows to define machine learning models and pipelines


00:39:54.040 --> 00:39:56.840
in terms of a configuration file.


00:39:56.840 --> 00:39:58.880
So you don't need to write the low level


00:39:58.880 --> 00:40:03.880
PyTorch or TensorFlow code.


00:40:03.880 --> 00:40:06.080
You can just write a configuration that maps


00:40:06.080 --> 00:40:08.440
with the schema of your data.


00:40:08.440 --> 00:40:10.960
And that's literally all you need to get started.


00:40:10.960 --> 00:40:13.240
So it makes it substantially easier and faster


00:40:13.240 --> 00:40:15.120
to get started training models.


00:40:15.120 --> 00:40:17.680
Then if you are more experienced,


00:40:17.680 --> 00:40:19.200
you can go down and change more than 700 parameters


00:40:19.200 --> 00:40:22.640
that are there and change all the details of training,


00:40:22.640 --> 00:40:26.560
of the models themselves, the pre-processing,


00:40:26.560 --> 00:40:28.640
so you have full flexibility and control.


00:40:26.240 --> 00:40:30.520
and you can also go all the way down to the Python code,


00:40:30.520 --> 00:40:33.920
add your own classes, register them from a decorator,


00:40:33.920 --> 00:40:36.960
and they become available in the configuration.


00:40:36.960 --> 00:40:37.800
>> Very cool.


00:40:37.800 --> 00:40:38.840
>> This is what we have in the open source.


00:40:38.840 --> 00:40:39.660
>> Right, right.


00:40:39.660 --> 00:40:42.520
>> And what we're building on top of it is all the,


00:40:42.520 --> 00:40:45.360
like, again, you can think about this,


00:40:45.360 --> 00:40:47.440
like for people who may be familiar with Terraform,


00:40:47.440 --> 00:40:50.100
for instance, what Terraform does for infrastructure,


00:40:50.100 --> 00:40:51.200
so defining your infrastructure


00:40:51.200 --> 00:40:53.320
for like a configuration file,


00:40:53.320 --> 00:40:55.320
Ludwig does it for machine learning.


00:40:55.320 --> 00:40:56.560
- Got it, okay.


00:40:56.560 --> 00:40:57.800
- And so PrediBase, what does it,


00:40:57.800 --> 00:41:02.240
it uses this basic concept of models


00:41:02.240 --> 00:41:03.880
as configuration really,


00:41:03.880 --> 00:41:06.860
and builds on top of it all sorts of infrastructure


00:41:06.860 --> 00:41:08.720
that is needed for organizations


00:41:08.720 --> 00:41:11.720
that are big enterprises to use it in the cloud.


00:41:11.720 --> 00:41:15.860
So we have like, we can deploy on cloud environments,


00:41:15.860 --> 00:41:18.560
we abstract away the infrastructure aspect of it,


00:41:18.560 --> 00:41:21.400
so you can run the training of your models and inference


00:41:21.400 --> 00:41:23.440
on either one small CPU machines


00:41:23.440 --> 00:41:26.240
or a thousand large GPU machines


00:41:26.240 --> 00:41:27.680
and you don't need to think about it basically.


00:41:27.680 --> 00:41:28.680
- Oh cool.


00:41:28.680 --> 00:41:30.040
So I just say train it


00:41:30.040 --> 00:41:32.260
and if you happen to have GPUs available,


00:41:32.260 --> 00:41:33.160
you might use them?


00:41:33.160 --> 00:41:34.000
- Right, absolutely.


00:41:34.000 --> 00:41:35.560
- Okay, excellent.


00:41:35.560 --> 00:41:40.560
So where does PrettyBase fit into this?


00:41:40.560 --> 00:41:44.080
Like where's the business side of this product?


00:41:44.080 --> 00:41:45.000
- Right, right.


00:41:45.000 --> 00:41:49.440
I would say PrettyBase makes it easy for teams really


00:41:49.440 --> 00:41:52.000
to develop machine learning products.


00:41:52.000 --> 00:41:54.380
As if Ludwig, you can define your own configurations,


00:41:54.380 --> 00:41:58.200
but it's like a single user experience, if you want.


00:41:58.200 --> 00:42:00.620
Predibase becomes like a multi-user experience,


00:42:00.620 --> 00:42:02.640
where again, you deploy on the cloud


00:42:02.640 --> 00:42:04.680
and you can connect with data sources.


00:42:04.680 --> 00:42:07.280
In Ludwig, you provide like a CSV file or a data frame,


00:42:07.280 --> 00:42:08.860
a pandas data frame.


00:42:08.860 --> 00:42:12.320
With Predibase, you can connect to Snowflake,


00:42:12.320 --> 00:42:15.320
to Databricks, to MySQL databases,


00:42:15.320 --> 00:42:17.700
to S3 buckets and do all of those things.


00:42:17.700 --> 00:42:22.700
And also there's a notion of model repositories


00:42:22.700 --> 00:42:26.160
because when you start to train a model,


00:42:26.160 --> 00:42:27.980
the first one is never the last one that you train.


00:42:27.980 --> 00:42:30.280
And so in an analogy to Git,


00:42:30.280 --> 00:42:33.980
in Git you have commits and you have teams


00:42:33.980 --> 00:42:35.940
doing different commits and collaborating together.


00:42:35.940 --> 00:42:38.020
In our platform you have multiple models


00:42:38.020 --> 00:42:40.780
that are configurations


00:42:40.780 --> 00:42:42.140
and multiple people training new different models


00:42:42.140 --> 00:42:44.020
spawning from the previous ones.


00:42:44.020 --> 00:42:45.060
So there's a lineage of models


00:42:45.060 --> 00:42:47.100
that can be compared among each other.


00:42:44.140 --> 00:42:48.460
And then the very last piece is that we make it easy to deploy these models with one click of a button.


00:42:48.460 --> 00:42:53.580
So you go from the data to the deployed model very, very quickly.


00:42:53.580 --> 00:42:54.780
Fantastic. It sounds great.


00:42:54.780 --> 00:42:57.660
So final question.


00:42:57.660 --> 00:42:59.620
A lot of people out there working in open source,


00:42:59.620 --> 00:43:05.420
they'd love to be here on Startup Row talking about their startup based on their project.


00:43:05.420 --> 00:43:08.700
It sounds like what you built is based on the open core model,


00:43:08.700 --> 00:43:11.500
which seems to be really, really successful these days.


00:43:11.500 --> 00:43:13.700
Tell us a bit about how you got here.


00:43:13.700 --> 00:43:18.700
Right, so basically I think it started from the open source, really.


00:43:18.700 --> 00:43:22.980
I started developing Ludwig when I was working at Uber.


00:43:22.980 --> 00:43:27.280
And initially, my own project was a way for myself


00:43:27.280 --> 00:43:30.680
for being more efficient and working on the next machine learning project


00:43:30.680 --> 00:43:32.780
without reinventing the wheel every single time.


00:43:32.780 --> 00:43:35.520
And I built that because I'm lazy and I don't want...


00:43:35.520 --> 00:43:39.600
When I do one thing more than twice, then I automate it for myself, really.


00:43:39.600 --> 00:43:42.900
Productive laziness or something like this.


00:43:42.900 --> 00:43:46.900
And so then other people in the company started using it.


00:43:46.900 --> 00:43:50.020
And that convinced me that making it open source,


00:43:50.020 --> 00:43:52.900
also because it was built on top of other open source projects,


00:43:52.900 --> 00:43:56.300
would have been a great way to both have people contribute to it and improve it,


00:43:56.300 --> 00:43:57.740
and also to give back to the community.


00:43:57.740 --> 00:44:01.980
Because again, I was using myself a lot of open source projects to build it.


00:44:01.980 --> 00:44:04.340
And then from there,


00:44:04.340 --> 00:44:09.980
I made it so that we donated the project to Linux Foundation.


00:44:09.980 --> 00:44:11.820
So now it's backed by the Linux Foundation,


00:44:11.820 --> 00:44:16.820
and also the governance is open


00:44:16.820 --> 00:44:19.020
as opposed to what it was before when I was at Uber.


00:44:19.020 --> 00:44:21.300
And from there, actually, I met a bunch of people,


00:44:21.300 --> 00:44:24.660
some of my co-founders at the company,


00:44:24.660 --> 00:44:26.540
thanks to the project.


00:44:26.540 --> 00:44:28.060
And we decided that,


00:44:28.060 --> 00:44:30.620
so for instance, one of them is Professor Christoph from Stanford.


00:44:30.620 --> 00:44:33.060
He was developing a similar system that was closed


00:44:33.060 --> 00:44:35.980
internally at Apple.


00:44:35.980 --> 00:44:37.380
And so we said, "This thing works at Uber,


00:44:37.380 --> 00:44:39.180
works at Apple, works in the open source.


00:44:37.700 --> 00:44:39.700
let's make a company out of this, right?


00:44:39.700 --> 00:44:40.700
- Fantastic, yeah.


00:44:40.700 --> 00:44:44.020
Solving some problems for these big teams, right?


00:44:44.020 --> 00:44:44.860
Excellent.


00:44:44.860 --> 00:44:47.100
Well, best of luck on your company.


00:44:47.100 --> 00:44:47.940
- Thank you very much, man.


00:44:47.940 --> 00:44:48.900
- Yeah, thanks for being here.


00:44:48.900 --> 00:44:50.100
- Yeah, absolutely, a pleasure.


00:44:50.100 --> 00:44:51.420
- Yeah, bye. - Thank you so much.


00:44:51.420 --> 00:44:54.420
- We'll finish up our stroll down startup lane


00:44:54.420 --> 00:44:56.180
by talking with the folks at Pinecone.


00:44:56.180 --> 00:44:59.580
We have Nikhil Rao to talk about the Pure Python


00:44:59.580 --> 00:45:02.100
full-stack web app platform that they've built.


00:45:02.100 --> 00:45:07.140
Nikhil, welcome to Talk Python.


00:45:07.140 --> 00:45:08.060
- Yeah, great to be here.


00:45:08.060 --> 00:45:08.900
Thanks for having me.


00:45:08.900 --> 00:45:10.540
- It's great to have you here.


00:45:10.540 --> 00:45:13.740
I love going through all the different projects


00:45:13.740 --> 00:45:17.180
on Startup Row and talking about them


00:45:17.180 --> 00:45:18.460
and shedding a little light on them.


00:45:18.460 --> 00:45:20.340
So happy to have you here.


00:45:20.340 --> 00:45:22.500
Yeah, yeah, give a quick introduction on yourself.


00:45:22.500 --> 00:45:23.500
- Yeah, so I'm Nikhil.


00:45:23.500 --> 00:45:25.900
I'm the CEO co-founder of Pinecone


00:45:25.900 --> 00:45:28.980
and we're building a way to make web apps in pure Python.


00:45:28.980 --> 00:45:30.700
So we have an open source framework


00:45:30.700 --> 00:45:32.260
and anyone can install this


00:45:32.260 --> 00:45:34.460
and basically start creating their apps


00:45:34.460 --> 00:45:36.940
front end and back end using Python.


00:45:36.940 --> 00:45:39.740
Our company went through the recent Y Combinator batch,


00:45:39.740 --> 00:45:42.180
just ended the Winter 23 batch.


00:45:42.180 --> 00:45:43.860
And recently we raised our seed round


00:45:43.860 --> 00:45:45.660
and starting to hire out and pretty much grow out


00:45:45.660 --> 00:45:47.220
our project and company from here.


00:45:47.220 --> 00:45:48.260
- Okay, well, awesome.


00:45:48.260 --> 00:45:50.660
Congratulations, that sounds really cool.


00:45:50.660 --> 00:45:54.260
Give us an idea of, I guess, why do you build this, right?


00:45:54.260 --> 00:45:56.300
We've got Flask, we've got Django.


00:45:56.300 --> 00:45:58.220
I mean, heck, we even have Ruby if you really want it.


00:45:58.220 --> 00:45:59.700
- Yeah, there's a lot.


00:45:59.700 --> 00:46:02.140
So previous to this, like you mentioned,


00:46:02.140 --> 00:46:04.060
there's frameworks like Flask and Django.


00:46:04.060 --> 00:46:05.900
And whenever you wanted to, a Python developer


00:46:05.900 --> 00:46:07.660
to make a web app, they use something like this,


00:46:07.660 --> 00:46:08.660
but you always have to pair it


00:46:08.660 --> 00:46:10.180
with another front-end library.


00:46:10.180 --> 00:46:12.180
So you can't just make your front-end using Python,


00:46:12.180 --> 00:46:14.740
you still have to end up using JavaScript, HTML, React,


00:46:14.740 --> 00:46:16.160
stuff like that for your front-end.


00:46:16.160 --> 00:46:17.300
And so a lot of people,


00:46:17.300 --> 00:46:19.360
if you're coming from a Python background,


00:46:19.360 --> 00:46:21.380
it's a lot of work to kind of get started with these,


00:46:21.380 --> 00:46:23.100
it's a different language, different tool set.


00:46:23.100 --> 00:46:25.120
So we really wanted something where Python developers


00:46:25.120 --> 00:46:26.960
can just use these tools they already know


00:46:26.960 --> 00:46:28.220
and be able to make these web apps


00:46:28.220 --> 00:46:30.980
without having to go learn something completely different.


00:46:30.980 --> 00:46:33.020
So as opposed to these tools like Flask and Django,


00:46:33.020 --> 00:46:35.520
we're very focused on unifying the front-end and back-end


00:46:35.520 --> 00:46:37.980
into one framework, so you don't need a separate front end


00:46:37.980 --> 00:46:38.900
and back end.


00:46:38.900 --> 00:46:41.580
And that allows us to kind of-- the user can just


00:46:41.580 --> 00:46:43.200
focus on the logic of their app and not


00:46:43.200 --> 00:46:45.060
kind of these technical details on the networking


00:46:45.060 --> 00:46:45.940
and all this other stuff.


00:46:45.940 --> 00:46:47.300
Yeah, it sounds interesting.


00:46:47.300 --> 00:46:50.020
I mean, I know many Python people


00:46:50.020 --> 00:46:52.220
who don't want to do JavaScript.


00:46:52.220 --> 00:46:54.860
They don't want to do multiple languages.


00:46:54.860 --> 00:46:59.140
But it's traditionally, at least in the web framework world,


00:46:59.140 --> 00:47:01.180
you're speaking many, many languages.


00:47:01.180 --> 00:47:06.180
You're speaking HTML, CSS, JavaScript is a big one.


00:47:06.180 --> 00:47:09.660
And honestly, I think there was a period


00:47:09.660 --> 00:47:12.180
where people were super invested in JavaScript


00:47:12.180 --> 00:47:14.460
and thought that was kind of the right way


00:47:14.460 --> 00:47:15.860
or the necessary way.


00:47:15.860 --> 00:47:18.020
And that would take away a lot of,


00:47:18.020 --> 00:47:19.860
well, what's important about the web framework, right?


00:47:19.860 --> 00:47:22.900
Like, well, it doesn't matter if it's Flask or Django,


00:47:22.900 --> 00:47:24.980
we're just gonna return JSON anyway,


00:47:24.980 --> 00:47:27.980
'cause it's all Angular, so who cares, right?


00:47:27.980 --> 00:47:30.220
But I don't think that's where people really,


00:47:30.220 --> 00:47:32.860
many people, at least the people choosing Python, want to be.


00:47:32.860 --> 00:47:35.260
And so how is your stuff different?


00:47:35.260 --> 00:47:37.700
So I think exactly what you said before this,


00:47:37.700 --> 00:47:40.460
to make a serious web app, you always have to go to JavaScript.


00:47:40.460 --> 00:47:41.880
And what we're really trying to do


00:47:41.880 --> 00:47:44.380
is make everything in Python, including your front end.


00:47:44.380 --> 00:47:48.340
And so basically, we're trying to integrate the two together.


00:47:48.340 --> 00:47:51.260
So basically, you don't have to go


00:47:51.260 --> 00:47:55.380
learn these technical details you didn't want before.


00:47:55.380 --> 00:47:57.300
We realized for all the logic of your app,


00:47:57.300 --> 00:47:58.620
you're using Python anyway.


00:47:58.620 --> 00:48:00.340
like Python's used in so many industries,


00:48:00.340 --> 00:48:03.260
databases, ML, AI, infrastructure.


00:48:03.260 --> 00:48:05.020
And when these people want to make a front end,


00:48:05.020 --> 00:48:06.660
it is possible to make JavaScript


00:48:06.660 --> 00:48:08.220
or these JavaScript front ends,


00:48:08.220 --> 00:48:09.900
but that's a lot of overhead.


00:48:09.900 --> 00:48:11.940
And before our kind of our framework,


00:48:11.940 --> 00:48:13.340
there are different low-code tools


00:48:13.340 --> 00:48:15.060
to make front ends without JavaScript,


00:48:15.060 --> 00:48:16.580
but they all kind of have a limit


00:48:16.580 --> 00:48:19.340
and they all have a graduation risk is what we found.


00:48:19.340 --> 00:48:20.820
So you can start making your UI.


00:48:20.820 --> 00:48:21.660
- Yeah, so like-


00:48:21.660 --> 00:48:22.840
- Can you make any website with them?


00:48:22.840 --> 00:48:24.940
- Right, like Streamlit and Anvil


00:48:24.940 --> 00:48:28.140
are both notable ones that kind of come to mind.


00:48:28.140 --> 00:48:31.300
But neither of them, I like them both a lot,


00:48:31.300 --> 00:48:32.300
but neither of them are necessarily,


00:48:32.300 --> 00:48:35.380
I'm just gonna build a general purpose web app.


00:48:35.380 --> 00:48:38.420
They're focused in their particular area.


00:48:38.420 --> 00:48:39.260
- Yes, exactly.


00:48:39.260 --> 00:48:41.540
So I've used tools like Streamlit, Gradio in the past,


00:48:41.540 --> 00:48:43.780
and a lot of that was inspiration for Pinecone.


00:48:43.780 --> 00:48:46.040
It's really great 'cause it's super easy to get started with.


00:48:46.040 --> 00:48:47.380
You don't have to go learn these things.


00:48:47.380 --> 00:48:49.180
But they all have this kind of ceiling you hit.


00:48:49.180 --> 00:48:52.940
So they're mostly good for data science apps, dashboard apps.


00:48:52.940 --> 00:48:54.280
But as you try to expand your app


00:48:54.280 --> 00:48:57.120
into a full stack web app, start adding these new features,


00:48:57.120 --> 00:49:00.360
A lot of times you find these frameworks don't really scale with your ideas.


00:49:00.360 --> 00:49:04.560
And your two options are either you have to kind of constrain your idea into what these


00:49:04.560 --> 00:49:09.440
vendors offer you, or you use that for prototyping and when you're making a customer-facing production


00:49:09.440 --> 00:49:13.000
app, you scrap it and go to like a JavaScript React world.


00:49:13.000 --> 00:49:16.360
So what we're really trying to do is make something like these Anvil or Streamlit easy


00:49:16.360 --> 00:49:18.520
to get started with for Python developers.


00:49:18.520 --> 00:49:21.840
But as you want to expand to these complex cases, you should be able to stay in our framework


00:49:21.840 --> 00:49:23.440
and we should be able to handle that also.


00:49:23.440 --> 00:49:24.440
- Interesting.


00:49:24.440 --> 00:49:27.160
- How does the front end interactivity work if it's Python?


00:49:27.160 --> 00:49:29.000
- Yeah, and this is also where I think we're a bit different.


00:49:29.000 --> 00:49:31.520
We're trying to really leverage a lot of the web dev ecosystem


00:49:31.520 --> 00:49:33.480
and not recreate everything from scratch.


00:49:33.480 --> 00:49:35.880
So for the front end, we leverage React and Next.js.


00:49:35.880 --> 00:49:38.360
So our front end compiles down to a Next.js app.


00:49:38.360 --> 00:49:39.040
And from this--


00:49:39.040 --> 00:49:40.640
- Oh, you're transpiling the Python to--


00:49:40.640 --> 00:49:42.280
- We transpile the Python to Next.js.


00:49:42.280 --> 00:49:44.080
And this gives you a lot of great features.


00:49:44.080 --> 00:49:47.000
You get single page app features from Next.js, a lot of these performance


00:49:47.000 --> 00:49:47.480
features.


00:49:47.480 --> 00:49:49.120
And that means from our perspective, we


00:49:49.120 --> 00:49:51.000
don't have to recreate all this stuff.


00:49:51.000 --> 00:49:53.720
And also, we don't have to create components one by one.


00:49:53.720 --> 00:49:54.840
we just leverage React.


00:49:54.840 --> 00:49:56.760
And for what we do in Pinecone for the front end


00:49:56.760 --> 00:50:00.500
is we just wrap React components and make them accessible.


00:50:00.500 --> 00:50:02.560
So even if we don't offer something,


00:50:02.560 --> 00:50:03.700
and other low-code tools,


00:50:03.700 --> 00:50:05.560
sometimes if they don't offer a component you need,


00:50:05.560 --> 00:50:08.320
you may be kind of constrained in what you can build.


00:50:08.320 --> 00:50:10.160
We easily have a way for anyone


00:50:10.160 --> 00:50:12.400
to wrap their own third-party React libraries.


00:50:12.400 --> 00:50:14.300
So we're really trying to make the existing stuff


00:50:14.300 --> 00:50:16.760
out there accessible rather than recreating it.


00:50:16.760 --> 00:50:18.680
- Yeah, so you can sort of extend it with React


00:50:18.680 --> 00:50:20.760
if you get boxed in, that's your escape hatch?


00:50:20.760 --> 00:50:21.760
- Exactly.


00:50:21.760 --> 00:50:22.600
- Okay.


00:50:22.600 --> 00:50:23.940
That's kind of how our front end works,


00:50:23.940 --> 00:50:26.020
and for the back end, we use FastAPI


00:50:26.020 --> 00:50:26.940
to handle all the states.


00:50:26.940 --> 00:50:29.940
So the user state is all on the back end on the server,


00:50:29.940 --> 00:50:31.980
and this is what allows us to


00:50:31.980 --> 00:50:33.360
pretty much keep everything in Python.


00:50:33.360 --> 00:50:35.420
So none of the logic is transpiled to JavaScript,


00:50:35.420 --> 00:50:37.960
only the React, and all the logic stays in Python.


00:50:37.960 --> 00:50:40.100
So you can use any of your existing Python libraries,


00:50:40.100 --> 00:50:41.340
any existing tools.


00:50:41.340 --> 00:50:42.260
You don't have to wait for us


00:50:42.260 --> 00:50:43.740
to kind of make these integrations.


00:50:43.740 --> 00:50:45.780
So it's kind of leveraging React,


00:50:45.780 --> 00:50:46.840
but also leveraging Python,


00:50:46.840 --> 00:50:48.540
and kind of bringing them together.


00:50:48.540 --> 00:50:50.080
- What's the deployment look like?


00:50:50.080 --> 00:50:51.900
- So we're working on a easy deployment,


00:50:51.900 --> 00:50:53.340
So you can just type PC deploy,


00:50:53.340 --> 00:50:54.980
we'll set up all your infrastructure,


00:50:54.980 --> 00:50:57.200
and you'll get a URL back with your app live.


00:50:57.200 --> 00:50:58.720
But also we're an open source framework,


00:50:58.720 --> 00:51:01.380
so it's also very easy to self-host and self-deploy.


00:51:01.380 --> 00:51:02.780
And so what we're really trying to do


00:51:02.780 --> 00:51:04.220
is make it accessible and easy,


00:51:04.220 --> 00:51:06.500
but never kind of lock you into our framework.


00:51:06.500 --> 00:51:08.900
- I see, so I could put like Nginx in front of it


00:51:08.900 --> 00:51:09.740
or something like that. - Exactly.


00:51:09.740 --> 00:51:11.220
Like so right now we're still working


00:51:11.220 --> 00:51:12.060
on our hosting deployment,


00:51:12.060 --> 00:51:13.580
so everyone right now who's deployed


00:51:13.580 --> 00:51:16.260
is hosting on AWS DigitalOcean or a tool like this


00:51:16.260 --> 00:51:17.100
with Nginx.


00:51:17.100 --> 00:51:18.680
And so it integrates just like you would deploy


00:51:18.680 --> 00:51:19.700
a Flask or React app.


00:51:19.700 --> 00:51:20.540
- Got it.


00:51:20.540 --> 00:51:21.860
- But we're really trying to make an optimized hosting


00:51:21.860 --> 00:51:26.660
service around this later. Yeah, sure. It makes sense. All right. Sounds like a great products.


00:51:26.660 --> 00:51:32.340
Thanks. Final question here. How'd you get here? How'd you start the company? How'd you land on


00:51:32.340 --> 00:51:36.820
Startup Pro? I mean, you talked about Y Combinator a little. Yeah. So I talked a little bit. We did


00:51:36.820 --> 00:51:41.540
the Y Combinator batch. And really the idea is not only having an open source framework,


00:51:41.540 --> 00:51:45.300
but having like a business model around it and being able to create like these features around


00:51:45.300 --> 00:51:50.580
it. So we're really focused on kind of being similar to have an open source framework,


00:51:50.580 --> 00:51:53.640
similar to how Vercel has Next.js and their hosted version,


00:51:53.640 --> 00:51:55.840
and trying to bring that to the Python community.


00:51:55.840 --> 00:51:58.220
So Python is one of the fastest growing languages,


00:51:58.220 --> 00:52:00.420
obviously, that's why PyCon is so big,


00:52:00.420 --> 00:52:02.040
but for the web dev part,


00:52:02.040 --> 00:52:04.060
there's not really a good ecosystem for that.


00:52:04.060 --> 00:52:05.500
So when people want to share their ideas,


00:52:05.500 --> 00:52:07.420
we're really trying to become that de facto way


00:52:07.420 --> 00:52:10.260
for Python developers to create their apps and share.


00:52:10.260 --> 00:52:12.980
And so, yeah, basically working on our hosting service,


00:52:12.980 --> 00:52:14.060
growing out our team now,


00:52:14.060 --> 00:52:16.760
and trying to build up all this ecosystem around it


00:52:16.760 --> 00:52:19.260
so people can easily get their ideas out to the world.


00:52:19.260 --> 00:52:22.100
- Awesome, well, congratulations and thanks for being here.


00:52:22.100 --> 00:52:23.060
- Thank you, yeah, thanks so much.


00:52:23.060 --> 00:52:23.900
- Yeah, you bet.

