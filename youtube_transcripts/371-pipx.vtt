WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, YouTube.


00:00:01.000 --> 00:00:02.000
Hey, Chad.


00:00:02.000 --> 00:00:03.000
Hey, Michael.


00:00:03.000 --> 00:00:04.000
Hey, great to have you here.


00:00:04.000 --> 00:00:05.000
Super excited to be doing this podcast today.


00:00:05.000 --> 00:00:06.000
Those of you out in the audience, please put some comments and thoughts and ideas into


00:00:06.000 --> 00:00:07.000
the live chat.


00:00:07.000 --> 00:00:08.000
We'll try to make part of the show.


00:00:08.000 --> 00:00:09.000
If you're watching afterwards, well, that's over, but thanks for watching anyway.


00:00:09.000 --> 00:00:10.000
All right, let's kick this off, Chad.


00:00:10.000 --> 00:00:11.000
Chad, welcome to Talk Bythonomy.


00:00:11.000 --> 00:00:12.000
Thanks, Michael.


00:00:12.000 --> 00:00:13.000
That's fantastic.


00:00:13.000 --> 00:00:14.000
You're going to be talking about Python.


00:00:14.000 --> 00:00:15.000
I'm going to be talking about Python.


00:00:15.000 --> 00:00:16.000
I'm going to be talking about Python.


00:00:16.000 --> 00:00:17.000
I'm going to be talking about Python.


00:00:17.000 --> 00:00:18.000
I'm going to be talking about Python.


00:00:18.000 --> 00:00:19.000
I'm going to be talking about Python.


00:00:19.000 --> 00:00:20.000
I'm going to be talking about Python.


00:00:20.000 --> 00:00:21.000
I'm going to be talking about Python.


00:00:21.000 --> 00:00:24.000
Anyway, all right, let's kick this off, Chad.


00:00:24.000 --> 00:00:27.000
Chad, welcome to Talk Python to Me.


00:00:27.000 --> 00:00:27.900
- Thanks, Michael.


00:00:27.900 --> 00:00:31.080
- It's fantastic to have you here.


00:00:31.080 --> 00:00:35.560
I and many listeners are such a fan of PIPX


00:00:35.560 --> 00:00:39.620
and really just love to have that tool around


00:00:39.620 --> 00:00:42.480
to allow us to use Python libraries


00:00:42.480 --> 00:00:44.120
and commands like applications.


00:00:44.120 --> 00:00:45.540
And it's gonna be so fun to talk about.


00:00:45.540 --> 00:00:48.320
And if you're out there and you haven't heard of PIPX,


00:00:48.320 --> 00:00:50.000
you're in for a treat.


00:00:50.000 --> 00:00:52.480
So before we get to that, though, let's start with your story.


00:00:52.480 --> 00:00:55.760
How did you get into programming in Python?


00:00:55.760 --> 00:01:01.960
- So I got into programming back when the internet was kind of like really


00:01:01.960 --> 00:01:06.040
popular with GeoCities, like early web development type stuff.


00:01:06.040 --> 00:01:06.600
So...


00:01:06.600 --> 00:01:11.200
- This is the time when people had like the animated digging Giphy and like a lot


00:01:11.200 --> 00:01:13.240
of sites were still permanently under construction?


00:01:13.240 --> 00:01:14.360
- Yes.


00:01:14.360 --> 00:01:18.160
And flashing text and stuff like that.


00:01:18.160 --> 00:01:19.440
So I thought that was pretty cool.


00:01:19.440 --> 00:01:22.320
I messed around with some Geocities pages.


00:01:22.320 --> 00:01:23.760
I wrote a little bit of JavaScript


00:01:23.760 --> 00:01:26.480
where you can hover over text, and it will change the image


00:01:26.480 --> 00:01:28.200
and stuff like that.


00:01:28.200 --> 00:01:30.480
And I kind of messed around with web pages for a while,


00:01:30.480 --> 00:01:34.360
but I didn't really get too serious with programming


00:01:34.360 --> 00:01:39.880
with web development until later, much later.


00:01:39.880 --> 00:01:43.800
So when I got more into programming was in college.


00:01:43.800 --> 00:01:46.200
I got a degree in aerospace engineering,


00:01:46.200 --> 00:01:48.360
and so we did kind of scientific computing.


00:01:48.360 --> 00:01:51.120
we used MATLAB a lot.


00:01:51.120 --> 00:01:52.960
So I used a lot of MATLAB in college.


00:01:52.960 --> 00:01:56.800
And then in my first job, we did a lot of MATLAB.


00:01:56.800 --> 00:02:00.040
So in the aerospace industry for making airplanes and flight


00:02:00.040 --> 00:02:02.880
control systems, we used MATLAB a lot.


00:02:02.880 --> 00:02:06.440
And so I kind of started hacking on MATLAB


00:02:06.440 --> 00:02:10.080
and making a bunch of programs and automating stuff,


00:02:10.080 --> 00:02:13.240
not really going into other programming languages, which


00:02:13.240 --> 00:02:15.440
were probably better suited for the job.


00:02:15.440 --> 00:02:17.680
I just kind of did everything in MATLAB.


00:02:17.680 --> 00:02:18.180
And--


00:02:18.180 --> 00:02:20.800
>>Victor: Well, but that's the way I think many people--


00:02:20.800 --> 00:02:24.500
most people do it, is they have a set of tools to pick from


00:02:24.500 --> 00:02:26.040
that they know how to work with them.


00:02:26.040 --> 00:02:28.660
And they're like, well, which one of these is going to be best?


00:02:28.660 --> 00:02:31.100
And if you're programming environments in MATLAB,


00:02:31.100 --> 00:02:34.500
then that's not a terrible choice, really.


00:02:34.500 --> 00:02:35.740
>>Chris: Yeah.


00:02:35.740 --> 00:02:38.680
So I got really into programming MATLAB,


00:02:38.680 --> 00:02:40.260
and then eventually ended up at a job


00:02:40.260 --> 00:02:43.180
where I got to start doing a little Python.


00:02:43.180 --> 00:02:44.700
>>Victor: Nice.


00:02:44.700 --> 00:02:45.860
>>Chris: And so that job was--


00:02:45.860 --> 00:02:49.420
What kind of airplanes were you working on?


00:02:49.420 --> 00:02:53.780
So my first job was on the Space Shuttle, which


00:02:53.780 --> 00:02:55.060
has been retired.


00:02:55.060 --> 00:02:56.500
And then I worked for Boeing.


00:02:56.500 --> 00:02:59.700
That's fantastic.


00:02:59.700 --> 00:03:01.660
Yeah, I worked from the 747, 787.


00:03:01.660 --> 00:03:02.580
So I worked for Boeing.


00:03:02.580 --> 00:03:04.580
So Boeing worked on the Space Shuttle,


00:03:04.580 --> 00:03:08.060
as well as, obviously, a bunch of other planes.


00:03:08.060 --> 00:03:11.500
And then none of the Python work was there, though.


00:03:11.500 --> 00:03:14.940
The Python stuff started at a startup


00:03:14.940 --> 00:03:18.100
funded by Google co-founder Larry Page.


00:03:18.100 --> 00:03:20.380
So it was an eVTOL,


00:03:20.380 --> 00:03:23.060
Electric Vertical Takeoff and Landing Plane.


00:03:23.060 --> 00:03:24.240
So it's like a small plane.


00:03:24.240 --> 00:03:25.080
It was a startup.


00:03:25.080 --> 00:03:26.580
It was a small company.


00:03:26.580 --> 00:03:30.340
And we needed like basically some tools to be made.


00:03:30.340 --> 00:03:31.860
And I didn't really know Python,


00:03:31.860 --> 00:03:35.460
but I like to just take on new challenges


00:03:35.460 --> 00:03:36.280
and learn new things.


00:03:36.280 --> 00:03:39.900
So my first experience with Python was with Python 2


00:03:39.900 --> 00:03:41.560
and working on a Django app.


00:03:42.740 --> 00:03:45.620
It was an app to track all the parts and weights


00:03:45.620 --> 00:03:49.500
and moments of inertia of the aircraft.


00:03:49.500 --> 00:03:53.660
And another project was called a protocol compiler.


00:03:53.660 --> 00:04:00.380
So all the C code that ran on the avionics, a lot of it


00:04:00.380 --> 00:04:00.940
was generated.


00:04:00.940 --> 00:04:04.460
A lot of the inter-device communication


00:04:04.460 --> 00:04:06.740
was generated from this common protocol definition.


00:04:06.740 --> 00:04:08.780
And so this was all written in Python.


00:04:08.780 --> 00:04:11.060
So we could generate safety critical C code.


00:04:11.060 --> 00:04:13.780
We could generate documentation about the code.


00:04:13.780 --> 00:04:16.240
We could generate tests where we had like


00:04:16.240 --> 00:04:17.600
hardware in the loop tests.


00:04:17.600 --> 00:04:21.800
And so that was where I started to run into issues


00:04:21.800 --> 00:04:24.980
with challenges with packaging


00:04:24.980 --> 00:04:27.020
and getting dependencies installed on folks' computers


00:04:27.020 --> 00:04:29.200
because if you wanted to build the flight code,


00:04:29.200 --> 00:04:31.700
you needed to have a bunch of packages available.


00:04:31.700 --> 00:04:35.260
- Right, and so, you know,


00:04:35.260 --> 00:04:39.060
you had to have maybe some foundational thing in order,


00:04:39.060 --> 00:04:40.620
some libraries and other things.


00:04:40.620 --> 00:04:43.220
and you probably didn't want to teach necessarily


00:04:43.220 --> 00:04:45.820
see people how to set up Python and virtual environments


00:04:45.820 --> 00:04:47.460
and all that kind of stuff, right?


00:04:47.460 --> 00:04:49.020
Or documentation writers.


00:04:49.020 --> 00:04:50.500
Yeah.


00:04:50.500 --> 00:04:51.660
- Exactly.


00:04:51.660 --> 00:04:53.300
And yeah, it was a small company.


00:04:53.300 --> 00:04:54.960
So there wasn't really a Python expert in house.


00:04:54.960 --> 00:04:57.700
So we kind of made a lot of the mistakes


00:04:57.700 --> 00:05:01.000
and I had to go into the infrastructure side too


00:05:01.000 --> 00:05:01.900
and try to build all that out.


00:05:01.900 --> 00:05:05.740
And so, you know, we started out with,


00:05:05.740 --> 00:05:07.540
I think we started out with pseudo pip install


00:05:07.540 --> 00:05:09.960
and that was how we got our things installed.


00:05:09.960 --> 00:05:12.040
- Mm-hmm, yeah, for sure.


00:05:12.040 --> 00:05:16.020
Well, you talk about this, the small business


00:05:16.020 --> 00:05:19.340
or a small company you're at and sort of bouncing


00:05:19.340 --> 00:05:21.140
off the walls and just figuring it out yourself,


00:05:21.140 --> 00:05:25.540
but you were also at Boeing, which is a non-small company.


00:05:25.540 --> 00:05:28.020
Am I looking in from the outside?


00:05:28.020 --> 00:05:29.140
- Right.


00:05:29.140 --> 00:05:34.140
- I know a lot of people, they definitely dream of


00:05:34.140 --> 00:05:37.620
or look to get hired at these really large companies.


00:05:37.620 --> 00:05:39.800
And yet I feel like there's a huge advantage


00:05:39.800 --> 00:05:42.320
to at least spending a little time in a company


00:05:42.320 --> 00:05:44.000
like this VTOL one you talked about


00:05:44.000 --> 00:05:49.000
where you're taking on a lot of responsibilities


00:05:49.000 --> 00:05:51.760
and you're kind of working together to figure out stuff


00:05:51.760 --> 00:05:54.360
rather than slotting into like a narrow slice


00:05:54.360 --> 00:05:56.400
of what's getting done, what do you think?


00:05:56.400 --> 00:06:00.700
What was your experience in those places?


00:06:00.700 --> 00:06:03.920
- Well, so Boeing did offer opportunities


00:06:03.920 --> 00:06:07.040
to let you kind of like improve processes


00:06:07.040 --> 00:06:08.600
and stuff like that.


00:06:08.600 --> 00:06:12.720
But the scope of what you're working on at a small company,


00:06:12.720 --> 00:06:14.800
trying to build a similar product,


00:06:14.800 --> 00:06:19.320
I mean, you have a smaller team with no like legacy


00:06:19.320 --> 00:06:21.680
or decades of history building stuff.


00:06:21.680 --> 00:06:22.820
You're kind of just inventing it as you go.


00:06:22.820 --> 00:06:25.960
So yeah, there's a ton of stuff to experiment with


00:06:25.960 --> 00:06:28.060
and take on and learn from.


00:06:28.060 --> 00:06:30.760
- Yeah, cool.


00:06:30.760 --> 00:06:32.000
How about now?


00:06:32.000 --> 00:06:34.520
You're at another small company, right?


00:06:34.520 --> 00:06:36.840
- Yeah, I'm at a small company called Meta.


00:06:38.000 --> 00:06:43.120
I work for Reality Labs, and I work on developer infrastructure


00:06:43.120 --> 00:06:44.800
here as well.


00:06:44.800 --> 00:06:49.240
I work on things like language services, debuggers,


00:06:49.240 --> 00:06:52.920
and VS Code, VS Code extensions.


00:06:52.920 --> 00:06:53.680
>> Yeah.


00:06:53.680 --> 00:06:56.560
Do you have any exposure to the Cinder project or any


00:06:56.560 --> 00:07:00.000
of the stuff going on over there?


00:07:00.000 --> 00:07:01.000
>> No, I'm aware of it.


00:07:01.000 --> 00:07:02.120
I think it's super cool.


00:07:02.120 --> 00:07:04.040
But that's an Instagram thing, really.


00:07:04.040 --> 00:07:08.360
And so it's not really something I use day to day.


00:07:08.360 --> 00:07:11.320
>> Well, it looks like it's going to become a Python thing


00:07:11.320 --> 00:07:13.640
in little bits and pieces.


00:07:13.640 --> 00:07:14.720
>> Yeah.


00:07:14.720 --> 00:07:17.240
>> The pieces of it are being pulled over.


00:07:17.240 --> 00:07:20.760
We just talked about PEP 690 and lazy imports.


00:07:20.760 --> 00:07:23.080
And there's a couple of other things people


00:07:23.080 --> 00:07:24.120
are working to move in.


00:07:24.120 --> 00:07:26.840
So not the whole thing, but some of those features


00:07:26.840 --> 00:07:30.600
and improvements will make it to all of us.


00:07:30.600 --> 00:07:33.520
>> Yeah, that's the great thing about Python is if you come up


00:07:33.520 --> 00:07:35.920
with a good idea, the community is very open


00:07:35.920 --> 00:07:39.040
and willing to adopt new ideas.


00:07:39.040 --> 00:07:42.560
The best ideas win and can be continuously improving


00:07:42.560 --> 00:07:43.400
the language.


00:07:43.400 --> 00:07:46.840
- Yeah, that's pretty fantastic.


00:07:46.840 --> 00:07:50.800
So let's start our conversation here


00:07:50.800 --> 00:07:53.960
at a little bit higher level than just PipX.


00:07:53.960 --> 00:07:56.760
And let's just talk about packaging a little bit.


00:07:56.760 --> 00:08:00.400
So let me switch over here to this project.


00:08:00.400 --> 00:08:03.400
So you have over at chadsmith.dev,


00:08:03.400 --> 00:08:05.000
which is a great domain name.


00:08:05.000 --> 00:08:08.560
And I'm impressed with a name like Chad Smith


00:08:08.560 --> 00:08:10.660
that you can get it just straight up as your domain name.


00:08:10.660 --> 00:08:12.780
'Cause as Michael Kennedy,


00:08:12.780 --> 00:08:14.760
all the Irish politicians are all over me.


00:08:14.760 --> 00:08:17.640
Like I gotta go with some crazy variation


00:08:17.640 --> 00:08:19.320
to come up with it.


00:08:19.320 --> 00:08:20.140
But yeah, that's cool.


00:08:20.140 --> 00:08:20.980
That's a great domain name.


00:08:20.980 --> 00:08:23.800
And over there at slash Python dash packaging,


00:08:23.800 --> 00:08:25.860
you've got the big list of Python packaging


00:08:25.860 --> 00:08:27.560
and distribution tools.


00:08:27.560 --> 00:08:28.800
You wanna tell us about this?


00:08:28.800 --> 00:08:30.120
Kind of gives you a high level of like,


00:08:30.120 --> 00:08:32.400
what are the options, right?


00:08:32.400 --> 00:08:35.760
Yeah, so a lot of times, questions


00:08:35.760 --> 00:08:40.160
come up about what tools are out there, which tools do what.


00:08:40.160 --> 00:08:42.440
It's a big world in the packaging,


00:08:42.440 --> 00:08:44.120
in the Python packaging world.


00:08:44.120 --> 00:08:51.520
And I wanted to make something that was kind of non-opinionated


00:08:51.520 --> 00:08:53.880
and just kind of factual, like here's some data,


00:08:53.880 --> 00:08:56.080
here's some information about these.


00:08:56.080 --> 00:08:57.280
You can decide for yourself.


00:08:57.280 --> 00:08:58.780
It's not trying to persuade you to use this.


00:08:58.780 --> 00:09:00.360
It's not like saying, this is my tool.


00:09:00.360 --> 00:09:01.320
This one's the best.


00:09:01.320 --> 00:09:07.160
And this came about from PIPX's documentation,


00:09:07.160 --> 00:09:10.120
where one of the questions on PIPX was, what is it


00:09:10.120 --> 00:09:11.800
and how does it compare to other things?


00:09:11.800 --> 00:09:14.360
So I had a list on the documentation.


00:09:14.360 --> 00:09:15.200
And it kept growing.


00:09:15.200 --> 00:09:17.320
And I was thinking, this could be its own thing,


00:09:17.320 --> 00:09:21.720
because I don't want to make the PIPX documentation too big.


00:09:21.720 --> 00:09:23.560
Make it a survey of all the other things


00:09:23.560 --> 00:09:27.320
that it competes with or could have been put alongside, right?


00:09:27.320 --> 00:09:28.800
Yeah.


00:09:28.800 --> 00:09:32.720
So this is an interactive web app table type thing.


00:09:32.720 --> 00:09:37.520
And it pulls data from GitHub's GraphQL API.


00:09:37.520 --> 00:09:43.160
And it lets you select different features and filter on those.


00:09:43.160 --> 00:09:47.800
You can compare and group tools together.


00:09:47.800 --> 00:09:50.320
So on the top left, you'll see there's


00:09:50.320 --> 00:09:54.800
a bunch of little blue words with blue backgrounds.


00:09:54.800 --> 00:09:56.600
And you can click on those.


00:09:56.600 --> 00:09:59.640
And if you click on them, then it'll filter down the table.


00:09:59.640 --> 00:10:02.920
So if you want to find tools that can install and publish,


00:10:02.920 --> 00:10:09.800
you can click on Install CLI Apps and also Publish Packages.


00:10:09.800 --> 00:10:10.840
>> Nice.


00:10:10.840 --> 00:10:12.600
Look at that.


00:10:12.600 --> 00:10:13.720
This is a great little UI.


00:10:13.720 --> 00:10:15.320
Reminds me of an app I wrote once,


00:10:15.320 --> 00:10:18.120
and I'm having nice nostalgia here.


00:10:18.120 --> 00:10:18.960
It's cool.


00:10:18.960 --> 00:10:23.720
So you can click on these little categories or filters


00:10:23.720 --> 00:10:25.480
and turn multiple ones on and off.


00:10:25.480 --> 00:10:27.840
So if I want virtual environment management,


00:10:27.840 --> 00:10:29.080
I can install libraries.


00:10:29.080 --> 00:10:30.860
Well, apparently there's none of those,


00:10:30.860 --> 00:10:35.320
but if I want to build packages and install CLI apps,


00:10:35.320 --> 00:10:37.380
well, I guess PDM is my choice, huh?


00:10:37.380 --> 00:10:39.580
- Right.


00:10:39.580 --> 00:10:40.420
- That's cool.


00:10:40.420 --> 00:10:44.540
So maybe one thing that we could do that would be nice


00:10:44.540 --> 00:10:46.840
is maybe we could go through and highlight


00:10:46.840 --> 00:10:51.720
some of the more notable packaging solutions or options


00:10:51.720 --> 00:10:54.080
as we go through here, you know, PipX being one of them,


00:10:54.080 --> 00:10:55.580
We'll get to that a bunch more.


00:10:55.580 --> 00:11:01.640
But want to maybe give us a bit of a rundown?


00:11:01.640 --> 00:11:04.580
Probably the first really notable one is Conda.


00:11:04.580 --> 00:11:07.860
People are super familiar with that, right?


00:11:07.860 --> 00:11:09.660
On the DeepSight side.


00:11:09.660 --> 00:11:15.200
Yeah, so Conda is kind of like a more ambitious way


00:11:15.200 --> 00:11:17.180
to create environments.


00:11:17.180 --> 00:11:21.180
And it kind of makes its own ecosystem.


00:11:21.180 --> 00:11:22.760
I personally haven't used it, but I


00:11:22.760 --> 00:11:24.560
I know it's pretty popular, like you said,


00:11:24.560 --> 00:11:26.520
with the scientific community.


00:11:26.520 --> 00:11:31.240
So it also can be used to make C libraries, too.


00:11:31.240 --> 00:11:32.920
>>Luis: Interesting.


00:11:32.920 --> 00:11:37.920
Yeah, it's certainly-- the claim to fame of Conda,


00:11:37.920 --> 00:11:40.040
and Anaconda, and Miniconda, all those things


00:11:40.040 --> 00:11:42.160
is you don't have to have the build


00:11:42.160 --> 00:11:46.280
tools for all the libraries, the transitive closure


00:11:46.280 --> 00:11:49.680
of the libraries you want to use, right?


00:11:49.680 --> 00:11:50.200
>>Tom: Right.


00:11:50.200 --> 00:11:50.700
And it's--


00:11:50.700 --> 00:11:51.800
>>Luis: Getting there a little bit with--


00:11:51.800 --> 00:11:52.700
Yeah, sorry, go ahead.


00:11:52.700 --> 00:11:53.740
Didn't mean to speak over you.


00:11:53.740 --> 00:11:56.060
- My understanding is it's its own packaging system.


00:11:56.060 --> 00:11:58.700
Like you don't pip install from it.


00:11:58.700 --> 00:12:00.940
There's some other parallel ecosystem.


00:12:00.940 --> 00:12:02.860
- Right, exactly.


00:12:02.860 --> 00:12:06.120
And I feel like to some degree with wheels,


00:12:06.120 --> 00:12:08.720
we're a little bit closer


00:12:08.720 --> 00:12:11.300
than we used to be with pip directly.


00:12:11.300 --> 00:12:13.500
Right, pip install wheel can just drop in a thing,


00:12:13.500 --> 00:12:16.180
whereas previously, you know,


00:12:16.180 --> 00:12:19.220
stuff had to happen on your machine to finalize that package.


00:12:20.760 --> 00:12:23.760
Yeah, wheels are specific to your Python version,


00:12:23.760 --> 00:12:26.200
your operating system.


00:12:26.200 --> 00:12:29.320
And so, yeah, that can just be basically unzipped and used.


00:12:29.320 --> 00:12:31.660
- Yeah, that was fantastic.


00:12:31.660 --> 00:12:35.560
Except for the first couple of weeks of the M1 platform,


00:12:35.560 --> 00:12:39.080
the Apple Silicon M1s, you try to install something.


00:12:39.080 --> 00:12:41.320
Nope, we don't have a wheel for that platform.


00:12:41.320 --> 00:12:42.520
What do you mean you don't have a wheel?


00:12:42.520 --> 00:12:44.040
Come on.


00:12:44.040 --> 00:12:46.840
But, you know, I think that's pretty far in the past now.


00:12:46.840 --> 00:12:49.040
I haven't run into that problem for a long time.


00:12:50.340 --> 00:12:51.560
Yeah, OK, cool.


00:12:51.560 --> 00:12:57.780
Another one on here that's clearly pretty popular


00:12:57.780 --> 00:13:04.620
and in this C generating native code category is Cython.


00:13:04.620 --> 00:13:06.820
Yeah, Cython is super interesting.


00:13:06.820 --> 00:13:10.860
And it takes advantage of one of the pretty cool features


00:13:10.860 --> 00:13:12.780
of Python itself.


00:13:12.780 --> 00:13:16.820
So Cython can generate C code from your Python code.


00:13:16.820 --> 00:13:19.000
And it generates shared objects.


00:13:19.000 --> 00:13:22.120
And shared objects are able to be imported directly


00:13:22.120 --> 00:13:22.680
from Python.


00:13:22.680 --> 00:13:25.080
So you can make a basically like a wheel


00:13:25.080 --> 00:13:28.480
that is native code built from your Python code.


00:13:28.480 --> 00:13:32.520
And if you have code that is really run really frequently,


00:13:32.520 --> 00:13:35.440
like a really hot path, that Python is just a little bit


00:13:35.440 --> 00:13:38.520
too slow for you, you can really easily use


00:13:38.520 --> 00:13:43.580
Cython to convert that into C and make a shared object


00:13:43.580 --> 00:13:45.760
and then just use that, or just that module


00:13:45.760 --> 00:13:50.960
or just that function that you wanted to speed up.


00:13:50.960 --> 00:13:54.440
>>Yeah, there's some interesting examples of that.


00:13:54.440 --> 00:13:59.320
For example, uv loop, which is the fast drop-in replacement


00:13:59.320 --> 00:14:03.760
for async I/O, that was written in Cython,


00:14:03.760 --> 00:14:08.080
built on top of libuvc library, I think.


00:14:08.080 --> 00:14:13.040
Here's one of those tight loops where this is the while true


00:14:13.040 --> 00:14:16.020
or the for in loop that does all the magic, right?


00:14:16.020 --> 00:14:18.240
And so, you know, doing something like this


00:14:18.240 --> 00:14:20.040
makes a lot of sense.


00:14:20.040 --> 00:14:20.880
- Absolutely.


00:14:20.880 --> 00:14:23.160
- Yeah.


00:14:23.160 --> 00:14:24.000
Let's see.


00:14:24.000 --> 00:14:25.840
- I was surprised.


00:14:25.840 --> 00:14:26.680
- Go ahead.


00:14:26.680 --> 00:14:27.520
- Go ahead.


00:14:27.520 --> 00:14:32.280
- I was surprised how easy it was to use Cython.


00:14:32.280 --> 00:14:34.400
You know, you can just basically run it,


00:14:34.400 --> 00:14:37.720
point it at a file and it just converts it to C.


00:14:37.720 --> 00:14:38.960
And it makes, and you can import it too.


00:14:38.960 --> 00:14:40.320
It makes the shared object.


00:14:40.320 --> 00:14:42.240
It's just kind of like,


00:14:42.240 --> 00:14:44.320
- Yeah, exactly. - It's just magically


00:14:44.320 --> 00:14:46.440
turns into something, hopefully it all works,


00:14:46.440 --> 00:14:49.040
but it turns into something that runs a lot faster.


00:14:49.040 --> 00:14:51.480
- Yeah, it really is neat.


00:14:51.480 --> 00:14:54.400
If you use the Python type hints,


00:14:54.400 --> 00:14:56.680
you can get even a little bit better.


00:14:56.680 --> 00:14:57.520
Right? - Yeah, so--


00:14:57.520 --> 00:15:00.480
- Or if you go farther, you can import the Cython integer


00:15:00.480 --> 00:15:03.240
instead of just a regular int and so on.


00:15:03.240 --> 00:15:08.040
- Yeah, and now Cython has typing in Pythons.


00:15:08.040 --> 00:15:11.080
So Cython also has its own kind of parallel language


00:15:11.080 --> 00:15:13.200
where you write like a pyx file


00:15:13.200 --> 00:15:15.140
and you have Cython annotations.


00:15:15.140 --> 00:15:18.740
But now with type hints becoming more prevalent


00:15:18.740 --> 00:15:21.600
in Python itself, there are also Cython type hints,


00:15:21.600 --> 00:15:24.240
which allows you to write just straight Python code,


00:15:24.240 --> 00:15:26.780
but Cython still recognizes how to convert it


00:15:26.780 --> 00:15:30.160
to a statically typed C type.


00:15:30.160 --> 00:15:33.420
- Right, I think that makes it way more approachable


00:15:33.420 --> 00:15:34.800
for many people, 'cause they don't feel like


00:15:34.800 --> 00:15:36.080
they have to go learn something different.


00:15:36.080 --> 00:15:38.200
They're like, well, if I just put type hints on this,


00:15:38.200 --> 00:15:40.320
maybe different type hints, then we're good to go.


00:15:40.320 --> 00:15:42.240
which is pretty cool.


00:15:42.240 --> 00:15:44.280
Yeah, all right, that question from the audience


00:15:44.280 --> 00:15:45.440
is from Jurgen.


00:15:45.440 --> 00:15:47.440
Hey, Chad, what about build out?


00:15:47.440 --> 00:15:50.280
Made up your mind on whether to include it?


00:15:50.280 --> 00:15:52.280
What's the story with build out in this?


00:15:52.280 --> 00:15:56.160
- Yeah, so on the Python packaging table,


00:15:56.160 --> 00:15:59.440
there were some suggestions in the issue tracker,


00:15:59.440 --> 00:16:01.960
and one of them was around build out.


00:16:01.960 --> 00:16:04.540
And it was something I hadn't heard of before.


00:16:04.540 --> 00:16:08.720
I'm still considering whether to add that or not,


00:16:08.720 --> 00:16:09.960
but I think I will.


00:16:09.960 --> 00:16:11.960
>> Leaning towards, yes.


00:16:11.960 --> 00:16:13.960
>> Okay.


00:16:13.960 --> 00:16:17.960
I'm not sure if I've -- I don't think I've done anything with buildout.


00:16:17.960 --> 00:16:19.960
Okay.


00:16:19.960 --> 00:16:21.960
Very nice.


00:16:21.960 --> 00:16:23.960
And also I saw that pie to app.


00:16:23.960 --> 00:16:25.960
I don't think pie to app was there, was it?


00:16:25.960 --> 00:16:27.960
>> It wasn't, no.


00:16:27.960 --> 00:16:31.960
>> So, yeah, so what's the criteria for being on that list, I guess?


00:16:31.960 --> 00:16:32.460
I guess.


00:16:32.460 --> 00:16:40.300
Yeah, I just kind of made it as--


00:16:40.300 --> 00:16:42.340
started just as a comparison to PIPX,


00:16:42.340 --> 00:16:47.620
where people might be confused or wonder which one to choose.


00:16:47.620 --> 00:16:49.500
And then it's kind of just grown organically,


00:16:49.500 --> 00:16:52.460
just things I thought were interesting or relevant.


00:16:52.460 --> 00:16:59.060
I think they should be something that is still--


00:16:59.060 --> 00:17:01.060
so something that people would want to use.


00:17:01.060 --> 00:17:03.940
Because there's a lot of changes in the packaging landscape.


00:17:03.940 --> 00:17:07.300
And there's a lot of stuff that gets left behind that you


00:17:07.300 --> 00:17:08.820
really wouldn't want to use anymore.


00:17:08.820 --> 00:17:10.020
There's new tools being made.


00:17:10.020 --> 00:17:11.900
There's new standards being defined.


00:17:11.900 --> 00:17:13.400
So I want it to be something that's


00:17:13.400 --> 00:17:17.780
modern, relevant, something that's encouraged to be used.


00:17:17.780 --> 00:17:18.940
I think Buildout was--


00:17:18.940 --> 00:17:22.460
I was concerned it was a little bit maybe older.


00:17:22.460 --> 00:17:24.220
And I hadn't heard of it.


00:17:24.220 --> 00:17:26.100
And you haven't heard of it.


00:17:26.100 --> 00:17:30.180
So I wasn't really sure how it was something


00:17:30.180 --> 00:17:32.740
that we should still encourage folks to use or not.


00:17:32.740 --> 00:17:36.020
- Yeah, here's an interesting,


00:17:36.020 --> 00:17:40.940
have you checked out the ESF developer survey results


00:17:40.940 --> 00:17:41.780
this year?


00:17:41.780 --> 00:17:43.600
- I have not.


00:17:43.600 --> 00:17:48.500
- Yeah, so they have a section on basically


00:17:48.500 --> 00:17:51.620
which tools related to packaging do you use?


00:17:51.620 --> 00:17:53.660
And they break it down by popularity,


00:17:53.660 --> 00:17:55.620
which I thought was pretty cool.


00:17:55.620 --> 00:17:59.340
- That's really interesting.


00:17:59.340 --> 00:18:01.740
- Yeah, so for people just listening,


00:18:01.740 --> 00:18:05.500
it's 81% of the people say they use pip,


00:18:05.500 --> 00:18:07.900
and then 32% of the people use VNV.


00:18:07.900 --> 00:18:09.860
I feel like that's pretty low, honestly.


00:18:09.860 --> 00:18:10.700
It should be higher.


00:18:10.700 --> 00:18:11.520
I don't know what's going on there,


00:18:11.520 --> 00:18:14.620
but then you've got 30% of people use containers,


00:18:14.620 --> 00:18:18.660
23% use virtual ENV, and then 22% is condo.


00:18:18.660 --> 00:18:23.220
We got poetry, pip, ENV, Aflit, PDM,


00:18:23.220 --> 00:18:26.860
and others are like way down, way down in the list there.


00:18:26.860 --> 00:18:29.180
Yeah, so anyway.


00:18:29.180 --> 00:18:32.660
Does that strike you as what your mental model you had in mind a little bit?


00:18:32.660 --> 00:18:37.780
Yeah, roughly, there's a few surprises in there.


00:18:37.780 --> 00:18:42.020
But I think it's I think all those should be in this table.


00:18:42.020 --> 00:18:46.220
If they're not, I'm going to have to check that list and update the table.


00:18:46.220 --> 00:18:49.660
Sure, sure. Well, you know, maybe not the container stuff, right?


00:18:49.660 --> 00:18:52.340
Because that's kind of what just like I have a virtual machine.


00:18:52.340 --> 00:18:54.100
I mean, virtual machines are also in there, right?


00:18:54.100 --> 00:18:57.220
Just like which I think means I have a virtual machine.


00:18:57.220 --> 00:19:00.860
So I don't care if I just trash it and just bust its system.


00:19:00.860 --> 00:19:02.780
They customize its system Python.


00:19:02.780 --> 00:19:05.660
For me, when I set up my servers, I don't do that.


00:19:05.660 --> 00:19:07.900
I actually create a virtual environment


00:19:07.900 --> 00:19:10.340
for the apps running on that server or maybe multiple ones,


00:19:10.340 --> 00:19:12.140
but often it's just running one service.


00:19:12.140 --> 00:19:14.420
So I just create a virtual environment for it,


00:19:14.420 --> 00:19:16.920
just for the isolation alone.


00:19:16.920 --> 00:19:19.140
So it doesn't say, well, you can't use this version


00:19:19.140 --> 00:19:20.740
of some library 'cause it's being used


00:19:20.740 --> 00:19:22.820
by some part of the system.


00:19:22.820 --> 00:19:24.260
- Yeah. - Yeah.


00:19:24.260 --> 00:19:26.540
- Yeah, I mean, you can really cause yourself


00:19:26.540 --> 00:19:29.300
huge headaches messing with parts of the system.


00:19:29.300 --> 00:19:32.820
Like one time, I think I tried to rename Python.


00:19:32.820 --> 00:19:35.220
I think I repointed my Python 3 alias


00:19:35.220 --> 00:19:37.860
to a different, like a newer version of Python 3


00:19:37.860 --> 00:19:41.020
'cause I wanted that to just be what it used.


00:19:41.020 --> 00:19:43.620
And pretty sure my computer didn't start after that.


00:19:43.620 --> 00:19:48.660
- Yeah, while I just have this page up,


00:19:48.660 --> 00:19:51.580
I just wanna also show that PipX does show up over here


00:19:51.580 --> 00:19:55.060
on tools for installing packages instead of managing it.


00:19:55.060 --> 00:19:56.440
and yeah, so.


00:19:56.440 --> 00:19:57.360
- Oh, very cool.


00:19:57.360 --> 00:19:59.100
- Coming along there, pretty cool.


00:19:59.100 --> 00:20:03.700
- By the way, there is a PEP I saw around


00:20:03.700 --> 00:20:06.480
not clobbering system installs


00:20:06.480 --> 00:20:10.860
where you have like Ubuntu managing its own Python packages


00:20:10.860 --> 00:20:12.840
and you install to it or you uninstall something


00:20:12.840 --> 00:20:15.180
and kind of like mess up your whole system.


00:20:15.180 --> 00:20:16.720
There's a PEP out there to address that


00:20:16.720 --> 00:20:19.320
and to not mix things in there.


00:20:19.320 --> 00:20:21.300
- Oh, that's cool.


00:20:21.300 --> 00:20:24.360
I feel like almost Ubuntu on those different systems


00:20:24.360 --> 00:20:26.560
could say, we're going to have our own isolated


00:20:26.560 --> 00:20:28.360
environment for our stuff.


00:20:28.360 --> 00:20:31.040
And what you want to do, even if you just run Python straight,


00:20:31.040 --> 00:20:33.000
that's going to do something else.


00:20:33.000 --> 00:20:33.920
But I don't know.


00:20:33.920 --> 00:20:36.120
I don't know the mechanics of making all that happen.


00:20:36.120 --> 00:20:38.200
There's a lot of pieces involved there.


00:20:38.200 --> 00:20:39.120
Yeah.


00:20:39.120 --> 00:20:42.680
Yeah, the isolation is definitely useful.


00:20:42.680 --> 00:20:45.280
OK, back to the build stuff.


00:20:45.280 --> 00:20:47.520
Maybe there's a couple of others here.


00:20:47.520 --> 00:20:54.280
Like, we've got the sort of what I would call pip alternatives.


00:20:54.280 --> 00:20:56.860
We've got Flit and Poetry, right?


00:20:56.860 --> 00:21:01.860
Those are maybe, yeah, Flit and Poetry and PipBnV.


00:21:01.860 --> 00:21:04.740
I guess those are all in a similar,


00:21:04.740 --> 00:21:07.180
I know that I might be painting that


00:21:07.180 --> 00:21:08.060
with too broad of a brush,


00:21:08.060 --> 00:21:10.220
but they're all about installing,


00:21:10.220 --> 00:21:12.900
you know, working with your environments,


00:21:12.900 --> 00:21:14.420
installing stuff into your environments


00:21:14.420 --> 00:21:16.080
for apps you're building, right?


00:21:16.080 --> 00:21:19.500
- Yeah, and PyFlow as well.


00:21:19.500 --> 00:21:21.780
And Hatch, there's quite a few.


00:21:21.780 --> 00:21:22.820
- Yeah.


00:21:22.820 --> 00:21:24.060
Yeah, I'm not familiar with Hatch.


00:21:24.060 --> 00:21:26.580
Tell me about Hatch.


00:21:26.580 --> 00:21:29.960
So I have heard Hatch mentioned, or I


00:21:29.960 --> 00:21:31.500
think I've seen it around for a while.


00:21:31.500 --> 00:21:32.420
I never really used it.


00:21:32.420 --> 00:21:36.420
But then the creator of Hatch recently


00:21:36.420 --> 00:21:40.380
added a pull request to PIPX to use the Hatch backend.


00:21:40.380 --> 00:21:45.340
So with PEP 5.17 and 5.18, you can have basically anything


00:21:45.340 --> 00:21:50.460
you want installed, build your wheel, or to--


00:21:50.460 --> 00:21:52.100
yeah, build your build wheels.


00:21:52.100 --> 00:21:55.180
So you can have different backends to build a wheel.


00:21:55.180 --> 00:21:57.940
So Hatch has one called Hatchling.


00:21:57.940 --> 00:22:02.380
And this is actually now in the packaging,


00:22:02.380 --> 00:22:03.940
the Python packaging documentation.


00:22:03.940 --> 00:22:07.140
Like if you go to like the Python packaging website,


00:22:07.140 --> 00:22:09.140
like I think it's packaging.python.org,


00:22:09.140 --> 00:22:12.740
there's instructions on how to like build,


00:22:12.740 --> 00:22:14.580
to build a package, to distribute it.


00:22:14.580 --> 00:22:18.840
And it uses the Hatchling backend,


00:22:18.840 --> 00:22:21.340
which is a big achievement now.


00:22:21.340 --> 00:22:24.460
It's no longer telling you to use setup.py.


00:22:24.460 --> 00:22:26.460
>> Yeah.


00:22:26.460 --> 00:22:30.980
>> It's telling you to use this new tool called Build.


00:22:30.980 --> 00:22:34.340
>> Right, which is also on your list right at the top.


00:22:34.340 --> 00:22:38.660
>> Yeah. It's alphabetical.


00:22:38.660 --> 00:22:41.180
>> Yeah. Well, it wins.


00:22:41.180 --> 00:22:43.020
I guess the A, A, A, A, A,


00:22:43.020 --> 00:22:47.620
V, and V has maybe got a spot to still take the top notch there.


00:22:47.620 --> 00:22:49.140
>> That's a good idea.


00:22:49.140 --> 00:22:52.380
- Nice, you do also have things like GitHub stars and stuff.


00:22:52.380 --> 00:22:54.140
Can you sort by them?


00:22:54.140 --> 00:22:55.740
Yeah, you can, right?


00:22:55.740 --> 00:22:57.220
Yeah.


00:22:57.220 --> 00:22:59.620
- I think I just added the star emoji


00:22:59.620 --> 00:23:01.340
and I think it screwed up the sorting.


00:23:01.340 --> 00:23:03.340
So I'll have to work on that.


00:23:03.340 --> 00:23:05.480
- Oh, it sorts by alphabetical


00:23:05.480 --> 00:23:07.080
then with the start of the star.


00:23:07.080 --> 00:23:10.160
- Yeah, and I also, yeah.


00:23:10.160 --> 00:23:12.340
- Okay.


00:23:12.340 --> 00:23:14.920
The challenges we run into.


00:23:14.920 --> 00:23:17.220
Okay.


00:23:17.220 --> 00:23:18.280
Yeah, so this is really cool.


00:23:18.280 --> 00:23:20.860
Anything else you want to give a shout out to while we're here


00:23:20.860 --> 00:23:25.080
before we move on?


00:23:25.080 --> 00:23:26.960
>> Py03 is super cool.


00:23:26.960 --> 00:23:29.320
I played around with that.


00:23:29.320 --> 00:23:33.320
So Py03 is a way to call Rust code from your Python code.


00:23:33.320 --> 00:23:36.240
So kind of similar to Cython, except it doesn't


00:23:36.240 --> 00:23:37.720
generate Rust code for you.


00:23:37.720 --> 00:23:41.120
You have to have something already built in Rust.


00:23:41.120 --> 00:23:42.800
But it's pretty easy to use.


00:23:42.800 --> 00:23:44.520
There's a really popular Rust tool


00:23:44.520 --> 00:23:46.800
called RipGrip, which is like Grip,


00:23:46.800 --> 00:23:49.440
but rewritten in Rust with a nice API.


00:23:49.440 --> 00:23:50.640
It's super fast.


00:23:50.640 --> 00:23:56.640
And one thing I tried just to learn Rust and learn PyO3


00:23:56.640 --> 00:23:59.260
was to write an API in Python that


00:23:59.260 --> 00:24:04.760
called into the ripgrep Rust code.


00:24:04.760 --> 00:24:05.260
And--


00:24:05.260 --> 00:24:06.400
>>Right, OK, cool.


00:24:06.400 --> 00:24:07.980
>>And that actually worked pretty well.


00:24:07.980 --> 00:24:11.680
I was pleased with the development process


00:24:11.680 --> 00:24:15.240
and how fast it all ran.


00:24:15.240 --> 00:24:17.640
Nice.


00:24:17.640 --> 00:24:18.720
All right, let's see.


00:24:18.720 --> 00:24:20.600
One more bit of follow up on this.


00:24:20.600 --> 00:24:23.320
That Juergen says, talks will also


00:24:23.320 --> 00:24:26.600
use Hatchling with version 4, which is pretty cool.


00:24:26.600 --> 00:24:27.100
Nice.


00:24:27.100 --> 00:24:28.640
Yeah, I think that it's probably going


00:24:28.640 --> 00:24:31.840
to gain a lot more traction.


00:24:31.840 --> 00:24:34.080
Yeah, it sounds like I need to learn about Hatchling.


00:24:34.080 --> 00:24:36.600
And Hatch.


00:24:36.600 --> 00:24:38.160
Pretty cool.


00:24:38.160 --> 00:24:43.080
All right, so another thing that's interesting here


00:24:43.080 --> 00:24:46.340
that is sort of in the same space that we could talk about


00:24:46.340 --> 00:24:49.480
is pep582.


00:24:49.480 --> 00:24:52.980
To me, pep582 feels a lot like


00:24:52.980 --> 00:24:57.940
Node modules for Python, sort of that.


00:24:57.940 --> 00:25:02.420
Where is the, what is it, project.json


00:25:02.420 --> 00:25:05.240
and then the Node modules folder next to it, right?


00:25:05.240 --> 00:25:09.560
There's a folder and it has a name.


00:25:09.560 --> 00:25:12.140
That's where your packages get installed to.


00:25:12.140 --> 00:25:15.500
And if you run Python commands below it,


00:25:15.500 --> 00:25:18.780
it will traverse the directory up looking for that


00:25:18.780 --> 00:25:20.640
to find its effective virtual environment


00:25:20.640 --> 00:25:24.300
instead of the traditional virtual environment behaviors


00:25:24.300 --> 00:25:25.220
we all know.


00:25:25.220 --> 00:25:26.980
Right?


00:25:26.980 --> 00:25:27.820
Right.


00:25:27.820 --> 00:25:29.020
Yeah.


00:25:29.020 --> 00:25:32.060
So what are your thoughts there?


00:25:32.060 --> 00:25:35.340
So I stumbled across this.


00:25:35.340 --> 00:25:37.020
I don't remember how I found it.


00:25:37.020 --> 00:25:40.420
But when I saw it, I was like, oh my gosh, this is incredible.


00:25:40.420 --> 00:25:41.940
I can't wait for this to land.


00:25:41.940 --> 00:25:45.300
I'm a big TypeScript developer.


00:25:45.300 --> 00:25:47.620
I like TypeScript, like JavaScript.


00:25:47.620 --> 00:25:51.180
So I can kind of compare the two because I do a lot of work in both.


00:25:51.180 --> 00:25:52.900
And when I saw this, I was really excited.


00:25:52.900 --> 00:25:54.060
- Like the Node version for Python.


00:25:54.060 --> 00:25:58.300
- Yeah, because there's been a lot of headaches with global installs and


00:25:58.300 --> 00:26:02.060
globally installing packages and conflicting with the OS.


00:26:02.060 --> 00:26:07.180
And so, and having that extra step to always activate a virtual environment,


00:26:07.180 --> 00:26:11.140
create one, or delete one, or recreate a new one, it can get tedious.


00:26:11.140 --> 00:26:15.340
And so, and it's also a bit, it's part of the environment, right?


00:26:15.340 --> 00:26:19.700
Like Python packages is this file on a file system.


00:26:19.700 --> 00:26:20.840
You know, it's there.


00:26:20.840 --> 00:26:24.540
If you, if you want to start over, you just RM it, RMRF the


00:26:24.540 --> 00:26:26.320
folder and you can start over.


00:26:26.320 --> 00:26:30.980
so when I saw this, I was really excited and I thought the,


00:26:30.980 --> 00:26:35.940
acceptance of it would be imminent and we'd be using PyPackages, very soon.


00:26:35.940 --> 00:26:39.420
Like, oh, this we're the next release.


00:26:39.420 --> 00:26:40.620
The world is different.


00:26:40.620 --> 00:26:40.940
Right.


00:26:40.940 --> 00:26:42.780
Yeah.


00:26:42.780 --> 00:26:43.780
And so you can see on the--


00:26:43.780 --> 00:26:44.780
>> And yet--


00:26:44.780 --> 00:26:45.780
>> Right.


00:26:45.780 --> 00:26:46.780
>> Yeah.


00:26:46.780 --> 00:26:51.340
And yet, it says this is targeting version 3.8.


00:26:51.340 --> 00:26:53.780
It's still in draft status.


00:26:53.780 --> 00:26:55.180
And that was 2018.


00:26:55.180 --> 00:26:59.460
So it's four years ago.


00:26:59.460 --> 00:27:05.340
>> So one thing I want to mention is, as you mentioned, this is like node modules for Python.


00:27:05.340 --> 00:27:09.740
And one of the authors of the PEP mentioned that he doesn't want folks to think of it


00:27:09.740 --> 00:27:10.740
like that.


00:27:10.740 --> 00:27:16.100
it's not a bad analogy, but it's more like an auto activated virtual environment.


00:27:16.100 --> 00:27:17.100
Yes.


00:27:17.100 --> 00:27:18.100
Or an automatically recognized.


00:27:18.100 --> 00:27:23.060
So, you want him to think of it like that because he didn't want to have nested Py packages


00:27:23.060 --> 00:27:28.860
where we can have this like complicated nesting of, you know, each package has its own Py


00:27:28.860 --> 00:27:29.860
packages.


00:27:29.860 --> 00:27:37.020
Like a fallback as you go up and yeah, yeah, yeah, yeah, I hear you.


00:27:37.020 --> 00:27:39.620
But to me, it seems like it would simplify a lot of stuff.


00:27:39.620 --> 00:27:42.020
For example, if I have a cookie cutter template


00:27:42.020 --> 00:27:44.440
and I wanna just make sure that that project


00:27:44.440 --> 00:27:45.460
has its own environment,


00:27:45.460 --> 00:27:47.800
the cookie cutter could just create this folder


00:27:47.800 --> 00:27:51.220
at the top level and you're kinda good to go.


00:27:51.220 --> 00:27:52.660
You know what I mean?


00:27:52.660 --> 00:27:55.180
You don't have to do a bunch of virtual environment stuff.


00:27:55.180 --> 00:27:57.560
It just, that's the one, right?


00:27:57.560 --> 00:27:59.780
- Yeah.


00:27:59.780 --> 00:28:01.980
- If you've got working with people who are new to Python,


00:28:01.980 --> 00:28:04.240
you can just say here, unzip this and run it.


00:28:04.240 --> 00:28:05.900
And it'll start out empty,


00:28:05.900 --> 00:28:08.020
but maybe the first step is to verify


00:28:08.020 --> 00:28:08.860
all the stuff is there.


00:28:08.860 --> 00:28:11.180
But you don't have to--


00:28:11.180 --> 00:28:14.260
there's just that bootstrapping to get started,


00:28:14.260 --> 00:28:17.380
which as you gain experience, it's no big deal.


00:28:17.380 --> 00:28:20.180
But I often encounter people who are new to this,


00:28:20.180 --> 00:28:24.540
and they kind of bounce off it, which is unfortunate.


00:28:24.540 --> 00:28:26.980
Yeah, I think when you come across a project,


00:28:26.980 --> 00:28:29.420
or especially someone newer to the language


00:28:29.420 --> 00:28:31.580
comes across a project, and they see instructions are


00:28:31.580 --> 00:28:34.020
pip install this thing, it's really


00:28:34.020 --> 00:28:39.420
kind of a loaded instruction to give someone.


00:28:39.420 --> 00:28:42.260
Because you might be basically breaking things


00:28:42.260 --> 00:28:43.180
in the process.


00:28:43.180 --> 00:28:45.600
You might be setting yourself up for some kind of failure.


00:28:45.600 --> 00:28:52.260
Right, it could get installed to their system.


00:28:52.260 --> 00:28:55.260
They might not have permission to install it to the system.


00:28:55.260 --> 00:28:59.840
Yeah, there's a lot of stuff going on there.


00:28:59.840 --> 00:29:01.740
It also might install a version of a package


00:29:01.740 --> 00:29:04.700
that another tool requires a different version of,


00:29:04.700 --> 00:29:06.260
'cause it'll just kind of update it with what it needs.


00:29:06.260 --> 00:29:08.260
If there's an outdated version or something,


00:29:08.260 --> 00:29:10.020
it'll just give you a newer version,


00:29:10.020 --> 00:29:11.820
which may inadvertently break some other tool


00:29:11.820 --> 00:29:14.300
that depends on that older version for some reason.


00:29:14.300 --> 00:29:16.660
- Right, then all of a sudden your fail to ban


00:29:16.660 --> 00:29:18.740
or your firewall or something stops working.


00:29:18.740 --> 00:29:20.580
You're like, why did that stop working?


00:29:20.580 --> 00:29:22.220
Remote Glances or some other tool,


00:29:22.220 --> 00:29:24.540
you're like, I thought that was part of my machine now,


00:29:24.540 --> 00:29:25.460
it doesn't work anymore.


00:29:25.460 --> 00:29:28.140
And your little test project or tutorial broke it.


00:29:28.140 --> 00:29:31.260
- Right.


00:29:31.260 --> 00:29:34.060
And so that's probably suboptimal.


00:29:34.060 --> 00:29:36.260
Yeah.


00:29:36.260 --> 00:29:39.020
So this was exciting to me because you could pip install


00:29:39.020 --> 00:29:41.180
something and it would go to this PyPackages directory


00:29:41.180 --> 00:29:41.780
potentially.


00:29:41.780 --> 00:29:44.180
And you wouldn't really have to worry


00:29:44.180 --> 00:29:47.340
about any other side effects or any other environment


00:29:47.340 --> 00:29:50.540
that you're affecting.


00:29:50.540 --> 00:29:52.580
Maybe someday.


00:29:52.580 --> 00:29:54.220
Not for the moment.


00:29:54.220 --> 00:29:56.260
Well, we do have this other tool called


00:29:56.260 --> 00:30:00.160
PipX that does manage this somewhat


00:30:00.160 --> 00:30:02.660
for a certain class of problems, right?


00:30:02.660 --> 00:30:05.720
But this is more for building packages


00:30:05.720 --> 00:30:07.040
and applications and stuff,


00:30:07.040 --> 00:30:09.780
not so much external tools, but still.


00:30:09.780 --> 00:30:12.720
- Yeah, I think there are different use cases.


00:30:12.720 --> 00:30:15.120
I think this one's more for libraries,


00:30:15.120 --> 00:30:19.840
like building your library or not necessarily the app.


00:30:19.840 --> 00:30:21.940
- Yeah.


00:30:21.940 --> 00:30:26.620
- Well, you pointed out some implementations


00:30:26.620 --> 00:30:29.580
or experimental things going on with this one.


00:30:29.580 --> 00:30:32.180
So let's see here.


00:30:32.180 --> 00:30:37.180
We've got, yes, you got PyLock here.


00:30:37.180 --> 00:30:39.140
This is you, right?


00:30:39.140 --> 00:30:40.140
- Yeah, that's fine.


00:30:40.140 --> 00:30:44.580
- Yeah, so PyLock is a drop-in replacement


00:30:44.580 --> 00:30:46.220
that imports packages from this directory


00:30:46.220 --> 00:30:49.060
and it's like an experimentation


00:30:49.060 --> 00:30:51.500
or an experimental implementation of this, right?


00:30:51.500 --> 00:30:59.700
Right. Yeah. So I called it Python loc was the idea like local, local, yeah. It's good


00:30:59.700 --> 00:31:05.100
for like local packages, I was thinking. I don't know. The name could be revised, I guess.


00:31:05.100 --> 00:31:08.460
But, but yeah, I mean, I saw the, I saw the path and I thought it was super cool. And


00:31:08.460 --> 00:31:11.740
I thought, hey, maybe I can hack something together and let people try it. Because I


00:31:11.740 --> 00:31:17.820
think trying, discussing how something might work and actually using it is kind of like


00:31:17.820 --> 00:31:20.980
looking at a picture of somewhere you want to take a vacation and actually going there.


00:31:20.980 --> 00:31:24.380
It's like going to a place versus just hearing


00:31:24.380 --> 00:31:25.220
a description of it.


00:31:25.220 --> 00:31:27.020
So if we make something we can play around with,


00:31:27.020 --> 00:31:29.060
you can see, oh, I thought this would be cool,


00:31:29.060 --> 00:31:30.980
but it actually is way harder to use.


00:31:30.980 --> 00:31:33.260
Or maybe it's exactly what I thought I wanted,


00:31:33.260 --> 00:31:35.700
and it's great, and let's accept the pep.


00:31:35.700 --> 00:31:38.980
So I made this just as a way for folks


00:31:38.980 --> 00:31:41.700
to easily experiment with this kind of workflow.


00:31:41.700 --> 00:31:44.820
- Yeah, okay, great.


00:31:44.820 --> 00:31:46.020
And people can play with it.


00:31:46.020 --> 00:31:49.100
Although, who knows where this idea is going?


00:31:49.100 --> 00:31:51.300
I still think it has legs, but yeah,


00:31:51.300 --> 00:31:53.220
it's been chilling for a while.


00:31:53.220 --> 00:31:55.320
What else?


00:31:55.320 --> 00:31:58.020
And then there's PDM.


00:31:58.020 --> 00:32:02.880
I've heard of people using PDM and is this,


00:32:02.880 --> 00:32:03.720
does this follow?


00:32:03.720 --> 00:32:06.420
Yeah, it seems like it follows the same idea, right?


00:32:06.420 --> 00:32:08.460
Tell us about PDM real quick.


00:32:08.460 --> 00:32:10.780
- Yeah, so PDM is kind of like Poetry.


00:32:10.780 --> 00:32:15.200
It uses PEP 582, so it uses the Py packages directory.


00:32:16.060 --> 00:32:19.980
But yeah, it's similar in the idea of poetry


00:32:19.980 --> 00:32:23.260
or similar tools like PIPN,


00:32:23.260 --> 00:32:26.060
not the ones you mentioned, PyFlow.


00:32:26.060 --> 00:32:31.660
So it creates and modifies the pyproject.toml file.


00:32:31.660 --> 00:32:33.300
It can add its own metadata to it.


00:32:33.300 --> 00:32:34.280
It can build packages.


00:32:34.280 --> 00:32:36.120
It can publish packages.


00:32:36.120 --> 00:32:39.140
I'd have to consult that table.


00:32:39.140 --> 00:32:43.300
But yeah, I think it's kind of like an all-in-one tool.


00:32:43.300 --> 00:32:45.300
That also uses PEP 582.


00:32:45.300 --> 00:32:52.740
Right, exactly. So it does a lot more, but it does happen to also use this idea, right?


00:32:52.740 --> 00:33:01.140
Right. And in the discussion on, in the PEP 582 discussion on where all the folks were


00:33:01.140 --> 00:33:08.340
discussing like the pros and cons, the developer of PDM mentions that, like what his experience


00:33:08.340 --> 00:33:12.420
was with it, some of the tweaks he had to make to the PEP


00:33:12.420 --> 00:33:14.540
to make it work for him.


00:33:14.540 --> 00:33:18.700
And I saw that there was some interest in-- and also


00:33:18.700 --> 00:33:21.620
PyFlow is another tool similar to PDM.


00:33:21.620 --> 00:33:22.820
It's written in Rust.


00:33:22.820 --> 00:33:27.540
But I think Brett Cannon was interested in working


00:33:27.540 --> 00:33:30.940
with those two folks to maybe flesh out PEP 582 a little more


00:33:30.940 --> 00:33:34.460
because they have some real world experience.


00:33:34.460 --> 00:33:35.500
OK, interesting.


00:33:35.500 --> 00:33:38.020
Yeah, it doesn't sound like the PEP is dead.


00:33:38.020 --> 00:33:43.780
It sounds like it's stalled is more maybe how I understand it.


00:33:43.780 --> 00:33:45.460
Yeah, I think one of the-- so there


00:33:45.460 --> 00:33:46.820
were two original authors.


00:33:46.820 --> 00:33:48.980
One of them is no longer interested in pursuing it,


00:33:48.980 --> 00:33:49.940
but the other is.


00:33:49.940 --> 00:33:52.620
I think he's just been a little bit busy


00:33:52.620 --> 00:33:54.200
and hasn't had time to dedicate to it.


00:33:54.200 --> 00:33:57.220
But I think there's still potential for it.


00:33:57.220 --> 00:33:58.820
Sure.


00:33:58.820 --> 00:33:59.820
OK, cool.


00:33:59.820 --> 00:34:05.620
Well, let's move on to the star of the show, PipX.


00:34:05.620 --> 00:34:09.980
How do you tell people about PipX?


00:34:09.980 --> 00:34:15.660
PipX is a tool to install and run applications that


00:34:15.660 --> 00:34:16.980
happen to be written in Python.


00:34:16.980 --> 00:34:21.900
Yeah.


00:34:21.900 --> 00:34:27.380
So go ahead.


00:34:27.380 --> 00:34:34.220
I was going to say, I think of it as Homebrew or AppGet


00:34:34.220 --> 00:34:38.340
or Chocolaty or one of these package managers


00:34:38.340 --> 00:34:40.740
where I just wanna get this command


00:34:40.740 --> 00:34:42.580
or this application on my computer.


00:34:42.580 --> 00:34:44.920
I don't really care what it's written in.


00:34:44.920 --> 00:34:47.480
It's probably written in something tough


00:34:47.480 --> 00:34:49.780
that I have to install weird dependencies for


00:34:49.780 --> 00:34:51.340
or I gotta have some odd compiler


00:34:51.340 --> 00:34:52.180
and I don't wanna deal with it.


00:34:52.180 --> 00:34:56.180
I just wanna, I know it if I type brew install handbrake


00:34:56.180 --> 00:35:00.760
or something like I'll have that, right?


00:35:00.760 --> 00:35:03.500
And that's what, that's the way I see PipX


00:35:03.500 --> 00:35:07.980
is there's all these cool commands and CLIs and utilities


00:35:07.980 --> 00:35:12.580
in Python, and they just happen to be in Python.


00:35:12.580 --> 00:35:14.900
We as Python developers care a lot that that's the case,


00:35:14.900 --> 00:35:17.020
but we just want the commands.


00:35:17.020 --> 00:35:21.460
And with PipX, you can just type PipX, say, install pytest,


00:35:21.460 --> 00:35:25.700
or PipX install Glances, or some other cool library.


00:35:25.700 --> 00:35:30.220
And sure enough, you'll have it installed, right?


00:35:30.220 --> 00:35:33.020
Yeah, that's the idea.


00:35:33.020 --> 00:35:36.140
One of the goals is to take away


00:35:36.140 --> 00:35:39.060
difficulty for end users to install a tool.


00:35:39.060 --> 00:35:43.140
A lot of times, the instructions are like, install with pip.


00:35:43.140 --> 00:35:45.140
And like I said, you can have problems with that.


00:35:45.140 --> 00:35:47.140
That's kind of a loaded instruction sometimes


00:35:47.140 --> 00:35:49.980
to give people, especially if they're not Python developers.


00:35:49.980 --> 00:35:51.340
As a Python developer, if you see that,


00:35:51.340 --> 00:35:53.300
you wouldn't really have trouble managing that.


00:35:53.300 --> 00:35:54.460
But as a lot of folks--


00:35:54.460 --> 00:35:56.540
a lot of folks out there that just want the tool


00:35:56.540 --> 00:36:00.220
and the instructions are kind of like,


00:36:00.220 --> 00:36:03.300
create a virtual environment, now run the pip


00:36:03.300 --> 00:36:05.780
from that environment to install this tool,


00:36:05.780 --> 00:36:09.300
now search into that bin path, and there's your binary.


00:36:09.300 --> 00:36:11.340
Like, that's not really the easiest way


00:36:11.340 --> 00:36:14.820
to get end users a really cool program that you wrote


00:36:14.820 --> 00:36:16.940
that happens to be in Python.


00:36:16.940 --> 00:36:17.500
Right, right.


00:36:17.500 --> 00:36:19.140
I want to have this program accessible.


00:36:19.140 --> 00:36:21.900
Oh, wait, did you forget which virtual environment you


00:36:21.900 --> 00:36:24.380
installed it into, and did you forget to activate that,


00:36:24.380 --> 00:36:26.540
or whatever, right?


00:36:26.540 --> 00:36:30.740
So this solves a lot of those problems, which is fantastic.


00:36:30.740 --> 00:36:33.100
Juergen again says, as you said, install and run


00:36:33.100 --> 00:36:33.940
Python applications.


00:36:33.940 --> 00:36:36.220
Does this refer only to CLI or even web apps?


00:36:36.220 --> 00:36:42.980
- I'm not sure I understand the question.


00:36:42.980 --> 00:36:44.140
Certainly CLI apps.


00:36:44.140 --> 00:36:47.320
I'm not sure what a web app is in terms of this question.


00:36:47.320 --> 00:36:51.500
- Sure, well, I guess maybe just kind of


00:36:51.500 --> 00:36:52.740
install stuff more broadly.


00:36:52.740 --> 00:36:57.740
Like if I had something maybe that was built with GUI,


00:36:57.740 --> 00:37:03.940
for example, G-O-O-E-Y, like that GUI framework,


00:37:03.940 --> 00:37:06.500
or I have something that was installed or built with


00:37:06.500 --> 00:37:12.460
some other tool that when I run it,


00:37:12.460 --> 00:37:14.300
maybe I don't get a CLI experience,


00:37:14.300 --> 00:37:17.260
maybe it installs Flask and opens a browser or--


00:37:17.260 --> 00:37:19.820
- Oh, gotcha. - Something like that, right?


00:37:19.820 --> 00:37:22.020
Yeah, I think that's the question.


00:37:22.020 --> 00:37:23.540
Yeah, yeah, absolutely.


00:37:23.540 --> 00:37:27.980
That's actually where I found the need for PIPX most,


00:37:27.980 --> 00:37:30.660
and a tool I made that happens to be a web app.


00:37:30.660 --> 00:37:31.940
Where I have these--


00:37:31.940 --> 00:37:34.540
so the tool is called GDB GUI.


00:37:34.540 --> 00:37:40.700
And it's a web app that lets you debug programs with GDB.


00:37:40.700 --> 00:37:41.580
Right, OK.


00:37:41.580 --> 00:37:45.060
And so I had--


00:37:45.060 --> 00:37:48.740
I was writing the readme to tell folks how to get it,


00:37:48.740 --> 00:37:49.820
how to run it.


00:37:49.820 --> 00:37:53.220
So people that are trying to debug things with GDB,


00:37:53.220 --> 00:37:54.660
maybe they're Python developers,


00:37:54.660 --> 00:37:58.180
but they're definitely C developers or Rust developers,


00:37:58.180 --> 00:38:00.340
something, some kind of a native language.


00:38:00.340 --> 00:38:04.140
So the readme instructions I wrote were,


00:38:04.140 --> 00:38:06.220
I kind of like struggled with how to tell people


00:38:06.220 --> 00:38:07.300
to install this.


00:38:07.300 --> 00:38:08.820
Telling them to install pip with pip


00:38:08.820 --> 00:38:10.740
was not something I was comfortable with


00:38:10.740 --> 00:38:13.340
because there are so many dependencies GDB GUI has,


00:38:13.340 --> 00:38:17.020
and I didn't really want to like break their system.


00:38:17.020 --> 00:38:18.020
There was kind of two fears.


00:38:18.020 --> 00:38:19.580
Like one, I didn't want to mess their system up


00:38:19.580 --> 00:38:22.200
And two, I didn't know if it would work reliably


00:38:22.200 --> 00:38:27.080
because maybe they would install something else and mess it up.


00:38:27.080 --> 00:38:31.040
And so I searched for a while to find something


00:38:31.040 --> 00:38:38.360
that could get this installed in a better way and found PIPSI.


00:38:38.360 --> 00:38:41.040
BRIAN DORSEY: Mm-hmm, OK.


00:38:41.040 --> 00:38:43.800
So yeah, PIPSI like this, yeah?


00:38:43.800 --> 00:38:48.680
Yeah, P-I-P-S-I, OK.


00:38:48.680 --> 00:38:52.300
- This is basically exactly what I wanted.


00:38:52.300 --> 00:38:54.680
It gives you a single command


00:38:54.680 --> 00:38:56.300
that creates a virtual environment,


00:38:56.300 --> 00:38:57.860
installs package there,


00:38:57.860 --> 00:39:01.160
and then exposes the binary entry point,


00:39:01.160 --> 00:39:03.100
which if it sounds familiar, it is,


00:39:03.100 --> 00:39:05.420
because that's what pipx is,


00:39:05.420 --> 00:39:07.540
or origin is from, yeah.


00:39:07.540 --> 00:39:10.580
- Right, and in fact, right at the top of the pipc,


00:39:10.580 --> 00:39:12.900
read me, it says, "Pipc is no longer maintained.


00:39:12.900 --> 00:39:14.380
You should check out pipx."


00:39:14.380 --> 00:39:17.300
- Right.


00:39:17.300 --> 00:39:24.100
So the origin of PipX came from one of the issues in PIPC


00:39:24.100 --> 00:39:25.300
where someone--


00:39:25.300 --> 00:39:28.980
we were having trouble getting changes merged to PIPC.


00:39:28.980 --> 00:39:29.820
I found it.


00:39:29.820 --> 00:39:30.700
I was really excited.


00:39:30.700 --> 00:39:32.980
And I started making a bunch of pull requests on it.


00:39:32.980 --> 00:39:35.140
And I was having trouble getting things merged.


00:39:35.140 --> 00:39:37.900
And basically, the maintainers, they


00:39:37.900 --> 00:39:40.900
weren't really-- they were OK with having it


00:39:40.900 --> 00:39:41.740
in maintenance mode.


00:39:41.740 --> 00:39:45.100
But they didn't really want to do active development with it.


00:39:45.100 --> 00:39:48.860
And the owner, which was Armin Roedeker,


00:39:48.860 --> 00:39:50.980
he had unsubscribed from the project


00:39:50.980 --> 00:39:52.280
and wasn't really following it.


00:39:52.280 --> 00:39:53.820
And so he was the only person that


00:39:53.820 --> 00:39:57.540
was able to give more access to let people become maintainers


00:39:57.540 --> 00:39:58.900
or so on.


00:39:58.900 --> 00:40:01.380
So we weren't able to add ourselves as maintainers.


00:40:01.380 --> 00:40:03.040
So we were kind of stuck with this tool.


00:40:03.040 --> 00:40:04.740
We could-- maybe we could fork it.


00:40:04.740 --> 00:40:06.820
Maybe we could make a new tool.


00:40:10.860 --> 00:40:15.420
Yeah, so how'd you get from there to PipX?


00:40:15.420 --> 00:40:21.420
So as I said, I'm into also TypeScript and the JavaScript


00:40:21.420 --> 00:40:22.020
community.


00:40:22.020 --> 00:40:23.720
And one of the tools they have there


00:40:23.720 --> 00:40:27.500
is called NPX, which is pretty similar to PipX.


00:40:27.500 --> 00:40:31.540
It lets you run CLI apps from Node, who also


00:40:31.540 --> 00:40:33.220
can have similar challenges because it's


00:40:33.220 --> 00:40:34.220
an interpreted language.


00:40:34.220 --> 00:40:39.940
And so I made PipX to kind of add that capability to Python.


00:40:39.940 --> 00:40:42.540
And then I added the ability, since it does kind of like,


00:40:42.540 --> 00:40:44.940
it makes a virtual environment, it finds the binary in it,


00:40:44.940 --> 00:40:45.580
and it runs it.


00:40:45.580 --> 00:40:48.180
It's very similar to installing it.


00:40:48.180 --> 00:40:50.780
It's basically installed in a temporary place


00:40:50.780 --> 00:40:53.740
and runs it versus installing it in a permanent place.


00:40:53.740 --> 00:40:56.380
And so I added the install capability on PIPX.


00:40:56.380 --> 00:40:59.500
I shared it with some of the folks in the issue tracker.


00:40:59.500 --> 00:41:01.940
And they were like, this works for me.


00:41:01.940 --> 00:41:03.620
Let's go use that.


00:41:03.620 --> 00:41:08.640
And yeah, the momentum continued around it.


00:41:08.640 --> 00:41:15.160
and had a lot of really great contributors work on Pitfax.


00:41:15.160 --> 00:41:16.400
Yeah, it's great.


00:41:16.400 --> 00:41:21.160
The GitHub repo says 75 contributors and 5,000 GitHub


00:41:21.160 --> 00:41:24.560
stars, which is pretty awesome.


00:41:24.560 --> 00:41:26.880
Yeah, I'm really happy with it.


00:41:26.880 --> 00:41:29.520
I think I use it all the time.


00:41:29.520 --> 00:41:32.480
I personally really like it, and I'm


00:41:32.480 --> 00:41:36.880
really glad to see other folks are enjoying it as well.


00:41:36.880 --> 00:41:38.600
Yeah, I use it all the time.


00:41:38.600 --> 00:41:41.800
It's one of my go-to tools when I want to check out


00:41:41.800 --> 00:41:44.520
something I know is built with Python as an application


00:41:44.520 --> 00:41:46.260
or I get a new machine.


00:41:46.260 --> 00:41:49.640
We can talk about some of the fun stuff to install


00:41:49.640 --> 00:41:52.480
in a little bit, but maybe let's first talk about


00:41:52.480 --> 00:41:56.940
what happens and how do I use PipX?


00:41:56.940 --> 00:41:59.660
What's the process?


00:41:59.660 --> 00:42:03.040
You do have a nice animated GIF on the GitHub project


00:42:03.040 --> 00:42:07.480
so people can see what happens.


00:42:07.480 --> 00:42:08.980
But maybe walk us through it.


00:42:08.980 --> 00:42:12.560
Like let's say Glances, right?


00:42:12.560 --> 00:42:17.040
Glances is a fantastic application that you can use.


00:42:17.040 --> 00:42:18.600
And if you run it on your machine,


00:42:18.600 --> 00:42:23.600
it gives you this super rich terminal based real time view


00:42:23.600 --> 00:42:28.900
into your servers, much, much better than, you know,


00:42:28.900 --> 00:42:30.480
top or something like that.


00:42:30.480 --> 00:42:32.300
And it also has a web view and whatnot.


00:42:32.300 --> 00:42:36.860
So that's a thing that people might not care about Python for,


00:42:36.860 --> 00:42:38.500
but it happens to be written in Python.


00:42:38.500 --> 00:42:43.060
So it's a perfect thing to pipx install.


00:42:43.060 --> 00:42:44.780
Exactly.


00:42:44.780 --> 00:42:47.540
Yeah, so talk us through, if I pipx install glances,


00:42:47.540 --> 00:42:49.660
what happens?


00:42:49.660 --> 00:42:50.340
Yeah, sure.


00:42:50.340 --> 00:42:53.900
So the first thing is pipx will try


00:42:53.900 --> 00:42:57.980
to determine which package you're trying to install.


00:42:57.980 --> 00:43:00.320
So you can give it just the name glances,


00:43:00.320 --> 00:43:03.440
or you can give it basically any pip specifier,


00:43:03.440 --> 00:43:06.440
any kind of, it can be a Git repository,


00:43:06.440 --> 00:43:10.160
it can be a wheel, anything pip can install, pipx can install.


00:43:10.160 --> 00:43:15.120
So first it will make sure that it's a valid package


00:43:15.120 --> 00:43:16.920
specification.


00:43:16.920 --> 00:43:22.880
Then it will create a virtual environment in this directory


00:43:22.880 --> 00:43:24.320
that pipx manages.


00:43:24.320 --> 00:43:25.820
So it'll make a virtual environment


00:43:25.820 --> 00:43:27.040
with the name of the package.


00:43:27.040 --> 00:43:29.680
It'll make a Glances virtual environment.


00:43:29.680 --> 00:43:32.760
Then it will do some introspection on the--


00:43:32.760 --> 00:43:35.960
then it will install Glances into the virtual environment.


00:43:35.960 --> 00:43:37.640
So now we have a virtual environment


00:43:37.640 --> 00:43:39.480
with Glances installed, but it's not


00:43:39.480 --> 00:43:41.540
accessible anywhere other than inside


00:43:41.540 --> 00:43:43.480
that virtual environment.


00:43:43.480 --> 00:43:45.360
And so the next thing it does is it


00:43:45.360 --> 00:43:47.760
does some introspection on the virtual environment


00:43:47.760 --> 00:43:51.600
to say, what binaries do we have available?


00:43:51.600 --> 00:43:57.440
And so it would be expecting Glances to be available.


00:43:57.440 --> 00:44:00.200
And it will then take--


00:44:00.200 --> 00:44:02.660
it'll find the path to the Glances binary


00:44:02.660 --> 00:44:06.660
and create a symlink into a directory on your path,


00:44:06.660 --> 00:44:09.480
on your shell's path, so that when you run that command,


00:44:09.480 --> 00:44:12.620
it's available.


00:44:12.620 --> 00:44:13.200
Right.


00:44:13.200 --> 00:44:15.360
So for example, you need to have--


00:44:15.360 --> 00:44:20.800
and your little example here was home/csmith/.local/bin.


00:44:20.800 --> 00:44:24.400
And then that's the folder where all the symlink stuff


00:44:24.400 --> 00:44:25.080
gets linked over.


00:44:25.080 --> 00:44:27.680
You can also do those with entry points, right?


00:44:27.680 --> 00:44:30.440
It'll find the entry points and make them available?


00:44:30.440 --> 00:44:32.640
- Yeah, so these are entry points.


00:44:32.640 --> 00:44:33.720
These are the console scripts.


00:44:33.720 --> 00:44:35.200
- Okay.


00:44:35.200 --> 00:44:36.040
Yeah, all right.


00:44:36.040 --> 00:44:38.320
So that leads me to a question out in the audience


00:44:38.320 --> 00:44:39.920
from Ratul.


00:44:39.920 --> 00:44:41.440
Ratul says, "This looks great.


00:44:41.440 --> 00:44:42.680
"Not sure if I missed it,


00:44:42.680 --> 00:44:47.000
"but how do you get your built Python app


00:44:47.000 --> 00:44:48.440
"to be pipx installable?"


00:44:48.440 --> 00:44:52.280
So you said it has to be pip installable,


00:44:52.280 --> 00:44:54.240
but then I think the other point here,


00:44:54.240 --> 00:44:57.440
you would have to expose some functionality in a way,


00:44:57.440 --> 00:45:00.320
and that could be entry points, right?


00:45:00.320 --> 00:45:04.520
Yeah, so pretty much that is essentially the only way,


00:45:04.520 --> 00:45:07.240
is the console script entry point.


00:45:07.240 --> 00:45:08.520
So you can look this up.


00:45:08.520 --> 00:45:13.360
It's a kind of well-defined part of the packaging


00:45:13.360 --> 00:45:14.720
specifications.


00:45:14.720 --> 00:45:17.800
But you can define a function that you


00:45:17.800 --> 00:45:23.080
want to call from a console script entry point.


00:45:23.080 --> 00:45:23.920
Yeah, exactly.


00:45:23.920 --> 00:45:27.880
So, so what you're showing here is--


00:45:27.880 --> 00:45:29.240
- Yeah, so in your setup,


00:45:29.240 --> 00:45:31.880
you would say something like setupTools.setup,


00:45:31.880 --> 00:45:33.880
entryPoints equals,


00:45:33.880 --> 00:45:36.560
and then you give it a list of a command


00:45:36.560 --> 00:45:39.960
and then basically a module colon function, right?


00:45:39.960 --> 00:45:43.120
So here's this example that I'll link to in the show notes.


00:45:43.120 --> 00:45:45.480
So it's hello world equals hello world,


00:45:45.480 --> 00:45:46.920
which is the module name,


00:45:46.920 --> 00:45:49.800
colon sayHi, which is a function in hello world.


00:45:49.800 --> 00:45:53.440
And once you pip install that into a virtual environment,


00:45:53.440 --> 00:45:54.860
you could just type hello world


00:45:54.860 --> 00:45:57.520
and it would do whatever it does for that function.


00:45:57.520 --> 00:46:00.640
But what you're saying is if you install with pipx,


00:46:00.640 --> 00:46:03.700
it finds these and creates basically binaries


00:46:03.700 --> 00:46:06.600
that the system can see that it thinks it can run


00:46:06.600 --> 00:46:08.400
called hello world, for example.


00:46:08.400 --> 00:46:10.280
- Yeah.


00:46:10.280 --> 00:46:13.920
When you pip install something that has a console script,


00:46:13.920 --> 00:46:17.100
it makes this like a shell script


00:46:17.100 --> 00:46:21.280
that calls that function for you.


00:46:21.280 --> 00:46:24.800
And so these shell scripts just get sim linked out


00:46:24.800 --> 00:46:27.640
onto your path by pipx.


00:46:27.640 --> 00:46:28.520
Got it.


00:46:28.520 --> 00:46:31.680
Yeah, so it's basically doing the install.


00:46:31.680 --> 00:46:34.280
It's creating the virtual environment automatically


00:46:34.280 --> 00:46:35.660
behind the scenes.


00:46:35.660 --> 00:46:40.320
It's installing, doing basically pip install on the package.


00:46:40.320 --> 00:46:43.200
But that drags in all of the dependencies.


00:46:43.200 --> 00:46:46.560
But the important thing is every one of these commands,


00:46:46.560 --> 00:46:49.040
or I guess the thing you pipx install,


00:46:49.040 --> 00:46:51.040
It can have multiple commands as part of it.


00:46:51.040 --> 00:46:55.320
It gets its own virtual environment that's isolated,


00:46:55.320 --> 00:46:58.520
not just from the rest of the system, but all the other PipX things as well.


00:46:58.520 --> 00:47:01.120
So they're versioned and they live independently, right?


00:47:01.120 --> 00:47:02.720
Exactly.


00:47:02.720 --> 00:47:04.920
Yeah.


00:47:04.920 --> 00:47:08.020
And if you have... You can have more than one console script too.


00:47:08.020 --> 00:47:13.180
A lot of times, a package will have two or three, four console script entry points,


00:47:13.180 --> 00:47:14.680
and PipX will find all those.


00:47:14.680 --> 00:47:18.520
Nice. Yeah.


00:47:18.520 --> 00:47:21.320
One that comes to mind is PyJokes.


00:47:21.320 --> 00:47:23.600
Are you familiar with PyJokes?


00:47:23.600 --> 00:47:25.200
- Yeah, I've heard you guys talk about that


00:47:25.200 --> 00:47:26.240
on the podcast before.


00:47:26.240 --> 00:47:28.720
- Yeah, PyJokes is a good one.


00:47:28.720 --> 00:47:30.860
So this one has entry points


00:47:30.860 --> 00:47:32.880
and I always get this through PipX.


00:47:32.880 --> 00:47:37.880
I just, you know, PipX install PyJokes


00:47:37.880 --> 00:47:39.760
and you end up with a bunch of,


00:47:39.760 --> 00:47:42.240
here they say Pip, so I should say PipX, right?


00:47:42.240 --> 00:47:45.200
And then you can run PyJoke or PyJokes


00:47:45.200 --> 00:47:47.800
and even as a programmable API


00:47:47.800 --> 00:47:50.080
And you get really deep jokes like,


00:47:50.080 --> 00:47:52.800
why did the programmer quit their job?


00:47:52.800 --> 00:47:54.360
'Cause they didn't get a raise.


00:47:54.360 --> 00:47:57.340
A raise is in like lists.


00:47:57.340 --> 00:48:00.880
But you know, it's those types of things, right?


00:48:00.880 --> 00:48:04.480
You don't necessarily care that PyJoke is written in Python.


00:48:04.480 --> 00:48:06.360
I mean, the name would maybe make you think it should be,


00:48:06.360 --> 00:48:08.480
but right, you just wanna have a command


00:48:08.480 --> 00:48:09.300
that you can type something


00:48:09.300 --> 00:48:12.360
and get a funny programmer joke out of it, right?


00:48:12.360 --> 00:48:14.440
But maybe we could touch on some of the other things


00:48:14.440 --> 00:48:17.520
that are more useful than PyJoke.


00:48:17.520 --> 00:48:20.640
Like one you mentioned was the GDB GUI.


00:48:20.640 --> 00:48:23.040
I gave a shout out to Glances


00:48:23.040 --> 00:48:25.200
'cause Glances, I said is fantastic.


00:48:25.200 --> 00:48:26.560
I use Glances all the time.


00:48:26.560 --> 00:48:30.160
It just happens to be written in Python,


00:48:30.160 --> 00:48:33.120
but I just want it on my server, right?


00:48:33.120 --> 00:48:37.080
Maybe another one that you pointed out was HTTPI,


00:48:37.080 --> 00:48:40.060
HTTPI, H-T-T-P-I-E.


00:48:40.060 --> 00:48:43.040
Do you use this one?


00:48:43.040 --> 00:48:46.900
- You know, I have not used it too much,


00:48:46.900 --> 00:48:49.900
but I would love to find an opportunity to use it.


00:48:49.900 --> 00:48:52.740
I would prefer it over things like curl.


00:48:52.740 --> 00:48:56.860
- Yeah, I love HTTPy.


00:48:56.860 --> 00:49:01.480
It works just like curl in a lot of ways,


00:49:01.480 --> 00:49:03.260
but the results that it gives you,


00:49:03.260 --> 00:49:06.020
it gives you syntax highlighting,


00:49:06.020 --> 00:49:11.500
easy ability to say, just show me the headers


00:49:11.500 --> 00:49:14.620
and the response headers and stuff that came back


00:49:14.620 --> 00:49:17.860
and cookies and it does highlighting on those.


00:49:17.860 --> 00:49:20.100
It's really nice.


00:49:20.100 --> 00:49:22.060
It just pipx install HTTP pi


00:49:22.060 --> 00:49:27.460
and then you get HTTP as a command and HTTPS.


00:49:27.460 --> 00:49:29.900
Here's another one with two entry points, right?


00:49:29.900 --> 00:49:34.480
So if you just wanna say HTTP 127.0.0.1,


00:49:34.480 --> 00:49:40.340
you don't have to say HTTP colon slash slash server name.


00:49:40.340 --> 00:49:43.380
You can just say the command, either HTTP or HTTPS


00:49:43.380 --> 00:49:46.120
and it'll do it, it's just a little bit shorter.


00:49:46.120 --> 00:49:50.160
So this one, big fan.


00:49:50.160 --> 00:49:53.720
But what was surprising to me about this is,


00:49:53.720 --> 00:49:56.640
this is backed by a company, right?


00:49:56.640 --> 00:50:00.800
There's like a whole bigger organization


00:50:00.800 --> 00:50:04.080
behind ACP Pi than I realized, I believe.


00:50:04.080 --> 00:50:05.740
So I think so.


00:50:05.740 --> 00:50:10.080
- Yeah, I was impressed with their website.


00:50:10.080 --> 00:50:11.720
It was a lot more polished


00:50:11.720 --> 00:50:14.080
on a lot of other open source projects.


00:50:14.080 --> 00:50:15.800
So I'm not surprised to hear that they're funded


00:50:15.800 --> 00:50:17.240
or they're part of a company.


00:50:17.240 --> 00:50:18.360
- Yeah, exactly.


00:50:18.360 --> 00:50:20.880
At the bottom it says like, there's a whole jobs section.


00:50:20.880 --> 00:50:24.420
There's apparently four jobs for ACPy, which is incredible.


00:50:24.420 --> 00:50:28.520
At the same time, it's a fantastic tool.


00:50:28.520 --> 00:50:30.240
So, you know, good on them.


00:50:30.240 --> 00:50:33.400
Let's see, maybe some of the other ones.


00:50:33.400 --> 00:50:34.640
I know we had a little bit of a list


00:50:34.640 --> 00:50:36.140
of stuff that could be fun.


00:50:36.140 --> 00:50:40.160
Py installer, py2app.


00:50:40.160 --> 00:50:41.000
- Yeah.


00:50:41.000 --> 00:50:46.460
- Let's see, PyInstaller, Py2App, Cython,


00:50:46.460 --> 00:50:51.840
a lot of the package management stuff, poetry,


00:50:51.840 --> 00:50:58.200
pipenv, yeah, anything else you wanna give a shout out to?


00:50:58.200 --> 00:50:59.680
Oh, I've got one I want to as well,


00:50:59.680 --> 00:51:01.000
but go ahead and do yours.


00:51:01.000 --> 00:51:06.200
- Another program I made, I guess I'll plug my own,


00:51:06.200 --> 00:51:08.920
one of my other projects, it's called TermPair.


00:51:08.920 --> 00:51:12.760
So this is actually kind of a web app.


00:51:12.760 --> 00:51:16.640
It lets you share your terminal session through the web,


00:51:16.640 --> 00:51:21.880
but it does it by encrypting all the output and input


00:51:21.880 --> 00:51:24.160
from your terminal.


00:51:24.160 --> 00:51:27.600
And so basically, you run this command, term pair share,


00:51:27.600 --> 00:51:30.920
and then it will start sharing through this server.


00:51:30.920 --> 00:51:32.400
And then you can either--


00:51:32.400 --> 00:51:33.960
you can control it from the web app,


00:51:33.960 --> 00:51:36.600
or you can control it from the terminal.


00:51:36.600 --> 00:51:42.760
And the process running in the terminal is a Python app.


00:51:42.760 --> 00:51:48.280
And then, of course, the web app is JavaScript and React.


00:51:48.280 --> 00:51:49.880
Yeah, how interesting.


00:51:49.880 --> 00:51:51.440
Does it give you your normal shell,


00:51:51.440 --> 00:51:55.600
or is it like a bare Bash or Z shell or something?


00:51:55.600 --> 00:51:56.520
By default, it uses--


00:51:56.520 --> 00:51:58.880
Like, if I do a super configuration of my shell


00:51:58.880 --> 00:52:02.040
and make it all blinged out, and then I run this,


00:52:02.040 --> 00:52:04.840
do I get the same crazy configuration,


00:52:04.840 --> 00:52:06.480
or is it a simpler version?


00:52:06.480 --> 00:52:07.780
Now it's the exact same thing.


00:52:07.780 --> 00:52:10.620
It'll just run whatever the shell environment variable is


00:52:10.620 --> 00:52:11.740
that you're running.


00:52:11.740 --> 00:52:12.940
That's the default command.


00:52:12.940 --> 00:52:14.100
You can run any command you want.


00:52:14.100 --> 00:52:16.020
If you want to run Python, you can run Python.


00:52:16.020 --> 00:52:18.580
It'll share your Python session.


00:52:18.580 --> 00:52:20.260
You can run anything, really.


00:52:20.260 --> 00:52:25.060
But if you run a shell, that's the most familiar thing,


00:52:25.060 --> 00:52:26.660
I think, for sharing.


00:52:26.660 --> 00:52:28.980
>> Sure, sure.


00:52:28.980 --> 00:52:31.180
Interesting.


00:52:31.180 --> 00:52:35.420
It'll share basically any CLI thing, huh?


00:52:35.420 --> 00:52:38.500
So yeah, it spawns a PTY process.


00:52:38.500 --> 00:52:41.500
And then any output or input just gets written


00:52:41.500 --> 00:52:45.300
and behaves like any other terminal would.


00:52:45.300 --> 00:52:47.860
So you can do stuff like, this is Htop


00:52:47.860 --> 00:52:49.260
where you're interacting with it.


00:52:49.260 --> 00:52:52.500
And it's kind of like rewriting lines to the screen


00:52:52.500 --> 00:52:54.140
and it's able to handle all that.


00:52:54.140 --> 00:52:58.500
- It might be a nice way to help people


00:52:58.500 --> 00:53:01.460
or like, you know, I'm stuck, I can't get this to work.


00:53:01.460 --> 00:53:06.460
you're in a email exchange or a Zoom meeting or something,


00:53:06.460 --> 00:53:08.060
you know, run this and give me the link


00:53:08.060 --> 00:53:10.300
and I'll just, let me just ask your system a question


00:53:10.300 --> 00:53:12.140
real quick and see if it does the same.


00:53:12.140 --> 00:53:13.220
You got to have a lot of trust


00:53:13.220 --> 00:53:15.660
to give this over to people though, right?


00:53:15.660 --> 00:53:18.780
- Yeah, you know, I made it because it seemed really fun.


00:53:18.780 --> 00:53:20.740
It was a challenge, it seemed fun.


00:53:20.740 --> 00:53:24.980
Practically speaking, yeah, I don't know how often it's used.


00:53:24.980 --> 00:53:27.140
You'd have to totally trust somebody to not,


00:53:27.140 --> 00:53:28.940
I mean, they have full control over your computer.


00:53:28.940 --> 00:53:30.420
- Sure, it's not that different


00:53:30.420 --> 00:53:32.020
than going to a Zoom meeting and say,


00:53:32.020 --> 00:53:36.460
allow so-and-so to share, to control my mouse and keyboard


00:53:36.460 --> 00:53:38.020
or team viewer or something like that, right?


00:53:38.020 --> 00:53:39.140
- That's true. Yeah, that's true.


00:53:39.140 --> 00:53:40.420
- Yeah, yeah.


00:53:40.420 --> 00:53:41.860
But still pretty neat.


00:53:41.860 --> 00:53:43.100
I know it's just so more visceral,


00:53:43.100 --> 00:53:43.940
it's sort of right there.


00:53:43.940 --> 00:53:46.060
You can just RMRF it right there.


00:53:46.060 --> 00:53:46.900
- Yeah.


00:53:46.900 --> 00:53:49.300
- There's another one I want to pull up here.


00:53:49.300 --> 00:53:55.220
This one, PLS, you use PLS, Ernie?


00:53:55.220 --> 00:53:56.340
- Yeah, I've tried it out.


00:53:56.340 --> 00:53:57.380
It's pretty cool.


00:53:57.380 --> 00:54:01.500
I like that you can do so many different things.


00:54:01.500 --> 00:54:04.860
I like how easy it is to develop applications in Python,


00:54:04.860 --> 00:54:07.260
where you can just kind of make whatever customizations


00:54:07.260 --> 00:54:09.060
and hack things up really quickly.


00:54:09.060 --> 00:54:11.340
- Absolutely.


00:54:11.340 --> 00:54:15.100
So PLS is, it's a little hard probably to see


00:54:15.100 --> 00:54:15.940
over the screen share.


00:54:15.940 --> 00:54:17.020
It's a replacement for LS.


00:54:17.020 --> 00:54:19.620
And I know there are many replacements for LS,


00:54:19.620 --> 00:54:20.500
but this one is cool


00:54:20.500 --> 00:54:22.940
'cause it's a developer-friendly one.


00:54:23.900 --> 00:54:28.160
And so when you interact with it,


00:54:28.160 --> 00:54:30.120
it will use a lot of different things.


00:54:30.120 --> 00:54:32.760
For example, to show icons for, you know,


00:54:32.760 --> 00:54:36.480
like Python logos next to .py files,


00:54:36.480 --> 00:54:40.280
JavaScript logos next to JS files and so on.


00:54:40.280 --> 00:54:44.320
But it will also use like git ignore files


00:54:44.320 --> 00:54:47.120
to decide what shows up in the basic view.


00:54:47.120 --> 00:54:50.320
It'll use, it'll show you the git status of the file


00:54:50.320 --> 00:54:52.320
when you do a PLS --details,


00:54:52.320 --> 00:54:56.860
you'll see which files in that listing are modified in Git,


00:54:56.860 --> 00:54:58.100
according to Git and so on.


00:54:58.100 --> 00:55:01.680
So there's just a ton of fun stuff here


00:55:01.680 --> 00:55:03.180
that you can check out.


00:55:03.180 --> 00:55:04.120
I definitely think it's neat.


00:55:04.120 --> 00:55:06.120
Here's some examples of some of the colors.


00:55:06.120 --> 00:55:09.920
For example, poetry.lock, because it's Git ignored,


00:55:09.920 --> 00:55:11.480
but still important, it shows up,


00:55:11.480 --> 00:55:14.920
but it's a very faint color,


00:55:14.920 --> 00:55:18.100
whereas other files show up with regular color.


00:55:18.100 --> 00:55:21.640
So this one is another one that's good to pipx install,


00:55:21.640 --> 00:55:23.780
'cause you just need it once for your computer.


00:55:23.780 --> 00:55:26.280
- Yeah, I love those colors too.


00:55:26.280 --> 00:55:27.820
Great color scheme.


00:55:27.820 --> 00:55:29.560
- Yeah, yeah, absolutely.


00:55:29.560 --> 00:55:31.160
And apparently you can build little plugins


00:55:31.160 --> 00:55:32.760
and stuff for it, I think in Python.


00:55:32.760 --> 00:55:34.800
I haven't tried to do that.


00:55:34.800 --> 00:55:37.020
I've just tried to use it as a user.


00:55:37.020 --> 00:55:42.200
But yeah, that one's a fun one.


00:55:42.200 --> 00:55:45.440
For a while I replaced LS with it.


00:55:45.440 --> 00:55:50.440
That wasn't a super idea because it behaves weirdly


00:55:50.440 --> 00:55:54.820
Like if you try to LS something and it doesn't exist,


00:55:54.820 --> 00:55:57.400
you get a trace back exception instead


00:55:57.400 --> 00:55:59.300
of just doesn't exist or nothing.


00:55:59.300 --> 00:56:01.820
It's not perfect, but it's as a thing


00:56:01.820 --> 00:56:04.660
that you have hanging around, it's definitely quite neat.


00:56:04.660 --> 00:56:10.020
- Yeah, replacing system utilities


00:56:10.020 --> 00:56:11.820
can get kind of risky.


00:56:11.820 --> 00:56:14.740
- Yeah, yeah.


00:56:14.740 --> 00:56:17.500
You just gotta know what you're doing.


00:56:17.500 --> 00:56:19.860
I'm willing for this to mildly break stuff,


00:56:19.860 --> 00:56:22.060
But if you make it, like you said, that one time,


00:56:22.060 --> 00:56:23.180
you couldn't turn on your computer,


00:56:23.180 --> 00:56:26.020
then you're in a bad spot.


00:56:26.020 --> 00:56:30.260
Or if you could at least get back and edit your profile,


00:56:30.260 --> 00:56:32.780
your shell profile, and turn those back to normal,


00:56:32.780 --> 00:56:34.080
then you're probably okay.


00:56:34.080 --> 00:56:36.340
Yeah.


00:56:36.340 --> 00:56:41.060
Well, maybe real quickly, you could give us just a,


00:56:41.060 --> 00:56:44.660
if there's any interesting, like internal,


00:56:44.660 --> 00:56:46.420
there's some interesting tools or stuff


00:56:46.420 --> 00:56:48.980
that happens behind the scenes with PIPX.


00:56:48.980 --> 00:56:51.620
Give us a look inside real quick,


00:56:51.620 --> 00:56:54.700
and then maybe we could wrap things up.


00:56:54.700 --> 00:57:00.780
>> Any interesting internals of PipBex? Let's see.


00:57:00.780 --> 00:57:03.980
>> Yeah, like notable libraries that uses


00:57:03.980 --> 00:57:07.060
or something that's really valuable in there.


00:57:17.060 --> 00:57:27.900
>> I was poking around the PyProject.toml. And there's like arg complete. Sounded interesting


00:57:27.900 --> 00:57:31.580
to me. And then user path is new to me as well.


00:57:31.580 --> 00:57:37.780
>> Okay. Yeah. Yeah. Sure. So, arg complete I'm a huge fan of. Arg complete is a package


00:57:37.780 --> 00:57:46.060
that -- so, if you use arg parse, which is the standard library's argument parsing package,


00:57:46.060 --> 00:57:48.340
A lot of times you'll want to have tab completion.


00:57:48.340 --> 00:57:51.420
And tab completion can be really hard to write.


00:57:51.420 --> 00:57:54.460
And so ArcComplete gives you a Python API


00:57:54.460 --> 00:57:58.380
to tell it how tab completion should work.


00:57:58.380 --> 00:58:00.300
And so in PipX's case, if you're going


00:58:00.300 --> 00:58:05.540
to do something like PipX uninstall a package,


00:58:05.540 --> 00:58:08.460
you have to give a name of a package that's been installed.


00:58:08.460 --> 00:58:12.380
And so with ArcComplete, you can say PipX uninstall tab.


00:58:12.380 --> 00:58:14.900
And then ArcComplete, you give ArcComplete a list


00:58:14.900 --> 00:58:19.900
or a way to get a list of packages that can be uninstalled.


00:58:19.900 --> 00:58:22.140
And then it gives you that tab completion


00:58:22.140 --> 00:58:23.620
just like you'd expect.


00:58:23.620 --> 00:58:25.380
And it also does it across shells.


00:58:25.380 --> 00:58:30.380
So writing it for just bash is enough to do,


00:58:30.380 --> 00:58:33.380
but then you also have to write different completions


00:58:33.380 --> 00:58:35.060
for fish or something like that.


00:58:35.060 --> 00:58:37.260
And so RComplete lets you not think about that


00:58:37.260 --> 00:58:41.020
and just use your RGPars as you normally would


00:58:41.020 --> 00:58:42.420
with just a couple extra arguments


00:58:42.420 --> 00:58:45.780
And then, boom, you have tab completion.


00:58:45.780 --> 00:58:46.280
>>Right.


00:58:46.280 --> 00:58:46.780
Yeah.


00:58:46.780 --> 00:58:48.160
There's a whole section where you


00:58:48.160 --> 00:58:53.820
talk about how to install completion in here


00:58:53.820 --> 00:58:54.660
for the shells.


00:58:54.660 --> 00:58:58.380
So if you do that for--


00:58:58.380 --> 00:59:02.180
if you just type pip x space completions,


00:59:02.180 --> 00:59:04.420
it'll tell you how to do that, right?


00:59:04.420 --> 00:59:04.920
>>Right.


00:59:04.920 --> 00:59:07.220
And RComplete's useful for--


00:59:07.220 --> 00:59:09.740
I mean, I actually added it for Knox.


00:59:09.740 --> 00:59:13.440
I'm a big fan of the tool Knox, which is also PIPX installable.


00:59:13.440 --> 00:59:17.700
And Knox, a lot of times you want to, there's a lot of sessions,


00:59:17.700 --> 00:59:20.160
you run sessions in Knox and there's a whole bunch of them.


00:59:20.160 --> 00:59:22.960
And so having a tap completion on that was a feature I really wanted.


00:59:22.960 --> 00:59:25.660
And I think that's where I first found out about R complete.


00:59:25.660 --> 00:59:29.400
And then I started adding it to other projects after I found out how easy it was to use.


00:59:29.400 --> 00:59:31.800
Right. You're like, this is not that hard. I want this everywhere, right?


00:59:31.800 --> 00:59:33.140
Yeah.


00:59:33.140 --> 00:59:35.140
Yeah. Cool.


00:59:35.140 --> 00:59:37.540
The other thing that people need to remember to do


00:59:37.540 --> 00:59:41.260
is to run pipx insure path, right?


00:59:41.260 --> 00:59:43.380
Because you talked about,


00:59:43.380 --> 00:59:46.900
we talked about that .local/bin in your user profile,


00:59:46.900 --> 00:59:49.420
at least on macOS, I know that's where it goes.


00:59:49.420 --> 00:59:51.320
It might go somewhere else in Windows,


00:59:51.320 --> 00:59:55.580
but you wanna make sure that's in your path.


00:59:55.580 --> 00:59:56.900
So that'll basically modify


00:59:56.900 --> 00:59:58.700
whatever your active shell profile is


00:59:58.700 --> 01:00:00.900
to make sure it's in your path, right?


01:00:00.900 --> 01:00:02.100
- That's right, yeah.


01:00:04.660 --> 01:00:07.900
And you can also modify where that binary directory is


01:00:07.900 --> 01:00:10.140
with an environment variable if you want.


01:00:10.140 --> 01:00:11.620
>> Okay.


01:00:11.620 --> 01:00:14.300
How well does this work on Windows as well?


01:00:14.300 --> 01:00:15.860
Does it work there?


01:00:15.860 --> 01:00:18.660
Is it like PowerShell friendly and stuff like that?


01:00:18.660 --> 01:00:19.780
>> So it does work on Windows.


01:00:19.780 --> 01:00:21.780
I know that one of the contributors,


01:00:21.780 --> 01:00:25.220
one of the maintainers is a Windows user


01:00:25.220 --> 01:00:29.900
and I don't see a flood of Windows issues coming in


01:00:29.900 --> 01:00:31.260
about this doesn't work on Windows.


01:00:31.260 --> 01:00:34.500
So it should work on Windows, yeah.


01:00:34.500 --> 01:00:36.840
Yeah, yeah, perfect.


01:00:36.840 --> 01:00:42.540
OK, and then it can upgrade itself, right?


01:00:42.540 --> 01:00:43.780
Or do you have to do pip--


01:00:43.780 --> 01:00:47.540
do you have to do pip upgrade, like, --user


01:00:47.540 --> 01:00:48.620
or something like that?


01:00:48.620 --> 01:00:50.820
Yeah, so it doesn't install itself.


01:00:50.820 --> 01:00:54.020
I was-- I'm considering making a new installer where pipx


01:00:54.020 --> 01:00:56.180
installs itself with pipx, but I'm not


01:00:56.180 --> 01:00:57.780
sure I'm going to land that.


01:00:57.780 --> 01:01:01.300
But right now, we install pipx with pip,


01:01:01.300 --> 01:01:03.620
and so you would just upgrade it normally with, like, pip


01:01:03.620 --> 01:01:06.620
like pip upgrade pipX.


01:01:06.620 --> 01:01:07.960
- Sure, okay.


01:01:07.960 --> 01:01:11.220
- Or is pip install--


01:01:11.220 --> 01:01:13.060
- Yeah, another thing, right.


01:01:13.060 --> 01:01:15.980
Another thing that I like about pipX


01:01:15.980 --> 01:01:18.140
is you can just say pipX, what is it?


01:01:18.140 --> 01:01:21.900
Upgrade all, or there's a command to just upgrade.


01:01:21.900 --> 01:01:22.860
Just, you know what?


01:01:22.860 --> 01:01:24.980
Give me a new version of all my libraries,


01:01:24.980 --> 01:01:28.420
which comes back to similar with apt,


01:01:28.420 --> 01:01:29.780
similar to homebrew, right?


01:01:29.780 --> 01:01:32.900
Now there's a brew update and outdated


01:01:32.900 --> 01:01:35.060
and just show me the stuff that could be updated,


01:01:35.060 --> 01:01:36.140
and then we'll just do it.


01:01:36.140 --> 01:01:38.700
Same with Chocolaty.


01:01:38.700 --> 01:01:41.420
Just to keep the tools you use fresh.


01:01:41.420 --> 01:01:44.020
It's really nice.


01:01:44.020 --> 01:01:46.100
Yeah, it kind of goes back to, I have this program.


01:01:46.100 --> 01:01:48.260
I don't really care about that it's written in Python.


01:01:48.260 --> 01:01:49.640
I just want this thing to work.


01:01:49.640 --> 01:01:54.220
I want the newest version of it, and just kind of make it happen.


01:01:54.220 --> 01:01:55.940
Right, but if we reverse that and we're


01:01:55.940 --> 01:02:01.020
talking to Python developers, as most people listening are,


01:02:01.020 --> 01:02:04.740
you can empower people to deliver their applications


01:02:04.740 --> 01:02:09.460
to end users in a way that is much, much, much simpler


01:02:09.460 --> 01:02:11.260
if they're not Python people, right?


01:02:11.260 --> 01:02:13.620
- Yeah, I mean- - If they can get PIPX


01:02:13.620 --> 01:02:15.940
on their machine, then getting the rest of their stuff


01:02:15.940 --> 01:02:17.940
is basically done, right?


01:02:17.940 --> 01:02:19.140
- That's a great point, yeah.


01:02:19.140 --> 01:02:22.420
I mean, the distribution story gets a lot easier


01:02:22.420 --> 01:02:23.260
for your users.


01:02:23.260 --> 01:02:24.740
If you're a developer and you wanna get this


01:02:24.740 --> 01:02:27.020
in people's hands, having them use PIPX


01:02:27.020 --> 01:02:28.900
is gonna cause them less headaches


01:02:28.900 --> 01:02:30.300
and it's gonna cause you less headaches


01:02:30.300 --> 01:02:33.380
because it's going to be a more predictable environment


01:02:33.380 --> 01:02:34.700
to install in.


01:02:34.700 --> 01:02:40.620
Because PIPX lives in the center of a few things.


01:02:40.620 --> 01:02:44.700
Like you have Wheels, which are pre-built packages specific


01:02:44.700 --> 01:02:46.900
to your operating system.


01:02:46.900 --> 01:02:51.220
And you have pip, and PIPX and virtual environments.


01:02:51.220 --> 01:02:53.820
And PIPX kind of marries them all together


01:02:53.820 --> 01:02:56.020
in a way where it takes the pre-built--


01:02:56.020 --> 01:02:58.180
it doesn't have to rebuild it on the user's computer.


01:02:58.180 --> 01:02:59.960
It takes this pre-built thing that works.


01:02:59.960 --> 01:03:03.160
it puts it in a place that's not going to disturb anything.


01:03:03.160 --> 01:03:04.960
It's not going to get disturbed either.


01:03:04.960 --> 01:03:06.920
And then it makes it accessible to the end user.


01:03:06.920 --> 01:03:10.560
And they don't have to think about any of those pieces


01:03:10.560 --> 01:03:12.440
to get it on their computer.


01:03:12.440 --> 01:03:13.360
Yeah.


01:03:13.360 --> 01:03:15.000
So maybe one of the biggest takeaways


01:03:15.000 --> 01:03:19.680
is if you're trying to deliver Python applications to people,


01:03:19.680 --> 01:03:21.680
here's a really good option.


01:03:21.680 --> 01:03:25.320
If some kind of CLI starter is the way to go, right?


01:03:25.320 --> 01:03:26.560
I guess if you want--


01:03:26.560 --> 01:03:28.800
here's how you drag it over to your applications folder


01:03:28.800 --> 01:03:30.460
and put it in your doc, maybe that's not the right thing.


01:03:30.460 --> 01:03:32.260
But for a lot of the type of stuff


01:03:32.260 --> 01:03:33.660
people are building with Python,


01:03:33.660 --> 01:03:35.660
it's a great way to get it to end users


01:03:35.660 --> 01:03:36.760
and keep it up to date.


01:03:36.760 --> 01:03:39.380
- Yeah.


01:03:39.380 --> 01:03:42.340
One other thing I'll call out is PipX run.


01:03:42.340 --> 01:03:46.220
- Yes, yeah, we've talked about install the whole time,


01:03:46.220 --> 01:03:50.300
but yeah, PipX run is maybe even better for certain things.


01:03:50.300 --> 01:03:52.300
- Yeah, so PipX run will make sure you have


01:03:52.300 --> 01:03:54.660
a recent version of the tool you're trying to use.


01:03:54.660 --> 01:03:56.580
So if you wanna run some kind of a bootstrap program


01:03:56.580 --> 01:03:57.840
or some kind of like cookie cutter


01:03:57.840 --> 01:04:00.480
where you create a new project or something like that,


01:04:00.480 --> 01:04:03.960
and you'd want it to run with the recent version,


01:04:03.960 --> 01:04:06.780
PipX run will just kind of make it happen for you.


01:04:06.780 --> 01:04:10.400
- Right, so one of your commands might be,


01:04:10.400 --> 01:04:12.720
well, first you're gonna set up a virtual environment,


01:04:12.720 --> 01:04:15.240
and then you're gonna pip install cookie cutter,


01:04:15.240 --> 01:04:19.040
then you're gonna run cookie cutter this thing, right?


01:04:19.040 --> 01:04:22.240
Or maybe the step is, if you already have PipX,


01:04:22.240 --> 01:04:24.320
assuming this is a thing that's accessible,


01:04:24.320 --> 01:04:27.040
you PipX, instead of install run cookie cutter,


01:04:27.040 --> 01:04:28.200
and you give it that command,


01:04:28.200 --> 01:04:31.280
nobody needs or wants cookie cutter after that.


01:04:31.280 --> 01:04:34.960
They just need cookie cutter to run the skeleton generator


01:04:34.960 --> 01:04:36.120
for their project.


01:04:36.120 --> 01:04:38.320
And then their project is kind of free from cookie cutter


01:04:38.320 --> 01:04:40.560
'cause you can't update your project afterwards anyway.


01:04:40.560 --> 01:04:43.000
That's probably a good mental model to have.


01:04:43.000 --> 01:04:46.600
- Yeah, and that's how the JavaScript world uses it.


01:04:46.600 --> 01:04:49.000
It's kind of like, that's one of the really popular ways


01:04:49.000 --> 01:04:52.440
that you'll see the NPX, create React app


01:04:52.440 --> 01:04:53.760
is a way to start React apps


01:04:53.760 --> 01:04:58.160
with the latest version of that cookie cutter type thing.


01:04:58.160 --> 01:05:00.640
And so I would love to see more adoption


01:05:00.640 --> 01:05:02.880
on that side in the Python world.


01:05:02.880 --> 01:05:05.600
- Yeah, absolutely.


01:05:05.600 --> 01:05:07.440
Another one, I guess, let's just real quick,


01:05:07.440 --> 01:05:09.400
maybe give a shout out to this,


01:05:09.400 --> 01:05:14.400
is Node.js thing that just got added.


01:05:14.400 --> 01:05:17.280
Isn't there a way that just came out


01:05:17.280 --> 01:05:21.560
for installing Node.js as a dependency,


01:05:21.560 --> 01:05:22.800
not just for the bindings?


01:05:22.800 --> 01:05:24.680
I feel like there just was.


01:05:24.680 --> 01:05:27.500
- Yeah, I saw something about this.


01:05:27.500 --> 01:05:31.880
- Yeah, actually I think we just covered it on Python Bytes.


01:05:31.880 --> 01:05:33.820
I was the one who brought it up,


01:05:33.820 --> 01:05:36.120
so I don't totally remember, let's see.


01:05:36.120 --> 01:05:37.960
There you go, nodejs-bin, that's it.


01:05:37.960 --> 01:05:43.760
Gina Houska covered it and yeah, there it is,


01:05:43.760 --> 01:05:46.660
nodejs-bin, so if you've got something


01:05:46.660 --> 01:05:49.840
that needs to have the node tools around or CLI stuff,


01:05:49.840 --> 01:05:53.080
you could just pip install nodejs-bin.


01:05:53.080 --> 01:05:57.880
So I guess you could also pip x install nodejs-bin.


01:05:57.880 --> 01:06:04.000
>> Yeah, maybe if it's an entry point, then for sure.


01:06:04.000 --> 01:06:05.800
>> Yeah, I haven't thought enough about it.


01:06:05.800 --> 01:06:07.480
So maybe it doesn't quite fit in there,


01:06:07.480 --> 01:06:11.000
but it's an interesting development.


01:06:11.000 --> 01:06:13.240
All right, Chad, well, I think we're probably out of time


01:06:13.240 --> 01:06:14.640
for talking about pipx.


01:06:14.640 --> 01:06:19.640
Let's maybe wrap things up.


01:06:19.640 --> 01:06:21.360
Any final thoughts or anything you


01:06:21.360 --> 01:06:27.560
want to add to this before we get to the final two questions?


01:06:27.560 --> 01:06:30.040
>> No, thanks for having me on and sharing


01:06:30.040 --> 01:06:31.920
some discussion on PipX.


01:06:31.920 --> 01:06:32.680
>> Yeah, absolutely.


01:06:32.680 --> 01:06:33.720
It's a great tool.


01:06:33.720 --> 01:06:35.120
All right, final two questions.


01:06:35.120 --> 01:06:36.880
If you're going to write some Python code,


01:06:36.880 --> 01:06:40.280
if you're going to work on PipX or your terminal replicator


01:06:40.280 --> 01:06:44.440
or whatever you're doing, what editor are you using these days?


01:06:44.440 --> 01:06:45.480
I use VS Code.


01:06:45.480 --> 01:06:49.080
- Yeah, it sounds like Meta is pretty standardized on that.


01:06:49.080 --> 01:06:50.240
Is that right?


01:06:50.240 --> 01:06:52.920
- Yeah, that's our company wide editor.


01:06:52.920 --> 01:06:55.440
We do a lot of work on writing extensions for it


01:06:55.440 --> 01:06:58.360
and making it work for developers at Meta.


01:06:58.360 --> 01:06:59.640
- Yeah, cool.


01:06:59.640 --> 01:07:02.840
And then we've talked about a ton of PyPI packages,


01:07:02.840 --> 01:07:06.320
but one you want to give a particular shout out to?


01:07:06.320 --> 01:07:10.280
- Yeah, so this one is not PIPX installable,


01:07:10.280 --> 01:07:11.840
but I think it's super cool.


01:07:11.840 --> 01:07:13.220
MKDockStrings.


01:07:13.220 --> 01:07:18.220
And this is a way to generate documentation from your code.


01:07:18.220 --> 01:07:21.380
I think it's similar to Sphinx.


01:07:21.380 --> 01:07:22.860
I haven't really used Sphinx too much,


01:07:22.860 --> 01:07:26.580
but I find MKDocString is really user-friendly.


01:07:26.580 --> 01:07:28.100
It's all marked down.


01:07:28.100 --> 01:07:31.500
And I think it's really like a good looking UI


01:07:31.500 --> 01:07:34.900
that it generates for you.


01:07:34.900 --> 01:07:36.060
I think it's really easy to use


01:07:36.060 --> 01:07:38.580
and gives you a nice end result too.


01:07:38.580 --> 01:07:39.740
- Cool.


01:07:39.740 --> 01:07:41.340
Fantastic. Good recommendation.


01:07:42.620 --> 01:07:44.020
All right, final call to action.


01:07:44.020 --> 01:07:46.860
People want to play with PipX,


01:07:46.860 --> 01:07:49.820
develop Python apps that can be installed through PipX


01:07:49.820 --> 01:07:51.540
and so on, what do they do?


01:07:51.540 --> 01:07:52.740
How do they get started?


01:07:52.740 --> 01:07:56.420
- How do they get started developing apps for PipX?


01:07:56.420 --> 01:07:59.460
So you can use any of those tools


01:07:59.460 --> 01:08:02.180
to get a pyproject.toml file


01:08:02.180 --> 01:08:04.600
and have a publishable package


01:08:04.600 --> 01:08:08.020
and make sure you have a console script entry point.


01:08:08.020 --> 01:08:09.100
Really all you have to do


01:08:09.100 --> 01:08:11.660
is have a console script entry point for your package


01:08:11.660 --> 01:08:15.780
And then PipX will take care of it for you.


01:08:15.780 --> 01:08:17.420
- Yeah, it's worked with everything


01:08:17.420 --> 01:08:20.200
that I've tried it with, so it seems pretty solid.


01:08:20.200 --> 01:08:22.260
- Great, yeah.


01:08:22.260 --> 01:08:24.700
- Awesome, all right, well, thanks again for being here


01:08:24.700 --> 01:08:27.380
and for working on PipX, it's a great project.


01:08:27.380 --> 01:08:30.180
- All right, thanks a lot for having me.


01:08:30.180 --> 01:08:31.220
- Yeah, you bet, bye.

