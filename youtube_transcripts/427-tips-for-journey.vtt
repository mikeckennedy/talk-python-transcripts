WEBVTT

00:00:00.000 --> 00:00:02.800
- Hey, Eric. - Hi, Michael.


00:00:02.800 --> 00:00:05.600
Hey, everyone. How are you all doing out there?


00:00:05.600 --> 00:00:07.600
Thank you for being here.


00:00:07.600 --> 00:00:11.200
We're super excited to be part of kicking this off today.


00:00:11.200 --> 00:00:13.400
And if you're watching live,


00:00:13.400 --> 00:00:16.000
please put your comments and thoughts into the live stream.


00:00:16.000 --> 00:00:18.000
We'll try to make them part of the show if we can.


00:00:18.000 --> 00:00:20.400
And if you're watching the replay, well, no time travel,


00:00:20.400 --> 00:00:23.200
but also thanks for being here.


00:00:23.200 --> 00:00:28.000
All right. So with that, Eric, welcome to Talk Python to Me.


00:00:28.000 --> 00:00:30.000
Welcome to Talk Python to Me.


00:00:30.000 --> 00:00:32.000
Thank you. It's very nice to be here.


00:00:32.000 --> 00:00:34.000
It is very nice to have you here.


00:00:34.000 --> 00:00:36.000
The last time we were sitting around


00:00:36.000 --> 00:00:38.000
talking was at a


00:00:38.000 --> 00:00:40.000
beautiful cocktail bar at


00:00:40.000 --> 00:00:42.000
the tail end of PyCon


00:00:42.000 --> 00:00:44.000
2023 in Salt Lake City.


00:00:44.000 --> 00:00:46.000
Not a bad place to wrap that up.


00:00:46.000 --> 00:00:48.000
No, it was very nice.


00:00:48.000 --> 00:00:50.000
Yeah, so


00:00:50.000 --> 00:00:52.000
what a fun event.


00:00:52.000 --> 00:00:54.000
We're going to talk about


00:00:54.000 --> 00:00:56.000
how people go from


00:00:56.000 --> 00:00:58.960
from being a beginner-ish,


00:00:58.960 --> 00:01:02.660
that's a pretty broad term of what a beginner is


00:01:02.660 --> 00:01:04.260
in Python and programming,


00:01:04.260 --> 00:01:06.760
and sort of moving towards,


00:01:06.760 --> 00:01:08.760
how do you take that journey,


00:01:08.760 --> 00:01:12.960
maybe more deliberately, a little more quickly,


00:01:12.960 --> 00:01:16.760
to the expert side of the software developer spectrum?


00:01:16.760 --> 00:01:18.460
It's going to be a lot of fun.


00:01:18.460 --> 00:01:20.600
- Yes.


00:01:20.600 --> 00:01:23.800
- Yeah, and so before we get into that, though,


00:01:23.800 --> 00:01:25.600
let's just start with your story.


00:01:25.600 --> 00:01:27.880
How did you get into programming Python?


00:01:27.880 --> 00:01:29.400
How did you end up writing books?


00:01:29.400 --> 00:01:30.720
All those things.


00:01:30.720 --> 00:01:31.800
Oh, boy.


00:01:31.800 --> 00:01:33.760
I have to be careful because it's a long story


00:01:33.760 --> 00:01:35.800
and I like telling it.


00:01:35.800 --> 00:01:39.920
I was fortunate in that my father was a software engineer


00:01:39.920 --> 00:01:41.480
in the '70s and '80s.


00:01:41.480 --> 00:01:46.960
And so when I was growing up, we had a kit computer


00:01:46.960 --> 00:01:50.480
in our basement before most people had home computers.


00:01:50.480 --> 00:01:52.240
So I got to write my first program


00:01:52.240 --> 00:01:58.000
as a basic number guessing game.


00:01:58.000 --> 00:01:58.680
And--


00:01:58.680 --> 00:02:00.880
That's when it was all about the go-to's?


00:02:00.880 --> 00:02:01.680
Yes, line 10.


00:02:01.680 --> 00:02:03.120
Line 20, go to 10, all those.


00:02:03.120 --> 00:02:04.160
What is your number?


00:02:04.160 --> 00:02:06.320
Yeah.


00:02:06.320 --> 00:02:08.760
And so I always had an interest in programming.


00:02:08.760 --> 00:02:11.680
And so I got to watch in real time the development


00:02:11.680 --> 00:02:16.640
from basic to logo for teaching kids, to C, to Pascal,


00:02:16.640 --> 00:02:19.680
Fortran, and all that variety of languages


00:02:19.680 --> 00:02:21.640
that led up to Python.


00:02:21.640 --> 00:02:28.280
My journey into Python was I was using Java in the early 2000s.


00:02:28.280 --> 00:02:31.360
And I thought I'd be a Java programmer for life.


00:02:31.360 --> 00:02:33.960
And a friend told me that, hey, you should check out Python.


00:02:33.960 --> 00:02:36.680
Your Java programs would be about a third


00:02:36.680 --> 00:02:38.480
as long as they are--


00:02:38.480 --> 00:02:41.640
your programs would be about a third as long as they are in Java.


00:02:41.640 --> 00:02:43.840
And I couldn't really believe that because it's


00:02:43.840 --> 00:02:47.280
a pretty, pretty big claim.


00:02:47.280 --> 00:02:47.920
But I tried it.


00:02:47.920 --> 00:02:49.000
Yeah, that's a bold claim.


00:02:49.000 --> 00:02:50.240
Yeah, and it worked.


00:02:50.240 --> 00:02:51.160
And I was amazed.


00:02:51.160 --> 00:02:54.520
And people talk about this, but it was just plain fun.


00:02:54.520 --> 00:02:58.760
There was something more fun for me about writing Python code


00:02:58.760 --> 00:03:00.520
than Java.


00:03:00.520 --> 00:03:03.360
And I have never really looked back.


00:03:03.360 --> 00:03:05.200
That's a bit of an exaggeration.


00:03:05.200 --> 00:03:07.520
I do keep my eye out for other languages.


00:03:07.520 --> 00:03:09.360
I don't always assume that Python is always


00:03:09.360 --> 00:03:10.880
going to be the best for me.


00:03:10.880 --> 00:03:13.680
And I certainly use other languages as appropriate.


00:03:13.680 --> 00:03:15.320
But my core, I need to do something.


00:03:15.320 --> 00:03:17.820
I don't have a particular reason to choose another language.


00:03:17.820 --> 00:03:19.120
I do everything in Python.


00:03:19.120 --> 00:03:23.520
And yeah, I'm very similar in a lot of ways, actually.


00:03:23.520 --> 00:03:27.840
My background was in C# and C++, not Java.


00:03:27.840 --> 00:03:31.560
So a little bit different, but more similar than different,


00:03:31.560 --> 00:03:32.060
right?


00:03:32.060 --> 00:03:35.320
And I recall coming to Python thinking at first,


00:03:35.320 --> 00:03:37.160
like, it's kind of a weird--


00:03:37.160 --> 00:03:39.040
interesting, but weird language.


00:03:39.040 --> 00:03:40.520
It's whitespace stuff.


00:03:40.520 --> 00:03:41.040
I don't know.


00:03:41.040 --> 00:03:42.700
Curly braces are pretty tried and true.


00:03:42.700 --> 00:03:44.280
What are we doing with all this?


00:03:44.280 --> 00:03:51.320
And before I really became super comfortable with Python and just like, yeah, that looks at it feels,


00:03:51.320 --> 00:03:56.680
it feels great. It feels right from how I perceived programming should be. I went,


00:03:56.680 --> 00:04:01.480
worked with it for a while, went back and why are all these symbols on the page? Like,


00:04:01.480 --> 00:04:06.840
it's just in the way of reading. And, you know, I used to thought I had to have the parentheses


00:04:06.840 --> 00:04:10.360
on the if statement, but it turns out you don't. So why does this language make you write the


00:04:10.360 --> 00:04:12.080
the parentheses and all those things,


00:04:12.080 --> 00:04:13.980
you're just like, "What a hassle."


00:04:13.980 --> 00:04:15.240
Not even the static typing,


00:04:15.240 --> 00:04:20.160
just the syntax is more syntaxy.


00:04:20.160 --> 00:04:24.860
I'm interested in how your experience with that was.


00:04:24.860 --> 00:04:27.520
>> Yeah, I'm going to save that for a little bit because it's going


00:04:27.520 --> 00:04:30.440
to come up in one of the points that we go over.


00:04:30.440 --> 00:04:33.200
I'll share though that for my background,


00:04:33.200 --> 00:04:36.840
there's one of the big piece that plays into all this.


00:04:38.040 --> 00:04:41.640
I went into college, into undergrad,


00:04:41.640 --> 00:04:43.840
focused on chemical engineering


00:04:43.840 --> 00:04:46.800
because I had a really good chemistry teacher


00:04:46.800 --> 00:04:49.140
in high school and I thought I wanted to apply


00:04:49.140 --> 00:04:50.760
what I knew about chemistry.


00:04:50.760 --> 00:04:52.560
In my intro chemical engineering classes,


00:04:52.560 --> 00:04:55.440
we were doing problems about running nuclear power plants.


00:04:55.440 --> 00:04:56.380
And I was like, gosh,


00:04:56.380 --> 00:04:58.720
I don't wanna run a nuclear power plant.


00:04:58.720 --> 00:05:00.400
And I really enjoyed my physics classes


00:05:00.400 --> 00:05:01.960
because they were just playing about


00:05:01.960 --> 00:05:03.760
understanding how the world works.


00:05:03.760 --> 00:05:06.160
So I ended up doing an undergrad in physics


00:05:06.160 --> 00:05:10.320
And I tutored throughout undergrad


00:05:10.320 --> 00:05:13.500
because so many people struggled with math and science,


00:05:13.500 --> 00:05:16.680
the two subjects that I loved the most.


00:05:16.680 --> 00:05:20.400
And I found that most people who struggled,


00:05:20.400 --> 00:05:22.120
it was because of how they were taught,


00:05:22.120 --> 00:05:24.160
not the subject material itself.


00:05:24.160 --> 00:05:26.880
And so I got a strong interest in teaching


00:05:26.880 --> 00:05:28.640
and I wanted to be a particle physicist,


00:05:28.640 --> 00:05:30.600
but I didn't want to be a student forever


00:05:30.600 --> 00:05:32.680
and get on the PhD track right away.


00:05:32.680 --> 00:05:35.580
So I started teaching and I loved teaching.


00:05:35.580 --> 00:05:39.180
I found that the challenge of reaching every person


00:05:39.180 --> 00:05:44.180
in a classroom was as hard and satisfying as hard science.


00:05:44.180 --> 00:05:46.860
And so I just stayed in teaching.


00:05:46.860 --> 00:05:51.540
So I taught public school, fifth grade through high school


00:05:51.540 --> 00:05:52.940
for about 20 years.


00:05:52.940 --> 00:05:57.460
And I was a hobbyist programmer throughout all of that.


00:05:57.460 --> 00:06:00.400
And so I taught intro programming classes whenever I could.


00:06:00.400 --> 00:06:04.660
And in the early 2010s-ish, I was looking for a Python book


00:06:04.660 --> 00:06:06.980
that I could give my more motivated students


00:06:06.980 --> 00:06:08.380
and just kind of stand on the sidelines


00:06:08.380 --> 00:06:10.140
and answer their questions,


00:06:10.140 --> 00:06:11.460
let them go at their own pace,


00:06:11.460 --> 00:06:14.460
but everything either made too many assumptions


00:06:14.460 --> 00:06:16.020
about what you already knew,


00:06:16.020 --> 00:06:19.500
or it was written for kids and kind of spoke down to you.


00:06:19.500 --> 00:06:21.900
And so that's how I ended up writing a book


00:06:21.900 --> 00:06:25.780
'cause the book I wished to teach from did not exist.


00:06:25.780 --> 00:06:27.180
- Yeah.


00:06:27.180 --> 00:06:28.900
Sure know how that feels.


00:06:28.900 --> 00:06:29.820
- Yeah, yeah.


00:06:29.820 --> 00:06:30.780
- What's the title of the book?


00:06:30.780 --> 00:06:32.580
Share that with everyone.


00:06:32.580 --> 00:06:35.060
That is Python Crash Course.


00:06:35.060 --> 00:06:36.500
No starch, right?


00:06:36.500 --> 00:06:39.540
Yes, from no starch.


00:06:39.540 --> 00:06:42.980
And it's been the best-selling introduction--


00:06:42.980 --> 00:06:45.300
it's been the best-selling Python book for close


00:06:45.300 --> 00:06:48.660
to 10 years now, which is really satisfying,


00:06:48.660 --> 00:06:51.340
because I kind of had a 10-year vision.


00:06:51.340 --> 00:06:52.940
I had the naive notion that I could


00:06:52.940 --> 00:06:58.060
write a book in the summertime and then revise it


00:06:58.060 --> 00:07:00.300
during the school year, and it would be done.


00:07:00.300 --> 00:07:04.460
And it was two and a half years instead of that.


00:07:04.460 --> 00:07:05.820
So I had a 10-year vision.


00:07:05.820 --> 00:07:07.580
I thought, if I want to do all this work,


00:07:07.580 --> 00:07:11.020
then I should support the book for a 10-year period.


00:07:11.020 --> 00:07:13.820
And so it's been very satisfying to see it


00:07:13.820 --> 00:07:16.420
be meaningful to so many people over that time.


00:07:16.420 --> 00:07:17.620
But that's really awesome.


00:07:17.620 --> 00:07:20.780
So your book is in LTS, long-term support?


00:07:20.780 --> 00:07:21.280
Yeah.


00:07:21.280 --> 00:07:22.020
Say that again?


00:07:22.020 --> 00:07:25.340
It's an LTS release of the book, a long-term support, right?


00:07:25.340 --> 00:07:27.980
Not one of those off-brand releases.


00:07:27.980 --> 00:07:29.500
Right, right.


00:07:29.500 --> 00:07:30.000
Yeah.


00:07:30.000 --> 00:07:31.200
- No, that's really great.


00:07:31.200 --> 00:07:33.800
And it's cool to connect with so many people.


00:07:33.800 --> 00:07:36.600
You probably go to PyCon and other events


00:07:36.600 --> 00:07:38.560
and people are like, "Oh, I read your book."


00:07:38.560 --> 00:07:41.760
And they really probably have stories to tell you about it.


00:07:41.760 --> 00:07:43.200
- Yeah, it was amazing.


00:07:43.200 --> 00:07:45.440
You go to PyCon or any of these conferences


00:07:45.440 --> 00:07:46.840
and you see a bunch of booths


00:07:46.840 --> 00:07:50.000
with people hiring or selling something.


00:07:50.000 --> 00:07:51.120
And I used to go to those booths


00:07:51.120 --> 00:07:53.880
and just have conversations.


00:07:53.880 --> 00:07:57.520
And a year or two after the book came out,


00:07:57.520 --> 00:07:58.520
those people started telling me,


00:07:58.520 --> 00:08:00.760
"Oh, hey, I learned Python from your book."


00:08:00.760 --> 00:08:03.480
And I was amazed at how quickly people could learn Python


00:08:03.480 --> 00:08:07.640
and then start to work at these companies and organizations.


00:08:07.640 --> 00:08:10.360
- Yeah, yeah, it's interesting.


00:08:10.360 --> 00:08:11.800
So they learn Python through your book


00:08:11.800 --> 00:08:14.480
and now they're working at Bloomberg or whatever,


00:08:14.480 --> 00:08:16.040
and now they're talking to you through these booths.


00:08:16.040 --> 00:08:17.040
Interesting, got it.


00:08:17.040 --> 00:08:18.880
Yeah, right in the audience.


00:08:18.880 --> 00:08:19.720
- Yeah, and as a teacher.


00:08:19.720 --> 00:08:20.560
- A person who says,


00:08:20.560 --> 00:08:22.840
"I'm glad to say I've read that book


00:08:22.840 --> 00:08:24.240
"and learned a lot from it."


00:08:24.240 --> 00:08:25.080
Yeah, very cool.


00:08:25.080 --> 00:08:27.760
- Yeah, yeah, I'm glad I worked for you.


00:08:27.760 --> 00:08:37.360
Yeah, I was going to say, as a teacher, yeah, I have always been happy for my students to


00:08:37.360 --> 00:08:40.800
end up better at whatever I introduce them to than I am.


00:08:40.800 --> 00:08:45.320
My focus has been on teaching for a long time, and so I learn my subject well enough to be


00:08:45.320 --> 00:08:47.960
able to do whatever I need to with them.


00:08:47.960 --> 00:08:52.400
But anybody who chooses to focus on one area over a lifetime is going to be better than


00:08:52.400 --> 00:08:53.580
I am at it.


00:08:53.580 --> 00:08:56.860
And so meeting those people at the booths who are honestly now


00:08:56.860 --> 00:08:58.660
probably better programmers or certainly


00:08:58.660 --> 00:09:02.700
within their discipline than I am, it's a privilege.


00:09:02.700 --> 00:09:03.300
Yeah.


00:09:03.300 --> 00:09:06.580
So along this idea of how do you go from beginner just starting


00:09:06.580 --> 00:09:11.220
Python to whatever we call intermediate or advanced


00:09:11.220 --> 00:09:14.740
or expert, it's an interesting topic.


00:09:14.740 --> 00:09:17.780
And I think it's one that really deserves some attention.


00:09:17.780 --> 00:09:18.740
I think it does, too.


00:09:18.740 --> 00:09:21.900
I think I hear it so many times from beginners.


00:09:21.900 --> 00:09:25.260
like I'm learning the language,


00:09:25.260 --> 00:09:27.780
or I'm learning this, or I'm learning that.


00:09:27.780 --> 00:09:32.740
Now, I just don't really know what to do to keep making progress.


00:09:32.740 --> 00:09:39.020
You mentioned your situation where you are a hobbyist programmer to some degree,


00:09:39.020 --> 00:09:42.020
and you just compared it against people who are maybe


00:09:42.020 --> 00:09:46.500
scaling out some DevOps thing at a huge tech company.


00:09:46.500 --> 00:09:51.540
Those are really different ways you spend your day.


00:09:51.540 --> 00:09:55.300
as a hobbyist programmer, you have something you're interested in,


00:09:55.300 --> 00:09:58.060
maybe you poke at it a little bit, you work at it,


00:09:58.060 --> 00:10:04.380
but you don't have the real demands of it's got to work at this crazy scale.


00:10:04.380 --> 00:10:11.380
Also, that it's something you can focus your entire effort on all day,


00:10:11.380 --> 00:10:17.580
because you're teaching or you're doing other things besides that as a hobbyist.


00:10:18.180 --> 00:10:26.740
Yeah, and I think that when we label ourselves or others, beginner, intermediate, expert,


00:10:26.740 --> 00:10:31.980
beginner is the one label that is objective, or I've never programmed before, I'm a beginner,


00:10:31.980 --> 00:10:34.460
or I have never used Python, so I'm a beginner at Python.


00:10:34.460 --> 00:10:37.620
Although even that, if you're experienced in another language, it's hard to call yourself


00:10:37.620 --> 00:10:40.460
a beginner again.


00:10:40.460 --> 00:10:47.700
And then when I've looked at, say, intermediate resources, it's a hard world to classify and


00:10:47.700 --> 00:10:50.060
categorize because what is intermediate?


00:10:50.060 --> 00:10:54.380
I think it's good to recognize that in the early days of a language,


00:10:54.380 --> 00:10:58.460
say like mid '90s to 2000 for Python,


00:10:58.460 --> 00:11:00.660
the language was small enough that somebody could


00:11:00.660 --> 00:11:02.940
call themselves an expert at some point.


00:11:02.940 --> 00:11:05.180
I know everything that there is in Python.


00:11:05.180 --> 00:11:09.680
A language is so big and the ecosystem is so huge and it covers so many domains,


00:11:09.680 --> 00:11:11.620
that it's hard for anybody to


00:11:11.620 --> 00:11:14.740
objectively call themselves an expert in Python.


00:11:14.740 --> 00:11:16.180
What does that even mean?


00:11:16.180 --> 00:11:17.420
And so it really is about--


00:11:17.420 --> 00:11:19.140
>> Relative statement, yeah.


00:11:19.140 --> 00:11:20.380
>> How do you get out of those,


00:11:20.380 --> 00:11:22.940
I'm just learning the language and now I'm using it.


00:11:22.940 --> 00:11:28.020
That evaluation is interesting.


00:11:28.020 --> 00:11:28.860
>> Yeah, it is.


00:11:28.860 --> 00:11:30.600
And I think one, you know,


00:11:30.600 --> 00:11:35.180
it's a good point you bring up about when Python was smaller.


00:11:35.180 --> 00:11:37.820
There's this t-shirt that was a joke.


00:11:37.820 --> 00:11:40.260
It says, "I learned Python, it was a good weekend."


00:11:40.260 --> 00:11:41.540
You know?


00:11:41.540 --> 00:11:45.260
Which there's a truth to that and it's also cute.


00:11:45.260 --> 00:11:47.940
But at the same time, I've been doing this for many years


00:11:47.940 --> 00:11:51.540
and I'm still learning Python all the time, right?


00:11:51.540 --> 00:11:52.380
- Yes.


00:11:52.380 --> 00:11:54.020
- And so how do you square those two things?


00:11:54.020 --> 00:11:55.580
How can those both be true?


00:11:55.580 --> 00:12:00.220
And part of what that, the difference is,


00:12:00.220 --> 00:12:02.340
that's not obvious, I think, to beginners,


00:12:02.340 --> 00:12:04.380
but it's obvious to you.


00:12:04.380 --> 00:12:07.860
When that person said, "I learned Python,


00:12:07.860 --> 00:12:08.780
"it was a good weekend,"


00:12:08.780 --> 00:12:11.420
they meant they rocked the for loop.


00:12:11.420 --> 00:12:14.280
They can create a class and they can create a function.


00:12:14.280 --> 00:12:16.920
You know, that's, they can do if statements


00:12:16.920 --> 00:12:20.120
and they now write and instead of double ampersand.


00:12:20.120 --> 00:12:23.960
That is one interpretation of what Python is.


00:12:23.960 --> 00:12:26.280
But then you look at PyPI with its,


00:12:26.280 --> 00:12:29.360
I haven't read the numbers in a few weeks or something,


00:12:29.360 --> 00:12:31.480
but it's close to half million packages.


00:12:31.480 --> 00:12:36.480
If you completely, truly learned a new package every day,


00:12:36.480 --> 00:12:40.320
you're still falling behind, right?


00:12:40.320 --> 00:12:43.080
Continuously, every day, just nonstop


00:12:43.080 --> 00:12:43.920
for the rest of your life, you're like,


00:12:43.920 --> 00:12:47.540
"Ah, I'm more behind than I started 20 years ago,"


00:12:47.540 --> 00:12:49.100
right, in a sense.


00:12:49.100 --> 00:12:51.340
And so what is Python?


00:12:51.340 --> 00:12:55.280
I think when people say, "I want to be good at Python,


00:12:55.280 --> 00:12:58.460
"I want to learn Python, I want to be an expert in Python,"


00:12:58.460 --> 00:13:01.820
you need to understand that there are these different layers


00:13:01.820 --> 00:13:04.820
or tiers of what that means.


00:13:04.820 --> 00:13:09.120
And you can be focused on one or another,


00:13:09.120 --> 00:13:12.100
but when people are comparing,


00:13:12.100 --> 00:13:14.200
like I've done this much and I've got,


00:13:14.200 --> 00:13:15.380
I'm an expert at Python.


00:13:15.380 --> 00:13:16.840
Like, well, are you an expert at the language?


00:13:16.840 --> 00:13:18.500
Are you an expert in FastAPI?


00:13:18.500 --> 00:13:20.020
What are you an expert in?


00:13:20.020 --> 00:13:22.720
Right, and so I think just kind of setting the stage


00:13:22.720 --> 00:13:25.420
with there's different meanings


00:13:25.420 --> 00:13:28.480
to what I'm good at Python is.


00:13:28.480 --> 00:13:30.460
- Yeah, and I'll say right now


00:13:30.460 --> 00:13:33.960
that I have a hard time classifying myself.


00:13:33.960 --> 00:13:35.460
I'm definitely not a beginner.


00:13:35.460 --> 00:13:39.240
I wouldn't necessarily call myself an expert,


00:13:39.240 --> 00:13:41.700
but I don't even know about intermediate.


00:13:41.700 --> 00:13:42.540
- Yeah.


00:13:42.540 --> 00:13:44.700
- Somewhere between intermediate and expert.


00:13:44.700 --> 00:13:48.300
And I've been writing a weekly newsletter at Mostly Python.


00:13:48.300 --> 00:13:49.460
It's on Substack.


00:13:49.460 --> 00:13:53.100
And I started writing a newsletter


00:13:53.100 --> 00:13:55.700
because I wanted to get out of that LTS


00:13:55.700 --> 00:13:57.460
you were mentioning about the book,


00:13:57.460 --> 00:13:59.620
where all my writing is about a book.


00:13:59.620 --> 00:14:01.720
It's always about the same material.


00:14:01.720 --> 00:14:03.540
And so writing a weekly newsletter


00:14:03.540 --> 00:14:06.040
forces me to pick a topic each week


00:14:06.040 --> 00:14:08.220
and then be able to explain that well.


00:14:08.220 --> 00:14:09.760
And I think a lot of people think


00:14:09.760 --> 00:14:12.960
that somebody in my position just knows all this stuff


00:14:12.960 --> 00:14:15.040
and just writes something up each week.


00:14:15.040 --> 00:14:17.240
And really, it's a whole bunch of research every time


00:14:17.240 --> 00:14:18.680
because there's nooks and crannies


00:14:18.680 --> 00:14:20.720
around every topic in Python that I


00:14:20.720 --> 00:14:23.880
didn't know about after 20 years in the language.


00:14:23.880 --> 00:14:28.280
And it's really enjoyable to fill out that understanding


00:14:28.280 --> 00:14:30.680
and then explain it well to other people.


00:14:30.680 --> 00:14:32.200
Yeah, it really is.


00:14:32.200 --> 00:14:34.000
Maybe final thought on this.


00:14:34.000 --> 00:14:37.520
Tony out there points out and says,


00:14:37.520 --> 00:14:38.680
adding on to what we were saying,


00:14:38.680 --> 00:14:40.840
and an expert in Python for data science


00:14:40.840 --> 00:14:42.360
doesn't necessarily look like an expert


00:14:42.360 --> 00:14:44.400
in Python for web and so on.


00:14:44.400 --> 00:14:47.160
Yeah, I was gonna add basically something similar


00:14:47.160 --> 00:14:52.160
that I would consider myself an expert in web development


00:14:52.160 --> 00:14:57.040
and API stuff and those kinds of things, right?


00:14:57.040 --> 00:15:01.200
I've been running production Python apps for a long time


00:15:01.200 --> 00:15:03.240
and really just polishing them,


00:15:03.240 --> 00:15:07.560
but put me in front of some machine learning situation


00:15:07.560 --> 00:15:10.920
or too much advanced pandas,


00:15:10.920 --> 00:15:13.640
and I'm like, well, I'm a beginner over here.


00:15:13.640 --> 00:15:15.480
And those are both also called Python, right?


00:15:15.480 --> 00:15:17.640
So there's just this,


00:15:17.640 --> 00:15:21.960
all these different contexts and spheres of relevance


00:15:21.960 --> 00:15:24.720
that I think people gotta keep in mind, right?


00:15:24.720 --> 00:15:26.720
And it's probably good to hear them say,


00:15:26.720 --> 00:15:29.580
you're an expert in some things,


00:15:29.580 --> 00:15:32.500
but it's not like you just know it all, right?


00:15:32.500 --> 00:15:39.840
>> Right. Yeah. It's good to recognize that expertise in one area is oftentimes transferable.


00:15:39.840 --> 00:15:46.260
You aren't immediately an expert in the new domain, but what you've learned in one domain


00:15:46.260 --> 00:15:50.220
is oftentimes makes it easier to gain expertise in another one.


00:15:50.220 --> 00:15:55.500
>> Absolutely. Like if the data science side, right? You're still good at Git. That's not


00:15:55.500 --> 00:15:58.740
a new thing for you, right? You're not like, "Why? What is this source control thing?"


00:15:58.740 --> 00:16:00.160
You can still completely rock that,


00:16:00.160 --> 00:16:04.780
but maybe you're not embracing the vectorization


00:16:04.780 --> 00:16:06.800
of style of programming and so on.


00:16:06.800 --> 00:16:10.200
All right, so maybe this is a good time


00:16:10.200 --> 00:16:12.720
to start talking about the ideas.


00:16:12.720 --> 00:16:17.040
So what I did is I said, Eric, you've got this cool book.


00:16:17.040 --> 00:16:20.820
How about you try to extract some ideas


00:16:20.820 --> 00:16:22.380
that you've learned from writing the book


00:16:22.380 --> 00:16:24.980
and working with people for this whole topic


00:16:24.980 --> 00:16:26.780
of transitioning from beginners


00:16:26.780 --> 00:16:29.620
towards the expert side of programming.


00:16:29.620 --> 00:16:33.580
So let's go to the list.


00:16:33.580 --> 00:16:34.420
- Sure.


00:16:34.420 --> 00:16:37.140
First of all, I like that structuring.


00:16:37.140 --> 00:16:38.740
It kind of forced me to think specifically


00:16:38.740 --> 00:16:40.900
about what I can say.


00:16:40.900 --> 00:16:43.440
I want to clarify, this isn't a countdown.


00:16:43.440 --> 00:16:44.620
A lot of times lists are like,


00:16:44.620 --> 00:16:47.840
here's the top 10 things you should know about Python.


00:16:47.840 --> 00:16:50.340
So these are ideas for specific things


00:16:50.340 --> 00:16:52.140
that people can do to move away


00:16:52.140 --> 00:16:54.460
from wherever you were as a beginner


00:16:54.460 --> 00:16:56.700
and more into that intermediate and expert,


00:16:56.700 --> 00:16:59.580
and be comfortable with justifying that.


00:16:59.580 --> 00:17:03.780
So for this kind of list,


00:17:03.780 --> 00:17:05.740
I start with the most important things first


00:17:05.740 --> 00:17:07.780
because everything else builds on that.


00:17:07.780 --> 00:17:11.100
And so when I think about what do people need to do


00:17:11.100 --> 00:17:14.900
to move away from beginner and towards being fluent


00:17:14.900 --> 00:17:16.740
and comfortable and competent


00:17:16.740 --> 00:17:19.060
and able to solve a variety of problems,


00:17:19.060 --> 00:17:22.380
the first thing is, when you're learning, know your goals.


00:17:22.380 --> 00:17:24.060
Why are you learning a program?


00:17:24.060 --> 00:17:26.560
And so we see this all the time if you follow conversations


00:17:26.560 --> 00:17:27.640
about learning Python.


00:17:27.640 --> 00:17:28.980
I want to learn Python.


00:17:28.980 --> 00:17:31.320
OK, what should I focus on?


00:17:31.320 --> 00:17:32.660
Well, what are your goals?


00:17:32.660 --> 00:17:33.660
Why are you learning it?


00:17:33.660 --> 00:17:34.860
What do you want to do?


00:17:34.860 --> 00:17:38.260
And I think the answers to that tend to be,


00:17:38.260 --> 00:17:39.580
I just like programming.


00:17:39.580 --> 00:17:40.180
I'm curious.


00:17:40.180 --> 00:17:45.260
For a lot of people, it is about money.


00:17:45.260 --> 00:17:48.940
People know that software development jobs can pay well.


00:17:48.940 --> 00:17:52.180
And I think it's quite appropriate and reasonable


00:17:52.180 --> 00:17:55.300
and important to name that if that is one of your goals


00:17:55.300 --> 00:17:56.780
and there's nothing wrong with that.


00:17:56.780 --> 00:17:59.340
- Right, it could be career but not money


00:17:59.340 --> 00:18:02.620
in the sense that I have a decent paying job now


00:18:02.620 --> 00:18:03.860
but I don't like my job.


00:18:03.860 --> 00:18:05.500
If I could just have the same money


00:18:05.500 --> 00:18:08.060
but actually work on programming all day,


00:18:08.060 --> 00:18:10.380
that would be awesome, right?


00:18:10.380 --> 00:18:11.700
- Yes.


00:18:11.700 --> 00:18:15.180
I think the money thing comes up for me because,


00:18:15.180 --> 00:18:18.300
all right, I'll say one of the things I'm proud of


00:18:18.300 --> 00:18:20.740
as an author is I've replied to pretty much


00:18:20.740 --> 00:18:23.340
every single email anybody has ever written to me


00:18:23.340 --> 00:18:24.660
about the book.


00:18:24.660 --> 00:18:27.360
And I think that's part of why the book has done well.


00:18:27.360 --> 00:18:31.220
Because I notice, I look for patterns.


00:18:31.220 --> 00:18:33.080
And so if people start to write about the same thing,


00:18:33.080 --> 00:18:36.700
then I adjust the book a little bit to address that.


00:18:36.700 --> 00:18:39.180
And so it keeps my email volume reasonable,


00:18:39.180 --> 00:18:42.380
but also means it's still meeting the needs of readers.


00:18:42.380 --> 00:18:44.620
But it also means I've had interactions


00:18:44.620 --> 00:18:45.920
with thousands of readers.


00:18:45.920 --> 00:18:47.680
And one of the things that comes up,


00:18:47.680 --> 00:18:49.540
in anything that goes beyond a,


00:18:49.540 --> 00:18:54.340
can you help me fix this one problem?" I oftentimes ask like, "What are you learning this for? What's


00:18:54.340 --> 00:19:00.980
your story?" And a lot of those people are doing career transitions. And it's a mix of


00:19:00.980 --> 00:19:05.620
people looking for better pay, and oftentimes that's tied in with to support my family,


00:19:05.620 --> 00:19:11.940
those larger life decisions other than just, you know, it's never greed. It's never, "I want to be


00:19:11.940 --> 00:19:18.340
rich." It's always, "I want to live a reasonable life." And what you say, people being tired of a


00:19:18.340 --> 00:19:20.980
of a different line of work and looking for something


00:19:20.980 --> 00:19:23.800
where they can have more power, more independence,


00:19:23.800 --> 00:19:25.540
more control.


00:19:25.540 --> 00:19:29.780
And so when you say know your goals, for most people,


00:19:29.780 --> 00:19:31.380
their goals is not one goal.


00:19:31.380 --> 00:19:33.780
It's a balance of those and recognizing


00:19:33.780 --> 00:19:36.220
where your balance sits is really important


00:19:36.220 --> 00:19:40.380
because it guides the rest of your learning and what you do.


00:19:40.380 --> 00:19:42.420
Somebody who's just plain curious.


00:19:42.420 --> 00:19:43.460
Go ahead, sorry.


00:19:43.460 --> 00:19:48.460
Well, yeah, and I think when we're talking about beginners,


00:19:48.460 --> 00:19:51.620
there's a lot of people who get pulled into Python


00:19:51.620 --> 00:19:57.060
without an explicit intent of becoming a software developer.


00:19:57.060 --> 00:19:59.540
In fact, like they would maybe start out by saying,


00:19:59.540 --> 00:20:01.220
"I don't wanna be a software developer.


00:20:01.220 --> 00:20:03.800
"I'm a biologist, I'm an economist,


00:20:03.800 --> 00:20:06.820
"I'm a philosopher," or whatever,


00:20:06.820 --> 00:20:09.020
but I need a little bit of programming


00:20:09.020 --> 00:20:12.300
because I learned that if I do these six lines of Python,


00:20:12.300 --> 00:20:15.160
like magic happens way better than if I had to force it


00:20:15.160 --> 00:20:16.420
through Excel or something, right?


00:20:16.420 --> 00:20:20.480
And I think a lot of the beginners are in that realm of,


00:20:20.480 --> 00:20:23.040
like, well, I'm here now.


00:20:23.040 --> 00:20:24.360
I'm still not a programmer.


00:20:24.360 --> 00:20:25.520
Don't call me one of those,


00:20:25.520 --> 00:20:28.440
but I use programming for my thing.


00:20:28.440 --> 00:20:31.640
And that's also a pretty interesting angle, I think.


00:20:31.640 --> 00:20:34.560
- Yeah, and I think that's a really, really good thing


00:20:34.560 --> 00:20:35.760
for people to recognize.


00:20:35.760 --> 00:20:40.160
It's interesting to have this conversation about labels


00:20:40.160 --> 00:20:42.040
and beginners and intermediate,


00:20:42.040 --> 00:20:46.380
Because how do you know when you're no longer a beginner?


00:20:46.380 --> 00:20:48.520
One of the clearest signs is when


00:20:48.520 --> 00:20:52.520
you have used programming to solve a real problem


00:20:52.520 --> 00:20:53.960
that you have.


00:20:53.960 --> 00:20:57.320
And you can throw in with a level of understanding


00:20:57.320 --> 00:20:59.380
rather than copy-pasting.


00:20:59.380 --> 00:21:00.800
But for a lot of people--


00:21:00.800 --> 00:21:03.200
[INTERPOSING VOICES]


00:21:03.200 --> 00:21:04.040
Yeah.


00:21:04.040 --> 00:21:06.800
Yeah, and that's a super interesting dynamic


00:21:06.800 --> 00:21:09.680
to throw into all of this.


00:21:09.680 --> 00:21:11.160
But that is the end goal.


00:21:11.160 --> 00:21:12.860
should be the end goal for most people,


00:21:12.860 --> 00:21:15.180
not just to know how programming works,


00:21:15.180 --> 00:21:17.760
but to use it to solve a real world problem


00:21:17.760 --> 00:21:20.540
that you or somebody else has.


00:21:20.540 --> 00:21:22.420
And so as soon as you're doing that,


00:21:22.420 --> 00:21:24.100
you can start to consider yourself moving out


00:21:24.100 --> 00:21:26.420
of the beginner place.


00:21:26.420 --> 00:21:29.820
- Yeah, you might still feel awkward, but you're doing it.


00:21:29.820 --> 00:21:31.340
Really interesting comment


00:21:31.340 --> 00:21:32.580
that I think is worth highlighting.


00:21:32.580 --> 00:21:36.020
Foxo says, "I'm an anesthesiologist


00:21:36.020 --> 00:21:37.620
and you cannot imagine how much Python


00:21:37.620 --> 00:21:38.820
has helped me with different tasks."


00:21:38.820 --> 00:21:39.660
Amazing.


00:21:40.620 --> 00:21:41.460
That's really cool.


00:21:41.460 --> 00:21:42.720
Thank you for sharing that.


00:21:42.720 --> 00:21:43.800
- Yep.


00:21:43.800 --> 00:21:45.560
- Yeah, yeah, yeah.


00:21:45.560 --> 00:21:48.960
Okay, so tip number one, know your goals.


00:21:48.960 --> 00:21:50.440
Like why are you here?


00:21:50.440 --> 00:21:53.780
Because that'll help guide you somewhat, yes?


00:21:53.780 --> 00:21:58.160
- Yes, I'm taking a few notes about throwing things


00:21:58.160 --> 00:22:00.960
in there later in the list.


00:22:00.960 --> 00:22:03.120
- All right, beautiful, all right.


00:22:03.120 --> 00:22:06.320
I agree, I think it's important to know your goals


00:22:06.320 --> 00:22:09.560
and there's a lot of reasons why people get


00:22:09.560 --> 00:22:11.840
into programming, right?


00:22:11.840 --> 00:22:13.080
So--


00:22:13.080 --> 00:22:16.560
Yeah, last thing on that is if somebody is just plain curious


00:22:16.560 --> 00:22:18.800
as far as teaching and learning, if somebody is just plain


00:22:18.800 --> 00:22:20.520
curious, that's their main goal, you


00:22:20.520 --> 00:22:22.840
have a lot more flexibility in the examples


00:22:22.840 --> 00:22:26.060
that you present to them and the pace at which you present


00:22:26.060 --> 00:22:28.200
material as opposed to somebody who says,


00:22:28.200 --> 00:22:31.200
I really want to do a career transition as soon as possible.


00:22:31.200 --> 00:22:35.480
That person needs a much more grounded and practical


00:22:35.480 --> 00:22:37.160
and timely approach.


00:22:37.160 --> 00:22:39.320
- Well, and you also might look out and say,


00:22:39.320 --> 00:22:44.240
okay, what web framework do I need to choose?


00:22:44.240 --> 00:22:46.640
What database experience do I need to get?


00:22:46.640 --> 00:22:49.800
Because I'm looking at Indeed job listings


00:22:49.800 --> 00:22:52.580
and I'm trying to hit the largest set of those


00:22:52.580 --> 00:22:56.380
rather than what project am I trying to work on


00:22:56.380 --> 00:22:57.480
or what am I curious about?


00:22:57.480 --> 00:23:00.000
You're like, I need to start checking the big boxes.


00:23:00.000 --> 00:23:02.800
Let's check those boxes so I can get a job in six weeks.


00:23:02.800 --> 00:23:05.000
- Yep.


00:23:06.000 --> 00:23:08.920
All right, tip number two.


00:23:08.920 --> 00:23:09.920
Yeah, tip number two.


00:23:09.920 --> 00:23:11.520
What do you got?


00:23:11.520 --> 00:23:14.200
Have a project in mind.


00:23:14.200 --> 00:23:17.760
And so whatever your goals are, having a specific project


00:23:17.760 --> 00:23:21.520
in mind helps put everything else in context.


00:23:21.520 --> 00:23:27.400
If you are learning about a for loop and you have a project--


00:23:27.400 --> 00:23:30.560
I'm going to name one of the projects that I've worked on.


00:23:30.560 --> 00:23:32.360
I live in Southeast Alaska.


00:23:32.360 --> 00:23:34.200
And one of the impacts of climate change


00:23:34.200 --> 00:23:38.880
here is an increasing frequency and severity of landslides.


00:23:38.880 --> 00:23:42.980
And so Southeast Alaska is a rainforest.


00:23:42.980 --> 00:23:44.960
For anybody who isn't aware of that,


00:23:44.960 --> 00:23:46.760
it's not all snow in Southeast because we're


00:23:46.760 --> 00:23:48.520
right next to the ocean.


00:23:48.520 --> 00:23:51.640
And so we're still getting as much rain as we always have.


00:23:51.640 --> 00:23:55.320
But it's coming-- instead of light rain


00:23:55.320 --> 00:23:57.480
throughout the year with some periods of heavy rain,


00:23:57.480 --> 00:23:59.640
we're getting a lot more nice weather.


00:23:59.640 --> 00:24:02.160
We just had two or three weeks of no rain,


00:24:02.160 --> 00:24:05.120
which was really unusual here.


00:24:05.120 --> 00:24:07.160
But we'll get heavier fall storms.


00:24:07.160 --> 00:24:12.680
And that can lead to landslides.


00:24:12.680 --> 00:24:19.880
And so I had a project that monitored a local river's level


00:24:19.880 --> 00:24:21.840
to correlate that with landslide risk


00:24:21.840 --> 00:24:25.200
and help develop a warning system.


00:24:25.200 --> 00:24:30.040
And so a project like that in mind, that's a big project.


00:24:30.040 --> 00:24:32.500
And so if somebody is just learning Python,


00:24:32.500 --> 00:24:33.960
it's hard to say, here's everything


00:24:33.960 --> 00:24:35.760
you need to know to build that project.


00:24:35.760 --> 00:24:37.220
But if you're teaching a for loop,


00:24:37.220 --> 00:24:40.340
and you know that somebody is interested in a project


00:24:40.340 --> 00:24:42.520
about monitoring climate, then you


00:24:42.520 --> 00:24:45.160
can make your for loops about processing data related


00:24:45.160 --> 00:24:48.080
to rainfall, river levels, things like that.


00:24:48.080 --> 00:24:49.340
Yeah, absolutely.


00:24:49.340 --> 00:24:52.800
And Python is really interesting in that it's pretty good


00:24:52.800 --> 00:24:56.880
at the IoT thing as well, which opens up a lot of--


00:24:56.880 --> 00:25:00.720
We've got CircuitPython and Adafruit and all those areas


00:25:00.720 --> 00:25:05.280
to play with as well, which is a whole different kind of project.


00:25:05.280 --> 00:25:06.440
Yeah.


00:25:06.440 --> 00:25:08.960
Yeah, and so there's an infinite number of projects.


00:25:08.960 --> 00:25:13.640
And so if you have a project in mind,


00:25:13.640 --> 00:25:15.240
being clear about that with yourself


00:25:15.240 --> 00:25:18.120
and with anybody that you're learning with or from


00:25:18.120 --> 00:25:21.240
is really helpful as far as tailoring what you're


00:25:21.240 --> 00:25:24.360
learning to your purposes.


00:25:24.360 --> 00:25:29.160
It's always easier to teach somebody--


00:25:29.160 --> 00:25:30.600
sorry, I'll finish that.


00:25:30.600 --> 00:25:32.060
It's always easier to teach somebody


00:25:32.060 --> 00:25:36.800
who has a specific goal in mind than somebody who is just vague,


00:25:36.800 --> 00:25:38.240
just teach me something.


00:25:38.240 --> 00:25:40.400
Yeah, well, because it's focused.


00:25:40.400 --> 00:25:40.900
Yeah.


00:25:40.900 --> 00:25:41.880
Right?


00:25:41.880 --> 00:25:45.440
I find a lot of people try to boil the ocean metaphorically


00:25:45.440 --> 00:25:47.360
when they're trying to learn these things.


00:25:47.360 --> 00:25:49.240
Like, well, I saw somebody saying,


00:25:49.240 --> 00:25:51.600
well, all these CS topics are really hard for me.


00:25:51.600 --> 00:25:56.800
People keep telling me all these CS things I need to know.


00:25:56.800 --> 00:25:58.440
And do I really need to know them?


00:25:58.440 --> 00:26:03.760
Well, maybe eventually, but not all at once.


00:26:03.760 --> 00:26:05.480
What are you doing now?


00:26:05.480 --> 00:26:08.120
How big is your program?


00:26:08.120 --> 00:26:09.440
Do you really need testing?


00:26:09.440 --> 00:26:10.520
Maybe you do, maybe you don't.


00:26:10.520 --> 00:26:11.720
Do you really need classes?


00:26:11.720 --> 00:26:13.400
Maybe you do, maybe you don't.


00:26:13.400 --> 00:26:14.240
Do you need generators?


00:26:14.240 --> 00:26:15.360
Do you need async?


00:26:15.360 --> 00:26:17.600
There's all these things that you probably could say,


00:26:17.600 --> 00:26:18.680
don't need them now.


00:26:18.680 --> 00:26:21.160
Maybe in a year or two, I will need them.


00:26:21.160 --> 00:26:24.040
and then I'll be motivated to learn them.


00:26:24.040 --> 00:26:26.020
And so when you have these projects,


00:26:26.020 --> 00:26:27.720
you can say, I need these five things


00:26:27.720 --> 00:26:31.040
or I need these four things, I need to know them.


00:26:31.040 --> 00:26:33.680
And then my project is working, right?


00:26:33.680 --> 00:26:36.580
Instead of trying to say, well, what do I start with even?


00:26:36.580 --> 00:26:39.040
- Yeah, and one of the criticisms


00:26:39.040 --> 00:26:40.640
of many learning resources,


00:26:40.640 --> 00:26:42.740
and I'm a little sensitive to this


00:26:42.740 --> 00:26:45.080
'cause I've written many of these examples,


00:26:45.080 --> 00:26:46.400
is when people do a for loop


00:26:46.400 --> 00:26:49.480
and the for loop is about like kinds of pizza or something


00:26:49.480 --> 00:26:51.000
or toppings of pizza.


00:26:51.000 --> 00:26:52.960
And people look at that and say, why do I need this?


00:26:52.960 --> 00:26:54.840
I don't care about pizza toppings.


00:26:54.840 --> 00:26:57.800
Okay, you need that because the person creating the resource


00:26:57.800 --> 00:27:00.960
has to have some kind of context for the example.


00:27:00.960 --> 00:27:03.840
And so when I'm teaching a class in person,


00:27:03.840 --> 00:27:05.320
I don't come up with,


00:27:05.320 --> 00:27:06.840
all right, we're gonna do pizza toppings.


00:27:06.840 --> 00:27:09.040
I ask people in the class, hey, what are you interested in?


00:27:09.040 --> 00:27:11.800
And then we pick something that somebody in the class


00:27:11.800 --> 00:27:16.800
that day mentions, and then there's relevance right there.


00:27:16.800 --> 00:27:20.880
You don't have that if you're learning on your own,


00:27:20.880 --> 00:27:23.960
But what you can do if you do know your own project,


00:27:23.960 --> 00:27:26.000
you work through the example about pizza toppings,


00:27:26.000 --> 00:27:28.680
but then you write a loop that relates to the project


00:27:28.680 --> 00:27:31.720
that you want to work on.


00:27:31.720 --> 00:27:35.840
And so knowing that project is really helpful,


00:27:35.840 --> 00:27:38.680
regardless of how you're learning.


00:27:38.680 --> 00:27:40.920
Yeah.


00:27:40.920 --> 00:27:42.480
Let me pull up another comment.


00:27:42.480 --> 00:27:44.520
I think this is worth covering for people as well.


00:27:44.520 --> 00:27:46.520
So Bishnyadar says, for me, it was all good


00:27:46.520 --> 00:27:49.360
while I was learning programming Python.


00:27:49.360 --> 00:27:52.240
But as soon as I was out there in real life looking for jobs


00:27:52.240 --> 00:27:54.680
and looking at the requirements, it drained a lot of energy


00:27:54.680 --> 00:27:57.440
out of me, suggestions.


00:27:57.440 --> 00:27:58.920
What do you think?


00:27:58.920 --> 00:28:01.520
Oh, boy.


00:28:01.520 --> 00:28:05.520
I don't think there's an easy answer to that.


00:28:05.520 --> 00:28:08.960
And I think it's important to be honest about that.


00:28:08.960 --> 00:28:15.080
Personally, I have never worked as a full-time programmer.


00:28:15.080 --> 00:28:17.560
And that puts me in a weird spot for talking about things


00:28:17.560 --> 00:28:19.000
like career transitions.


00:28:19.000 --> 00:28:23.200
I have helped thousands of people make career transitions,


00:28:23.200 --> 00:28:26.520
but I don't sit in the interviewee chair


00:28:26.520 --> 00:28:28.920
not very often. - Yes, I hear you, yeah.


00:28:28.920 --> 00:28:32.120
- And having spent a good part of my life as a teacher,


00:28:32.120 --> 00:28:34.500
teacher hiring and teacher,


00:28:34.500 --> 00:28:36.120
the structure of employment for teachers


00:28:36.120 --> 00:28:39.120
is so vastly different than programming.


00:28:39.120 --> 00:28:42.840
- Yeah, the time frame of teaching jobs is so weird.


00:28:42.840 --> 00:28:46.720
It's like, there's a time sort of once a year often


00:28:46.720 --> 00:28:50.520
that you can apply or change jobs and otherwise you can't.


00:28:50.520 --> 00:28:53.400
It's not exactly true, but generally true.


00:28:53.400 --> 00:28:55.240
- Yeah, I'm in an interesting position now


00:28:55.240 --> 00:28:58.640
where I'd kind of like to work as a professional programmer,


00:28:58.640 --> 00:29:01.440
but honestly, I have to spend 10 to 20 hours a week


00:29:01.440 --> 00:29:03.320
on supporting the book.


00:29:03.320 --> 00:29:06.360
That LTS stuff is hard.


00:29:06.360 --> 00:29:09.280
- I know, I got a bunch of courses and stuff, I know it.


00:29:09.280 --> 00:29:12.520
I was just redoing some videos that had a mistake


00:29:12.520 --> 00:29:14.680
and then somebody noticed.


00:29:14.680 --> 00:29:17.360
So anything I do is on top of that work.


00:29:17.360 --> 00:29:20.320
And so I can really only consider part-time work,


00:29:20.320 --> 00:29:22.920
and then it becomes, is this worth it?


00:29:22.920 --> 00:29:26.320
So to be more direct, I don't think


00:29:26.320 --> 00:29:32.400
there's an easy answer to the grind of looking for work.


00:29:32.400 --> 00:29:34.720
And it's that network thing of once you have a job,


00:29:34.720 --> 00:29:37.360
it can be easier to find the next job.


00:29:37.360 --> 00:29:40.960
The couple of things I'll share for people is if you--


00:29:40.960 --> 00:29:43.600
so we talked about solving real-world problems.


00:29:43.600 --> 00:29:51.860
If you have a story that you can tell about how you have made something better through


00:29:51.860 --> 00:29:58.480
programming, what employers are looking for is that, yes, you have capability for programming.


00:29:58.480 --> 00:30:05.100
You can pass whatever leet code tests or screenings are necessary, but also have you used what


00:30:05.100 --> 00:30:07.660
you've learned about programming to solve something.


00:30:07.660 --> 00:30:13.780
And so the stories I always come back to are people who are working non-programming jobs


00:30:13.780 --> 00:30:18.380
and start to learn programming and then use that to solve something in their work that


00:30:18.380 --> 00:30:20.380
they weren't expected to solve.


00:30:20.380 --> 00:30:22.940
And that becomes a huge selling point in interviews.


00:30:22.940 --> 00:30:27.220
And my favorite story is a guy who was working for, I believe it was UPS, and this was quite


00:30:27.220 --> 00:30:28.220
a while ago.


00:30:28.220 --> 00:30:31.820
I feel comfortable telling that story partly based on time.


00:30:31.820 --> 00:30:37.260
They were working for one of these large delivery companies, and they were aware of people getting


00:30:37.260 --> 00:30:41.900
fired in warehouses for damage to the goods that were supposed to be delivered.


00:30:41.900 --> 00:30:47.740
And so the person was learning Python and they wrote some data analysis and they were able to


00:30:47.740 --> 00:30:54.780
pinpoint that the damage was coming from a manager or management group that was not training


00:30:54.780 --> 00:31:03.580
end line employees well enough. And so that was a really interesting story because the people being


00:31:03.580 --> 00:31:06.280
fired, but not the people who are causing the damage. They


00:31:06.280 --> 00:31:09.480
caused the physical damage, but it was right, but it was more


00:31:09.480 --> 00:31:12.760
systemic. Yeah. Yeah. And so that person saved their company


00:31:12.760 --> 00:31:15.940
millions of dollars. And they got like a $5,000 a year raise.


00:31:15.940 --> 00:31:20.040
But what they really did was they used that story in


00:31:20.040 --> 00:31:25.320
interviews to gain an actual programming position at a


00:31:25.320 --> 00:31:30.320
different company. And so it's hard when you're starting out.


00:31:30.400 --> 00:31:36.120
And so all I can say is look for the selling point for yourself


00:31:36.120 --> 00:31:38.760
and know that once you do get your first break,


00:31:38.760 --> 00:31:44.040
it becomes easier to stay on that path.


00:31:44.040 --> 00:31:45.440
I have one more thing to add.


00:31:45.440 --> 00:31:47.080
A lot of times when people are looking


00:31:47.080 --> 00:31:48.800
for their first programming job, they


00:31:48.800 --> 00:31:50.120
have experience somewhere else.


00:31:50.120 --> 00:31:52.640
I realize some people are young.


00:31:52.640 --> 00:31:53.560
They learn programming.


00:31:53.560 --> 00:31:56.840
That's kind of their totality of work experience.


00:31:56.840 --> 00:31:59.200
But a lot of people maybe studied something else


00:31:59.200 --> 00:32:00.200
and became a programmer.


00:32:00.200 --> 00:32:04.280
you studied physics, embrace that.


00:32:04.280 --> 00:32:09.240
So imagine you studied logistics.


00:32:09.240 --> 00:32:11.080
Instead of trying to look for a programming job,


00:32:11.080 --> 00:32:12.660
because you don't want to do logistics,


00:32:12.660 --> 00:32:16.080
look for a programming job at a logistics company.


00:32:16.080 --> 00:32:18.960
Because then you could say, I have programming skills,


00:32:18.960 --> 00:32:22.800
plus I have an expertise in your area of specialization.


00:32:22.800 --> 00:32:25.520
And once you intersect those things,


00:32:25.520 --> 00:32:29.320
you earn a much smaller set of competitors.


00:32:29.320 --> 00:32:32.080
I'm looking for a biology job, there's a ton of people doing biology.


00:32:32.080 --> 00:32:35.280
If I'm looking for a programming job, there's a ton of people doing programming.


00:32:35.280 --> 00:32:43.520
How many are doing biology and programming, maybe in the specific area that you're focused


00:32:43.520 --> 00:32:44.520
in?


00:32:44.520 --> 00:32:45.800
That all of a sudden gives you an opportunity.


00:32:45.800 --> 00:32:49.880
But it also means you need to look somewhat differently for jobs.


00:32:49.880 --> 00:32:54.480
You don't go apply to FANG the same way that everyone else thinks they should apply to


00:32:54.480 --> 00:32:55.480
FANG.


00:32:55.480 --> 00:32:58.880
Look for these small companies because not only will they appreciate it more, you'll


00:32:58.880 --> 00:33:02.200
you'll get a better chance to grow because you'll get a bigger responsibility to write


00:33:02.200 --> 00:33:09.020
more broad software. And the interviewing process is not nearly as terrible, I think,


00:33:09.020 --> 00:33:13.440
for small companies, right? It's a chat with a couple of people and they're like, we think


00:33:13.440 --> 00:33:21.000
you can do it. Give it a try for a week. Whereas places like the large tech companies, right?


00:33:21.000 --> 00:33:25.620
They've got these pretty horrible, you know, here's your take home exercise, write it.


00:33:25.620 --> 00:33:29.860
considered if it works out well, maybe amongst the other thousands, right? It's like a really


00:33:29.860 --> 00:33:34.940
different experience. I think that first step in the door, that first job is the one that


00:33:34.940 --> 00:33:35.940
is hard to get.


00:33:35.940 --> 00:33:41.500
Yeah, I'll throw one more piece in there and it's a quick thought. And that is, you know,


00:33:41.500 --> 00:33:46.260
contributing to open source projects is something we need to be careful about because oftentimes


00:33:46.260 --> 00:33:51.760
it's privileged work. You have some extra time and you can do that. But one of the real


00:33:51.760 --> 00:33:57.440
benefits of making meaningful contributions to established open source projects is it


00:33:57.440 --> 00:34:03.560
throws you all the way into professional workflows of managing, you know, using source control


00:34:03.560 --> 00:34:07.200
and just the bigger piece, communicating with a larger team.


00:34:07.200 --> 00:34:08.200
Yeah.


00:34:08.200 --> 00:34:16.520
So, yeah, as I've gotten more into open source, for me, that scratches that itch of wanting


00:34:16.520 --> 00:34:18.240
to work as a professional programmer.


00:34:18.240 --> 00:34:20.720
because I don't clearly see--


00:34:20.720 --> 00:34:22.440
>>It's hard to simulate.


00:34:22.440 --> 00:34:27.080
Yeah, it's hard to simulate proper CI/CD merge conflict


00:34:27.080 --> 00:34:30.280
PR discussions on your own little hobby project,


00:34:30.280 --> 00:34:31.000
that's for sure.


00:34:31.000 --> 00:34:31.500
>>Right.


00:34:31.500 --> 00:34:32.240
>>All right.


00:34:32.240 --> 00:34:38.000
Yeah, so we're-- number two, we'll get a project.


00:34:38.000 --> 00:34:39.920
>>Yeah, we can go through some of these a little faster.


00:34:39.920 --> 00:34:41.440
>>Yeah, no, of course we can.


00:34:41.440 --> 00:34:42.760
What's number three?


00:34:42.760 --> 00:34:44.960
>>Number three is don't limit your learning to what's


00:34:44.960 --> 00:34:46.280
needed for your project.


00:34:46.280 --> 00:34:50.080
So it's important to have a specific project in mind


00:34:50.080 --> 00:34:54.360
to give context for what you're learning, and give purpose,


00:34:54.360 --> 00:34:58.360
and steer you towards feeling success and knowing what's


00:34:58.360 --> 00:35:00.240
good enough.


00:35:00.240 --> 00:35:02.960
But always be ready to expand your toolbox


00:35:02.960 --> 00:35:04.160
and your understanding.


00:35:04.160 --> 00:35:08.000
And it'll serve all your projects in the end.


00:35:08.000 --> 00:35:10.000
And learning is fun.


00:35:10.000 --> 00:35:12.520
Learning in good ways is fun.


00:35:12.520 --> 00:35:14.960
Learning with good resources, with good people.


00:35:14.960 --> 00:35:18.440
You want to learn FastAPI, here's your FastAPI worksheet.


00:35:18.440 --> 00:35:19.360
The answers are in the back.


00:35:19.360 --> 00:35:19.860
Yay.


00:35:19.860 --> 00:35:21.440
Sheesh.


00:35:21.440 --> 00:35:23.200
I have a kid in middle school, so we


00:35:23.200 --> 00:35:24.760
shouldn't talk about worksheets.


00:35:24.760 --> 00:35:27.360
Oof.


00:35:27.360 --> 00:35:29.200
But a quick example is I'm working


00:35:29.200 --> 00:35:32.520
on a project called Django Simple Deploy that


00:35:32.520 --> 00:35:36.240
automates deployment for projects in Django.


00:35:36.240 --> 00:35:37.960
It's not just for beginners.


00:35:37.960 --> 00:35:41.680
When Heroku collapsed its free tier a couple of years ago,


00:35:41.680 --> 00:35:49.840
saw a bunch of very experienced Python web people en masse go look at other platforms.


00:35:49.840 --> 00:35:57.920
And we saw them talking about how difficult it is to go through each platform's documentation


00:35:57.920 --> 00:36:04.560
and get a simple app deployed just to see the process. And so this tool is a core command


00:36:04.560 --> 00:36:11.200
manage.py sample deploy. And then you name the platform and it configures your project


00:36:11.200 --> 00:36:15.680
for that platform, and then you can push it.


00:36:15.680 --> 00:36:20.140
And so it's set up as a core command that then calls out


00:36:20.140 --> 00:36:23.080
to a platform-specific command and configures your project


00:36:23.080 --> 00:36:24.360
for those commands.


00:36:24.360 --> 00:36:26.120
And so when I first wrote it, my first pass


00:36:26.120 --> 00:36:28.840
was just a bunch of classes that they worked together


00:36:28.840 --> 00:36:32.880
because I wrote them, and they're all nice.


00:36:32.880 --> 00:36:34.840
But I had learned about abstract base classes


00:36:34.840 --> 00:36:36.880
but never had a purpose for using one.


00:36:36.880 --> 00:36:40.840
And so as this project is becoming more refined,


00:36:40.840 --> 00:36:46.160
I need to enforce a structure so that the platform-specific code


00:36:46.160 --> 00:36:48.440
works with the platform-agnostic code.


00:36:48.440 --> 00:36:51.760
And so if I hadn't--


00:36:51.760 --> 00:36:55.280
or I should say this in the positive way--


00:36:55.280 --> 00:36:57.800
because I had done some general learning


00:36:57.800 --> 00:37:02.600
about more advanced object-oriented principles,


00:37:02.600 --> 00:37:06.120
I have some sense of how to enforce that structure


00:37:06.120 --> 00:37:07.560
as the need arises.


00:37:07.560 --> 00:37:09.780
So it's good to have a project in mind,


00:37:09.780 --> 00:37:12.020
But don't limit what you're learning just to that project


00:37:12.020 --> 00:37:13.980
because you'll become a better programmer


00:37:13.980 --> 00:37:15.820
and you'll do your projects better.


00:37:15.820 --> 00:37:17.140
>> Sure.


00:37:17.140 --> 00:37:21.180
One of the ideas I think is really powerful


00:37:21.180 --> 00:37:25.620
is that inspiration is perishable.


00:37:25.620 --> 00:37:28.540
If you are inspired about something,


00:37:28.540 --> 00:37:30.940
you might not be that inspired in a couple of weeks.


00:37:30.940 --> 00:37:32.780
And that doesn't mean it's not cool anymore.


00:37:32.780 --> 00:37:36.700
That just means you moved on, your focus is elsewhere,


00:37:36.700 --> 00:37:37.940
or whatever.


00:37:37.940 --> 00:37:39.900
And so, yeah, sure, you need to learn the things


00:37:39.900 --> 00:37:41.940
you need to learn to do your project


00:37:41.940 --> 00:37:43.680
or to check some boxes.


00:37:43.680 --> 00:37:46.420
But if you find something, you're like,


00:37:46.420 --> 00:37:49.260
"I am really interested in that."


00:37:49.260 --> 00:37:51.780
Leverage that inspiration.


00:37:51.780 --> 00:37:53.900
I don't know about other people, but for me,


00:37:53.900 --> 00:37:57.220
I'm like two or three times more productive


00:37:57.220 --> 00:37:59.620
in learning and writing code and all sorts of things


00:37:59.620 --> 00:38:01.660
if I'm like really on fire about something


00:38:01.660 --> 00:38:03.380
versus like, "Ah, I guess I'll get in there


00:38:03.380 --> 00:38:04.580
"and like fix that bug."


00:38:04.580 --> 00:38:06.980
And like something that I'm not inspired about


00:38:06.980 --> 00:38:10.480
MailChimp just changed their API and deprecated,


00:38:10.480 --> 00:38:12.480
shut off their old one.


00:38:12.480 --> 00:38:14.480
Now I have people on my mailing list,


00:38:14.480 --> 00:38:16.480
I got to go rewrite that.


00:38:16.480 --> 00:38:18.980
What I get in the end is I get to just keep having them


00:38:18.980 --> 00:38:20.980
on my mailing list. There's zero inspiration there.


00:38:20.980 --> 00:38:23.980
But if I ran across, "Oh, there's this new feature


00:38:23.980 --> 00:38:28.480
in Python 3.12, or there's this new package


00:38:28.480 --> 00:38:30.480
that I found on PyPI that's awesome."


00:38:30.480 --> 00:38:33.480
And I just really want to leverage that.


00:38:33.480 --> 00:38:36.680
But while it's there, take advantage of it.


00:38:36.680 --> 00:38:42.560
All right, number four.


00:38:42.560 --> 00:38:43.360
Yeah, number four.


00:38:43.360 --> 00:38:44.880
What do we got?


00:38:44.880 --> 00:38:46.800
Read good code.


00:38:46.800 --> 00:38:49.760
And this is one of those things that I


00:38:49.760 --> 00:38:53.120
wish I had been told a lot earlier in my programming


00:38:53.120 --> 00:38:55.040
career than I was.


00:38:55.040 --> 00:38:59.240
I went a long time, decades, just


00:38:59.240 --> 00:39:01.000
looking at code that was presented


00:39:01.000 --> 00:39:02.760
in the classes and books I read, and then


00:39:02.760 --> 00:39:06.520
writing my own code and then only reading what I needed to


00:39:06.520 --> 00:39:08.360
in order to do my projects.


00:39:08.360 --> 00:39:12.560
And then at some point, I forget if I saw a suggestion


00:39:12.560 --> 00:39:15.880
to do this or if I just started to do it out of curiosity.


00:39:15.880 --> 00:39:19.040
I think it was probably around the time when a lot of code


00:39:19.040 --> 00:39:23.600
became very visible through platforms like GitHub.


00:39:23.600 --> 00:39:27.500
But if you're using a library like say Pandas,


00:39:27.500 --> 00:39:29.840
that is out in the open.


00:39:29.840 --> 00:39:35.520
And so rather than just using Pandas functions,


00:39:35.520 --> 00:39:40.400
you can go look at the code that runs that function.


00:39:40.400 --> 00:39:42.160
So Pandas has--


00:39:42.160 --> 00:39:43.800
I shouldn't say Pandas because I'm just


00:39:43.800 --> 00:39:46.760
starting to get more fluent with that, more comfortable.


00:39:46.760 --> 00:39:49.640
So I'll say, like, matplotlib.


00:39:49.640 --> 00:39:54.520
So if you're making a scatter plot,


00:39:54.520 --> 00:39:56.000
fig.scatter or something like that,


00:39:56.000 --> 00:39:59.240
you can go look at that scatter function and see what it does.


00:39:59.240 --> 00:40:01.520
You see the full set of arguments that it can take.


00:40:01.520 --> 00:40:03.320
You see all of its capabilities.


00:40:03.320 --> 00:40:05.560
And you see how the people writing and maintaining


00:40:05.560 --> 00:40:11.480
Matplotlib take your information and turn it into a plot.


00:40:11.480 --> 00:40:15.600
And when you look at that code, you're


00:40:15.600 --> 00:40:17.840
seeing professional quality code.


00:40:17.840 --> 00:40:19.080
It can be overwhelming.


00:40:19.080 --> 00:40:21.320
There's probably going to be parts that you understand


00:40:21.320 --> 00:40:22.680
and parts that you don't.


00:40:22.680 --> 00:40:24.880
But the more you look at it, the more you understand.


00:40:24.880 --> 00:40:27.040
And your code becomes better because you're


00:40:27.040 --> 00:40:30.360
seeing high quality code.


00:40:30.360 --> 00:40:32.600
It's good to recognize that those people writing that did


00:40:32.600 --> 00:40:35.280
not write that polished code the first time they


00:40:35.280 --> 00:40:37.240
wrote the scatter function.


00:40:37.240 --> 00:40:39.240
So don't think, I'm a bad programmer


00:40:39.240 --> 00:40:42.400
because my code doesn't look like this.


00:40:42.400 --> 00:40:43.800
The polished code that we look at


00:40:43.800 --> 00:40:46.720
from large, popular, well-established frameworks


00:40:46.720 --> 00:40:48.880
has been well-refined.


00:40:48.880 --> 00:40:51.600
And so it's something to aim for.


00:40:51.600 --> 00:40:53.680
Yeah, it totally is.


00:40:53.680 --> 00:40:57.000
It's one of those things that's hard to get experience with.


00:40:57.000 --> 00:41:00.800
if you're kind of not yet working as a professional developer,


00:41:00.800 --> 00:41:05.800
or even if you are, but you're a one- to two-person shop,


00:41:05.800 --> 00:41:07.800
where you don't collaborate a lot.


00:41:07.800 --> 00:41:08.800
Right.


00:41:08.800 --> 00:41:12.600
It doesn't have to be that you're not working as a pro,


00:41:12.600 --> 00:41:15.600
you know, working as part of your job in that, right?


00:41:15.600 --> 00:41:18.600
It could be that you just don't have enough collaboration


00:41:18.600 --> 00:41:20.600
or enough people.


00:41:20.600 --> 00:41:21.600
Yeah.


00:41:21.600 --> 00:41:25.600
Yeah, and I think it could be hard to know where to look.


00:41:25.600 --> 00:41:28.100
All right, so if I look at the Python source code, giant.


00:41:28.100 --> 00:41:30.860
I have no idea where to look.


00:41:30.860 --> 00:41:32.180
Look at the most recent commits.


00:41:32.180 --> 00:41:35.060
So just pick a commit, look at the files that were changed,


00:41:35.060 --> 00:41:36.400
and get some sense of what people


00:41:36.400 --> 00:41:41.500
are doing to modify the language and these larger libraries.


00:41:41.500 --> 00:41:42.660
Look at the newest issues.


00:41:42.660 --> 00:41:45.880
What are people discussing about what they're trying to work on


00:41:45.880 --> 00:41:47.800
and how they're trying to solve that?


00:41:47.800 --> 00:41:50.060
And maybe look at some of the longest open issues.


00:41:50.060 --> 00:41:51.880
What are the hardest problems that people


00:41:51.880 --> 00:41:57.440
wrestling with in some of these projects that we all use.


00:41:57.440 --> 00:41:59.000
>> Yeah.


00:41:59.000 --> 00:41:59.880
All good advice.


00:41:59.880 --> 00:42:02.520
I would say the larger the open source project


00:42:02.520 --> 00:42:07.000
and the more popular, maybe harder it is to read.


00:42:07.000 --> 00:42:10.840
Because it has to be more polished and more optimized


00:42:10.840 --> 00:42:11.440
and more--


00:42:11.440 --> 00:42:17.560
it's got that extra layer of, well, it's


00:42:17.560 --> 00:42:20.840
going to make it harder to read, but it'll make it 2% faster


00:42:20.840 --> 00:42:22.200
and people will appreciate that.


00:42:22.200 --> 00:42:23.320
So we're going to do that.


00:42:23.320 --> 00:42:28.280
Whereas there's a tier below that of open source things


00:42:28.280 --> 00:42:31.440
that are professional level, but not yet


00:42:31.440 --> 00:42:34.320
kind of beyond approachable.


00:42:34.320 --> 00:42:38.160
Yeah, I did two newsletter posts recently


00:42:38.160 --> 00:42:42.000
about exploring recent Python repositories


00:42:42.000 --> 00:42:43.520
to get at this exact issue.


00:42:43.520 --> 00:42:45.760
So the idea of you're looking at contributing to Django,


00:42:45.760 --> 00:42:46.960
it's hard.


00:42:46.960 --> 00:42:48.960
The Django community is doing a lot of work


00:42:48.960 --> 00:42:52.640
to make it more approachable for people wanting to contribute.


00:42:52.640 --> 00:42:55.680
But it's absolutely true that it's hard to contribute to


00:42:55.680 --> 00:42:58.600
and get into larger, well-established codebases.


00:42:58.600 --> 00:43:04.160
So I use the GitHub API to find, say, all the Python projects


00:43:04.160 --> 00:43:07.560
that have pushed to GitHub in the last three weeks


00:43:07.560 --> 00:43:09.600
that have at least 10 stars.


00:43:09.600 --> 00:43:12.000
And those are the fresh projects that are getting attention


00:43:12.000 --> 00:43:14.760
and don't have all this long-term stuff.


00:43:14.760 --> 00:43:16.480
And so I ended up actually contributing


00:43:16.480 --> 00:43:18.960
to one of those projects because it just--


00:43:18.960 --> 00:43:21.620
what you described earlier just pulled me in and fascinated me


00:43:21.620 --> 00:43:22.120
in.


00:43:22.120 --> 00:43:24.120
It's so nice to have some concrete contributions


00:43:24.120 --> 00:43:27.360
to a project that is in that fresh stage.


00:43:27.360 --> 00:43:29.160
Yeah, that's fantastic.


00:43:29.160 --> 00:43:31.200
All right, what's the next one?


00:43:31.200 --> 00:43:31.960
Know your tools.


00:43:31.960 --> 00:43:38.880
I laugh at this one because I think about-- this


00:43:38.880 --> 00:43:40.600
is one of the reasons I transitioned


00:43:40.600 --> 00:43:45.840
into an equal focus between programming and teaching.


00:43:45.840 --> 00:43:51.120
I used to, my priority was 98% teaching and 2% programming.


00:43:51.120 --> 00:43:56.880
And now I'm probably 60% program, 40% teaching.


00:43:56.880 --> 00:44:00.520
Tools for teachers are terrible.


00:44:00.520 --> 00:44:02.720
Public school teachers still write most of their lesson


00:44:02.720 --> 00:44:05.360
plans in Microsoft Word.


00:44:05.360 --> 00:44:07.620
And that sounds like, oh, gosh, they just


00:44:07.620 --> 00:44:10.080
have to write out onto a blank page.


00:44:10.080 --> 00:44:12.840
But what it really means is we, as programmers,


00:44:12.840 --> 00:44:15.160
are used to working with structured data.


00:44:15.160 --> 00:44:20.160
And so if we have a workflow and we're writing something,


00:44:20.160 --> 00:44:23.520
and then we update the structure of our information,


00:44:23.520 --> 00:44:25.760
we don't have to go back and rewrite everything.


00:44:25.760 --> 00:44:31.440
We have tools that manage restructuring projects.


00:44:31.440 --> 00:44:33.800
If you write three years of lesson plans in Word,


00:44:33.800 --> 00:44:35.600
and then you figure out how to teach better,


00:44:35.600 --> 00:44:37.560
and you want to restructure all your lessons,


00:44:37.560 --> 00:44:39.360
there's no automated way to do that.


00:44:39.360 --> 00:44:40.520
It's a mess.


00:44:40.520 --> 00:44:42.840
And so I'm grateful as a programmer


00:44:42.840 --> 00:44:46.600
to have things like IDEs, formatters, linters, Git,


00:44:46.600 --> 00:44:50.640
any version control system, GitHub hosting platforms.


00:44:50.640 --> 00:44:55.520
And so my core advice here is to,


00:44:55.520 --> 00:44:58.040
as you're becoming more established as a programmer


00:44:58.040 --> 00:44:59.960
and as a Python programmer, start


00:44:59.960 --> 00:45:03.600
to recognize what are the tools that you personally


00:45:03.600 --> 00:45:04.640
find value in.


00:45:04.640 --> 00:45:06.960
What is your favorite IDE?


00:45:06.960 --> 00:45:08.360
What is your preferred formatter?


00:45:08.360 --> 00:45:11.160
What's your preferred linter version control system?


00:45:11.160 --> 00:45:15.400
And this just take a little time to focus on that tool itself.


00:45:15.400 --> 00:45:18.400
So if you've been using VS Code for six months,


00:45:18.400 --> 00:45:21.800
spend three days and just read about configuring VS Code.


00:45:21.800 --> 00:45:24.920
You'll almost certainly come up with some things that


00:45:24.920 --> 00:45:28.040
make your day-to-day work more efficient, more effective,


00:45:28.040 --> 00:45:30.240
more enjoyable.


00:45:30.240 --> 00:45:32.160
Every time I've taken time to do this,


00:45:32.160 --> 00:45:35.560
I've come out better for it.


00:45:35.560 --> 00:45:37.480
Yeah, whether it's VS Code or PyCharm,


00:45:37.480 --> 00:45:42.480
They both have a ton of options that you can pick from.


00:45:42.480 --> 00:45:44.880
They're discoverable or less discoverable


00:45:44.880 --> 00:45:45.720
in different ways.


00:45:45.720 --> 00:45:48.760
Like iCharm makes it kind of obvious


00:45:48.760 --> 00:45:49.860
what all the things it can do,


00:45:49.860 --> 00:45:51.680
but there's so many things that people are like,


00:45:51.680 --> 00:45:54.920
well, I'm just gonna stick to my lane


00:45:54.920 --> 00:45:56.920
and just stay over here and do the thing.


00:45:56.920 --> 00:45:59.640
VS Code is a little less discoverable,


00:45:59.640 --> 00:46:01.240
but maybe it makes it even harder


00:46:01.240 --> 00:46:02.560
to take full advantage of it


00:46:02.560 --> 00:46:04.200
'cause it's like the Command + Shift + P


00:46:04.200 --> 00:46:05.480
to pull up the palette and then like,


00:46:05.480 --> 00:46:07.440
well, it's a huge list, what do I do with this?


00:46:07.440 --> 00:46:08.960
- Yes, yes.


00:46:08.960 --> 00:46:13.960
- But being really good with your editor,


00:46:13.960 --> 00:46:16.240
I know some of the things that are coming as well


00:46:16.240 --> 00:46:18.460
on your list, this adds on top of it,


00:46:18.460 --> 00:46:21.760
but it makes a huge difference.


00:46:21.760 --> 00:46:24.560
It makes things like being comfortable


00:46:24.560 --> 00:46:28.380
navigating your code go better,


00:46:28.380 --> 00:46:31.640
testing your code, changing your code, right?


00:46:31.640 --> 00:46:33.520
Doing some of these workflows you talked about,


00:46:33.520 --> 00:46:37.840
like Git and PRs, all of that stuff.


00:46:37.840 --> 00:46:40.940
All of those things are in those tools, plus way more.


00:46:40.940 --> 00:46:44.120
That's not even talking about the extensions or plugins


00:46:44.120 --> 00:46:45.240
that you might go after, right?


00:46:45.240 --> 00:46:48.600
And so, but it's easy to see like,


00:46:48.600 --> 00:46:52.760
well, I've fired it up and then now it's an editor, right?


00:46:52.760 --> 00:46:54.920
It's a thing and it, oh, it has cool autocomplete.


00:46:54.920 --> 00:46:58.160
And then just kind of forget about the hundred other things


00:46:58.160 --> 00:47:00.120
that it can help you with.


00:47:00.120 --> 00:47:04.200
Yeah, and particularly with IDEs, they do a lot for us.


00:47:04.200 --> 00:47:08.280
And that can be a good thing and it can be a bad thing.


00:47:08.280 --> 00:47:11.240
I have steered a lot of people back towards simpler editors


00:47:11.240 --> 00:47:15.400
like Sublime Text and even Genie is a fantastic one


00:47:15.400 --> 00:47:20.640
that a lot of people don't know about because the tools like VS


00:47:20.640 --> 00:47:24.040
Code, PyCharm, whatnot, when everything's working,


00:47:24.040 --> 00:47:26.000
what they do for us is fantastic.


00:47:26.000 --> 00:47:27.680
When things stop working, if you don't


00:47:27.680 --> 00:47:29.280
know what it's trying to do for you,


00:47:29.280 --> 00:47:31.440
it can just make things much more confusing.


00:47:31.440 --> 00:47:34.020
And particularly, that comes down to things like tools


00:47:34.020 --> 00:47:37.840
that build virtual environment for a new project for you.


00:47:37.840 --> 00:47:41.060
So if you understand what that's doing, and it stops working,


00:47:41.060 --> 00:47:42.140
you can go troubleshoot it.


00:47:42.140 --> 00:47:43.940
But if you don't know what it did for you,


00:47:43.940 --> 00:47:48.800
and now it says this module is not found, it can be a mess.


00:47:48.800 --> 00:47:50.820
And so yeah, you can--


00:47:50.820 --> 00:47:53.540
>> Virtual environments seem to be just like--


00:47:53.540 --> 00:47:55.620
they just go wrong so often.


00:47:58.260 --> 00:48:01.780
I'm not in the pure, I've created one on the terminal


00:48:01.780 --> 00:48:04.180
and I've acted, that's solid.


00:48:04.180 --> 00:48:07.560
But in the tooling, it's like, sometimes it finds it,


00:48:07.560 --> 00:48:09.820
sometimes it doesn't, sometimes it really


00:48:09.820 --> 00:48:11.580
doesn't want to find it.


00:48:11.580 --> 00:48:13.900
It's nuts, yeah.


00:48:13.900 --> 00:48:15.380
- Yeah, and so I'm glad you brought that up.


00:48:15.380 --> 00:48:18.460
So the core advice there for me has always been,


00:48:18.460 --> 00:48:21.900
people have a tendency to want to go find another editor


00:48:21.900 --> 00:48:24.140
or IDE that's gonna manage that better.


00:48:24.140 --> 00:48:25.980
And what I tell them is, no, it's gonna manage it


00:48:25.980 --> 00:48:27.700
differently and you're gonna run into the same issue


00:48:27.700 --> 00:48:29.540
and then you're going to need to solve it.


00:48:29.540 --> 00:48:32.060
So when that stuff happens, taking the time


00:48:32.060 --> 00:48:35.020
to learn what your editor is doing for you


00:48:35.020 --> 00:48:36.600
and then be able to troubleshoot that,


00:48:36.600 --> 00:48:40.420
that's going to serve you well in the long run.


00:48:40.420 --> 00:48:42.780
Yep.


00:48:42.780 --> 00:48:44.940
All right, what's next?


00:48:44.940 --> 00:48:48.500
Learn how to test your code.


00:48:48.500 --> 00:48:50.300
And I wrote here, you won't sleep more,


00:48:50.300 --> 00:48:53.580
but your sleep will be more restful.


00:48:53.580 --> 00:48:56.140
I went probably 20 years programming


00:48:56.140 --> 00:48:57.620
without ever writing a test.


00:48:57.620 --> 00:48:59.700
And I always had this notion that it was difficult,


00:48:59.700 --> 00:49:01.740
it was separate from programming.


00:49:01.740 --> 00:49:03.460
And the first time I wrote a test,


00:49:03.460 --> 00:49:04.820
it was so much easier than I thought.


00:49:04.820 --> 00:49:08.980
And so cool to see my program run automatically


00:49:08.980 --> 00:49:11.420
and had the output validated.


00:49:11.420 --> 00:49:12.500
I love testing.


00:49:12.500 --> 00:49:14.700
It's probably my biggest interest these days


00:49:14.700 --> 00:49:16.860
beyond deploying Django projects.


00:49:16.860 --> 00:49:21.660
And I love it because when we write code,


00:49:21.660 --> 00:49:22.980
we want it to work.


00:49:22.980 --> 00:49:24.780
When we have a project,


00:49:24.780 --> 00:49:27.780
we want our product to be successful.


00:49:27.780 --> 00:49:29.820
And so testing validates that.


00:49:29.820 --> 00:49:35.420
Testing gives you confidence that your project


00:49:35.420 --> 00:49:36.860
is working correctly.


00:49:36.860 --> 00:49:39.740
And if you fix a bug, you just fix it once.


00:49:39.740 --> 00:49:44.500
So testing is its own podcast for some people.


00:49:44.500 --> 00:49:46.980
So I'll just say that testing is easier than a lot of people


00:49:46.980 --> 00:49:48.060
think it is.


00:49:48.060 --> 00:49:49.780
Go use pytest.


00:49:49.780 --> 00:49:51.380
I used to teach unit tests because it's


00:49:51.380 --> 00:49:53.060
in the standard library.


00:49:53.060 --> 00:49:56.060
but pytest has become well-established enough.


00:49:56.060 --> 00:49:59.140
It's one of my favorite Python packages of all


00:49:59.140 --> 00:50:03.140
because it's one of those few that serves pure beginners


00:50:03.140 --> 00:50:05.420
and experts equally well.


00:50:05.420 --> 00:50:08.260
It's the best way to be introduced to testing.


00:50:08.260 --> 00:50:09.660
And if you're testing professionally,


00:50:09.660 --> 00:50:12.180
there's no tool better than that.


00:50:12.180 --> 00:50:13.540
- That's the Zen of Python, right?


00:50:13.540 --> 00:50:16.180
That it's really serves beginners well,


00:50:16.180 --> 00:50:18.100
but also experts well.


00:50:18.100 --> 00:50:21.220
I think that's one of its special capabilities.


00:50:22.620 --> 00:50:27.260
Yeah, I will encourage people-- and Michael,


00:50:27.260 --> 00:50:29.300
I'd be curious if you agree with this or not.


00:50:29.300 --> 00:50:33.260
I'd encourage people to not necessarily look at unit tests


00:50:33.260 --> 00:50:37.780
right away, because unit tests are brittle for newer projects.


00:50:37.780 --> 00:50:39.780
I really like end-to-end testing.


00:50:39.780 --> 00:50:42.780
And that is where you run your project, you get some output,


00:50:42.780 --> 00:50:45.580
and then you run tests against that output.


00:50:45.580 --> 00:50:48.980
And that is not testing the implementation of your project.


00:50:48.980 --> 00:50:51.860
That's just saying, does your project work?


00:50:51.860 --> 00:50:53.900
And so the project I've been pulled into recently


00:50:53.900 --> 00:50:57.540
is one called git-sim, git-sim.


00:50:57.540 --> 00:51:00.100
And you run it against your own project,


00:51:00.100 --> 00:51:03.820
and it gives you a visualization of all your commits.


00:51:03.820 --> 00:51:06.140
And so for people trying to understand how Git works


00:51:06.140 --> 00:51:08.660
or how Git is working for their particular project,


00:51:08.660 --> 00:51:12.620
you run git-sim merge, and it shows you


00:51:12.620 --> 00:51:15.420
visualization of what that merge would look like.


00:51:15.420 --> 00:51:17.740
And so that project is newer, and it had no tests.


00:51:17.740 --> 00:51:21.020
And so I helped write the initial test suite.


00:51:21.020 --> 00:51:24.900
And I said to the person, we shouldn't


00:51:24.900 --> 00:51:26.420
test your implementation because you


00:51:26.420 --> 00:51:29.360
should be free to change how you're


00:51:29.360 --> 00:51:30.460
building this new project.


00:51:30.460 --> 00:51:33.000
But we should actually start to test the images


00:51:33.000 --> 00:51:34.460
that you're generating so that when


00:51:34.460 --> 00:51:36.340
you do change your implementation,


00:51:36.340 --> 00:51:39.580
you know whether the images that your users are going to see


00:51:39.580 --> 00:51:40.860
are the ones that you think--


00:51:40.860 --> 00:51:43.300
that you've been seeing and you think they're going to see.


00:51:43.300 --> 00:51:46.340
And so that's really nice because you


00:51:46.340 --> 00:51:50.420
don't have to aim for 100% coverage of your code.


00:51:50.420 --> 00:51:52.900
you just start to get that big picture.


00:51:52.900 --> 00:51:55.420
Yes, my project is still doing what I think it's doing.


00:51:55.420 --> 00:51:57.580
And that makes for better sleep.


00:51:57.580 --> 00:51:59.140
And all of your non-computer activities


00:51:59.140 --> 00:52:02.700
are more enjoyable because you have more confidence


00:52:02.700 --> 00:52:04.260
that things keep working.


00:52:04.260 --> 00:52:09.380
Yeah, I'm with you on not going too far down the unit test.


00:52:09.380 --> 00:52:13.900
I used to write tons and tons of very low-level focus unit


00:52:13.900 --> 00:52:15.540
tests.


00:52:15.540 --> 00:52:21.780
And when I was on a team, I always had a hard time having everybody have buy-in.


00:52:21.780 --> 00:52:26.820
Some people would, some people wouldn't. They'd go do something that would break the test.


00:52:26.820 --> 00:52:33.220
You know, like you broke the build. They're like, "Oh, yeah, I guess I did." You're like,


00:52:33.220 --> 00:52:39.860
"You realize that if we don't all participate in this, it just becomes a hassle for me,


00:52:39.860 --> 00:52:44.100
like chasing after trying to like patch up the tests


00:52:44.100 --> 00:52:45.580
as you make these changes.


00:52:45.580 --> 00:52:47.340
And as you're more focused, as you're


00:52:47.340 --> 00:52:50.020
like lower level in the world, that's


00:52:50.020 --> 00:52:52.900
just a more constant problem.


00:52:52.900 --> 00:52:54.940
And it also requires more effort, right?


00:52:54.940 --> 00:52:56.400
So maybe that effort is worthwhile.


00:52:56.400 --> 00:52:58.740
But if you're new, maybe it's not.


00:52:58.740 --> 00:53:02.900
And so I'm a little bit more on board with just like,


00:53:02.900 --> 00:53:05.900
let's do the main things at like kind of top to bottom


00:53:05.900 --> 00:53:06.900
in the app.


00:53:06.900 --> 00:53:10.820
And if that stuff hangs on, we got a real good chance.


00:53:10.820 --> 00:53:16.580
And over time, my experience has been, for the most part,


00:53:16.580 --> 00:53:18.020
things blow up hard.


00:53:18.020 --> 00:53:19.820
They don't just like, oh, there's


00:53:19.820 --> 00:53:21.100
some little subtle problem.


00:53:21.100 --> 00:53:23.740
Generally, not always true, but generally,


00:53:23.740 --> 00:53:26.580
if I screw something up, a lot of tests


00:53:26.580 --> 00:53:28.940
start failing, even when they're these high-level things,


00:53:28.940 --> 00:53:32.460
because something's pretty messed up.


00:53:32.460 --> 00:53:36.620
And in that regard, that other person probably


00:53:36.620 --> 00:53:39.260
didn't intend to change the output or the overall behavior


00:53:39.260 --> 00:53:43.380
of the app in well-known ways.


00:53:43.380 --> 00:53:45.340
They just changed some implementation detail,


00:53:45.340 --> 00:53:48.580
and they weren't being sufficiently rigorous


00:53:48.580 --> 00:53:51.260
with their software lifecycle.


00:53:51.260 --> 00:53:53.460
So yes, I'm on board.


00:53:53.460 --> 00:53:56.420
The web equivalent, the easiest web equivalent


00:53:56.420 --> 00:54:00.860
that I can think of is if you've got a website


00:54:00.860 --> 00:54:02.540
and it has a sitemap, your website


00:54:02.540 --> 00:54:06.560
should have a sitemap for all of your data-driven pages.


00:54:06.560 --> 00:54:09.680
just go get the sitemap and request every page.


00:54:09.680 --> 00:54:13.440
Does it give you a 200 or does it give you a 500 or a 404?


00:54:13.440 --> 00:54:17.480
'Cause 404s and 500s should not be found in your sitemap.


00:54:17.480 --> 00:54:19.960
Right, but that's a really easy test, right?


00:54:19.960 --> 00:54:22.200
Like loop over that, call every one of those


00:54:22.200 --> 00:54:25.280
with your self.client.get


00:54:25.280 --> 00:54:28.400
or whatever your HTTP test thing looks like


00:54:28.400 --> 00:54:29.920
and just call all of them.


00:54:29.920 --> 00:54:32.640
That's one thing you could do that's in that category.


00:54:34.000 --> 00:54:37.760
And as an author, I wrote tests for most of the code


00:54:37.760 --> 00:54:39.040
in Python Crash Course.


00:54:39.040 --> 00:54:40.560
And so Python Crash Course was first written,


00:54:40.560 --> 00:54:43.400
I think, on Python 3.5.


00:54:43.400 --> 00:54:45.920
And so it's been through, like, what,


00:54:45.920 --> 00:54:47.520
six or seven iterations of Python


00:54:47.520 --> 00:54:50.360
and all kinds of iterations of the libraries


00:54:50.360 --> 00:54:51.600
that the projects use.


00:54:51.600 --> 00:54:53.480
And so whenever a new issue comes out,


00:54:53.480 --> 00:54:55.520
or new, sorry, version comes out,


00:54:55.520 --> 00:54:57.840
I just run tests on most of the code in the book.


00:54:57.840 --> 00:55:00.960
And it pulls the test pulls the code


00:55:00.960 --> 00:55:02.920
from the GitHub repository for the book


00:55:02.920 --> 00:55:04.540
and just runs it with the new versions.


00:55:04.540 --> 00:55:07.560
And that's been part of how I've been able to maintain


00:55:07.560 --> 00:55:12.560
the upkeep and maintenance on a 500 page book


00:55:12.560 --> 00:55:14.180
that covers a lot.


00:55:14.180 --> 00:55:16.180
- Yeah, yeah, that's awesome.


00:55:16.180 --> 00:55:17.860
- Yep.


00:55:17.860 --> 00:55:20.080
- Let's keep going.


00:55:20.080 --> 00:55:21.880
There's a couple of good comments and questions


00:55:21.880 --> 00:55:25.160
in the audience, but I think we're on a schedule.


00:55:25.160 --> 00:55:26.080
So let's keep going.


00:55:26.080 --> 00:55:26.920
- Yeah, yeah.


00:55:26.920 --> 00:55:29.840
Last comment about testing.


00:55:29.840 --> 00:55:32.080
I love it because I think that


00:55:32.080 --> 00:55:34.000
When you test your code, you learn things about your code


00:55:34.000 --> 00:55:36.320
that makes development better as well.


00:55:36.320 --> 00:55:38.060
So it's not just, does it work?


00:55:38.060 --> 00:55:41.960
It also gives you insight into how your code is working.


00:55:41.960 --> 00:55:44.260
Then looking forward to exploring more.


00:55:44.260 --> 00:55:45.760
All right, next point.


00:55:45.760 --> 00:55:48.440
Know what's good enough for any given project.


00:55:48.440 --> 00:55:50.920
As a teacher, students would say like,


00:55:50.920 --> 00:55:52.800
am I done? Am I done? Is this good enough?


00:55:52.800 --> 00:55:55.280
And I watch other teachers say,


00:55:55.280 --> 00:55:57.920
like, don't ask me that, I always work harder.


00:55:57.920 --> 00:56:00.360
And I always tell students, that's a great question.


00:56:00.360 --> 00:56:02.000
What is good enough?


00:56:02.000 --> 00:56:05.140
And so whatever your project is, knowing your benchmark


00:56:05.140 --> 00:56:06.880
for what's good enough and what it's done,


00:56:06.880 --> 00:56:08.760
when you can move on to the next thing,


00:56:08.760 --> 00:56:12.740
is really helpful because you'll never write perfect code.


00:56:12.740 --> 00:56:15.640
But you can certainly write good enough code.


00:56:15.640 --> 00:56:20.960
Yeah, there was a really popular article, blog post,


00:56:20.960 --> 00:56:26.040
something like that, that was you're not Facebook,


00:56:26.040 --> 00:56:29.480
you're not Google, you're not Microsoft, you're not LinkedIn,


00:56:29.480 --> 00:56:31.760
something along those lines.


00:56:31.760 --> 00:56:36.000
And the admonishment or the advice there was,


00:56:36.000 --> 00:56:38.800
you might read about how somebody like Google


00:56:38.800 --> 00:56:42.560
has all these containers doing all this scale out


00:56:42.560 --> 00:56:46.800
and failover and geo location.


00:56:46.800 --> 00:56:51.240
Your app that manages reporting for managers


00:56:51.240 --> 00:56:54.040
at your company, there's five managers


00:56:54.040 --> 00:56:55.960
and they do it once a week.


00:56:55.960 --> 00:56:59.800
You don't need global scale out techniques.


00:56:59.800 --> 00:57:03.600
You don't need the zero downtime that containers offer.


00:57:03.600 --> 00:57:06.040
You don't need load balancers.


00:57:06.040 --> 00:57:08.280
Like none of that stuff applies to you.


00:57:08.280 --> 00:57:12.200
And so, in fact, I would say if you start applying those things to it,


00:57:12.200 --> 00:57:15.240
you make your application harder to deploy,


00:57:15.240 --> 00:57:19.640
you make it harder for other people and your team to work on,


00:57:19.640 --> 00:57:22.640
you make it less good for that situation.


00:57:22.640 --> 00:57:27.400
But at Google scale, the opposite is true.


00:57:27.400 --> 00:57:29.960
It's less good if it doesn't have those things.


00:57:29.960 --> 00:57:33.960
And so it's not just, "Well, this is a crappy project,


00:57:33.960 --> 00:57:36.680
so it gets crappy level CS attention."


00:57:36.680 --> 00:57:42.560
It's a small project, so it can be written and managed


00:57:42.560 --> 00:57:45.840
and worked on in a way that allows for,


00:57:45.840 --> 00:57:51.200
optimizes for small teams, not optimize it for uptime,


00:57:51.200 --> 00:57:53.880
and all those kinds of things, so that you can make it


00:57:53.880 --> 00:57:55.600
work better in that situation.


00:57:55.600 --> 00:57:59.440
And so I totally agree, knowing what is good enough


00:57:59.440 --> 00:58:02.400
is super important, but what is good enough


00:58:02.400 --> 00:58:04.560
is not like a spectrum.


00:58:04.560 --> 00:58:05.920
Like I'm at the really good level.


00:58:05.920 --> 00:58:08.360
It's like you've got to-- it's a multidimensional thing.


00:58:08.360 --> 00:58:11.120
Like you're at a good level for the context that you're in,


00:58:11.120 --> 00:58:13.040
the situation you're in.


00:58:13.040 --> 00:58:15.440
Hey, you're walking right into bullet point--


00:58:15.440 --> 00:58:18.160
or tip number eight, I think it is.


00:58:18.160 --> 00:58:19.640
Yeah, you are.


00:58:19.640 --> 00:58:21.700
Yeah, that's embrace refactoring.


00:58:21.700 --> 00:58:24.520
And so my notes about this was that good enough


00:58:24.520 --> 00:58:26.200
is situational.


00:58:26.200 --> 00:58:27.680
So when a project proves its worth,


00:58:27.680 --> 00:58:31.440
like say you have an idea for a project, you build it out,


00:58:31.440 --> 00:58:35.440
you get an MVP functional, and you've


00:58:35.440 --> 00:58:39.760
reached your good enough to see whether the idea works,


00:58:39.760 --> 00:58:43.280
if nobody ever uses it, it doesn't catch on, it worked,


00:58:43.280 --> 00:58:46.040
it was interesting, but it's just not catching on,


00:58:46.040 --> 00:58:48.280
you move on, move on to something else.


00:58:48.280 --> 00:58:51.760
But if that product has started to gain interest,


00:58:51.760 --> 00:58:54.180
now good enough moves.


00:58:54.180 --> 00:58:56.420
And so maybe it needs to be more efficient.


00:58:56.420 --> 00:58:58.820
Maybe it needs more testing.


00:58:58.820 --> 00:59:01.020
Maybe it needs to be deployed in a different way.


00:59:01.020 --> 00:59:05.580
And so refactoring, tied in with that idea of what is good


00:59:05.580 --> 00:59:09.300
enough, is the road for evolving a project.


00:59:09.300 --> 00:59:11.380
And all of these projects that we're talking about,


00:59:11.380 --> 00:59:14.540
the well-established ones, the Googles, the Fangs,


00:59:14.540 --> 00:59:17.220
those projects are constantly shifting


00:59:17.220 --> 00:59:18.500
bars of what is good enough.


00:59:18.500 --> 00:59:21.340
And they're constantly being refactored in very careful ways


00:59:21.340 --> 00:59:24.840
to reach those new goals.


00:59:24.840 --> 00:59:27.820
- Yeah, I love that. - I love refactoring your tools.


00:59:27.820 --> 00:59:28.660
- Yeah, I do too.


00:59:28.660 --> 00:59:29.840
I think it's fantastic.


00:59:29.840 --> 00:59:33.320
So many people who are getting started


00:59:33.320 --> 00:59:34.420
will tell me things like,


00:59:34.420 --> 00:59:36.900
I'm not sure how to get started.


00:59:36.900 --> 00:59:39.980
I don't know what the best way to do this is.


00:59:39.980 --> 00:59:42.160
I'm thinking about it and I've tried something,


00:59:42.160 --> 00:59:43.900
but I wasn't sure.


00:59:43.900 --> 00:59:48.700
So I went back to thinking and the best way to get started


00:59:48.700 --> 00:59:50.460
is just give it a shot.


00:59:50.460 --> 00:59:51.820
just create something.


00:59:51.820 --> 00:59:53.860
You'll learn what of that is working


00:59:53.860 --> 00:59:55.780
and what is not ideal.


00:59:55.780 --> 00:59:57.740
And more importantly,


00:59:57.740 --> 00:59:59.280
something that's awesome about software


00:59:59.280 --> 01:00:00.400
is it's plastic, right?


01:00:00.400 --> 01:00:03.580
You can change it, plastic in the soft plastic way.


01:00:03.580 --> 01:00:07.780
You can evolve it as you learn more about it.


01:00:07.780 --> 01:00:10.060
You're like, oh, I thought that should have been


01:00:10.060 --> 01:00:12.300
separate module, but this should be just part of that class.


01:00:12.300 --> 01:00:15.060
So we're just gonna move that in through refactoring


01:00:15.060 --> 01:00:19.400
and not feeling like you have to have a full visibility


01:00:19.400 --> 01:00:22.600
of what you're working on to get started,


01:00:22.600 --> 01:00:26.280
I think that that's, maybe it sounds counterintuitive,


01:00:26.280 --> 01:00:28.380
but I feel like that's kind of an expert perspective.


01:00:28.380 --> 01:00:31.200
It's like, I think I need to go that way.


01:00:31.200 --> 01:00:32.920
We're gonna start down the path that way,


01:00:32.920 --> 01:00:36.600
and we're going to evolve and sort of course correct


01:00:36.600 --> 01:00:40.240
as we go rather than completely stressing


01:00:40.240 --> 01:00:42.060
about how do I get started?


01:00:42.060 --> 01:00:44.320
How do I see the whole end line


01:00:44.320 --> 01:00:45.620
before I start writing it?


01:00:46.800 --> 01:00:49.480
And this is part of why this is not a countdown.


01:00:49.480 --> 01:00:53.360
Because, for example, if you have even a small set of tests


01:00:53.360 --> 01:00:57.280
that test your final output, refactoring is easy.


01:00:57.280 --> 01:00:58.280
It's fun.


01:00:58.280 --> 01:01:01.000
Because if your tests break and you don't like the idea,


01:01:01.000 --> 01:01:04.200
you can go back to where you started.


01:01:04.200 --> 01:01:05.160
Yeah.


01:01:05.160 --> 01:01:06.120
Yeah.


01:01:06.120 --> 01:01:07.800
Another fun thing about refactoring


01:01:07.800 --> 01:01:10.840
is the whole concept of code smells.


01:01:10.840 --> 01:01:13.760
And I think becoming an expert, there's


01:01:13.760 --> 01:01:16.360
a lot to be learned from the code smells.


01:01:16.360 --> 01:01:19.200
And the idea of the code smells is the code works,


01:01:19.200 --> 01:01:20.720
but there's something a little bit off.


01:01:20.720 --> 01:01:21.880
It kind of makes your nose turn up.


01:01:21.880 --> 01:01:24.320
You're like, oh, oh, okay.


01:01:24.320 --> 01:01:26.000
Yeah, I guess it works, but oh, right.


01:01:26.000 --> 01:01:28.840
You know, it's just kind of an ooh.


01:01:28.840 --> 01:01:33.840
And there's a lot of lessons of how things get out of control


01:01:33.840 --> 01:01:36.520
and they get into a bad state and how do you fix them.


01:01:36.520 --> 01:01:39.000
And having that intuition, I think is great.


01:01:39.000 --> 01:01:42.360
So some of the code smells are like long method,


01:01:42.360 --> 01:01:44.340
method with too many arguments.


01:01:44.340 --> 01:01:49.340
Probably my favorite is code comments


01:01:49.340 --> 01:01:52.340
because you hear you should comment code all the time


01:01:52.340 --> 01:01:55.340
and there should be for places that need a comment,


01:01:55.340 --> 01:01:59.340
there should be comments or help strings, whatever.


01:01:59.340 --> 01:02:04.340
But a lot of times, code comments are deodorant


01:02:04.340 --> 01:02:06.340
for these code smells.


01:02:06.340 --> 01:02:09.340
It's like, "Oh, this is kind of gross.


01:02:09.340 --> 01:02:11.340
Let me make a comment about why it's gross."


01:02:11.340 --> 01:02:14.100
or this is poorly named, people won't know what this is,


01:02:14.100 --> 01:02:16.500
so let me make a comment about what it is.


01:02:16.500 --> 01:02:18.980
And halfway through that comment, you should realize,


01:02:18.980 --> 01:02:23.580
"Oh, what if I just named it the thing I'm trying to tell people it does?"


01:02:23.580 --> 01:02:27.180
Then I don't even need a comment because it has a really good name


01:02:27.180 --> 01:02:29.180
that is its own thing.


01:02:29.180 --> 01:02:34.140
So, poor names, too many parameters, all these things are deodorant,


01:02:34.140 --> 01:02:38.580
and you're trying to justify how gross this part of your code is.


01:02:38.580 --> 01:02:41.000
Like maybe you could just apply some of these refactoring


01:02:41.000 --> 01:02:43.920
techniques to make them better.


01:02:43.920 --> 01:02:45.720
Not going into a whole refactoring detail,


01:02:45.720 --> 01:02:49.000
but I really, really like this idea.


01:02:49.000 --> 01:02:51.800
>>Yeah, I read a lot of exploratory code,


01:02:51.800 --> 01:02:53.760
so you're describing a lot of my work.


01:02:53.760 --> 01:02:56.400
But because I'm fine with refactoring and enjoy it,


01:02:56.400 --> 01:02:59.160
and I'm comfortable with tests, that workflow works.


01:02:59.160 --> 01:03:01.000
And I think it can work for a lot of people.


01:03:01.000 --> 01:03:02.280
>>Yeah, sure, sure.


01:03:02.280 --> 01:03:05.040
Well, and those things don't necessarily


01:03:05.040 --> 01:03:05.800
start out that way.


01:03:05.800 --> 01:03:08.760
The long method didn't necessarily start out long.


01:03:08.760 --> 01:03:11.480
It grew and grew until it was a monster.


01:03:11.480 --> 01:03:13.320
Same thing with too many arguments.


01:03:13.320 --> 01:03:14.840
It probably started out with one or two,


01:03:14.840 --> 01:03:16.520
but then now we need this other one.


01:03:16.520 --> 01:03:17.360
And what about that?


01:03:17.360 --> 01:03:19.840
And then all of a sudden it's like, again, a monster.


01:03:19.840 --> 01:03:22.800
Right, and so it's an evolution.


01:03:22.800 --> 01:03:24.200
- And it's long because it works.


01:03:24.200 --> 01:03:27.280
And so at some point you paused and cleaned it up,


01:03:27.280 --> 01:03:29.080
make sure it still works.


01:03:29.080 --> 01:03:31.240
All right, number nine, write things down.


01:03:31.240 --> 01:03:33.680
Yeah, write things down.


01:03:33.680 --> 01:03:35.920
And I don't say that as a writer.


01:03:35.920 --> 01:03:39.840
Writing for me, I started writing when I was young


01:03:39.840 --> 01:03:41.360
because I saw somebody else write a journal


01:03:41.360 --> 01:03:43.160
and I was like, "Oh, I'm gonna try writing."


01:03:43.160 --> 01:03:48.160
And so I've just written things all my life


01:03:48.160 --> 01:03:50.480
and most of it is messy and some of it,


01:03:50.480 --> 01:03:53.020
very small amount of what I've written has been polished


01:03:53.020 --> 01:03:54.620
and put out in the public world.


01:03:54.620 --> 01:03:58.520
But I have found that almost everybody I talk to


01:03:58.520 --> 01:04:01.680
who writes in some way, not for public,


01:04:01.680 --> 01:04:06.080
but writes in some way, enjoys their work a little more


01:04:06.080 --> 01:04:07.260
and does a little better.


01:04:07.260 --> 01:04:09.920
My suggestions are things like keep an ideas notebook.


01:04:09.920 --> 01:04:15.200
Once you know how to build things,


01:04:15.200 --> 01:04:16.200
ideas come to you and you're like,


01:04:16.200 --> 01:04:18.200
"Oh, I could make that at some point."


01:04:18.200 --> 01:04:20.500
And if you have a place to record those ideas,


01:04:20.500 --> 01:04:22.800
when you're not sure what to do, you can go back to it.


01:04:22.800 --> 01:04:25.100
Write comments, despite what Michael said.


01:04:26.900 --> 01:04:32.740
Comments in a professional, well-established project


01:04:32.740 --> 01:04:35.140
with many collaborators are different than comments


01:04:35.140 --> 01:04:36.980
for your own new projects.


01:04:36.980 --> 01:04:39.060
So whatever you're doing, write comments.


01:04:39.060 --> 01:04:40.420
So do put the information in that


01:04:40.420 --> 01:04:45.100
needs to be in there to work and let them be cleaned up.


01:04:45.100 --> 01:04:46.460
[INTERPOSING VOICES]


01:04:46.460 --> 01:04:49.700
Yeah, I don't mean to say you shouldn't write comments.


01:04:49.700 --> 01:04:51.860
There's a lot of times where the point of the comment


01:04:51.860 --> 01:04:56.260
is to justify why something's bad.


01:04:56.260 --> 01:04:58.780
If that's the case, it probably doesn't need to be bad.


01:04:58.780 --> 01:05:03.140
But if it's help docs, if it's like, well,


01:05:03.140 --> 01:05:05.020
here's the different stuff that you could pass,


01:05:05.020 --> 01:05:06.780
and these are what we--


01:05:06.780 --> 01:05:08.860
there's certainly valid comments, no doubt.


01:05:08.860 --> 01:05:09.540
Yeah.


01:05:09.540 --> 01:05:11.940
So write comments to yourself and others.


01:05:11.940 --> 01:05:13.980
And even if nobody else is using your project,


01:05:13.980 --> 01:05:16.660
if it's something that might be shared at some point,


01:05:16.660 --> 01:05:17.620
those are good.


01:05:17.620 --> 01:05:18.940
Learn to write documentation.


01:05:18.940 --> 01:05:22.460
If you write an ideas notebook, if you write comments,


01:05:22.460 --> 01:05:24.380
documentation kind of flows out of that.


01:05:24.380 --> 01:05:26.040
It just becomes a more polished version


01:05:26.040 --> 01:05:27.260
of what you're writing.


01:05:27.260 --> 01:05:30.440
Write question sound when you're not sure about something.


01:05:30.440 --> 01:05:32.840
GitHub issues are amazing.


01:05:32.840 --> 01:05:36.020
I haven't used project management software


01:05:36.020 --> 01:05:39.880
because GitHub issues are so useful.


01:05:39.880 --> 01:05:41.560
And so--


01:05:41.560 --> 01:05:42.680
[INTERPOSING VOICES]


01:05:42.680 --> 01:05:44.360
No Microsoft project.


01:05:44.360 --> 01:05:45.440
Yeah, yeah.


01:05:45.440 --> 01:05:49.120
Even if you don't ever plan to write anything public,


01:05:49.120 --> 01:05:52.000
write about the code that you're working on.


01:05:52.000 --> 01:05:54.540
and write for yourself.


01:05:54.540 --> 01:05:57.600
And it will almost certainly benefit the work that you do.


01:05:57.600 --> 01:06:00.560
Writing helps you crystallize your thoughts


01:06:00.560 --> 01:06:05.400
and make sure you have them all coherent, right?


01:06:05.400 --> 01:06:05.960
Right.


01:06:05.960 --> 01:06:08.360
All right, last one.


01:06:08.360 --> 01:06:10.320
Big tip, and this is a fun one to close on.


01:06:10.320 --> 01:06:13.080
Go meet people.


01:06:13.080 --> 01:06:15.720
It has long been said about Python


01:06:15.720 --> 01:06:18.960
that I came for the language and stayed for the community.


01:06:18.960 --> 01:06:20.540
People have talked about that for years


01:06:20.540 --> 01:06:21.860
because it's still true.


01:06:21.860 --> 01:06:25.400
Join online communities, go to local, regional,


01:06:25.400 --> 01:06:28.140
national, international conferences when you can,


01:06:28.140 --> 01:06:31.380
go to coffee shops, ask questions, tell stories.


01:06:31.380 --> 01:06:33.900
You will meet good people like Michael.


01:06:33.900 --> 01:06:38.220
- And you, as we met at PyCon.


01:06:38.220 --> 01:06:40.740
So I think this is really good advice.


01:06:40.740 --> 01:06:44.500
I was thinking as I looked at your list


01:06:44.500 --> 01:06:48.820
that you are somebody who is not particularly metropolitan


01:06:48.820 --> 01:06:51.660
in terms of tons of user groups and meetups,


01:06:51.660 --> 01:06:53.420
I'm guessing, where you live.


01:06:53.420 --> 01:06:55.500
It's probably a little bit of an extra challenge


01:06:55.500 --> 01:06:57.860
being in Alaska, right?


01:06:57.860 --> 01:07:01.020
Yeah, it's actually-- I mean, I lived in New York City


01:07:01.020 --> 01:07:02.580
for seven years before I moved here.


01:07:02.580 --> 01:07:04.300
Right, as a contrast, right?


01:07:04.300 --> 01:07:06.580
Yes, yes.


01:07:06.580 --> 01:07:10.700
But most of my programming work, serious programming work,


01:07:10.700 --> 01:07:12.380
has been done while I've lived here.


01:07:12.380 --> 01:07:15.340
And yeah, I don't know anybody else here who programs.


01:07:15.340 --> 01:07:18.060
And so for me going to conferences,


01:07:18.060 --> 01:07:21.940
I talk about programming the entire time at conferences because I never get to in regular


01:07:21.940 --> 01:07:22.940
life.


01:07:22.940 --> 01:07:29.780
But yeah, the -- >> Honestly, that's true for me as well.


01:07:29.780 --> 01:07:33.820
Even though I'm here in Portland and we have user groups and there are plenty of people


01:07:33.820 --> 01:07:38.060
who do programming, it's not that different for me.


01:07:38.060 --> 01:07:42.500
Because I don't go to a company where I have a team of developers.


01:07:42.500 --> 01:07:47.700
Like the people I work with, it's as real as this meeting with you and me here on a


01:07:47.700 --> 01:07:50.740
video screen share sort of thing.


01:07:50.740 --> 01:07:57.140
And I think this is the story of more people than just if you live outside of some big


01:07:57.140 --> 01:07:58.140
metropolis.


01:07:58.140 --> 01:07:59.140
>> Yeah, yeah.


01:07:59.140 --> 01:08:00.140
Quick story.


01:08:00.140 --> 01:08:09.220
First time I went to PyCon, I was intimidated because I was a teacher and not a programmer.


01:08:09.220 --> 01:08:11.980
And so I thought I would not find my place.


01:08:11.980 --> 01:08:14.580
And I walked into the hotel the first night.


01:08:14.580 --> 01:08:17.980
And people pulled me right into conversation.


01:08:17.980 --> 01:08:22.800
And what I found was that roughly half the people who go to PyCon are primarily programmers


01:08:22.800 --> 01:08:24.580
looking for what to work on.


01:08:24.580 --> 01:08:28.880
And roughly half the people are people who care about some other domain than programming.


01:08:28.880 --> 01:08:33.020
And they're looking to use Python and programming to solve the problems they care about in their


01:08:33.020 --> 01:08:34.020
domain.


01:08:34.020 --> 01:08:35.220
And so it's true.


01:08:35.220 --> 01:08:38.500
Everybody has a place in the Python world.


01:08:38.500 --> 01:08:41.220
if you are respectful and appropriate to other people.


01:08:41.220 --> 01:08:44.340
And so if you're shy or intimidated


01:08:44.340 --> 01:08:46.140
about going out to meet people


01:08:46.140 --> 01:08:48.740
because you're not sure of your place,


01:08:48.740 --> 01:08:51.500
just go meet people and you will find your place.


01:08:51.500 --> 01:08:53.100
And it's magic.


01:08:53.100 --> 01:08:53.940
- Yeah.


01:08:53.940 --> 01:08:59.320
I think, hopefully I'm not misremembering this.


01:08:59.320 --> 01:09:01.900
I think almost half the people at PyCon this year


01:09:01.900 --> 01:09:03.220
were first time attendees.


01:09:03.220 --> 01:09:05.340
So if you're thinking, oh, I shouldn't go.


01:09:05.340 --> 01:09:06.580
- It was like 78.


01:09:07.580 --> 01:09:08.580
It was over half.


01:09:08.580 --> 01:09:09.580
It was like 80%.


01:09:09.580 --> 01:09:10.580
Yeah.


01:09:10.580 --> 01:09:11.580
Yeah.


01:09:11.580 --> 01:09:12.580
I was amazed.


01:09:12.580 --> 01:09:13.580
Yeah.


01:09:13.580 --> 01:09:19.780
I'm not sure how much of that's a COVID hangover sort of thing because there were not as many


01:09:19.780 --> 01:09:23.340
people who came as say in 2019.


01:09:23.340 --> 01:09:29.820
So maybe there were more PyCon curious folks than say the people who had been there for


01:09:29.820 --> 01:09:30.820
the last 10 years.


01:09:30.820 --> 01:09:32.860
Like, "I still want to skip this one."


01:09:32.860 --> 01:09:34.060
We'll see where it shapes up.


01:09:34.060 --> 01:09:37.380
there's a really high number, whatever that number turned out


01:09:37.380 --> 01:09:40.500
to be in the equilibrium, is that there's


01:09:40.500 --> 01:09:42.900
a ton of people at these types of events who are like,


01:09:42.900 --> 01:09:44.020
this is my first time here.


01:09:44.020 --> 01:09:46.360
So if you're concerned about going to these events


01:09:46.360 --> 01:09:49.540
and feeling like, oh, I'm going to be the one newbie


01:09:49.540 --> 01:09:52.980
and feel out of place, probably it's the opposite.


01:09:52.980 --> 01:09:58.460
Yeah, yep.


01:09:58.460 --> 01:10:01.620
Yeah, you end up with lifelong friends.


01:10:01.620 --> 01:10:02.180
Absolutely.


01:10:02.180 --> 01:10:03.900
People are in a great mood.


01:10:03.900 --> 01:10:05.300
They're on their geek holiday.


01:10:05.300 --> 01:10:06.220
It's all good.


01:10:06.220 --> 01:10:07.060
- Yes.


01:10:07.060 --> 01:10:09.300
- It's pretty easy to make friends


01:10:09.300 --> 01:10:10.820
and have a good time there.


01:10:10.820 --> 01:10:15.020
So that could be PyCon or EuroPython or something like that.


01:10:15.020 --> 01:10:16.400
Or it could just be a local.


01:10:16.400 --> 01:10:18.100
There's a lot of regional Python meetups


01:10:18.100 --> 01:10:21.020
like PyCascades here in the Pacific Northwest,


01:10:21.020 --> 01:10:25.100
PyTexas, PyOhio, all these things.


01:10:25.100 --> 01:10:29.380
And if none of those work for you,


01:10:29.380 --> 01:10:31.980
you know, there's forums like this, to be honest.


01:10:31.980 --> 01:10:38.700
like part of the reason I created the podcast was to kind of get to know people better in a way that


01:10:38.700 --> 01:10:45.900
I guess I knew wouldn't be possible for me, right? My goal was, well, where do I go find the podcast


01:10:45.900 --> 01:10:49.100
to listen to to do this? And then there was none. I was like, all right, fine, I'll create the


01:10:49.100 --> 01:10:54.620
podcast so we can do this. But my intent was just to listen to a podcast to kind of get to know


01:10:54.620 --> 01:11:00.300
people like this. It's a pretty one-way conversation as a podcast listener, not 100% as people seem in


01:11:00.300 --> 01:11:04.980
in the audience, but it's still valuable to like eavesdrop


01:11:04.980 --> 01:11:08.980
in a sense on these conversations if you're a new person.


01:11:08.980 --> 01:11:10.300
- Right, absolutely.


01:11:10.300 --> 01:11:11.220
- Yeah, yeah.


01:11:11.220 --> 01:11:13.500
All right, Eric.


01:11:13.500 --> 01:11:15.900
Well, what a fun conversation.


01:11:15.900 --> 01:11:18.340
Thank you for the awesome list.


01:11:18.340 --> 01:11:22.020
And hopefully you've inspired a lot of people out there


01:11:22.020 --> 01:11:26.280
to make forward progress on this journey that they're on.


01:11:26.280 --> 01:11:29.100
- Well, thank you for having me.


01:11:29.100 --> 01:11:30.380
I've listened to you for a long time


01:11:30.380 --> 01:11:33.740
and really enjoyed your work and very happy to connect.


01:11:33.740 --> 01:11:35.060
- Yeah, same here.


01:11:35.060 --> 01:11:38.460
So final call to action, people are interested,


01:11:38.460 --> 01:11:40.060
maybe tell them how to check out your book,


01:11:40.060 --> 01:11:43.360
tell them how to put some of these ideas into action.


01:11:43.360 --> 01:11:48.020
- My book is "Python Crash Course" from No Starch Press.


01:11:48.020 --> 01:11:49.660
Third edition came out this year,


01:11:49.660 --> 01:11:52.580
and so everything works, it's good, I keep it updated.


01:11:52.580 --> 01:11:55.820
If you buy it, you get a copy with the newest updates.


01:11:55.820 --> 01:11:57.020
Yes.


01:11:57.020 --> 01:11:59.780
I also write weekly at MostlyPython,


01:11:59.780 --> 01:12:02.780
and that's mostlypython.substack.


01:12:02.780 --> 01:12:04.980
There are paid subscriptions, but there are also free


01:12:04.980 --> 01:12:05.500
subscriptions.


01:12:05.500 --> 01:12:08.820
And so the only advantage for paid subscriptions


01:12:08.820 --> 01:12:12.980
is that some posts are locked for six weeks.


01:12:12.980 --> 01:12:16.940
Everything I write, I want to be available to everyone.


01:12:16.940 --> 01:12:18.880
And so if you're curious about what


01:12:18.880 --> 01:12:23.500
I'm thinking about on a weekly basis, MostlyPython.


01:12:23.500 --> 01:12:24.900
Excellent.


01:12:24.900 --> 01:12:25.400
All right.


01:12:25.400 --> 01:12:26.320
- All right. - Well, thanks again


01:12:26.320 --> 01:12:27.200
for being here.


01:12:27.200 --> 01:12:28.040
See you later.


01:12:28.040 --> 01:12:29.160
Thanks everyone for listening.


01:12:29.160 --> 01:12:30.480
- Yes, thank you.

