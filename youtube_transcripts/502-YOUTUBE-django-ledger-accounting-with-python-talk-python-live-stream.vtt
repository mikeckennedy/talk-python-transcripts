WEBVTT

00:00:01.799 --> 00:00:03.960
Hey, Miguel. Welcome to Talk Python to Me.

00:00:04.440 --> 00:00:06.320
Hey, thank you, Michael, for having me.

00:00:07.400 --> 00:00:13.160
I'm excited to have you here. I'm looking forward to talking about Django stuff.

00:00:13.340 --> 00:00:22.700
You know, Django is certainly one of the premier and one of the longest vibrant web frameworks from the Python community.

00:00:22.880 --> 00:00:27.060
And you've got a really interesting project that you've created here, Django Ledger.

00:00:27.110 --> 00:00:28.900
So it's going to be a lot of fun to talk about it.

00:00:29.780 --> 00:00:32.240
Yeah, absolutely. Let's do it.

00:00:32.700 --> 00:00:33.280
Yeah, let's do it.

00:00:33.780 --> 00:00:42.100
Now, before we dive into accounting and all of those things, let's first talk about you, your background.

00:00:43.000 --> 00:00:54.620
I know it's a little bit specialized, and actually I think a little bit of your history really is kind of a case study of things that I say, like really help people do lots with software and Python.

00:00:54.900 --> 00:00:55.080
So

00:00:55.080 --> 00:00:55.800
let's

00:00:55.800 --> 00:00:56.260
dive into it.

00:00:56.300 --> 00:00:56.420
Yeah.

00:00:57.080 --> 00:00:57.540
No, absolutely.

00:00:58.340 --> 00:01:07.840
So, yeah, absolutely. This is Miguel Sanda. So this is, you know, I'm the lead developer and the creator of Django Ledger.

00:01:08.410 --> 00:01:16.460
I have been working on that project for quite some time now. It has been going through several different iterations and the evolution is quite interesting.

00:01:17.120 --> 00:01:27.500
But as far as my professional background, I have about nine years of experience in the finance sector, specifically in the nuclear construction sector here in the United States.

00:01:28.060 --> 00:01:30.460
That was my beginnings in the finance sector.

00:01:31.100 --> 00:01:34.440
After that experience, I became a data scientist.

00:01:34.850 --> 00:01:48.320
So, and I joined one of the largest utilities in the United States as a data scientist to work on power distribution and generation analytics and engineering stuff for quite some time.

00:01:49.880 --> 00:01:51.780
So, I got about eight years there.

00:01:53.040 --> 00:01:58.080
And from an educational background, I have a background in engineering and business.

00:01:58.760 --> 00:01:59.620
So, yeah, I know.

00:01:59.820 --> 00:02:01.200
It's such a crazy thing.

00:02:02.060 --> 00:02:08.460
I always say I went back into programming just because I wanted to make my hobby my career.

00:02:09.239 --> 00:02:10.399
And here I am.

00:02:10.690 --> 00:02:17.960
And about two years ago, me and my wife, we founded Edma Group, which is an accounting and financial planning firm.

00:02:18.360 --> 00:02:23.360
It is focused on small business and real estate investors.

00:02:24.200 --> 00:02:28.240
So we basically help them put together a plan for their business.

00:02:28.440 --> 00:02:33.880
We take care of the bookkeeping, the accounting, and we work on all sort of financial-related stuff with them.

00:02:34.720 --> 00:02:36.940
So yeah, in a nutshell, that's what it is.

00:02:38.140 --> 00:02:39.480
What a wild mix, huh?

00:02:39.920 --> 00:02:40.140
Yeah.

00:02:40.480 --> 00:02:42.100
I was going

00:02:42.100 --> 00:02:47.800
to ask you if it's stressful to work on accounting software, but then you mentioned nuclear.

00:02:49.739 --> 00:02:53.580
the consequences are way higher on nuclear than they are on accounting

00:02:54.160 --> 00:03:02.920
that's right yeah so uh yeah i work i work on a lot of like financials and stuff related to nuclear construction um a lot of regulatory stuff there

00:03:02.920 --> 00:03:03.580
going

00:03:03.580 --> 00:03:04.060
on but yeah

00:03:04.060 --> 00:03:05.880
oh there's got to be

00:03:05.880 --> 00:03:06.740
yeah

00:03:07.460 --> 00:03:10.120
there's got to be a crazy amount of regulation there yeah

00:03:10.120 --> 00:03:37.980
yeah yeah it's interesting you know especially when it comes from financial reporting standpoint, a lot of the financial gymnastics that had to happen in order to properly report financials in that sector, it had to do a lot with understanding the nuclear side of things and the energy generation side of things and also the accounting and finance side of things.

00:03:38.180 --> 00:03:40.220
So it was a very interesting experience there.

00:03:40.580 --> 00:03:41.260
Yeah, I'm sure it was.

00:03:42.920 --> 00:03:44.640
Let's talk about nuclear just for a second.

00:03:44.860 --> 00:03:49.440
So are you bullish on nuclear?

00:03:49.530 --> 00:03:52.480
Do you think nuclear has an important role to play here?

00:03:52.740 --> 00:03:58.400
To me, it's such a contradiction of trade-offs.

00:03:58.700 --> 00:04:04.439
On one hand, we have to get rid of pumping carbon into the atmosphere now.

00:04:05.480 --> 00:04:05.540
You

00:04:05.540 --> 00:04:05.800
know what I mean?

00:04:06.200 --> 00:04:08.580
And there's no better option than nuclear.

00:04:08.920 --> 00:04:09.900
Like, not even close.

00:04:11.100 --> 00:04:25.060
On the other hand, at least the way nuclear is done in the United States today, so much of the history comes from let's build these power plants that, oh, also generate plutonium for our nuclear weapon program.

00:04:27.000 --> 00:04:33.640
And so they didn't make tradeoffs necessarily that were safer or would store the waste in a better, less dangerous way.

00:04:33.990 --> 00:04:38.700
It was more about like, well, let's get this cool, really reactive thing that comes off.

00:04:38.780 --> 00:04:44.700
And I know there's a ton of work with thorium and other things to make it kind of take a different path.

00:04:45.780 --> 00:04:47.560
But I don't know how far we've taken that path.

00:04:47.610 --> 00:04:48.500
How do you feel about nuclear?

00:04:48.530 --> 00:04:52.440
Are you for or against it, both like me?

00:04:52.900 --> 00:04:54.240
It is a double-edged sword.

00:04:54.840 --> 00:05:04.380
I think nuclear, in principle, is a very clean source of energy if done properly, if done correctly, of course.

00:05:05.440 --> 00:05:13.480
Obviously, the downside of that is, you know, you're dealing with something that could potentially be catastrophic if it's not controlled properly.

00:05:14.300 --> 00:05:22.640
So, you know, working nuclear back in about 15 years ago, technology was very different.

00:05:22.810 --> 00:05:26.200
So the new generation of plants were being built in China and the United States.

00:05:26.960 --> 00:05:35.560
So they've relied on a lot of many different mechanisms to kind of like control something like that.

00:05:36.370 --> 00:05:41.020
Very different from the nuclear power plants that were built along, you know, about decades ago.

00:05:42.060 --> 00:05:46.260
But I think from an energy source standpoint, it's very clean.

00:05:47.120 --> 00:06:00.940
Obviously, it comes down to how well it is monitored and controlled to make sure that we don't end up harming the environment or human lives or anything like that.

00:06:01.100 --> 00:06:02.780
So I live nearby my home.

00:06:02.940 --> 00:06:04.220
There's four nuclear power plants.

00:06:05.240 --> 00:06:06.980
Yeah, there's actually quite a few in the southeast.

00:06:07.560 --> 00:06:08.260
That's right.

00:06:08.360 --> 00:06:11.580
So, you know, you have that five mile radius, 15 mile radius.

00:06:11.640 --> 00:06:16.860
And these are the power plants that were built back in the 70s or a long time ago.

00:06:17.480 --> 00:06:20.240
So, yeah, I mean, like I said, it's a double-edged sword.

00:06:20.600 --> 00:06:23.960
There's no right or wrong answer to that, but I feel like it's very reliable.

00:06:24.620 --> 00:06:36.300
And from a power distribution standpoint, it is always a good base load to have because it's kind of like that permanent capacity that you have

00:06:36.300 --> 00:06:36.580
there.

00:06:37.450 --> 00:06:42.760
And then you have other things like pickers and stuff like that that come into play when demand goes up.

00:06:45.140 --> 00:06:45.200
Yeah.

00:06:45.220 --> 00:06:52.720
Yeah, I'd be all for it as soon as we have fail safe instead of fail explosive sort of things, you know, like

00:06:52.720 --> 00:06:53.760
salt reactors

00:06:53.760 --> 00:06:57.580
that like drain themselves rather than overheat and explode and so on.

00:06:57.640 --> 00:06:57.800
But

00:06:57.800 --> 00:06:59.120
not that this is a

00:06:59.120 --> 00:06:59.700
nuclear show.

00:06:59.740 --> 00:07:02.880
I think it's just, you know, you're so close to it and it's such an interesting,

00:07:03.760 --> 00:07:04.120
we're

00:07:04.120 --> 00:07:04.140
at

00:07:04.140 --> 00:07:05.100
such a decision point.

00:07:06.200 --> 00:07:13.500
Yeah, but I have to say the new generation, my understanding is it's much smaller, it's safer, it's more of a controlled environment.

00:07:14.440 --> 00:07:21.100
So, you know, my understanding is that they're doing good research and good, you know, advancements in that area.

00:07:21.380 --> 00:07:24.760
But it's, like I said, it's been a while since I've been in nuclear, so I can't speak to that.

00:07:25.240 --> 00:07:25.600
Yeah, yeah.

00:07:25.670 --> 00:07:31.920
I feel like there's a lot of regulation, a lot of old perceptions that are going to keep regulation super hard for it.

00:07:32.020 --> 00:07:32.580
But, yeah.

00:07:33.600 --> 00:07:34.320
Let's talk accounting.

00:07:35.000 --> 00:07:35.660
Yeah, absolutely.

00:07:36.420 --> 00:07:37.060
Let's talk accounting.

00:07:37.230 --> 00:07:37.600
Switch gears.

00:07:38.880 --> 00:07:39.620
Yeah, for sure.

00:07:40.620 --> 00:07:51.040
So for your project, I think maybe let's talk a little bit of just a tiny bit of the history of accounting, double entry accounting, these types of things.

00:07:51.500 --> 00:07:54.680
All this stuff, this is not new technology in a sense.

00:07:54.960 --> 00:08:00.120
It comes from 1494, some of these ideas here.

00:08:01.900 --> 00:08:02.920
But people used to do it with paper.

00:08:03.300 --> 00:08:08.360
And now you're building cool projects with Python and Django to do it.

00:08:08.780 --> 00:08:09.060
Yeah.

00:08:10.300 --> 00:08:12.080
So I guess what did you use?

00:08:12.700 --> 00:08:14.940
It sounds like you've done a ton of financial stuff.

00:08:15.120 --> 00:08:19.480
What did you use at different stages in your career that weren't this?

00:08:19.660 --> 00:08:22.020
What was the history that led up to your experience to build this?

00:08:22.370 --> 00:08:23.240
Well, yeah, absolutely.

00:08:23.580 --> 00:08:27.700
So like I said, I started working in the accounting and finance sector.

00:08:28.280 --> 00:08:30.460
But at some point, I started kind of like creating.

00:08:30.920 --> 00:08:32.719
Me and my wife were also entrepreneurs.

00:08:33.080 --> 00:08:34.659
So we started our own businesses.

00:08:35.000 --> 00:08:46.560
And obviously, when you're a data scientist and you know all these Python and I knew Django, I kind of wanted to start my own bookkeeping of my own businesses using Django.

00:08:47.800 --> 00:08:49.800
I can do this thing on my own.

00:08:51.150 --> 00:08:55.120
So I started creating this project back in 2018, something like that.

00:08:55.280 --> 00:08:57.120
The report went live in 2020.

00:08:58.280 --> 00:09:00.200
But it was my way of keeping my own books.

00:09:00.550 --> 00:09:01.740
It was kind of like my journal.

00:09:02.900 --> 00:09:11.600
I was just adding transactions to it, looking at the back statement, keeping my own bookkeeping so I could do my own taxes and my own monitoring of my business.

00:09:12.360 --> 00:09:13.900
So that's how it started, right?

00:09:14.380 --> 00:09:21.480
And eventually it started growing and growing and growing and I added an interface and I created the Django views and things like that.

00:09:22.640 --> 00:09:27.560
And at some point I felt like it was mature enough to share it with the world.

00:09:28.480 --> 00:09:33.020
So I posted it back and published it on GitHub back in 2020.

00:09:34.240 --> 00:09:35.680
But it was very early stages.

00:09:36.020 --> 00:10:08.720
know it was buggy uh it was but by any means it wasn't you know ready for any production environment or anything like that but throughout the years you know i kind of dedicated some time to it until it grew uh to the point where you know it is today so uh and that is because you know i've i've dedicated you know a lot of time to it a lot of research involved um and uh and yeah so it's been interesting. So it's been quite a while. It's not a small project by any means.

00:10:10.200 --> 00:10:13.600
No, no, it's definitely not. It's got a good mix of technology here.

00:10:16.160 --> 00:10:22.920
Got a decent number of contributors. That's great. A thousand GitHub stars. So it's certainly got some momentum here. That's fantastic.

00:10:27.180 --> 00:10:36.860
Are you using, you said you're starting this, or you have started this independent firm to do bookkeeping and accounting for other companies.

00:10:37.270 --> 00:10:41.420
Are you using this as part of it, or is it still something you're using personally?

00:10:42.560 --> 00:10:47.480
I use Django Ledger to, because there's different use cases of the software, right?

00:10:47.640 --> 00:10:56.020
So it's not just bookkeeping for, you know, if you wanted to keep the books of a certain firm or a certain company, right?

00:10:56.760 --> 00:10:58.820
The way I use it is I run simulations.

00:10:59.540 --> 00:11:10.360
So basically what I do is, you know, If I have a client that needs some, we need to implement some sort of financial plan, you know, I've had, you know, like what's called blueprints.

00:11:10.640 --> 00:11:18.380
You know, in the software, you write something that is called blueprints that help you make, you know, like dispatch transactions and things like that.

00:11:18.540 --> 00:11:34.200
So I use it to run simulations, basically, and present financial plans to small businesses and business owners and present them in a way that is obviously visually appealing and things like that.

00:11:34.210 --> 00:11:36.660
But all the background is done in Django Ledger.

00:11:37.230 --> 00:11:42.660
So that's one of the ways I use it, in addition to keeping the books of one of my businesses.

00:11:44.500 --> 00:11:44.640
Nice.

00:11:45.820 --> 00:11:54.840
Yeah, there's nothing like actually using it in production for real use cases that makes you realize something.

00:11:55.080 --> 00:11:56.580
Well, maybe that's not perfect.

00:11:56.880 --> 00:11:58.180
You're like, oh, no, that needs to change.

00:11:58.960 --> 00:12:00.020
This isn't going to work, right?

00:12:00.030 --> 00:12:00.640
You really run

00:12:00.640 --> 00:12:00.980
into the

00:12:00.980 --> 00:12:02.400
real world quickly that way.

00:12:02.820 --> 00:12:02.960
Yeah.

00:12:04.050 --> 00:12:10.860
There are use cases for, you know, you could use Django Ledger, for instance, if you had a startup.

00:12:11.400 --> 00:12:33.940
or you had something that requires you to keep the books updated, or if you wanted real-time analysis of how your business is going, Django Ledger is a good solution to that because you could, you know, one of the benefits of Django Ledger is to being intentional about financial transactions of your business, right?

00:12:34.120 --> 00:12:46.680
So usually how it works is you have an application that has some sort of like a single entry database, where you record transactions, but those transactions, they do have a ripple effect, right?

00:12:46.750 --> 00:12:49.320
They do have a ripple effect in the financial statements.

00:12:49.830 --> 00:12:55.700
And usually a bookkeeper or an accountant needs to come in later and piece it all together, right?

00:12:55.820 --> 00:13:00.400
In order to produce financial statements or preparatory taxes or things like that.

00:13:00.800 --> 00:13:03.860
But Django Ledger Bridges kind of like closes that gap.

00:13:05.080 --> 00:13:08.640
It is intentional from the moment the transaction is created.

00:13:08.880 --> 00:13:18.020
So you can always get financial statements pretty much on real time if you had a financial driven application that you'd like to use Django Ledger for.

00:13:20.220 --> 00:13:23.460
Yeah, I don't know that I've actually given you a chance to properly introduce it.

00:13:23.800 --> 00:13:28.820
You know, how would you tell, you know, what's the elevator pitch for Django Ledger?

00:13:30.080 --> 00:13:31.620
What projects do you work on?

00:13:33.860 --> 00:13:38.220
Yeah, so I mean, Django Ledger is a financial framework.

00:13:38.800 --> 00:14:42.100
what I would say. It's a financial framework on top of other frameworks. So what I would say Django Ledger is, it leverages Django as a framework, all the security, everything you want to leverage, everything Django is famous for. But on top of that, Django Ledger is the financial framework on top of Django. So what you do is basically, you don't have to figure out, you don't have to bring bend the wheel when it comes to you know the double entry accounting system right uh what you do is you know if you had a team of developers and you had a team of accountants or finance people you know they can work right off the bat right away using something like Django Ledger because there's a common interface for that for both of those worlds to to interact right uh so Django Ledger saves a lot of time when it comes to developing a financially driven application that developers can use from a software development standpoint and from an application logic standpoint.

00:14:42.530 --> 00:14:49.620
But at the same time, it also helps accountants keep the financial behavior updated.

00:14:50.480 --> 00:14:52.600
And it's all based on Python functions, which is

00:14:52.600 --> 00:14:53.120
pretty simple.

00:14:54.120 --> 00:14:54.920
Yeah, that's really neat.

00:14:55.660 --> 00:15:01.960
So the name here is, or the subtitle is, Object-Oriented Accounting Engine.

00:15:03.340 --> 00:15:11.420
So is Django Ledger a finished application, or is it a library that I plug into my application?

00:15:12.600 --> 00:15:18.760
Is it ready to go out of the box, or is it a framework to build my accounting engine?

00:15:19.480 --> 00:15:21.080
Yeah, it can be both.

00:15:22.260 --> 00:15:25.140
You can use it out of the box.

00:15:25.560 --> 00:15:31.700
as a replacement for, as a very basic replacement for commercially available software.

00:15:32.300 --> 00:15:36.340
I don't want to mention any of those, but you could go online and find accounting software.

00:15:36.600 --> 00:15:37.340
You'll find those.

00:15:38.360 --> 00:15:40.060
I've used a couple over the years.

00:15:40.680 --> 00:15:41.100
I could

00:15:41.100 --> 00:15:41.760
name them as well.

00:15:42.580 --> 00:15:44.620
So the foundation is there.

00:15:44.700 --> 00:15:47.980
You can go in there, you can create transactions, you can import your bank statements.

00:15:48.300 --> 00:15:53.920
So when I created Django Ledger, I wanted to provide some basic functionality from a UI standpoint.

00:15:54.280 --> 00:15:56.580
So you can manage your finances.

00:15:57.020 --> 00:16:00.440
But at the same time, you can use it as a library.

00:16:00.480 --> 00:16:01.540
You can extend.

00:16:01.740 --> 00:16:03.140
You can extend Django Ledger.

00:16:03.740 --> 00:16:20.520
And to your point, it's object-oriented accounting engine because you can use the models inside Django Ledger to extend and adapt your business logic to the models so you can pretty much create your own little financial world.

00:16:20.880 --> 00:16:21.860
So I'll give

00:16:21.860 --> 00:16:22.460
you an example.

00:16:22.860 --> 00:16:31.820
So if you're into real estate, for instance, you could kind of take the ledger model, extend it, and make it a rental property.

00:16:32.400 --> 00:16:40.060
Or if you are in, for instance, the farming business, you could create, let's say, hey, this is my tractor, right?

00:16:40.320 --> 00:16:42.760
Right, right, or crops and commodities and

00:16:42.760 --> 00:16:43.340
all

00:16:43.340 --> 00:16:47.140
the details of commodity trading and pricing and all that, right?

00:16:47.300 --> 00:16:47.860
That's right.

00:16:48.060 --> 00:16:54.820
So Django Ledger is unopinionated when it comes to that particular aspect of the finance and accounting sector.

00:16:56.420 --> 00:16:57.560
But you can extend it.

00:16:57.560 --> 00:17:06.160
Like I said, you can extend it and incorporate that domain-specific knowledge into the models and use the blueprints to dispatch things.

00:17:07.760 --> 00:17:08.620
Okay, interesting.

00:17:09.240 --> 00:17:24.079
So that sounds like if I'm creating a Django application and it's going to have a core financial or accounting component to it, bringing Django Ledger in could really make that work well, right?

00:17:25.060 --> 00:17:25.720
That's correct, yes.

00:17:26.060 --> 00:17:27.560
That can certainly help you with that.

00:17:28.020 --> 00:17:29.180
So how does that work?

00:17:29.740 --> 00:17:31.020
I guess, what are my options?

00:17:31.260 --> 00:17:42.640
Would I expose a subset of my application as effectively a styled Django Ledger sub-application, like you kind of can with the admin backend and stuff like that?

00:17:43.220 --> 00:17:52.400
Or would it be maybe I write my own UI, and then I just work with the models and some of the libraries that come with Django Ledger?

00:17:52.820 --> 00:17:53.360
Yes.

00:17:53.940 --> 00:18:12.120
So if you have an existing application, you can pull in Django Ledger, and pretty much you know, if you're using Django, you could either grab a Django model and kind of create a relationship with a ledger model or on an entity model, right? And, you know, integrate it that way.

00:18:12.370 --> 00:18:27.360
So, if you have an existing application, you can bring it in. Or, you know, you could use Django Ledger as the total foundation of your application, right? You could write APIs, you could write, all the things that you need to kind of integrate with other things.

00:18:28.000 --> 00:18:36.260
But you have plenty of options when it comes to bringing Django Ledger into your existing project or starting from scratch.

00:18:37.259 --> 00:18:37.820
Okay.

00:18:40.080 --> 00:18:41.620
What if I'm not doing Django?

00:18:43.219 --> 00:18:50.140
So there's, you know, what if I'm doing Flask, for example, but I still want to use it, right?

00:18:51.920 --> 00:18:52.700
out in the audience.

00:18:54.000 --> 00:18:54.520
We've got a question.

00:18:54.640 --> 00:18:56.120
Is it safe to run with Django Ninja?

00:18:56.240 --> 00:19:10.500
And more broadly, could I expose Django Ledger as basically an HTTP endpoint, HTTP service, and then just do that instead of directly working with the model?

00:19:10.860 --> 00:19:15.400
Have my app do its accounting over an internal API effectively?

00:19:17.340 --> 00:19:18.120
Yeah, absolutely.

00:19:18.400 --> 00:19:39.860
I think one option if you're not using Django as part of your stack is probably to create a microservice or, you know, or some sort of like a gRPC server or something like that, that you could expose a function, you know, and deploy the service separated from your main application and just dispatch these blueprints that way.

00:19:39.940 --> 00:20:11.560
right? So you could just go through an API endpoint, you know, or something like that that can help you integrate with existing applications, even if you're not using Python, you know, or anything like that, you know, like gRPC is really language agnostic, and I've done it. I've used Django Ledger with gRPC services to kind of like integrate it with other things, right? So you have everything that Python has to offer from a, you know, You have it at your disposal.

00:20:12.900 --> 00:20:13.560
Sure, of course.

00:20:13.690 --> 00:20:19.100
Yeah, I mean, just because my mind was in that place of like, well, other Python frameworks.

00:20:19.280 --> 00:20:21.200
So yeah, you could use it with anything, right?

00:20:21.300 --> 00:20:28.040
Because as long as it talks REST or it talks gRPC or whatever you want to expose it as, right?

00:20:28.820 --> 00:20:29.360
That's right, yep.

00:20:30.260 --> 00:20:30.420
Cool.

00:20:32.200 --> 00:20:42.020
Is there an API built into Django Ledger that we could already use or do we integrate, do we just say like, all right, we're going to add the behaviors we need on top of it.

00:20:43.640 --> 00:20:57.160
Yeah, currently it has a very basic API, and it's really being used to populate some of the charts that are part of the UI right now.

00:20:57.600 --> 00:20:57.900
I see.

00:20:58.060 --> 00:20:58.680
So if you've got

00:20:58.680 --> 00:21:01.920
maybe a JavaScript callback, you can get the data that way?

00:21:02.580 --> 00:21:02.780
Yes.

00:21:03.200 --> 00:21:08.800
It has a very basic, again, it has the, not to get nerdy here, but it has an income statement call.

00:21:09.160 --> 00:21:12.640
It has a, or a P&L, a balance sheet.

00:21:13.420 --> 00:21:19.380
It has a very basic API where you can request that financial data and it's parametized.

00:21:19.920 --> 00:21:28.780
So you can get it into your JavaScript world and kind of populate chart with, you know, with anything you want to use, like chart.js or, you know, or if you're using any other stack.

00:21:29.280 --> 00:21:38.680
So it does have some APIs built in, but it's not a full blown API, with a Crop2L thing.

00:21:40.440 --> 00:21:43.680
Honestly, that sounds good to me.

00:21:44.720 --> 00:21:49.700
So often I'll see frameworks or I'll see things like this.

00:21:49.710 --> 00:21:52.140
I'll say, well, it has a complete API.

00:21:52.460 --> 00:22:06.200
The complete API, what that means, especially with some of these will add API features to your app, is just we'll let people query the database directly, right?

00:22:06.470 --> 00:22:15.240
You know, like, oh, you can just hit this endpoint, and that's that table, and you put the query string as, like, the filter or whatever, and just, I don't know.

00:22:15.280 --> 00:22:18.920
That's never, it's always felt like a cop-out to me.

00:22:20.040 --> 00:22:27.860
Because whoever's running the application or building and controlling the application should have some say of, like, well, what are the actions you need to take here?

00:22:28.380 --> 00:22:32.740
And this action actually involves three tables, not just one.

00:22:32.790 --> 00:22:34.700
And it actually might also involve a transaction.

00:22:35.500 --> 00:22:43.940
which accounting is so often the most common example of why we need transactions and concurrency safety and all those things.

00:22:44.930 --> 00:22:45.080
So

00:22:45.080 --> 00:23:01.660
having that greater control, like let's suppose we're back to our farmer, like record the sale of some commodity or something, that might require multiple interactions.

00:23:01.790 --> 00:23:10.680
And you don't want to depend upon somebody calling the right API against your sort of generic database as an endpoint thing, right?

00:23:12.300 --> 00:23:12.760
That's right.

00:23:13.000 --> 00:23:19.340
So one of the things that Django Ledger has is this concept of financial middleware.

00:23:20.360 --> 00:23:24.500
So basically, there's separate stages.

00:23:24.860 --> 00:23:32.460
When you make a call from Django Ledger into the database, you're not pulling the raw Django model out of the database, right?

00:23:32.920 --> 00:23:36.000
The data is stored into separate different models.

00:23:36.090 --> 00:23:47.260
One of them is a transaction model, which stores, you know, kind of like it's like your account, your account, your financial account and the money that gets allocated via credit or a debit.

00:23:47.700 --> 00:23:49.800
But that is a very long form table.

00:23:50.550 --> 00:23:54.040
Just pulling transactions out of that table is not going to give you the answer.

00:23:54.150 --> 00:23:56.940
So basically, Django Ledger has different ledgers.

00:23:57.240 --> 00:24:05.380
Number one is aggregating the data, you know, or pushing as much work as possible to the database layer to aggregate those transactions.

00:24:05.710 --> 00:24:09.120
Right. So let the do database do what it's supposed to do.

00:24:09.130 --> 00:24:15.800
Right. So it aggregates to pull the minimum amount of data into the Python memory.

00:24:16.520 --> 00:24:19.480
And then there is another step, more steps there.

00:24:20.240 --> 00:24:23.760
There's aggregation going on. There's also accounting rules being applied.

00:24:23.980 --> 00:24:28.020
There's a financial middleware that applies, you know, all sorts of things.

00:24:28.380 --> 00:24:30.520
And then, which is called the digest process.

00:24:31.200 --> 00:24:38.260
And then once you pull that out, you will get a Python object, which is an IO context object.

00:24:38.760 --> 00:24:42.180
And that has all the data you need, like already sorted out.

00:24:42.440 --> 00:24:44.800
Everything is organized by account, everything.

00:24:45.460 --> 00:24:53.460
And at that point, that is the object that you can use for, you know, if you're developing APIs or you're making a gRPC call or whatever.

00:24:53.740 --> 00:25:00.420
So that's why, you know, in the context of Django Ledger, you don't go directly to the table because that is not efficient.

00:25:00.590 --> 00:25:09.500
So Django Ledger is solving a lot of those problems for you because it's aggregating the data in a nice way so you can take it from there and integrate it into your application.

00:25:10.540 --> 00:25:10.820
Yeah.

00:25:12.960 --> 00:25:15.560
And that's, yeah, that's exactly the kind of stuff I was thinking, right?

00:25:15.800 --> 00:25:20.420
You lose a lot of the value of the application if you just go straight to the database.

00:25:21.900 --> 00:25:22.560
That's right.

00:25:22.640 --> 00:25:27.220
And honestly, what Django Ledger is doing is applying those accounting rules.

00:25:27.450 --> 00:25:37.780
So you have kind of like a gap, it's called a gap-compliant output, general accounting principle rules that are kind of like the best practices.

00:25:38.360 --> 00:25:42.560
So from that point going forward, you can share it with the world pretty much.

00:25:43.220 --> 00:25:43.400
Nice.

00:25:44.130 --> 00:25:44.260
Okay.

00:25:46.060 --> 00:25:50.700
So I guess back to the original question, Django Ninja would be fine to use?

00:25:51.380 --> 00:25:51.620
Yeah.

00:25:52.400 --> 00:25:52.500
Yeah.

00:25:52.520 --> 00:25:52.540
Yeah.

00:25:53.160 --> 00:25:53.360
Yeah.

00:25:54.100 --> 00:25:55.280
Or Django REST framework, maybe.

00:25:56.020 --> 00:25:57.740
Django REST framework, Django Ninja.

00:25:57.900 --> 00:26:01.580
You could use, I've used even GraphQL frameworks.

00:26:02.320 --> 00:26:08.840
So if you can define your schema and you can do code first or schema first, whichever you prefer.

00:26:09.580 --> 00:26:16.540
I feel like the ones that are code first will give you that GraphQL schema right off the bat.

00:26:18.260 --> 00:26:27.520
So you could use, I can't remember the name, but I think it's Ariadne or there's two Django frameworks that are GraphQL.

00:26:29.300 --> 00:26:35.020
So I've used both of them and there's plenty of them, but you can integrate any API.

00:26:35.520 --> 00:26:37.060
gRPC, GraphQL, REST framework.

00:26:38.780 --> 00:26:40.160
Message pack, you name it, right?

00:26:40.160 --> 00:26:41.800
You can do whatever you want, right?

00:26:42.000 --> 00:26:43.300
Whatever you want, pretty much.

00:26:43.960 --> 00:26:44.140
Okay.

00:26:47.060 --> 00:26:53.620
Is there a database backend limitation, or is there a database backend that you recommend?

00:26:53.990 --> 00:27:03.680
You know, it sounds like the more you ask the database to do, the more that might restrict which databases will actually work if it's not just straight crud, you know?

00:27:04.460 --> 00:27:04.840
Yeah.

00:27:05.130 --> 00:27:15.460
So I would say, since it's based on Django, so whatever database Django supports should be okay.

00:27:15.560 --> 00:27:20.180
I have used PostgreSQL for most of my projects.

00:27:20.380 --> 00:27:22.060
PostgreSQL works extremely well.

00:27:23.040 --> 00:27:27.600
Even on development, you use SQLite, and it works extremely well as well.

00:27:29.340 --> 00:27:38.580
So I would try to avoid small databases for kind of like bigger projects with a higher volume of transactions.

00:27:40.640 --> 00:27:44.520
But it would really depend on how busy your application is.

00:27:46.420 --> 00:27:55.920
yeah I imagine a lot of them probably are not too busy but you never know right it depends what it's doing I suppose

00:27:56.660 --> 00:28:00.720
yeah it depends on the use case right so let's just say that you have a very

00:28:00.720 --> 00:28:02.240
traditional

00:28:02.240 --> 00:28:16.320
use case where you have a startup and you're developing your own application and you kind of want to have some sort of like a financial back end to it I think in those particular cases, it shouldn't be an issue. I mean, whatever database.

00:28:16.420 --> 00:28:17.180
You could

00:28:17.180 --> 00:28:26.900
run that on whatever. Because if you have a startup and you need to scale the recording of your purchases, you've got a good startup.

00:28:27.260 --> 00:28:29.240
I mean, it's not going to be a startup for

00:28:29.240 --> 00:28:32.360
long if it's like, we can't handle the amount of sales per second

00:28:33.160 --> 00:28:33.620
in terms of

00:28:33.620 --> 00:28:36.420
recording them right. Like, you know, good problem to have.

00:28:36.740 --> 00:28:38.480
But it's not like scaling

00:28:38.480 --> 00:28:43.000
your front end where people are like, you know, AI-ing cat pictures.

00:28:44.700 --> 00:28:45.260
That's right.

00:28:45.400 --> 00:28:56.940
I think a volume of 1,000 transactions, 2,000 transactions per day, you know, it's still relatively small compared to, you know, if you're using something like IoT or where you have billions and billions of records.

00:28:57.440 --> 00:28:57.880
Yeah, exactly.

00:28:58.680 --> 00:28:58.840
Yeah.

00:28:59.180 --> 00:29:07.720
So I think for most financial use cases, you should be fine, you know, in terms of the volume of transactions.

00:29:08.360 --> 00:29:16.400
Yeah, I would imagine just something with a database that's got a good durability story, then you should be fine.

00:29:17.360 --> 00:29:18.160
That's correct, yeah.

00:29:19.280 --> 00:29:22.880
And certainly Postgres is incredibly well-known, incredibly well-respected.

00:29:23.520 --> 00:29:30.180
You can get it as a service at so many, pretty much wherever you are, you can get Postgres as a service.

00:29:31.060 --> 00:29:31.220
Yeah.

00:29:31.860 --> 00:29:39.780
So one interesting idea that I have for the future of this project is see if I could integrate this with a distributed system.

00:29:40.800 --> 00:29:44.940
Being a data scientist, I've worked a lot with Adobe and Spark and things like that.

00:29:45.140 --> 00:29:59.760
So I wonder if there's a possibility if you're supporting, of course, more enterprise-y kind of like use cases to see in order to have not a single point of failure, if you could leverage

00:29:59.760 --> 00:30:00.440
distributed

00:30:00.440 --> 00:30:02.920
clusters or things like that.

00:30:03.100 --> 00:30:06.040
But that's still experimental at this point.

00:30:07.620 --> 00:30:10.020
yeah how's it going are you making it happen uh

00:30:10.020 --> 00:30:49.600
i have some ideas you know i have a hadoop cluster here at home so i i kind of every every now and then i i just i just you know try to see if i could start developing you know some sort of like a like a hadoop application that could support because one of the things about django ledger is if if you see the models you know you have the entity model the company model then it goes down to to the ledger model then the journal entry and then the transaction. The ledger is a self-contained unit of accounting, right? So the ledger itself is really a small piece of the company. It's really a small piece. The ledger could be like a car.

00:30:49.850 --> 00:31:01.020
It could be like a tractor. It could be even a cow, if you want. So whenever this ledger model kind of like runs the financial statement.

00:31:01.640 --> 00:31:03.360
It's really a small piece of the puzzle.

00:31:04.980 --> 00:31:10.000
But even that little ledger, it is like a small company.

00:31:10.610 --> 00:31:15.520
So basically the ledger can compute the financial information anywhere.

00:31:15.980 --> 00:31:17.240
You could use something like salary.

00:31:17.270 --> 00:31:24.820
You could use something like anything like that and then bring all the ledgers together and aggregate them and you will get to the same answer.

00:31:25.420 --> 00:31:43.540
So even if you're reaching a point where the database becomes an issue, as far as from the data volume standpoint, you can piecemeal the call and you can chunk it down and then aggregate it in separate servers and then bring it back together.

00:31:44.480 --> 00:31:46.120
Yeah, that's a really cool idea.

00:31:46.390 --> 00:31:52.180
You know, I think-- did Django just add some background task stuff?

00:31:52.320 --> 00:31:54.940
I know this thing I pulled up as an external library.

00:31:55.120 --> 00:31:58.780
But I feel like that's something that's come into Django recently.

00:32:01.060 --> 00:32:01.700
Yeah, I think so.

00:32:02.050 --> 00:32:03.920
I haven't really deep dived into this.

00:32:04.060 --> 00:32:05.620
I use Celery

00:32:05.620 --> 00:32:07.360
most of the time.

00:32:09.440 --> 00:32:22.220
And one of the things that I've included in Django Ledger is a very comprehensive kind of like list of signals that you could wire your application to.

00:32:22.840 --> 00:32:30.280
and if you had some sort of like a background task, you could perform those things so you don't have to implement your own signals and things like that.

00:32:30.760 --> 00:32:31.400
Oh, yeah, that's nice.

00:32:34.600 --> 00:32:35.860
So we were talking about different databases.

00:32:36.980 --> 00:32:41.960
What about MongoDB just released the Django MongoDB backend.

00:32:43.440 --> 00:32:45.120
Could you use something like that, you think?

00:32:45.540 --> 00:32:46.060
I mean, if it

00:32:46.060 --> 00:32:46.260
supports...

00:32:46.260 --> 00:32:46.840
I think so.

00:32:47.460 --> 00:32:52.260
I mean, if it is official and if it supports the Django ORM, I think if it's...

00:32:52.300 --> 00:32:52.880
It does, yeah.

00:32:53.680 --> 00:32:55.760
I don't see any issue with that.

00:32:57.040 --> 00:33:02.720
Because again, all I did was to ledger the financial aspect of things on top of Django.

00:33:04.100 --> 00:33:09.780
So my starting point is, hey, anything that you could use with Django, you could use with Django ledger.

00:33:10.040 --> 00:33:10.260
I mean,

00:33:10.260 --> 00:33:11.280
it's really

00:33:11.280 --> 00:33:11.700
that simple.

00:33:12.520 --> 00:33:13.580
It's pretty early days.

00:33:13.590 --> 00:33:14.780
I'm not sure I would recommend it.

00:33:15.260 --> 00:33:18.760
However, I'm a big fan of manga and it's just interesting that it's there.

00:33:18.900 --> 00:33:19.700
But I don't know.

00:33:19.780 --> 00:33:22.280
For these kinds of things, I might actually stick with.

00:33:22.520 --> 00:33:24.360
It might be interesting to test it out.

00:33:24.560 --> 00:33:29.680
I mean, I might take that as a to-do item and see how that turns out.

00:33:29.960 --> 00:33:30.360
Yeah,

00:33:30.440 --> 00:33:36.480
I'll leave the link to this new Django backend for Mongo.

00:33:37.160 --> 00:33:37.440
It

00:33:37.440 --> 00:33:38.200
comes from MongoDB.

00:33:38.290 --> 00:33:41.860
The people, you know, they like spend a lot of time building it out.

00:33:41.980 --> 00:33:44.200
It's not just some random project that somebody came up with.

00:33:44.660 --> 00:33:44.920
Yeah.

00:33:45.880 --> 00:33:45.980
Yeah.

00:33:47.820 --> 00:33:51.940
So I want to dive into the technical bits and some of the moving parts.

00:33:52.560 --> 00:33:56.040
This ledger idea is really interesting and seeing how that fits.

00:33:56.240 --> 00:34:05.040
It's almost like you could have subdivisions in your company or divisions within your company, right?

00:34:05.300 --> 00:34:11.720
Like here's the part that deals with the farm, but we also have like a wine and fruit stand at the front.

00:34:11.840 --> 00:34:17.580
Maybe we'll have a separate one for that so we can treat them differently, but we want to see them as also together in the same system.

00:34:18.260 --> 00:34:20.760
You want to maybe talk about how you model those kinds of things?

00:34:21.399 --> 00:34:21.919
Yeah, absolutely.

00:34:22.260 --> 00:34:43.060
So Django Ledger has different ways of kind of like pull data out of the database and to kind of like structure a business in a way that you could get financial reports by departments or by business sections or whatever.

00:34:43.300 --> 00:34:48.419
So one of them is the entity unit model, what I call the entity unit model.

00:34:49.659 --> 00:34:58.020
And it's basically when you create journal entries, you assign that unit to that journal entry, right?

00:34:58.460 --> 00:35:03.900
Not you as a, you don't have to do it manually, but since the blueprints will do most of that for you.

00:35:04.520 --> 00:35:22.180
But the Angular has this capability of chunking down your reporting into separate, you know, like kind of like reports that aggregated together, you know, obviously will give you kind of like the parent balance sheet or the parent income statement, right?

00:35:22.840 --> 00:35:31.500
So you could leverage the units, it's called the entity unit, to divide your business operations.

00:35:33.240 --> 00:35:50.760
To your point, Michael, it's like if you have your lemonade stand here and then you have a separate side where it deals with a separate office, you know, on a different location, you could leverage those units and logically separate the transactions so you could pull reports for specific units as well.

00:35:51.780 --> 00:36:00.240
So it gives you a lot of flexibility when it comes to reporting and to keeping your data nice and clean and separated and segregated.

00:36:01.700 --> 00:36:02.340
Yeah, that's super neat.

00:36:03.100 --> 00:36:04.780
Could I generate reports?

00:36:05.880 --> 00:36:06.800
Let me rephrase that.

00:36:07.040 --> 00:36:21.520
Will it, without me writing any code, will it generate reports that I could give to an accountant to say, here's our monthly transactions and purchases and, you know, go do our bookkeeping with this?

00:36:22.110 --> 00:36:25.380
I know some of them are like, well, just use QuickBooks and then we'll share the QuickBooks thing.

00:36:25.540 --> 00:36:27.700
It's like, well, I don't want to use QuickBooks.

00:36:28.140 --> 00:36:28.420
Yeah.

00:36:29.440 --> 00:36:30.440
I want something cooler.

00:36:31.380 --> 00:36:32.480
So anyway, yes.

00:36:33.020 --> 00:36:33.800
To answer your question, yes.

00:36:33.920 --> 00:36:38.840
There is a PDF format support.

00:36:40.400 --> 00:36:55.500
So basically when you pull a financial statement, when you ask for a balance sheet in Django Ledger, in the management UI, you will have a button there that you would click and it will literally create a PDF for you to print and share however you like.

00:36:55.920 --> 00:36:56.400
Yeah, nice.

00:36:57.200 --> 00:36:58.880
What about CSV or Excel?

00:36:59.010 --> 00:37:02.180
I feel like that's probably the primary.

00:37:02.640 --> 00:37:05.100
That's the JSON of accounting world.

00:37:06.080 --> 00:37:06.700
That's right.

00:37:06.880 --> 00:37:11.220
I mean, I think that feature right now, it's not implemented.

00:37:11.920 --> 00:37:14.240
It would, you know, pull request welcome.

00:37:15.200 --> 00:37:17.860
Oh, yeah, I was going to say, PR is welcome.

00:37:18.380 --> 00:37:19.880
PR welcome, absolutely, yeah.

00:37:20.160 --> 00:37:42.660
But, you know, I don't think it would be too hard to implement because, like I said, you know, once you digest, when you call that digest function, which is part of the IO mixing side of things, You know, if you go into the repo, you guys who want to see the code, you know, if you go to the IO mixing and the IO, yeah, you could just go there.

00:37:43.520 --> 00:37:47.160
But, you know, the output of the digest process is just a Python dictionary.

00:37:47.680 --> 00:37:53.960
So at that point, you know, we could just use pandas or polars, you know, or something like that to kind of like saving on a CSV.

00:37:55.240 --> 00:37:57.660
Oh, yeah. I hadn't really thought about the pandas or polars side of things.

00:37:58.160 --> 00:37:58.280
Yeah.

00:37:58.440 --> 00:37:59.220
Yeah, that makes sense.

00:37:59.960 --> 00:38:02.500
Yeah, so you could use Jupyter Notebook as well

00:38:02.500 --> 00:38:03.260
to integrate

00:38:03.260 --> 00:38:04.020
with this.

00:38:04.030 --> 00:38:04.860
I use it a lot.

00:38:05.580 --> 00:38:06.660
That's a cool idea, yeah.

00:38:07.060 --> 00:38:07.280
Yeah.

00:38:09.340 --> 00:38:15.300
Yeah, I guess you could have a whole suite of notebooks that kind of do the live reporting and stuff.

00:38:15.500 --> 00:38:21.580
And then once you get into the pandas and polars, you can start talking about Dash and other

00:38:21.580 --> 00:38:23.060
dashboard

00:38:23.060 --> 00:38:25.060
types of things if you really, really wanted it.

00:38:26.160 --> 00:38:28.900
Yeah, all you need to do is set up your notebook to work with Django.

00:38:29.200 --> 00:38:35.000
And once you do Django.setup, you can leverage everything in the Jupyter

00:38:35.000 --> 00:38:35.320
notebook.

00:38:35.840 --> 00:38:37.820
As a data scientist, you could use HoloViews.

00:38:37.820 --> 00:38:38.320
You could use

00:38:38.320 --> 00:38:40.700
any

00:38:40.700 --> 00:38:41.920
plotting library you want.

00:38:43.740 --> 00:38:50.080
So I have a different angle of a question for integrations that comes from the audience from Joe.

00:38:50.920 --> 00:38:53.140
Joe asked, will it work with Wagtail?

00:38:53.140 --> 00:38:54.200
Are you familiar with Wagtail?

00:38:54.700 --> 00:38:55.800
Yeah, the CMS.

00:38:57.180 --> 00:38:58.740
Yeah, probably the most popular Django

00:38:58.740 --> 00:38:59.460
CMS,

00:38:59.760 --> 00:39:00.180
which is cool.

00:39:02.660 --> 00:39:03.140
Do you know? Do you

00:39:03.140 --> 00:39:03.480
have any idea?

00:39:03.800 --> 00:39:05.620
I mean, I've certainly not tried to integrate.

00:39:06.280 --> 00:39:08.740
I've not tried to integrate with Wagtail.

00:39:08.820 --> 00:39:11.700
I use Wagtail for some websites that I built.

00:39:13.420 --> 00:39:15.260
I understand Wagtail.

00:39:17.420 --> 00:39:19.900
Again, it's a Django application, right?

00:39:21.340 --> 00:39:21.440
So

00:39:21.440 --> 00:39:22.400
probably, right?

00:39:22.470 --> 00:39:26.380
I mean, if you're extending and customizing Wagtail, you probably could.

00:39:26.980 --> 00:39:32.340
So if you create a page, because I'm familiar with how Wagtail works.

00:39:32.500 --> 00:39:42.880
So basically, in my mind, I'm kind of like replicating what I would do is basically I would create a page in Wagtail, you know, that page model, right?

00:39:44.040 --> 00:39:48.100
And my understanding is that there's a section where you could create your context.

00:39:48.320 --> 00:39:50.240
You could get your context for your page.

00:39:50.860 --> 00:40:08.060
And at that point, you could, you know, bring in Django Ledger and the digest function where you could just get that big Python dictionary and you're going to have all the financial information there and you can just throw it to your template and then just populate whatever you want to populate in that website.

00:40:10.160 --> 00:40:14.900
So yeah, I mean, I don't see any reason why you wouldn't be able to integrate it with Backtail or something like that.

00:40:15.800 --> 00:40:16.000
Yeah.

00:40:17.320 --> 00:40:17.680
Interesting.

00:40:18.720 --> 00:40:21.600
You know, the world is looking for an alternative to WordPress these days.

00:40:21.880 --> 00:40:23.060
WordPress has gone crazy.

00:40:24.500 --> 00:40:25.780
I don't know if you've been following the drama.

00:40:27.680 --> 00:40:28.220
I'm not.

00:40:28.480 --> 00:40:29.560
I'm way too deep into

00:40:29.560 --> 00:40:30.480
finances right now.

00:40:32.140 --> 00:40:35.880
There's some interesting financial aspects, but I don't want to go into it.

00:40:36.080 --> 00:40:46.900
It's a whole different community, but basically the main owner, creator of WordPress started demanding a bunch of money from companies that were using it, even though it was open source.

00:40:48.700 --> 00:40:52.160
It really spooked a lot of people who are really invested in WordPress.

00:40:52.420 --> 00:40:57.220
So, you know, looking for alternatives like Wagtail, I think it's something that's happening

00:40:57.840 --> 00:40:58.520
more than it did last

00:40:58.520 --> 00:40:59.200
year, right?

00:41:00.400 --> 00:41:09.940
And to piggyback off of a little bit of the WordPress concept of this plugin, you know, we know there's a lot of plugins that are being created in WordPress.

00:41:11.360 --> 00:41:20.440
Django Ledger can also work as that foundational kind of like WordPress-like platform where you can bring in via Django app a plugin.

00:41:21.000 --> 00:41:26.540
You know, one example that I'm working on right now is to perform like bank reconciliations, for instance.

00:41:27.440 --> 00:41:27.500
You

00:41:27.500 --> 00:41:32.580
know, bank reconciliations is not something, it is an accounting process.

00:41:32.840 --> 00:41:43.560
It's not built into Django Ledger itself because that would be, you know, I don't want to, again, I don't want to be opinionated as to, you know, what needs to happen from an accounting standpoint.

00:41:44.760 --> 00:41:50.480
But a bank reconciliation, it's something that I'm creating as a separate Django application.

00:41:53.460 --> 00:42:00.960
So this is like I take my bank statement and it looks at each line and goes, what is this and how does that apply and do I need to save it into

00:42:00.960 --> 00:42:02.560
this

00:42:02.560 --> 00:42:03.120
or not?

00:42:03.150 --> 00:42:03.900
Is that what we're talking about?

00:42:04.040 --> 00:42:18.660
Well, bank reconciliation is you take your bank statement, which has transactions on it, and then you have the transactions that are staged because Django Ledger has a staging area where you bring in your transactions and then you kind of map them.

00:42:18.900 --> 00:42:23.920
And once you click the button, it will go into the actual transaction database.

00:42:24.120 --> 00:42:32.920
And there's a couple other controls that, you know, from a posting standpoint and whether or not it hits the books or not, you know, other controls are built in.

00:42:33.360 --> 00:42:43.260
But a recon, a financial bank reconciliation is make sure that the transactions that are in your bank statement match the transactions that are in your database.

00:42:44.160 --> 00:42:51.320
And the starting balance and the end balance match whatever is in your bank.

00:42:51.570 --> 00:42:51.720
Right.

00:42:51.880 --> 00:42:52.020
So

00:42:52.020 --> 00:42:53.340
it

00:42:53.340 --> 00:42:54.320
is a regular process.

00:42:55.460 --> 00:42:59.040
Us accountants, we do to make sure that our data is accurate.

00:43:00.640 --> 00:43:00.840
Right.

00:43:01.960 --> 00:43:04.800
Because if you got more money, there's something that wasn't recorded.

00:43:05.480 --> 00:43:05.600
If

00:43:05.600 --> 00:43:06.000
you got less

00:43:06.000 --> 00:43:09.420
money, there's maybe an expense or something that wasn't recorded, right?

00:43:10.120 --> 00:43:10.760
That's right.

00:43:10.920 --> 00:43:11.240
That's right.

00:43:11.460 --> 00:43:14.260
And that can be implemented via plugging.

00:43:14.640 --> 00:43:18.500
Going back to the original point, you can create a Django application that does recons.

00:43:18.880 --> 00:43:20.200
It's called Reconcilate, recons.

00:43:21.320 --> 00:43:23.520
And just add that functionality to Django legend.

00:43:24.220 --> 00:43:24.680
Yeah, that's cool.

00:43:25.440 --> 00:43:25.840
So

00:43:25.840 --> 00:43:26.860
you said bank statements.

00:43:27.140 --> 00:43:36.820
I imagine a lot of digital companies these days, and even some that are not, probably have Stripe or Square or something like that as well.

00:43:37.940 --> 00:43:42.020
And the way that appears on your bank account is in blobs, right?

00:43:42.420 --> 00:43:50.660
So when you have a bunch of sales, say, through Stripe, Stripe can pay you daily with a couple of days delay.

00:43:51.080 --> 00:43:53.200
And it says, today you get this much money.

00:43:53.580 --> 00:43:57.280
But then you've got to go to Stripe to actually see the

00:43:57.280 --> 00:43:57.960
details that

00:43:57.960 --> 00:43:59.520
would map over to Django Ledger, right?

00:44:01.200 --> 00:44:01.580
That's right.

00:44:02.740 --> 00:44:06.320
Stripe has this API that you would integrate with.

00:44:08.300 --> 00:44:19.300
I'm sure that you could get the detail and get those transactions into your staging area and then visually looking at them and just pushing the button and integrating those

00:44:19.300 --> 00:44:20.680
into

00:44:20.680 --> 00:44:22.000
your Django Ledger systems, right?

00:44:23.960 --> 00:44:34.300
A fun in quotes thing you could do is you could actually hook up to the Stripe webhook notifications and drove those straight into records in Django Ledger, right?

00:44:35.800 --> 00:44:36.320
Yeah, absolutely.

00:44:36.780 --> 00:44:37.880
I can see that happening.

00:44:39.380 --> 00:44:43.680
Python is such a diverse ecosystem.

00:44:44.000 --> 00:44:45.220
You can do pretty much anything.

00:44:46.940 --> 00:44:47.340
Yeah, that's right.

00:44:47.680 --> 00:44:49.780
I did that on a project not too long ago.

00:44:51.460 --> 00:45:01.540
it's both easy and really hard because you get so much data from Stripe and like the scenarios and what it means and stuff. It's

00:45:01.540 --> 00:45:02.160
kind of hard to

00:45:02.160 --> 00:45:09.720
decipher, but hooking into that, that data flow of like a transaction happened, something was refunded or whatever.

00:45:10.370 --> 00:45:10.920
It's pretty straightforward.

00:45:11.220 --> 00:45:12.980
So it sounds like that might be a cool plugin actually.

00:45:13.440 --> 00:45:21.520
It might be a cool plugin, you know, there's many different plugins that we can create for Django Ledger.

00:45:23.980 --> 00:45:25.860
Again, Django Ledger is just a foundation.

00:45:26.450 --> 00:45:28.580
It implements a double entry accounting system.

00:45:29.760 --> 00:45:30.180
It's

00:45:30.180 --> 00:45:33.840
not an automation framework. It doesn't automate a lot of these things.

00:45:34.660 --> 00:45:39.940
Those could be done via plugins and the community could certainly contribute to those things.

00:45:40.280 --> 00:45:41.580
Yeah, they could.

00:45:44.460 --> 00:45:45.640
Let's talk licensing.

00:45:46.780 --> 00:45:53.320
So over here I see, well, it's like stuck at the top, which is kind of cool, that it's GPL 3.0.

00:45:55.640 --> 00:45:58.940
So that is a copy left license, right?

00:45:59.520 --> 00:46:06.940
So that means if someone builds an application on top of this and they distribute it, that means it's open source, right?

00:46:08.400 --> 00:46:08.520
Yes.

00:46:08.780 --> 00:46:09.400
As a requirement.

00:46:09.660 --> 00:46:22.940
But if they build on top of this and it's just a private internal thing that powers their accounting or something along those lines, then it doesn't have to be distributed open source.

00:46:23.180 --> 00:46:24.340
Am I understanding that correctly?

00:46:24.730 --> 00:46:26.640
I always get slightly off on lightning.

00:46:27.300 --> 00:46:28.500
I think so.

00:46:28.650 --> 00:46:36.840
I mean, the reasoning behind the GPL version 3 license is that there's a ton of work behind Django Ledger.

00:46:37.180 --> 00:46:47.760
Django Ledger is, there's a lot of domain-specific experience that I've incorporated into Django Ledger for the benefit of the Python community, right?

00:46:48.320 --> 00:46:55.400
So, you know, just like WordPress, WordPress has exactly the same license, you know, and look at what's become, right?

00:46:55.480 --> 00:46:57.940
You know, WordPress is, aside

00:46:57.940 --> 00:46:58.560
from all

00:46:58.560 --> 00:47:05.560
the things that may be happening right now, but, you know, it became the foundation for blogging and for content distribution.

00:47:06.160 --> 00:48:28.040
people and developers were able to develop these plugins going back to the plugin uh you know a topic is to extend wordpress right so my concept with django ledger is about the same thing you know it's like let's keep it open and let's make sure that you know we keep it open anything that is developed on top of django ledger is transparent because ultimately it's important that finances are not a black box. It shouldn't be a black box, right? And for most developers and accountants out there, you know, who work with existing platforms, you know, this data is on private servers. We don't know what it is. You know, obviously they have their own policies and the privacy policies and things like that. But one of the benefits of Django Ledger is that it is open source. You could use your own database, right? So you can keep your data private you know you can control your own data uh but you know but at the same time you can extend it right so all that functionality you know it's i feel like it's really important to keep it open and and that there is no bad actors out there who want to leverage something like this and kind of like do something that is not supposed to be you know not ethical or anything like that uh so so yeah i think that's what that was my the main reason behind the licensing you know just to make sure that it stays open and

00:48:28.040 --> 00:48:28.560
that you want to

00:48:28.560 --> 00:48:32.880
use it for your own commercial purposes. If you distribute it, you need to keep it open.

00:48:33.560 --> 00:48:37.940
You can use it on your own server, as a software, as a service. You don't have to distribute that.

00:48:39.120 --> 00:48:39.420
But yeah.

00:48:41.800 --> 00:48:42.940
That's my understanding as well.

00:48:43.140 --> 00:48:45.260
If you wanted to have it as a back-end for something,

00:48:46.160 --> 00:48:46.560
that's totally

00:48:46.560 --> 00:48:46.860
fine.

00:48:47.200 --> 00:48:48.420
But if you wanted to...

00:48:49.100 --> 00:48:53.260
Basically, if you want to distribute your software built on this, it has to be...

00:48:53.260 --> 00:48:54.420
Your software

00:48:54.420 --> 00:49:26.120
has to source in GPL3. Otherwise, not so much. That's pretty cool. So another thing, obviously, listeners of the show are spread throughout the world, not just the United States. And Joe out in the audience asked basically, can this be used outside the US? Does it only work with the United States tax structures? Does it have the dollar sign hard-coded? Can that kind of thing?

00:49:27.260 --> 00:49:32.100
So, again, the framework itself is unopinionated.

00:49:32.420 --> 00:49:36.320
So, yes, you can change the dollar sign to whatever you need to change.

00:49:37.340 --> 00:49:38.440
It's actually a Django setting.

00:49:39.560 --> 00:49:41.540
So you can change it in the settings.

00:49:43.820 --> 00:49:45.460
That would be like your base currency?

00:49:46.500 --> 00:49:52.960
So if you wanted to do and say euros or whatever, but then maybe convert from dollars to euros because you want to think in euros?

00:49:53.660 --> 00:49:55.080
It's literally a character.

00:49:56.920 --> 00:49:58.200
you change

00:49:58.200 --> 00:50:24.900
the character and instead of a dollar sign it will show a euro sign or whatever currency so but everything is based on the django decimal field so the decimal field it is a two-digit precision decimal field and literally can be any currency and to answer the question about tax we don't django ledger doesn't do anything with from a tax perspective it's not going to, hey, here's your tax return.

00:50:25.540 --> 00:50:26.540
However, however.

00:50:26.820 --> 00:50:28.280
Could you imagine how hard that would be to write?

00:50:30.500 --> 00:50:31.600
You know, I'll be honest with you.

00:50:31.800 --> 00:50:52.600
I mean, if you understand the tax code of your country, mapping the, again, the digest function, that big dictionary you get back with everything aggregated and nicely done, you could map these accounts to a specific tax line and then do aggregations from there.

00:50:52.740 --> 00:50:53.020
I see.

00:50:53.120 --> 00:50:53.980
So

00:50:53.980 --> 00:51:00.080
when people talk about tax, is this a tax-ready software?

00:51:00.330 --> 00:51:14.840
Really what you're doing is how do you map a financial statement, each line, into a specific tax line for the specific country, which obviously requires knowledge and domain knowledge of the tax code for that particular country.

00:51:16.060 --> 00:51:18.760
Sorry, I just derailed you on talking about multi-currency.

00:51:19.880 --> 00:51:57.200
and multi-currency that isn't it out of the box it does not support uh multi-currency it doesn't mean it can't uh i've been you know kind of like visualizing how to implement multiple currency in an efficient way it's not that it cannot be uh implemented it just has to be efficient right And the problem with multi-currency is that it is a very dynamic and it's a living and once you make it multi-currency, you basically make it a living and breathing system.

00:51:57.480 --> 00:51:59.260
Why? Because currencies value change

00:51:59.260 --> 00:52:00.840
pretty much every day.

00:52:01.350 --> 00:52:01.720
Every day.

00:52:03.230 --> 00:52:11.680
So what that means is that basically if the rate of exchange changes, now you have some pressure to alleviate from the system.

00:52:12.210 --> 00:52:12.360
Right.

00:52:12.900 --> 00:52:18.380
And that needs to be alleviated through what is called like a reconciliation account, you know, in the accounting terms.

00:52:19.580 --> 00:52:27.020
So you can alleviate that pressure in the P&L so everything is kind of like – everything is – it matches the way it should.

00:52:27.840 --> 00:52:28.020
Yeah.

00:52:28.500 --> 00:52:35.960
Just to give people a sense of like how brutal it can be, even for simple stuff that I do.

00:52:37.080 --> 00:52:51.000
So if I did something where somebody paid me with an invoice and I want to record how much income I got, do I record how much it is in your, let's say they're paying euros and I'm getting paid, it's converted to dollars.

00:52:51.080 --> 00:52:56.260
Do I write down how much the currency conversion is when I send the invoice?

00:52:57.340 --> 00:53:33.340
When they pay it, which goes through Stripe, but then Stripe doesn't credit me that or actually process it for some period of time after that maybe who knows how much longer is it until the day that I get the payout and it's final but there's so many steps that are out of my, that you can't see, you have no visibility into well when in the day did Stripe actually finally reconcile that current conversion from euros to dollars and if there was some swing then stuff doesn't match anymore, it's really hard

00:53:34.640 --> 00:54:05.140
it is hard i mean i'm sure i'm sure we can figure something out that's not a problem i mean it's it's not a matter of heart or not it's i think from from a jungle ledger standpoint you know my concern is to make it as efficient as possible uh and uh and yeah and yeah and there's there's other accounting things that you know you may you have to incorporate uh you know like to your point you know the invoice was written on a certain date and then it was paid at a different date.

00:54:05.730 --> 00:54:09.520
Then you need to record kind of like the rate of exchange on a daily basis.

00:54:09.910 --> 00:54:18.600
So you can kind of like alleviate the system on a daily basis and record that kind of like reconciliation transaction because of rate of exchange changes.

00:54:19.400 --> 00:54:21.540
So you just take it to a different level.

00:54:21.900 --> 00:54:27.660
And at that point, I feel like it's going to get interesting.

00:54:28.600 --> 00:54:28.960
That's for sure.

00:54:29.620 --> 00:54:29.720
Yeah.

00:54:31.760 --> 00:54:32.260
Yes, it will.

00:54:32.440 --> 00:54:37.180
All right, two final things that I want to touch on before we close this out.

00:54:39.320 --> 00:54:40.120
One, security.

00:54:40.480 --> 00:54:41.680
Like, what's the security story?

00:54:42.620 --> 00:54:47.080
I mean, it sounds like you're probably leveraging a lot of the Django capabilities for security.

00:54:48.700 --> 00:54:49.520
That is correct, yeah.

00:54:50.020 --> 00:54:55.260
Out of the box, it will use the regular Django Ledger security framework, authorization framework.

00:54:55.940 --> 00:54:57.740
But if you can use, you can use all off.

00:54:58.080 --> 00:55:04.120
You can use, you know, any of the frameworks out there that integrate with Django, you can.

00:55:06.160 --> 00:55:16.220
The permissions are different in Django Ledger because I wanted to enforce permissions at the database layer.

00:55:16.380 --> 00:55:31.920
Not that they're not implemented at the database layer with regular Django auth, but there is a separate table that defines managers and owners of the entities and the companies that are inside Django Ledger.

00:55:32.480 --> 00:55:48.880
Since it is a multi-tenant system, basically you can have, you know, like you could pretty much run an accounting firm, for instance, and you have clients that own certain entities and then the accountant which owns the entity can see all the companies.

00:55:49.700 --> 00:55:55.700
Whenever you pull a query set from Django, you have to pass in the user model, right?

00:55:55.900 --> 00:56:06.280
And that user model is filtering at the database ledger the objects at specific request from a specific user can see and have access to.

00:56:06.650 --> 00:56:18.520
So I wanted to make it very, you know, very hard for you to show financial data to something or someone that was not supposed to see that data.

00:56:18.760 --> 00:56:19.540
Yeah, that's really cool.

00:56:20.060 --> 00:56:25.480
Maybe someone has permissions to enter transactions but not see all transactions or something like that.

00:56:25.920 --> 00:56:26.620
Yeah, that's right.

00:56:27.320 --> 00:56:27.460
Yeah.

00:56:28.880 --> 00:56:31.460
That's a different level of trust to say.

00:56:31.960 --> 00:56:32.220
Give you

00:56:32.220 --> 00:56:35.240
all of our sales versus you can record things.

00:56:36.300 --> 00:56:38.540
Okay, and then let's close it out with roadmap.

00:56:39.240 --> 00:56:40.200
What's the future look like?

00:56:40.560 --> 00:56:41.280
Where are you going with this thing?

00:56:42.580 --> 00:56:45.280
Well, my initial...

00:56:47.180 --> 00:56:52.960
So where I want to go first is Django Ledger has been around for a long time.

00:56:53.660 --> 00:57:00.160
So there's a lot of things that I've done in the past that I would have wanted to kind of like do it in a different way.

00:57:00.780 --> 00:57:09.760
So if you see the latest commits, it's just me trying to refactor the code so it's more clear and it's more maintainable long-term.

00:57:11.080 --> 00:57:11.180
Right?

00:57:11.780 --> 00:57:27.720
So as the project evolves, what I want to do is start adding more controls and more things that are useful from a developer standpoint with other tools, right?

00:57:28.740 --> 00:57:29.660
We talked about APIs.

00:57:29.940 --> 00:57:33.260
We talked about all the other things, right?

00:57:33.740 --> 00:57:40.060
So as far, you know, to answer your question, the roadmap right now is unclear.

00:57:42.180 --> 00:57:50.800
So it's unclear not because I don't know what to do, but it is going to be based on customer feedback or developer feedback.

00:57:51.640 --> 00:58:03.740
So one of the things that I want to compile is, what developers want from a functionality standpoint so I can incorporate those features into Django Legend.

00:58:05.680 --> 00:58:08.460
As a base account system, it's pretty stable.

00:58:10.240 --> 00:58:23.960
From a UI standpoint, I know it could be prettier, but it's not meant to be a full-blown, it's not a drop-in replacement for commercially available software.

00:58:24.400 --> 00:58:26.340
It's meant to be a management UI system.

00:58:27.700 --> 00:58:33.140
So, yeah, I think, you know, going back to what is the roadmap?

00:58:33.300 --> 00:58:45.560
There is a post on my website that I laid out, you know, a couple of things that can be implemented within Django Ledger.

00:58:46.560 --> 00:58:50.120
And one of them is actually the multi-currency, the multi-currency support.

00:58:50.440 --> 00:58:51.320
Right, right.

00:58:51.700 --> 00:58:58.160
So I think that's one of those big items that can definitely be implemented in the short term.

00:59:00.640 --> 00:59:02.940
Testing and coverage, that's another thing.

00:59:04.300 --> 00:59:13.100
More testing, developers who want to add tests, unit tests into the software, those are important.

00:59:13.270 --> 00:59:21.820
One thing to point out is that I am the only developer, not the only, but pretty much 99% of the code has been written by myself.

00:59:22.380 --> 00:59:23.380
You know, I've written the code.

00:59:23.560 --> 00:59:25.700
So the project is too big.

00:59:25.730 --> 00:59:29.600
I can't focus on all different aspects at the same time.

00:59:29.840 --> 00:59:38.260
So any developer out there who wants to collaborate and wants to throw a PR, PRs are very welcome to make it more stable.

00:59:39.940 --> 00:59:44.740
Do you have somewhere that talks about the plugin concept and how to extend it?

00:59:45.680 --> 00:59:53.520
Because, you know, one of those challenges, I know many, many people have is they want to add something to some large existing piece of code that's been around for a while.

00:59:53.700 --> 00:59:56.440
And it's like, there's a lot to learn and there's a lot to deal with.

00:59:56.720 --> 01:00:00.820
And if you're like, well, you implement these three functions and you do this thing, you know what I mean?

01:00:01.020 --> 01:00:04.460
And that's a much lower barrier to entry.

01:00:07.680 --> 01:00:07.920
Yeah.

01:00:08.680 --> 01:00:16.860
So, again, so one of the things that my objective is to make it more developer friendly.

01:00:16.900 --> 01:00:23.840
because it's the financing accounting domain sometimes is, again, it's two different brains.

01:00:24.050 --> 01:00:25.880
It's two different brains into one project.

01:00:28.859 --> 01:00:40.160
And it's a cool project because if you are a programmer, you will somehow have to learn accounting or some accounting in order to be a contributor to the project.

01:00:41.020 --> 01:00:46.640
And if you're an accountant, somehow you would need to learn some Python to be a contributor to the project.

01:00:47.380 --> 01:00:57.180
So one of the challenges with Django Ledger is not only do you need to know Django, but also you need to have some sort of financial interest, let's just say,

01:00:57.300 --> 01:00:58.680
interest to

01:00:58.680 --> 01:00:59.860
collaborate to the project.

01:01:01.160 --> 01:01:10.660
So, yeah, I mean, you know, one of the challenges that I've had throughout the years is finding collaborators to the project, right?

01:01:12.200 --> 01:01:22.200
And that's one of the reasons why Django Ledger, the development has been somehow slow, is because it's mostly my time who has been put into this project.

01:01:22.720 --> 01:01:25.100
You should go on a podcast to get some awareness for it.

01:01:26.320 --> 01:01:27.080
Yeah, let's do it.

01:01:29.140 --> 01:01:31.620
Well, I think there's actually going to be a decent amount of interest.

01:01:32.000 --> 01:01:37.060
There's a lot of people out there who are developers, but they've got to work on accounting systems.

01:01:37.200 --> 01:01:39.100
They're like, well, I don't know enough to build one from scratch.

01:01:39.540 --> 01:01:42.460
but maybe contribute to one.

01:01:44.580 --> 01:01:45.480
But PRs are welcome.

01:01:46.230 --> 01:01:46.420
And

01:01:46.420 --> 01:01:47.200
contributors are welcome.

01:01:48.100 --> 01:01:48.620
100%.

01:01:49.050 --> 01:01:49.180
Please.

01:01:50.060 --> 01:01:53.820
I also noticed you have a Discord community and a Getting Started guide.

01:01:54.760 --> 01:01:54.960
Yes.

01:01:56.540 --> 01:02:01.660
So the Discord, I'm on the Discord, so you guys can ask questions.

01:02:02.920 --> 01:02:08.300
Anybody who wants to report a bug or has some ideas on Django Ledger, you can definitely join the Discord.

01:02:09.720 --> 01:02:38.520
the get started guide it is a developer focused guide that I put together for developers to get familiar with to bring them somehow get their feet wet into accounting from a developer perspective so there's some table there's some concepts there that I try to explain from a developer standpoint so it's not too daunting so it's not

01:02:38.520 --> 01:02:40.820
too intimidating.

01:02:42.110 --> 01:02:43.560
So that's a good resource to have.

01:02:44.400 --> 01:02:44.840
All right.

01:02:45.100 --> 01:02:45.180
Excellent.

01:02:45.820 --> 01:02:47.300
I'll put links to those in the show notes.

01:02:48.660 --> 01:02:50.340
Well, thanks for being on the show.

01:02:50.980 --> 01:02:51.740
Congrats on the project.

01:02:51.890 --> 01:02:52.380
It looks really cool.

01:02:53.220 --> 01:02:54.660
Well, thank you for having me, Michael.

01:02:54.950 --> 01:02:55.380
It was fun.

01:02:55.500 --> 01:02:55.560
Yeah,

01:02:56.040 --> 01:02:56.440
it sure was.

01:02:56.870 --> 01:02:57.180
See you later.

01:02:57.820 --> 01:02:57.980
Bye, all.

01:02:57.980 --> 01:02:58.040
See you.

