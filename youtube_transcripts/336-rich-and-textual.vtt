WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, Will.


00:00:01.000 --> 00:00:02.000
>> Hi, Michael.


00:00:02.000 --> 00:00:04.000
>> Thanks for being here on the live stream.


00:00:04.000 --> 00:00:06.000
It's great to have you here.


00:00:06.000 --> 00:00:07.000
>> Thank you.


00:00:07.000 --> 00:00:08.000
Good to be here.


00:00:08.000 --> 00:00:11.000
>> Thanks, everyone, for being on the live stream, on the live chat.


00:00:11.000 --> 00:00:13.000
I see a bunch of familiar and friendly faces.


00:00:13.000 --> 00:00:18.000
And if you've got some comments for Will or me, please put them into the chat,


00:00:18.000 --> 00:00:20.000
and I'll try to make it part of the show.


00:00:20.000 --> 00:00:22.000
If you're watching afterwards, maybe not so much.


00:00:22.000 --> 00:00:24.000
But thank you for watching.


00:00:24.000 --> 00:00:25.000
All right.


00:00:25.000 --> 00:00:27.000
Will, you ready to kick this off?


00:00:27.000 --> 00:00:28.000
>> Sure.


00:00:28.000 --> 00:00:29.000
Let's do it.


00:00:29.000 --> 00:00:31.000
Will, welcome to Talk Python to Me.


00:00:31.000 --> 00:00:33.000
Thank you.


00:00:33.000 --> 00:00:35.000
It's fantastic to finally have you on the show.


00:00:35.000 --> 00:00:39.000
I feel like we've talked a lot about the work that you've been doing many times.


00:00:39.000 --> 00:00:44.000
Not so much on Talk Python because we're more focused on a single topic.


00:00:44.000 --> 00:00:50.000
But even so, I believe, you know, at the end I always ask for some project that needs attention,


00:00:50.000 --> 00:00:54.000
needs some sort of shout out, and, you know, I believe Rich has come up more than once.


00:00:54.000 --> 00:00:57.000
I think Textual has come up at least once there.


00:00:57.000 --> 00:01:01.800
So the prior guests of the show have been fans.


00:01:01.800 --> 00:01:04.200
And I know the audience is a big fan.


00:01:04.200 --> 00:01:07.560
So yeah, congrats on all the progress there.


00:01:07.560 --> 00:01:08.200
>> Great, thanks.


00:01:08.200 --> 00:01:10.720
Yeah, I really appreciate the coverage.


00:01:10.720 --> 00:01:14.120
You probably increased my star count by a few thousand.


00:01:14.120 --> 00:01:17.600
>> Well, I do want to talk about that, because this project is super popular.


00:01:17.600 --> 00:01:22.000
And as we get into it, I think it's going to be fun to explore some of the things


00:01:22.000 --> 00:01:23.880
that you felt were key to that.


00:01:23.880 --> 00:01:28.880
and if this is the first time people are hearing about Rich,


00:01:28.880 --> 00:01:31.960
you definitely want to check out some of the screenshots.


00:01:31.960 --> 00:01:33.920
Maybe I'll do something fun, like make part of the show,


00:01:33.920 --> 00:01:36.440
have the show notes or the podcast player


00:01:36.440 --> 00:01:39.800
have some screenshots from the various sections,


00:01:39.800 --> 00:01:42.300
like as I said, I'll see if I can make that happen.


00:01:42.300 --> 00:01:44.880
But before we get to all that,


00:01:44.880 --> 00:01:46.600
before we dive into Rich and Textual


00:01:46.600 --> 00:01:49.180
and all the other things, let's talk about you.


00:01:49.180 --> 00:01:50.280
How'd you get into programming


00:01:50.280 --> 00:01:52.180
and how'd you find yourself doing


00:01:52.180 --> 00:01:53.660
all this open source Python?


00:01:53.660 --> 00:01:59.660
How did I get into programming? Oh, okay. So, as a kid in the 80s, I guess, I had a


00:01:59.660 --> 00:02:07.140
Spectrum 48k computer. It was a little plastic thing you plugged into your TV and you could


00:02:07.140 --> 00:02:13.740
create very simple animations and little games. And I think from there I was hooked. That's


00:02:13.740 --> 00:02:18.460
just something about me that connected with programming, I guess.


00:02:18.460 --> 00:02:21.740
What's interesting is those games were so basic, right?


00:02:21.740 --> 00:02:25.380
They weren't like 3D, VR, oh my gosh, I'm there,


00:02:25.380 --> 00:02:29.140
or some of the flashy, even the flashy mobile apps,


00:02:29.140 --> 00:02:30.700
mobile games these days.


00:02:30.700 --> 00:02:33.180
But something about those early, early games


00:02:33.180 --> 00:02:36.140
really captured the imagination, didn't they?


00:02:36.140 --> 00:02:37.620
- Yeah, yeah.


00:02:37.620 --> 00:02:39.980
And the fact that they were so limiting


00:02:39.980 --> 00:02:43.140
had to make you a little bit creative,


00:02:43.140 --> 00:02:44.340
so it encouraged creativity


00:02:44.340 --> 00:02:46.340
because you couldn't do much of anything,


00:02:46.340 --> 00:02:52.100
you had to make the best of what you got. So it encouraged you to experiment. I think


00:02:52.100 --> 00:02:58.860
it was a great way to get people into programming again. I think until recently we haven't had


00:02:58.860 --> 00:03:02.820
that and I think the Raspberry Pi does that to some extent, which is a great thing.


00:03:02.820 --> 00:03:08.540
Yeah, it sort of reaches out to the real world in a more simplistic way, kind of repeating


00:03:08.540 --> 00:03:09.540
that cycle, right?


00:03:09.540 --> 00:03:16.740
Yeah, yeah, and it just allows people access to programming in a very kind of accessible


00:03:16.740 --> 00:03:19.540
form for children, I guess.


00:03:19.540 --> 00:03:25.420
I think the next generation in 20 years will be citing Raspberry Pi is how they got into


00:03:25.420 --> 00:03:26.420
programming.


00:03:26.420 --> 00:03:27.420
Interesting.


00:03:27.420 --> 00:03:32.140
Yeah, I built a robot the first time around or something like that, right?


00:03:32.140 --> 00:03:33.140
Yeah.


00:03:33.140 --> 00:03:37.540
Instead of wanting to play a game or script a game out or something like that.


00:03:37.540 --> 00:03:38.540
Interesting.


00:03:38.540 --> 00:03:41.900
And a lot of times I ask people, "Okay, well, what are you doing now?"


00:03:41.900 --> 00:03:47.260
They're like, "Oh, I'm head of data science at companies such and such."


00:03:47.260 --> 00:03:53.460
You've taken a very interesting, and I suspect a lot of people will be quite jealous of what


00:03:53.460 --> 00:03:54.860
you're up to these days, right?


00:03:54.860 --> 00:03:56.900
What are you doing now?


00:03:56.900 --> 00:03:57.900
Yeah.


00:03:57.900 --> 00:04:00.020
So up until recently, I was contracting.


00:04:00.020 --> 00:04:03.220
But I ended my contract.


00:04:03.220 --> 00:04:05.940
I'm going to take a year out.


00:04:05.940 --> 00:04:09.140
Well, possibly a year, depends how much,


00:04:09.140 --> 00:04:11.660
depends how things go.


00:04:11.660 --> 00:04:14.620
But the idea is to work on open source,


00:04:14.620 --> 00:04:17.780
specifically rich and textual.


00:04:17.780 --> 00:04:21.520
And other projects that take my fancy as well,


00:04:21.520 --> 00:04:24.080
anything that I can contribute to,


00:04:24.080 --> 00:04:25.880
I'll try my hand at it.


00:04:25.880 --> 00:04:28.000
It's not entirely selfless,


00:04:28.000 --> 00:04:32.120
because I do think there might be commercial applications


00:04:32.120 --> 00:04:34.540
for textual down the line,


00:04:34.540 --> 00:04:37.020
but certainly for this first six months,


00:04:37.020 --> 00:04:40.220
it'll be just focusing on just making it the best.


00:04:40.220 --> 00:04:42.620
- Making it super, super solid foundation.


00:04:42.620 --> 00:04:44.420
- Yeah, absolutely.


00:04:44.420 --> 00:04:47.500
Well, I don't think it's gonna take that much


00:04:47.500 --> 00:04:51.820
to get some things in place to make this long-term for you.


00:04:51.820 --> 00:04:55.220
People can go, if they're a company or individually,


00:04:55.220 --> 00:04:56.380
they're finding huge value,


00:04:56.380 --> 00:04:58.820
they could go to GitHub and sponsor you.


00:04:58.820 --> 00:05:01.700
There's enterprise stuff that can be set up.


00:05:01.700 --> 00:05:03.500
We'll dive a little bit into that more,


00:05:03.500 --> 00:05:06.700
possibly later as well, but I wish you a lot of luck.


00:05:06.700 --> 00:05:09.740
But I think with the traction that you're getting


00:05:09.740 --> 00:05:14.740
and the new things, I really find GitHub's sponsor feature


00:05:14.740 --> 00:05:18.100
to be something of a game changer, right?


00:05:18.100 --> 00:05:20.300
I mean, I remember looking back, you'd see,


00:05:20.300 --> 00:05:21.980
oh, here's a popular project.


00:05:21.980 --> 00:05:23.540
Maybe it's not even an open source library,


00:05:23.540 --> 00:05:25.200
but it's like an app.


00:05:25.200 --> 00:05:28.500
And it's like, click here to thank the developer on PayPal.


00:05:28.500 --> 00:05:29.340
And just--


00:05:30.500 --> 00:05:33.820
- It was a little bit of a barrier to entry.


00:05:33.820 --> 00:05:35.300
- Yeah, and maybe you do it once, right?


00:05:35.300 --> 00:05:36.740
But with GitHub, you can say,


00:05:36.740 --> 00:05:38.860
I just kind of want to say, I want this to keep going.


00:05:38.860 --> 00:05:41.020
So here's $2 a month.


00:05:41.020 --> 00:05:44.180
And if not that many people who find it valuable


00:05:44.180 --> 00:05:45.500
send in a couple of bucks a month,


00:05:45.500 --> 00:05:48.180
all of a sudden it starts to be a foundation


00:05:48.180 --> 00:05:49.900
that you can really build from.


00:05:49.900 --> 00:05:52.940
- Yeah, it could build up and be something


00:05:52.940 --> 00:05:55.580
which is sustainable and sustain open source


00:05:55.580 --> 00:05:58.580
because so many people benefit from open source,


00:05:58.580 --> 00:06:02.060
including big companies, big corporations.


00:06:02.060 --> 00:06:05.380
But a lot of these developers are doing it


00:06:05.380 --> 00:06:08.420
in their spare time for the love of it.


00:06:08.420 --> 00:06:12.300
And they haven't asked for funding before,


00:06:12.300 --> 00:06:15.620
but a lot of them deserve funding.


00:06:15.620 --> 00:06:20.100
So I've had lots of projects which could really use funding


00:06:20.100 --> 00:06:21.380
to make sure they keep going,


00:06:21.380 --> 00:06:23.980
to make sure that the software that we all use


00:06:23.980 --> 00:06:26.020
is still available in a year,


00:06:26.020 --> 00:06:28.300
two years and five years down the line.


00:06:28.300 --> 00:06:30.020
- Yeah, otherwise we're gonna end up in a place


00:06:30.020 --> 00:06:31.700
with like open SSL,


00:06:31.700 --> 00:06:33.820
where there's one person who maintains it


00:06:33.820 --> 00:06:35.080
and a quarter of the world


00:06:35.080 --> 00:06:37.020
seems to be built directly upon it, right?


00:06:37.020 --> 00:06:38.260
Remember that bug?


00:06:38.260 --> 00:06:39.780
It was a huge problem.


00:06:39.780 --> 00:06:41.860
- Heartbleed was it called?


00:06:41.860 --> 00:06:43.180
Which is it?


00:06:43.180 --> 00:06:44.380
Heartbleed?


00:06:44.380 --> 00:06:46.340
- Yeah, Heartbleed, that's right.


00:06:46.340 --> 00:06:48.380
- Yeah, which is a great name for a bug.


00:06:48.380 --> 00:06:51.820
- It's like, well, why wasn't this fixed?


00:06:51.820 --> 00:06:54.420
Well, there's one person who does it in their spare time,


00:06:54.420 --> 00:06:55.540
but everything depends on it.


00:06:55.540 --> 00:06:57.040
Yeah, but there's still one person


00:06:57.040 --> 00:06:58.800
who does it in their spare time.


00:06:58.800 --> 00:06:59.640
- Yeah.


00:06:59.640 --> 00:07:02.120
- And yeah, it's really hard to put that kind of energy


00:07:02.120 --> 00:07:03.960
and responsiveness into it.


00:07:03.960 --> 00:07:05.040
All right, fantastic.


00:07:05.040 --> 00:07:08.760
So let's talk, let's start with,


00:07:08.760 --> 00:07:10.120
not Textual, which I had on the screen,


00:07:10.120 --> 00:07:11.600
but let's start with Rich.


00:07:11.600 --> 00:07:15.960
Rich is where things got started amongst Rich and Textual,


00:07:15.960 --> 00:07:17.960
right, if I remember the history.


00:07:17.960 --> 00:07:19.480
- Yeah, Rich was first,


00:07:19.480 --> 00:07:22.200
that's about two years ago that I started dying out.


00:07:22.200 --> 00:07:23.040
- Yeah, cool.


00:07:23.040 --> 00:07:24.920
So tell people, you know,


00:07:24.920 --> 00:07:26.640
a lot of people have heard of Rich.


00:07:26.640 --> 00:07:31.640
But maybe tell folks out there, how would you describe it?


00:07:31.640 --> 00:07:35.620
We've had ways to sort of print stuff nicer.


00:07:35.620 --> 00:07:37.320
We've got pretty print in Python.


00:07:37.320 --> 00:07:39.280
We've got Colorama where you can put color


00:07:39.280 --> 00:07:41.400
into your terminal, but this takes it


00:07:41.400 --> 00:07:43.080
to an absolutely new level.


00:07:43.080 --> 00:07:45.480
So tell us about Rich.


00:07:45.480 --> 00:07:48.160
- Yeah, that makes it difficult to describe sometimes


00:07:48.160 --> 00:07:49.200
when people ask me what it does


00:07:49.200 --> 00:07:52.400
'cause it does quite a lot of things.


00:07:52.400 --> 00:07:55.320
But it's all under the umbrella of writing


00:07:55.320 --> 00:07:59.560
more sophisticated output to the terminal.


00:07:59.560 --> 00:08:03.160
So at the basic level, you can set colors


00:08:03.160 --> 00:08:07.000
and you can set styles like bold and italic.


00:08:07.000 --> 00:08:09.640
Next level up, it'll do word wrap


00:08:09.640 --> 00:08:12.680
and it will also word wrap the styles


00:08:12.680 --> 00:08:15.680
so you can apply bold and then word wrap it.


00:08:15.680 --> 00:08:19.520
And then we have things like tables,


00:08:19.520 --> 00:08:21.280
this quite sophisticated table support


00:08:21.280 --> 00:08:24.280
which are quite close to HTML tables.


00:08:24.280 --> 00:08:27.920
You can put things in cells.


00:08:27.920 --> 00:08:30.080
- You've got a header row, you've got a little divider,


00:08:30.080 --> 00:08:31.560
and then you've got the data.


00:08:31.560 --> 00:08:33.400
- Yeah, and you can draw lines around it


00:08:33.400 --> 00:08:35.240
and change the styles.


00:08:35.240 --> 00:08:39.480
- You even have alternating rows, right?


00:08:39.480 --> 00:08:42.320
So it kind of helps you line across,


00:08:42.320 --> 00:08:43.800
but it's pretty neat.


00:08:43.800 --> 00:08:44.800
- Exactly, yeah.


00:08:44.800 --> 00:08:49.040
So it's quite sophisticated and it's all composable.


00:08:49.040 --> 00:08:52.120
So if I've got a table, I can obviously put text inside it,


00:08:52.120 --> 00:08:55.020
but I can put another table inside it


00:08:55.020 --> 00:08:56.880
or I could put a progress bar inside it


00:08:56.880 --> 00:08:58.480
or syntax highlighting inside it.


00:08:58.480 --> 00:09:02.000
So the idea is that rather than like lots


00:09:02.000 --> 00:09:04.700
of separate libraries which don't work well together,


00:09:04.700 --> 00:09:08.200
which I think was the situation that we had previously,


00:09:08.200 --> 00:09:10.840
now they all work together, they fit inside each other


00:09:10.840 --> 00:09:13.520
and they integrate quite well.


00:09:13.520 --> 00:09:15.040
- Right, so you could take your formatting


00:09:15.040 --> 00:09:16.320
and put it in your Word wrap


00:09:16.320 --> 00:09:18.800
and put it inside of a table cell or something like that?


00:09:18.800 --> 00:09:19.640
- Exactly, yeah.


00:09:21.760 --> 00:09:23.460
So one of the things that struck me,


00:09:23.460 --> 00:09:24.960
well, there's a couple things,


00:09:24.960 --> 00:09:29.880
but one of them is just how popular Rich is, right?


00:09:29.880 --> 00:09:32.180
It's almost 30,000 GitHub stars.


00:09:32.180 --> 00:09:35.920
That's close to FastAPI level of popularity


00:09:35.920 --> 00:09:38.500
and not that far behind Flask and Django.


00:09:38.500 --> 00:09:41.660
That's really, really popular.


00:09:41.660 --> 00:09:42.920
When did you create this?


00:09:42.920 --> 00:09:45.360
- Two years ago.


00:09:48.920 --> 00:09:53.920
So I guess on the timeline, similar age to FastAPI,


00:09:53.920 --> 00:09:57.800
but much younger than Flask and Django,


00:09:57.800 --> 00:09:59.360
if I'm comparing them to those.


00:09:59.360 --> 00:10:01.400
And over here it says on your page,


00:10:01.400 --> 00:10:03.960
you have 2 million downloads a month.


00:10:03.960 --> 00:10:05.280
That's pretty incredible.


00:10:05.280 --> 00:10:06.800
- Yeah, that's pretty crazy.


00:10:06.800 --> 00:10:09.400
I think quite a few of those are automated,


00:10:09.400 --> 00:10:11.760
they're from CI systems.


00:10:11.760 --> 00:10:17.000
But I do see that rising quite steadily.


00:10:17.000 --> 00:10:18.760
- Yeah, I wonder how many of the CI systems


00:10:18.760 --> 00:10:23.760
just in general out there, do caching at some level


00:10:23.760 --> 00:10:26.840
where it wouldn't register, right?


00:10:26.840 --> 00:10:29.320
You know, if I pip install a thing I've already installed


00:10:29.320 --> 00:10:30.360
and it's a certain version,


00:10:30.360 --> 00:10:33.040
I'll just say using cached version, right?


00:10:33.040 --> 00:10:36.680
Versus if you create a brand new Docker image


00:10:36.680 --> 00:10:39.420
and then the next thing you do is install your,


00:10:39.420 --> 00:10:40.860
you know, pip install your dependencies


00:10:40.860 --> 00:10:42.040
inside of your Docker container.


00:10:42.040 --> 00:10:43.440
That's a true download, right?


00:10:43.440 --> 00:10:45.920
'Cause that machine is totally fresh.


00:10:45.920 --> 00:10:46.960
- Yeah.


00:10:46.960 --> 00:10:47.800
- Yeah.


00:10:47.800 --> 00:10:49.420
- Yeah, what do you, did you have any feel


00:10:49.420 --> 00:10:51.060
for what that breakdown is?


00:10:51.060 --> 00:10:54.260
- To be honest, I'm not sure.


00:10:54.260 --> 00:10:57.060
That site doesn't give you the breakdown.


00:10:57.060 --> 00:10:59.020
To be honest, what I would be interested in


00:10:59.020 --> 00:11:01.740
is how many developers typed pip install rich


00:11:01.740 --> 00:11:06.460
in that month, you know, how many human beings


00:11:06.460 --> 00:11:09.100
played with it, that would interest me more.


00:11:09.100 --> 00:11:13.060
But suffice to say, quite a lot of people have used it.


00:11:13.060 --> 00:11:13.900
- Quite a lot.


00:11:13.900 --> 00:11:14.740
- Yeah.


00:11:14.740 --> 00:11:16.700
- Yeah, I'm sure it's changed the way that you think


00:11:16.700 --> 00:11:19.780
about working on the library and whatnot, right?


00:11:19.780 --> 00:11:23.340
You know, it's maybe this might destabilize,


00:11:23.340 --> 00:11:25.940
this might cause a problem or this might cause confusion.


00:11:25.940 --> 00:11:27.820
It's one thing to do that for a thousand people.


00:11:27.820 --> 00:11:29.780
It's another to do that for 2 million.


00:11:29.780 --> 00:11:31.620
- That's right.


00:11:31.620 --> 00:11:32.740
- Or something like that, right?


00:11:32.740 --> 00:11:34.460
You're gonna hear about it.


00:11:34.460 --> 00:11:35.300
- Absolutely.


00:11:35.300 --> 00:11:39.020
I didn't follow SemVer very strictly originally.


00:11:39.020 --> 00:11:41.820
I always planned to use SemVer


00:11:41.820 --> 00:11:46.300
and people started using it and I made a breaking change.


00:11:46.300 --> 00:11:49.580
And I didn't think anyone was using this particular feature.


00:11:49.580 --> 00:11:52.540
So I didn't increase the major version number.


00:11:52.540 --> 00:11:54.340
And then a couple of days later,


00:11:54.340 --> 00:11:58.680
I got an issue, someone telling me off, quite rightly so,


00:11:58.680 --> 00:12:01.640
for not warning them about a breaking feature.


00:12:01.640 --> 00:12:05.140
So since then, I've been very, very strict.


00:12:05.140 --> 00:12:06.700
It's at version 10,


00:12:06.700 --> 00:12:11.700
and that's because I've made 10 breaking changes to API.


00:12:11.700 --> 00:12:13.820
They're actually quite small.


00:12:13.820 --> 00:12:17.540
You know, it might just be one signature and one method,


00:12:17.540 --> 00:12:20.980
but that requires a major version change.


00:12:20.980 --> 00:12:25.340
- Right, but at that scale, obviously,


00:12:25.340 --> 00:12:26.740
that's still gonna affect the people


00:12:26.740 --> 00:12:29.060
you're gonna hear about it and whatnot, right?


00:12:29.060 --> 00:12:30.940
- Exactly, I don't want to break anyone's code.


00:12:30.940 --> 00:12:32.140
I don't want to give them a bad day.


00:12:32.140 --> 00:12:35.420
So I'm very strict about that kind of thing, yeah.


00:12:35.420 --> 00:12:36.860
- Yeah, fantastic.


00:12:36.860 --> 00:12:39.640
And also people should pin their versions, right?


00:12:41.700 --> 00:12:44.300
On the flip side, they can also make sure


00:12:44.300 --> 00:12:47.780
that what they're working on is nice and stable, right?


00:12:47.780 --> 00:12:49.500
- Yeah, a lot of people don't.


00:12:49.500 --> 00:12:52.300
I do search GitHub sometimes for rich


00:12:52.300 --> 00:12:57.300
and I look at their PyTumble, was it?


00:12:57.300 --> 00:12:58.140
PyProject Tumble.


00:12:58.140 --> 00:13:04.380
Yeah, and a lot of people don't pin their rich version.


00:13:04.380 --> 00:13:09.380
It'll just be rich and it shouldn't break too much.


00:13:09.380 --> 00:13:10.740
And often it's a hobby project,


00:13:10.740 --> 00:13:12.780
So it's not the biggest deal.


00:13:12.780 --> 00:13:14.220
- Right, it really depends.


00:13:14.220 --> 00:13:16.400
Like it's one of the things I struggle with.


00:13:16.400 --> 00:13:19.140
So I do a lot of course development, right?


00:13:19.140 --> 00:13:22.460
And I don't necessarily want to pen people


00:13:22.460 --> 00:13:24.860
to the oldest version.


00:13:24.860 --> 00:13:27.120
I'd rather let them have the newest stuff.


00:13:27.120 --> 00:13:28.940
So it exactly matches the documentation.


00:13:28.940 --> 00:13:30.580
If they go check it these days and stuff,


00:13:30.580 --> 00:13:33.260
if they go back, you know, six months and watch the video


00:13:33.260 --> 00:13:35.220
or check out the demo app,


00:13:35.220 --> 00:13:37.620
but at the same time, there's a chance of that instability.


00:13:37.620 --> 00:13:38.780
There's always this tension, right?


00:13:38.780 --> 00:13:42.940
I guess it depends on what the use case of that app or that library is.


00:13:42.940 --> 00:13:45.980
Yeah, it's tricky to say.


00:13:45.980 --> 00:13:51.020
The less critical it is for your business or your project,


00:13:51.020 --> 00:13:52.380
the more you can relax.


00:13:52.380 --> 00:13:55.660
If it's a tutorial, maybe it doesn't matter quite so much.


00:13:55.660 --> 00:13:59.580
But if it's critical infrastructure, do you want to pin?


00:13:59.580 --> 00:14:08.380
Yeah, so for my web apps, versions are pinned super strict.


00:14:08.380 --> 00:14:10.680
even the dependencies of the dependency,


00:14:10.680 --> 00:14:12.560
like the transitive closure of the dependencies


00:14:12.560 --> 00:14:15.680
are all pinned, but on like little demo apps and stuff,


00:14:15.680 --> 00:14:16.840
like it's just wide open.


00:14:16.840 --> 00:14:20.160
So I think it depends.


00:14:20.160 --> 00:14:21.720
All right, so out in the audience,


00:14:21.720 --> 00:14:23.060
we have Hybotics says,


00:14:23.060 --> 00:14:24.320
"Will, this looks really good to me.


00:14:24.320 --> 00:14:25.240
I'm looking at repo now."


00:14:25.240 --> 00:14:28.160
So not everyone has previously heard of Rich,


00:14:28.160 --> 00:14:29.000
which is awesome.


00:14:29.000 --> 00:14:33.200
- Oh, it's good to know there's a few people left.


00:14:33.200 --> 00:14:36.080
- That's right, yeah.


00:14:36.080 --> 00:14:39.080
I suspect there's actually a lot of people


00:14:39.080 --> 00:14:42.080
who haven't heard it before.


00:14:42.080 --> 00:14:46.080
Again, check out the screenshots


00:14:46.080 --> 00:14:48.200
because if you think, oh, here's something


00:14:48.200 --> 00:14:51.480
that sort of enhances terminal output,


00:14:51.480 --> 00:14:53.880
that completely undersells the level


00:14:53.880 --> 00:14:55.320
of what you've pulled off here.


00:14:55.320 --> 00:14:58.280
And that's only before we even talk about textual, right?


00:14:58.280 --> 00:15:01.880
Yeah, so let's talk about compatibility


00:15:01.880 --> 00:15:04.040
because one of the things I find


00:15:04.040 --> 00:15:07.240
with these sort of nicer terminal output things.


00:15:07.240 --> 00:15:10.200
It's like, this works fantastic on POSIX systems.


00:15:10.200 --> 00:15:11.760
Oh, but you better not be on Windows


00:15:11.760 --> 00:15:14.160
or if you're a data scientist,


00:15:14.160 --> 00:15:15.920
you like Jupyter Notebooks, you can forget about it.


00:15:15.920 --> 00:15:17.360
But if you really want to run this thing,


00:15:17.360 --> 00:15:18.640
so what's the story?


00:15:18.640 --> 00:15:20.840
Like, where can I use this?


00:15:20.840 --> 00:15:22.440
- Just about everywhere.


00:15:22.440 --> 00:15:25.000
Linux, OSX, Windows, and Jupyter.


00:15:25.000 --> 00:15:28.640
It was, to start out, it was Linux, OSX,


00:15:28.640 --> 00:15:30.640
'cause that is the easiest platform


00:15:30.640 --> 00:15:32.340
to develop this kind of stuff for.


00:15:33.520 --> 00:15:37.200
Windows is a bit of a black sheep. It didn't quite work.


00:15:37.200 --> 00:15:39.040
Windows is getting better though, right?


00:15:39.040 --> 00:15:41.600
I mean, when it was CMD.exe, it was like,


00:15:41.600 --> 00:15:43.400
oh, this is really different.


00:15:43.400 --> 00:15:46.320
But the new Windows Terminal, I'm really digging it.


00:15:46.320 --> 00:15:48.360
You know, the new PowerShell,


00:15:48.360 --> 00:15:50.200
things like, oh, my Posh extensions.


00:15:50.200 --> 00:15:52.080
I can feel much more at home on Windows


00:15:52.080 --> 00:15:53.920
on the terminal than I used to.


00:15:53.920 --> 00:15:54.760
Yeah, yeah.


00:15:54.760 --> 00:15:57.800
So the new Windows Terminal is much better.


00:15:57.800 --> 00:16:00.060
Rich doesn't have to do quite so many,


00:16:00.060 --> 00:16:02.680
and doesn't have to jump so many hoops


00:16:02.680 --> 00:16:04.300
to get Windows support.


00:16:04.300 --> 00:16:08.060
In fact, it just runs kind of as is.


00:16:08.060 --> 00:16:10.780
It still supports the older Windows terminal,


00:16:10.780 --> 00:16:12.820
which does have a few issues.


00:16:12.820 --> 00:16:16.460
It doesn't, it has very limited colors.


00:16:16.460 --> 00:16:18.520
- Yeah, I guess maybe you want to, right?


00:16:18.520 --> 00:16:20.580
If you're gonna give the app to somebody,


00:16:20.580 --> 00:16:24.100
you can't really package up the terminal


00:16:24.100 --> 00:16:24.940
they're gonna run it in.


00:16:24.940 --> 00:16:28.340
So you probably wanna have your best possible experience on,


00:16:28.340 --> 00:16:31.700
To be honest, most people are still going to be running cmd.exe,


00:16:31.700 --> 00:16:33.300
even if they shouldn't.


00:16:33.300 --> 00:16:35.100
Yeah, exactly.


00:16:35.100 --> 00:16:37.780
I could just tell them to install Windows Terminal,


00:16:37.780 --> 00:16:40.580
but that kind of goes against the ethos of this library.


00:16:40.580 --> 00:16:46.100
I just want it to work so that people don't have to think about what it runs on.


00:16:46.100 --> 00:16:47.780
Yeah, absolutely.


00:16:47.780 --> 00:16:51.580
Yeah, so Linux, macOS, and Windows


00:16:51.580 --> 00:16:55.500
with good support for the new Windows Terminal,


00:16:55.500 --> 00:16:58.420
very limited support for the old command prompt.


00:16:58.420 --> 00:16:59.980
That's still pretty good.


00:16:59.980 --> 00:17:00.900
- That's still pretty good.


00:17:00.900 --> 00:17:02.220
- I think it's fantastic, actually.


00:17:02.220 --> 00:17:04.900
I mean, if people are really passionate


00:17:04.900 --> 00:17:06.700
about their terminal and they're on Windows,


00:17:06.700 --> 00:17:08.380
they probably know about Windows Terminal anyway,


00:17:08.380 --> 00:17:09.820
so they're probably good.


00:17:09.820 --> 00:17:10.660
- That's true.


00:17:10.660 --> 00:17:12.140
- The one that I thought was interesting


00:17:12.140 --> 00:17:14.540
and nice is Jupyter Notebooks.


00:17:14.540 --> 00:17:16.540
What's the support there?


00:17:16.540 --> 00:17:21.020
- So it works quite well.


00:17:21.020 --> 00:17:24.980
So I wasn't a big Jupyter user at the time.


00:17:24.980 --> 00:17:28.140
I was obviously aware of it, but I didn't use it myself.


00:17:28.140 --> 00:17:31.060
And people asked me for Jupyter support.


00:17:31.060 --> 00:17:32.620
And I thought, it doesn't do that,


00:17:32.620 --> 00:17:33.460
it just works in a terminal.


00:17:33.460 --> 00:17:37.980
But then I looked into it, and it wasn't too bad


00:17:37.980 --> 00:17:39.300
because I already had functionality


00:17:39.300 --> 00:17:42.280
to export terminal content to HTML.


00:17:42.280 --> 00:17:46.100
So I could put a little wrapper around that,


00:17:46.100 --> 00:17:49.700
export it to HTML, and then insert it into Jupyter


00:17:49.700 --> 00:17:50.700
that they've got an API,


00:17:50.700 --> 00:17:54.380
which allows you to write content into a notebook.


00:17:54.380 --> 00:17:59.380
And so I got Jupyter support up quite quickly, quite easily.


00:17:59.380 --> 00:18:02.920
And it works quite nicely, which people appreciate.


00:18:02.920 --> 00:18:04.720
It means that you can write code,


00:18:04.720 --> 00:18:08.280
which writes to terminal mostly.


00:18:08.280 --> 00:18:11.620
But if you do happen to run it in a Jupyter notebook,


00:18:11.620 --> 00:18:14.720
then it'll write the same thing as well.


00:18:14.720 --> 00:18:16.700
- It just knows, it detects that it's running


00:18:16.700 --> 00:18:19.540
in the Jupyter environment, and then it just,


00:18:19.540 --> 00:18:23.140
all right, output is not print, output is generate HTML.


00:18:23.140 --> 00:18:24.140
- Exactly, yeah.


00:18:24.140 --> 00:18:26.140
And Jupyter does have support for that.


00:18:26.140 --> 00:18:30.140
It will capture standard output, and it will convert the colors


00:18:30.140 --> 00:18:31.940
and everything.


00:18:31.940 --> 00:18:36.740
But the problem is it wraps the lines.


00:18:36.740 --> 00:18:38.420
So if you expanded the window, it


00:18:38.420 --> 00:18:40.180
would break any kind of neat formatting.


00:18:40.180 --> 00:18:43.280
If you've got a grid or a table, it would break that.


00:18:43.280 --> 00:18:48.380
So I had to do the HTML export within Rich as well.


00:18:48.380 --> 00:18:49.220
Yeah.


00:18:49.220 --> 00:18:50.340
Yeah, that's super neat.


00:18:50.340 --> 00:18:54.740
So basically, most anywhere people do Python


00:18:54.740 --> 00:18:59.180
with a UI of some sort, this works as the takeaway.


00:18:59.180 --> 00:19:00.300
- Yeah, yeah.


00:19:00.300 --> 00:19:04.100
- Yeah, just going back to the pip pinning version stuff,


00:19:04.100 --> 00:19:07.140
Wayland on the live stream says pip compile,


00:19:07.140 --> 00:19:09.220
pip-tools is a game changer for pin dependencies


00:19:09.220 --> 00:19:12.860
and pip compile specifically for managing pin dependencies.


00:19:12.860 --> 00:19:13.940
That's what I've switched to as well.


00:19:13.940 --> 00:19:17.140
So I just run a script checks for all the new versions,


00:19:17.140 --> 00:19:19.260
regenerates all the pip compiled stuff.


00:19:19.260 --> 00:19:20.740
And I'm really enjoying that.


00:19:20.740 --> 00:19:21.940
I think that's fantastic.


00:19:21.940 --> 00:19:23.020
- Okay, I've not used PIP.


00:19:23.020 --> 00:19:24.420
I want to check that out.


00:19:24.420 --> 00:19:25.260
- Yeah, yeah.


00:19:25.260 --> 00:19:29.900
So you basically define like a requirements file


00:19:29.900 --> 00:19:34.300
that has what you actually have would have PIP,


00:19:34.300 --> 00:19:35.580
typed pip install,


00:19:35.580 --> 00:19:38.340
and then it will generate a requirements.txt


00:19:38.340 --> 00:19:41.020
that is the transitive closure of all of those dependencies


00:19:41.020 --> 00:19:42.260
which are pinned.


00:19:42.260 --> 00:19:45.020
And then you can ask anytime for it to update the versions,


00:19:45.020 --> 00:19:46.020
the pinned versions of that.


00:19:46.020 --> 00:19:49.480
- Okay, is that like Poetry's log files?


00:19:49.480 --> 00:19:53.780
- I think it's similar, yeah.


00:19:53.780 --> 00:19:55.540
I'm not 100% sure, but I think so.


00:19:55.540 --> 00:20:01.500
All right, so let's talk about various features here.


00:20:01.500 --> 00:20:03.620
I think just going through, I mean, we touched on them,


00:20:03.620 --> 00:20:05.460
but let's dive into it a little bit,


00:20:05.460 --> 00:20:08.020
maybe talk a little bit about the code you write.


00:20:08.020 --> 00:20:11.620
So Kim Van Wyk is here to kick us off on the first one.


00:20:11.620 --> 00:20:14.260
Try something as simple as drum rich import print


00:20:14.260 --> 00:20:16.560
and your next project and you will be amazed.


00:20:16.560 --> 00:20:20.500
Will, tell us why we'll be amazed.


00:20:20.500 --> 00:20:24.200
Like what's this alternate print?


00:20:24.200 --> 00:20:28.180
- Okay, so when I first wrote this as a console class,


00:20:28.180 --> 00:20:29.880
you have to construct a class


00:20:29.880 --> 00:20:32.120
and that's got a print method.


00:20:32.120 --> 00:20:36.620
But I figured I could just overwrite the existing,


00:20:36.620 --> 00:20:40.200
the built-in print because it's a function in Python 3,


00:20:40.200 --> 00:20:43.160
I can just replace it with my own version.


00:20:43.160 --> 00:20:44.120
So that's what I've done here.


00:20:44.120 --> 00:20:48.040
There's a version of print you can import from Rich,


00:20:48.040 --> 00:20:51.680
which has the same signature as a built-in print,


00:20:51.680 --> 00:20:55.520
but it supports the console markup,


00:20:55.520 --> 00:20:58.480
so you can insert these little square brackets


00:20:58.480 --> 00:21:01.960
with a style like here we've got bold magenta,


00:21:01.960 --> 00:21:05.360
and it'll do emojis.


00:21:05.360 --> 00:21:06.840
You've got colon--


00:21:06.840 --> 00:21:08.080
- And these styles,


00:21:08.080 --> 00:21:11.600
like the square bracket bold magenta slash bold magenta,


00:21:11.600 --> 00:21:13.520
this is specific to Rich.


00:21:13.520 --> 00:21:15.760
This is something that you came up with?


00:21:15.760 --> 00:21:16.600
- Yeah, that's right.


00:21:16.600 --> 00:21:18.880
It's called, I call it console markup,


00:21:18.880 --> 00:21:21.480
and the syntax is very BB code-like.


00:21:21.480 --> 00:21:23.800
I don't know if you've ever used BB code.


00:21:23.800 --> 00:21:24.880
Yeah, it's quite simple.


00:21:24.880 --> 00:21:29.320
It's just like a markup where the tags have square brackets.


00:21:29.320 --> 00:21:30.300
- Yeah, I like this a lot,


00:21:30.300 --> 00:21:34.100
because one of the things that I'll use a lot still is,


00:21:34.100 --> 00:21:35.480
which maybe I need to start switching


00:21:35.480 --> 00:21:38.300
to what you're doing here, is Colorama.


00:21:38.300 --> 00:21:42.080
But for Colorama, you'll do things like you'll import


00:21:42.080 --> 00:21:45.260
the foreground settings or styles,


00:21:45.260 --> 00:21:50.260
and then you can say foreground.green plus the text,


00:21:50.260 --> 00:21:53.580
then foreground reset to go back to normal,


00:21:53.580 --> 00:21:54.880
but you don't have the bold,


00:21:54.880 --> 00:21:58.700
and then all of that stuff has to happen in code, right?


00:21:58.700 --> 00:22:00.420
If I wanted to say import some text


00:22:00.420 --> 00:22:02.120
and then show it on the screen,


00:22:02.120 --> 00:22:05.060
that text could have these styles in it, right?


00:22:05.060 --> 00:22:06.820
- That's right, yeah.


00:22:06.820 --> 00:22:09.100
So you can embed it in code easier


00:22:09.100 --> 00:22:11.500
or use it from file, et cetera.


00:22:11.500 --> 00:22:13.900
And I think it's a bit easier to read


00:22:13.900 --> 00:22:16.500
rather than doing lots of string concatenations.


00:22:16.500 --> 00:22:20.420
And also the benefit over the Colorama approach,


00:22:20.420 --> 00:22:23.220
Colorama is a very good bit of software.


00:22:23.220 --> 00:22:25.140
I've relied on it for years.


00:22:25.140 --> 00:22:27.760
But the problem is when you concatenate strings like that,


00:22:27.760 --> 00:22:30.660
you insert these ANSI codes.


00:22:30.660 --> 00:22:32.100
And then once you've built that string,


00:22:32.100 --> 00:22:34.140
you can't do anything with it really.


00:22:34.140 --> 00:22:36.880
You can't word wrap it, you can't format it.


00:22:36.880 --> 00:22:40.780
So with console markup, you can do,


00:22:40.780 --> 00:22:43.780
you can mark up bits of text with color and style, et cetera.


00:22:43.780 --> 00:22:46.860
And then you can further do operations on them,


00:22:46.860 --> 00:22:50.500
like word wrap and centering text


00:22:50.500 --> 00:22:52.060
and putting it inside the table, et cetera.


00:22:52.060 --> 00:22:54.420
- Right, two other things that jump out here


00:22:54.420 --> 00:22:57.300
that are interesting is you have emoji support.


00:22:57.300 --> 00:23:00.660
So you can say colon vampire colon,


00:23:00.660 --> 00:23:01.980
which is pretty awesome.


00:23:01.980 --> 00:23:04.020
You can, I mean, you can technically,


00:23:04.020 --> 00:23:06.100
if the file format supports it,


00:23:06.100 --> 00:23:10.860
You could actually put a vampire emoji in the string,


00:23:10.860 --> 00:23:12.560
but it's still kind of nice that you have


00:23:12.560 --> 00:23:15.700
this sort of emoji lookup, right?


00:23:15.700 --> 00:23:18.860
- Yeah, exactly, because if you want to insert


00:23:18.860 --> 00:23:21.620
the Unicode character, you'd have to go and find it


00:23:21.620 --> 00:23:22.740
and then cut and paste it.


00:23:22.740 --> 00:23:23.580
- Yeah, exactly. - But this way,


00:23:23.580 --> 00:23:24.500
you can just do colon.


00:23:24.500 --> 00:23:26.500
You can set that into console markup,


00:23:26.500 --> 00:23:30.020
just colon vampire colon or colon smiley colon.


00:23:30.020 --> 00:23:32.660
I think there's a couple of thousand emojis


00:23:32.660 --> 00:23:33.940
you can use there now.


00:23:33.940 --> 00:23:35.020
- Fantastic.


00:23:35.020 --> 00:23:38.700
Then another thing that jumps out is you're printing,


00:23:38.700 --> 00:23:41.500
"Hello, bold magenta world."


00:23:41.500 --> 00:23:44.620
So that's the word world, bold and magenta,


00:23:44.620 --> 00:23:45.780
and then the vampire.


00:23:45.780 --> 00:23:48.460
But then you're also printing out a dictionary,


00:23:48.460 --> 00:23:51.820
and the dictionary is like pretty printed,


00:23:51.820 --> 00:23:54.780
but also syntax highlighted.


00:23:54.780 --> 00:23:56.560
- That's right, yeah.


00:23:56.560 --> 00:24:00.140
So if you print a container, like a dictionary list,


00:24:00.140 --> 00:24:02.860
or like an atomic Python type,


00:24:02.860 --> 00:24:05.360
it'll run the pretty printer over it.


00:24:05.360 --> 00:24:09.840
So format it in kind of the style that people like.


00:24:09.840 --> 00:24:11.700
In code, you probably format,


00:24:11.700 --> 00:24:14.320
this is how black would format it.


00:24:14.320 --> 00:24:16.200
So it looks much the same.


00:24:16.200 --> 00:24:19.860
And then it runs syntax highlighting over it.


00:24:19.860 --> 00:24:22.000
There's a few regular expressions.


00:24:22.000 --> 00:24:25.880
So in rich, you can say anything between two quotes


00:24:25.880 --> 00:24:28.680
is a string and therefore it's green.


00:24:28.680 --> 00:24:31.920
Anything in angular brackets is a tag like thing.


00:24:31.920 --> 00:24:36.120
So I'll bold the brackets and change the tag name


00:24:36.120 --> 00:24:39.160
to bright red, or whatever it is.


00:24:39.160 --> 00:24:42.720
And so that the output you get is quite readable


00:24:42.720 --> 00:24:45.320
and looks like something that came out of VS Code


00:24:45.320 --> 00:24:46.440
or your editor.


00:24:46.440 --> 00:24:48.440
- Yeah.


00:24:48.440 --> 00:24:50.880
The more I look at this, the more I think


00:24:50.880 --> 00:24:54.000
maybe just every project, I'm gonna follow Kim's advice


00:24:54.000 --> 00:24:57.160
and just from rich import print, because why not?


00:24:57.160 --> 00:25:00.440
This looks, it has all this cool auto formatting.


00:25:00.440 --> 00:25:04.920
- And does it look actually at the type


00:25:04.920 --> 00:25:07.480
that it's printing to make any determination


00:25:07.480 --> 00:25:09.660
or does it just look and see if it's source code


00:25:09.660 --> 00:25:10.960
and then try to format it?


00:25:10.960 --> 00:25:13.020
- It looks at the type.


00:25:13.020 --> 00:25:15.000
- If it gets a dictionary or it gets an object


00:25:15.000 --> 00:25:16.720
versus getting like a true string.


00:25:16.720 --> 00:25:22.720
- It'll do both, it'll syntax highlight a string.


00:25:22.720 --> 00:25:25.760
But if it's a container, if it knows that the type,


00:25:25.760 --> 00:25:29.320
it'll do some syntax highlighting there.


00:25:29.320 --> 00:25:32.680
And there's also a simple protocol you can add


00:25:32.680 --> 00:25:35.920
to your own objects if you want them pretty printed


00:25:35.920 --> 00:25:36.760
and formatted.


00:25:36.760 --> 00:25:42.520
- Not dunder stir dunder repper, but something else.


00:25:42.520 --> 00:25:46.840
- It's dunder rich repper.


00:25:46.840 --> 00:25:52.560
You can specify the arguments and parameters


00:25:52.560 --> 00:25:56.800
and the indentation and it'll render something


00:25:56.800 --> 00:26:00.520
It's very much like a pretty printed dict.


00:26:00.520 --> 00:26:03.560
- That sounds like something that would be fantastic


00:26:03.560 --> 00:26:06.800
to add to some intermediate library that people use.


00:26:06.800 --> 00:26:09.460
So I, sure, I could create a class and add it to mine,


00:26:09.460 --> 00:26:11.480
but so often what I wanna do is print out


00:26:11.480 --> 00:26:13.760
a Mongo engine model or a SQLAlchemy model


00:26:13.760 --> 00:26:16.080
or a Pydantic model.


00:26:16.080 --> 00:26:16.920
- Yeah.


00:26:16.920 --> 00:26:18.160
- Pydantic could add that, or, you know what I mean?


00:26:18.160 --> 00:26:20.680
Like these, like, or SQLAlchemy could add something


00:26:20.680 --> 00:26:23.320
like, oh, this is how you, you know, describe,


00:26:23.320 --> 00:26:25.040
like this one has an index and whatnot.


00:26:25.040 --> 00:26:25.880
I think that'd be fantastic.


00:26:25.880 --> 00:26:29.680
- Exactly, yeah, so I've added it to Atters,


00:26:29.680 --> 00:26:33.680
so it'll pretty print objects from the Attrs library.


00:26:33.680 --> 00:26:37.100
And I have a PR for Pydantic as well,


00:26:37.100 --> 00:26:40.720
so in the future, you print a Pydantic object


00:26:40.720 --> 00:26:42.880
and it'll format it quite similar


00:26:42.880 --> 00:26:45.080
to the built-in data structures.


00:26:45.080 --> 00:26:48.040
- Yeah, okay, fantastic, I love it.


00:26:48.040 --> 00:26:48.920
So before we move on to this,


00:26:48.920 --> 00:26:50.240
I do wanna talk about some other things,


00:26:50.240 --> 00:26:52.800
'cause we're just scratching the surface here.


00:26:52.800 --> 00:26:55.680
But one of the things that I think has both impressed me


00:26:55.680 --> 00:26:58.000
And Brian and I over on Python Bytes,


00:26:58.000 --> 00:26:59.960
on our podcast we do there,


00:26:59.960 --> 00:27:03.200
we've been continuously impressed


00:27:03.200 --> 00:27:06.000
at how fast you're adding new features


00:27:06.000 --> 00:27:08.160
and still kind of keeping the ethos


00:27:08.160 --> 00:27:10.040
of this library together.


00:27:10.040 --> 00:27:14.400
Maybe give people a little hint on just the velocity here.


00:27:14.400 --> 00:27:15.840
Like, how's that work?


00:27:15.840 --> 00:27:19.520
- Well, I'm not convinced that it's been that fast.


00:27:19.520 --> 00:27:20.560
Bear in mind, Rich is--


00:27:20.560 --> 00:27:22.600
- It felt like a lot of work, it didn't feel that fast?


00:27:22.600 --> 00:27:23.520
- It does.


00:27:23.520 --> 00:27:27.440
But thing is, when I add new stuff to Rich,


00:27:27.440 --> 00:27:29.720
I'm not starting from scratch.


00:27:29.720 --> 00:27:34.200
There's several layers which are already built


00:27:34.200 --> 00:27:36.320
and well tested.


00:27:36.320 --> 00:27:40.080
So the bit that I add might not be as large


00:27:40.080 --> 00:27:41.720
as maybe it looks.


00:27:41.720 --> 00:27:45.000
- I see, so you've already got a lot of structure


00:27:45.000 --> 00:27:47.960
and architecture that makes adding a new feature


00:27:47.960 --> 00:27:49.520
not from scratch sort of thing, right?


00:27:49.520 --> 00:27:50.920
So a good design, basically?


00:27:52.000 --> 00:27:52.840
I hope so, yeah.


00:27:52.840 --> 00:27:54.460
And it seems to be working quite well


00:27:54.460 --> 00:27:57.620
because I did build a core feature set


00:27:57.620 --> 00:28:00.140
and then I added some things to it.


00:28:00.140 --> 00:28:02.500
And admittedly, those things came quite fast


00:28:02.500 --> 00:28:04.720
because it wasn't that hard to implement.


00:28:04.720 --> 00:28:10.300
And I've got a point there where Rich is quite large.


00:28:10.300 --> 00:28:13.780
I'd be resistant to adding any more stuff to it


00:28:13.780 --> 00:28:18.300
unless it is very useful for a broad selection of users.


00:28:18.300 --> 00:28:20.100
- Sure.


00:28:20.100 --> 00:28:21.700
Do you have a sense of how many lines of code it is?


00:28:21.700 --> 00:28:23.120
I know you don't mean large in that sense,


00:28:23.120 --> 00:28:24.400
you mean large in sort of feature set,


00:28:24.400 --> 00:28:27.540
but do you have a sense of how many lines of code?


00:28:27.540 --> 00:28:29.240
- You know what, I've never checked.


00:28:29.240 --> 00:28:34.740
- Maybe we'll have to try more time with this recording.


00:28:34.740 --> 00:28:36.460
Someone out in the audience will have like already


00:28:36.460 --> 00:28:38.600
downloaded and checked for us, who knows?


00:28:38.600 --> 00:28:43.100
All right, so the next thing let's talk about is the REPL.


00:28:43.100 --> 00:28:46.980
So I can create a REPL or read eval print loop


00:28:46.980 --> 00:28:51.380
by typing the word Python on the terminal.


00:28:51.380 --> 00:28:54.620
And that opens it up, but it looks just--


00:28:54.620 --> 00:28:58.100
it's probably the least possibly good experiences


00:28:58.100 --> 00:28:59.340
you can have in Python.


00:28:59.340 --> 00:29:02.580
There's no color.


00:29:02.580 --> 00:29:06.380
There's no feedback on what's happening.


00:29:06.380 --> 00:29:10.580
But then I could say from rich import pretty, pretty.install.


00:29:10.580 --> 00:29:14.660
And then all of a sudden, basically,


00:29:14.660 --> 00:29:17.300
the output of the REPL--


00:29:17.300 --> 00:29:19.660
if I'd set a variable name, it'll print it out.


00:29:19.660 --> 00:29:22.100
that becomes rich printed, right?


00:29:22.100 --> 00:29:25.580
Tell us about this. - That's right, yeah.


00:29:25.580 --> 00:29:29.140
So yeah, you call pretty.install,


00:29:29.140 --> 00:29:31.140
and then everything you put into the,


00:29:31.140 --> 00:29:33.900
after the prompt will be pretty printed.


00:29:33.900 --> 00:29:39.060
So previously, if you printed a dict without rich,


00:29:39.060 --> 00:29:41.700
it would just smush it onto a few lines.


00:29:41.700 --> 00:29:43.300
It's quite hard to--


00:29:43.300 --> 00:29:46.300
- Right, it's all one line except for the word wrapping,


00:29:46.300 --> 00:29:48.020
which doesn't even break on words,


00:29:48.020 --> 00:29:50.700
And there's zero color, right?


00:29:50.700 --> 00:29:51.800
- Yeah, exactly.


00:29:51.800 --> 00:29:54.380
So it's quite difficult to read.


00:29:54.380 --> 00:29:55.580
I'm quite a visual person,


00:29:55.580 --> 00:29:57.700
so I always had difficulty with this.


00:29:57.700 --> 00:29:59.900
If it was more than two lines,


00:29:59.900 --> 00:30:02.380
it'd be quite difficult for me to figure out


00:30:02.380 --> 00:30:04.080
where the keys and the values are.


00:30:04.080 --> 00:30:06.260
But if you do it with rich,


00:30:06.260 --> 00:30:08.300
it'll pretty print it onto lines


00:30:08.300 --> 00:30:11.220
and it'll indent it like you would code,


00:30:11.220 --> 00:30:12.120
and then it'll highlight it.


00:30:12.120 --> 00:30:14.560
So it makes things just much more readable.


00:30:14.560 --> 00:30:17.620
A lot of people will put it in their startup file,


00:30:17.620 --> 00:30:19.860
so they just get this ripple by default.


00:30:19.860 --> 00:30:21.720
- Oh, interesting.


00:30:21.720 --> 00:30:22.840
Yeah, that's a good idea.


00:30:22.840 --> 00:30:29.060
Have you tried this on the more advanced


00:30:29.060 --> 00:30:34.820
repls like PT Python or BT Python or those


00:30:34.820 --> 00:30:39.020
where you get an eMaxie or Vim experience?


00:30:39.020 --> 00:30:41.340
- I haven't, no, I've tried it on IPython


00:30:41.340 --> 00:30:43.500
and it works quite nicely on IPython,


00:30:43.500 --> 00:30:45.340
but I haven't tried it on other--


00:30:45.340 --> 00:30:48.660
It probably works on PT Python, but I haven't tried it.


00:30:48.660 --> 00:30:51.260
Cool.


00:30:51.260 --> 00:30:55.360
All right, now another thing that you can do a lot with


00:30:55.360 --> 00:30:59.280
is sort of taking it up to the next level is the console.


00:30:59.280 --> 00:31:01.000
Tell us about this.


00:31:01.000 --> 00:31:04.200
- Yeah, so the console class


00:31:04.200 --> 00:31:09.040
gives you more kind of advanced features.


00:31:09.040 --> 00:31:11.600
There's more options, more things to specify.


00:31:11.600 --> 00:31:14.980
Typically you'd have a single console per project.


00:31:14.980 --> 00:31:19.980
You could keep it in your top level object or as a global.


00:31:19.980 --> 00:31:22.500
And it has a print method.


00:31:22.500 --> 00:31:24.560
And there's also some other methods like,


00:31:24.560 --> 00:31:26.900
there's a log method.


00:31:26.900 --> 00:31:31.240
And there's a whole bunch of features you can do


00:31:31.240 --> 00:31:33.960
when you construct the console.


00:31:33.960 --> 00:31:37.780
Things like exporting the output to HTML.


00:31:37.780 --> 00:31:39.300
- Okay, nice.


00:31:39.300 --> 00:31:43.580
That's fantastic.


00:31:43.580 --> 00:31:46.160
So one of the things you can do with the console, for example,


00:31:46.160 --> 00:31:49.000
is you can set a style.


00:31:49.000 --> 00:31:51.160
Say console.print and set some styles,


00:31:51.160 --> 00:31:53.240
and then it'll come out in that style,


00:31:53.240 --> 00:31:56.240
as opposed to embedding this console markup


00:31:56.240 --> 00:31:58.160
into the text itself, right?


00:31:58.160 --> 00:31:59.120
>>Yeah, yeah.


00:31:59.120 --> 00:32:00.320
So you can decide--


00:32:00.320 --> 00:32:02.920
sometimes you might not want the console markup,


00:32:02.920 --> 00:32:05.280
especially if there's going to be


00:32:05.280 --> 00:32:07.360
square brackets in the output.


00:32:07.360 --> 00:32:08.680
You don't want them to be--


00:32:08.680 --> 00:32:12.600
>>Or even if you're receiving a string,


00:32:12.600 --> 00:32:14.640
and you just need to put it on the screen,


00:32:14.640 --> 00:32:16.080
but you don't control,


00:32:16.080 --> 00:32:17.560
you haven't generated the string


00:32:17.560 --> 00:32:19.320
or it was generated by some other part of the app,


00:32:19.320 --> 00:32:20.160
rather like here's a message,


00:32:20.160 --> 00:32:21.720
I need to log this that I got.


00:32:21.720 --> 00:32:24.480
You don't wanna like parse the string


00:32:24.480 --> 00:32:27.200
to try to put text into it or more text, right?


00:32:27.200 --> 00:32:28.200
- Yeah, exactly.


00:32:28.200 --> 00:32:30.000
So you can disable the highlighting


00:32:30.000 --> 00:32:33.300
and you can still set a style globally for that string


00:32:33.300 --> 00:32:35.800
if you want it in red or cyan, whatever,


00:32:35.800 --> 00:32:37.400
you can still get that,


00:32:37.400 --> 00:32:39.760
but you can disable the console markup.


00:32:41.000 --> 00:32:42.280
- Yeah, nice.


00:32:42.280 --> 00:32:48.560
And then we have the inspect, rich inspect.


00:32:48.560 --> 00:32:50.120
What is this one?


00:32:50.120 --> 00:32:54.440
- So this is my favorite function in rich.


00:32:54.440 --> 00:32:57.280
And it came quite late.


00:32:57.280 --> 00:33:01.560
And what it does is you call it with any object


00:33:01.560 --> 00:33:03.240
and it'll inspect the object


00:33:03.240 --> 00:33:05.720
and it'll pull out doc strings


00:33:05.720 --> 00:33:07.880
and it'll pull out methods


00:33:07.880 --> 00:33:11.200
and then it will render it in quite a nice little table


00:33:11.200 --> 00:33:13.200
that's quite easy to read.


00:33:13.200 --> 00:33:17.360
And I find this terrific for exploring APIs.


00:33:17.360 --> 00:33:20.560
Sometimes it's better than documentation.


00:33:20.560 --> 00:33:22.400
If you get an object back from an API,


00:33:22.400 --> 00:33:25.120
you don't quite know what methods it supports.


00:33:25.120 --> 00:33:25.960
You just call--


00:33:25.960 --> 00:33:29.320
- Right, so I could have typed something like dir,


00:33:29.320 --> 00:33:32.200
my print dir my object,


00:33:32.200 --> 00:33:37.200
and I get a list of dictionary objects


00:33:37.200 --> 00:33:41.480
which are representing fields and methods and whatnot.


00:33:41.480 --> 00:33:42.600
But they're all jammed together.


00:33:42.600 --> 00:33:44.040
There's no like help.


00:33:44.040 --> 00:33:45.700
This is fantastic.


00:33:45.700 --> 00:33:49.280
So it's like a, almost a table version of that


00:33:49.280 --> 00:33:52.920
with the one line of help next to it, right?


00:33:52.920 --> 00:33:56.640
- Yeah, so it does the same kind of thing as dir or help.


00:33:56.640 --> 00:33:58.120
- Way, way nicer, yeah.


00:33:58.120 --> 00:33:58.960
- It makes it easier.


00:33:58.960 --> 00:33:59.780
- There's also two things I see.


00:33:59.780 --> 00:34:01.960
There's a block of stuff that has,


00:34:04.640 --> 00:34:07.720
it's like a list of, I guess those are field names


00:34:07.720 --> 00:34:10.280
and then it has the methods.


00:34:10.280 --> 00:34:11.800
It's sort of called out separately as well.


00:34:11.800 --> 00:34:13.880
So you're like, these are the fields or properties


00:34:13.880 --> 00:34:14.840
and these are the fields


00:34:14.840 --> 00:34:18.200
and then here's the probably methods and properties, right?


00:34:18.200 --> 00:34:19.040
- That's right, yeah.


00:34:19.040 --> 00:34:23.000
So it basically shows you the signature of all the methods


00:34:23.000 --> 00:34:26.320
and the first line of the doc string.


00:34:26.320 --> 00:34:29.040
There's an option to show you the full details,


00:34:29.040 --> 00:34:32.160
but I find just that abbreviated information


00:34:32.160 --> 00:34:34.200
is generally as much as I need.


00:34:34.200 --> 00:34:35.880
- Oh, that's fantastic.


00:34:35.880 --> 00:34:40.360
So it says things like copy equals def copy bracket bracket.


00:34:40.360 --> 00:34:42.740
Would it say async def if it was an async method


00:34:42.740 --> 00:34:44.960
or what's the, what is that?


00:34:44.960 --> 00:34:46.240
What's the alternative of def there?


00:34:46.240 --> 00:34:48.420
Is it just to show it's a method?


00:34:48.420 --> 00:34:49.920
- That's just to show it's a method.


00:34:49.920 --> 00:34:51.000
That's a good point about async.


00:34:51.000 --> 00:34:53.760
I don't think it does do async def.


00:34:53.760 --> 00:34:54.600
And that's a good idea.


00:34:54.600 --> 00:34:56.280
- It'd be pretty dope to throw in a async def


00:34:56.280 --> 00:34:58.840
or maybe a property if it's a getter method, right?


00:34:58.840 --> 00:34:59.680
Or something like that.


00:34:59.680 --> 00:35:00.500
- You're right, yeah.


00:35:00.500 --> 00:35:01.340
I think it probably should do that.


00:35:01.340 --> 00:35:02.560
It should inspect the method


00:35:02.560 --> 00:35:06.200
and see whether it's async and then emphasize that.


00:35:06.200 --> 00:35:07.600
Yeah, it's a good idea.


00:35:07.600 --> 00:35:08.760
- Yeah, sure.


00:35:08.760 --> 00:35:11.560
We'll open a PR on that podcast here, no problem.


00:35:11.560 --> 00:35:13.160
All right, so those are ones that you've got


00:35:13.160 --> 00:35:15.080
like graphics calling them out


00:35:15.080 --> 00:35:17.200
as some of the really main things.


00:35:17.200 --> 00:35:19.340
There's so much happening here that's amazing,


00:35:19.340 --> 00:35:23.840
but like Waylon out in the live stream points out,


00:35:23.840 --> 00:35:25.980
like mention rich tracebacks.


00:35:25.980 --> 00:35:27.040
They're so good.


00:35:27.040 --> 00:35:30.040
I have, I Python automatically start up with that.


00:35:30.040 --> 00:35:33.640
And yeah, you've got a whole section down here


00:35:33.640 --> 00:35:36.680
under the library of things like logging, log handlers,


00:35:36.680 --> 00:35:40.900
progress bars, status, tree views, like crazy.


00:35:40.900 --> 00:35:43.480
You have tree views in the terminal


00:35:43.480 --> 00:35:46.280
that can expand and collapse with the mouse.


00:35:46.280 --> 00:35:48.200
You know, there's more going on here


00:35:48.200 --> 00:35:49.680
than just the stuff we've touched on, right?


00:35:49.680 --> 00:35:51.400
There's a bunch of cool features.


00:35:51.400 --> 00:35:53.580
- There's a lot going on, yeah.


00:35:53.580 --> 00:35:56.200
Well, Rich will render the tree view.


00:35:56.200 --> 00:35:58.800
It's textual, which provides the collapsing and--


00:35:58.800 --> 00:36:00.400
- Ah, got it, got it, got it.


00:36:00.400 --> 00:36:02.280
So we'll get to the interactive bits,


00:36:02.280 --> 00:36:04.080
but yeah, so I can still draw a tree view


00:36:04.080 --> 00:36:06.320
even with like little, your example here,


00:36:06.320 --> 00:36:09.360
you've got emoji icons for say folders and files.


00:36:09.360 --> 00:36:10.560
And then even in the file,


00:36:10.560 --> 00:36:13.780
you've got an embedded syntax highlighted bit of code


00:36:13.780 --> 00:36:15.560
that comes out of one of the files


00:36:15.560 --> 00:36:18.360
and a markdown with some of the markdown rendered


00:36:18.360 --> 00:36:20.060
as rich markdown.


00:36:20.060 --> 00:36:20.900
- Yeah.


00:36:20.900 --> 00:36:22.400
- Just as markdown, not rich the library,


00:36:22.400 --> 00:36:25.800
but like just colorized and formatted.


00:36:25.800 --> 00:36:26.640
- Yeah.


00:36:26.640 --> 00:36:30.320
It goes back to the composability of rich objects.


00:36:30.320 --> 00:36:32.400
I call them renderables.


00:36:32.400 --> 00:36:34.440
But you can use them in various contexts.


00:36:34.440 --> 00:36:38.280
So in here, you can set a renderable per node on the tree.


00:36:38.280 --> 00:36:39.920
So you can do what we've done here,


00:36:39.920 --> 00:36:45.560
add a table next to a tree item, or some syntax highlighting,


00:36:45.560 --> 00:36:49.120
or render some markdown.


00:36:49.120 --> 00:36:53.040
It doesn't really matter to rich what you ask it to render.


00:36:53.040 --> 00:36:55.160
It can just do it in various contexts.


00:36:55.160 --> 00:36:57.920
>> That's super cool.


00:36:57.920 --> 00:36:58.420
Very cool.


00:36:58.420 --> 00:37:00.440
OK, so we've got the tree, which is amazing.


00:37:00.440 --> 00:37:01.920
Let's-- since Waylon mentioned it,


00:37:01.920 --> 00:37:03.520
let's talk tracebacks real quick.


00:37:03.520 --> 00:37:08.000
I mean, one of the things that really is tricky


00:37:08.000 --> 00:37:13.680
with the tracebacks is a lot of times,


00:37:13.680 --> 00:37:17.560
you've got to go to one end of them to see the error.


00:37:17.560 --> 00:37:19.320
And then there's no color.


00:37:19.320 --> 00:37:23.800
There's just a lot of stuff dropping in there.


00:37:23.800 --> 00:37:25.940
Maybe sometimes it'll show the variable values,


00:37:25.940 --> 00:37:29.140
but not really, you gotta kind of pull them out, right?


00:37:29.140 --> 00:37:29.980
Things like that.


00:37:29.980 --> 00:37:32.920
And what you get here is ridiculous.


00:37:32.920 --> 00:37:34.600
First of all, what do I have to do


00:37:34.600 --> 00:37:37.100
to make this happen with the beautiful tracebacks?


00:37:37.100 --> 00:37:42.960
- You can do from rich import traceback, traceback.install.


00:37:42.960 --> 00:37:44.840
And then- - And that's all good?


00:37:44.840 --> 00:37:47.520
- Yeah, from then on, if you don't handle exception,


00:37:47.520 --> 00:37:50.580
it'll be printed with rich.


00:37:50.580 --> 00:37:52.160
Or you can- - This is the second thing


00:37:52.160 --> 00:37:54.380
I gotta just put on all my apps.


00:37:54.380 --> 00:37:56.700
- Yeah, it's a piece of cake to add.


00:37:56.700 --> 00:37:59.440
So yeah, it's easy to do.


00:37:59.440 --> 00:38:01.940
- Yeah, so tell me what people who are not seeing this


00:38:01.940 --> 00:38:02.820
necessarily on the screen,


00:38:02.820 --> 00:38:05.500
like what is this alternative traceback style


00:38:05.500 --> 00:38:06.920
look like here?


00:38:06.920 --> 00:38:10.220
- Okay, so it's actually falls much the same format


00:38:10.220 --> 00:38:12.020
as a regular Python traceback.


00:38:12.020 --> 00:38:14.700
It's just underneath the file,


00:38:14.700 --> 00:38:18.300
you'll see some syntax highlighted code


00:38:18.300 --> 00:38:21.100
showing you that the line where the exception happened


00:38:21.100 --> 00:38:25.780
for each frame and underneath each block of code,


00:38:25.780 --> 00:38:29.100
it'll show you the locals at that point in the frame.


00:38:29.100 --> 00:38:31.380
So you can see the local variables.


00:38:31.380 --> 00:38:33.780
- Right, these are called out in a nice table


00:38:33.780 --> 00:38:35.940
with a nice formatting that we've already talked about.


00:38:35.940 --> 00:38:38.100
So kind of as if you had done print,


00:38:38.100 --> 00:38:41.020
from rich import print and then printed out the locals


00:38:41.020 --> 00:38:42.300
into a table.


00:38:42.300 --> 00:38:44.140
- Yeah, and it's all pretty printed.


00:38:44.140 --> 00:38:46.040
So it's quite easy to read.


00:38:46.040 --> 00:38:49.500
I find with regular Python tracebacks


00:38:49.500 --> 00:38:53.180
is it takes quite a bit of skill to read them.


00:38:53.180 --> 00:38:54.020
- Yeah.


00:38:54.020 --> 00:38:56.660
- Particularly for beginners and even for intermediates,


00:38:56.660 --> 00:39:01.020
you've got to sit down and analyze the trace packs,


00:39:01.020 --> 00:39:02.080
but I'm hoping with this,


00:39:02.080 --> 00:39:04.760
this just kind of presents the information


00:39:04.760 --> 00:39:05.980
in a more readable way,


00:39:05.980 --> 00:39:08.680
and you can like get more of the context of the error.


00:39:08.680 --> 00:39:11.660
- Yeah, I think this is fantastic.


00:39:11.660 --> 00:39:14.460
This definitely is super interesting.


00:39:14.460 --> 00:39:18.960
I guess one more thing here to really dive into,


00:39:18.960 --> 00:39:22.420
Maybe two, I think the log handler is really nice.


00:39:22.420 --> 00:39:24.420
People should check that out, but maybe tables.


00:39:24.420 --> 00:39:29.300
I know it doesn't sound as appealing and amazing


00:39:29.300 --> 00:39:31.580
as necessarily as what we've been talking about,


00:39:31.580 --> 00:39:36.580
but if I wanna have a nice formatted table in a text output,


00:39:36.580 --> 00:39:39.540
I basically just don't do that.


00:39:39.540 --> 00:39:41.300
I'm like, yeah, that's just,


00:39:41.300 --> 00:39:45.420
that is way too much work to worry about this, right?


00:39:45.420 --> 00:39:48.460
but with using Rich here,


00:39:48.460 --> 00:39:53.460
you can have almost HTML level formatting styles,


00:39:53.460 --> 00:39:56.660
borders on, border off, just header, content divider,


00:39:56.660 --> 00:39:59.020
like alternating rows, like I said,


00:39:59.020 --> 00:39:59.980
right align, left align.


00:39:59.980 --> 00:40:02.820
There's all sorts of amazing stuff here.


00:40:02.820 --> 00:40:04.060
Tell us about the tables.


00:40:04.060 --> 00:40:08.340
- Yeah, so I didn't realize how hard tables would be


00:40:08.340 --> 00:40:10.940
to implement when I started it, or I might not have.


00:40:10.940 --> 00:40:11.780
(laughing)


00:40:11.780 --> 00:40:13.220
- Might not have done it at all.


00:40:13.220 --> 00:40:18.220
Tables are quite complicated because you've got to calculate


00:40:18.220 --> 00:40:21.260
optimal column widths, and that gets really complicated


00:40:21.260 --> 00:40:23.820
when you've got text which can wrap


00:40:23.820 --> 00:40:28.340
and other renderables that can go in those cells.


00:40:28.340 --> 00:40:31.700
But it does work quite nicely now,


00:40:31.700 --> 00:40:34.380
and it can handle just about anything you can throw at it,


00:40:34.380 --> 00:40:38.700
and it will scale the table nicely and elegantly


00:40:38.700 --> 00:40:43.660
if it doesn't fit into the width of the terminal.


00:40:43.660 --> 00:40:46.340
And it's also quite a good layout tool.


00:40:46.340 --> 00:40:49.500
You can switch the borders off entirely


00:40:49.500 --> 00:40:51.860
and then use it to lay out other things.


00:40:51.860 --> 00:40:53.820
Much of the way we do it--


00:40:53.820 --> 00:40:54.900
- One thing that comes to mind right away


00:40:54.900 --> 00:40:59.100
is I think of some of the nice progress bar type things


00:40:59.100 --> 00:41:01.940
for the terminal, like TQDM and stuff.


00:41:01.940 --> 00:41:03.340
And they're great, but I'm always,


00:41:03.340 --> 00:41:04.460
like the stuff on the right,


00:41:04.460 --> 00:41:06.140
it'll have like what it's doing


00:41:06.140 --> 00:41:07.480
and then it'll have a progress bar


00:41:07.480 --> 00:41:10.380
and then it'll have maybe how fast is it operating


00:41:10.380 --> 00:41:12.380
or how much time has it got to go or something.


00:41:12.380 --> 00:41:14.380
And those are always doing a little pulsing


00:41:14.380 --> 00:41:16.580
because the thing on the right is always changing


00:41:16.580 --> 00:41:18.580
and they never quite line up.


00:41:18.580 --> 00:41:20.580
You could do that here but have a table


00:41:20.580 --> 00:41:23.780
and put the progress bar in one of the center fill bits.


00:41:23.780 --> 00:41:26.460
Yeah, so you can do lots of things


00:41:26.460 --> 00:41:30.460
regarding alignment to fit everything together.


00:41:30.460 --> 00:41:32.460
And like you said, stop that effect


00:41:32.460 --> 00:41:34.460
where bits of content will flicker


00:41:34.460 --> 00:41:37.740
Flickr because they're using less characters


00:41:37.740 --> 00:41:39.700
'cause it goes from 100 and then to 99.


00:41:39.700 --> 00:41:40.540
- Yeah, exactly.


00:41:40.540 --> 00:41:42.020
Yeah. - Yeah.


00:41:42.020 --> 00:41:44.780
So yeah, it's a very good layout tool


00:41:44.780 --> 00:41:48.060
and also just a good way of presenting tabular information,


00:41:48.060 --> 00:41:49.940
which is kind of what it was designed for.


00:41:49.940 --> 00:41:51.760
- Yeah, it is a table, right?


00:41:51.760 --> 00:41:57.860
All right, so last one, I've got some content


00:41:57.860 --> 00:42:01.020
and probably a most common way that it's in


00:42:03.100 --> 00:42:06.460
a lightweight format, but you want to turn it into something


00:42:06.460 --> 00:42:10.680
full featured in terms of text is Markdown, right? So for


00:42:10.680 --> 00:42:13.520
example, the Python bias website is almost like it's hard, like


00:42:13.520 --> 00:42:16.300
the vast majority of the content there is Markdown, talk about


00:42:16.300 --> 00:42:19.160
on training, like all the stuff we've got the CMS we built in


00:42:19.160 --> 00:42:22.280
the back end, it's all Markdown. Rich has Markdown support too,


00:42:22.280 --> 00:42:22.540
right?


00:42:22.540 --> 00:42:26.500
And that's right. Yeah, there's a Markdown class. And basically,


00:42:26.500 --> 00:42:31.480
I took common mark library, which parses the Markdown. Okay,


00:42:31.480 --> 00:42:35.840
and I substituted the bits which were generating HTML


00:42:35.840 --> 00:42:38.820
with something which generates rich output.


00:42:38.820 --> 00:42:41.940
And it turns out there's a reasonable job


00:42:41.940 --> 00:42:46.220
of things like headers and does the style just fine.


00:42:46.220 --> 00:42:47.980
And there's also syntax highlighting.


00:42:47.980 --> 00:42:51.600
It'll actually call out to the syntax highlighting code.


00:42:51.600 --> 00:42:53.740
So if you've got a Python code block,


00:42:53.740 --> 00:42:56.780
it'll actually highlight that Python code block.


00:42:56.780 --> 00:42:58.580
- Yeah, you have support for inline code


00:42:58.580 --> 00:43:00.420
with the backtick thing, backtick,


00:43:00.420 --> 00:43:03.260
and then the blocks of code,


00:43:03.260 --> 00:43:04.700
which are the triple back slash,


00:43:04.700 --> 00:43:08.460
or triple back ticks, or the four spaces or whatever.


00:43:08.460 --> 00:43:12.460
- Yeah, so it supports much of the basic common mark syntax


00:43:12.460 --> 00:43:15.660
and does a reasonable job of rendering.


00:43:15.660 --> 00:43:18.380
It won't look quite as good as a web browser,


00:43:18.380 --> 00:43:20.780
but I find it quite readable.


00:43:20.780 --> 00:43:22.260
- But it's in the terminal,


00:43:22.260 --> 00:43:24.300
and I didn't have to do anything to get it there, right?


00:43:24.300 --> 00:43:26.980
So that's pretty fantastic.


00:43:26.980 --> 00:43:28.780
Yeah, really, really nice.


00:43:29.900 --> 00:43:32.800
All right, so I think this is probably


00:43:32.800 --> 00:43:37.780
as much of the details of which we want to dive into


00:43:37.780 --> 00:43:39.420
in terms of like the feature set and stuff,


00:43:39.420 --> 00:43:41.560
but there's still more to go.


00:43:41.560 --> 00:43:44.800
There's a lot to love out of this library, which is great.


00:43:44.800 --> 00:43:47.320
Maybe just give us a sense of the internals.


00:43:47.320 --> 00:43:49.320
Like how did you make this happen?


00:43:49.320 --> 00:43:50.160
How do you make it work?


00:43:50.160 --> 00:43:54.080
Is this curses to the nth degree or what's happening?


00:43:54.080 --> 00:43:57.440
- No, so there's no curses.


00:43:58.940 --> 00:44:02.860
There's a layer, which what makes most of it work,


00:44:02.860 --> 00:44:05.380
where I render everything into,


00:44:05.380 --> 00:44:08.060
and that's a list of what I call segments.


00:44:08.060 --> 00:44:12.460
The segment consists of a bit of text plus a style.


00:44:12.460 --> 00:44:14.260
And the thing about having that intermediate layer


00:44:14.260 --> 00:44:16.100
before you actually render to the terminal


00:44:16.100 --> 00:44:20.420
is you can manipulate it afterwards.


00:44:20.420 --> 00:44:25.180
So I can apply color and style and then do word wrapping,


00:44:25.180 --> 00:44:28.540
and then I can render it onto the terminal.


00:44:28.540 --> 00:44:33.460
So everything is built on that and a protocol.


00:44:33.460 --> 00:44:35.300
So objects can add a couple of methods.


00:44:35.300 --> 00:44:40.300
They can add a Dunder rich or a Dunder rich console method.


00:44:40.300 --> 00:44:43.620
And that then they can themselves be renderable.


00:44:43.620 --> 00:44:45.660
So you can print your own custom objects


00:44:45.660 --> 00:44:48.220
and that will use that intermediate layer segments


00:44:48.220 --> 00:44:51.640
to render everything onto the terminal.


00:44:51.640 --> 00:44:54.440
- Nice, okay.


00:44:54.440 --> 00:44:57.100
Yeah, it sounds like a really good separation


00:44:57.100 --> 00:44:59.640
you could probably also, if you need to do something specific


00:44:59.640 --> 00:45:02.640
for one platform versus another, that layer,


00:45:02.640 --> 00:45:05.840
you could make a decision on how to do that without...


00:45:05.840 --> 00:45:09.180
- That's exactly it, yeah. - ...having to put it all over the place, right?


00:45:09.180 --> 00:45:13.320
Yeah, so I render onto the segments, and that's platform-independent.


00:45:13.320 --> 00:45:16.820
But there's another bit of code which will convert those segments


00:45:16.820 --> 00:45:19.920
onto the appropriate format of the platform.


00:45:19.920 --> 00:45:22.660
And the platform might be the number of colors


00:45:22.660 --> 00:45:25.260
that's supported by terminals, because some will support


00:45:25.260 --> 00:45:27.460
some will support 16.7 million colors,


00:45:27.460 --> 00:45:31.080
some will support 256, and then some will support 16.


00:45:31.080 --> 00:45:34.820
But because of that intermediate layer,


00:45:34.820 --> 00:45:37.420
I can make sure that no matter what you write,


00:45:37.420 --> 00:45:40.920
we'll work on the terminal on the given platform.


00:45:40.920 --> 00:45:43.280
- Yeah, fantastic.


00:45:43.280 --> 00:45:44.820
Okay, let's see.


00:45:44.820 --> 00:45:48.180
So one of the things I do wanna circle back to


00:45:48.180 --> 00:45:51.420
is this idea of you're taking a year off


00:45:51.420 --> 00:45:53.140
to continue to work on this project,


00:45:53.140 --> 00:45:56.200
to grow it even further than it already has


00:45:56.200 --> 00:45:59.660
and also do other things in this general realm.


00:45:59.660 --> 00:46:01.380
And so there's a couple of ways


00:46:01.380 --> 00:46:03.520
in which people can support you, right?


00:46:03.520 --> 00:46:08.520
If you're a large bank that depends on this kind of stuff,


00:46:08.520 --> 00:46:10.500
one of the good options is Tidelift, right?


00:46:10.500 --> 00:46:14.140
People can get a Tidelift subscription for rich


00:46:14.140 --> 00:46:16.300
and that gives, what do they get with that?


00:46:16.300 --> 00:46:21.260
- So I don't think you get a subscription for rich per se,


00:46:21.260 --> 00:46:23.540
but you can get a Tidelift subscription.


00:46:23.540 --> 00:46:24.380
- I see, okay.


00:46:24.380 --> 00:46:29.220
- And that means that that money is divided


00:46:29.220 --> 00:46:31.500
amongst all the open source projects that you use


00:46:31.500 --> 00:46:34.260
that are signed up to Tidelift.


00:46:34.260 --> 00:46:38.780
And in return, you get more responsive developers


00:46:38.780 --> 00:46:44.340
and developers which will handle like security issues,


00:46:44.340 --> 00:46:45.180
et cetera.


00:46:45.180 --> 00:46:49.260
It just takes the risk of open source code


00:46:49.260 --> 00:46:52.340
for big organizations because there is a little bit of risk


00:46:52.340 --> 00:46:55.260
in the, if you're relying on someone's hobby project,


00:46:55.260 --> 00:46:58.260
are they going to be around in six months to a year time?


00:46:58.260 --> 00:46:59.100
- Yeah, absolutely.


00:46:59.100 --> 00:47:03.660
- So Tidelift ensures that developers will be around


00:47:03.660 --> 00:47:07.220
in the future to support your code going forward.


00:47:07.220 --> 00:47:08.340
- Absolutely.


00:47:08.340 --> 00:47:10.200
The other one is right up the top here.


00:47:10.200 --> 00:47:14.660
I could click sponsor and then I can come over here.


00:47:14.660 --> 00:47:16.780
Also that pulls up a link to the external funding


00:47:16.780 --> 00:47:19.700
for Tidelift, but I could hit sponsor.


00:47:19.700 --> 00:47:22.580
Do you have plans or anything like that?


00:47:22.580 --> 00:47:27.580
I know some projects have, there's a gold sponsor,


00:47:27.580 --> 00:47:31.060
and here's just a keep it going sponsor.


00:47:31.060 --> 00:47:32.220
Do you have anything like that,


00:47:32.220 --> 00:47:33.780
or is it just what people want?


00:47:33.780 --> 00:47:35.700
- There is, yeah.


00:47:35.700 --> 00:47:39.420
So GitHub Sponsors supports tiers,


00:47:39.420 --> 00:47:42.220
so depending on how much you want to sponsor,


00:47:42.220 --> 00:47:45.560
I will help you with your projects.


00:47:45.560 --> 00:47:49.060
I'm always happy to help people actually open source projects.


00:47:49.060 --> 00:47:50.520
I'm always happy to do that.


00:47:50.520 --> 00:47:56.680
But for the larger tiers, I will do code reviews


00:47:56.680 --> 00:48:00.680
or I will help you with your project on a more formal basis.


00:48:00.680 --> 00:48:03.720
I might even write code for you.


00:48:03.720 --> 00:48:06.840
So it's up to you what you want to sponsor.


00:48:06.840 --> 00:48:09.520
If you just want to say thanks, that's very much appreciated.


00:48:09.520 --> 00:48:13.480
If I fixed a bug for you and you just want to say thanks,


00:48:13.480 --> 00:48:14.320
that's fantastic.


00:48:14.320 --> 00:48:17.440
But if you're a company which is benefiting


00:48:17.440 --> 00:48:18.280
from the work that I do


00:48:18.280 --> 00:48:21.720
or the work that other open source developers do,


00:48:21.720 --> 00:48:23.360
you can sponsor a bit more to ensure


00:48:23.360 --> 00:48:26.000
that it keeps the work going.


00:48:26.000 --> 00:48:27.880
- Right on, yeah.


00:48:27.880 --> 00:48:28.880
And I encourage people,


00:48:28.880 --> 00:48:30.880
if they're depending heavily upon this,


00:48:30.880 --> 00:48:32.840
help you keep going strong,


00:48:32.840 --> 00:48:36.180
especially as you're transitioning to just working on this.


00:48:36.180 --> 00:48:40.160
Yeah, also, someone's forked it


00:48:40.160 --> 00:48:42.120
since we even pulled it up here, how cool.


00:48:42.120 --> 00:48:47.120
So the other, the next step that maybe you would take this,


00:48:47.120 --> 00:48:49.480
you talked about not wanting to add


00:48:49.480 --> 00:48:51.320
too many insane features to rich,


00:48:51.320 --> 00:48:53.480
growing that, right?


00:48:53.480 --> 00:48:55.360
Keep it focused on target,


00:48:55.360 --> 00:48:58.460
is you also have this project called Textual.


00:48:58.460 --> 00:49:02.080
And Textual is a TUI, we've all heard of a GUI,


00:49:02.080 --> 00:49:04.580
but a TUI is a text user interface


00:49:04.580 --> 00:49:06.840
instead of a graphical user interface, right?


00:49:06.840 --> 00:49:11.040
- Yeah, I think it's a bit of a misnomer.


00:49:11.040 --> 00:49:13.280
I mean, 'cause the interface is constructed with text,


00:49:13.280 --> 00:49:15.720
granted, but it's still a graphical thing you're looking at.


00:49:15.720 --> 00:49:16.880
- Yeah, yeah.


00:49:16.880 --> 00:49:19.320
- Yeah, so I think of it as a GUI,


00:49:19.320 --> 00:49:22.880
but with kind of like a fairly retro aesthetic.


00:49:22.880 --> 00:49:25.880
- Yeah, it does have a bit of a retro aesthetic.


00:49:25.880 --> 00:49:27.240
I would say maybe if you built something


00:49:27.240 --> 00:49:28.560
with like Colorama or something,


00:49:28.560 --> 00:49:31.040
that would be maybe more 2e-esque, right?


00:49:31.040 --> 00:49:32.960
Where there's, where you look at what you build


00:49:32.960 --> 00:49:37.280
with actual, it's got scroll bars, it's got banners,


00:49:37.280 --> 00:49:39.520
it's got icons.


00:49:39.520 --> 00:49:40.360
(laughs)


00:49:40.360 --> 00:49:43.000
>> Yeah, it's closer by far.


00:49:43.000 --> 00:49:46.640
>> Looks a bit more graphical.


00:49:46.640 --> 00:49:51.560
>> Yeah, so tell us about Textual and why not just more features on Rich?


00:49:51.560 --> 00:49:57.560
>> Yeah, so Rich has some kind of dynamic features.


00:49:57.560 --> 00:50:03.480
There are progress bars and they're updating live dashboards.


00:50:03.480 --> 00:50:08.880
And I've been asked quite a lot if I could add keyboard support and


00:50:08.880 --> 00:50:15.540
mouse support. And I've resisted for quite a while because I want to keep the focus of


00:50:15.540 --> 00:50:24.180
Ridge onto just generating mostly static output. Then I saw a project called GH top, which


00:50:24.180 --> 00:50:32.780
is kind of like H top, but it would take information from the GitHub API. And it would show you


00:50:32.780 --> 00:50:36.380
like real time events and they used, oh, there we go.


00:50:36.380 --> 00:50:38.300
And they used Rich for that.


00:50:38.300 --> 00:50:42.380
And when I saw that, I realized, oh, I've got to do this.


00:50:42.380 --> 00:50:44.260
There's a lot of potential there.


00:50:44.260 --> 00:50:46.700
And I put it off a little bit,


00:50:46.700 --> 00:50:50.940
but then I started on it and I kind of realized that, yeah,


00:50:50.940 --> 00:50:53.460
there's quite a lot you can do with a terminal.


00:50:53.460 --> 00:50:55.380
- And this is really,


00:50:55.380 --> 00:50:57.380
this is one of the things that blew my mind.


00:50:57.380 --> 00:50:59.940
So maybe, you know, give us a sense of,


00:50:59.940 --> 00:51:01.580
I'm trying to pull a particular picture.


00:51:01.580 --> 00:51:03.540
Maybe this is just one I could sort of leave on the screen.


00:51:03.540 --> 00:51:08.060
But one of the things I remember from my early days


00:51:08.060 --> 00:51:12.100
of GUI type development is,


00:51:12.100 --> 00:51:14.060
how do you resize stuff on the screen, right?


00:51:14.060 --> 00:51:17.620
So I want to put something where like the main window's here,


00:51:17.620 --> 00:51:19.340
but then I want the status bar thing,


00:51:19.340 --> 00:51:21.380
but I want it to stick to the bottom.


00:51:21.380 --> 00:51:22.980
And then I want some other stuff on the left.


00:51:22.980 --> 00:51:25.260
And it sounds like that would be pretty tricky


00:51:25.260 --> 00:51:27.380
to just dynamically try to generate with rich,


00:51:27.380 --> 00:51:29.120
but with textual, you can say like,


00:51:29.120 --> 00:51:31.460
this thing docks to the left and this docks to the bottom


00:51:31.460 --> 00:51:33.600
and here this fills the main content.


00:51:33.600 --> 00:51:34.900
And then those bits in the middle,


00:51:34.900 --> 00:51:39.100
are those basically rendered either more of these containers


00:51:39.100 --> 00:51:41.220
and these widgets or is that rich directly


00:51:41.220 --> 00:51:45.060
or give us people a sense of what they build with this?


00:51:45.060 --> 00:51:48.620
- So Rich does the rendering.


00:51:48.620 --> 00:51:51.540
Rich is responsible for getting stuff onto the screen,


00:51:51.540 --> 00:51:55.000
but textual handles the dynamic stuff.


00:51:55.000 --> 00:51:59.380
At the most atomic layer,


00:51:59.380 --> 00:52:01.300
there's something called a widget.


00:52:01.300 --> 00:52:06.300
And a widget is almost like a software component in itself.


00:52:06.300 --> 00:52:10.300
It's built on async I/O.


00:52:10.300 --> 00:52:13.300
So each widget has its own async I/O task


00:52:13.300 --> 00:52:16.260
and it's constantly processing events.


00:52:16.260 --> 00:52:20.940
And Textual can, will change the size of that


00:52:20.940 --> 00:52:25.460
and change the layout in response to resizing the terminal.


00:52:25.460 --> 00:52:29.820
And you can tell it how the widgets fit together


00:52:29.820 --> 00:52:33.460
within the given dimensions of the time.


00:52:33.460 --> 00:52:35.340
- You've got like the layout elements


00:52:35.340 --> 00:52:38.020
that handle docking and whatnot.


00:52:38.020 --> 00:52:38.860
- Yeah.


00:52:38.860 --> 00:52:42.060
- Very cool.


00:52:42.060 --> 00:52:45.620
So one of the examples you have on the textual readme


00:52:45.620 --> 00:52:48.700
is building one of these widgets.


00:52:48.700 --> 00:52:51.300
So you just create a class, it drives from widget.


00:52:51.300 --> 00:52:53.700
Here you have a hover example


00:52:53.700 --> 00:52:56.020
and it has a way to render itself.


00:52:56.020 --> 00:52:59.460
And then it very much like traditional,


00:52:59.460 --> 00:53:03.960
I'm thinking of building like VB6 apps or Windows Forms apps,


00:53:03.960 --> 00:53:06.760
like these traditional ones where you have drag and drop widgets.


00:53:06.760 --> 00:53:08.760
They have these events, right?


00:53:08.760 --> 00:53:10.760
And one of the events here,


00:53:10.760 --> 00:53:12.960
you wouldn't think of this as a terminal thing.


00:53:12.960 --> 00:53:15.960
We've got like, you know, on mouse,


00:53:15.960 --> 00:53:18.360
you know, on enter, on leave,


00:53:18.360 --> 00:53:21.660
and, you know, mouse over and things like that, right?


00:53:21.660 --> 00:53:27.160
Like those are regular UI types of interactions


00:53:27.160 --> 00:53:31.840
that you would not expect to see in a text-based app, right?


00:53:31.840 --> 00:53:33.240
- Yeah. - That's fantastic.


00:53:33.240 --> 00:53:38.680
So it's very much, it's based partially on my knowledge


00:53:38.680 --> 00:53:42.880
of writing desktop applications, which is quite old now.


00:53:42.880 --> 00:53:44.400
- Where did you write them in?


00:53:44.400 --> 00:53:47.080
- WX Widgets mostly.


00:53:47.080 --> 00:53:47.920
- Yeah.


00:53:47.920 --> 00:53:52.320
- So it's a C++ framework, I think it's got a Python layer.


00:53:52.320 --> 00:53:54.080
- Yeah, there's WX Python.


00:53:54.080 --> 00:53:58.320
I think that might be the next, the Python wrapper.


00:53:58.320 --> 00:53:59.160
- That's right, yeah.


00:53:59.160 --> 00:54:00.800
And then, but in the last 10 years,


00:54:00.800 --> 00:54:02.800
I haven't done any desktop applications.


00:54:02.800 --> 00:54:04.840
I've been working mostly in the web.


00:54:04.840 --> 00:54:08.200
So it's mostly influenced by web development


00:54:08.200 --> 00:54:10.680
with modern frameworks, particularly Vue,


00:54:10.680 --> 00:54:12.160
which I've used a few times.


00:54:12.160 --> 00:54:13.960
- Vue's nice, yeah, Vue's very nice.


00:54:13.960 --> 00:54:18.920
- So I'm trying to replicate some of the best features,


00:54:18.920 --> 00:54:21.120
I think, of Vue into the terminal.


00:54:21.120 --> 00:54:23.920
And I'm surprised how well some of these features


00:54:23.920 --> 00:54:25.680
Translate. Yeah.


00:54:25.680 --> 00:54:30.480
Yeah, this is incredible.


00:54:30.480 --> 00:54:33.840
It it really does build these interactive things.


00:54:33.840 --> 00:54:37.320
Now another thing to talk about is.


00:54:37.320 --> 00:54:40.160
How do you control the look and feel right?


00:54:40.160 --> 00:54:42.640
Like the way I the way you might do it in


00:54:42.640 --> 00:54:45.080
rich is you might have one of these console markups


00:54:45.080 --> 00:54:49.000
or markdown or you could use a console and set a style.


00:54:49.000 --> 00:54:53.280
But if you're inspired by the web, you know.


00:54:53.280 --> 00:54:58.280
like dot main container hash thing I want to style, right?


00:54:58.280 --> 00:55:01.140
Like it's some sort of CSS selector, right?


00:55:01.140 --> 00:55:03.800
- Yeah, so you've read my mind.


00:55:03.800 --> 00:55:08.800
I've been last few days working on CSS.


00:55:08.800 --> 00:55:11.800
It's going to work very much.


00:55:11.800 --> 00:55:14.840
- Is it actual CSS or CSS like stuff?


00:55:14.840 --> 00:55:16.880
Like what do you have in mind here?


00:55:16.880 --> 00:55:21.240
- So it's probably not actual CSS


00:55:21.240 --> 00:55:23.640
because a lot of the stuff just wouldn't apply.


00:55:23.640 --> 00:55:25.640
- Yeah, it doesn't make sense, sure.


00:55:25.640 --> 00:55:27.200
- But essentially it's the selectors.


00:55:27.200 --> 00:55:31.960
So I will have selectors where you can select an ID


00:55:31.960 --> 00:55:35.600
and then a child with a class name, et cetera.


00:55:35.600 --> 00:55:36.880
- I mean, that's basically what I was thinking


00:55:36.880 --> 00:55:38.200
when I was saying real CSS, right?


00:55:38.200 --> 00:55:39.520
Like, is it, what I say,


00:55:39.520 --> 00:55:43.960
well, I say like hash container dot children type


00:55:43.960 --> 00:55:47.360
and I would write that or is it like not exactly that?


00:55:47.360 --> 00:55:48.680
- It's exactly like that.


00:55:48.680 --> 00:55:52.100
Yeah, the only thing that differs is the,


00:55:52.100 --> 00:55:54.280
I don't know what you call them,


00:55:54.280 --> 00:55:55.800
the bit that goes inside the curly brackets,


00:55:55.800 --> 00:55:58.200
the actual rules, they will be different.


00:55:58.200 --> 00:55:59.600
- Sure, yeah, yeah.


00:55:59.600 --> 00:56:01.960
- Yeah, they render different things,


00:56:01.960 --> 00:56:03.720
but very much like CSS.


00:56:03.720 --> 00:56:05.840
If you come from the web, you see this,


00:56:05.840 --> 00:56:07.320
you'd be very much at home.


00:56:07.320 --> 00:56:09.360
- Nice, I could probably even use less


00:56:09.360 --> 00:56:13.200
and transpile that down to CSS and then put the odds,


00:56:13.200 --> 00:56:14.840
yeah, maybe, who knows?


00:56:14.840 --> 00:56:18.040
- Maybe, I was thinking, should I just do CSS,


00:56:18.040 --> 00:56:24.320
which is hard enough in itself, or should I try to implement less or SASS or one of


00:56:24.320 --> 00:56:25.320
these things?


00:56:25.320 --> 00:56:28.360
Well, I'm going to try CSS, first of all.


00:56:28.360 --> 00:56:33.600
If you get it working with CSS, then you probably can get the LESS compiler to generate the


00:56:33.600 --> 00:56:35.680
right CSS out of it somehow.


00:56:35.680 --> 00:56:36.680
Yeah, maybe.


00:56:36.680 --> 00:56:41.680
But actually, one of the worst things, I think, of JavaScript and web app development is all


00:56:41.680 --> 00:56:42.680
those pre-processors.


00:56:42.680 --> 00:56:43.680
I know.


00:56:43.680 --> 00:56:46.880
I'm 100% with you.


00:56:46.880 --> 00:56:48.840
and you've got to run all these tasks


00:56:48.840 --> 00:56:51.580
and all these CLI things just to get it


00:56:51.580 --> 00:56:53.320
so you can start using your app.


00:56:53.320 --> 00:56:55.600
It's like, there's something kind of broken about this.


00:56:55.600 --> 00:56:56.800
Can I just--


00:56:56.800 --> 00:56:57.640
- Yeah.


00:56:57.640 --> 00:56:58.640
- Do the file here and go?


00:56:58.640 --> 00:57:01.040
Like it's gotten so complicated


00:57:01.040 --> 00:57:03.120
that JavaScript is one of the more complicated ways


00:57:03.120 --> 00:57:05.000
to write code rather than one of the simplest,


00:57:05.000 --> 00:57:05.840
I think these days.


00:57:05.840 --> 00:57:06.920
- Exactly, yeah.


00:57:06.920 --> 00:57:11.440
There was a time where front end development


00:57:11.440 --> 00:57:15.840
was seen as kind of like the baby brother


00:57:15.840 --> 00:57:17.440
of like real development.


00:57:17.440 --> 00:57:19.640
- I have you in your QJ query, come on.


00:57:19.640 --> 00:57:22.560
- That's not true anymore.


00:57:22.560 --> 00:57:23.900
I don't think it's been true for a while.


00:57:23.900 --> 00:57:27.760
I think front-end development requires


00:57:27.760 --> 00:57:31.340
just the same type of thinking as back-ends.


00:57:31.340 --> 00:57:34.440
You've got to organize all these different processes


00:57:34.440 --> 00:57:36.640
together and mental models.


00:57:36.640 --> 00:57:38.320
And it's actually more complicated


00:57:38.320 --> 00:57:40.480
because there's so much going on.


00:57:40.480 --> 00:57:43.200
There's so many little things you've got to remember.


00:57:43.200 --> 00:57:44.360
- Yeah.


00:57:44.360 --> 00:57:47.360
- Yeah, you're taking so much of like


00:57:47.360 --> 00:57:49.760
modern software development and squishing it down


00:57:49.760 --> 00:57:51.600
to this narrow little bit that is like


00:57:51.600 --> 00:57:54.360
run it in JavaScript on the browser, right?


00:57:54.360 --> 00:57:56.280
Like it's kind of got to fit into this historically


00:57:56.280 --> 00:58:00.000
what used to be like a narrow focused environment


00:58:00.000 --> 00:58:01.700
and now it's definitely not.


00:58:01.700 --> 00:58:05.560
- Yeah, so I'm trying to take what I think


00:58:05.560 --> 00:58:09.200
are the good things about front end development


00:58:09.200 --> 00:58:11.920
and apply them to terminal


00:58:11.920 --> 00:58:13.600
and hopefully leave out the things


00:58:13.600 --> 00:58:15.680
which I don't like so much.


00:58:15.680 --> 00:58:18.560
- Yeah, that sounds great.


00:58:18.560 --> 00:58:22.260
So maybe for this one,


00:58:22.260 --> 00:58:23.720
I think what people should probably do


00:58:23.720 --> 00:58:26.960
is they should check out the examples, right?


00:58:26.960 --> 00:58:28.540
The examples from Textual,


00:58:28.540 --> 00:58:33.120
they can clone the repo and just run these and it's super easy.


00:58:33.120 --> 00:58:34.360
There's also a way to see them, I guess,


00:58:34.360 --> 00:58:37.480
on the developer video log here.


00:58:37.480 --> 00:58:41.640
Are these you doing these videos here?


00:58:41.640 --> 00:58:45.840
- Yeah, just a short demo of each.


00:58:45.840 --> 00:58:46.960
- Nice.


00:58:46.960 --> 00:58:48.960
This is my ad apparently I'm getting now.


00:58:48.960 --> 00:58:51.320
We'll not play that.


00:58:51.320 --> 00:58:54.440
I can go YouTube.


00:58:54.440 --> 00:58:57.920
All right, so yeah, but people can go and check these out


00:58:57.920 --> 00:59:00.400
because I think seeing it in action


00:59:00.400 --> 00:59:02.720
is really what you need to appreciate Textual.


00:59:02.720 --> 00:59:07.080
- And it can demonstrate the features


00:59:07.080 --> 00:59:09.960
which Textual can do,


00:59:09.960 --> 00:59:14.740
which I don't see in other TUI frameworks.


00:59:14.740 --> 00:59:18.640
I'm thinking particularly of animation.


00:59:18.640 --> 00:59:21.200
- Yeah, I was just thinking like CSS easing functions


00:59:21.200 --> 00:59:23.600
and those types of animations, yeah.


00:59:23.600 --> 00:59:27.440
- Yeah, I was surprised that how well that worked.


00:59:27.440 --> 00:59:29.840
I was animating things at 60 frames a second


00:59:29.840 --> 00:59:33.400
and it can go up to 120 frames per second.


00:59:33.400 --> 00:59:36.920
Yeah, the terminals these days,


00:59:36.920 --> 00:59:39.880
that they're built on the same technology as video games.


00:59:39.880 --> 00:59:42.560
They use hardware accelerated graphics under the hood.


00:59:42.560 --> 00:59:46.360
So they can actually render terminal updates


00:59:46.360 --> 00:59:47.880
very, very quickly.


00:59:47.880 --> 00:59:51.000
And I don't think people have taken advantage of that.


00:59:51.000 --> 00:59:54.400
- How long until someone re-implements Doom on Rich?


00:59:54.400 --> 00:59:56.440
Or on Texture?


00:59:56.440 --> 00:59:57.760
- I'm sure it's possible.


00:59:57.760 --> 00:59:59.480
Yeah, you could render it and then,


00:59:59.480 --> 01:00:02.960
I don't know, render onto text.


01:00:02.960 --> 01:00:03.840
I don't know how you do it,


01:00:03.840 --> 01:00:06.080
but various ways of rendering images.


01:00:06.080 --> 01:00:09.400
So in theory, you could put Doom in the middle of it.


01:00:09.400 --> 01:00:11.900
I would say start with really, really small fonts


01:00:11.900 --> 01:00:14.580
and a big terminal window so you get higher resolution.


01:00:14.580 --> 01:00:16.140
>> Yeah, yeah.


01:00:16.140 --> 01:00:18.580
>> But yeah, you've got the color, you've got the emojis.


01:00:18.580 --> 01:00:22.020
I bet you could make it happen.


01:00:22.020 --> 01:00:22.540
Awesome.


01:00:22.540 --> 01:00:25.660
All right, well, we're getting pretty short on time here, Will.


01:00:25.660 --> 01:00:31.340
Anything else you want to sort of throw in about textual or even


01:00:31.340 --> 01:00:33.300
rich before we wrap it up?


01:00:35.820 --> 01:00:38.500
- Nothing comes to mind, but just to say


01:00:38.500 --> 01:00:42.140
that I like getting feedback, input.


01:00:42.140 --> 01:00:44.500
So if you have any suggestions,


01:00:44.500 --> 01:00:47.060
jump onto textual discussion board,


01:00:47.060 --> 01:00:49.720
or if you find any bugs, let me know,


01:00:49.720 --> 01:00:51.740
or connect with me on Twitter,


01:00:51.740 --> 01:00:53.940
and I'm happy to talk about these things.


01:00:53.940 --> 01:00:54.940
- Yeah, fantastic.


01:00:54.940 --> 01:00:57.700
Also, wanna give a shout out


01:00:57.700 --> 01:01:00.780
to one of your other projects real quick?


01:01:00.780 --> 01:01:02.700
- Okay, great, yeah.


01:01:02.700 --> 01:01:04.340
So this is a Pathify system.


01:01:04.340 --> 01:01:07.260
I've been working on that for well over 10 years now.


01:01:07.260 --> 01:01:11.060
I've handed it over to some very talented developers.


01:01:11.060 --> 01:01:13.460
But essentially the idea is that there's


01:01:13.460 --> 01:01:17.100
abstraction there for file systems.


01:01:17.100 --> 01:01:22.100
So the same code can write to your disk drive


01:01:22.100 --> 01:01:25.680
or an FTP server or a zip file


01:01:25.680 --> 01:01:27.880
and just all works exactly the same way.


01:01:27.880 --> 01:01:31.020
- Nice, do you have like cloud format support


01:01:31.020 --> 01:01:32.940
like S3 and things like that?


01:01:32.940 --> 01:01:33.780
- Yeah, exactly, yeah.


01:01:33.780 --> 01:01:37.840
So there's an S3 version and there's a Google Cloud version


01:01:37.840 --> 01:01:41.440
and there's dozens of other implementations.


01:01:41.440 --> 01:01:43.200
- Any database stuff?


01:01:43.200 --> 01:01:46.440
Can I like treat a table as a directory


01:01:46.440 --> 01:01:47.600
or something like that?


01:01:47.600 --> 01:01:50.160
- I wouldn't be surprised if there is.


01:01:50.160 --> 01:01:52.440
I don't know of any off the top of my head,


01:01:52.440 --> 01:01:54.840
but some people have done some quite creative things


01:01:54.840 --> 01:01:57.840
where they've made something which is not a file system


01:01:57.840 --> 01:01:59.040
look like a file system.


01:01:59.040 --> 01:02:01.840
- Oh, look at this, Dropbox FS.


01:02:01.840 --> 01:02:04.120
Dropbox has a file system.


01:02:04.120 --> 01:02:06.260
Okay, that's pretty amazing.


01:02:06.260 --> 01:02:09.440
Okay, here's the index of file systems.


01:02:09.440 --> 01:02:13.160
Let's see, we've got application data FTP in memory.


01:02:13.160 --> 01:02:14.160
Oh, that's pretty slick.


01:02:14.160 --> 01:02:15.500
So you can read and write files,


01:02:15.500 --> 01:02:17.100
like say for tests and not care.


01:02:17.100 --> 01:02:19.520
- Yeah, exactly. - 10 files maybe.


01:02:19.520 --> 01:02:21.400
10 files would be fantastic, right?


01:02:21.400 --> 01:02:23.040
- Yeah, so you can use 10 files,


01:02:23.040 --> 01:02:24.880
and like you said, for testing.


01:02:24.880 --> 01:02:26.160
So you can write it into memory


01:02:26.160 --> 01:02:29.320
without bothering to write it onto your hard drive.


01:02:29.320 --> 01:02:31.160
- Okay, the multi-file system.


01:02:31.160 --> 01:02:34.000
so you could multiplex reads and writes,


01:02:34.000 --> 01:02:35.320
that's pretty killer.


01:02:35.320 --> 01:02:40.120
- Yeah, that's more, I remember correctly,


01:02:40.120 --> 01:02:43.120
you can layer several file systems.


01:02:43.120 --> 01:02:47.680
So you could have one to write and then several to read,


01:02:47.680 --> 01:02:49.360
and depending on where the file is,


01:02:49.360 --> 01:02:52.680
it'll just make it appear like a single file system.


01:02:52.680 --> 01:02:53.960
- Cool.


01:02:53.960 --> 01:02:55.080
Yeah, a lot of neat stuff here.


01:02:55.080 --> 01:02:57.800
So people, if they got a lot of file reading and writing


01:02:57.800 --> 01:02:59.040
to do, they can check that out.


01:02:59.040 --> 01:03:00.480
Also, I wanna give a quick shout out,


01:03:00.480 --> 01:03:02.400
saw Paul Everett on the live stream out there.


01:03:02.400 --> 01:03:11.100
So Paul and you dove inside in a more visual way into textual.


01:03:11.100 --> 01:03:15.200
So I'll link to a live stream you all did over there together.


01:03:15.200 --> 01:03:15.700
Great.


01:03:15.700 --> 01:03:16.200
Cool.


01:03:16.200 --> 01:03:17.120
Yeah, that was fun.


01:03:17.120 --> 01:03:19.600
Yeah, awesome.


01:03:19.600 --> 01:03:23.320
All right, well, I think that pretty much wraps it up.


01:03:23.320 --> 01:03:27.560
So I'll give you the final two questions before we get out


01:03:27.560 --> 01:03:28.240
of here, though.


01:03:28.240 --> 01:03:31.580
So, Will, if you're gonna write some Python code,


01:03:31.580 --> 01:03:33.280
what editor do you use these days?


01:03:33.280 --> 01:03:37.280
- I use VS Code, I've used that for quite a while.


01:03:37.280 --> 01:03:39.020
I'm quite happy with it,


01:03:39.020 --> 01:03:43.420
but I do try other editors from time to time.


01:03:43.420 --> 01:03:46.580
- Nice, and then in addition to pip install rich


01:03:46.580 --> 01:03:49.780
and pip install textual, any other packages out there


01:03:49.780 --> 01:03:51.460
you wanna give a shout out to that you think


01:03:51.460 --> 01:03:54.960
could use some eyeballs and some attention?


01:03:57.900 --> 01:03:59.800
Anything that's impressed you lately?


01:03:59.800 --> 01:04:03.780
- I'm drawing a blank.


01:04:03.780 --> 01:04:04.900
There's so many.


01:04:04.900 --> 01:04:07.340
- It is hard to choose, isn't it?


01:04:07.340 --> 01:04:10.780
- There's a project I saw.


01:04:10.780 --> 01:04:12.300
Can I mention one that uses Rich?


01:04:12.300 --> 01:04:13.940
It was quite cool. - Of course, absolutely.


01:04:13.940 --> 01:04:16.260
- It's called Object Explorer.


01:04:16.260 --> 01:04:21.040
It's a terminal user interface, but it's not,


01:04:21.040 --> 01:04:24.360
I think it's OBJ Explorer, which is quite nice.


01:04:25.220 --> 01:04:28.380
you could create an up, you explore a Python object


01:04:28.380 --> 01:04:31.140
and you can navigate into it in a visual way


01:04:31.140 --> 01:04:35.340
and it will show you the attributes, et cetera.


01:04:35.340 --> 01:04:37.700
- Oh, fantastic.


01:04:37.700 --> 01:04:38.940
Yeah, that sounds really fun.


01:04:38.940 --> 01:04:40.860
Is this for like in memory Python objects


01:04:40.860 --> 01:04:42.940
or database objects or what is it?


01:04:42.940 --> 01:04:44.580
- Oh, in memory Python objects.


01:04:44.580 --> 01:04:46.780
So I think it's like a debugging tool.


01:04:46.780 --> 01:04:49.580
It's kind of like, it's a bit like rich.inspect


01:04:49.580 --> 01:04:51.460
but it's more visual.


01:04:51.460 --> 01:04:52.620
- Okay, yeah, fantastic.


01:04:52.620 --> 01:04:54.940
We'll have to link to that one.


01:04:54.940 --> 01:04:57.100
All right, Will, so thank you for being here.


01:04:57.100 --> 01:04:58.540
This has been really great.


01:04:58.540 --> 01:05:02.260
Congratulations on both of these projects


01:05:02.260 --> 01:05:04.900
and all the momentum you've gotten.


01:05:04.900 --> 01:05:07.020
Final call to action,


01:05:07.020 --> 01:05:10.100
people wanna check out Richer Textual,


01:05:10.100 --> 01:05:11.620
maybe wanna support you,


01:05:11.620 --> 01:05:14.740
whatever else you wanna give a final shout out


01:05:14.740 --> 01:05:17.360
for a call to action before we call it a show.


01:05:17.360 --> 01:05:21.540
- Just connect with me on Twitter.


01:05:21.540 --> 01:05:24.340
My handle is @willmcgoogan.


01:05:24.340 --> 01:05:28.540
say hi, I'm happy to talk on Twitter.


01:05:28.540 --> 01:05:30.140
- All right, right on.


01:05:30.140 --> 01:05:31.860
Be sure to put the link in the show notes.


01:05:31.860 --> 01:05:33.380
Thanks for being here, Will.


01:05:33.380 --> 01:05:34.600
- Thank you, it's been great.


01:05:34.600 --> 01:05:36.140
- Yeah, bye. - Bye-bye.


01:05:36.140 --> 01:05:38.460
- Thanks everyone for being here to livestream as well.

