WEBVTT

00:00:00.000 --> 00:00:04.640
- Hey, everyone out there on the live stream.


00:00:04.640 --> 00:00:05.760
Thank you for being here.


00:00:05.760 --> 00:00:07.560
We're just about to get started.


00:00:07.560 --> 00:00:09.600
So throw some comments into the chat


00:00:09.600 --> 00:00:12.080
and we'll try to make that part of the show.


00:00:12.080 --> 00:00:13.880
So you guys ready?


00:00:13.880 --> 00:00:14.880
- Yeah, let's do it.


00:00:14.880 --> 00:00:19.200
- Carlton, Will, welcome to Talk Python to Me.


00:00:19.200 --> 00:00:21.100
Again, welcome back, guys.


00:00:21.100 --> 00:00:22.400
- Wasn't a thank you for having us.


00:00:22.400 --> 00:00:23.720
You came on our show. - Yeah, thank you.


00:00:23.720 --> 00:00:25.060
Yeah, you came on our show


00:00:25.060 --> 00:00:27.880
and I was on your show three years ago.


00:00:27.880 --> 00:00:30.800
So Carlton's first time on your show.


00:00:30.800 --> 00:00:32.560
- Talk Python newbie.


00:00:32.560 --> 00:00:36.560
- Yeah, it was great to have you on the show before, Will.


00:00:36.560 --> 00:00:38.000
And we talked about Django then,


00:00:38.000 --> 00:00:40.200
and I suspect it won't surprise people


00:00:40.200 --> 00:00:43.800
with you and Carlton here that we may touch on Django.


00:00:43.800 --> 00:00:45.840
- I think we've got to talk about Django a little bit.


00:00:45.840 --> 00:00:46.840
- A little bit.


00:00:46.840 --> 00:00:48.920
- Carlton, tell people who you are.


00:00:48.920 --> 00:00:50.560
- Okay, so I'm Carlton.


00:00:50.560 --> 00:00:52.600
I'm a Django fellow.


00:00:52.600 --> 00:00:55.600
So what that means is I help to maintain the framework.


00:00:56.680 --> 00:00:59.800
A framework the size of, oh, you've got me on Twitter there.


00:00:59.800 --> 00:01:02.920
So I'm Carlton Gibson on Twitter and on GitHub


00:01:02.920 --> 00:01:05.480
and numerous other places probably.


00:01:05.480 --> 00:01:07.200
But a framework the size of Django's,


00:01:07.200 --> 00:01:09.600
it just simply doesn't get maintained


00:01:09.600 --> 00:01:11.320
on purely volunteer effort.


00:01:11.320 --> 00:01:14.240
So there's a body called the Django Software Foundation,


00:01:14.240 --> 00:01:15.440
which Will's on the board for.


00:01:15.440 --> 00:01:17.560
He can tell you a bit about that in a second.


00:01:17.560 --> 00:01:20.320
But they are a charitable foundation which,


00:01:20.320 --> 00:01:24.360
well, they collect money from donations


00:01:24.360 --> 00:01:25.920
from GitHub sponsors and you can donate


00:01:25.920 --> 00:01:27.840
on djangoproject.com.


00:01:27.840 --> 00:01:30.680
And then the main thing they do is they contract the fellows


00:01:30.680 --> 00:01:34.320
which is myself and Maris Feliciak, who's my colleague now.


00:01:34.320 --> 00:01:37.720
And we do that, I don't know, what do we do?


00:01:37.720 --> 00:01:40.760
We triage the tickets, we do pull request review.


00:01:40.760 --> 00:01:44.240
We do handle security issues, we handle the releases,


00:01:44.240 --> 00:01:46.120
not least the alpha releases today.


00:01:46.120 --> 00:01:50.240
So today, literally today, we released Django 3.2 alpha,


00:01:50.240 --> 00:01:51.520
alpha one, which will be--


00:01:51.520 --> 00:01:52.360
- Fantastic.


00:01:52.360 --> 00:01:54.120
Is that the very first 3.2 release?


00:01:54.120 --> 00:01:55.720
- Yeah, that's the first one.


00:01:55.720 --> 00:01:58.680
So that's like, if you've got a Django project


00:01:58.680 --> 00:02:00.560
and you've got CI, you download it now


00:02:00.560 --> 00:02:01.400
and you run it on your CI


00:02:01.400 --> 00:02:03.360
and you tell us all the things we broke.


00:02:03.360 --> 00:02:07.320
Better before we released the final,


00:02:07.320 --> 00:02:09.920
it's much better during the alpha pre-release period


00:02:09.920 --> 00:02:14.120
than just after 3.2 final, you go, hey, everything's broken.


00:02:14.120 --> 00:02:16.640
- Yeah, you really need people to test it now


00:02:16.640 --> 00:02:18.280
before it's too late, right?


00:02:18.280 --> 00:02:21.120
- Yeah, but yes, but it's quite exciting


00:02:21.120 --> 00:02:22.120
because the last couple of weeks


00:02:22.120 --> 00:02:23.640
have been building towards the feature-free.


00:02:23.640 --> 00:02:25.240
So the alpha marks the feature-free.


00:02:25.240 --> 00:02:28.160
So over the pre-release period now,


00:02:28.160 --> 00:02:31.600
we'll merge bug fixes in the new features.


00:02:31.600 --> 00:02:34.640
So anything that people find and report will fix


00:02:34.640 --> 00:02:36.920
and get out before the final,


00:02:36.920 --> 00:02:39.160
but there's no new features going into 3.2.


00:02:39.160 --> 00:02:41.280
So on Thursday, just gone,


00:02:41.280 --> 00:02:43.840
I branched the stable branch for 3.2,


00:02:43.840 --> 00:02:47.360
which will be, that's Django 3.2,


00:02:47.360 --> 00:02:49.320
and it will be that for the next three years


00:02:49.320 --> 00:02:52.040
'cause the long-term release gets quite,


00:02:52.040 --> 00:02:54.800
the long-term support release, which 3.2 is,


00:02:54.800 --> 00:02:57.040
gets three years of support.


00:02:57.040 --> 00:02:58.640
- Yeah, that's really great.


00:02:58.640 --> 00:03:00.160
All right, we're gonna definitely have to come back to that,


00:03:00.160 --> 00:03:03.720
but also welcome Will.


00:03:03.720 --> 00:03:05.440
Tell everyone-- - Oh yeah, there I am.


00:03:05.440 --> 00:03:07.800
- Real briefly, you were on the show a while ago


00:03:07.800 --> 00:03:09.680
and we talked, I believe it was learning Django


00:03:09.680 --> 00:03:10.880
we spoke about, right?


00:03:10.880 --> 00:03:18.400
- I loved Django at the time,


00:03:18.400 --> 00:03:20.200
so I'd written, I think, a couple books.


00:03:20.200 --> 00:03:22.120
So I have three books,


00:03:22.120 --> 00:03:26.440
Django for professionals and APIs,


00:03:26.440 --> 00:03:27.800
and the last two years,


00:03:27.800 --> 00:03:30.560
I've been a member of the Django Software Foundation board.


00:03:30.560 --> 00:03:32.640
So there's about two who were voted in


00:03:32.640 --> 00:03:35.280
who play a prominent role in the community


00:03:35.280 --> 00:03:36.240
one way or another.


00:03:36.240 --> 00:03:39.360
And then the board is seven people annually voted on


00:03:39.360 --> 00:03:42.640
who manage Django itself, which is a nonprofit.


00:03:42.640 --> 00:03:44.680
We'll talk about that later.


00:03:44.680 --> 00:03:48.720
So yeah, and I have now a website, learndjango.com,


00:03:48.720 --> 00:03:51.640
which is an online version of additional content.


00:03:51.640 --> 00:03:54.040
But in addition to having a podcast with Carlton,


00:03:54.040 --> 00:03:56.480
Django chat, since he's a fellow,


00:03:56.480 --> 00:03:58.320
which is contracted by the board,


00:03:58.320 --> 00:04:02.240
we have another touch point as if we didn't need more.


00:04:02.240 --> 00:04:03.080
- Exactly, yeah.


00:04:03.080 --> 00:04:06.400
So I was on your show a while ago and that was super fun.


00:04:06.400 --> 00:04:09.120
I really enjoyed our conversation there.


00:04:09.120 --> 00:04:12.800
And maybe just tell people quickly about your podcast.


00:04:12.800 --> 00:04:14.160
What kind of stuff do you cover there?


00:04:14.160 --> 00:04:16.640
Obviously Django, but where do they find it?


00:04:16.640 --> 00:04:18.040
What do they cover?


00:04:18.040 --> 00:04:20.680
- Okay, so we get people on from the community.


00:04:20.680 --> 00:04:22.280
It's kind of an interview type basis.


00:04:22.280 --> 00:04:24.760
We get someone on, it's fortnightly now.


00:04:24.760 --> 00:04:27.920
We were doing it every week, but not like you, Michael,


00:04:27.920 --> 00:04:29.560
we can't keep it up forever.


00:04:29.560 --> 00:04:30.600
So we've gone fortnightly,


00:04:30.600 --> 00:04:32.720
which has taken a bit of pressure off with COVID


00:04:32.720 --> 00:04:35.040
and the kids off school and all of that.


00:04:35.040 --> 00:04:37.960
But we get people who contributed to Django


00:04:37.960 --> 00:04:40.640
or people who are using Django in their business


00:04:40.640 --> 00:04:42.400
and talk about it.


00:04:42.400 --> 00:04:44.920
So it's Django chat, it's chatting about Django.


00:04:44.920 --> 00:04:45.920
- It's chatting about Django, yeah.


00:04:45.920 --> 00:04:47.920
- Yeah, yeah, yeah, it's chatdjango.com.


00:04:47.920 --> 00:04:50.160
- And it's also, I think, recreating a little bit


00:04:50.160 --> 00:04:52.120
of what you would have at a DjangoCon event.


00:04:52.120 --> 00:04:53.520
So these are annual events.


00:04:53.520 --> 00:04:57.000
So we started after I went to my first DjangoCon


00:04:57.000 --> 00:04:58.640
and met Carlton and was like,


00:04:58.640 --> 00:05:00.920
why can't I talk to people about Django more often?


00:05:00.920 --> 00:05:05.000
And at the time there wasn't a Django podcast.


00:05:05.000 --> 00:05:07.400
So yeah, we've gotten to interview


00:05:07.400 --> 00:05:08.840
really my dream list of guests.


00:05:08.840 --> 00:05:11.240
I mean, we had, actually I was just talking to someone else


00:05:11.240 --> 00:05:13.720
who works at Stripe, which is still running on Sinatra,


00:05:13.720 --> 00:05:14.560
which is a Ruby thing.


00:05:14.560 --> 00:05:16.920
And I was like, yeah, yeah, I've talked to DHH


00:05:16.920 --> 00:05:18.440
'cause he's came on our show.


00:05:18.440 --> 00:05:20.440
So we talked about Rails versus Django.


00:05:20.440 --> 00:05:22.760
We had Carl Myron, who's at Instagram,


00:05:22.760 --> 00:05:24.240
was formerly DjangoCore.


00:05:24.240 --> 00:05:26.240
All the, basically everyone,


00:05:26.240 --> 00:05:28.120
almost everyone we'd wanna talk to


00:05:28.120 --> 00:05:29.840
who's involved in Django is willing to come on


00:05:29.840 --> 00:05:31.440
and share their story.


00:05:31.440 --> 00:05:32.880
So I think it's a really nice connector


00:05:32.880 --> 00:05:34.920
and educational for us too.


00:05:34.920 --> 00:05:36.040
- I do as well.


00:05:36.040 --> 00:05:39.320
And you're just sort of a sidebar for our show here.


00:05:39.320 --> 00:05:42.280
Being all of us fellow podcasters,


00:05:42.280 --> 00:05:45.920
I think it's really interesting the role that podcasts play


00:05:45.920 --> 00:05:49.680
in keeping connections to the broader tech community


00:05:49.680 --> 00:05:50.680
when we can't go anywhere.


00:05:50.680 --> 00:05:54.120
I mean, even if you weren't typically going to conferences


00:05:54.120 --> 00:05:56.640
or meetups, you could still go to work


00:05:56.640 --> 00:05:58.480
and see other people, right?


00:05:58.480 --> 00:06:02.680
It's just, for me, it took, first when COVID hit,


00:06:02.680 --> 00:06:05.080
I was like, I'm just, I'm not traveling anywhere.


00:06:05.080 --> 00:06:07.120
I'm not taking my kid to school or anything like that.


00:06:07.120 --> 00:06:10.160
So there's no like natural place.


00:06:10.160 --> 00:06:11.920
Here I'm stuck for 45 minutes.


00:06:11.920 --> 00:06:13.320
I'm gonna just listen.


00:06:13.320 --> 00:06:16.320
But as it's drawn on, I started to listen to shows,


00:06:16.320 --> 00:06:18.400
especially with multiple people trying to,


00:06:18.400 --> 00:06:21.200
it brings sort of a normalcy.


00:06:21.200 --> 00:06:23.200
And I get to kind of hang out with these people,


00:06:23.200 --> 00:06:24.600
even though they don't respond to me,


00:06:24.600 --> 00:06:25.520
I still get to hang out with them.


00:06:25.520 --> 00:06:28.640
And I think that's a really interesting societal thing


00:06:28.640 --> 00:06:30.000
that's happening right now.


00:06:30.000 --> 00:06:33.280
- Yeah, I think it's beneficial across the board.


00:06:33.280 --> 00:06:34.960
I mean, probably like you all,


00:06:34.960 --> 00:06:37.240
I listen to podcasts outside of tech as well.


00:06:37.240 --> 00:06:40.840
And it's sort of like people I'd wanna sit in


00:06:40.840 --> 00:06:42.080
on their conversations anyways.


00:06:42.080 --> 00:06:46.120
So for me, it's probably my primary media consumption


00:06:46.120 --> 00:06:47.520
aside from books.


00:06:47.520 --> 00:06:49.240
- Yeah, yeah.


00:06:49.240 --> 00:06:51.120
- But I mean, I'm not reading ancient Greek like Carlton.


00:06:51.120 --> 00:06:53.040
Carlton has a PhD in all that.


00:06:53.040 --> 00:06:58.040
So, so by comparison, my habits are,


00:06:58.040 --> 00:06:59.920
yeah, but we should, I mean,


00:06:59.920 --> 00:07:00.760
I think we were gonna talk about deployments.


00:07:00.760 --> 00:07:02.840
- Everything was done, book is lowbrow.


00:07:02.840 --> 00:07:04.240
- Yeah, yeah, yeah.


00:07:04.240 --> 00:07:07.520
We were gonna talk about specifically deployments on Django.


00:07:07.520 --> 00:07:09.200
I mean, we can go on and on about,


00:07:09.200 --> 00:07:11.040
obviously all the intricacies of Django,


00:07:11.040 --> 00:07:12.680
but I think suffice to say,


00:07:12.680 --> 00:07:15.240
I'm an educator on the board and Carlton's a fellow.


00:07:15.240 --> 00:07:17.840
So he makes the releases happen,


00:07:17.840 --> 00:07:20.000
including 3.2 alpha, which just dropped today.


00:07:20.000 --> 00:07:22.320
And I guess you mentioned LTS.


00:07:22.320 --> 00:07:24.520
So that's confusing to non-Django people.


00:07:24.520 --> 00:07:27.000
So since having fellows like Carlton,


00:07:27.000 --> 00:07:29.400
Django has a pretty rapid release cycle


00:07:29.400 --> 00:07:31.560
where it's every nine months or so.


00:07:31.560 --> 00:07:34.800
So there was 3.0, 3.1, 3.2 this December.


00:07:34.800 --> 00:07:36.520
I think Carlton is 4.0.


00:07:37.480 --> 00:07:41.840
And then one of those is a long-term service release.


00:07:41.840 --> 00:07:44.640
So that'll last two and a half years.


00:07:44.640 --> 00:07:46.440
So if that-- - Is it three years?


00:07:46.440 --> 00:07:47.280
- Is it three years?


00:07:47.280 --> 00:07:50.480
Yeah, it's on, there's a link on the Django project site.


00:07:50.480 --> 00:07:54.560
So that's a way that, so Django doesn't really have,


00:07:54.560 --> 00:07:56.360
it's rare to have breaking changes these days,


00:07:56.360 --> 00:08:00.160
but the LTS is designed to help people


00:08:00.160 --> 00:08:03.920
who can't keep up with that cycle stay up to date.


00:08:03.920 --> 00:08:06.040
Though we have a lot of podcasts and opinions


00:08:06.040 --> 00:08:07.640
about why you should always stay up to date


00:08:07.640 --> 00:08:08.720
and it's worth it.


00:08:08.720 --> 00:08:11.240
Because that's one of the most fair things you can do.


00:08:11.240 --> 00:08:14.280
Because as Carlton mentioned, there's bug fixes constantly.


00:08:14.280 --> 00:08:16.920
So it'll be, there's 3.1.1, 3.1.2,


00:08:16.920 --> 00:08:20.560
there'll be 3.2, then the 3.2.1 a month later or so.


00:08:20.560 --> 00:08:23.120
So stay up to date on it.


00:08:23.120 --> 00:08:26.120
- I'm a big advocate of, if you possibly can,


00:08:26.120 --> 00:08:27.560
get on the latest major release.


00:08:27.560 --> 00:08:29.280
So you don't, like hanging out,


00:08:29.280 --> 00:08:32.240
historically the long-term release was really,


00:08:32.240 --> 00:08:34.200
the LTS release was really important


00:08:34.200 --> 00:08:36.560
because there were breaking changes, right?


00:08:36.560 --> 00:08:39.200
In each major version of Django, there were new things


00:08:39.200 --> 00:08:40.200
and it was difficult to keep,


00:08:40.200 --> 00:08:41.520
but that's not the case anymore.


00:08:41.520 --> 00:08:43.360
It's really easy to update.


00:08:43.360 --> 00:08:45.000
So I'm a big advocate of that.


00:08:45.000 --> 00:08:47.720
Now, and then when I talk to fellow people


00:08:47.720 --> 00:08:48.960
in the Django community, they're like,


00:08:48.960 --> 00:08:50.600
"Well, you know, I work in the real world


00:08:50.600 --> 00:08:54.440
"and you can't always keep up on the latest major version."


00:08:54.440 --> 00:08:57.960
So for those folks, then the LTS is a really good option


00:08:57.960 --> 00:09:00.880
because it's once every three years, you know it's coming.


00:09:00.880 --> 00:09:01.720
- Yeah.


00:09:01.720 --> 00:09:03.720
- You get a six month window of overlap


00:09:03.720 --> 00:09:04.560
of support.


00:09:04.560 --> 00:09:07.440
So the old LTS gets six months of security release


00:09:07.440 --> 00:09:09.360
after the release of the new LTS


00:09:09.360 --> 00:09:11.160
and that's your window to update.


00:09:11.160 --> 00:09:16.000
- Well, I think that running and maintaining software


00:09:16.000 --> 00:09:18.160
built upon frameworks like Django,


00:09:18.160 --> 00:09:20.040
it falls into two categories for me.


00:09:20.040 --> 00:09:23.760
It falls into, here's something that we have a team


00:09:23.760 --> 00:09:26.960
or at least somebody dedicated to owning this project


00:09:26.960 --> 00:09:29.840
and we care about its ongoing life.


00:09:29.840 --> 00:09:32.040
And then we have the ones that are the,


00:09:32.040 --> 00:09:33.880
oh, please don't touch it.


00:09:33.880 --> 00:09:36.280
And the, oh, please don't touch it is,


00:09:36.280 --> 00:09:39.760
we've long since stopped developing that.


00:09:39.760 --> 00:09:42.840
Maybe the person who developed it left,


00:09:42.840 --> 00:09:46.800
but it's still important and we don't wanna break it.


00:09:46.800 --> 00:09:48.640
It's working right now, but if you touch it


00:09:48.640 --> 00:09:50.640
and you break it, you've now adopted it.


00:09:50.640 --> 00:09:51.480
You know what I mean?


00:09:51.480 --> 00:09:53.400
Like it's that thing that just--


00:09:53.400 --> 00:09:55.000
- It's like if you break the build.


00:09:55.000 --> 00:09:58.640
- Yes, but worse 'cause it's legacy build, right?


00:09:58.640 --> 00:10:00.880
It's like, so to me, I feel like,


00:10:01.800 --> 00:10:03.840
that please don't touch it side,


00:10:03.840 --> 00:10:06.040
the LTS make perfect sense for them.


00:10:06.040 --> 00:10:07.760
- Yeah, entirely, entirely.


00:10:07.760 --> 00:10:09.920
The way I like to think of it is,


00:10:09.920 --> 00:10:11.960
is this the thing that you're feasibly


00:10:11.960 --> 00:10:14.120
going to add new features to?


00:10:14.120 --> 00:10:16.160
And if you're feasibly going to add new features to,


00:10:16.160 --> 00:10:17.960
then you should be on the latest major version.


00:10:17.960 --> 00:10:20.040
And because it's once every eight months,


00:10:20.040 --> 00:10:23.280
you need to allocate a day or two to keep up,


00:10:23.280 --> 00:10:27.840
to fix, download the new version, run the test suite,


00:10:27.840 --> 00:10:30.760
see the deprecation warnings, fix the deprecation warnings,


00:10:30.760 --> 00:10:32.480
you know, maybe you have to wait a couple of weeks


00:10:32.480 --> 00:10:35.840
for a dependency to update and then you can push forward.


00:10:35.840 --> 00:10:37.920
And that's once every eight months, that process.


00:10:37.920 --> 00:10:41.240
And if you're adding new features, if it's a live project,


00:10:41.240 --> 00:10:42.800
ideally you'd be there.


00:10:42.800 --> 00:10:44.840
But yes, if there's something which you just need


00:10:44.840 --> 00:10:46.680
to keep running for the long run,


00:10:46.680 --> 00:10:50.640
you know, you could do that much less frequently.


00:10:50.640 --> 00:10:52.760
- Right, but it allows people who have that,


00:10:52.760 --> 00:10:53.640
please don't touch it.


00:10:53.640 --> 00:10:55.320
But oh, there's a security problem.


00:10:55.320 --> 00:11:00.320
You know, if there's no LTS and there's a security problem,


00:11:00.600 --> 00:11:02.000
then not only do they have to figure out


00:11:02.000 --> 00:11:05.000
how to redeploy the fix, they've got to say,


00:11:05.000 --> 00:11:07.320
"Well, we didn't touch it for three years


00:11:07.320 --> 00:11:09.280
and it doesn't quite work the same."


00:11:09.280 --> 00:11:11.640
So then you get into the discussion of,


00:11:11.640 --> 00:11:13.640
well, what's the risk?


00:11:13.640 --> 00:11:14.760
Will they really?


00:11:14.760 --> 00:11:16.720
It's just Java swing.


00:11:16.720 --> 00:11:18.160
I mean, come on, what's the problem, right?


00:11:18.160 --> 00:11:19.840
How bad could that go?


00:11:19.840 --> 00:11:21.720
You know, like the entire world.


00:11:21.720 --> 00:11:23.960
- It's a technical debt, isn't it?


00:11:23.960 --> 00:11:27.120
I mean, especially now that we're in Python 3 world,


00:11:27.120 --> 00:11:29.680
Dango was part of that.


00:11:29.680 --> 00:11:32.360
It's really beyond the security thing.


00:11:32.360 --> 00:11:34.280
It's also all the ecosystem around Dango,


00:11:34.280 --> 00:11:35.960
the third party packages.


00:11:35.960 --> 00:11:38.400
Like a lot of times, if you look at their project


00:11:38.400 --> 00:11:41.000
that says, "I can't update," why can't you update?


00:11:41.000 --> 00:11:41.840
They did two things.


00:11:41.840 --> 00:11:44.040
They're using a third party package,


00:11:44.040 --> 00:11:45.480
which falls into that, you know,


00:11:45.480 --> 00:11:48.120
touch it, you broke it situation.


00:11:48.120 --> 00:11:51.600
Or they did something custom at one point.


00:11:51.600 --> 00:11:56.360
They went off the guardrails and, you know,


00:11:56.360 --> 00:11:57.360
the bill comes due.


00:11:57.360 --> 00:11:58.640
I mean, it's so tempting.


00:11:58.640 --> 00:12:01.200
- Actually, I wanna, speaking of going off the guardrails,


00:12:01.200 --> 00:12:05.040
quick note that Dango just passed Flask to Stars,


00:12:05.040 --> 00:12:08.080
which is a really poor metric of popularity,


00:12:08.080 --> 00:12:10.280
but nonetheless, we'll take it.


00:12:10.280 --> 00:12:13.720
Because Flask is very easy to, you know,


00:12:13.720 --> 00:12:15.800
spin up a couple API endpoints,


00:12:15.800 --> 00:12:16.960
and boom, you're using Flask.


00:12:16.960 --> 00:12:18.080
That's a very different thing.


00:12:18.080 --> 00:12:19.720
That's like, you know, as DHH would say,


00:12:19.720 --> 00:12:22.160
that's a Lego versus the Lego truck


00:12:22.160 --> 00:12:25.080
that is a framework like Dango.


00:12:25.080 --> 00:12:28.280
And anecdotally, a lot of places use Flask,


00:12:28.280 --> 00:12:31.120
but in terms of a big site that's all Flask,


00:12:31.120 --> 00:12:35.240
that's much less common than all Dango.


00:12:35.240 --> 00:12:38.400
- Yeah, well, I was thinking about this morning,


00:12:38.400 --> 00:12:43.360
and it, you know, Flask and Dango are pretty neck and neck


00:12:43.360 --> 00:12:45.320
in terms of popularity, right?


00:12:45.320 --> 00:12:46.840
They're not-- - On GitHub.


00:12:46.840 --> 00:12:49.240
- On GitHub, yeah, yeah, sure.


00:12:49.240 --> 00:12:51.640
There's these metrics and popularity,


00:12:51.640 --> 00:12:53.360
there's like all over the map.


00:12:53.360 --> 00:12:57.240
So one of the thoughts I had though,


00:12:57.240 --> 00:12:59.440
is the people that use Flask,


00:12:59.440 --> 00:13:02.320
and this is not a knock against Flask, I like it.


00:13:02.320 --> 00:13:05.400
But one of my sort of impressions is,


00:13:05.400 --> 00:13:07.280
if I just need to, like you said,


00:13:07.280 --> 00:13:08.400
just create a couple APIs,


00:13:08.400 --> 00:13:10.120
and we're just gonna get something going real small


00:13:10.120 --> 00:13:11.600
and simple, and it's just roll.


00:13:11.600 --> 00:13:15.600
Like, those people are not as invested


00:13:15.600 --> 00:13:18.200
in the ecosystem and the framework


00:13:18.200 --> 00:13:20.120
as I feel like the Django folks are.


00:13:20.120 --> 00:13:21.320
I feel like the Django folks,


00:13:21.320 --> 00:13:25.040
it's a more encompassing part of their development


00:13:25.040 --> 00:13:26.800
experiences or development lifecycle.


00:13:26.800 --> 00:13:31.240
Like, Django feels more part of the project


00:13:31.240 --> 00:13:33.120
when people adopt it and love it.


00:13:33.120 --> 00:13:34.800
- Yeah.


00:13:34.800 --> 00:13:36.240
- I don't know, what do you guys think about that?


00:13:36.240 --> 00:13:37.160
- Yeah, I mean.


00:13:37.160 --> 00:13:39.760
- I mean, it has to be, right?


00:13:39.760 --> 00:13:42.360
You need a dozen apps to use Flask.


00:13:42.360 --> 00:13:45.000
And actually, I hope that we get David Lord on


00:13:45.000 --> 00:13:46.800
to talk about Flask, 'cause he's at DjangoCon.


00:13:46.800 --> 00:13:48.040
So I mean, it's not a,


00:13:48.040 --> 00:13:49.840
I don't mean to say there's a competition between the two,


00:13:49.840 --> 00:13:52.640
but they serve different purposes,


00:13:52.640 --> 00:13:54.000
I would say, Carlton, right?


00:13:54.000 --> 00:13:55.320
- Yeah, different styles as well.


00:13:55.320 --> 00:13:58.960
Like, you know, if you want to put together something,


00:13:58.960 --> 00:13:59.800
why not Flask?


00:13:59.800 --> 00:14:02.600
But I mean, I've been using Django for so long now


00:14:02.600 --> 00:14:05.640
that even if I just need to spin up two endpoints,


00:14:05.640 --> 00:14:08.600
it's much quicker for me to do that in Django


00:14:08.600 --> 00:14:12.400
than it is to go and get a supposedly micro framework


00:14:12.400 --> 00:14:15.160
and work out, you know, how am I supposed to use this?


00:14:15.160 --> 00:14:17.560
- In fact, you have a whole talk on this, Carlton, I think,


00:14:17.560 --> 00:14:19.440
from DjangoCon. - I do, yeah, no,


00:14:19.440 --> 00:14:22.360
DjangoCon US, what, last year.


00:14:22.360 --> 00:14:24.120
- Actually, I have a, we could put a link in the notes.


00:14:24.120 --> 00:14:27.280
I have, I made up a repo with the code,


00:14:27.280 --> 00:14:30.120
'cause you didn't provide code of, you can--


00:14:30.120 --> 00:14:32.600
- It's on the slide, so you can just get the slide.


00:14:32.600 --> 00:14:35.120
- Oh yeah, well, I think I tweaked a couple things,


00:14:35.120 --> 00:14:37.960
but yeah, you can have a single file Django project


00:14:37.960 --> 00:14:39.320
the same way you can for Flask,


00:14:39.320 --> 00:14:41.400
because a lot of times that whole old world comparison


00:14:41.400 --> 00:14:44.000
will lead people to assume that Flask


00:14:44.000 --> 00:14:46.440
is much less complicated than Django,


00:14:46.440 --> 00:14:48.000
and it's a little bit less, but it's a little,


00:14:48.000 --> 00:14:49.340
it's more around to how it's structured,


00:14:49.340 --> 00:14:51.680
which is the point of Carlton's talk, basically.


00:14:51.680 --> 00:14:53.440
- Yeah, so the talk was called


00:14:53.440 --> 00:14:55.560
How to Use Django as a Microframework,


00:14:55.560 --> 00:14:56.880
or something like that, and it was about


00:14:56.880 --> 00:14:59.520
the base HTTP handlers, the kind of,


00:14:59.520 --> 00:15:01.520
that real core of the framework,


00:15:01.520 --> 00:15:03.520
and those, you know, I put up a few examples


00:15:03.520 --> 00:15:05.280
from different frameworks, like Flask,


00:15:05.280 --> 00:15:08.240
and an old example, and Starlet,


00:15:08.240 --> 00:15:11.400
you know, async microframework from Tom Christie.


00:15:11.400 --> 00:15:15.480
- And then, you know, for people who, sorry.


00:15:15.480 --> 00:15:16.960
Yeah, for people who don't necessarily


00:15:16.960 --> 00:15:20.160
live and breathe the web stuff like the three of us do,


00:15:20.160 --> 00:15:22.480
give them a quick definition of microframework


00:15:22.480 --> 00:15:23.880
before you go on.


00:15:23.880 --> 00:15:26.560
- Well, in the talk, I was like, you know,


00:15:26.560 --> 00:15:27.640
what is a microframework?


00:15:27.640 --> 00:15:28.480
And I think the answer is--


00:15:28.480 --> 00:15:29.320
- Yeah, I'm asking you,


00:15:29.320 --> 00:15:30.560
'cause I don't wanna put my foot out there.


00:15:30.560 --> 00:15:33.240
- Right, but the answer I came up with was,


00:15:33.240 --> 00:15:35.460
it's got a great hello world, right?


00:15:35.460 --> 00:15:36.880
- Yeah, okay, sure.


00:15:36.880 --> 00:15:38.760
- Like, you know, it's just a term,


00:15:38.760 --> 00:15:42.200
but I think the idea is that it's easier


00:15:42.200 --> 00:15:44.320
to contrast it with like Rails or Django.


00:15:44.320 --> 00:15:46.560
Rails and Django, they come with the batteries included,


00:15:46.560 --> 00:15:47.640
with everything you need, you know.


00:15:47.640 --> 00:15:50.000
- You've got an ORM, you've got database,


00:15:50.000 --> 00:15:52.040
you've got migration, all that stuff, yeah.


00:15:52.040 --> 00:15:52.920
- All that stuff.


00:15:52.920 --> 00:15:53.760
With your microframework,


00:15:53.760 --> 00:15:56.520
you perhaps get the core HTTP handling,


00:15:56.520 --> 00:15:57.400
and that's about it,


00:15:57.400 --> 00:15:59.440
and then you have to go and find a forms library.


00:15:59.440 --> 00:16:00.880
Okay, I found a forms library.


00:16:00.880 --> 00:16:03.280
And then you have to pull in an ORM or a database,


00:16:03.280 --> 00:16:04.920
okay, I'll use that one.


00:16:04.920 --> 00:16:09.920
And, you know, so there are node full batteries


00:16:09.920 --> 00:16:12.280
included frameworks, like Happy is very good,


00:16:12.280 --> 00:16:13.320
it's got everything you need.


00:16:13.320 --> 00:16:15.080
But like the classic nodes example is,


00:16:15.080 --> 00:16:16.720
oh, you know, I get Express,


00:16:16.720 --> 00:16:19.640
and I pull in this thing for passing URLs,


00:16:19.640 --> 00:16:22.600
and that thing, you know, so there's a continuum.


00:16:22.600 --> 00:16:24.840
But microframeworks fit more towards that,


00:16:24.840 --> 00:16:26.840
you know, you put the pieces together yourself,


00:16:26.840 --> 00:16:28.960
whereas a batteries included framework like Django,


00:16:28.960 --> 00:16:33.040
you get not everything, but a lot in the box.


00:16:33.040 --> 00:16:36.640
- Right, so your experience is more Django pieces,


00:16:36.640 --> 00:16:38.680
Django building blocks, then a little Flask,


00:16:38.680 --> 00:16:40.520
a little SQL, a little this, a little that.


00:16:40.520 --> 00:16:43.520
- Yeah, definitely, and I've been doing it so long now


00:16:43.520 --> 00:16:47.240
that I'd struggle to break out of that.


00:16:47.240 --> 00:16:49.720
I just, you know, I throw in a bit of style


00:16:49.720 --> 00:16:51.000
or a bit of FastAPI,


00:16:51.000 --> 00:16:52.560
see what's going on with the new frameworks,


00:16:52.560 --> 00:16:53.600
every new framework that comes out,


00:16:53.600 --> 00:16:54.880
they'll always give it a run.


00:16:54.880 --> 00:16:55.800
And then my question is,


00:16:55.800 --> 00:16:57.920
well, okay, well, what can we learn from that for Django?


00:16:57.920 --> 00:16:59.960
- Yeah, I think what you can learn from that


00:16:59.960 --> 00:17:01.400
is I can be an RSA.


00:17:01.400 --> 00:17:02.240
- Go ahead, Will.


00:17:02.240 --> 00:17:03.120
- I just think a truly large site,


00:17:03.120 --> 00:17:06.320
if you ask them like what language and frameworks you use,


00:17:06.320 --> 00:17:09.240
it's like everything, you know, I mean,


00:17:09.240 --> 00:17:11.600
just because of the needs of a massive site,


00:17:11.600 --> 00:17:13.200
it ends up being, it's hard to say


00:17:13.200 --> 00:17:14.120
that it's truly one thing.


00:17:14.200 --> 00:17:17.680
I mean, Instagram is still, has pieces of Django in it,


00:17:17.680 --> 00:17:21.120
but you know, it's, at that scale, it's its own thing.


00:17:21.120 --> 00:17:22.320
And I think, you know, the micro frameworks


00:17:22.320 --> 00:17:23.720
are really good for doing that.


00:17:23.720 --> 00:17:26.280
There's also, this might be a pessimistic take,


00:17:26.280 --> 00:17:28.480
but I've heard people make that a micro framework


00:17:28.480 --> 00:17:30.480
allows you to switch the complexity


00:17:30.480 --> 00:17:33.200
from individual developers who may be sharing you


00:17:33.200 --> 00:17:36.360
just as much up to your upper level,


00:17:36.360 --> 00:17:39.920
because they only can touch a tiny part of the monolith.


00:17:39.920 --> 00:17:42.440
So they can, in a way, do less damage.


00:17:42.440 --> 00:17:44.160
That's actually an organizational argument


00:17:44.160 --> 00:17:46.880
for micro frameworks is that only the software architects


00:17:46.880 --> 00:17:49.720
or the senior people fit it all together.


00:17:49.720 --> 00:17:52.920
- They weave the pieces or they build the puzzle


00:17:52.920 --> 00:17:53.760
or whatever.


00:17:53.760 --> 00:17:54.600
- But you know, there's something to that, I guess,


00:17:54.600 --> 00:17:56.760
especially if your testing suite isn't


00:17:56.760 --> 00:17:57.920
as good as it could be.


00:17:57.920 --> 00:17:59.880
- Yeah, I don't know.


00:17:59.880 --> 00:18:01.320
I think there's an interesting conversation


00:18:01.320 --> 00:18:05.520
about like monolith type software style versus not.


00:18:05.520 --> 00:18:07.440
I'm actually a big fan of the monolith style.


00:18:07.440 --> 00:18:10.680
Like all my attempts to break it into little pieces,


00:18:10.680 --> 00:18:12.160
at least in the microservices,


00:18:12.160 --> 00:18:13.600
which is not the same as micro framework,


00:18:13.600 --> 00:18:16.640
but I always feel like I've quadrupled


00:18:16.640 --> 00:18:20.800
my deployment complexity to half my software complexity.


00:18:20.800 --> 00:18:23.640
And I'd rather manage half as much software complexity


00:18:23.640 --> 00:18:26.040
as twice as much deployment complexity.


00:18:26.040 --> 00:18:28.360
- Right, like if you were part of a five person team


00:18:28.360 --> 00:18:30.320
in a large organization assigned to fix something


00:18:30.320 --> 00:18:33.280
and you're just like, there's no way we can get done


00:18:33.280 --> 00:18:34.720
within this monolith, but like, oh,


00:18:34.720 --> 00:18:36.440
we could spin something up and solve the problem


00:18:36.440 --> 00:18:38.880
and move on, you know,


00:18:38.880 --> 00:18:41.960
play that by the lot.


00:18:41.960 --> 00:18:44.800
I think, you know, or an individual project,


00:18:44.800 --> 00:18:47.080
you get fancy and you customize Django


00:18:47.080 --> 00:18:49.920
or you use a third party package that is out of date


00:18:49.920 --> 00:18:52.920
or maybe you shouldn't use it and you have the same issue.


00:18:52.920 --> 00:18:55.200
- Yeah, I don't know, like, okay,


00:18:55.200 --> 00:18:58.360
we're segwaying slightly back into the deployment topic,


00:18:58.360 --> 00:19:00.080
which ostensibly we came to talk about.


00:19:00.080 --> 00:19:01.520
- Yeah, yeah, yeah.


00:19:01.520 --> 00:19:03.080
- I think the thing with microservices, right,


00:19:03.080 --> 00:19:05.240
so if you've got a massive corporation,


00:19:05.240 --> 00:19:09.280
you can't have all the things going on, right, in one team.


00:19:09.280 --> 00:19:11.000
So you need to segment it somehow


00:19:11.000 --> 00:19:12.960
and then you can define service boundaries


00:19:12.960 --> 00:19:14.400
and it starts to make sense.


00:19:14.400 --> 00:19:18.520
But when, then all the tech blogs become


00:19:18.520 --> 00:19:21.000
about microservices and how this is the way.


00:19:21.000 --> 00:19:23.080
And then learners come along and they're like,


00:19:23.080 --> 00:19:26.080
well, I've got to build my thing using microservices.


00:19:26.080 --> 00:19:29.000
It's like, no, that's really not a good move,


00:19:29.000 --> 00:19:32.320
but wherever the blog posts, not for, you know,


00:19:32.320 --> 00:19:35.600
and now the pendulum swings back and, you know,


00:19:35.600 --> 00:19:38.280
there are lots of posts now about how monoliths


00:19:38.280 --> 00:19:40.520
are making return and how they're the way to go.


00:19:40.520 --> 00:19:42.920
And so hopefully the beginners come and see those posts.


00:19:42.920 --> 00:19:46.000
But when you're learning and everyone's saying,


00:19:46.000 --> 00:19:48.080
oh, you must use a microservice architecture,


00:19:48.080 --> 00:19:49.440
it's like, hang on.


00:19:49.440 --> 00:19:50.360
- Yeah.


00:19:50.360 --> 00:19:52.520
- Yeah, because the people who are knowledgeable


00:19:52.520 --> 00:19:54.440
are writing about their day job.


00:19:54.440 --> 00:19:57.080
They're not writing about spinning up a Django app


00:19:57.080 --> 00:19:58.480
on a weekend.


00:19:58.480 --> 00:19:59.320
- Yeah. - Yeah.


00:19:59.320 --> 00:20:00.960
- Which is possible and you can deploy it too,


00:20:00.960 --> 00:20:04.800
which we could, should we get into that deployment?


00:20:04.800 --> 00:20:07.360
- Well, I, you know, I do want to just point out,


00:20:07.360 --> 00:20:09.880
I think this might be the RFA that I read before.


00:20:09.880 --> 00:20:13.040
And like, yeah, you're not Google, you're not LinkedIn,


00:20:13.040 --> 00:20:15.520
you're not Facebook, you're not Netflix.


00:20:15.520 --> 00:20:17.840
There are people who actually,


00:20:17.840 --> 00:20:20.280
that's an inaccurate statement about.


00:20:20.280 --> 00:20:22.000
There's plenty of people that work at those companies.


00:20:22.000 --> 00:20:24.680
But like you said, Carlton, the people who come along,


00:20:24.680 --> 00:20:27.480
they see these companies who they respect and say,


00:20:27.480 --> 00:20:29.160
they must be doing it right.


00:20:29.160 --> 00:20:31.920
And so often with these deployment stories,


00:20:31.920 --> 00:20:33.320
with these design patterns, you know,


00:20:33.320 --> 00:20:36.520
should you have like separate caching servers


00:20:36.520 --> 00:20:39.200
that run like something like Redis?


00:20:39.200 --> 00:20:40.040
Yes, you should.


00:20:40.040 --> 00:20:40.880
No, you shouldn't.


00:20:40.880 --> 00:20:42.280
And that's the right answer at the same time,


00:20:42.280 --> 00:20:45.560
but with the context that you need, right?


00:20:45.560 --> 00:20:48.880
Are you trying to run 10,000 servers


00:20:48.880 --> 00:20:51.120
and let 500 people work on this project?


00:20:51.120 --> 00:20:53.120
Or are you two people trying to do a startup?


00:20:53.120 --> 00:20:55.960
Like those are not the same trade-offs


00:20:55.960 --> 00:20:58.200
and balances you want to make, right?


00:20:58.200 --> 00:20:59.040
- Right, yeah.


00:20:59.040 --> 00:21:00.520
And it depends as well on your model.


00:21:00.520 --> 00:21:03.240
So one example that I really like is Stack Overflow.


00:21:03.240 --> 00:21:05.360
Now they're built entirely on the Microsoft stack.


00:21:05.360 --> 00:21:07.760
So they've got a SQL server and they're using .NET


00:21:07.760 --> 00:21:09.760
and all, but the basic point is


00:21:09.760 --> 00:21:13.520
they've got a really big database one.


00:21:13.520 --> 00:21:15.480
And then, you know, a few worker processes


00:21:15.480 --> 00:21:16.720
in front of those and that's it.


00:21:16.720 --> 00:21:18.760
It's a classic monolith.


00:21:18.760 --> 00:21:20.600
And they're one of the biggest sites on the internet.


00:21:20.600 --> 00:21:21.440
And yet they're able to do it.


00:21:21.440 --> 00:21:22.520
- They're incredibly fast.


00:21:22.520 --> 00:21:23.360
- Yeah, yeah, yeah.


00:21:23.360 --> 00:21:26.160
And yeah, exactly as fast as you could ever want.


00:21:26.160 --> 00:21:29.760
Okay, they do it in this kind of monolith,


00:21:29.760 --> 00:21:32.960
old school styles, you know, vertical scale,


00:21:32.960 --> 00:21:33.840
make it just bigger.


00:21:33.840 --> 00:21:37.680
No, I don't spin out parallels, just make the thing bigger.


00:21:37.680 --> 00:21:40.120
Buy a bigger database server.


00:21:40.120 --> 00:21:41.960
So that's, you're not gonna be bigger


00:21:41.960 --> 00:21:43.680
than Stack Overflow, right?


00:21:43.680 --> 00:21:44.960
And then another example we have--


00:21:44.960 --> 00:21:46.960
- And when you are, you'll reevaluate it anyway.


00:21:46.960 --> 00:21:49.640
Whatever you do now is not gonna solve that problem, yeah.


00:21:49.640 --> 00:21:51.720
- But you're not gonna be bigger than Stack Overflow.


00:21:51.720 --> 00:21:53.960
And then we had another example, which was Dr. Indermaan.


00:21:53.960 --> 00:21:56.120
They came on, Matt Lehman from those,


00:21:56.120 --> 00:21:58.480
from Dr. Indermaan came on Django chat recently.


00:21:58.480 --> 00:22:02.680
And he was, they've got a more containerized approach


00:22:02.680 --> 00:22:06.000
to it, but the thing is, they're doing peer-to-peer


00:22:06.000 --> 00:22:08.680
communication between many simultaneous


00:22:08.680 --> 00:22:10.200
peer-to-peer video communications,


00:22:10.200 --> 00:22:12.960
'cause Dr. Indermaan is like a telemedicine, right?


00:22:12.960 --> 00:22:14.720
- Right, right, like I need to book


00:22:14.720 --> 00:22:18.000
a video appointment with my doctor.


00:22:18.000 --> 00:22:18.840
- Yeah, exactly.


00:22:18.840 --> 00:22:19.680
- Okay, exactly.


00:22:19.680 --> 00:22:24.260
- But they've got so many of those processes


00:22:24.260 --> 00:22:26.520
needed to be spun up that they need something


00:22:26.520 --> 00:22:29.160
which scales out and then back down again very easily.


00:22:29.160 --> 00:22:31.360
So they've got a kind of more modern,


00:22:31.360 --> 00:22:34.800
more, you know, a cooler technology.


00:22:34.800 --> 00:22:36.320
They're not as big as Stack Overflow probably


00:22:36.320 --> 00:22:38.760
in terms of raw talent, raw traffic,


00:22:38.760 --> 00:22:42.120
but they need that flexibility of architecture.


00:22:42.120 --> 00:22:43.320
- That's what we always think, right?


00:22:43.320 --> 00:22:44.880
We say it depends, that's our tagline.


00:22:44.880 --> 00:22:46.400
- Yeah, it depends.


00:22:46.400 --> 00:22:47.240
- Yeah.


00:22:47.240 --> 00:22:48.080
- Django chat.


00:22:48.080 --> 00:22:50.600
- It depends, exactly, that's your subtitle.


00:22:50.600 --> 00:22:52.240
I do think context, right?


00:22:52.240 --> 00:22:53.760
When people talk about design patterns,


00:22:53.760 --> 00:22:55.880
deployment, architecture, there's,


00:22:55.880 --> 00:22:59.080
those are always within a silent,


00:22:59.080 --> 00:23:01.640
not mentioned most of the time context


00:23:01.640 --> 00:23:02.720
in which that makes sense.


00:23:02.720 --> 00:23:04.560
And you gotta decide, are you in that context?


00:23:04.560 --> 00:23:05.720
Are you not?


00:23:05.720 --> 00:23:06.880
- Yeah, yeah, no, Intel.


00:23:06.880 --> 00:23:07.720
- Yeah.


00:23:07.720 --> 00:23:09.640
- Now, before we move on.


00:23:09.640 --> 00:23:11.520
- I was just saying, what problems are you trying to solve?


00:23:11.520 --> 00:23:13.560
Like, you can't innovate everywhere.


00:23:13.560 --> 00:23:15.640
Like, there's so many pieces to a website.


00:23:15.640 --> 00:23:17.600
Do you wanna innovate on deployment?


00:23:17.600 --> 00:23:20.880
Not until you're, you know, Instagram, I don't think.


00:23:20.880 --> 00:23:24.200
- Yeah, yeah, yeah, absolutely.


00:23:24.200 --> 00:23:25.720
No, well, I think that's a great point.


00:23:25.720 --> 00:23:28.000
And, you know, it's, when you're small,


00:23:28.000 --> 00:23:30.600
the most important thing is adding features


00:23:30.600 --> 00:23:32.200
and going quick, right?


00:23:32.200 --> 00:23:33.880
When you get bigger, the most important thing


00:23:33.880 --> 00:23:35.160
is to not go down, right?


00:23:35.160 --> 00:23:39.920
If random little project that is like an ordering service


00:23:39.920 --> 00:23:42.440
for a restaurant in Milwaukee,


00:23:42.440 --> 00:23:46.600
if it goes down for half an hour, it's not ideal,


00:23:46.600 --> 00:23:47.560
but it's not the end of the world.


00:23:47.560 --> 00:23:50.640
If Google goes down for a half hour, people really notice.


00:23:50.640 --> 00:23:52.240
You know, it's like front page news type.


00:23:52.240 --> 00:23:54.000
So it's just a totally different thing.


00:23:54.000 --> 00:23:57.240
Now, before we move on to a more deployment stuff,


00:23:57.240 --> 00:23:58.320
and we're kind of in there, I do,


00:23:58.320 --> 00:24:00.520
just before we get away too far,


00:24:00.520 --> 00:24:02.200
maybe we could touch real quickly


00:24:02.200 --> 00:24:04.760
on some of the new features that are coming in 3.2


00:24:04.760 --> 00:24:09.080
and like the Django 3 stuff that you guys are excited about.


00:24:09.080 --> 00:24:11.280
- Yeah, maybe, can you start with just 3 in general,


00:24:11.280 --> 00:24:14.920
Carlton, 'cause I think that makes 3.2 have more context.


00:24:14.920 --> 00:24:17.760
- Well, okay, so, but 3 introduced,


00:24:17.760 --> 00:24:20.800
3 began the process for making Django async, right?


00:24:20.800 --> 00:24:24.880
So we added, so historically, Python has this,


00:24:24.880 --> 00:24:28.320
the WSGI, the web service gateway interface.


00:24:28.320 --> 00:24:30.040
So Django is a WSGI framework.


00:24:30.040 --> 00:24:31.440
Flask is a WSGI framework.


00:24:31.440 --> 00:24:35.200
It was this standard so that application servers


00:24:35.200 --> 00:24:36.840
could talk to protocol servers,


00:24:36.840 --> 00:24:39.440
which could talk to the internet without, you know,


00:24:39.440 --> 00:24:42.360
each framework having to have its own protocol server.


00:24:42.360 --> 00:24:45.560
So Gunicorn is a WSGI server, and it can speak to Flask,


00:24:45.560 --> 00:24:46.960
and it can speak to Django.


00:24:46.960 --> 00:24:49.480
- Right, you can use that, and I can use micro WSGI,


00:24:49.480 --> 00:24:52.920
and we don't have to coordinate or do anything.


00:24:52.920 --> 00:24:53.760
It just happens.


00:24:53.760 --> 00:24:57.400
That's because of the WSGI or WSGI thing, right?


00:24:57.400 --> 00:24:59.200
- Yes, so that's the standard.


00:24:59.200 --> 00:25:01.840
And so in order to make things async,


00:25:01.840 --> 00:25:04.240
there's this thing called ASCII,


00:25:04.240 --> 00:25:08.240
which is the asynchronous web gateway interface.


00:25:08.240 --> 00:25:09.080
I don't know.


00:25:09.080 --> 00:25:09.920
- Yeah, I don't know.


00:25:09.920 --> 00:25:10.760
I don't really, yeah.


00:25:10.760 --> 00:25:12.280
- Anyway, it's not WSGI, it's ASCII.


00:25:12.280 --> 00:25:16.920
So first of all, Django 3.0 brought in an ASCII handler.


00:25:16.920 --> 00:25:18.760
So it wasn't async at all,


00:25:18.760 --> 00:25:21.280
but you could run it under an ASCII server.


00:25:21.280 --> 00:25:26.080
And then 3.1 brought in actual async views,


00:25:26.080 --> 00:25:29.320
and you can define an async def view,


00:25:29.320 --> 00:25:31.400
and you can use, I don't know, HTTPX,


00:25:31.400 --> 00:25:35.320
which is like an asynchronous HTTP client.


00:25:35.320 --> 00:25:36.160
- Like request.


00:25:36.160 --> 00:25:38.080
- Yeah, so request.


00:25:38.080 --> 00:25:39.960
- What about, what's the ORM story?


00:25:39.960 --> 00:25:42.000
Does that support async await yet?


00:25:42.000 --> 00:25:43.920
- Right, no, so that's not there yet.


00:25:43.920 --> 00:25:45.640
So this is something that will develop


00:25:45.640 --> 00:25:49.080
over probably over the course of the Django 4 lifestyle.


00:25:49.080 --> 00:25:50.800
So there's plans and there's thoughts,


00:25:50.800 --> 00:25:54.640
and we need to get to the point where you,


00:25:54.640 --> 00:25:57.480
with the ORM, where you can,


00:25:57.480 --> 00:26:00.600
down to your kind of filter call.


00:26:00.600 --> 00:26:03.240
So things like filter, they can be totally synchronous


00:26:03.240 --> 00:26:05.240
because they don't actually do any IO.


00:26:05.240 --> 00:26:06.600
They don't actually hit the database.


00:26:06.600 --> 00:26:08.920
But when you then go, right, I've got my query set


00:26:08.920 --> 00:26:10.280
and I'm gonna iterate it,


00:26:10.280 --> 00:26:12.960
and I'm gonna fetch the objects from the database.


00:26:12.960 --> 00:26:14.080
We need that bit,


00:26:14.080 --> 00:26:16.560
even if the actual connection is running a thread


00:26:16.560 --> 00:26:19.200
or whatever, we need that bit to be fully async.


00:26:19.200 --> 00:26:23.400
And then Django will feel async as it is.


00:26:23.400 --> 00:26:25.800
At the moment, if you write an async view in Django,


00:26:25.800 --> 00:26:28.440
you kind of have to say, well, I'm not gonna touch the DB.


00:26:28.440 --> 00:26:32.760
I'm not gonna, I mean, you can wrap the ORM


00:26:32.760 --> 00:26:35.080
in async to async wrapper,


00:26:35.080 --> 00:26:39.960
but you kind of lose the point of that.


00:26:39.960 --> 00:26:42.080
- Yeah, yeah, but that's coming, right?


00:26:42.080 --> 00:26:44.000
- Yeah, so Andrew, yeah, so Andrew Golden,


00:26:44.000 --> 00:26:45.920
who's driving this effort,


00:26:45.920 --> 00:26:49.000
he gave a talk at DjangoCon Europe


00:26:49.000 --> 00:26:51.080
about the structuring of this


00:26:51.080 --> 00:26:52.400
and what it's gonna look like.


00:26:52.400 --> 00:26:53.680
And it's like, yeah, that makes sense.


00:26:53.680 --> 00:26:55.160
This is gonna work.


00:26:55.160 --> 00:26:56.320
And we don't have to get,


00:26:56.320 --> 00:26:59.000
what's nice is we don't have to get async


00:26:59.000 --> 00:27:01.320
all the way down to the very bottom


00:27:01.320 --> 00:27:02.520
because we can run the actual,


00:27:02.520 --> 00:27:05.200
we can sort of hand off the actual database connection


00:27:05.200 --> 00:27:06.600
in a thread executor,


00:27:06.600 --> 00:27:09.840
but from the outside of the ORM, it will look async.


00:27:09.840 --> 00:27:14.840
And then you can stream out your content records


00:27:14.840 --> 00:27:18.760
of maximum throughput as you want to, that kind of thing.


00:27:18.760 --> 00:27:20.560
- Yeah, well, the fact that you can already do


00:27:20.560 --> 00:27:22.440
external APIs, and if you're going down


00:27:22.440 --> 00:27:25.120
the microservice path, you can do your microservice calls


00:27:25.120 --> 00:27:28.240
with HTTPS and await those, that's already a huge step.


00:27:28.240 --> 00:27:29.160
- Yeah, exactly.


00:27:29.160 --> 00:27:31.720
So this is, so without, and this works,


00:27:31.720 --> 00:27:36.720
what's amazing about the way Andrew is just absolute hero,


00:27:36.720 --> 00:27:39.520
but he put it together in such a way


00:27:39.520 --> 00:27:42.040
that you can run this with a WSGI service.


00:27:42.040 --> 00:27:45.560
You're running Django 3.1 with Gunicorn,


00:27:45.560 --> 00:27:46.840
like you always have.


00:27:46.840 --> 00:27:47.680
And you think to yourself,


00:27:47.680 --> 00:27:50.400
I just need to make a couple of API calls,


00:27:50.400 --> 00:27:52.920
but they're quite slow and I want to make them in parallel.


00:27:52.920 --> 00:27:55.840
You can do that just by writing an async def call


00:27:55.840 --> 00:27:59.880
and then making the parallel calls using HTTPS.


00:27:59.880 --> 00:28:02.120
And it just works.


00:28:02.120 --> 00:28:04.160
And Django does all the rest for you and adapts it,


00:28:04.160 --> 00:28:06.120
and you didn't have to change your application server.


00:28:06.120 --> 00:28:09.040
You didn't have to do, it's just like, yeah, it's async.


00:28:09.040 --> 00:28:12.400
- One of the challenges, if you're talking to the database,


00:28:12.400 --> 00:28:15.960
is you say, okay, fine, the bottleneck was we were waiting


00:28:15.960 --> 00:28:19.680
at the web server level, at the Django level,


00:28:19.680 --> 00:28:21.560
and then we're going to push that down to the database.


00:28:21.560 --> 00:28:23.080
We're going to just make all that async.


00:28:23.080 --> 00:28:25.680
All of a sudden, all the pressure is now on the database,


00:28:25.680 --> 00:28:26.960
which can be a problem.


00:28:26.960 --> 00:28:28.440
But if you're talking external APIs,


00:28:28.440 --> 00:28:30.560
you're now pushing the pressure onto the internet,


00:28:30.560 --> 00:28:32.600
which is way scalable.


00:28:32.600 --> 00:28:36.040
- Yeah, and it's always going to scale more than you, right?


00:28:36.040 --> 00:28:37.600
You know, you're not going to need


00:28:37.600 --> 00:28:39.520
that many client requests probably.


00:28:39.520 --> 00:28:40.360
- Yeah, yeah.


00:28:40.360 --> 00:28:44.200
Also David Smith out there says 3.2 will be a great release.


00:28:44.200 --> 00:28:46.200
You guys have done a great job getting many patches over.


00:28:46.200 --> 00:28:47.840
Yeah, for sure.


00:28:47.840 --> 00:28:49.480
- Thank you, David.


00:28:49.480 --> 00:28:50.320
- Super.


00:28:50.320 --> 00:28:51.400
We were working really hard.


00:28:51.400 --> 00:28:55.160
It was, we had two longer lists and we got,


00:28:55.160 --> 00:28:57.920
you know, one we had to bump for Django 4.0,


00:28:57.920 --> 00:29:00.640
but the rest we got in, so we were very pleased.


00:29:00.640 --> 00:29:03.800
- Okay, so 3.0, async and await, this is a big deal.


00:29:03.800 --> 00:29:06.120
- And three, yeah, and so what's, yeah,


00:29:06.120 --> 00:29:07.960
and so those are the big features of 3.0.


00:29:07.960 --> 00:29:10.040
And then what's coming in 3.2,


00:29:10.040 --> 00:29:12.760
it's got various other bits and bobs.


00:29:12.760 --> 00:29:15.800
You can customize primary key.


00:29:15.800 --> 00:29:18.560
So traditionally, they've just been autofilled,


00:29:18.560 --> 00:29:20.200
which is in 32.


00:29:20.200 --> 00:29:21.920
Well, eventually, you know,


00:29:21.920 --> 00:29:24.280
you get 22 billion of those or something, you can run out.


00:29:24.280 --> 00:29:26.800
So you can now customize that for big in,


00:29:26.800 --> 00:29:30.000
and over the next couple of releases, you know,


00:29:30.000 --> 00:29:34.240
major releases, we will make the default big in,


00:29:34.240 --> 00:29:36.640
because that's probably what it should be in 64,


00:29:36.640 --> 00:29:40.040
'cause then you're never going to run out of primary keys.


00:29:40.040 --> 00:29:42.920
But that's something that, you know, came in.


00:29:42.920 --> 00:29:44.400
The big sites run into that,


00:29:44.400 --> 00:29:46.800
especially if you start creating, I don't know,


00:29:48.080 --> 00:29:50.000
events, an event log.


00:29:50.000 --> 00:29:53.360
You know, a site can generate a lot of events


00:29:53.360 --> 00:29:55.200
and they can add up quickly, you know,


00:29:55.200 --> 00:29:57.160
so anyway, that's important.


00:29:57.160 --> 00:30:00.680
Functional index is in the ORM,


00:30:00.680 --> 00:30:04.480
so you can create an index on an expression,


00:30:04.480 --> 00:30:07.000
like, you know, that these were greater than,


00:30:07.000 --> 00:30:08.480
or that the sum of this was,


00:30:08.480 --> 00:30:11.280
and then you can query on those at full speed,


00:30:11.280 --> 00:30:12.200
because they're indexed.


00:30:12.200 --> 00:30:13.040
That's a really big--


00:30:13.040 --> 00:30:13.960
- Oh, really, so you can do a query,


00:30:13.960 --> 00:30:16.640
like the sum of the orders of this,


00:30:16.640 --> 00:30:18.840
the customer is greater than $100,


00:30:18.840 --> 00:30:20.040
and that's a relation.


00:30:20.040 --> 00:30:22.240
- Yeah, and then you can create an index on that value.


00:30:22.240 --> 00:30:24.600
And you've been able to do that in raw SQL,


00:30:24.600 --> 00:30:26.800
or, you know, any amount of time,


00:30:26.800 --> 00:30:28.880
but that's now exposed at the ORM level,


00:30:28.880 --> 00:30:30.040
and that's nice.


00:30:30.040 --> 00:30:31.200
- That's awesome.


00:30:31.200 --> 00:30:33.480
Yeah, and for people who are doing reporting,


00:30:33.480 --> 00:30:37.200
or that kind of thing, it's, yeah, that's massive.


00:30:37.200 --> 00:30:39.480
- And then we've got, I don't know,


00:30:39.480 --> 00:30:41.440
a new memcache backend for the cache.


00:30:41.440 --> 00:30:44.480
We've got, you know, updating the API


00:30:44.480 --> 00:30:48.000
for using the admin for nice decorator API


00:30:48.000 --> 00:30:51.960
for creating various admin customizations.


00:30:51.960 --> 00:30:54.000
We've got themes in the admin.


00:30:54.000 --> 00:30:54.840
We're gonna ship a dark theme.


00:30:54.840 --> 00:30:56.400
- Yeah, that's a big one for,


00:30:56.400 --> 00:30:57.320
people will see right away,


00:30:57.320 --> 00:31:00.360
and it's to, 'cause the Django admin could use a refresh,


00:31:00.360 --> 00:31:02.400
and there's been all sorts of third-party ways


00:31:02.400 --> 00:31:07.160
to customize it, but now be built in a bit more.


00:31:07.160 --> 00:31:08.000
- That'll be cool.


00:31:08.000 --> 00:31:08.840
- There's all sorts.


00:31:08.840 --> 00:31:10.080
In the blog post for the author,


00:31:10.080 --> 00:31:11.920
I described it as a mess, but of new features,


00:31:11.920 --> 00:31:13.400
and that's exactly what it is.


00:31:13.400 --> 00:31:14.960
But what's nice is it's not,


00:31:14.960 --> 00:31:18.260
there aren't, apart from Async, which is coming,


00:31:18.260 --> 00:31:20.700
there aren't any new major features in Django, right?


00:31:20.700 --> 00:31:21.860
It's 15 years old.


00:31:21.860 --> 00:31:26.160
It's rich and mature and largely feature-complete,


00:31:26.160 --> 00:31:29.040
but each major release, each eight months,


00:31:29.040 --> 00:31:30.840
it always amazes me when we're drawing together


00:31:30.840 --> 00:31:32.680
the final release notes,


00:31:32.680 --> 00:31:36.040
how much depth and extra, like,


00:31:36.040 --> 00:31:38.880
substance there is in the features


00:31:38.880 --> 00:31:39.840
that we've managed to add,


00:31:39.840 --> 00:31:40.940
and that have been contributed


00:31:40.940 --> 00:31:42.560
over that eight-month period.


00:31:42.560 --> 00:31:43.760
- Yeah, that's fantastic.


00:31:43.760 --> 00:31:46.440
- I don't have anything to add, Carl.


00:31:46.440 --> 00:31:49.240
- Yeah, well, one thing I did wanna,


00:31:49.240 --> 00:31:52.000
one thing that comes to mind,


00:31:52.000 --> 00:31:53.240
so I feel like you're capturing


00:31:53.240 --> 00:31:56.560
much of the modern Python awesomeness.


00:31:56.560 --> 00:31:59.240
One other area that's, I think, interesting,


00:31:59.240 --> 00:32:01.080
I have no idea what your plans are around it,


00:32:01.080 --> 00:32:02.600
but maybe you could just give us your thoughts,


00:32:02.600 --> 00:32:06.280
is type hints and type annotations.


00:32:06.280 --> 00:32:07.100
- Yep.


00:32:07.100 --> 00:32:10.240
- That's difficult for us.


00:32:10.240 --> 00:32:11.840
- Carl, about that a little bit.


00:32:12.560 --> 00:32:14.400
- Yeah, I mean, that's difficult for us,


00:32:14.400 --> 00:32:16.880
because Django, I mean, if you take the old one,


00:32:16.880 --> 00:32:18.680
it's super dynamic.


00:32:18.680 --> 00:32:21.080
And there's an amazing project down at Django Stubs


00:32:21.080 --> 00:32:22.120
where they've got stub files,


00:32:22.120 --> 00:32:24.640
and they've got, you know, done a super job,


00:32:24.640 --> 00:32:26.000
and it really does work well.


00:32:26.000 --> 00:32:29.640
So if you load up VS Code or PyCharm these days,


00:32:29.640 --> 00:32:31.920
you get very good autocomplete


00:32:31.920 --> 00:32:34.760
around things like Django model field definitions.


00:32:34.760 --> 00:32:38.760
And that's all powered by Django Stubs.


00:32:38.760 --> 00:32:39.760
- Yeah.


00:32:39.760 --> 00:32:40.600
- But you also-- - But you probably have


00:32:40.600 --> 00:32:42.200
type hints underneath, right?


00:32:42.200 --> 00:32:43.520
- Yeah, yeah, it totally is.


00:32:43.520 --> 00:32:45.160
A year or so ago, there was some discussion


00:32:45.160 --> 00:32:47.280
about whether we would make those inline hints


00:32:47.280 --> 00:32:48.320
in Django itself.


00:32:48.320 --> 00:32:50.520
And the technical board at the time said no,


00:32:50.520 --> 00:32:55.360
because we need the typing technology


00:32:55.360 --> 00:32:58.800
to evolve a little bit further in Python itself


00:32:58.800 --> 00:33:01.480
before Django can jump on it,


00:33:01.480 --> 00:33:02.840
jump on and say, "Look, we endorse


00:33:02.840 --> 00:33:04.080
"this particular technology."


00:33:04.080 --> 00:33:06.440
There is various ways of doing it,


00:33:06.440 --> 00:33:08.960
and various type hinting, type checkers,


00:33:08.960 --> 00:33:12.040
and various, and so, say we favored mypy,


00:33:12.040 --> 00:33:13.560
which is obviously the endorsed one,


00:33:13.560 --> 00:33:14.760
but what about the others?


00:33:14.760 --> 00:33:16.680
You know, we can't support them all,


00:33:16.680 --> 00:33:18.800
and they might change-- - Hi, right,


00:33:18.800 --> 00:33:21.360
and all the different various initiatives, yeah.


00:33:21.360 --> 00:33:24.600
- Yeah, and we can't take it out once it's in.


00:33:24.600 --> 00:33:26.720
The thing with, the reason why people love Django


00:33:26.720 --> 00:33:27.800
is 'cause it's super stable.


00:33:27.800 --> 00:33:30.080
You know, you write a site five years later,


00:33:30.080 --> 00:33:32.440
you don't really have to do very much to keep it going.


00:33:32.440 --> 00:33:34.680
And so the technical board at the time said,


00:33:34.680 --> 00:33:38.040
"No, we're not gonna bring those type hints into Django,


00:33:38.040 --> 00:33:39.480
"but that will be reviewed.


00:33:39.480 --> 00:33:42.040
"You know, we'll look at it again in a little while's time."


00:33:42.040 --> 00:33:43.800
One thing I will say about typing,


00:33:43.800 --> 00:33:49.120
in all the peps it says, "Type hints are to remain optional.


00:33:49.120 --> 00:33:50.240
"They're not meant to be compulsory,


00:33:50.240 --> 00:33:52.200
"even by convention," right?


00:33:52.200 --> 00:33:55.000
And I do feel maintaining Django,


00:33:55.000 --> 00:33:57.080
a certain pressure to have them.


00:33:57.080 --> 00:34:01.280
I do worry that that optionality of type hints


00:34:01.280 --> 00:34:04.400
is perhaps undermined a little bit


00:34:04.400 --> 00:34:06.560
in the day-to-day development.


00:34:06.560 --> 00:34:07.400
I'm not sure.


00:34:07.400 --> 00:34:11.240
'Cause I also code in Swift, right?


00:34:11.240 --> 00:34:12.920
Which is a fully statically typed.


00:34:12.920 --> 00:34:15.760
- Yeah, Swift is pretty strong in its syntax.


00:34:15.760 --> 00:34:19.360
Like you can't even null out objects.


00:34:19.360 --> 00:34:21.240
Even if they could be, right?


00:34:21.240 --> 00:34:23.560
If they're not allowed to be optional explicit.


00:34:23.560 --> 00:34:24.800
There's a lot of interesting stuff


00:34:24.800 --> 00:34:25.760
happening in the Swift type.


00:34:25.760 --> 00:34:28.160
- Yeah, I mean, Swift is a fantastic language,


00:34:28.160 --> 00:34:29.880
but there's no option, right?


00:34:29.880 --> 00:34:33.800
It's type hints or it's type annotations all the way.


00:34:33.800 --> 00:34:35.160
And then when I come back to Python


00:34:35.160 --> 00:34:36.320
after a few hours of that, I'm like,


00:34:36.320 --> 00:34:38.320
"Oh, this is so great." - I know.


00:34:38.320 --> 00:34:39.960
You know, the thing that I really,


00:34:39.960 --> 00:34:41.440
the comparison that I make a lot


00:34:41.440 --> 00:34:43.480
is between TypeScript,


00:34:43.480 --> 00:34:46.240
which is type annotations for JavaScript,


00:34:46.240 --> 00:34:48.520
and Python type hints.


00:34:48.520 --> 00:34:50.600
And I always walk away from TypeScript


00:34:50.600 --> 00:34:53.040
feeling like, "Ah, that was way harder


00:34:53.040 --> 00:34:53.880
"than it should have been.


00:34:53.880 --> 00:34:55.720
"Why was it so frustrating and fighting me?"


00:34:55.720 --> 00:34:58.000
Whereas in Python, you might get some squigglies


00:34:58.000 --> 00:35:00.640
'cause you didn't quite define something just right,


00:35:00.640 --> 00:35:01.680
or it wasn't defined at all.


00:35:01.680 --> 00:35:03.240
But then it just, it carries on, right?


00:35:03.240 --> 00:35:05.640
Whereas things that are completely,


00:35:05.640 --> 00:35:08.560
it must work within this context,


00:35:08.560 --> 00:35:10.320
they can become challenging,


00:35:10.320 --> 00:35:13.120
especially the reason I bring up TypeScript


00:35:13.120 --> 00:35:16.240
is the stuff that it brings in


00:35:16.240 --> 00:35:18.360
is not necessarily typed, just like Python.


00:35:18.360 --> 00:35:20.000
Whereas Swift is end-to-end,


00:35:20.000 --> 00:35:21.980
it's all from scratch under that same system,


00:35:21.980 --> 00:35:22.920
so it's coherent.


00:35:22.920 --> 00:35:26.120
But bringing in, say, jQuery into TypeScript,


00:35:26.120 --> 00:35:27.760
like there's no TypeScript jQuery.


00:35:27.760 --> 00:35:29.480
I know there's like stubs you can put on and whatnot,


00:35:29.480 --> 00:35:33.480
but like that kind of stuff is more Python-like.


00:35:33.480 --> 00:35:35.440
And so I think it's pretty interesting.


00:35:35.440 --> 00:35:37.480
- Yeah, and Django's in that very much in that boat


00:35:37.480 --> 00:35:39.920
where it was never written with type-ins in mind.


00:35:39.920 --> 00:35:41.880
- Yeah, of course, they didn't exist.


00:35:41.880 --> 00:35:44.440
- If you look at Django stubs, it's quite awesome,


00:35:44.440 --> 00:35:47.400
but a lot of the things are like string or any.


00:35:47.400 --> 00:35:50.040
And it's like, but that's horrible, right?


00:35:50.040 --> 00:35:52.420
You don't want to write that every single time.


00:35:52.420 --> 00:35:55.120
So that's an issue.


00:35:55.120 --> 00:35:58.240
And then another thing I see, which I'm not sure about,


00:35:58.240 --> 00:36:00.600
sometimes they make a type like a model,


00:36:00.600 --> 00:36:02.840
the Django model admin, they make it a generic


00:36:02.840 --> 00:36:04.560
that takes the model type,


00:36:04.560 --> 00:36:06.800
which tells you what it's the admin of.


00:36:06.800 --> 00:36:08.920
And I remember, and I look at that.


00:36:08.920 --> 00:36:11.240
- You're like back to C++ templates or something, right?


00:36:11.240 --> 00:36:12.080
- Yeah, yeah, yeah, yeah.


00:36:12.080 --> 00:36:13.960
And I see where they're going with that.


00:36:13.960 --> 00:36:16.200
And it's amazing what they've been able to do there.


00:36:16.200 --> 00:36:20.320
But I remember coding Objective-C UI table view, say.


00:36:20.320 --> 00:36:23.500
And what you would always do is you get your object,


00:36:23.500 --> 00:36:26.520
your row class in from the UI table view delegate


00:36:26.520 --> 00:36:27.940
where you're getting a list of cells, right?


00:36:27.940 --> 00:36:29.840
So like a list of email messages.


00:36:29.840 --> 00:36:32.660
And you'd immediately cast it to the type you wanted


00:36:32.660 --> 00:36:34.480
so that you knew what you were dealing with.


00:36:34.480 --> 00:36:36.920
And in a way, when I get something back


00:36:36.920 --> 00:36:39.360
from a model admin method,


00:36:39.360 --> 00:36:43.660
I'm quite happy to write colon, model name,


00:36:43.660 --> 00:36:46.120
to tell the editor what it's meant to be,


00:36:46.120 --> 00:36:48.000
to tell the type checker what it's meant to be.


00:36:48.000 --> 00:36:51.360
And then for the rest of the method, I get the autocomplete.


00:36:51.360 --> 00:36:53.040
- And you probably don't put any more type hints


00:36:53.040 --> 00:36:54.560
'cause it's just now flows.


00:36:54.560 --> 00:36:59.320
And I agree, it's so good at like allowing you


00:36:59.320 --> 00:37:02.160
to generate code incredibly fast if the tool supports it.


00:37:03.420 --> 00:37:07.980
One quick comment or thought that before we move on,


00:37:07.980 --> 00:37:12.640
this having types around the ORM is really interesting


00:37:12.640 --> 00:37:17.140
'cause all the big ORMs seem to do the same basic flow.


00:37:17.140 --> 00:37:22.140
You know, I'm thinking, you know, Django ORM, SQLAlchemy,


00:37:22.140 --> 00:37:24.260
even NoSQL ones like Mongo Engine, which I use,


00:37:24.260 --> 00:37:27.180
they all have a class which has the columns


00:37:27.180 --> 00:37:30.020
defined as descriptors.


00:37:30.020 --> 00:37:32.620
So at definition time, they create the tables


00:37:32.620 --> 00:37:33.660
or the collections.


00:37:33.660 --> 00:37:36.940
And then at runtime, they become the scalar versions


00:37:36.940 --> 00:37:38.460
of the thing they say they are, right?


00:37:38.460 --> 00:37:41.060
An integer column is now actually an integer.


00:37:41.060 --> 00:37:44.020
So what I've done when I define the model class


00:37:44.020 --> 00:37:48.680
is say like name colon str equals string column.


00:37:48.680 --> 00:37:52.860
And so the Python thinks it's all the types


00:37:52.860 --> 00:37:55.220
are actually what I said, the primary types,


00:37:55.220 --> 00:37:58.860
like in the model, and then the underlying ORM


00:37:58.860 --> 00:38:01.060
can do what it needs to do.


00:38:01.060 --> 00:38:03.060
But, you know, the rest of my code is like,


00:38:03.060 --> 00:38:07.020
oh, that's a float column right there, or float field.


00:38:07.020 --> 00:38:08.340
That's been really helpful.


00:38:08.340 --> 00:38:10.860
I don't know, I haven't run into any problems doing that,


00:38:10.860 --> 00:38:12.980
but it's been pretty helpful.


00:38:12.980 --> 00:38:15.820
- Yeah, I mean, the thing that brings to mind,


00:38:15.820 --> 00:38:17.100
well, there's data classes, right?


00:38:17.100 --> 00:38:20.500
Which they brought in in 3.7 or 3.8.


00:38:20.500 --> 00:38:25.500
And then Pydantic is the other exciting thing.


00:38:25.500 --> 00:38:29.520
So you define a model, call it a model,


00:38:29.520 --> 00:38:33.220
with exactly this, it's like field name type


00:38:33.220 --> 00:38:36.540
with an annotation string or int or whatever.


00:38:36.540 --> 00:38:38.420
And that works really well.


00:38:38.420 --> 00:38:42.740
And I can imagine us generating Django ORM models


00:38:42.740 --> 00:38:44.320
from that kind of thing.


00:38:44.320 --> 00:38:48.420
But then you end up needing options.


00:38:48.420 --> 00:38:53.420
Like is it nullable or is it required?


00:38:53.420 --> 00:38:57.260
What validators does this field have?


00:38:57.260 --> 00:39:00.460
And then it starts, when you start to add validators,


00:39:00.460 --> 00:39:02.900
it starts to look almost like what we've got now.


00:39:02.900 --> 00:39:05.420
I mean, Pydantic's got one good advantage.


00:39:05.420 --> 00:39:07.660
In raw serialization speed, it's very fast.


00:39:07.660 --> 00:39:09.480
So that's something we can learn.


00:39:09.480 --> 00:39:12.000
But the short answer is, I don't know,


00:39:12.000 --> 00:39:13.460
but it's exciting times.


00:39:13.460 --> 00:39:15.220
- It's very exciting times.


00:39:15.220 --> 00:39:18.220
All right, let's talk really quickly


00:39:18.220 --> 00:39:22.820
about maintaining your content


00:39:22.820 --> 00:39:23.740
or things that you generate.


00:39:23.740 --> 00:39:26.980
Like you guys all write articles, books,


00:39:26.980 --> 00:39:29.040
do online stuff, even podcasts.


00:39:29.040 --> 00:39:32.300
So 3.2 is out.


00:39:32.300 --> 00:39:33.580
You know, what broke?


00:39:33.580 --> 00:39:36.340
Like real quickly, Will, maybe you wanna just talk about


00:39:36.340 --> 00:39:39.020
what you've been doing to, you know,


00:39:39.020 --> 00:39:40.540
- Yeah, there's a reason why there's


00:39:40.540 --> 00:39:42.620
very few up-to-date Django books


00:39:42.620 --> 00:39:45.780
because the release cycle of every nine months


00:39:45.780 --> 00:39:50.460
doesn't overlap with the traditional publisher cycle.


00:39:50.460 --> 00:39:52.480
So for me, I mean, I'm on version,


00:39:52.480 --> 00:39:54.240
I think five for most of the books.


00:39:54.240 --> 00:39:57.180
So I was on 1.10 or 1.11.


00:39:57.180 --> 00:39:59.700
So it's sort of like writing the book again.


00:39:59.700 --> 00:40:02.860
Every time I basically go through from scratch


00:40:02.860 --> 00:40:06.380
and 'cause all the code is linked to the text.


00:40:06.380 --> 00:40:08.060
Because I'm self-published, I can do all that.


00:40:08.060 --> 00:40:09.120
I have my flow down.


00:40:09.120 --> 00:40:12.180
So really it's, I have a kind of a list of new features


00:40:12.180 --> 00:40:13.340
I know that are in there.


00:40:13.340 --> 00:40:14.780
So I'll play around with them to make sure


00:40:14.780 --> 00:40:16.060
that things don't break.


00:40:16.060 --> 00:40:19.020
And then I'm constantly emailing with readers.


00:40:19.020 --> 00:40:21.960
So I have feedback on kind of what works and what doesn't.


00:40:21.960 --> 00:40:26.580
So half the new features are fixing things so it's smooth.


00:40:26.580 --> 00:40:29.620
And then half just making the text.


00:40:29.620 --> 00:40:31.460
So at this point, I feel pretty good


00:40:31.460 --> 00:40:33.140
about the flow of all three.


00:40:33.140 --> 00:40:36.120
And people will say, what about this?


00:40:36.120 --> 00:40:37.620
And maybe I can explain it a little bit better.


00:40:37.620 --> 00:40:41.340
I added, I mean, so for 3.1 added in the beginner's book,


00:40:41.340 --> 00:40:45.220
I really wanted to have proper deployments,


00:40:45.220 --> 00:40:48.340
but not go as deep as I do in the professional book.


00:40:48.340 --> 00:40:51.180
So I did introduce environment variables


00:40:51.180 --> 00:40:54.900
and showed, I think, a pretty elegant way


00:40:54.900 --> 00:40:58.860
to get environment variables and to have some lockdown


00:40:58.860 --> 00:41:00.420
for the deployed site.


00:41:00.420 --> 00:41:02.660
Whereas before in beginners, it was just


00:41:02.660 --> 00:41:04.900
sort of like the local version, which is pretty even,


00:41:04.900 --> 00:41:06.400
was what you deployed because it was more


00:41:06.400 --> 00:41:07.860
about getting something up.


00:41:07.860 --> 00:41:10.580
But I was able to introduce environment variables.


00:41:10.580 --> 00:41:12.940
We could talk about that more.


00:41:12.940 --> 00:41:15.020
There's a third-party package, that's great.


00:41:15.020 --> 00:41:17.540
So that's always the tension for me, is showing and telling.


00:41:17.540 --> 00:41:19.060
Like I want to explain everything,


00:41:19.060 --> 00:41:20.380
but I don't want to overwhelm people.


00:41:20.380 --> 00:41:24.700
And so that's part of the thing I have to think about for 3.1.


00:41:24.700 --> 00:41:25.420
So I don't know--


00:41:25.420 --> 00:41:28.020
>>I think also for Django being so stable,


00:41:28.020 --> 00:41:31.500
at least you can say all the stuff is still the same.


00:41:31.500 --> 00:41:33.340
There's just new features we haven't mentioned.


00:41:33.340 --> 00:41:36.860
Or a new way maybe is better, but as opposed to,


00:41:36.860 --> 00:41:38.220
this does not work anymore.


00:41:38.220 --> 00:41:39.820
>>Well, it's the difference between what


00:41:39.820 --> 00:41:42.540
trips the professional programmer and someone who's new.


00:41:42.540 --> 00:41:45.060
So for example, in 3.1, the pathlib


00:41:45.060 --> 00:41:48.340
was added when you create a new Django project.


00:41:48.340 --> 00:41:51.700
The settings.py file, which is the default settings,


00:41:51.700 --> 00:41:54.900
the way the routes are done is a little bit different.


00:41:54.900 --> 00:41:56.780
Like a two-minute stack overflow thing


00:41:56.780 --> 00:42:01.940
for someone who's used to using Django or breaking stuff.


00:42:01.940 --> 00:42:03.980
But that can completely derail a beginner.


00:42:03.980 --> 00:42:07.660
So there's usually a couple things like that.


00:42:07.660 --> 00:42:11.380
And so in that case, I have a dedicated blog post


00:42:11.380 --> 00:42:12.700
because I knew that was coming.


00:42:12.700 --> 00:42:15.420
Just this morning, I got more questions around it.


00:42:15.420 --> 00:42:17.780
So that's sort of the thing that's fun for me,


00:42:17.780 --> 00:42:21.380
is figuring out how do I be compassionate


00:42:21.380 --> 00:42:23.860
to the true beginners, but [INAUDIBLE]


00:42:23.860 --> 00:42:26.420
or more further along.


00:42:26.420 --> 00:42:27.340
>>Yeah, absolutely.


00:42:27.340 --> 00:42:28.540
Absolutely.


00:42:28.540 --> 00:42:31.500
>>Oh yeah, so it's a lot of work to do.


00:42:31.500 --> 00:42:34.940
I don't know how you could do it with traditional mobile.


00:42:34.940 --> 00:42:36.220
>>Yeah, I don't either.


00:42:36.220 --> 00:42:38.060
I was just dealing with some GitHub issues


00:42:38.060 --> 00:42:39.900
on some folks who are having trouble


00:42:39.900 --> 00:42:44.420
because a mismatch of pip upgrades and other packages.


00:42:44.420 --> 00:42:46.660
And it's just how it goes.


00:42:46.660 --> 00:42:49.340
>>Real quick, John from the live stream


00:42:49.340 --> 00:42:52.500
is really excited about the admin themes.


00:42:52.500 --> 00:42:56.660
So that's really cool that it's going to come along.


00:42:56.660 --> 00:42:59.340
>>Yeah, they add up to greatness.


00:42:59.340 --> 00:43:01.180
I think that's-- I love it.


00:43:01.180 --> 00:43:02.860
>>Yeah, that's a great, great thing.


00:43:02.860 --> 00:43:05.340
All right, let's spend some time--


00:43:05.340 --> 00:43:07.300
we talked a lot about deployment already,


00:43:07.300 --> 00:43:09.140
which is why I've been dancing around a bit.


00:43:09.140 --> 00:43:11.340
But let's go ahead and talk about deployment.


00:43:11.340 --> 00:43:14.580
So when I create a web application with Django


00:43:14.580 --> 00:43:17.580
or really honestly with Flask or anything,


00:43:17.580 --> 00:43:23.460
I've got a cool app, but web apps are not generally


00:43:23.460 --> 00:43:25.460
meant for the individual.


00:43:25.460 --> 00:43:27.660
They are meant to go on the internet and be amazing


00:43:27.660 --> 00:43:30.740
and connect things and allow other people to do stuff.


00:43:30.740 --> 00:43:32.140
And that's a huge gap, right?


00:43:32.140 --> 00:43:33.820
So maybe I've just learned how to do Django.


00:43:33.820 --> 00:43:35.700
You just talked about your beginner's book, Will.


00:43:35.700 --> 00:43:40.260
And I finally got that one page that wouldn't show


00:43:40.260 --> 00:43:43.300
and the database stopped crashing when I did that one query


00:43:43.300 --> 00:43:46.180
because I checked for none now and it's all good.


00:43:46.180 --> 00:43:49.180
Wait, I have to learn Linux and I have to become an admin?


00:43:49.180 --> 00:43:50.820
And you're like, what the heck just happened?


00:43:50.820 --> 00:43:53.980
So how do you guys approach that?


00:43:53.980 --> 00:43:56.020
What do you tell that person?


00:43:56.020 --> 00:44:01.500
>>Yeah, first of all, hand on shoulder, I feel you.


00:44:01.500 --> 00:44:07.140
Because it's just-- there's this massive deployment gap.


00:44:07.140 --> 00:44:08.980
We've got the Django tutorial.


00:44:08.980 --> 00:44:10.340
We've got the Django girls tutorial.


00:44:10.340 --> 00:44:12.220
We've got the Django REST framework tutorial.


00:44:12.220 --> 00:44:13.060
People have done those.


00:44:13.060 --> 00:44:13.940
They've got their app together.


00:44:13.940 --> 00:44:15.420
They've come up with some ideas.


00:44:15.420 --> 00:44:18.620
They've learned a teeny bit of JavaScript to make it a bit better.


00:44:18.620 --> 00:44:19.540
And now put it online.


00:44:19.540 --> 00:44:21.620
And exactly this, I've got to learn Linux.


00:44:21.620 --> 00:44:23.020
Oh my word.


00:44:23.020 --> 00:44:25.180
>>Well, yeah, among other things.


00:44:25.180 --> 00:44:26.220
I mean, it's two things, right?


00:44:26.220 --> 00:44:29.300
I think like when I think about this--


00:44:29.300 --> 00:44:31.060
well, there's two ways to think about it.


00:44:31.060 --> 00:44:34.900
One is making it environment-friendly, which we can talk about.


00:44:34.900 --> 00:44:39.460
And then there's the specifics of, do I do it on a VPS?


00:44:39.460 --> 00:44:42.060
Do I do it on a pass?


00:44:42.060 --> 00:44:43.420
So those are two separate things.


00:44:43.420 --> 00:44:45.540
The first one, I think we can generalize.


00:44:45.540 --> 00:44:48.540
And Django has some good notes on that.


00:44:48.540 --> 00:44:53.500
The second one is sort of a deep end of opinion, I guess.


00:44:53.500 --> 00:44:57.860
Though I'm in favor of-- like, I use Heroku.


00:44:57.860 --> 00:44:59.900
I'm a big fan of platforms.


00:44:59.900 --> 00:45:04.540
If somebody had something that hosted AWS for Django, I would use that.


00:45:04.540 --> 00:45:05.180
>>Well, yeah.


00:45:05.180 --> 00:45:08.180
I mean, so-- and I'm just going to throw it in here now.


00:45:08.180 --> 00:45:11.020
I'm working on an app for this exact problem.


00:45:11.020 --> 00:45:12.100
It's called Button.


00:45:12.100 --> 00:45:14.020
It's btn.dev.


00:45:14.020 --> 00:45:20.940
And the idea is to be able to spin up a small environment for this exact,


00:45:20.940 --> 00:45:27.780
I just want to get my app online use case without you having to become a sysadmin expert.


00:45:27.780 --> 00:45:28.500
>>Yeah.


00:45:28.500 --> 00:45:33.340
So the spectrum looks like, to me, pass, right?


00:45:33.340 --> 00:45:40.580
Platform as a service, which you said you like Heroku, and there's other options as well.


00:45:40.580 --> 00:45:44.020
Then I think maybe Button is even before that.


00:45:44.020 --> 00:45:46.020
I'm not entirely sure, like, in terms of--


00:45:46.020 --> 00:45:46.540
>>So, OK.


00:45:46.540 --> 00:45:48.620
So let me jump in.


00:45:48.620 --> 00:45:51.580
You've got the platforms, you've got Heroku, which is there at one end.


00:45:51.580 --> 00:45:57.380
And that's kind of like, they'll run your app, but they don't-- that's it, right?


00:45:57.380 --> 00:46:03.020
Or you can run another worker instance, but then you say to yourself, I just want to put a file online.


00:46:03.020 --> 00:46:04.460
It's like, well, how on earth do I do that?


00:46:04.460 --> 00:46:04.940
I can't.


00:46:04.940 --> 00:46:09.860
Or I want to put up a static website, so I've got to bring in, I don't know, Netlify, because another service.


00:46:09.860 --> 00:46:13.460
>>Yeah, Netlify is really nice for just pure static sites, actually.


00:46:13.460 --> 00:46:13.740
Yeah.


00:46:13.740 --> 00:46:14.100
>>It is.


00:46:14.100 --> 00:46:14.860
It's awesome.


00:46:14.860 --> 00:46:18.980
But then all of a sudden, you're running two services, and then you want to do some log analysis.


00:46:18.980 --> 00:46:22.420
So you've got to bring in-- it's like, oh, hang on, I've got three services now running.


00:46:22.420 --> 00:46:25.060
And it gets a bit out of hand.


00:46:25.060 --> 00:46:27.900
So then on the other hand, you've got AWS.


00:46:27.900 --> 00:46:30.940
And you go to AWS, and it's like, oh, my word.


00:46:30.940 --> 00:46:32.500
>>It's the paradox of choice.


00:46:32.500 --> 00:46:34.140
It's just like that and Azure.


00:46:34.140 --> 00:46:38.780
I mean, they're both incredibly powerful, but it's just like, oh, my goodness.


00:46:38.780 --> 00:46:40.020
Look at this admin dashboard.


00:46:40.020 --> 00:46:43.380
Like, there's this huge thing with 50 choices.


00:46:43.380 --> 00:46:45.540
I go into one, and it expands into 20.


00:46:45.540 --> 00:46:47.380
And then I need to figure out the right one of those 20.


00:46:47.380 --> 00:46:49.180
It's just-- it's mind-boggling.


00:46:49.180 --> 00:46:50.460
>>Yeah, yeah, exactly.


00:46:50.460 --> 00:46:57.780
And so where Button fits in that is it's on AWS, but it provides a simplified environment.


00:46:57.780 --> 00:46:58.740
Because it's part tool.


00:46:58.740 --> 00:47:02.740
It's a tool to do it, but also a guide that says, look, this is how you should deploy.


00:47:02.740 --> 00:47:07.860
So the app puts together the environment for how you should deploy your Django app.


00:47:07.860 --> 00:47:14.060
Or you can do any app, but I begin with Django, because that's where obviously what I know.


00:47:14.060 --> 00:47:23.780
And then the difference between-- well, why would I use that instead of a platform as


00:47:23.780 --> 00:47:25.180
a service like Heroku?


00:47:25.180 --> 00:47:29.780
Well, because if you go out of it, it's just AWS.


00:47:29.780 --> 00:47:32.580
And so you can go and move on to other things.


00:47:32.580 --> 00:47:36.900
>>When you do go closer to-- now you are kind of Google or whatever.


00:47:36.900 --> 00:47:39.660
But I mean, obviously, you've got growth not far down that road.


00:47:39.660 --> 00:47:43.060
But your little ways you can go, oh, we actually need to do this other thing.


00:47:43.060 --> 00:47:44.060
>>Yeah.


00:47:44.060 --> 00:47:45.060
And so that's what I'm aiming for.


00:47:45.060 --> 00:47:47.460
And that's launching very soon.


00:47:47.460 --> 00:47:50.620
It'll be early access by the middle of February.


00:47:50.620 --> 00:47:53.500
You know, beta by end of the quarter.


00:47:53.500 --> 00:47:58.100
And then, you know, what I call version-- what ends the beta, I don't know, end of the


00:47:58.100 --> 00:47:59.100
year, I would imagine.


00:47:59.100 --> 00:48:00.100
>>Yeah, yeah.


00:48:00.100 --> 00:48:01.740
That sounds really cool.


00:48:01.740 --> 00:48:04.420
We'll definitely link to it in the show notes.


00:48:04.420 --> 00:48:10.060
When I was pausing there, I said, OK, well, on one end, we have PaaS like Heroku and other


00:48:10.060 --> 00:48:12.060
platform as a service options.


00:48:12.060 --> 00:48:13.180
What is the other end?


00:48:13.180 --> 00:48:16.380
Is the other end Linux virtual machines?


00:48:16.380 --> 00:48:18.220
Or is the other end Kubernetes clusters?


00:48:18.220 --> 00:48:20.380
>>No, yeah, it's Kubernetes clusters.


00:48:20.380 --> 00:48:23.780
It's well beyond virtual machines, right?


00:48:23.780 --> 00:48:27.220
To spin up a virtual machine is not a problem.


00:48:27.220 --> 00:48:29.480
The problem is that you get a bare OS.


00:48:29.480 --> 00:48:33.700
And then you've got to do all the app to get installed to turn it into something you can


00:48:33.700 --> 00:48:35.060
deploy on, right?


00:48:35.060 --> 00:48:36.620
And then you do that once.


00:48:36.620 --> 00:48:39.540
And then the second problem is that six months later, you need to upgrade it.


00:48:39.540 --> 00:48:41.460
And you've got to replace that VM.


00:48:41.460 --> 00:48:42.460
So that's very difficult.


00:48:42.460 --> 00:48:47.140
And I think that's what leads people into this kind of world of containers.


00:48:47.140 --> 00:48:53.220
And then into containers, it's like, oh, well, I need an orchestration platform to-- and


00:48:53.220 --> 00:48:59.260
that's-- you know, there are people who make a career doing that.


00:48:59.260 --> 00:49:00.260
You can't expect to do that.


00:49:00.260 --> 00:49:01.580
>>Yeah, I agree with Carlton.


00:49:01.580 --> 00:49:06.060
I will say it depends slightly in that, like, so in my professionals book, I show how to


00:49:06.060 --> 00:49:07.060
use Docker.


00:49:07.060 --> 00:49:14.220
And Docker is for a smaller site, I think actually, you can put your containers online.


00:49:14.220 --> 00:49:18.500
So you can-- a lot of different flow is actually quite nice.


00:49:18.500 --> 00:49:23.420
But I agree with Carlton's broader point about, you know, that is and all the rest.


00:49:23.420 --> 00:49:25.820
>>So I feel like-- sorry, Carlton.


00:49:25.820 --> 00:49:31.220
I feel like is the goal I'm setting up a Kubernetes cluster, and I'm running the data layer, and


00:49:31.220 --> 00:49:32.500
I'm running the caching layer.


00:49:32.500 --> 00:49:37.740
And if you're managing that whole thing in a cluster, you're at the far right end of


00:49:37.740 --> 00:49:39.660
the most complicated.


00:49:39.660 --> 00:49:44.900
But if I'm going to deploy to a hosted Kubernetes container and consume a database as a service


00:49:44.900 --> 00:49:49.300
in a caching tier as a service, then it's-- then it starts to fall back to, well, I just


00:49:49.300 --> 00:49:52.980
get my container to run and plug in these connection strings, and we're good to go.


00:49:52.980 --> 00:49:55.860
I think there's-- it can kind of live on both sides, honestly.


00:49:55.860 --> 00:50:00.620
>>Yeah, I mean, and there's different approaches and different sweet spots for each individual.


00:50:00.620 --> 00:50:05.540
The difference for me is you can containerize your application and run it up.


00:50:05.540 --> 00:50:07.500
But where do you container that to?


00:50:07.500 --> 00:50:08.980
Where do you run that container?


00:50:08.980 --> 00:50:13.900
Is that on a set of VMs, which you provisioned yourself and put a container management system


00:50:13.900 --> 00:50:15.220
on like Kubernetes?


00:50:15.220 --> 00:50:17.180
Or is that on somebody else?


00:50:17.180 --> 00:50:19.580
Like, is it basically service, like Cloud Run?


00:50:19.580 --> 00:50:24.020
Cloud Run takes your container and runs it, and you don't know anything about where it's


00:50:24.020 --> 00:50:25.020
running.


00:50:25.020 --> 00:50:28.500
So that's more like a platform as a service again.


00:50:28.500 --> 00:50:29.500
>>Yeah, it is.


00:50:29.500 --> 00:50:30.660
It falls back in that.


00:50:30.660 --> 00:50:32.660
So Will said he's a fan of Heroku.


00:50:32.660 --> 00:50:34.380
Carlton, let me ask you this question.


00:50:34.380 --> 00:50:40.500
If you were writing an application in Django that was expected to get 5 million data-driven,


00:50:40.500 --> 00:50:45.620
like proper requests, not for CSS and whatnot, but proper requests a month, how would you


00:50:45.620 --> 00:50:47.220
deploy it right now?


00:50:47.220 --> 00:50:56.060
>>I would deploy it on a pretty big VM with as many process workers as I need.


00:50:56.060 --> 00:51:02.060
So I'd put stick Nginx as my front end, perhaps I'd probably use something like application


00:51:02.060 --> 00:51:06.940
load balancer in front of it, one of these things that AWS will provide or Azure have


00:51:06.940 --> 00:51:08.780
got their equivalent load balancer.


00:51:08.780 --> 00:51:11.620
Then I'd have my Nginx, which is serving my static files.


00:51:11.620 --> 00:51:12.620
Behind that, I'd probably have-


00:51:12.620 --> 00:51:14.380
>>It's also doing SSL, for example, right?


00:51:14.380 --> 00:51:15.380
Your less than reference.


00:51:15.380 --> 00:51:16.380
>>Yeah, yeah.


00:51:16.380 --> 00:51:20.300
And they're handling all of the certificate renewals and all of that kind of thing, which


00:51:20.300 --> 00:51:22.820
is probably worth the money because it only takes you a few minutes.


00:51:22.820 --> 00:51:28.700
But you forget and then your site goes down and just handle that stuff off.


00:51:28.700 --> 00:51:30.900
So I'd put that on a nice size VM.


00:51:30.900 --> 00:51:37.500
I'd have three, four, five Gunicorn workers serving the application instances, load balanced


00:51:37.500 --> 00:51:39.660
behind Nginx.


00:51:39.660 --> 00:51:45.460
And then I'd have Postgres on a decent size RDS, which is a managed database service behind


00:51:45.460 --> 00:51:46.460
it.


00:51:46.460 --> 00:51:51.500
And I would, as a first preference, I would scale up the VM and I would scale up the RDS


00:51:51.500 --> 00:51:52.500
rather than-


00:51:52.500 --> 00:51:53.980
>>Way before you scale out.


00:51:53.980 --> 00:51:55.540
>>Yeah, way before scale out.


00:51:55.540 --> 00:51:56.540
>>Yeah, I agree.


00:51:56.540 --> 00:51:58.980
>>Yeah, if you get a few money at it, then do it.


00:51:58.980 --> 00:51:59.980
>>Yeah.


00:51:59.980 --> 00:52:04.380
As soon as you have them scaled out, it gets tricky, right?


00:52:04.380 --> 00:52:06.380
It takes you up a notch in that DevOps story.


00:52:06.380 --> 00:52:07.380
>>Yeah.


00:52:07.380 --> 00:52:12.940
And then you need, at that point, you're hiring an extra hand just to manage the ops, an extra


00:52:12.940 --> 00:52:14.180
hand to manage the ops.


00:52:14.180 --> 00:52:18.340
And it's like, well, what was the revenue of the application that justified the salary


00:52:18.340 --> 00:52:20.340
and the social security of that extra hand?


00:52:20.340 --> 00:52:24.380
>>Yeah, I mean, maybe you're like, well, I don't really want to pay for that larger VM


00:52:24.380 --> 00:52:27.940
that's $80 a month instead of $10 a month.


00:52:27.940 --> 00:52:34.940
But if the alternative is now we spend human hours on making three $10 VMs run, it's so


00:52:34.940 --> 00:52:40.620
easy for businesses to become pennywise pound foolish around these kinds of things, right?


00:52:40.620 --> 00:52:43.980
It's just like, well, we can't get you a new monitor, a new keyboard.


00:52:43.980 --> 00:52:44.980
Really?


00:52:44.980 --> 00:52:48.900
You pay me like $80,000 a year and you won't give me a new keyboard to be more productive?


00:52:48.900 --> 00:52:51.940
Or I feel like that's the deployment equivalent of that.


00:52:51.940 --> 00:52:54.220
>>Yeah, no, it's penny pinching for no reason.


00:52:54.220 --> 00:52:56.340
I mean, the other great example is Sentry, right?


00:52:56.340 --> 00:53:00.820
So Sentry is your kind of, you log all your errors to it, send your exceptions to it,


00:53:00.820 --> 00:53:03.180
and it gives you great stack traces and it links you back to GitHub.


00:53:03.180 --> 00:53:04.180
It's awesome.


00:53:04.180 --> 00:53:05.180
Why would you not have this?


00:53:05.180 --> 00:53:09.700
And then you're on the free account, you know, it gives you 5,000 events a month or something.


00:53:09.700 --> 00:53:13.820
And it's like, oh, we need 30 bucks to get onto the like the million events a month.


00:53:13.820 --> 00:53:15.980
And the manager's like, no, you can't have paid Sentry.


00:53:15.980 --> 00:53:16.980
You're like, what?


00:53:16.980 --> 00:53:17.980
What are you talking about?


00:53:17.980 --> 00:53:18.980
>>Exactly.


00:53:18.980 --> 00:53:22.540
>>You're like, well, we can't log that event because of Sentry.


00:53:22.540 --> 00:53:24.020
And then you're blind.


00:53:24.020 --> 00:53:27.540
And then your app goes down and you spend four hours trying to work out what it is.


00:53:27.540 --> 00:53:28.540
What are you losing business?


00:53:28.540 --> 00:53:30.820
Like that was 30 bucks a month for Sentry.


00:53:30.820 --> 00:53:31.820
Just pay it.


00:53:31.820 --> 00:53:36.180
>>But I think it depends if your manager has felt that pain as an individual contributor


00:53:36.180 --> 00:53:37.500
themselves, right?


00:53:37.500 --> 00:53:42.940
Because if they haven't, then yeah, stop complaining, developer, you know?


00:53:42.940 --> 00:53:44.260
>>Yeah, yeah, exactly.


00:53:44.420 --> 00:53:45.420
>>Yeah, you should.


00:53:45.420 --> 00:53:50.340
I always thought, I mean, at Quizlet, which is now like half of all high school students,


00:53:50.340 --> 00:53:55.700
we had we had a joint, which I was still around their hosting company, but we were having


00:53:55.700 --> 00:53:56.700
scaling issues.


00:53:56.700 --> 00:53:59.420
They came in and we had the whole team CTO, which was great.


00:53:59.420 --> 00:54:04.740
And at the end of the day, they were just like, you need bigger hardware.


00:54:04.740 --> 00:54:09.960
You know, if you can get more, you know, as a business person, if you can throw money


00:54:09.960 --> 00:54:14.020
at a scaling problem, like, yeah, that's the easiest money you've spent.


00:54:14.020 --> 00:54:15.020
>>Yeah.


00:54:15.020 --> 00:54:22.660
You know, one thing, what I'm doing right now, Carlton, is I'm running NGINX on Ubuntu,


00:54:22.660 --> 00:54:24.500
but I'm using MicroWSGI.


00:54:24.500 --> 00:54:31.500
And I came across this, you know, although as I'm starting to think about the ASGI stuff,


00:54:31.500 --> 00:54:37.780
you know, Gunicorn, Genicorn and like UVicorn worker processes is starting to look like


00:54:37.780 --> 00:54:39.380
a really awesome thing.


00:54:39.380 --> 00:54:43.860
But what I wanted to point out is there's this great article by the Bloomberg tech folks


00:54:43.860 --> 00:54:48.220
talking about configuring MicroWSGI for production.


00:54:48.220 --> 00:54:51.900
And man, do they have a bunch of good little tips of like, well, here's all these things.


00:54:51.900 --> 00:54:57.380
But oh, did you know if you turn on like enable threads versus not, or if you set single interpreter


00:54:57.380 --> 00:55:02.140
mode to true, you automatically get better performance because it was configured to potentially


00:55:02.140 --> 00:55:05.420
run like Python 3.7 and 3.8 at the same time.


00:55:05.420 --> 00:55:07.940
And you're never going to do that in one process, most likely.


00:55:07.940 --> 00:55:14.540
And there's just all these really fantastic settings and like vacuum and whatnot, to clean


00:55:14.540 --> 00:55:15.900
up sockets and whatnot.


00:55:15.900 --> 00:55:20.220
So people if they're running MicroWSGI in production, they should absolutely check that


00:55:20.220 --> 00:55:21.220
out.


00:55:21.220 --> 00:55:24.660
That's a really, I redid a bunch of the way I was doing things after reading that.


00:55:24.660 --> 00:55:27.620
Just scroll to the image at the top, if you would please, Michael.


00:55:27.620 --> 00:55:28.620
Sure.


00:55:28.620 --> 00:55:29.620
Yeah, yeah.


00:55:29.620 --> 00:55:32.980
But like, yeah, so that looks almost exactly how I deploy.


00:55:32.980 --> 00:55:37.660
Like NGINX, front of a worker process, you know, that's running your Python applications


00:55:37.660 --> 00:55:40.020
and you know, talking to your database.


00:55:40.020 --> 00:55:41.020
Yeah, exactly.


00:55:41.020 --> 00:55:42.020
It's pretty standard.


00:55:42.020 --> 00:55:48.500
I got memcached in there, so I'd have Redis instead of memcached, but same deal.


00:55:48.500 --> 00:55:49.980
Yeah.


00:55:49.980 --> 00:55:52.380
Let me ask you, go ahead Will.


00:55:52.380 --> 00:55:58.580
There's a comment about is does EC2 sit between a VPS and, and Kubernetes?


00:55:58.580 --> 00:55:59.580
Yeah.


00:55:59.580 --> 00:56:01.620
Since you're AWS expert.


00:56:01.620 --> 00:56:10.660
Okay, well, I don't know about expert, but I, so on AWS, like you, this is, this is what


00:56:10.660 --> 00:56:11.660
I haven't found in AWS.


00:56:11.660 --> 00:56:16.260
Like, I would love to love their light sale product, but it just seems totally uncared


00:56:16.260 --> 00:56:18.540
where they kind of manage the cluster all for you.


00:56:18.540 --> 00:56:22.740
But on the, I can't even remember what the cluster service is called, but you have to


00:56:22.740 --> 00:56:25.940
provision the EC2 instances.


00:56:25.940 --> 00:56:26.980
And you can do it quite easy.


00:56:26.980 --> 00:56:31.580
It's not hard to do, but you have to spin those up and they're kind of your responsibility.


00:56:31.580 --> 00:56:36.060
And then it will run the cluster service on top of it, the Kubernetes on top of it.


00:56:36.060 --> 00:56:39.700
And then you deploy your containers in there.


00:56:39.700 --> 00:56:44.660
This is where something like Cloud Run is a bit easier because you don't have that layer


00:56:44.660 --> 00:56:47.620
of I'm provisioning the underlying instances myself.


00:56:47.620 --> 00:56:52.860
And you have to choose the size of them and you can scale them up easily enough, but you


00:56:52.860 --> 00:56:59.140
know, it's, it's, it's non-trivial to set up a cluster on AWS.


00:56:59.140 --> 00:57:00.420
That's always been my feeling as well.


00:57:00.420 --> 00:57:04.300
So I feel like you're sort of committed to their hosted services.


00:57:04.300 --> 00:57:08.900
And if for some reason you don't want to use them, it's that the step is not a tiny bit


00:57:08.900 --> 00:57:12.980
more, it's a bigger, a much bigger step to like, try to rework that.


00:57:12.980 --> 00:57:13.980
Yeah.


00:57:13.980 --> 00:57:16.380
I mean, the example is right.


00:57:16.380 --> 00:57:21.260
You can run your own Postgres on EC2 instances when you know you can provision the disks


00:57:21.260 --> 00:57:25.500
and you can do all that rather than RDS.


00:57:25.500 --> 00:57:29.380
And for me, I'm like, okay, if you've got a very specialist use case, then yeah, do


00:57:29.380 --> 00:57:30.380
that.


00:57:30.380 --> 00:57:31.380
Postgres is great.


00:57:31.380 --> 00:57:34.860
Just use RDS, just use the hosted service because again, you're saving money and yet


00:57:34.860 --> 00:57:41.420
it's a bit more, it's a bit more expensive per hour, but not as expensive as you, your


00:57:41.420 --> 00:57:43.420
time, your life force.


00:57:43.420 --> 00:57:44.420
Yeah.


00:57:44.420 --> 00:57:46.020
Well, I think also it depends, right?


00:57:46.020 --> 00:57:53.740
Are you one single person who is building up an idea and you have zero revenue and you're


00:57:53.740 --> 00:57:57.580
just trying to do this for two hours a week to see if you can get a little tiny bit of


00:57:57.580 --> 00:57:58.580
traction?


00:57:58.580 --> 00:57:59.580
Yeah.


00:57:59.580 --> 00:58:04.220
Maybe, maybe it is worth an extra five hours versus I have actual money coming in the door


00:58:04.220 --> 00:58:06.300
and I'm trading off building this feature or that feature.


00:58:06.300 --> 00:58:08.420
Like those are really very different contexts.


00:58:08.420 --> 00:58:09.420
Yeah.


00:58:09.420 --> 00:58:15.300
And also, also though you get yourself a Raspberry Pi and you can install NGINX on it and Postgres


00:58:15.300 --> 00:58:16.300
on it.


00:58:16.300 --> 00:58:17.940
And no, but you can run all those, right?


00:58:17.940 --> 00:58:22.900
And you can do it locally and you can bet you can run a Apache bench against it and


00:58:22.900 --> 00:58:25.240
you, it will serve plenty.


00:58:25.240 --> 00:58:29.680
So you can get not the, but yeah, yeah, sure.


00:58:29.680 --> 00:58:31.940
But you can get, you can run Postgres is my point.


00:58:31.940 --> 00:58:36.680
You don't need RDS to run a small Postgres.


00:58:36.680 --> 00:58:39.560
If you're running a slightly bigger one, then yeah, use RDS.


00:58:39.560 --> 00:58:45.080
And then if you're a specialist and you really need to customize your Postgres somehow, then


00:58:45.080 --> 00:58:46.080
okay.


00:58:46.080 --> 00:58:47.080
Yeah.


00:58:47.080 --> 00:58:50.200
You know, spin up the EC2, install Postgres on it and customize it to your heart's content.


00:58:50.200 --> 00:58:55.560
But that's well beyond my skill level and you know, yeah.


00:58:55.560 --> 00:58:58.040
This is why they have hundreds or thousands of employees, right?


00:58:58.040 --> 00:59:00.720
Like when people say, why do the big companies do that?


00:59:00.720 --> 00:59:04.960
It's like, well, why does Instagram have a thousand, whatever, thousand engineers when


00:59:04.960 --> 00:59:10.160
Carlton, you and I could spin up a, you know, a prototype relatively quickly.


00:59:10.160 --> 00:59:12.500
It's like, because we're not dealing with the traffic they are.


00:59:12.500 --> 00:59:18.160
And so it just gets exponentially harder, which is why you need a lot of people for


00:59:18.160 --> 00:59:19.160
all these issues.


00:59:19.160 --> 00:59:20.160
Yeah, absolutely.


00:59:20.160 --> 00:59:28.320
Will, you mentioned something really interesting there that I would like to just touch on for


00:59:28.320 --> 00:59:29.320
a moment.


00:59:29.320 --> 00:59:30.320
Okay.


00:59:30.320 --> 00:59:31.320
We're getting short on time.


00:59:31.320 --> 00:59:33.440
You said you could run SQLite.


00:59:33.440 --> 00:59:37.720
Oh, well, so that Carlton has a good story about SQLite.


00:59:37.720 --> 00:59:42.160
I mean, about how it's so generally people say, well, you can't use it.


00:59:42.160 --> 00:59:43.600
You shouldn't use it at all.


00:59:43.600 --> 00:59:46.720
But there are some cases where that's not the case.


00:59:46.720 --> 00:59:51.040
I mean, if it's a read heavy application, you can get away with it.


00:59:51.040 --> 00:59:53.440
Simon Wilson's doing a lot with data set.


00:59:53.440 --> 00:59:54.440
Yeah, yeah.


00:59:54.440 --> 00:59:56.200
I just had him on the show.


00:59:56.200 --> 00:59:58.200
His episode just came out this week, actually.


00:59:58.200 --> 00:59:59.200
Yeah.


00:59:59.200 --> 01:00:00.200
So he's great.


01:00:00.200 --> 01:00:01.200
And that is such a cool project.


01:00:01.200 --> 01:00:05.720
I feel like that is actually an undersold story for the beginners, right?


01:00:05.720 --> 01:00:11.760
Because deployment of web application often means deployment of web application plus database


01:00:11.760 --> 01:00:20.000
server plus backups of database server plus like all the sudden it goes from 20% to 90%


01:00:20.000 --> 01:00:22.320
hard or whatever, right?


01:00:22.320 --> 01:00:26.160
Or you go to hosted and you're like, okay, well, I still got to back up that thing potentially.


01:00:26.160 --> 01:00:29.080
And there's just, you've got potential migrations.


01:00:29.080 --> 01:00:30.080
I don't know.


01:00:30.080 --> 01:00:31.080
There's a lot of stuff going on.


01:00:31.080 --> 01:00:35.880
And if you can say, well, until you actually get much traffic, you can just say, here's


01:00:35.880 --> 01:00:40.160
the DB file and the SQLite connection on the one machine that I have.


01:00:40.160 --> 01:00:41.640
And you back up that file every now and then.


01:00:41.640 --> 01:00:43.400
That might be a good story.


01:00:43.400 --> 01:00:46.800
If the alternative is it's too much for me to get my app out.


01:00:46.800 --> 01:00:48.360
Yeah, yeah, no, definitely.


01:00:48.360 --> 01:00:53.480
Especially if it's a blog or a content site like a catalog where it's all read only and


01:00:53.480 --> 01:00:57.200
you know, maybe you're using the admin to manage the content on it.


01:00:57.200 --> 01:01:00.880
If it's only one person using the admin, you're not going to have concurrent rights, which


01:01:00.880 --> 01:01:03.240
is the thing about SQLite.


01:01:03.240 --> 01:01:04.800
And so it's never going to be an issue.


01:01:04.800 --> 01:01:06.040
And it is fast.


01:01:06.040 --> 01:01:08.780
It's read only workloads.


01:01:08.780 --> 01:01:09.780
It's fast.


01:01:09.780 --> 01:01:10.780
It's fast enough.


01:01:10.780 --> 01:01:11.780
It's very fast.


01:01:11.780 --> 01:01:12.780
Yeah.


01:01:12.780 --> 01:01:17.000
And then it's got there's no server for people who don't understand or are not totally aware.


01:01:17.000 --> 01:01:18.160
Like it runs.


01:01:18.160 --> 01:01:21.000
It comes with Python and it runs in process.


01:01:21.000 --> 01:01:24.040
There's no other server to set up and connect to.


01:01:24.040 --> 01:01:25.040
Yeah.


01:01:25.040 --> 01:01:26.040
Yeah.


01:01:26.040 --> 01:01:30.440
So Carlton correct me on that at one point, because I was saying, oh, yeah, no SQLite.


01:01:30.440 --> 01:01:36.400
And he was so I have to give credit to Carlton for there are some instances where it can work.


01:01:36.400 --> 01:01:38.600
Here's the secret about SQLite.


01:01:38.600 --> 01:01:44.780
It's got a writer headlock by a while mode, which means that actually you've got a good


01:01:44.780 --> 01:01:48.640
chance of being able to do kind of concurrent rights too.


01:01:48.640 --> 01:01:53.080
And if you know that Django's ORM has got a retry value, which if you set that, you


01:01:53.080 --> 01:01:58.840
know, you know, a little bit higher, if it if it gets database locked, it will try again


01:01:58.840 --> 01:01:59.840
in a second.


01:01:59.840 --> 01:02:03.420
And then, you know, you can go quite a long way enabling these things.


01:02:03.420 --> 01:02:08.380
And then when you finally in production actually get a database was locked error, then you


01:02:08.380 --> 01:02:10.780
could think, you know what, I think it's time.


01:02:10.780 --> 01:02:13.020
Yeah, yeah.


01:02:13.020 --> 01:02:15.340
In my world, I'm running MongoDB as the database.


01:02:15.340 --> 01:02:18.760
And it, it doesn't make sense to consider running that on SQLite.


01:02:18.760 --> 01:02:23.060
But I can remember back when I first started deploying it, like, okay, well, I got to learn


01:02:23.060 --> 01:02:26.840
Linux, I got to learn Nginx, I got to learn micro WSGI, like, okay, what other deployment


01:02:26.840 --> 01:02:30.760
like, how do I have to learn running my database on these things?


01:02:30.760 --> 01:02:35.060
There's just, there was a lot and I can definitely see if you could say, well, here's an intermediate


01:02:35.060 --> 01:02:37.480
step to get it out and get it going.


01:02:37.480 --> 01:02:43.280
And then you just change the connection string at some point over to a big separate server.


01:02:43.280 --> 01:02:46.640
You know, I think that's a really good path.


01:02:46.640 --> 01:02:51.760
It's a little bit like, you know, raw SQL versus Django models.


01:02:51.760 --> 01:02:56.520
This is timely, because I've had a thread emailing with a reader who doesn't quite was


01:02:56.520 --> 01:02:57.520
has something in mind.


01:02:57.520 --> 01:03:01.360
And he's like, I modeled it all out, the scheme all out in SQL.


01:03:01.360 --> 01:03:07.060
And you know, it's like, SQL is easy to learn the basics and really hard to scale.


01:03:07.060 --> 01:03:13.540
And while Django lets you write SQL, you really, really, really should resist doing that unless


01:03:13.540 --> 01:03:17.940
you're way better programmer than I am.


01:03:17.940 --> 01:03:20.060
Whereas before you would have to learn tons of stuff.


01:03:20.060 --> 01:03:24.220
Same thing with deployment, you can get a lot of the way there by trusting someone who


01:03:24.220 --> 01:03:28.220
says until you need it, don't bother.


01:03:28.220 --> 01:03:32.280
The same thing with database stuff, like, okay, you know, do some basic SQL, understand


01:03:32.280 --> 01:03:35.580
a little bit of the relations, but that's the power of the Django ORM is that it will


01:03:35.580 --> 01:03:37.460
handle so much of this for you.


01:03:37.460 --> 01:03:41.820
And if you think you need to go custom, unless you know, if you have any doubts, you shouldn't


01:03:41.820 --> 01:03:42.820
do it.


01:03:42.820 --> 01:03:43.820
Yeah.


01:03:43.820 --> 01:03:48.500
And the migration side, that's a huge part of a challenge if you were maintaining it


01:03:48.500 --> 01:03:49.500
yourself.


01:03:49.500 --> 01:03:54.980
Yeah, I mean, I was, you know, Andrew, Andrew was responsible for the work, doing most of


01:03:54.980 --> 01:03:56.540
that a lot of the async stuff now.


01:03:56.540 --> 01:03:57.540
Nice.


01:03:57.540 --> 01:04:00.060
All right, guys, we're getting short on time, but I do want to just really quickly cover


01:04:00.060 --> 01:04:02.140
one more thing.


01:04:02.140 --> 01:04:05.020
Server's up and running, feels like it works.


01:04:05.020 --> 01:04:06.020
I watched it all day.


01:04:06.020 --> 01:04:08.060
It was fine.


01:04:08.060 --> 01:04:10.060
I want to walk away from my desk.


01:04:10.060 --> 01:04:14.620
I want to know that it's probably still fine.


01:04:14.620 --> 01:04:17.580
And to me, like Carlton, you already talked about one thing.


01:04:17.580 --> 01:04:21.220
There's some really great monitoring services that you integrate at the API level.


01:04:21.220 --> 01:04:26.780
Like you plug in as a library to your code, Sentry being one of them.


01:04:26.780 --> 01:04:27.780
They're really great.


01:04:27.780 --> 01:04:29.020
They sponsored the show for a while.


01:04:29.020 --> 01:04:30.020
So thanks for that as well.


01:04:30.020 --> 01:04:31.660
But I use Sentry on.


01:04:31.660 --> 01:04:32.740
Yeah, they're great.


01:04:32.740 --> 01:04:38.340
And I've got Sentry running on my apps and every now and then I'll get an email and a


01:04:38.340 --> 01:04:43.580
lot of at this point, when I first integrated that type of service, I got a lot of, oh,


01:04:43.580 --> 01:04:44.580
I didn't know that was happening.


01:04:44.580 --> 01:04:45.580
Oh, crap.


01:04:45.580 --> 01:04:46.580
I'm gonna have to fix that.


01:04:46.580 --> 01:04:51.380
Lesson is level of logging and stuff, right?


01:04:51.380 --> 01:04:55.020
Yeah, yeah, absolutely.


01:04:55.020 --> 01:04:58.220
But once I kind of dialed in now, it's more like, well, somebody tried to send like some


01:04:58.220 --> 01:05:02.700
binary hacky thing that broke the URL parsing, but it's not really a problem.


01:05:02.700 --> 01:05:03.700
It's just right.


01:05:03.700 --> 01:05:08.340
But having that thing there is really important, I think.


01:05:08.340 --> 01:05:10.340
Yes, absolutely.


01:05:10.340 --> 01:05:11.340
Absolutely.


01:05:11.340 --> 01:05:17.340
Sentry, I just can't see a reason not to use it, even if they've got the free plan.


01:05:17.340 --> 01:05:18.740
Why wouldn't you have that?


01:05:18.740 --> 01:05:22.100
Yeah, the free tier, once you run out, you can decide whether or not you want to pay


01:05:22.100 --> 01:05:23.100
for it.


01:05:23.100 --> 01:05:27.780
Yeah, at least get some kind of insight into the errors that are happening.


01:05:27.780 --> 01:05:28.780
Yeah.


01:05:28.780 --> 01:05:31.340
And then the other thing that I'm a fan of is Prometheus.


01:05:31.340 --> 01:05:35.380
It takes a teeny bit of setting up, but again, you can get yourself a Raspberry Pi and you


01:05:35.380 --> 01:05:36.380
can play with that locally.


01:05:36.380 --> 01:05:37.380
And it's not that hard.


01:05:37.380 --> 01:05:40.420
You can put it on your Mac or you put it on your Windows machine, it will run.


01:05:40.420 --> 01:05:43.620
But get a Raspberry Pi, set it up, monitor the device.


01:05:43.620 --> 01:05:45.140
Prometheus is good fun.


01:05:45.140 --> 01:05:47.860
There's a dashboard that goes with it called Grafana.


01:05:47.860 --> 01:05:57.460
And then they do a log thing called Locky, which, you know, yeah, you have to configure


01:05:57.460 --> 01:06:00.620
it yourself, but it teaches you about your application.


01:06:00.620 --> 01:06:03.040
You have to say, okay, I want to monitor this.


01:06:03.040 --> 01:06:07.340
And then you can put a little couple of tags in and then, okay, you get metrics then for


01:06:07.340 --> 01:06:08.340
that bit.


01:06:08.340 --> 01:06:10.100
So, you know, perhaps you've got a slow view.


01:06:10.100 --> 01:06:15.220
So one thing you can do is you can put on your Nginx logs, you can log the upstream


01:06:15.220 --> 01:06:16.220
response time.


01:06:16.220 --> 01:06:21.940
So you've handed off to Garnicorn or to MicroWSGI and Nginx will then log how long those responses


01:06:21.940 --> 01:06:22.940
took.


01:06:22.940 --> 01:06:25.660
And then you can say, well, actually, those responses to that particular request is taking


01:06:25.660 --> 01:06:26.660
a long time.


01:06:26.660 --> 01:06:30.020
And then on that request, you can go into that view and you can add a little, you know,


01:06:30.020 --> 01:06:34.020
a little bit of instrumentation and then you can start getting metrics for what that view


01:06:34.020 --> 01:06:35.020
is doing.


01:06:35.020 --> 01:06:36.020
And yeah, yeah.


01:06:36.020 --> 01:06:41.340
>> This is why I want Carlson to build his thing so he can do this for me.


01:06:41.340 --> 01:06:42.340
>> He does it for all of you guys.


01:06:42.340 --> 01:06:43.340
Yeah.


01:06:43.340 --> 01:06:44.340
I'm also a fan of Datadog.


01:06:44.340 --> 01:06:45.340
I think those sound pretty similar.


01:06:45.340 --> 01:06:46.340
>> Oh, yeah.


01:06:46.340 --> 01:06:47.340
They do.


01:06:47.340 --> 01:06:48.340
I think they're Boston based actually.


01:06:48.340 --> 01:06:49.340
But yeah, they do.


01:06:49.340 --> 01:06:50.340
>> Yeah, I think they.


01:06:50.340 --> 01:06:51.340
Yeah.


01:06:51.340 --> 01:06:52.340
Nice.


01:06:52.340 --> 01:06:55.340
>> So this is APM, Application Process Monitoring.


01:06:55.340 --> 01:06:58.220
So there's quite a lot of commercial solutions.


01:06:58.220 --> 01:07:01.340
And then Prometheus is the sort of DIY.


01:07:01.340 --> 01:07:02.340
>> Yeah.


01:07:02.340 --> 01:07:03.340
Nice.


01:07:03.340 --> 01:07:04.340
>> Equivalent.


01:07:04.340 --> 01:07:05.340
>> Okay, cool.


01:07:05.340 --> 01:07:07.420
So that's the errors and performance.


01:07:07.420 --> 01:07:10.780
The other side is just the website is down.


01:07:10.780 --> 01:07:11.780
Right?


01:07:11.780 --> 01:07:17.060
So basically, there's so many different layers and moving parts.


01:07:17.060 --> 01:07:20.660
For example, we have very little downtime with our train courses and stuff.


01:07:20.660 --> 01:07:25.980
But one thing that did happen is we have this thing that will take the main IP address and


01:07:25.980 --> 01:07:28.500
switch it to a failover server.


01:07:28.500 --> 01:07:32.340
So we can do reboots and patches, and then it'll switch it back.


01:07:32.340 --> 01:07:35.340
And that's all done through an API through like a get push, and then it all just sort


01:07:35.340 --> 01:07:36.740
of goes down the chain.


01:07:36.740 --> 01:07:42.500
Until at one point, there was a bug where that switch of the IP like disassociated it


01:07:42.500 --> 01:07:44.740
with either server.


01:07:44.740 --> 01:07:46.060
So the server thought it was fine.


01:07:46.060 --> 01:07:47.340
It's like, "Whoa, things are chill."


01:07:47.340 --> 01:07:48.340
Right?


01:07:48.340 --> 01:07:50.180
>> So you log in and it's like, "Yeah."


01:07:50.180 --> 01:07:52.620
>> But the site was just timing out or so.


01:07:52.620 --> 01:07:54.740
I don't remember what happened, but it wasn't good.


01:07:54.740 --> 01:08:00.060
So I think there's some really nice uptime monitoring things that are free that people


01:08:00.060 --> 01:08:03.900
should just plug in to go hit these three pages just to see I can talk to the site,


01:08:03.900 --> 01:08:06.020
it talks to the database, and answer comes back.


01:08:06.020 --> 01:08:07.020
>> Yeah, for sure.


01:08:07.020 --> 01:08:09.540
I mean, I've got those configured.


01:08:09.540 --> 01:08:10.740
I know we're almost out of time.


01:08:10.740 --> 01:08:14.140
I did want to mention on deployment, I think one thing that trips people up, especially


01:08:14.140 --> 01:08:21.100
around Django is static files, which is something if you're doing it, you know, VPS, you know,


01:08:21.100 --> 01:08:26.260
and I think the key thing is that your server doesn't want to run your static files.


01:08:26.260 --> 01:08:28.460
Like it can, there's ways to do it.


01:08:28.460 --> 01:08:32.940
But you know, so both within Django, Django out of the box defaults to local settings


01:08:32.940 --> 01:08:36.380
and the Django has a local server, they'll just run your static files.


01:08:36.380 --> 01:08:41.000
To put that into deployment, you would run collect static, which is a command that makes


01:08:41.000 --> 01:08:45.660
a single static file and you probably want to use something like white noise.


01:08:45.660 --> 01:08:46.900
But there's a couple steps there.


01:08:46.900 --> 01:08:51.060
But something that really sort of intermediate level Django people, it really trips them


01:08:51.060 --> 01:08:52.060
up.


01:08:52.060 --> 01:08:54.540
I have a blog post on that because I forget the commands.


01:08:54.540 --> 01:08:55.780
There's like four things to tweak.


01:08:55.780 --> 01:08:57.780
You just have to do every time.


01:08:57.780 --> 01:08:59.580
But yeah, it worked locally.


01:08:59.580 --> 01:09:00.580
Why doesn't it work live?


01:09:00.580 --> 01:09:04.700
And it's like, partly because people don't understand, you know, how their servers working


01:09:04.700 --> 01:09:07.580
because they don't have to.


01:09:07.580 --> 01:09:10.060
But you know, that's I just want to


01:09:10.060 --> 01:09:11.060
Yeah, awesome.


01:09:11.060 --> 01:09:12.060
Yeah.


01:09:12.060 --> 01:09:13.980
That's one of the big four, right?


01:09:13.980 --> 01:09:15.380
So get your code in place.


01:09:15.380 --> 01:09:19.340
However you do that tarball, git pull, you know, whatever, get it there, configure your


01:09:19.340 --> 01:09:23.540
virtual environment, you know, so in pip installed all your requirements, configure your database


01:09:23.540 --> 01:09:27.140
and make sure you connect to that and get your static files in place.


01:09:27.140 --> 01:09:28.140
That's the


01:09:28.140 --> 01:09:31.460
Yeah, and the database is the other one that big, you know, you know, this might call like


01:09:31.460 --> 01:09:33.540
beginners, they're like, well, I updated it locally.


01:09:33.540 --> 01:09:35.420
And I pushed my code.


01:09:35.420 --> 01:09:37.460
Why isn't my production database different?


01:09:37.460 --> 01:09:38.460
Right?


01:09:38.460 --> 01:09:39.460
And it is.


01:09:39.460 --> 01:09:43.300
Like, I still occasionally make that mistake, you know, just, but, you know, your code is


01:09:43.300 --> 01:09:45.500
not your two separate databases.


01:09:45.500 --> 01:09:51.180
Yeah, that's what you want as well is you want you want to be able to write your blog


01:09:51.180 --> 01:09:53.020
post in locally.


01:09:53.020 --> 01:09:56.340
And then it appear on your server, you don't want to have to go Oh, no, now I have to paste


01:09:56.340 --> 01:09:58.340
it into the admin on my remote.


01:09:58.340 --> 01:10:01.060
Yeah, it depends how automated you want to go.


01:10:01.060 --> 01:10:06.660
I mean, for for a simple like, so my learn Django site, which is basically one admin,


01:10:06.660 --> 01:10:07.660
largely a content site.


01:10:07.660 --> 01:10:09.980
I mean, in terms of easy peasy, it's just Django.


01:10:09.980 --> 01:10:14.740
And I've got cloudflare in front for it's done.


01:10:14.740 --> 01:10:15.740
It's super fast.


01:10:15.740 --> 01:10:18.700
I get, you know, decent amount of traffic.


01:10:18.700 --> 01:10:19.700
I don't have to think about it.


01:10:19.700 --> 01:10:22.340
I've got I think I've got pager duty, one of those, you know,


01:10:22.340 --> 01:10:27.500
Yeah, that's the one that tells you if it's completely unreachable, right?


01:10:27.500 --> 01:10:28.500
Yeah, yeah.


01:10:28.500 --> 01:10:32.860
But it's an external one that you know, exactly to your point, because you can't always trust


01:10:32.860 --> 01:10:33.860
yourself.


01:10:33.860 --> 01:10:34.860
Yeah.


01:10:34.860 --> 01:10:36.500
Yeah, there's some interesting ones.


01:10:36.500 --> 01:10:38.260
I use status cake.


01:10:38.260 --> 01:10:39.260
And it's neat.


01:10:39.260 --> 01:10:43.500
But there's some there's some one that I heard the damn beta was told me about that would


01:10:43.500 --> 01:10:44.500
sound a lot nicer.


01:10:44.500 --> 01:10:46.540
But I'm like, but this one's already set up.


01:10:46.540 --> 01:10:48.580
You know, it's not that important.


01:10:48.580 --> 01:10:50.380
I get I get notifications if it goes.


01:10:50.380 --> 01:10:51.380
But all this stuff, right?


01:10:51.380 --> 01:10:54.060
It's like, you know, it's plumbing, right?


01:10:54.060 --> 01:10:56.940
Like, I'm happy to learn.


01:10:56.940 --> 01:10:59.220
We have the new silver pipes like my bronze pipes.


01:10:59.220 --> 01:11:00.220
Fine.


01:11:00.220 --> 01:11:01.220
I'm just gonna leave it.


01:11:01.220 --> 01:11:02.780
Well, that's well, that's Dr. Carlton's, you know, so


01:11:02.780 --> 01:11:05.780
I use DocuLoads.


01:11:05.780 --> 01:11:08.780
All right, guys.


01:11:08.780 --> 01:11:09.780
Yeah.


01:11:09.780 --> 01:11:10.780
All right.


01:11:10.780 --> 01:11:12.780
All the time all the time.


01:11:12.780 --> 01:11:16.100
All right, let's, let's just wrap it up really quick.


01:11:16.100 --> 01:11:17.100
There's a Django newsletter.


01:11:17.100 --> 01:11:18.340
I learned about that.


01:11:18.340 --> 01:11:19.340
That's interesting.


01:11:19.340 --> 01:11:20.340
Yeah, that exists.


01:11:20.340 --> 01:11:24.540
Yeah, so that's something I run with Jeff triplet, who's a partner at RevSys.


01:11:24.540 --> 01:11:26.580
He's a Python board member.


01:11:26.580 --> 01:11:27.900
Very involved with Django.


01:11:27.900 --> 01:11:30.060
So Django dash news.com.


01:11:30.060 --> 01:11:33.060
There wasn't a regular Django newsletter.


01:11:33.060 --> 01:11:34.180
There wasn't a podcast.


01:11:34.180 --> 01:11:39.540
So he and I have been doing that for a little over a year and has projects, articles.


01:11:39.540 --> 01:11:41.500
I sort of wish someone else did it so I didn't have to do it.


01:11:41.500 --> 01:11:45.180
But yeah, we got a lot of people listening, using it.


01:11:45.180 --> 01:11:47.340
So that's a good resource for the community.


01:11:47.340 --> 01:11:48.340
Fantastic.


01:11:48.340 --> 01:11:49.340
All right.


01:11:49.340 --> 01:11:53.100
So before I let you two out of here, final two questions really quick.


01:11:53.100 --> 01:11:55.500
Will, I'll go with you first.


01:11:55.500 --> 01:11:56.500
Okay.


01:11:56.500 --> 01:11:59.740
Notable PyPI package out there that you were like, Oh my gosh, I ran across this the other


01:11:59.740 --> 01:12:00.740
day.


01:12:00.740 --> 01:12:01.740
I can't believe it.


01:12:01.740 --> 01:12:03.940
Ah, that's a good question.


01:12:03.940 --> 01:12:08.620
I'll go back to an original, an old school one, which I think is bleach, because I've


01:12:08.620 --> 01:12:10.940
been thinking about a course on forms.


01:12:10.940 --> 01:12:16.180
And bleach is, is a Python one, not Django specific, but you pretty much always want


01:12:16.180 --> 01:12:17.180
to have that added.


01:12:17.180 --> 01:12:21.460
So Django is very much for user input to make sure there's no like cross site scripting


01:12:21.460 --> 01:12:22.460
type stuff.


01:12:22.460 --> 01:12:23.460
Yeah.


01:12:23.460 --> 01:12:24.460
Yeah.


01:12:24.460 --> 01:12:25.460
So that's, okay.


01:12:25.460 --> 01:12:26.460
Top of mind.


01:12:26.460 --> 01:12:31.420
Not a new one, but I think, you know, along with white noise, you just got to use it.


01:12:31.420 --> 01:12:32.420
Yeah.


01:12:32.420 --> 01:12:33.420
Awesome.


01:12:33.420 --> 01:12:34.420
Carlton has something.


01:12:34.420 --> 01:12:38.820
Yeah, no, the, well, the one that's just really captured my imagination recently is rich,


01:12:38.820 --> 01:12:40.740
which is the, yeah, rich is cool.


01:12:40.740 --> 01:12:48.700
The, the library for creating basically nice terminal output, nice console output.


01:12:48.700 --> 01:12:51.500
But it has like tables and all sorts of stuff.


01:12:51.500 --> 01:12:52.500
Yeah.


01:12:52.500 --> 01:12:56.500
But like, it's got this inspect functionality where you can get an L and you're, you're


01:12:56.500 --> 01:12:59.300
sitting there and you're in the shell and you're like, I want to see it.


01:12:59.300 --> 01:13:03.820
And you print it and you get it and you, you look at the dict and it's all, it's not.


01:13:03.820 --> 01:13:08.660
And then you go inspect and rich formats, this thing where it's like, Oh yeah, I can


01:13:08.660 --> 01:13:11.700
look here and I can see exactly what's going on and it's just amazing.


01:13:11.700 --> 01:13:12.700
Yeah.


01:13:12.700 --> 01:13:13.700
20,000.


01:13:13.700 --> 01:13:14.700
That's what I love about coding, right?


01:13:14.700 --> 01:13:18.700
I had never heard of this before and it's clearly a very established thing.


01:13:18.700 --> 01:13:19.700
Yeah.


01:13:19.700 --> 01:13:23.180
Well, I think it's pretty new, but it's very, it's, it's taken off quite, yeah, it's about


01:13:23.180 --> 01:13:24.180
a year old.


01:13:24.180 --> 01:13:27.660
It's taken off quite steeply and it's a adoption.


01:13:27.660 --> 01:13:31.780
One that I ran across really recently, just throw it out there cause it's a Django semi


01:13:31.780 --> 01:13:33.740
related one is disk cache.


01:13:33.740 --> 01:13:34.740
Have you guys heard of that?


01:13:34.740 --> 01:13:35.740
No.


01:13:35.740 --> 01:13:42.860
So it's a really interesting caching plugin that will, instead of using memory for


01:13:42.860 --> 01:13:45.380
caching, it will store it on to local disk.


01:13:45.380 --> 01:13:48.940
Cause usually I have way more hard drive space than you have memory in the cloud and it plugs


01:13:48.940 --> 01:13:52.380
into Django to like be a stand in for the cache there.


01:13:52.380 --> 01:13:53.380
Okay, fine.


01:13:53.380 --> 01:13:54.380
Yeah.


01:13:54.380 --> 01:13:56.380
I mean, I'm a big fan of file cache.


01:13:56.380 --> 01:13:57.380
Yeah.


01:13:57.380 --> 01:13:58.940
General is like memory's expensive, right?


01:13:58.940 --> 01:14:04.180
So memory caches is the best way and Redis and memcache are good ways of doing that all


01:14:04.180 --> 01:14:05.180
in memory.


01:14:05.180 --> 01:14:09.180
And then you think, I just want to generate some HTML once and then just pipe it off the


01:14:09.180 --> 01:14:10.180
hard disk.


01:14:10.180 --> 01:14:11.180
Exactly.


01:14:11.180 --> 01:14:14.540
To me, this is a kind of the equivalent of SQL lite versus a real database.


01:14:14.540 --> 01:14:18.300
It's like, you don't need Redis or memcache or something like completely set up just like


01:14:18.300 --> 01:14:20.300
until it gets beyond whatever.


01:14:20.300 --> 01:14:23.020
Anyway, it's, it's, it looks pretty interesting.


01:14:23.020 --> 01:14:24.020
all right.


01:14:24.020 --> 01:14:25.020
And then,


01:14:25.020 --> 01:14:27.980
I love how you do packages things by the way, like we, we include packages every week in


01:14:27.980 --> 01:14:32.380
Django news and there's also like an awesome Django repo that Jeff and I do.


01:14:32.380 --> 01:14:36.820
you know, cause the problem is you want some degree of curation, right?


01:14:36.820 --> 01:14:40.380
Like something new, but like legit enough to be worth looking at.


01:14:40.380 --> 01:14:41.380
Yeah, absolutely.


01:14:41.380 --> 01:14:42.380
Thanks.


01:14:42.380 --> 01:14:43.380
Yeah, that's very cool.


01:14:43.380 --> 01:14:44.380
All right.


01:14:44.380 --> 01:14:46.700
And then final question, if you're gonna write some Python code, what editor do you


01:14:46.700 --> 01:14:47.700
use?


01:14:47.700 --> 01:14:49.020
VS Code.


01:14:49.020 --> 01:14:50.220
Same for both of us.


01:14:50.220 --> 01:14:51.220
Yeah.


01:14:51.220 --> 01:14:52.220
Right.


01:14:52.220 --> 01:14:54.220
Well, you're still, well, I have to, yes.


01:14:54.220 --> 01:14:55.220
VS Code.


01:14:55.220 --> 01:14:56.220
Very nice.


01:14:56.220 --> 01:14:57.660
use it a lot.


01:14:57.660 --> 01:14:59.580
Also though, I'd still like BB edit.


01:14:59.580 --> 01:15:00.580
Yeah.


01:15:00.580 --> 01:15:01.580
Right on.


01:15:01.580 --> 01:15:04.660
I mean, I'm just keeping it old school every now and then just for a little nostalgia.


01:15:04.660 --> 01:15:05.780
I'll tell you what, right.


01:15:05.780 --> 01:15:10.740
So I'm using VS Code and I'm like, but I need to do some transformations or I need to, you


01:15:10.740 --> 01:15:14.660
know, do a multi file search and a diff here and VS Code school, that stuff.


01:15:14.660 --> 01:15:19.020
It's a bit, you know, this is built in JavaScript, whereas, you know, BB it's a native Mac app


01:15:19.020 --> 01:15:20.860
and it's got a lot going for it.


01:15:20.860 --> 01:15:21.860
What do you use?


01:15:21.860 --> 01:15:22.860
I use PyCharm.


01:15:22.860 --> 01:15:23.860
Although I did.


01:15:23.860 --> 01:15:24.860
Yeah.


01:15:24.860 --> 01:15:25.860
I'm a big fan.


01:15:25.860 --> 01:15:34.100
local company here in Portland panic came out with, I said, called Nova.


01:15:34.100 --> 01:15:35.100
I think it's Nova.


01:15:35.100 --> 01:15:36.100
They just came out with a brand new editor.


01:15:36.100 --> 01:15:37.100
It looks pretty interesting as well.


01:15:37.100 --> 01:15:38.100
Yeah.


01:15:38.100 --> 01:15:39.100
Yeah.


01:15:39.100 --> 01:15:40.100
What was your FTP?


01:15:40.100 --> 01:15:41.100
They have, yeah, they make sense.


01:15:41.100 --> 01:15:42.100
Transmit.


01:15:42.100 --> 01:15:43.100
I love transmit.


01:15:43.100 --> 01:15:44.100
Yeah.


01:15:44.100 --> 01:15:45.100
I use it all the time.


01:15:45.100 --> 01:15:46.100
All the time.


01:15:46.100 --> 01:15:47.100
Yeah.


01:15:47.100 --> 01:15:48.100
They make great stuff.


01:15:48.100 --> 01:15:49.100
We were talking about Nova.


01:15:49.100 --> 01:15:50.100
Fantastic.


01:15:50.100 --> 01:15:51.100
Cool.


01:15:51.100 --> 01:15:54.100
All right, gentlemen, thank you so much for being on the show.


01:15:54.100 --> 01:15:55.680
yeah.


01:15:55.680 --> 01:16:00.940
It's been great and thanks for all the work on Django and I'll catch up with you all soon.


01:16:00.940 --> 01:16:01.940
All right.


01:16:01.940 --> 01:16:02.940
Thanks for having us.


01:16:02.940 --> 01:16:03.940
Thanks for joining us.


01:16:03.940 --> 01:16:04.940
Bye bye.


01:16:04.940 --> 01:16:10.060
Thanks everyone for listening as well on the live stream and, yeah, I'll stop the

