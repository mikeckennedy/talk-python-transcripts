WEBVTT

00:00:00.000 --> 00:00:02.920
- Hello, YouTube.


00:00:02.920 --> 00:00:03.760
Hello, Sam.


00:00:03.760 --> 00:00:05.520
- Hey, YouTube.


00:00:05.520 --> 00:00:06.760
Hey, Michael.


00:00:06.760 --> 00:00:08.120
- Hey, Chris May.


00:00:08.120 --> 00:00:11.920
Looks like you are psyched to do some Panda stuff.


00:00:11.920 --> 00:00:13.400
So hopefully so.


00:00:13.400 --> 00:00:15.000
We're gonna talk about all sorts of fun things.


00:00:15.000 --> 00:00:16.820
Those of you watching on YouTube,


00:00:16.820 --> 00:00:20.880
either live or the replay, thanks for being here.


00:00:20.880 --> 00:00:22.900
Sam, let's go.


00:00:22.900 --> 00:00:25.720
Sam, welcome to Talk Python To Me.


00:00:25.720 --> 00:00:27.940
- It's great to be back.


00:00:27.940 --> 00:00:29.600
- Yeah, it's good to have you back.


00:00:29.600 --> 00:00:34.600
Previously, you were here with Philip Guo and your research,


00:00:34.600 --> 00:00:38.040
is he your advisor at UCSD?


00:00:38.040 --> 00:00:39.600
- Yeah, Philip's my advisor.


00:00:39.600 --> 00:00:40.760
- Yeah, fantastic.


00:00:40.760 --> 00:00:42.100
Yeah, so Philip is a great guy.


00:00:42.100 --> 00:00:45.720
He's been on the show multiple times before


00:00:45.720 --> 00:00:49.840
and you all were here previously to talk about,


00:00:49.840 --> 00:00:52.520
he had analyzed an insane number


00:00:52.520 --> 00:00:54.980
of notebook environments, right?


00:00:54.980 --> 00:00:56.680
- Yeah, something like 60 of them.


00:00:56.680 --> 00:00:57.800
- Yeah, like 60.


00:00:57.800 --> 00:01:01.360
So people think of JupyterLab and maybe Google CoLab,


00:01:01.360 --> 00:01:03.280
and then is there another one?


00:01:03.280 --> 00:01:04.680
Maybe 60.


00:01:04.680 --> 00:01:06.600
That's insane, right?


00:01:06.600 --> 00:01:07.600
- There's just a long list.


00:01:07.600 --> 00:01:09.560
We have like a giant table in that paper


00:01:09.560 --> 00:01:10.920
where it takes up one whole page,


00:01:10.920 --> 00:01:13.280
and it's a lot going on.


00:01:13.280 --> 00:01:15.200
- That was really fun to have you on to talk about that.


00:01:15.200 --> 00:01:18.680
And I suspect that that list is longer, not shorter now.


00:01:18.680 --> 00:01:20.120
- Of course, of course.


00:01:20.120 --> 00:01:21.840
- It just is growing.


00:01:21.840 --> 00:01:26.960
But how about we just do a quick sync up?


00:01:26.960 --> 00:01:28.280
What have you been up to?


00:01:28.280 --> 00:01:29.120
When was that?


00:01:29.120 --> 00:01:32.120
That was about a year, year and a half ago.


00:01:32.120 --> 00:01:32.960
So it's been a while.


00:01:32.960 --> 00:01:33.780
What have you been up to?


00:01:33.780 --> 00:01:35.940
You still over at UCSD?


00:01:35.940 --> 00:01:39.640
- Yeah, so I'm still at UCSD.


00:01:39.640 --> 00:01:41.480
I'm working on my PhD.


00:01:41.480 --> 00:01:43.920
- UCSD being University of California, San Diego


00:01:43.920 --> 00:01:46.680
for those who are not hanging out in the West Coast US


00:01:46.680 --> 00:01:50.200
and are familiar with all the UC acronyms.


00:01:50.200 --> 00:01:51.640
- Yeah, UC San Diego.


00:01:51.640 --> 00:01:53.560
I'm here in sunny San Diego.


00:01:53.560 --> 00:01:57.600
I'm doing my PhD in cognitive science.


00:01:57.600 --> 00:01:59.400
But what that really means for me is,


00:01:59.400 --> 00:02:02.200
most of my research is in a field called


00:02:02.200 --> 00:02:05.360
human-computer interaction, which is,


00:02:05.360 --> 00:02:06.640
the way I describe it is more or less


00:02:06.640 --> 00:02:08.140
the study of user interfaces,


00:02:08.140 --> 00:02:10.240
how people interact with computers,


00:02:10.240 --> 00:02:13.360
and for me specifically, how people interact,


00:02:13.360 --> 00:02:15.960
how people use computers to teach


00:02:15.960 --> 00:02:18.920
and learn programming and data science.


00:02:18.920 --> 00:02:20.240
- Yeah, that sounds super fun.


00:02:20.240 --> 00:02:24.620
There's just so many more interfaces these days.


00:02:24.620 --> 00:02:26.940
Human computer interfaces used to be just like,


00:02:26.940 --> 00:02:29.620
well, how do you use Windows or something like that, right?


00:02:29.620 --> 00:02:30.820
- Even before that, it was like,


00:02:30.820 --> 00:02:33.780
how do you type stuff into a terminal


00:02:33.780 --> 00:02:35.060
before we even had Windows?


00:02:35.060 --> 00:02:37.460
And then people from the community was like,


00:02:37.460 --> 00:02:38.860
you know, Windows would be good.


00:02:38.860 --> 00:02:40.780
And then they were like, maybe touchscreens will be good.


00:02:40.780 --> 00:02:43.900
And so now we have all these cool ways to input


00:02:43.900 --> 00:02:47.740
commands into a computer and make use of that.


00:02:47.740 --> 00:02:49.100
- Yeah, absolutely.


00:02:49.100 --> 00:02:53.960
And so it seems like you and Philip are somewhat focused on


00:02:53.960 --> 00:02:56.040
how developers interact with computers.


00:02:56.040 --> 00:02:57.220
Is that fair to say?


00:02:57.220 --> 00:03:00.480
- We kind of do a mix.


00:03:00.480 --> 00:03:04.680
So Philip, I think has done a lot of developer


00:03:04.680 --> 00:03:09.360
oriented work, maybe like in the last five years


00:03:09.360 --> 00:03:10.580
or 10 years or so.


00:03:10.580 --> 00:03:14.600
For me specifically, I'm more interested in like


00:03:14.600 --> 00:03:17.200
how students and instructors use computers.


00:03:17.200 --> 00:03:22.200
So, how people use, like create lecture slides


00:03:22.200 --> 00:03:26.880
using like screenshots of like their notebook environments


00:03:26.880 --> 00:03:29.480
and how people like put code in their slides


00:03:29.480 --> 00:03:31.720
and use code to teach while also like,


00:03:31.720 --> 00:03:35.040
while also talking over at the same time.


00:03:35.040 --> 00:03:38.800
- Sure, well, and notebooks are all about communicating


00:03:38.800 --> 00:03:40.960
computational ideas, either being science


00:03:40.960 --> 00:03:42.860
or developer or data science, right?


00:03:42.860 --> 00:03:45.040
- Yeah, yeah, for sure.


00:03:45.040 --> 00:03:47.060
And then nowadays we see a lot of notebooks


00:03:47.060 --> 00:03:53.060
used in the classroom as well. So instructors will not only have lecture slides, but a lot of


00:03:53.060 --> 00:03:57.700
instructors will like flip back and forth between lecture slides and a computational notebook like


00:03:57.700 --> 00:04:02.980
Jupyter. So they'll have lecture slides for a few minutes, and then they'll do some live coding in


00:04:02.980 --> 00:04:06.980
front of students for another few minutes, and they'll switch back and forth. So we're seeing


00:04:06.980 --> 00:04:12.420
a lot of that sort of use case in the classroom. And that's where, like, that's the sort of thing


00:04:12.420 --> 00:04:16.820
that I'm really interested in, because here we have people doing something visual, doing


00:04:16.820 --> 00:04:18.940
doing something verbal, but also now doing,


00:04:18.940 --> 00:04:20.880
working with code and having students like


00:04:20.880 --> 00:04:22.700
see code in the classroom.


00:04:22.700 --> 00:04:24.360
- I think it must be such an advantage


00:04:24.360 --> 00:04:26.080
for students these days.


00:04:26.080 --> 00:04:28.000
I remember when I was in school,


00:04:28.000 --> 00:04:31.680
it was either the instructor would be writing something


00:04:31.680 --> 00:04:35.100
either on the blackboard or on like one of those overlay


00:04:35.100 --> 00:04:36.700
things with a pen and with a light


00:04:36.700 --> 00:04:38.720
that literally went through it.


00:04:38.720 --> 00:04:41.100
Or, you know, you would just get a book or something.


00:04:41.100 --> 00:04:42.700
But now if you want to say, well,


00:04:42.700 --> 00:04:46.180
look how this, look how these forces in physics


00:04:46.180 --> 00:04:48.580
or look how these chemical bonds are formed.


00:04:48.580 --> 00:04:50.540
You could see them actually,


00:04:50.540 --> 00:04:51.780
you could see actual animation


00:04:51.780 --> 00:04:53.300
that you could try new ideas.


00:04:53.300 --> 00:04:56.740
And it's just, it's opened up so much exploration, I think.


00:04:56.740 --> 00:04:57.980
- Yeah, I think it's really cool.


00:04:57.980 --> 00:04:59.580
And, you know, I don't know about you,


00:04:59.580 --> 00:05:03.120
but I would definitely prefer to write code in the computer


00:05:03.120 --> 00:05:05.460
rather than writing code in the overhead slide.


00:05:05.460 --> 00:05:06.380
- Oh my goodness.


00:05:06.380 --> 00:05:09.980
I cannot even imagine doing it that way.


00:05:09.980 --> 00:05:11.220
So for sure, for sure.


00:05:11.220 --> 00:05:14.660
All right, speaking of code, let's talk about your project.


00:05:14.660 --> 00:05:18.900
So you have this project called Pandas Tutor.


00:05:18.900 --> 00:05:19.880
- Yeah, that's right.


00:05:19.880 --> 00:05:24.340
- Yeah, and this is a little bit of a next generation


00:05:24.340 --> 00:05:28.200
data science thing followed on from Python Tutor, right?


00:05:28.200 --> 00:05:31.200
I see some similarities in the website and stuff like that.


00:05:31.200 --> 00:05:33.540
Yeah.


00:05:33.540 --> 00:05:34.360
- Yeah, yeah.


00:05:34.360 --> 00:05:35.480
So Pandas Tutor,


00:05:35.480 --> 00:05:39.800
the website is similar to the Python Tutor website


00:05:39.800 --> 00:05:43.940
because Philip used his old style sheet for both of them.


00:05:43.940 --> 00:05:44.900
- Sure, sure.


00:05:44.900 --> 00:05:46.360
- When we were getting this out the door,


00:05:46.360 --> 00:05:49.440
we were, at the time, we were like very focused


00:05:49.440 --> 00:05:53.100
on squashing bugs and adding new features.


00:05:53.100 --> 00:05:54.260
And then the website was like,


00:05:54.260 --> 00:05:56.580
oh, okay, like we've got to launch this thing.


00:05:56.580 --> 00:05:57.720
We need something to put on.


00:05:57.720 --> 00:06:00.300
So Phillip was like, okay, let me copy my styles.


00:06:00.300 --> 00:06:02.080
- Yeah, well, his styles look good.


00:06:02.080 --> 00:06:04.740
So I think it's, there's nothing wrong with that.


00:06:04.740 --> 00:06:08.500
It's very nice visualizations and interactives.


00:06:08.500 --> 00:06:10.220
So what is this?


00:06:10.220 --> 00:06:12.860
Why would people be interested in Pandas Tutor?


00:06:12.860 --> 00:06:16.460
Is this, it might sound like it's a series


00:06:16.460 --> 00:06:18.760
of video courses on pandas or something,


00:06:18.760 --> 00:06:20.060
but that's not what it is, right?


00:06:20.060 --> 00:06:21.740
Tell people what this is.


00:06:21.740 --> 00:06:26.060
- Yeah, so Pandas Tutor is a little website tool


00:06:26.060 --> 00:06:30.300
where you can paste in some Python pandas code.


00:06:30.300 --> 00:06:33.340
So Python code that works with data frames.


00:06:33.340 --> 00:06:35.580
What the tool will do is it'll take your code


00:06:35.580 --> 00:06:37.820
and break it down step by step.


00:06:37.820 --> 00:06:39.600
It'll draw a little diagram for you


00:06:39.600 --> 00:06:41.020
at every step of your code.


00:06:41.020 --> 00:06:45.200
So I have a little example on the website,


00:06:45.200 --> 00:06:47.360
but the example on the website basically shows


00:06:47.360 --> 00:06:50.480
that if you have a few lines of pandas code,


00:06:50.480 --> 00:06:53.720
when you run those lines in a Jupyter notebook,


00:06:53.720 --> 00:06:58.000
let's say, all you get when you run the cell,


00:06:58.000 --> 00:07:00.120
all you get when you run the code is a final output.


00:07:00.120 --> 00:07:02.760
So even if there are like four steps in the recipe,


00:07:02.760 --> 00:07:04.240
all you get is the finished cake


00:07:04.240 --> 00:07:07.400
and you don't really get to see the middle steps to happen.


00:07:07.400 --> 00:07:09.480
- And so often, you know, that's what you do.


00:07:09.480 --> 00:07:11.360
you're like, I'm gonna transform this data frame


00:07:11.360 --> 00:07:14.320
with these multiple operations to get a new data frame.


00:07:14.320 --> 00:07:16.960
That's the destination I wanna be at, right?


00:07:16.960 --> 00:07:18.560
- Totally, totally.


00:07:18.560 --> 00:07:19.840
Yeah, and it happens all the time


00:07:19.840 --> 00:07:22.560
in real practice for data analysis.


00:07:22.560 --> 00:07:24.720
And it also happens a lot in the classroom.


00:07:24.720 --> 00:07:27.280
So a lot of times when I'm teaching in data science,


00:07:27.280 --> 00:07:29.040
a little piece of data science,


00:07:29.040 --> 00:07:30.840
I'll write a few lines of code,


00:07:30.840 --> 00:07:32.960
but the problem is, like, students ask me like,


00:07:32.960 --> 00:07:33.800
oh, what happened?


00:07:33.800 --> 00:07:34.620
Like, there's a lot going on.


00:07:34.620 --> 00:07:35.720
Like, can you show me like this step


00:07:35.720 --> 00:07:38.000
or like step three in the code or step four?


00:07:38.000 --> 00:07:41.520
and I have to like manually comment out lines of code


00:07:41.520 --> 00:07:43.640
and display those data frames to students.


00:07:43.640 --> 00:07:46.160
So I'm still kind of averse from that use case.


00:07:46.160 --> 00:07:47.000
- Yeah, absolutely.


00:07:47.000 --> 00:07:49.220
And it's totally reasonable


00:07:49.220 --> 00:07:50.700
that you would comment out those lines,


00:07:50.700 --> 00:07:53.480
but it's also more difficult still


00:07:53.480 --> 00:07:55.840
to see the transformation, right?


00:07:55.840 --> 00:07:58.860
So if I say, well, what happens if I don't do,


00:07:58.860 --> 00:08:01.560
say a group by, but I just get the previous result,


00:08:01.560 --> 00:08:03.360
well then, you know, you kind of,


00:08:03.360 --> 00:08:06.200
how do you put that side by side with the other,


00:08:06.200 --> 00:08:07.740
the next step, right?


00:08:07.740 --> 00:08:09.620
there's not a great mechanism for saying,


00:08:09.620 --> 00:08:11.740
put these side by side and see the changes


00:08:11.740 --> 00:08:15.140
without like lots of scrolling and back and forth and stuff.


00:08:15.140 --> 00:08:15.980
- Totally, totally.


00:08:15.980 --> 00:08:16.820
Yeah, yeah.


00:08:16.820 --> 00:08:19.860
So it's something, it's a use case that came directly


00:08:19.860 --> 00:08:22.460
out of our experiences teaching data science,


00:08:22.460 --> 00:08:26.460
where a lot of times when we teach, we're like, okay,


00:08:26.460 --> 00:08:30.340
in the top cell of a notebook, we'll like display dogs.


00:08:30.340 --> 00:08:31.700
And then the cell below it,


00:08:31.700 --> 00:08:33.300
we'll do some stuff with the data frame,


00:08:33.300 --> 00:08:35.380
like dogs.sort_values.


00:08:35.380 --> 00:08:37.640
And then we have to say, okay, students,


00:08:37.640 --> 00:08:40.940
like look at the top data frame and look at the bottom one


00:08:40.940 --> 00:08:43.820
and then compare those two and like stare really hard at it


00:08:43.820 --> 00:08:45.300
and try to figure out what happened


00:08:45.300 --> 00:08:48.340
between the two data frames to understand it.


00:08:48.340 --> 00:08:51.620
So, whereas with Pandas Tutor,


00:08:51.620 --> 00:08:54.060
what I could do instead is put the code,


00:08:54.060 --> 00:08:56.440
just paste the code into Pandas Tutor.


00:08:56.440 --> 00:08:58.980
It'll display the two data frames side by side


00:08:58.980 --> 00:09:01.140
and draw some arrows between the two data frames


00:09:01.140 --> 00:09:03.420
or add some coloring so that I can see,


00:09:03.420 --> 00:09:05.300
oh, okay, the rows were sorted.


00:09:05.300 --> 00:09:08.820
I don't have to ask people to like stare really hard


00:09:08.820 --> 00:09:11.320
and imagine the rails moving from place to place.


00:09:11.320 --> 00:09:15.180
- And before we get too far into this episode,


00:09:15.180 --> 00:09:16.700
I do wanna just point out to people,


00:09:16.700 --> 00:09:18.900
like this is a really visual tool,


00:09:18.900 --> 00:09:21.300
which is its massive advantage,


00:09:21.300 --> 00:09:24.260
but that also puts Sam and me at a disadvantage


00:09:24.260 --> 00:09:27.620
for discussing it during this audio,


00:09:27.620 --> 00:09:30.340
mostly audio presentation.


00:09:30.340 --> 00:09:33.900
So you might consider checking out also the YouTube stream


00:09:33.900 --> 00:09:34.780
and flipping around there,


00:09:34.780 --> 00:09:38.180
or just open up pandastutor.com


00:09:38.180 --> 00:09:40.340
and play around with it yourself.


00:09:40.340 --> 00:09:41.960
But that gets all about just a live example.


00:09:41.960 --> 00:09:46.780
So with that said, I wanna dive into a few things.


00:09:46.780 --> 00:09:48.080
There's gonna be an example here


00:09:48.080 --> 00:09:49.720
that we're gonna cover a lot.


00:09:49.720 --> 00:09:55.980
And it's an example using a pandas data frame called dogs.


00:09:55.980 --> 00:09:58.540
And the dogs are like the breed,


00:09:58.540 --> 00:10:00.980
which would be German shepherd or terrier or whatever.


00:10:00.980 --> 00:10:04.300
Then type is a herding dog or a hound dog or a toy dog.


00:10:04.300 --> 00:10:06.000
I love the toy dog idea.


00:10:06.000 --> 00:10:09.860
And then there's a filtering statement


00:10:09.860 --> 00:10:13.340
where you say dogs bracket, dog size, equal, equal medium.


00:10:13.340 --> 00:10:15.140
Right, that's a standard pandas like,


00:10:15.140 --> 00:10:18.140
let's do this filter type of wager clause.


00:10:18.140 --> 00:10:21.300
And then there's a sort where you sort by the type of dog,


00:10:21.300 --> 00:10:23.340
you know, be them herding or hound dog


00:10:23.340 --> 00:10:26.100
or working dog, whatever.


00:10:26.100 --> 00:10:29.700
And then you do a group by on the type.


00:10:29.700 --> 00:10:33.100
So show me all the non-sporting dogs,


00:10:33.100 --> 00:10:35.420
all the sporting dogs and so on.


00:10:35.420 --> 00:10:36.340
Yeah?


00:10:36.340 --> 00:10:37.180
- Yeah, that's right.


00:10:37.180 --> 00:10:39.500
- We'll be using this data quite a bit.


00:10:39.500 --> 00:10:42.100
Before we get into analyzing pandas,


00:10:42.100 --> 00:10:44.760
I guess one thing I was wondering is,


00:10:44.760 --> 00:10:49.700
it's super focused on pandas and pandas data frames.


00:10:49.700 --> 00:10:52.420
Did you consider making it for other tools


00:10:52.420 --> 00:10:56.100
like a NumPy one or a TensorFlow one?


00:10:56.100 --> 00:10:58.220
Or like why pandas specifically


00:10:58.220 --> 00:11:00.380
out of the data science space?


00:11:00.380 --> 00:11:02.340
- It's a great question.


00:11:02.340 --> 00:11:06.700
Pandas happens to be the de facto tool


00:11:06.700 --> 00:11:09.980
for working with data tables in Pandas.


00:11:09.980 --> 00:11:12.340
I mean, working with data tables in Python.


00:11:12.340 --> 00:11:14.940
And it's taught a lot


00:11:14.940 --> 00:11:17.380
in introductory courses specifically.


00:11:17.380 --> 00:11:20.420
So a lot of intro to data science courses,


00:11:20.420 --> 00:11:22.980
when they teach students how to work with data tables,


00:11:22.980 --> 00:11:25.720
they'll also teach students how to work with Pandas.


00:11:25.720 --> 00:11:29.980
We chose to focus on Pandas because of those two aspects.


00:11:29.980 --> 00:11:36.600
So one, it's like a common standard package that a lot of people use in practice.


00:11:36.600 --> 00:11:40.880
And it's also a package that people, a lot of people learn when they're learning data


00:11:40.880 --> 00:11:44.600
science for the first time, they'll learn pandas as one of the first stepping stones


00:11:44.600 --> 00:11:47.540
to learning how to do data analysis.


00:11:47.540 --> 00:11:54.000
Now there is another version of this tool for the R data, like R tidyverse world.


00:11:54.000 --> 00:11:56.920
It's called tidy data tutor.


00:11:56.920 --> 00:11:58.080
instead of Pandas Tutor.


00:11:58.080 --> 00:12:02.080
And it was made by one of my lab mates and Philip as well.


00:12:02.080 --> 00:12:04.760
So the three of us kind of worked together.


00:12:04.760 --> 00:12:06.880
I worked on the Pandas side, and then my lab mate


00:12:06.880 --> 00:12:09.360
worked on the R-Tidyverse side.


00:12:09.360 --> 00:12:10.480
- Sure.


00:12:10.480 --> 00:12:13.100
Okay, yeah, that's cool that,


00:12:13.100 --> 00:12:15.000
regardless of which side of data science you're on,


00:12:15.000 --> 00:12:16.760
you can grab this and run with it.


00:12:16.760 --> 00:12:21.800
- Yeah, and as for other tools, I think the approach


00:12:21.800 --> 00:12:24.720
that the tool uses to analyze code could be applied


00:12:24.720 --> 00:12:29.360
to all sorts of other tools, including tools like TensorFlow.


00:12:29.360 --> 00:12:32.400
And that's probably one of the exciting things for me,


00:12:32.400 --> 00:12:34.400
is that this, for me, is a stepping stone


00:12:34.400 --> 00:12:37.840
towards all sorts of visual tools


00:12:37.840 --> 00:12:40.400
for learning Python packages or other data science


00:12:40.400 --> 00:12:44.560
specific things that otherwise are difficult to understand.


00:12:44.560 --> 00:12:46.960
Or things that you would normally draw a picture


00:12:46.960 --> 00:12:49.040
to understand normally, I can imagine a tool


00:12:49.040 --> 00:12:50.600
like this drawing a picture for you


00:12:50.600 --> 00:12:53.840
or helping you when you're explaining


00:12:53.840 --> 00:12:55.140
your code to someone else.


00:12:55.140 --> 00:12:58.520
- When I first learned about this,


00:12:58.520 --> 00:13:02.400
Brian Okken and Leah Cole and I spoke about it


00:13:02.400 --> 00:13:05.900
over on the Python Bytes podcast.


00:13:05.900 --> 00:13:10.260
And Leah made a really interesting point when she saw this.


00:13:10.260 --> 00:13:13.980
My first impression is, okay, this is a great way


00:13:13.980 --> 00:13:16.500
to teach students who are getting into data science.


00:13:16.500 --> 00:13:20.700
And it sounds like that's a very solid use case.


00:13:20.700 --> 00:13:23.260
But Leah said, hey, this would be really good


00:13:23.260 --> 00:13:25.540
if you just like went to stack overflow


00:13:25.540 --> 00:13:26.940
or you picked up some new code


00:13:26.940 --> 00:13:28.540
and you're like, what does this do?


00:13:28.540 --> 00:13:30.940
This is like a complicated pandas expression.


00:13:30.940 --> 00:13:34.260
Let me throw it in here and you could visualize that.


00:13:34.260 --> 00:13:35.860
So I wanna sort of put that out there


00:13:35.860 --> 00:13:37.820
for people to think about.


00:13:37.820 --> 00:13:40.240
Well, if they're not learning data science right now,


00:13:40.240 --> 00:13:43.080
they're probably still encountering algorithms


00:13:43.080 --> 00:13:44.820
and data sets that are new to them


00:13:44.820 --> 00:13:46.820
and that might be useful as well.


00:13:46.820 --> 00:13:47.900
What do you think?


00:13:47.900 --> 00:13:49.340
- Yeah, I totally agree with that.


00:13:49.340 --> 00:13:52.060
And actually one of the ideas that Phillip and I had


00:13:52.060 --> 00:14:01.180
is to do a little bookmarklet, where if you put the bookmarklet in your browser bookmarks


00:14:01.180 --> 00:14:06.340
bar and then you're on Stack Overflow and you click that button, we could even show


00:14:06.340 --> 00:14:12.380
you those diagrams, like the panes created in line, if you click it online on a Stack


00:14:12.380 --> 00:14:16.020
Overflow website, or let's say the panes documentation.


00:14:16.020 --> 00:14:21.140
I've certainly run into the problem where I'm trying to like, I Google like, how do


00:14:21.140 --> 00:14:25.660
I let's say unpivot a data frame and then I pull up the first Stack Overflow result


00:14:25.660 --> 00:14:30.900
and then it works but it's like five lines of complicated, you know, machinery, and I'm


00:14:30.900 --> 00:14:34.980
trying to figure out what's going on and I have to like, like kind of walk through it


00:14:34.980 --> 00:14:38.300
step by step myself to make sure it's not messing up my data in some way.


00:14:38.300 --> 00:14:41.480
Yeah, so I can imagine like a tool like this.


00:14:41.480 --> 00:14:45.220
If you could display the visualizations in line and just put it in Stack Overflow's website


00:14:45.220 --> 00:14:47.980
itself on the user side,


00:14:47.980 --> 00:14:49.900
then that could be a nice way


00:14:49.900 --> 00:14:53.220
to make use of the visualizations in real practice.


00:14:53.220 --> 00:14:56.120
>> That would be really cool. Just install a browser helper


00:14:56.120 --> 00:15:00.080
that every time it detects a Panda statement.


00:15:00.080 --> 00:15:02.740
>> Yeah, like a little Chrome extension.


00:15:02.740 --> 00:15:04.900
That would be super neat. I would use that.


00:15:04.900 --> 00:15:07.580
>> Yeah, for sure. So let's


00:15:07.580 --> 00:15:10.900
click on "Start visualizing your Python code now."


00:15:10.900 --> 00:15:13.540
That'll pull this up and run.


00:15:13.540 --> 00:15:16.660
What happens for those of you who are not familiar


00:15:16.660 --> 00:15:19.140
with Python tutor and pandas tutor


00:15:19.140 --> 00:15:20.620
is it actually executes,


00:15:20.620 --> 00:15:22.780
you put a block of code in here


00:15:22.780 --> 00:15:25.460
and it actually executes it in a container


00:15:25.460 --> 00:15:27.260
or something like that, right?


00:15:27.260 --> 00:15:28.100
- Yeah, that's right.


00:15:28.100 --> 00:15:29.940
So it'll run your code in a Docker container


00:15:29.940 --> 00:15:31.420
on one of our servers.


00:15:31.420 --> 00:15:32.520
- Nice.


00:15:32.520 --> 00:15:36.460
So you don't have to just explore other people's code,


00:15:36.460 --> 00:15:37.300
right?


00:15:37.300 --> 00:15:38.920
You can put whatever you want in here.


00:15:38.920 --> 00:15:40.960
Now, the first thing that I think about


00:15:40.960 --> 00:15:43.020
when I think about data frames


00:15:43.020 --> 00:15:44.540
is data.


00:15:44.540 --> 00:15:46.900
Obviously you've got to get some data in here.


00:15:46.900 --> 00:15:49.260
And as we were talking about this Chrome extension,


00:15:49.260 --> 00:15:51.300
one of the challenges for me is,


00:15:51.300 --> 00:15:53.460
well, here's a cool little code snippet,


00:15:53.460 --> 00:15:57.700
but it has to have the proper data frame data backing it


00:15:57.700 --> 00:16:00.140
before it really means anything, right?


00:16:00.140 --> 00:16:01.460
- Yeah, that's right.


00:16:01.460 --> 00:16:02.420
It's a challenge.


00:16:02.420 --> 00:16:03.260
- It is.


00:16:03.260 --> 00:16:04.460
So how do you get data in here?


00:16:04.460 --> 00:16:07.620
It's, how about this?


00:16:07.620 --> 00:16:09.740
What are the options for getting data here?


00:16:09.740 --> 00:16:10.580
- Okay.


00:16:12.340 --> 00:16:15.180
So the one challenge about hosting a tool


00:16:15.180 --> 00:16:19.580
that runs code for other people is that it's a little bit,


00:16:19.580 --> 00:16:21.860
you run into issues when you let the tool


00:16:21.860 --> 00:16:23.140
also have internet access,


00:16:23.140 --> 00:16:24.820
'cause then people will start mining Bitcoins.


00:16:24.820 --> 00:16:25.660
- Yes, exactly.


00:16:25.660 --> 00:16:26.660
- Using these two.


00:16:26.660 --> 00:16:31.460
- Up to a code on the internet, how could it go wrong?


00:16:31.460 --> 00:16:33.940
I mean, I know with the Docker container,


00:16:33.940 --> 00:16:38.140
it's not gonna harm you or the other things most likely,


00:16:38.140 --> 00:16:39.880
unless there's an exploit fully in Docker,


00:16:39.880 --> 00:16:43.160
but they're going to exploit your computational resources


00:16:43.160 --> 00:16:44.160
and things like that, right?


00:16:44.160 --> 00:16:45.000
So that won't-- - That's right.


00:16:45.000 --> 00:16:46.760
- Yeah. - Yeah, yeah.


00:16:46.760 --> 00:16:49.760
- So you probably don't have full just root access


00:16:49.760 --> 00:16:51.760
to do whatever you feel like here.


00:16:51.760 --> 00:16:55.360
- Yeah, so the tool, it cuts off internet access


00:16:55.360 --> 00:17:00.360
for your code and it also imposes like a few memory limits.


00:17:00.360 --> 00:17:02.280
So I don't think you can write,


00:17:02.280 --> 00:17:05.080
you might be able to read or write to disk temporarily.


00:17:05.080 --> 00:17:07.920
I don't quite remember the details of that,


00:17:07.920 --> 00:17:10.320
But I do know that it does restrict internet access.


00:17:10.320 --> 00:17:11.760
So a lot of things like,


00:17:11.760 --> 00:17:15.520
one common way that we'll get datasets in class


00:17:15.520 --> 00:17:20.520
is we'll do pandas.read_csv and put in a URL of a CSV file.


00:17:20.520 --> 00:17:22.960
And unfortunately that doesn't work for the tool.


00:17:22.960 --> 00:17:26.520
So the way that we're getting around this right now


00:17:26.520 --> 00:17:29.920
is in the examples that we have for pandas tutor


00:17:29.920 --> 00:17:32.920
on the website, we have like inline CSVs.


00:17:32.920 --> 00:17:37.560
So we put a snippet of a CSV file as a Python string.


00:17:37.560 --> 00:17:39.720
And then we can read that string into pandas


00:17:39.720 --> 00:17:43.000
as if it was a CSV file directly.


00:17:43.000 --> 00:17:45.920
- Yeah, so you just drop it in as part of the code


00:17:45.920 --> 00:17:49.260
as a, what's that, a literal string,


00:17:49.260 --> 00:17:52.400
the triple quotes that'll go multi-line.


00:17:52.400 --> 00:17:54.800
So you just drop it in the middle of that, right?


00:17:54.800 --> 00:17:56.160
- Yeah, yeah, and it's not,


00:17:56.160 --> 00:17:59.120
I definitely don't think it's an ideal solution.


00:17:59.120 --> 00:18:01.480
What I would like,


00:18:01.480 --> 00:18:04.460
like one stepping stone to like a future solution


00:18:04.460 --> 00:18:06.800
would be to include some example datasets


00:18:06.800 --> 00:18:09.920
with Python, with Kindest Tutor so people can load in directly.


00:18:09.920 --> 00:18:12.800
>> That's a good idea.


00:18:12.800 --> 00:18:15.880
>> The R version of this tool has some built-in datasets


00:18:15.880 --> 00:18:19.200
because of R's built-in packages.


00:18:19.200 --> 00:18:22.320
R has, I think it comes with default,


00:18:22.320 --> 00:18:27.000
like the cars dataset and maybe some flowers datasets.


00:18:27.000 --> 00:18:29.040
You can load those in directly and that makes


00:18:29.040 --> 00:18:31.440
the R version of this a little bit more convenient.


00:18:31.440 --> 00:18:32.400
>> Okay. Interesting.


00:18:32.400 --> 00:18:35.680
>> We're thinking about ways of loading in data right now,


00:18:35.680 --> 00:18:39.580
But in terms of being able to load in arbitrary data,


00:18:39.580 --> 00:18:43.120
the only real option right now is to go into your CSV file


00:18:43.120 --> 00:18:44.840
and copy and paste out a few lines of it


00:18:44.840 --> 00:18:47.240
into the tool directly.


00:18:47.240 --> 00:18:50.900
- It's not a huge problem because the goal here


00:18:50.900 --> 00:18:54.880
is not to execute and you'll get results from it.


00:18:54.880 --> 00:18:59.000
It's like, what would it look like if I did this?


00:18:59.000 --> 00:18:59.840
- Yeah, that's right.


00:18:59.840 --> 00:19:04.800
So it's not really about like running,


00:19:04.800 --> 00:19:07.880
visualizing like gigabytes of data frame transformations


00:19:07.880 --> 00:19:11.660
because in those cases, we're gonna draw a bajillion arrows


00:19:11.660 --> 00:19:15.120
and it's really hard to see what's exactly happening.


00:19:15.120 --> 00:19:17.320
- Exactly, from an understanding perspective,


00:19:17.320 --> 00:19:18.320
it might be worse, right?


00:19:18.320 --> 00:19:20.520
Because it's like, as people will see


00:19:20.520 --> 00:19:22.160
as they explore panastutor.com,


00:19:22.160 --> 00:19:25.240
like it's putting lines and little interactive widgets


00:19:25.240 --> 00:19:27.540
all over the place to see how the data flows.


00:19:27.540 --> 00:19:28.900
And if you've got too much,


00:19:28.900 --> 00:19:31.600
then it's just lines everywhere.


00:19:31.600 --> 00:19:33.480
- Yeah, yeah.


00:19:33.480 --> 00:19:34.320
- Yeah, cool.


00:19:34.320 --> 00:19:37.100
So we've got this data, which we already talked about


00:19:37.100 --> 00:19:38.060
a little bit, the dogs.


00:19:38.060 --> 00:19:40.080
And so we've got like a Labrador Retriever,


00:19:40.080 --> 00:19:42.500
which is a sporting dog that is,


00:19:42.500 --> 00:19:47.240
it lives to 12 years, it's medium sized,


00:19:47.240 --> 00:19:50.280
and it's 67 pounds and so on.


00:19:50.280 --> 00:19:52.080
So that's the kind of data that we're working with.


00:19:52.080 --> 00:19:55.240
You jam that into an in-memory CSV string,


00:19:55.240 --> 00:19:59.800
use IO.stringIO to treat it like a file stream


00:19:59.800 --> 00:20:01.920
and tell pandas to read CSV.


00:20:01.920 --> 00:20:06.400
- Okay, so then you wanna know basically,


00:20:06.400 --> 00:20:07.240
let me go to the final,


00:20:07.240 --> 00:20:10.680
you wanna know given the longevity of a dog


00:20:10.680 --> 00:20:13.000
and it's given, no, sorry,


00:20:13.000 --> 00:20:16.460
given a type of dog like non-sporting, sporting, working,


00:20:16.460 --> 00:20:21.460
what is its median longevity in years and its weight?


00:20:21.460 --> 00:20:24.480
All right, so that's the kind of question


00:20:24.480 --> 00:20:25.320
that you're trying to answer,


00:20:25.320 --> 00:20:28.260
which is kind of incredible that given this data,


00:20:28.260 --> 00:20:30.940
it's only three lines of pandas to answer that.


00:20:30.940 --> 00:20:34.100
- Yeah, it has a lot behind the scenes.


00:20:34.100 --> 00:20:34.940
- Yeah.


00:20:34.940 --> 00:20:38.600
Yeah, that's pretty remarkable actually.


00:20:38.600 --> 00:20:42.740
So what happens when you say visualize this


00:20:42.740 --> 00:20:45.740
is it takes that same code block


00:20:45.740 --> 00:20:46.700
that we've been talking about,


00:20:46.700 --> 00:20:49.940
dogs, dog of size, equal equal medium,


00:20:49.940 --> 00:20:52.860
sort values, group by median and so on.


00:20:52.860 --> 00:20:55.660
And you put that on the screen


00:20:55.660 --> 00:20:59.720
where the parts that are not relevant at the moment


00:20:59.720 --> 00:21:03.300
are grayed out and the code that it's actually applying


00:21:03.300 --> 00:21:08.300
at that step is like strong or regular color font.


00:21:08.300 --> 00:21:09.920
That's really clever.


00:21:09.920 --> 00:21:11.480
How do you come up with that idea to say like,


00:21:11.480 --> 00:21:13.920
we're gonna show the flow through this code


00:21:13.920 --> 00:21:17.820
by like dimming the other parts of the code?


00:21:17.820 --> 00:21:21.000
- Yeah, so when we were making this tool,


00:21:21.000 --> 00:21:24.240
our first cut of this was actually just to show the code


00:21:24.240 --> 00:21:26.360
that we were running itself.


00:21:26.360 --> 00:21:27.200
So let's start- - Right, so you said like,


00:21:27.200 --> 00:21:29.900
- Size equal equal medium or something like that, right?


00:21:29.900 --> 00:21:31.000
- That's exactly right.


00:21:31.000 --> 00:21:33.320
So in the first version of this tool,


00:21:33.320 --> 00:21:36.280
we did like, if we're filtering a data frame


00:21:36.280 --> 00:21:37.760
and then like sorting it,


00:21:37.760 --> 00:21:40.000
we would just show the code for filtering first,


00:21:40.000 --> 00:21:41.960
but we show all the code for filtering.


00:21:41.960 --> 00:21:44.600
And then when we sort the data frame,


00:21:44.600 --> 00:21:47.000
then we would show the code for filtering and sorting


00:21:47.000 --> 00:21:50.480
because that's the snippet of code that we would execute


00:21:50.480 --> 00:21:51.680
or like visualize.


00:21:51.680 --> 00:21:54.480
And it ended up being a little bit,


00:21:55.440 --> 00:22:00.960
end up being like less helpful in our opinion when we had like longer chains,


00:22:00.960 --> 00:22:06.440
especially because when you have longer chains, it looks like there's like five


00:22:06.440 --> 00:22:09.560
things running, but really all we're visualizing is the last step.


00:22:09.560 --> 00:22:15.740
So what the solution we kind of came around to was to say, okay, well, we'll


00:22:15.740 --> 00:22:20.960
just display all the code that we're visualizing, but bold, like highlight


00:22:20.960 --> 00:22:23.120
the part that we're visualizing in this step.


00:22:23.160 --> 00:22:27.660
So if there's four steps, then we'll have like four little diagram displays,


00:22:27.660 --> 00:22:31.660
and we'll highlight the individual steps that we're running at each time.


00:22:31.660 --> 00:22:35.260
Yeah, there's a lot of subtleness in this tool that it takes a...


00:22:35.260 --> 00:22:40.360
On first glance, you don't see exactly how much it's communicating,


00:22:40.360 --> 00:22:42.360
but there's a lot of nice touches like that.


00:22:42.360 --> 00:22:49.160
So in this first step, it says we're going to go and filter down our dataset


00:22:49.160 --> 00:22:52.660
from all the different types of dogs, like large dogs, small dogs, and so on,


00:22:52.660 --> 00:22:56.920
to just look at medium sized breeds.


00:22:56.920 --> 00:22:59.980
So then we get to the thing that we were talking about


00:22:59.980 --> 00:23:02.360
where you've got two data frames


00:23:02.360 --> 00:23:05.800
as if you had done just like df.head or something


00:23:05.800 --> 00:23:09.640
where it puts the top and then like a few listings of them.


00:23:09.640 --> 00:23:10.480
- That's right.


00:23:10.480 --> 00:23:12.360
- But it puts them side by side, right?


00:23:12.360 --> 00:23:13.960
Tell us what's on the screen here.


00:23:13.960 --> 00:23:15.320
Describe this.


00:23:15.320 --> 00:23:17.660
- Yeah, so on the left,


00:23:17.660 --> 00:23:20.640
we display the original data frame dogs.


00:23:20.640 --> 00:23:22.920
And then on the right, we display the data frame dogs,


00:23:22.920 --> 00:23:25.880
but with the medium dogs filtered.


00:23:25.880 --> 00:23:28.800
So the right data frame only has medium dogs,


00:23:28.800 --> 00:23:30.480
and the left data frame has all the dogs


00:23:30.480 --> 00:23:31.840
in the original data frame.


00:23:31.840 --> 00:23:35.880
- Right, so that's the filtering that you might first see,


00:23:35.880 --> 00:23:39.280
but then you also have lines, which are pretty cool.


00:23:39.280 --> 00:23:40.100
- Yeah, yeah.


00:23:40.100 --> 00:23:44.760
So what we're doing here is we're showing which rows


00:23:44.760 --> 00:23:46.720
from the original data frame made it


00:23:46.720 --> 00:23:48.660
into the right data frame.


00:23:48.660 --> 00:23:52.020
So in the original data frame, it looks like rows three,


00:23:52.020 --> 00:23:54.740
or three through seven, and a few more other rows


00:23:54.740 --> 00:23:56.420
made it into the right side.


00:23:56.420 --> 00:23:58.220
And what we're doing is we're drawing arrows


00:23:58.220 --> 00:23:59.500
to show from the left side,


00:23:59.500 --> 00:24:03.540
which rows got copied over into the right side.


00:24:03.540 --> 00:24:04.900
- Yeah, so in that filter,


00:24:04.900 --> 00:24:07.340
you can sort of see them going across, which is fantastic.


00:24:07.340 --> 00:24:09.580
And the other part that's subtle,


00:24:09.580 --> 00:24:10.980
I guess there's two more,


00:24:10.980 --> 00:24:13.700
is this looks like a static picture,


00:24:13.700 --> 00:24:15.620
like it almost looks like a JPEG or something,


00:24:15.620 --> 00:24:17.980
but then as you move your mouse over,


00:24:17.980 --> 00:24:18.980
>> Yeah, that's right.


00:24:18.980 --> 00:24:20.220
>> You can do it on the right side too.


00:24:20.220 --> 00:24:21.340
If you hover on the right side,


00:24:21.340 --> 00:24:25.380
it'll show you the rows that went into that left side.


00:24:25.380 --> 00:24:26.060
>> Okay.


00:24:26.060 --> 00:24:27.340
>> You can do it on the right side too.


00:24:27.340 --> 00:24:27.700
>> Yeah.


00:24:27.700 --> 00:24:28.740
>> You can do it on the right side.


00:24:28.740 --> 00:24:29.020
>> Yeah.


00:24:29.020 --> 00:24:30.100
>> You can do it on the right side.


00:24:30.100 --> 00:24:30.340
>> Yeah.


00:24:30.340 --> 00:24:31.340
>> You can do it on the right side.


00:24:31.340 --> 00:24:31.540
>> Yeah.


00:24:31.540 --> 00:24:32.540
>> You can do it on the right side.


00:24:32.540 --> 00:24:32.740
>> Yeah.


00:24:32.740 --> 00:24:33.700
>> You can do it on the right side.


00:24:33.700 --> 00:24:33.980
>> Yeah.


00:24:33.980 --> 00:24:34.980
>> You can do it on the right side.


00:24:34.980 --> 00:24:35.300
>> Yeah.


00:24:35.300 --> 00:24:36.340
>> You can do it on the right side.


00:24:36.340 --> 00:24:36.700
>> Yeah.


00:24:36.700 --> 00:24:37.660
>> You can do it on the right side.


00:24:37.660 --> 00:24:37.980
>> Yeah.


00:24:37.980 --> 00:24:38.980
>> You can do it on the right side.


00:24:38.980 --> 00:24:41.140
piece of data along story.


00:24:41.140 --> 00:24:41.980
- Yeah, that's right.


00:24:41.980 --> 00:24:43.220
And you can do it on the right side too.


00:24:43.220 --> 00:24:44.380
So if you hover on the right side,


00:24:44.380 --> 00:24:48.100
it'll show you the rows that went into that left side.


00:24:48.100 --> 00:24:51.200
This is convenient when there's a lot of arrows.


00:24:51.200 --> 00:24:53.580
So this is like the main reason why we did this


00:24:53.580 --> 00:24:56.060
was in some cases there are a lot of arrows


00:24:56.060 --> 00:24:58.780
and you wanna just show a few of them.


00:24:58.780 --> 00:25:00.940
And to do that, the easiest way to do that


00:25:00.940 --> 00:25:03.140
in this tool right now is to highlight


00:25:03.140 --> 00:25:04.620
moving mouse over a row.


00:25:04.620 --> 00:25:05.460
- Yeah.


00:25:05.460 --> 00:25:06.700
- So that's one subtlety here.


00:25:06.700 --> 00:25:08.460
- In this case, it's not super relevant


00:25:08.460 --> 00:25:09.540
'cause it's just a filter,


00:25:09.540 --> 00:25:12.140
but when you get down to like group by and stuff like that,


00:25:12.140 --> 00:25:13.620
you're like, well, show me everything that went


00:25:13.620 --> 00:25:16.580
into this row on this group by like, well, these three.


00:25:16.580 --> 00:25:17.420
All right, that's pretty cool.


00:25:17.420 --> 00:25:18.240
- That's right.


00:25:18.240 --> 00:25:19.700
Yeah, so it's especially helpful


00:25:19.700 --> 00:25:21.780
when you have like multiple rows on the left


00:25:21.780 --> 00:25:24.420
going into a single row on the right


00:25:24.420 --> 00:25:26.540
or some weird combination of rows


00:25:26.540 --> 00:25:29.340
that otherwise like would be hard to see.


00:25:29.340 --> 00:25:30.420
- Yeah, for sure.


00:25:30.420 --> 00:25:35.980
One final thing is we're doing a sort by this comparison,


00:25:35.980 --> 00:25:37.500
or sorry, filter by this comparison


00:25:37.500 --> 00:25:40.580
on the size column of the data frame.


00:25:40.580 --> 00:25:43.940
So dog bracket size equal equal medium.


00:25:43.940 --> 00:25:50.900
On both of these, you've got a vertical outline on the size.


00:25:50.900 --> 00:25:52.780
That's another aspect that's really nice


00:25:52.780 --> 00:25:54.620
to highlight what's going on here.


00:25:54.620 --> 00:25:58.460
>> Yeah, that's right. We're drawing a box from the size column.


00:25:58.460 --> 00:26:01.180
That's meant to show the user


00:26:01.180 --> 00:26:03.740
like what column we're using for filtering.


00:26:03.740 --> 00:26:04.420
>> Yeah.


00:26:04.420 --> 00:26:06.500
>> There's actually one more thing here I want to point out,


00:26:06.500 --> 00:26:12.140
which is that if you display this data frame in a Jupyter Notebook,


00:26:12.140 --> 00:26:16.760
you might not actually see any medium-sized dogs


00:26:16.760 --> 00:26:19.620
because they're hidden in the middle rows of this data frame.


00:26:19.620 --> 00:26:20.900
>> Yeah.


00:26:20.900 --> 00:26:23.820
>> By default, Pandas displays


00:26:23.820 --> 00:26:26.900
a few rows in the top and the bottom of a data frame.


00:26:26.900 --> 00:26:29.300
But sometimes when you're filtering,


00:26:29.300 --> 00:26:31.520
the rows that you're filtering only come from the middle of


00:26:31.520 --> 00:26:33.740
the data frame which are hidden by default.


00:26:33.740 --> 00:26:37.680
So you have to really scrub through the data frame yourself


00:26:37.680 --> 00:26:40.540
in a Jupyter Notebook to see that there are medium dogs


00:26:40.540 --> 00:26:41.840
in the first place.


00:26:41.840 --> 00:26:44.080
So one thing we're doing with this tool is


00:26:44.080 --> 00:26:46.660
whenever we draw an arrow, we make sure that the rows


00:26:46.660 --> 00:26:48.560
on the left are visible to the user.


00:26:48.560 --> 00:26:51.320
So we'll selectively hide and show rows to make sure


00:26:51.320 --> 00:26:54.840
that the user can always see the rows


00:26:54.840 --> 00:26:56.960
that we're making use of.


00:26:56.960 --> 00:26:59.080
- Right, the most important ones are the ones


00:26:59.080 --> 00:26:59.900
that are included.


00:26:59.900 --> 00:27:01.920
So let's include some of them, right?


00:27:01.920 --> 00:27:02.760
- That's right.


00:27:02.760 --> 00:27:07.360
Yeah, you've got these little subtle one more,


00:27:07.360 --> 00:27:09.360
four more in this section and so on.


00:27:09.360 --> 00:27:10.480
So that's pretty neat.


00:27:10.480 --> 00:27:13.240
All right, so, so far we're step one,


00:27:13.240 --> 00:27:15.760
we've taken all the different types of dogs


00:27:15.760 --> 00:27:17.280
and we're now down to a data frame


00:27:17.280 --> 00:27:19.080
of just medium sized dogs.


00:27:19.080 --> 00:27:21.480
The next thing to do was what?


00:27:21.480 --> 00:27:22.960
Sort them, right?


00:27:22.960 --> 00:27:23.920
- Yeah, that's right.


00:27:23.920 --> 00:27:26.480
- Okay, so maybe tell us about this step here.


00:27:26.480 --> 00:27:27.920
- Yeah, so in this step,


00:27:27.920 --> 00:27:30.720
we're sorting the rows by the type column.


00:27:30.720 --> 00:27:33.480
So again, we're going to highlight or draw a box


00:27:33.480 --> 00:27:35.400
from the type column for the input and the output


00:27:35.400 --> 00:27:37.400
to show the user this is a column we're


00:27:37.400 --> 00:27:39.720
using for this operation.


00:27:39.720 --> 00:27:41.040
And here we're drawing arrows.


00:27:41.040 --> 00:27:43.360
And the arrows kind of crisscross in this diagram


00:27:43.360 --> 00:27:46.160
because some of the rows go to the top of the data frame


00:27:46.160 --> 00:27:48.160
and some of the rows go to the bottom of the data


00:27:48.160 --> 00:27:49.960
frame after we sort them.


00:27:49.960 --> 00:27:52.040
Yeah, as you would expect.


00:27:52.040 --> 00:27:53.920
But you can see after the sort, here's


00:27:53.920 --> 00:27:56.680
where everything sort of started and ended up.


00:27:56.680 --> 00:27:59.640
So that's pretty straightforward, I would say.


00:27:59.640 --> 00:28:01.560
Then you have a group by one.


00:28:01.560 --> 00:28:03.760
Tell us how you visualize the group by stuff


00:28:03.760 --> 00:28:07.880
because that's pretty interesting to think about.


00:28:07.880 --> 00:28:10.080
How do you represent the two-dimensional data


00:28:10.080 --> 00:28:12.520
but then additionally the groups?


00:28:12.520 --> 00:28:13.920
- Yeah, yeah.


00:28:13.920 --> 00:28:17.320
So when we group data, what we do visually


00:28:17.320 --> 00:28:22.080
is we like use the same color to highlight the backgrounds


00:28:22.080 --> 00:28:23.320
of each row within a group.


00:28:23.320 --> 00:28:26.480
So in this example, all the non-sporting dogs


00:28:26.480 --> 00:28:28.040
will get highlighted blue.


00:28:28.040 --> 00:28:30.160
All the sporting dogs get highlighted light green,


00:28:30.160 --> 00:28:32.480
and then all the working dogs get highlighted red.


00:28:32.480 --> 00:28:36.560
So you can see visually how the rows are put together


00:28:36.560 --> 00:28:38.120
in groups by pandas.


00:28:38.120 --> 00:28:39.220
- Yeah, fantastic.


00:28:39.220 --> 00:28:45.320
And then finally, simple but also very cool visualization


00:28:45.320 --> 00:28:46.880
is you just go to that data frame,


00:28:46.880 --> 00:28:49.400
you say, give us the median of that.


00:28:49.400 --> 00:28:52.160
And I guess, I don't know pandas super well,


00:28:52.160 --> 00:28:53.720
but I guess if you just say dot median,


00:28:53.720 --> 00:28:55.960
that'll just give you the median of all the columns


00:28:55.960 --> 00:28:56.880
that are numerical.


00:28:56.880 --> 00:28:58.000
Is that what happens?


00:28:58.000 --> 00:29:00.000
- That's right, so it'll give you the median


00:29:00.000 --> 00:29:01.620
for all the dog longevities


00:29:01.620 --> 00:29:03.480
and the median for all the dog weights.


00:29:03.480 --> 00:29:06.580
- Which is the, yeah, the two numerical columns, yep.


00:29:06.580 --> 00:29:07.420
Okay.


00:29:07.420 --> 00:29:10.240
- And in this case, what we're doing instead


00:29:10.240 --> 00:29:11.900
is because we've grouped the data frame


00:29:11.900 --> 00:29:13.900
before taking the median,


00:29:13.900 --> 00:29:15.960
Pandas does the median within each group.


00:29:15.960 --> 00:29:19.160
So it'll find the median of the median longevity


00:29:19.160 --> 00:29:21.400
and weight for the non-sporting dogs


00:29:21.400 --> 00:29:22.840
and then for the sporting dogs


00:29:22.840 --> 00:29:25.040
and then for the working dogs.


00:29:25.040 --> 00:29:26.880
So what we're doing in the diagram here


00:29:26.880 --> 00:29:30.880
is we're showing how the four non-sporting dogs


00:29:30.880 --> 00:29:35.440
on the left side get kind of aggregated together


00:29:35.440 --> 00:29:37.280
into one row on the right-hand side.


00:29:37.280 --> 00:29:39.400
So there's four arrows going from like four rows


00:29:39.400 --> 00:29:42.320
on the left side that go into one row on the right.


00:29:42.320 --> 00:29:43.400
- Yeah, that's awesome.


00:29:43.400 --> 00:29:47.720
And this is probably that case where the,


00:29:47.720 --> 00:29:50.000
showing where the lines go is most interesting


00:29:50.000 --> 00:29:53.000
because there's like the first four results


00:29:53.000 --> 00:29:55.640
are all non-sporting, so they contribute to row one.


00:29:55.640 --> 00:29:57.960
So you've got all these arrows going into that first group


00:29:57.960 --> 00:29:58.800
and so on.


00:29:58.800 --> 00:30:03.320
I think that really helps visualize how this is computed.


00:30:03.320 --> 00:30:04.160
- Yeah, and that's right.


00:30:04.160 --> 00:30:06.840
And group by is especially a tricky thing


00:30:06.840 --> 00:30:08.000
when we teach students,


00:30:08.000 --> 00:30:09.120
because students are like,


00:30:09.120 --> 00:30:10.120
I'm gonna start sorting,


00:30:10.120 --> 00:30:12.060
'cause like, you know, the rows get moved around.


00:30:12.060 --> 00:30:14.280
But when we do group by and then do something after,


00:30:14.280 --> 00:30:16.280
where all of a sudden, like my rows disappear,


00:30:16.280 --> 00:30:17.320
like where did my rows go?


00:30:17.320 --> 00:30:20.320
And so here we can see exactly where all the rows go.


00:30:20.320 --> 00:30:22.360
- Yeah, that is very tricky,


00:30:22.360 --> 00:30:25.560
because often you don't see that group by


00:30:25.560 --> 00:30:28.440
intermediate representation, right?


00:30:28.440 --> 00:30:29.280
- Yeah, yeah.


00:30:29.280 --> 00:30:32.340
And pandas actually does not help people


00:30:32.340 --> 00:30:33.400
understand the groupby.


00:30:33.400 --> 00:30:38.400
So in a notebook, if you do .groupby by itself,


00:30:38.400 --> 00:30:41.880
all you get back is like this pandas groupby object


00:30:41.880 --> 00:30:43.240
at some memory address.


00:30:43.240 --> 00:30:45.460
And that's for novices, it's like,


00:30:45.460 --> 00:30:47.320
I don't, I have no idea what just happened.


00:30:47.320 --> 00:30:50.080
And so what we decided to do here as kind of like


00:30:50.080 --> 00:30:54.720
a design step is instead of showing the default groupby


00:30:54.720 --> 00:30:57.000
like display, which is just text.


00:30:57.000 --> 00:30:59.260
We expanded it out to the original DataFrame


00:30:59.260 --> 00:31:00.880
plus some colors.


00:31:00.880 --> 00:31:04.420
- Yeah, yeah, it really is a great visualization.


00:31:04.420 --> 00:31:07.620
So I guess while we're talking about setting up your code,


00:31:07.620 --> 00:31:10.340
one thing that's interesting here is I can go to the top


00:31:10.340 --> 00:31:13.620
and I can jam in my code and I could do,


00:31:13.620 --> 00:31:15.820
maybe I could change this to like, I don't know, max.


00:31:15.820 --> 00:31:17.500
It's like work.


00:31:17.500 --> 00:31:20.640
- Let's see.


00:31:20.640 --> 00:31:21.820
- There we go.


00:31:21.820 --> 00:31:25.100
So I got a different result by running dot max


00:31:25.100 --> 00:31:27.860
and I might play and explore and so on.


00:31:27.860 --> 00:31:30.900
And then I'm like, I wanna save this.


00:31:30.900 --> 00:31:32.100
I'm gonna save it for myself


00:31:32.100 --> 00:31:33.980
or I wanna share it on Twitter


00:31:33.980 --> 00:31:36.580
because I just gotta say something on Twitter


00:31:36.580 --> 00:31:38.260
and let people check it out.


00:31:38.260 --> 00:31:39.620
I wanna put it in a gist.


00:31:39.620 --> 00:31:42.840
I want to share with my students, whatever.


00:31:42.840 --> 00:31:45.660
So you have a handy little thing at the bottom


00:31:45.660 --> 00:31:49.260
that lets you create sort of a shareable link type of thing.


00:31:49.260 --> 00:31:50.220
How does that work?


00:31:50.220 --> 00:31:54.820
you just base 64 encode the stuff at the top into the URL or what happens?


00:31:54.820 --> 00:31:58.020
It's actually even similar to base 64 encoding.


00:31:58.020 --> 00:32:01.140
We just put the code verbatim into the URL.


00:32:01.140 --> 00:32:02.820
If you're looking at the URL,


00:32:02.820 --> 00:32:04.380
like the Shareable URL,


00:32:04.380 --> 00:32:06.780
you'll see that we put the code like import


00:32:06.780 --> 00:32:09.060
hand this as PD into the URL there.


00:32:09.060 --> 00:32:10.860
Yeah, it's true. It's just HTML.


00:32:10.860 --> 00:32:12.500
It's URL encoded is what it is.


00:32:12.500 --> 00:32:13.860
It's just URL encoded.


00:32:13.860 --> 00:32:16.820
Yeah. So we don't do anything super special with it.


00:32:16.820 --> 00:32:20.220
And this works because URLs can actually be pretty long,


00:32:20.220 --> 00:32:22.780
like browsers will accept pretty long URLs.


00:32:22.780 --> 00:32:24.380
And so for a lot of cases,


00:32:24.380 --> 00:32:26.420
we actually can put the entirety of the code


00:32:26.420 --> 00:32:28.620
in the URL software sharing.


00:32:28.620 --> 00:32:29.820
- Yeah, that's cool.


00:32:29.820 --> 00:32:32.380
So people can come down here and they can copy this URL


00:32:32.380 --> 00:32:34.460
and then they can do whatever they want.


00:32:34.460 --> 00:32:36.260
Either save it as a bookmark for themselves


00:32:36.260 --> 00:32:37.260
or share it, right?


00:32:37.260 --> 00:32:38.100
That's cool.


00:32:38.100 --> 00:32:38.920
- Yeah, that's right.


00:32:38.920 --> 00:32:43.100
So the idea is if I had, let's say,


00:32:43.100 --> 00:32:45.580
like an email I'm sending to a colleague


00:32:45.580 --> 00:32:48.380
and I send them a little picture of data frames


00:32:48.380 --> 00:32:50.900
with some arrows, I can also send this URL


00:32:50.900 --> 00:32:53.020
which will let the other person view


00:32:53.020 --> 00:32:55.520
the original code I used to create the diagrams.


00:32:55.520 --> 00:32:58.380
- Sure, so maybe it makes sense to do a snapshot,


00:32:58.380 --> 00:33:01.060
screenshot of just one step and then you say,


00:33:01.060 --> 00:33:02.680
well, here you can explore the whole thing


00:33:02.680 --> 00:33:05.380
and rerun it and so on.


00:33:05.380 --> 00:33:09.360
Also, it kind of leads to the reproducible publications,


00:33:09.360 --> 00:33:11.140
reproducible science.


00:33:11.140 --> 00:33:14.400
If you're trying to explain to people what this step does,


00:33:14.400 --> 00:33:17.360
it might be worth putting that in the paper, right?


00:33:17.360 --> 00:33:18.440
- Yeah, exactly.


00:33:18.440 --> 00:33:19.280
Yeah.


00:33:19.280 --> 00:33:22.280
Yeah, as one use case we imagined was like,


00:33:22.280 --> 00:33:23.480
let's say for a lecture slide,


00:33:23.480 --> 00:33:26.120
I'll take a screenshot of this page.


00:33:26.120 --> 00:33:28.000
I can also put in the URL,


00:33:28.000 --> 00:33:30.360
like some small text at the bottom of the lecture slides


00:33:30.360 --> 00:33:32.560
so people can play around with it afterward.


00:33:32.560 --> 00:33:36.200
- You need a URL shortening service,


00:33:36.200 --> 00:33:40.400
like a pandas.toot.or/


00:33:40.400 --> 00:33:41.240
- Totally.


00:33:41.240 --> 00:33:43.000
Yeah, yeah.


00:33:43.000 --> 00:33:45.000
- I don't even know if not ORs or domains,


00:33:45.000 --> 00:33:45.840
but they should be.


00:33:45.840 --> 00:33:47.140
- I don't know, maybe.


00:33:47.140 --> 00:33:51.000
- But like a bitly equivalent of a short one, yeah.


00:33:51.000 --> 00:33:51.840
Cool.


00:33:51.840 --> 00:33:54.040
- Yeah.


00:33:54.040 --> 00:33:56.440
- I do see there's a place I can suggest improvements.


00:33:56.440 --> 00:33:58.560
So like, I can just talk to you.


00:33:58.560 --> 00:33:59.920
- Yeah, just let us, yeah, yeah, yeah.


00:33:59.920 --> 00:34:02.080
Just send us a little email.


00:34:02.080 --> 00:34:06.720
Yeah, one thing we do wanna do is to include like a,


00:34:06.720 --> 00:34:10.360
like save this diagram as a PNG or SVG button.


00:34:10.360 --> 00:34:11.200
- Oh, nice.


00:34:11.200 --> 00:34:12.300
- We haven't gone around to it,


00:34:12.300 --> 00:34:15.040
but we would like to include that at some point.


00:34:15.040 --> 00:34:15.880
- Yeah, that'd be great.


00:34:15.880 --> 00:34:17.280
You know what would be fantastic is save it


00:34:17.280 --> 00:34:19.280
as an animated GIF or something like that.


00:34:19.280 --> 00:34:20.120
- Yeah, that would be cool.


00:34:20.120 --> 00:34:23.880
- Or you could sort of see like the little arrows


00:34:23.880 --> 00:34:26.240
run by or something like, yeah, that'd be fun.


00:34:26.240 --> 00:34:28.040
- That's a cool idea, yeah.


00:34:28.040 --> 00:34:29.440
Yeah, I'll think about that.


00:34:29.440 --> 00:34:31.440
- Well, just give me more work.


00:34:31.440 --> 00:34:32.560
So super cool project.


00:34:32.560 --> 00:34:36.740
This project is a part of your PhD work, right?


00:34:36.740 --> 00:34:38.720
- Yeah, that's right.


00:34:38.720 --> 00:34:39.560
- Yeah.


00:34:39.560 --> 00:34:41.340
What's next?


00:34:41.340 --> 00:34:42.880
Where's it going from here?


00:34:42.880 --> 00:34:48.080
- So the-- - Thesis?


00:34:48.080 --> 00:34:50.140
- Dissertation center. - Yeah, so for me,


00:34:50.140 --> 00:34:54.160
yeah, so for me personally, I would love to,


00:34:54.160 --> 00:34:57.420
I'm looking to graduate like next year's spring.


00:34:57.420 --> 00:35:00.400
So my hope is that this project will be


00:35:00.400 --> 00:35:02.560
like a major piece of the thesis


00:35:02.560 --> 00:35:05.100
and I'm gonna get to talk about it a lot.


00:35:05.100 --> 00:35:08.800
And as for the tool, Next Steps,


00:35:08.800 --> 00:35:11.520
In the short term, we'd like to expand


00:35:11.520 --> 00:35:13.400
the types of visualizations it can do.


00:35:13.400 --> 00:35:17.440
So right now it doesn't know how to do joins, for instance,


00:35:17.440 --> 00:35:19.160
or pivots.


00:35:19.160 --> 00:35:20.840
And so we really like to include those


00:35:20.840 --> 00:35:23.720
because those also tend to be really confusing for people


00:35:23.720 --> 00:35:24.760
learning pandas for the first time.


00:35:24.760 --> 00:35:27.120
- They're in the group by category of hard to understand.


00:35:27.120 --> 00:35:28.200
Yeah.


00:35:28.200 --> 00:35:29.600
- Yeah, yeah.


00:35:29.600 --> 00:35:32.240
- I think they're worse actually.


00:35:32.240 --> 00:35:35.120
- Yeah, it's a toss up, I think, in my experience.


00:35:35.120 --> 00:35:37.560
People, students who struggle,


00:35:37.560 --> 00:35:39.740
So you'll always have one, at least one of those three


00:35:39.740 --> 00:35:41.780
to struggle with, group by, joins, and pivots.


00:35:41.780 --> 00:35:45.260
Those three are just really confusing.


00:35:45.260 --> 00:35:47.940
And longer term for this tool, we're


00:35:47.940 --> 00:35:50.500
thinking it would be great to have it,


00:35:50.500 --> 00:35:53.820
like as I alluded to a little bit earlier,


00:35:53.820 --> 00:35:57.140
like have a version of it that we can embed into Stack


00:35:57.140 --> 00:36:01.700
Overflow or even the Panis documentation itself.


00:36:01.700 --> 00:36:05.660
And we're also looking at different alternative ways


00:36:05.660 --> 00:36:10.860
like drawing arrows and colors to see what can help students. And then we're looking,


00:36:10.860 --> 00:36:15.100
we're also looking at like ways of applying this general like code analysis approach to


00:36:15.100 --> 00:36:20.140
other tools for visualization. - Yeah, there's certainly other tools


00:36:20.140 --> 00:36:26.540
that could benefit from it, although not so many of them as popular as pandas. But for example,


00:36:26.540 --> 00:36:33.420
like Dask. Dask is panda-like, but it's fairly complicated what happens to compute stuff.


00:36:34.540 --> 00:36:37.900
I mean, not understanding the ideas of it necessarily, but it's like, okay, well, it's


00:36:37.900 --> 00:36:41.020
going to go after this cluster and these things happened.


00:36:41.020 --> 00:36:42.700
There could be interesting things there.


00:36:42.700 --> 00:36:44.020
Yeah, totally.


00:36:44.020 --> 00:36:48.980
Like there's Dask and now there's like other tools like Ray and like, there's even, even


00:36:48.980 --> 00:36:52.700
like if we're going really far out, there's like tools like Spark and like MapReduce and


00:36:52.700 --> 00:36:57.180
stuff that distribute computing across different computers.


00:36:57.180 --> 00:37:00.580
Visualizing those would be really cool, I think, because, you know, for me as a user


00:37:00.580 --> 00:37:05.700
of those tools. Sometimes it's like when like one computer breaks, it's really hard to debug


00:37:05.700 --> 00:37:11.780
and figure out what happened. It definitely is. Another one is just database queries.


00:37:11.780 --> 00:37:17.220
Oh yeah, I mean it's pretty similar. You've got like group bys, you've got sorting, you've got


00:37:17.220 --> 00:37:26.660
filtering, select where clauses, and yeah, I think that would be a pretty natural match as well. But


00:37:26.660 --> 00:37:28.700
- Yeah, there's a lot of places for it to go.


00:37:28.700 --> 00:37:30.660
So, very cool.


00:37:30.660 --> 00:37:32.820
Are you using this in any of your courses


00:37:32.820 --> 00:37:33.900
and things like that?


00:37:33.900 --> 00:37:38.860
- At the moment, I'm not teaching any data science courses,


00:37:38.860 --> 00:37:40.820
but this summer I will be teaching a course


00:37:40.820 --> 00:37:42.700
at UC San Diego.


00:37:42.700 --> 00:37:44.980
And so I'm really hoping to use this tool


00:37:44.980 --> 00:37:47.440
to like make some little diagrams to copy and paste


00:37:47.440 --> 00:37:49.300
into my lecture slides.


00:37:49.300 --> 00:37:51.140
Before I would make these diagrams manually


00:37:51.140 --> 00:37:54.900
using like Google slides, like arrows and shapes and such,


00:37:54.900 --> 00:37:56.260
but it's a huge pain.


00:37:56.260 --> 00:37:58.980
- It's so painful.


00:37:58.980 --> 00:38:00.580
As somebody who does online courses,


00:38:00.580 --> 00:38:02.060
I'm like, I really want to put some arrows


00:38:02.060 --> 00:38:02.940
and show how this goes.


00:38:02.940 --> 00:38:05.220
Like, oh boy, this is a lot of work.


00:38:05.220 --> 00:38:06.260
- It's a lot of work.


00:38:06.260 --> 00:38:07.620
It's a lot of work.


00:38:07.620 --> 00:38:09.540
- Yeah, I've actually used a Python tutor


00:38:09.540 --> 00:38:12.900
in my beginner Python course to show people like, okay,


00:38:12.900 --> 00:38:15.660
when you have two variables,


00:38:15.660 --> 00:38:18.300
but they point to the same object in memory,


00:38:18.300 --> 00:38:20.580
here's why changing one of them changes the other,


00:38:20.580 --> 00:38:22.060
for example, 'cause you're really the same.


00:38:22.060 --> 00:38:24.140
They're just like pointing at the same things,


00:38:24.140 --> 00:38:25.940
but they're changing the thing they point at.


00:38:25.940 --> 00:38:27.200
and whatnot.


00:38:27.200 --> 00:38:28.040
It's pretty cool.


00:38:28.040 --> 00:38:29.100
So very nice.


00:38:29.100 --> 00:38:31.800
Yeah, and you're also working on a book, right?


00:38:31.800 --> 00:38:33.940
- Yeah, it's a book.


00:38:33.940 --> 00:38:36.520
The website right now,


00:38:36.520 --> 00:38:38.780
it says "Principles and Techniques of Data Science,"


00:38:38.780 --> 00:38:42.160
but we're renaming the book to "Learning Data Science."


00:38:42.160 --> 00:38:43.600
- Okay, cool.


00:38:43.600 --> 00:38:45.060
Now, when is that coming out?


00:38:45.060 --> 00:38:49.000
- Ooh, that's a great question.


00:38:49.000 --> 00:38:50.880
A question to ask every book author.


00:38:50.880 --> 00:38:51.720
- Yes, I know.


00:38:53.400 --> 00:38:56.280
- We're really hoping to get a first cut of it


00:38:56.280 --> 00:38:58.000
by the end of this year.


00:38:58.000 --> 00:39:02.000
We're about like one third or halfway


00:39:02.000 --> 00:39:03.840
through the content right now,


00:39:03.840 --> 00:39:07.800
but we're hoping to get like the first cut of it out


00:39:07.800 --> 00:39:08.720
by the end of this year,


00:39:08.720 --> 00:39:12.040
and then go through the whole like editing cycle


00:39:12.040 --> 00:39:15.360
and like publication, like before publication work


00:39:15.360 --> 00:39:17.880
and have it published sometime a year after.


00:39:17.880 --> 00:39:18.720
- Yeah, fantastic.


00:39:18.720 --> 00:39:20.400
Well, good luck on that.


00:39:20.400 --> 00:39:22.720
You know, we're getting a little bit short on time


00:39:22.720 --> 00:39:25.800
mostly because I have a extra tight constraint today.


00:39:25.800 --> 00:39:26.960
Sorry about that.


00:39:26.960 --> 00:39:27.800
- No problem.


00:39:27.800 --> 00:39:30.440
- But let's talk a little bit about the internals.


00:39:30.440 --> 00:39:33.320
So we talked about uploading some code


00:39:33.320 --> 00:39:35.880
in the text area field of the website,


00:39:35.880 --> 00:39:39.200
how it runs in a Docker container, it has restrictions,


00:39:39.200 --> 00:39:40.880
but how do you, I'll pull this off,


00:39:40.880 --> 00:39:43.720
like understanding some of these things


00:39:43.720 --> 00:39:47.240
that we're getting color and pictures and arrows for.


00:39:47.240 --> 00:39:50.840
I don't think that's built into Pandas or Python, is it?


00:39:50.840 --> 00:39:51.760
- No, it's not.


00:39:51.760 --> 00:39:56.760
So what we're doing to actually make this work


00:39:56.760 --> 00:40:01.120
is we're parsing the code behind the scenes


00:40:01.120 --> 00:40:02.920
and then running each step,


00:40:02.920 --> 00:40:06.720
like using a sort of like a debugger.


00:40:06.720 --> 00:40:10.640
So what we're doing is we parse the code


00:40:10.640 --> 00:40:13.120
to split it up into the steps that we want to run.


00:40:13.120 --> 00:40:15.240
So in this case, we would split it up to say


00:40:15.240 --> 00:40:18.440
the first step is dogs and the second step is filtering


00:40:18.440 --> 00:40:20.360
and the third step is sorting and then grouping


00:40:20.360 --> 00:40:21.620
and taking the max.


00:40:21.620 --> 00:40:23.400
And then what happens-


00:40:23.400 --> 00:40:26.200
- So you just go all the way down to like disassembly.


00:40:26.200 --> 00:40:27.440
Do you like this.dis,


00:40:27.440 --> 00:40:30.120
'cause that's more than this.


00:40:30.120 --> 00:40:31.280
Okay.


00:40:31.280 --> 00:40:32.120
- Yeah, yeah.


00:40:32.120 --> 00:40:34.240
So we're trying to keep it roughly


00:40:34.240 --> 00:40:36.480
at like the level of function calls.


00:40:36.480 --> 00:40:40.280
So we just split up into its individual function calls.


00:40:40.280 --> 00:40:43.560
And in this case, we have like a slice syntax for filtering.


00:40:43.560 --> 00:40:44.960
So we split that up as well.


00:40:44.960 --> 00:40:47.480
- Okay.


00:40:47.480 --> 00:40:49.200
So then you basically run each step.


00:40:49.200 --> 00:40:51.240
if you have the before data frame


00:40:51.240 --> 00:40:53.080
and the after data frame of each.


00:40:53.080 --> 00:40:54.080
- That's right.


00:40:54.080 --> 00:40:55.400
Yeah, so we run each step.


00:40:55.400 --> 00:40:57.240
- Unwound regression, yeah.


00:40:57.240 --> 00:40:58.080
- We run each step,


00:40:58.080 --> 00:41:00.800
get like the left-hand side and the right-hand side.


00:41:00.800 --> 00:41:04.160
And then we essentially have some like special rules


00:41:04.160 --> 00:41:06.040
where if we do start values,


00:41:06.040 --> 00:41:08.320
we'll like use this rule for drawing arrows.


00:41:08.320 --> 00:41:09.280
If we see a group by,


00:41:09.280 --> 00:41:10.760
we'll use this rule for drawing arrows.


00:41:10.760 --> 00:41:13.840
So underneath the hood is really just a lot of heuristics


00:41:13.840 --> 00:41:16.560
and rules for specific functions.


00:41:16.560 --> 00:41:19.500
So you might say, all right, if it's doing a group by


00:41:19.500 --> 00:41:21.460
and here's the groups,


00:41:21.460 --> 00:41:23.180
here's how we're going to understand


00:41:23.180 --> 00:41:24.480
which group this goes to.


00:41:24.480 --> 00:41:27.720
So you're like, all right, it's grouping on the type column.


00:41:27.720 --> 00:41:29.900
And so then you know which thing to point it to.


00:41:29.900 --> 00:41:30.940
I see.


00:41:30.940 --> 00:41:31.780
- Yeah, that's right.


00:41:31.780 --> 00:41:34.420
And we could have done a smarter approach


00:41:34.420 --> 00:41:37.220
using like some like, I don't know,


00:41:37.220 --> 00:41:39.180
some deeper co-analysis or machine learning.


00:41:39.180 --> 00:41:41.700
But I think for teaching purposes,


00:41:41.700 --> 00:41:43.740
we really wanted to avoid the case


00:41:43.740 --> 00:41:46.580
where we draw arrows wrongly.


00:41:46.580 --> 00:41:49.180
So we draw arrows that are not supposed to be there.


00:41:49.180 --> 00:41:50.260
(laughing)


00:41:50.260 --> 00:41:51.260
Yeah.


00:41:51.260 --> 00:41:53.380
- That'd be confusing, wouldn't it?


00:41:53.380 --> 00:41:54.300
- Yeah, yeah.


00:41:54.300 --> 00:41:56.020
And especially for learners,


00:41:56.020 --> 00:41:58.980
we would rather just not draw arrows and draw wrong arrows.


00:41:58.980 --> 00:42:00.540
I think that was our main,


00:42:00.540 --> 00:42:02.060
one of the main design decisions here.


00:42:02.060 --> 00:42:06.980
So that's why we resorted to a simple approach


00:42:06.980 --> 00:42:08.460
of just using rules and heuristics,


00:42:08.460 --> 00:42:09.860
but it gets the job done.


00:42:09.860 --> 00:42:10.700
- Sure.


00:42:11.860 --> 00:42:13.780
What about source code?


00:42:13.780 --> 00:42:17.740
Can people come and check it out and play with it?


00:42:17.740 --> 00:42:20.540
Or is it really they can just play with the website?


00:42:20.540 --> 00:42:25.260
- Right now only the website's available for the public.


00:42:25.260 --> 00:42:26.180
The source code right now,


00:42:26.180 --> 00:42:29.380
we're thinking about like making it open source,


00:42:29.380 --> 00:42:31.260
but right now it's not really in a state


00:42:31.260 --> 00:42:33.540
for the rest of the world to see.


00:42:33.540 --> 00:42:38.500
- What about the front end stuff here?


00:42:38.500 --> 00:42:40.980
When I went and did a view source on it,


00:42:40.980 --> 00:42:44.280
there's not a lot to see basically some JavaScript


00:42:44.280 --> 00:42:49.280
and like five or six empty locations on the page, right?


00:42:49.280 --> 00:42:52.440
What's the story there?


00:42:52.440 --> 00:42:53.280
- Yeah, yeah.


00:42:53.280 --> 00:42:55.120
So the front end code is a similar story


00:42:55.120 --> 00:42:55.960
as the back end code.


00:42:55.960 --> 00:42:59.400
It's like pretty messy and very specific


00:42:59.400 --> 00:43:01.400
to our workflows right now.


00:43:01.400 --> 00:43:04.200
So getting, so essentially the issue right now


00:43:04.200 --> 00:43:08.320
is getting it set up on someone else's computer


00:43:08.320 --> 00:43:10.240
would be like a massive pain.


00:43:10.240 --> 00:43:12.840
That's one of the main issues with releasing


00:43:12.840 --> 00:43:15.960
the source code out is that if we were to release it


00:43:15.960 --> 00:43:18.200
right now as open source and people want to play around


00:43:18.200 --> 00:43:20.640
with it, then we would probably get tons of emails


00:43:20.640 --> 00:43:22.880
from people asking how to like debug this one


00:43:22.880 --> 00:43:24.760
like really weird step that we're doing


00:43:24.760 --> 00:43:26.280
or how to make it work.


00:43:26.280 --> 00:43:28.440
So that's something that we'd like to get around to,


00:43:28.440 --> 00:43:31.520
but for the first release, unfortunately we ran out of time


00:43:31.520 --> 00:43:33.280
and we just wanted to get the tool out the door.


00:43:33.280 --> 00:43:34.120
- Yeah, I know.


00:43:34.120 --> 00:43:36.000
That's the most useful bit is for people to go


00:43:36.000 --> 00:43:37.280
and play with it, right?


00:43:37.280 --> 00:43:38.120
- Yeah, yeah.


00:43:39.560 --> 00:43:40.480
- Fantastic.


00:43:40.480 --> 00:43:44.920
Any chance of an offline version, like a progressive web app?


00:43:44.920 --> 00:43:50.760
- So I actually would like a version of this tool


00:43:50.760 --> 00:43:53.960
that would work as a JupyterLab extension


00:43:53.960 --> 00:43:57.000
because JupyterLab has like a Python backend


00:43:57.000 --> 00:43:58.800
that we can make use of.


00:43:58.800 --> 00:44:00.880
So I could totally imagine this being used


00:44:00.880 --> 00:44:02.320
like directly in a notebook


00:44:02.320 --> 00:44:04.440
and displaying the diagrams directly in a notebook


00:44:04.440 --> 00:44:07.380
without needing to go to panastere.com.


00:44:08.800 --> 00:44:12.360
- What about WebAssembly and PyIodide?


00:44:12.360 --> 00:44:14.360
- Oh yeah, we thought about that too.


00:44:14.360 --> 00:44:17.040
So that's another like far-fetched idea we like to do.


00:44:17.040 --> 00:44:20.240
We've seen like, PyIodide right now is just super cool to me


00:44:20.240 --> 00:44:21.080
and I really like it.


00:44:21.080 --> 00:44:23.900
- And you could turn on like the internet accessibility


00:44:23.900 --> 00:44:24.740
and stuff again, right?


00:44:24.740 --> 00:44:25.800
Because it's all running,


00:44:25.800 --> 00:44:27.160
they're only gonna hack themselves


00:44:27.160 --> 00:44:29.520
or use their own resources, right?


00:44:29.520 --> 00:44:30.360
- Yeah, yeah.


00:44:30.360 --> 00:44:31.200
You know what?


00:44:31.200 --> 00:44:32.240
That's great, that's a great point.


00:44:32.240 --> 00:44:33.380
I didn't even think about that,


00:44:33.380 --> 00:44:34.760
but that totally makes sense.


00:44:34.760 --> 00:44:35.840
- It's coming along pretty well.


00:44:35.840 --> 00:44:38.120
And Steve Dower was just telling us


00:44:38.120 --> 00:44:41.400
that they're starting to do official WebAssembly builds


00:44:41.400 --> 00:44:42.800
out of CPython.


00:44:42.800 --> 00:44:47.800
So it's a little more stable than some other projects.


00:44:47.800 --> 00:44:50.880
So I think there's progress in the WebAssembly space


00:44:50.880 --> 00:44:54.000
and the Pyodide guys have got some of the


00:44:54.000 --> 00:44:56.520
data science libraries compiled into it.


00:44:56.520 --> 00:44:57.800
- Yeah, they got a lot of them working.


00:44:57.800 --> 00:44:59.240
- Yeah, so, yeah, possibly.


00:44:59.240 --> 00:45:01.080
I don't know what that means in terms of your system


00:45:01.080 --> 00:45:03.240
that understands and takes it apart.


00:45:03.240 --> 00:45:06.720
That could be totally tricky, but maybe that's an option.


00:45:06.720 --> 00:45:08.800
- Yeah, I think it's really viable.


00:45:08.800 --> 00:45:10.480
I'd like to, I really like to look into it


00:45:10.480 --> 00:45:11.880
in the months to come.


00:45:11.880 --> 00:45:13.220
- Yeah, for sure.


00:45:13.220 --> 00:45:16.360
All right, well, Sam, I'm afraid that's all the time


00:45:16.360 --> 00:45:17.600
we got to talk about today.


00:45:17.600 --> 00:45:21.120
So before though, we get to move off of this.


00:45:21.120 --> 00:45:24.040
Tell us about the final two questions.


00:45:24.040 --> 00:45:25.440
If you're gonna write some Python code,


00:45:25.440 --> 00:45:28.000
what editor are you using these days?


00:45:28.000 --> 00:45:30.520
- My editor right now is VS Code.


00:45:30.520 --> 00:45:35.320
I've flipped, I've jumped editors from like Notepad++


00:45:35.320 --> 00:45:37.720
to like Sublime to like Vim and Emacs.


00:45:37.720 --> 00:45:40.120
And now I'm settling into the disco world.


00:45:40.120 --> 00:45:40.960
It's got me.


00:45:40.960 --> 00:45:41.780
- Yeah, cool.


00:45:41.780 --> 00:45:42.620
Right on.


00:45:42.620 --> 00:45:44.660
And then notable PyPI package.


00:45:44.660 --> 00:45:48.080
Yeah, so we found that, that's really cool.


00:45:48.080 --> 00:45:53.200
- Honestly, I'm really vibing with TQDM right now.


00:45:53.200 --> 00:45:54.920
I forget, I always forget how to pronounce it,


00:45:54.920 --> 00:45:55.920
but I really liked that one.


00:45:55.920 --> 00:45:58.940
It displays a little progress bar for looping.


00:45:58.940 --> 00:46:01.680
And I just think it's a really nicely done package.


00:46:01.680 --> 00:46:04.560
- Yeah, if you just do a wrap, just do a decorator


00:46:04.560 --> 00:46:06.340
and you do a for loop or something like that.


00:46:06.340 --> 00:46:07.700
I don't remember the exact API,


00:46:07.700 --> 00:46:09.180
but then you just do a for loop


00:46:09.180 --> 00:46:11.260
and it'll just automatically do a progress bar


00:46:11.260 --> 00:46:12.100
for what you're doing.


00:46:12.100 --> 00:46:12.920
- That's right. - Fantastic.


00:46:12.920 --> 00:46:14.820
Yeah, it's really good. - That's right, I love it.


00:46:14.820 --> 00:46:16.640
- Yeah, super cool.


00:46:16.640 --> 00:46:17.940
All right, final call to action.


00:46:17.940 --> 00:46:21.140
People want to visualize their pandas code.


00:46:21.140 --> 00:46:22.720
What do you tell them?


00:46:22.720 --> 00:46:25.900
- I tell them go to pandasquery.com


00:46:25.900 --> 00:46:28.500
and put your code in and see what comes out.


00:46:28.500 --> 00:46:30.100
- Yeah, awesome.


00:46:30.100 --> 00:46:32.180
Well, and I encourage people when you go there,


00:46:32.180 --> 00:46:34.220
try to interact with the diagrams, right?


00:46:34.220 --> 00:46:36.480
There's a lot of stuff going on that it doesn't look


00:46:36.480 --> 00:46:38.280
at first interactive, but it is.


00:46:38.280 --> 00:46:40.680
So yeah, go play around.


00:46:40.680 --> 00:46:42.760
Sam, thanks for being on the show.


00:46:42.760 --> 00:46:43.600
- Thanks, Michael.


00:46:43.600 --> 00:46:44.440
It was really great.


00:46:44.440 --> 00:46:45.480
It was a lot of fun for me,


00:46:45.480 --> 00:46:47.240
and I really enjoyed talking to you about it.


00:46:47.240 --> 00:46:48.680
- Same, bye.


00:46:48.680 --> 00:46:49.680
- Okay, see ya.

