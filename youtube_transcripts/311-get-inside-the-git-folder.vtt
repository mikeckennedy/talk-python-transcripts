WEBVTT

00:00:00.000 --> 00:00:02.300
- Inside, do I need headphones?


00:00:02.300 --> 00:00:03.200
- No, you're good.


00:00:03.200 --> 00:00:05.000
- Very nice.


00:00:05.000 --> 00:00:07.660
- Everyone out there in the live stream,


00:00:07.660 --> 00:00:09.220
actually, if you had headphones, that would be great.


00:00:09.220 --> 00:00:10.500
If you wanna put those on.


00:00:10.500 --> 00:00:12.380
If you don't have them, it's super handy, it's fine,


00:00:12.380 --> 00:00:14.500
but it doesn't make a difference for StreamYard,


00:00:14.500 --> 00:00:15.780
but for Zencastr, it does.


00:00:15.780 --> 00:00:17.340
Hello, everyone out there in the live stream.


00:00:17.340 --> 00:00:20.140
So happy to have you here with us today.


00:00:20.140 --> 00:00:24.040
Rob, greetings all the way down in Australia.


00:00:24.040 --> 00:00:24.940
I love that place.


00:00:24.940 --> 00:00:26.980
It's been too long since I've been to Sydney


00:00:26.980 --> 00:00:29.620
and I haven't been in other places there.


00:00:29.620 --> 00:00:34.620
So, but thanks to the internet, we're there.


00:00:34.620 --> 00:00:37.600
All right, Rob, are you ready to do this show?


00:00:37.600 --> 00:00:39.440
- I am.


00:00:39.440 --> 00:00:41.880
- Ready to tell the world about the Git folder


00:00:41.880 --> 00:00:42.720
and all the Git things?


00:00:42.720 --> 00:00:44.800
- I hear it's a pretty cool thing.


00:00:44.800 --> 00:00:46.060
- Awesome, all right.


00:00:46.060 --> 00:00:48.180
Definitely, the people are gonna love it.


00:00:48.180 --> 00:00:49.020
- Yeah.


00:00:49.020 --> 00:00:52.180
- Rob, welcome to Talk Python To Me.


00:00:52.180 --> 00:00:55.180
- So glad to be here.


00:00:55.180 --> 00:00:58.460
I'm really excited that I get to join you.


00:00:58.460 --> 00:01:00.020
- Great to meet your audience.


00:01:00.020 --> 00:01:01.260
- Yeah, it's great to have you here.


00:01:01.260 --> 00:01:04.220
You got to meet probably a very small sliver


00:01:04.220 --> 00:01:06.580
of my audience, an intersection.


00:01:06.580 --> 00:01:09.160
You gave a talk at the Python web conference recently


00:01:09.160 --> 00:01:10.940
that I also spoke at.


00:01:10.940 --> 00:01:12.660
And your talk was really interesting


00:01:12.660 --> 00:01:15.300
and certainly relevant to the Python folks.


00:01:15.300 --> 00:01:16.900
So I thought it'd be cool to have you over here.


00:01:16.900 --> 00:01:19.300
And I should give credit to Paul Everett


00:01:19.300 --> 00:01:20.140
for connecting us.


00:01:20.140 --> 00:01:21.220
He's like, "Oh, that was a great talk.


00:01:21.220 --> 00:01:22.220
"You should go talk to Rob."


00:01:22.220 --> 00:01:25.120
So thanks, Paul, as well, who was not long ago on the show.


00:01:25.120 --> 00:01:28.100
- Yeah, I've been chatting with Paul


00:01:28.100 --> 00:01:30.300
about thoughts around the talk as well.


00:01:30.300 --> 00:01:32.300
He's a really brilliant guy.


00:01:32.300 --> 00:01:33.140
- Yeah, he is.


00:01:33.140 --> 00:01:33.960
He definitely is.


00:01:33.960 --> 00:01:36.180
He's been doing a lot of cool stuff for a long time.


00:01:36.180 --> 00:01:38.620
So yeah, he's a great guy.


00:01:38.620 --> 00:01:42.360
Now, before we get into Git and all those types of things,


00:01:42.360 --> 00:01:44.580
which, you know, it's really surprising to me


00:01:44.580 --> 00:01:46.300
how much it's taken over the world, right?


00:01:46.300 --> 00:01:48.180
It used to be, there was always a question,


00:01:48.180 --> 00:01:49.780
well, what source control do you use?


00:01:49.780 --> 00:01:51.820
Like, that's not a question I hear all that often


00:01:51.820 --> 00:01:54.280
these days, not at least as much as it used to be.


00:01:54.280 --> 00:01:56.100
But before we dive into the details of that,


00:01:56.100 --> 00:01:57.080
let's start with your story.


00:01:57.080 --> 00:01:59.480
How'd you get into programming?


00:01:59.480 --> 00:02:01.440
- This is actually a really fun story.


00:02:01.440 --> 00:02:03.880
I was 10.


00:02:03.880 --> 00:02:06.920
I was at the library 'cause they had the computer


00:02:06.920 --> 00:02:08.760
and we'd play video games.


00:02:08.760 --> 00:02:10.720
And the methodology of how you do this


00:02:10.720 --> 00:02:13.880
is you go up to the counter and you flip through the book


00:02:13.880 --> 00:02:17.520
and you go find the video game and you show them that page


00:02:17.520 --> 00:02:21.040
and they give you the disc and you, the save icon.


00:02:21.040 --> 00:02:23.480
You take the save icon and you put it in the computer


00:02:23.480 --> 00:02:24.800
and you play the game.


00:02:24.800 --> 00:02:26.440
So I had finished playing my game


00:02:26.440 --> 00:02:29.320
and I went back to the desk to go pick another one


00:02:29.320 --> 00:02:32.960
flipping through the plastic sheets.


00:02:32.960 --> 00:02:35.440
And I found a drawing program.


00:02:35.440 --> 00:02:37.720
I said, I'd like to play this game.


00:02:37.720 --> 00:02:40.100
They gave me an eight and a half by 11 sheet of paper.


00:02:40.100 --> 00:02:44.800
The top two thirds was graph paper, graphs.


00:02:44.800 --> 00:02:47.960
And the bottom third was how to write the program


00:02:47.960 --> 00:02:50.280
to draw that on screen.


00:02:50.280 --> 00:02:51.120
- Oh, cool, okay.


00:02:51.120 --> 00:02:53.720
- And it was so much fun.


00:02:53.720 --> 00:02:58.720
I got to start to build content that was in my mind


00:02:58.720 --> 00:03:01.840
in real life in this artistic medium


00:03:01.840 --> 00:03:04.040
with a very technical implementation.


00:03:04.040 --> 00:03:07.120
So that was so much fun.


00:03:07.120 --> 00:03:09.280
I didn't ever return that game.


00:03:09.280 --> 00:03:11.880
And so that kind of brought me into the world


00:03:11.880 --> 00:03:13.240
of software development.


00:03:13.240 --> 00:03:16.160
I always thought it was just a fun thing that people did.


00:03:16.160 --> 00:03:17.640
I didn't realize it was a career.


00:03:17.640 --> 00:03:21.080
So it wasn't until really late in my college experience


00:03:21.080 --> 00:03:25.080
when I realized that I could do this for a career.


00:03:25.080 --> 00:03:29.800
And so after I graduated, I got into programming professionally


00:03:29.800 --> 00:03:35.800
and I've had a really fun time coding now professionally for more than 20 years.


00:03:35.800 --> 00:03:38.080
Yeah, awesome.


00:03:38.080 --> 00:03:42.080
I think programming is special because it's one of those things,


00:03:42.080 --> 00:03:44.480
you kind of hinted at, where you think of something,


00:03:44.480 --> 00:03:46.480
you dream something, you imagine something,


00:03:46.480 --> 00:03:50.280
and then with a little bit more thinking, that thing can become real.


00:03:50.280 --> 00:03:55.280
Whereas, so much of what humans do, it's one or the other.


00:03:55.280 --> 00:03:58.440
I could tell an amazing story and write the book,


00:03:58.440 --> 00:04:01.000
or I could go build an awesome house.


00:04:01.000 --> 00:04:03.320
But normally those things don't actually coexist


00:04:03.320 --> 00:04:04.680
where you think a lot about something


00:04:04.680 --> 00:04:05.960
and they come into existence.


00:04:05.960 --> 00:04:09.040
But I do think that's a magical part of what we get to do.


00:04:09.040 --> 00:04:12.020
And I think it captures a lot of people's imagination.


00:04:12.020 --> 00:04:16.000
- And what's really cool is that in this digital world,


00:04:16.000 --> 00:04:18.520
there are a lot less boundaries, a lot less constraints.


00:04:18.520 --> 00:04:20.580
There's nothing telling me that this pixel


00:04:20.580 --> 00:04:22.560
needs to be in this certain way.


00:04:22.560 --> 00:04:26.080
I can draw whatever I want on these pixels on the screen.


00:04:26.080 --> 00:04:26.900
- Yeah, yeah.


00:04:26.900 --> 00:04:29.680
And modern day, we have cloud computing,


00:04:29.680 --> 00:04:31.040
we have incredible computers,


00:04:31.040 --> 00:04:33.120
like the sky's the limit.


00:04:33.120 --> 00:04:34.900
It's really, really awesome.


00:04:34.900 --> 00:04:37.920
Also money, you don't have to go buy tons of hardware


00:04:37.920 --> 00:04:39.680
for many things that we do, right?


00:04:39.680 --> 00:04:40.520
So really cool.


00:04:40.520 --> 00:04:41.640
Now, how about today?


00:04:41.640 --> 00:04:43.140
What are you up to these days?


00:04:44.680 --> 00:04:49.080
- I'm doing a lot with software development,


00:04:49.080 --> 00:04:52.060
cloud-based development, a lot of websites,


00:04:52.060 --> 00:04:55.800
a lot of web properties, ASP.NET and Node on the backend,


00:04:55.800 --> 00:04:58.280
React and Vue on the front end,


00:04:58.280 --> 00:05:00.440
taking that into interesting modalities.


00:05:00.440 --> 00:05:02.160
I've started to play with Raspberry Pis


00:05:02.160 --> 00:05:03.400
and that's really fun.


00:05:03.400 --> 00:05:07.220
And getting to dig into all the things.


00:05:07.220 --> 00:05:09.920
I've gotten really good at doing DevOps as well.


00:05:09.920 --> 00:05:12.640
Part of my passion is being able to share this knowledge


00:05:12.640 --> 00:05:18.760
with others, so I do a lot with teaching both at user groups


00:05:18.760 --> 00:05:21.040
and conferences and elsewhere, mentoring.


00:05:21.040 --> 00:05:24.320
And so it's really fun to be able to not only learn


00:05:24.320 --> 00:05:25.880
these new skills, but also pass it


00:05:25.880 --> 00:05:28.440
on to the next generation of developers, too.


00:05:28.440 --> 00:05:31.680
I love to say that it's not that I'm really good at it.


00:05:31.680 --> 00:05:34.200
It's just that I've been collecting things for a while.


00:05:34.200 --> 00:05:38.020
So let me add to your collection, too.


00:05:38.020 --> 00:05:40.400
Well, I think one of the things that's really interesting


00:05:40.400 --> 00:05:42.440
about becoming an expert in programming,


00:05:42.440 --> 00:05:45.480
People who are beginners or maybe don't do programming at all,


00:05:45.480 --> 00:05:50.200
they see that person as incredibly talented and incredibly smart.


00:05:50.200 --> 00:05:52.640
And they may be, they often are.


00:05:52.640 --> 00:05:58.480
But I feel like the real big difference is I've spent 10 years gathering up these little tips.


00:05:58.480 --> 00:06:01.000
Like, oh, I tried this, that doesn't work very well.


00:06:01.000 --> 00:06:01.640
That crashes.


00:06:01.640 --> 00:06:03.720
You try to talk to the database that way, that's bad.


00:06:03.720 --> 00:06:07.360
Oh, by the way, I've also built up a couple of examples of what databases are.


00:06:07.360 --> 00:06:16.240
And I've seen you just have this, it's almost more experience than, I don't know, like innate skill.


00:06:16.240 --> 00:06:16.560
Right.


00:06:16.560 --> 00:06:17.400
So it's really cool.


00:06:17.400 --> 00:06:19.780
You can just kind of layer on these skills over your career.


00:06:19.780 --> 00:06:25.280
And the reason I think that's powerful is it's, they're very easy to communicate back to other people.


00:06:25.280 --> 00:06:25.540
Right.


00:06:25.540 --> 00:06:35.520
If you know the way Nietzsche did philosophy or the way, Euler did math, like you can't, or Bach did music.


00:06:35.520 --> 00:06:38.280
Like you can't easily communicate that to someone.


00:06:38.280 --> 00:06:40.240
I give it this crazy innate skill.


00:06:40.240 --> 00:06:43.200
You can sort of communicate it, but it's not the same.


00:06:43.200 --> 00:06:47.480
But with programming, I think it's very, it's very easy to transmit it on and


00:06:47.480 --> 00:06:50.060
pass it on and ways to help people like level up.


00:06:50.060 --> 00:06:50.720
It's super fun.


00:06:50.720 --> 00:06:53.700
And it's really easy to get started.


00:06:53.700 --> 00:06:57.240
You know, programming languages have become much more approachable of late.


00:06:57.240 --> 00:07:03.740
And so if you're new to programming and just starting to dabble in it, you don't


00:07:03.740 --> 00:07:06.060
You don't need to buy a big expensive thing.


00:07:06.060 --> 00:07:08.000
The laptop that you're using to browse the web


00:07:08.000 --> 00:07:11.440
is probably sufficient for building simple programs.


00:07:11.440 --> 00:07:13.560
And so, dive in.


00:07:13.560 --> 00:07:18.400
Use free tools and just start building stuff.


00:07:18.400 --> 00:07:21.240
It's really approachable and really fun.


00:07:21.240 --> 00:07:22.080
- It absolutely is.


00:07:22.080 --> 00:07:23.800
And one of the things that just never ceases


00:07:23.800 --> 00:07:26.600
to blow my mind is I can be in a coffee shop


00:07:26.600 --> 00:07:31.480
working on a relatively cheap laptop, doing my coding.


00:07:31.480 --> 00:07:34.020
Git push, speaking of Git,


00:07:34.020 --> 00:07:36.060
something happens on one part of the cloud,


00:07:36.060 --> 00:07:37.540
it triggers a webhook somewhere else


00:07:37.540 --> 00:07:38.620
that then grabs the code


00:07:38.620 --> 00:07:42.500
and could run that on a tremendously powerful data center


00:07:42.500 --> 00:07:46.220
and computer or suite of computers, a cluster of computers.


00:07:46.220 --> 00:07:47.620
And yet I get the experience


00:07:47.620 --> 00:07:49.860
of basically building this super powerful thing


00:07:49.860 --> 00:07:52.220
on my very wimpy little laptop.


00:07:52.220 --> 00:07:58.020
It's just cool that you can create things like Facebook


00:07:58.020 --> 00:07:59.380
or Google or you name it,


00:07:59.380 --> 00:08:01.560
these really large, amazing apps,


00:08:01.560 --> 00:08:04.380
but you could kind of just do it on like a laptop.


00:08:04.380 --> 00:08:09.600
- Something that existed in my mind yesterday


00:08:09.600 --> 00:08:13.680
exists in the cloud and scaled to any user


00:08:13.680 --> 00:08:15.680
that wants it tomorrow.


00:08:15.680 --> 00:08:16.520
- Yeah.


00:08:16.520 --> 00:08:18.020
- That is really fun.


00:08:18.020 --> 00:08:20.380
- Yeah, it's super, super fun.


00:08:20.380 --> 00:08:21.740
Before we move on, you also mentioned


00:08:21.740 --> 00:08:24.500
that you've been playing around with Raspberry Pis.


00:08:24.500 --> 00:08:26.900
Have you seen, something that I covered recently


00:08:26.900 --> 00:08:29.220
on Python Bytes, my other podcast is


00:08:29.220 --> 00:08:35.220
somebody built a water-cooled Raspberry Pi cluster


00:08:35.220 --> 00:08:39.780
computer, so eight Raspberry Pis in one thing,


00:08:39.780 --> 00:08:41.900
all of them overclocked and water-cooled.


00:08:41.900 --> 00:08:43.500
Have you seen people doing this stuff?


00:08:43.500 --> 00:08:44.340
It's crazy.


00:08:44.340 --> 00:08:46.460
- It's really cool.


00:08:46.460 --> 00:08:49.280
And as you start to get into clustering programming,


00:08:49.280 --> 00:08:50.700
clustered programming, you know,


00:08:50.700 --> 00:08:52.900
multi-machine type of experiences,


00:08:52.900 --> 00:08:56.100
a Raspberry Pi is a really cheap barrier to entry.


00:08:56.100 --> 00:08:59.140
you know, for $40 or so, you can get a Raspberry Pi,


00:08:59.140 --> 00:09:01.440
get three or four or five of them,


00:09:01.440 --> 00:09:04.440
cluster them together, and now you get the sense of


00:09:04.440 --> 00:09:08.580
what does it take to build parallel machinery.


00:09:08.580 --> 00:09:10.720
And it is really, really fun.


00:09:10.720 --> 00:09:15.060
So, you know, to get an 8 or 10 or 100 or 1000


00:09:15.060 --> 00:09:18.760
node Raspberry Pi is pretty sweet.


00:09:18.760 --> 00:09:19.900
Yeah, that's awesome.


00:09:19.900 --> 00:09:22.060
I mean, you could do something similar with Docker, right?


00:09:22.060 --> 00:09:24.300
Fire up a bunch of Docker containers,


00:09:24.300 --> 00:09:27.580
but it's not the same feeling as like there's actually eight of them over there


00:09:27.580 --> 00:09:29.660
and they're actually talking to each other and working together.


00:09:29.660 --> 00:09:32.380
I think it's a very different feeling. It's super cool.


00:09:32.380 --> 00:09:33.340
All right.


00:09:33.340 --> 00:09:35.700
Containers do help us start to approximate that,


00:09:35.700 --> 00:09:39.140
but yeah, there is some lying to ourselves to believe that


00:09:39.140 --> 00:09:43.780
all of these containers running in context on my one laptop


00:09:43.780 --> 00:09:45.780
are really a distributed system.


00:09:45.780 --> 00:09:48.180
Yeah, absolutely. It's not the same,


00:09:48.180 --> 00:09:50.580
but it does let you sort of play around there a bit.


00:09:50.580 --> 00:09:51.060
Right.


00:09:51.060 --> 00:09:53.660
All right. So I want to talk about Git primarily,


00:09:53.660 --> 00:09:55.260
and that's what your presentation


00:09:55.260 --> 00:09:57.460
at the Python web conference was about.


00:09:57.460 --> 00:10:00.800
And that's what we're gonna center our conversation on.


00:10:00.800 --> 00:10:03.260
But you and I have both been around the industry


00:10:03.260 --> 00:10:06.300
for a while, Git is not that old.


00:10:06.300 --> 00:10:10.260
It's the new source control on the block, I guess.


00:10:10.260 --> 00:10:12.060
So maybe let's talk a little bit about the history


00:10:12.060 --> 00:10:14.100
of source control, you know.


00:10:14.100 --> 00:10:17.620
And I think of source control as a spectrum


00:10:17.620 --> 00:10:21.660
from what's source control all the way to Git


00:10:21.660 --> 00:10:23.660
and distributed source control maybe.


00:10:23.660 --> 00:10:27.060
You know, I've talked to people and I've seen it in action.


00:10:27.060 --> 00:10:31.260
Source control is, I've got a file, a code file,


00:10:31.260 --> 00:10:33.580
and I've called it version 1, version 2,


00:10:33.580 --> 00:10:38.100
version 2 edited, version 3, version 3 final, final 2.


00:10:38.100 --> 00:10:40.580
You know, just like, or maybe if it's a lot of files,


00:10:40.580 --> 00:10:42.580
you zip the folder and you name it like that, right?


00:10:42.580 --> 00:10:44.580
Like that's the beginning of source control.


00:10:44.580 --> 00:10:47.780
He's doing it wrong, but it's getting there, right?


00:10:47.780 --> 00:10:51.420
It's doing it in exactly the way that you needed at that time.


00:10:51.420 --> 00:10:54.920
Copy folder versioning is definitely a thing.


00:10:54.920 --> 00:10:59.260
.bu, .date, you know,


00:10:59.260 --> 00:11:02.100
copy that content off to make sure that you have it.


00:11:02.100 --> 00:11:04.800
And that's really what we're after with version control


00:11:04.800 --> 00:11:06.900
is when we think of version control,


00:11:06.900 --> 00:11:09.100
we're really talking about two things.


00:11:09.100 --> 00:11:11.600
One is archiving the history of my journey


00:11:11.600 --> 00:11:15.540
so that I can get back to a known good state if things go bad,


00:11:15.540 --> 00:11:18.480
but also communicating with my team


00:11:18.480 --> 00:11:22.320
to be able to convey the progress of this system.


00:11:22.320 --> 00:11:27.220
And copy folder versioning does the first one real well.


00:11:27.220 --> 00:11:29.460
It doesn't do the second one real well.


00:11:29.460 --> 00:11:31.460
There are systems that I've worked on where, you know,


00:11:31.460 --> 00:11:34.760
to upgrade the system is to first copy all the things


00:11:34.760 --> 00:11:37.160
into the .backup folder,


00:11:37.160 --> 00:11:39.460
and then upgrade the primary thing.


00:11:39.460 --> 00:11:41.840
And if it doesn't work correctly, then you point--


00:11:41.840 --> 00:11:43.540
Wait, put it back, put it back, put it back.


00:11:43.540 --> 00:11:47.840
Yeah, they point the web server at the backup folder.


00:11:47.840 --> 00:11:53.480
And so now the system has been running out of the backup folder for, you know, six or eight months or a year.


00:11:53.480 --> 00:11:58.920
And, and now we go to upgrade and step one is to take, oh, wait, we just took down the site.


00:11:58.920 --> 00:12:01.920
Now we have no known good backup things.


00:12:01.920 --> 00:12:08.720
Yeah, yeah, it's without some sort of source control, the real thing I think that falls apart.


00:12:08.720 --> 00:12:13.640
Maybe you're doing the file versioning thing, which is still not that ideal.


00:12:13.640 --> 00:12:16.000
But the thing that really falls apart is collaboration.


00:12:16.000 --> 00:12:17.200
Right.


00:12:17.200 --> 00:12:19.200
Soon as two people want to work on something,


00:12:19.200 --> 00:12:21.360
it's not okay to say, well, here's my zip diversion.


00:12:21.360 --> 00:12:22.640
Can you merge that back together?


00:12:22.640 --> 00:12:24.120
And probably you don't have merge tools either.


00:12:24.120 --> 00:12:25.600
So what does that even mean?


00:12:25.600 --> 00:12:26.440
Right?


00:12:26.440 --> 00:12:30.020
So I quickly gets us into where I think


00:12:30.020 --> 00:12:31.980
people probably should be in some sort of version control.


00:12:31.980 --> 00:12:35.600
But back in the day, that was different stuff.


00:12:35.600 --> 00:12:38.700
For example, you know, maybe that was subversion.


00:12:38.700 --> 00:12:39.760
Actually, if you were on subversion,


00:12:39.760 --> 00:12:41.280
you were in a good place.


00:12:41.280 --> 00:12:42.120
I mean, a really good place.


00:12:42.120 --> 00:12:43.680
- Subversion was really cool.


00:12:43.680 --> 00:12:46.000
Subversion was an upgrade to CVS,


00:12:46.000 --> 00:12:51.140
where CVS would version each file or each folder separately.


00:12:51.140 --> 00:12:56.740
And so nested folders just happened to kind of be together in this clump.


00:12:56.740 --> 00:13:00.660
And what Subversion gave us was we're versioning the entire


00:13:00.660 --> 00:13:03.500
project together in one piece.


00:13:03.500 --> 00:13:07.720
Before that, we might have had a source safe or other pieces.


00:13:07.720 --> 00:13:11.520
Team Foundation Server kind of fits into this realm as well.


00:13:11.520 --> 00:13:15.160
And so it's that mechanism of versioning all of the pieces together


00:13:15.160 --> 00:13:18.920
and then being able to publish that to a central place.


00:13:18.920 --> 00:13:23.800
What makes all of these systems kind of unique, specific,


00:13:23.800 --> 00:13:26.640
is that they're all really client server pieces.


00:13:26.640 --> 00:13:30.240
Subversion was really good at being a client server piece.


00:13:30.240 --> 00:13:33.360
I would say it was, I'm gonna go out on a limb and say it was the best


00:13:33.360 --> 00:13:37.320
client server, verge control system that I'm aware of.


00:13:37.320 --> 00:13:39.720
Yeah. I think so.


00:13:41.120 --> 00:13:45.120
These systems, though, have kind of a fundamental flaw


00:13:45.120 --> 00:13:48.560
because we want to use version control for those two pieces.


00:13:48.560 --> 00:13:51.200
We want to use it to be able to back up the work


00:13:51.200 --> 00:13:53.200
so that I can get back to a known good state


00:13:53.200 --> 00:13:55.760
and to communicate with our team.


00:13:55.760 --> 00:14:00.880
And the hard part with these client-server version control systems


00:14:00.880 --> 00:14:04.880
is we're doing both every time we commit.


00:14:04.880 --> 00:14:07.760
So when I commit a change to Subversion,


00:14:07.760 --> 00:14:11.400
I'm immediately publishing it to all of you.


00:14:11.400 --> 00:14:16.020
So the analogy that I like is when I'm rock climbing,


00:14:16.020 --> 00:14:20.520
I want to be able to put a carabiner in the wall


00:14:20.520 --> 00:14:22.120
as frequently as possible.


00:14:22.120 --> 00:14:26.200
If I climb a foot and I fall, I'm only gonna fall a foot.


00:14:26.200 --> 00:14:29.320
If I climb six or eight or 12 feet and I fall,


00:14:29.320 --> 00:14:30.580
I'm gonna fall 12 feet.


00:14:30.580 --> 00:14:33.180
Well, actually, the nature of the rope


00:14:33.180 --> 00:14:34.840
is that it's gonna swing all the way down,


00:14:34.840 --> 00:14:37.080
so I fall 24 feet.


00:14:37.080 --> 00:14:38.880
- And that's a long way to go.


00:14:38.880 --> 00:14:43.120
I wanna stick pieces in the wall as frequently as I can.


00:14:43.120 --> 00:14:46.480
You don't wanna see me spamming the thing


00:14:46.480 --> 00:14:48.020
every time I get there.


00:14:48.020 --> 00:14:49.680
So I get to the point where it's like,


00:14:49.680 --> 00:14:51.940
okay, I finished a thought, I'm good,


00:14:51.940 --> 00:14:54.640
I want to mark this save point,


00:14:54.640 --> 00:14:57.800
but I'm not ready to publish it to all of you.


00:14:57.800 --> 00:15:00.320
- Yeah, it's really the thing you should be working with


00:15:00.320 --> 00:15:02.440
most of the time is if I publish it


00:15:02.440 --> 00:15:04.440
to the rest of the team,


00:15:04.440 --> 00:15:07.840
it should at least run, right?


00:15:07.840 --> 00:15:09.620
That probably the test should pass.


00:15:09.620 --> 00:15:10.860
Maybe you can fix that.


00:15:10.860 --> 00:15:12.120
Like you're gonna work with somebody,


00:15:12.120 --> 00:15:15.980
but it shouldn't just mean nobody can build


00:15:15.980 --> 00:15:18.460
or even start the software at all


00:15:18.460 --> 00:15:20.520
because you've added the save point


00:15:20.520 --> 00:15:23.380
in the middle of their work that is inconsistent


00:15:23.380 --> 00:15:25.940
or halfway there or whatever, right?


00:15:25.940 --> 00:15:27.420
- And so I've reached the stopping point,


00:15:27.420 --> 00:15:29.520
but I'm not done, it doesn't work.


00:15:29.520 --> 00:15:31.540
And so I have this moral dilemma.


00:15:31.540 --> 00:15:33.200
Do I mark a save point


00:15:33.200 --> 00:15:36.280
and inflict that on all of you, or do I not?


00:15:36.280 --> 00:15:39.460
And that's when I fall back to a secondary version control system


00:15:39.460 --> 00:15:42.160
where I start doing copy folder versioning again,


00:15:42.160 --> 00:15:46.120
where it's like, I just want to take all my stuff and stick it in this spot


00:15:46.120 --> 00:15:48.120
so that I have this known good state.


00:15:48.120 --> 00:15:52.080
And that's where we pivot to distributed version control systems,


00:15:52.080 --> 00:15:55.880
of which Git is one of them, where we have a separation


00:15:55.880 --> 00:15:59.360
between the commit stage and the publish stage.


00:15:59.360 --> 00:16:05.040
And that isn't the official terms that Git or any of the rest of them use.


00:16:05.040 --> 00:16:08.480
But there's a process of marking those save points.


00:16:08.480 --> 00:16:13.200
And then there's a process of collecting all of the save points and publishing them to others.


00:16:13.200 --> 00:16:15.200
And what's beautiful there is that now...


00:16:15.200 --> 00:16:19.600
That takes a bit of a mind shift to get used to it as well when you're working with it.


00:16:19.600 --> 00:16:23.600
Because if you come from one of these other systems, I committed, so it's saved.


00:16:23.600 --> 00:16:28.080
Right, but commit in a distributed source control system means it's...


00:16:28.080 --> 00:16:31.540
It's a local save point until you get push


00:16:31.540 --> 00:16:36.120
or whatever other immaterial equivalent of a get push is, right?


00:16:36.120 --> 00:16:38.120
Yeah, an HG push.


00:16:38.120 --> 00:16:40.120
Mm-hmm.


00:16:40.120 --> 00:16:44.960
And so it's exactly that. It's marking save points however frequently you want


00:16:44.960 --> 00:16:50.200
and then combining those save points together into a cohesive story


00:16:50.200 --> 00:16:52.200
to publish to your colleagues.


00:16:52.200 --> 00:16:56.040
And that's what makes distributed version control so powerful


00:16:56.040 --> 00:16:58.040
is separating those two concepts.


00:16:58.040 --> 00:17:03.080
Mercurial, Git, Perforce,


00:17:03.080 --> 00:17:06.520
there are other distributed version control systems.


00:17:06.520 --> 00:17:10.520
And as the world was moving from Subversion and TFS


00:17:10.520 --> 00:17:12.280
into this distributed world,


00:17:12.280 --> 00:17:14.280
we experimented with each of them.


00:17:14.280 --> 00:17:17.720
You know, arguably, Git wasn't the best.


00:17:17.720 --> 00:17:21.460
We might have done a VHS and Betamax type of thing.


00:17:21.460 --> 00:17:24.200
But clearly, Git has become


00:17:24.200 --> 00:17:26.580
the de facto standard version control system.


00:17:26.580 --> 00:17:30.020
It is distributed, and now we can separate the save points


00:17:30.020 --> 00:17:31.760
from the publish points.


00:17:31.760 --> 00:17:35.520
Yeah, I think another really important thing to highlight


00:17:35.520 --> 00:17:38.060
for people who haven't been there,


00:17:38.060 --> 00:17:41.060
right at the Git homepage, they highlight Subversion,


00:17:41.060 --> 00:17:43.800
which we've been, CVS, which we've been talking about,


00:17:43.800 --> 00:17:49.240
but Perforce, Clearcase, SourceSafe, TFS,


00:17:49.240 --> 00:17:51.240
a lot of these things, there's two things.


00:17:51.240 --> 00:17:52.780
One, they would lock files.


00:17:52.780 --> 00:17:55.760
If you wanted to make a change to a file, you would claim it.


00:17:55.760 --> 00:17:58.960
Like I'm editing main.py.


00:17:58.960 --> 00:18:01.420
Well, no one else can interact with that file.


00:18:01.420 --> 00:18:03.760
It's literally made read-only on your computer


00:18:03.760 --> 00:18:09.440
until that person is done.


00:18:09.440 --> 00:18:11.280
And they had better not forget and go on vacation


00:18:11.280 --> 00:18:13.280
while they got some files checked out.


00:18:13.280 --> 00:18:15.280
That's the one thing.


00:18:15.280 --> 00:18:21.720
The other is you need permission to participate in a project.


00:18:21.720 --> 00:18:25.880
you have these gatekeepers and you need to sort of prove yourself to the gatekeepers. So


00:18:25.880 --> 00:18:30.520
if I wanted to commit, I wanted to work on Flask, if it was under subversion, I have to go,


00:18:30.520 --> 00:18:35.320
can I have permission to go read, get read-only access to Flask? If I want to make a change,


00:18:35.320 --> 00:18:40.520
I literally have to say I need permission to commit back to Flask. With the distributed ones,


00:18:40.520 --> 00:18:47.640
you clone it, you do your proof of work, your proposed idea, and if you want, you can contribute


00:18:47.640 --> 00:18:49.880
or you could just go in a different way, right?


00:18:49.880 --> 00:18:53.700
There's this very interesting separation of,


00:18:53.700 --> 00:18:56.160
I can kind of work on it and then see


00:18:56.160 --> 00:18:57.400
if I want to contribute it back


00:18:57.400 --> 00:18:58.800
rather than the other way around.


00:18:58.800 --> 00:19:01.560
I have to get permission to contribute.


00:19:01.560 --> 00:19:03.360
And I think that's a super critical thing


00:19:03.360 --> 00:19:04.560
in the open source space


00:19:04.560 --> 00:19:08.200
where there's a very loose coupling of people and projects.


00:19:08.200 --> 00:19:09.320
Like if somebody comes to me and says,


00:19:09.320 --> 00:19:12.120
I want to work on, I suppose I'm working on Flask.


00:19:12.120 --> 00:19:13.920
They come to me, I'm in charge of Flask.


00:19:13.920 --> 00:19:15.240
They come to me and say, I want to work on Flask.


00:19:15.240 --> 00:19:18.840
like, well, maybe, what else have you done?


00:19:18.840 --> 00:19:21.760
Show me. This is a hugely used project.


00:19:21.760 --> 00:19:24.840
Yeah, we do not want you to mess up Flask.


00:19:24.840 --> 00:19:25.480
But...


00:19:25.480 --> 00:19:28.040
And we had a little bit of that with SourceForge.


00:19:28.040 --> 00:19:32.760
You know, you could clone the repository in Subversion


00:19:32.760 --> 00:19:34.520
and just work on it locally.


00:19:34.520 --> 00:19:36.120
But you weren't able to participate.


00:19:36.120 --> 00:19:38.120
The moment that you wanted to help,


00:19:38.120 --> 00:19:41.800
it was a really frictionful process where,


00:19:41.800 --> 00:19:43.800
you know, okay, so I have this diff.


00:19:43.800 --> 00:19:49.060
Now, I don't have write permissions, so am I going to bake this diff into an email


00:19:49.060 --> 00:19:51.060
and hope somebody reads it?


00:19:51.060 --> 00:19:57.240
Do I just use it locally? Do I fork the project and only have our corporate version of it?


00:19:57.240 --> 00:19:59.860
It was very difficult to participate.


00:19:59.860 --> 00:20:05.760
And that's not a feature of Git per se, but rather the GitHub,


00:20:05.760 --> 00:20:10.160
the shared hosted mechanism around Git that has grown up as well.


00:20:10.160 --> 00:20:13.960
Yeah, I mean, with Git, you can clone a thing and then work on it,


00:20:13.960 --> 00:20:15.560
as long as you have Redaxness.


00:20:15.560 --> 00:20:19.720
But yeah, the additional mechanisms, the Git flow around it


00:20:19.720 --> 00:20:21.720
is certainly something created by GitHub


00:20:21.720 --> 00:20:26.600
with like PRs and forks and merging upstreams


00:20:26.600 --> 00:20:29.200
and all that origin upstream stuff.


00:20:29.200 --> 00:20:33.440
So, one thing I did want to ask you before we get to the details


00:20:33.440 --> 00:20:34.840
is why do you think Git won?


00:20:34.840 --> 00:20:37.720
You did talk about this Betamax VHS sort of thing,


00:20:37.720 --> 00:20:42.220
and there are other options out there for distributed source control.


00:20:42.220 --> 00:20:44.220
I have a theory, but what are your thoughts?


00:20:44.220 --> 00:20:46.620
And I have a theory too.


00:20:46.620 --> 00:20:51.020
You know, I don't have the answer and maybe our listeners will help us


00:20:51.020 --> 00:20:54.020
discover what the correct answer is, or maybe there isn't one.


00:20:54.020 --> 00:21:00.020
In my mind, a lot of the time we were looking at ways to compete with things.


00:21:00.020 --> 00:21:04.220
You know, we had things that would compete with CFS or Subversion


00:21:04.220 --> 00:21:06.420
because, you know, we wanted a little bit more,


00:21:06.420 --> 00:21:09.820
or we wanted to make money on the process of source control.


00:21:09.820 --> 00:21:15.420
And what's really interesting about Git is that it has become so pervasive.


00:21:15.420 --> 00:21:18.420
And so we're not building competitors to Git,


00:21:18.420 --> 00:21:20.620
we're building integrations into Git.


00:21:20.620 --> 00:21:23.940
- Right, we're building them... - And arguably, GitHub helped with that too.


00:21:23.940 --> 00:21:29.380
GitHub has a really, really powerful community mechanism for that,


00:21:29.380 --> 00:21:31.980
and GitHub really only did Git.


00:21:31.980 --> 00:21:38.320
But I would argue that Git is really cool because it's free and open source.


00:21:38.320 --> 00:21:42.380
And because it's free and open source, and it has that community mechanism around it,


00:21:42.380 --> 00:21:46.720
we don't need to compete with it. We don't need to try to make money on this.


00:21:46.720 --> 00:21:51.900
Instead, we can build collaborations with it and mechanisms working with it


00:21:51.900 --> 00:21:54.660
and build up the community together.


00:21:54.660 --> 00:21:58.660
Yeah, my thought as well was GitHub.


00:21:58.660 --> 00:22:06.660
Right? It's, it's the thing that brought not just the server infrastructure to privately have code.


00:22:06.660 --> 00:22:22.660
It brought the community, and it brought the flow that allowed people to collaborate in ways that could let them collaborate, once they've proven they have something to collaborate right here's my PR where I've already shown you the thing that's amazing that I want to offer up to you.


00:22:22.660 --> 00:22:27.460
Oh, that does look amazing. Thank you. Who are you? Let's talk about this, right?


00:22:27.460 --> 00:22:30.180
It's a different conversation than I've never seen you.


00:22:30.180 --> 00:22:34.020
Why should I give you right access to Flask on CVS?


00:22:34.020 --> 00:22:37.700
And it's exactly that. GitHub has these magic levels to it,


00:22:37.700 --> 00:22:43.300
where at the very first level, it is just an online source code repository system.


00:22:43.300 --> 00:22:48.660
And so, you know, how is that different from SourceForge or TFS before it?


00:22:48.660 --> 00:22:50.340
And it isn't at this level.


00:22:51.220 --> 00:22:54.800
And so if that's what you're using GitHub for, then that's perfect.


00:22:54.800 --> 00:22:57.660
Back up your local projects up to GitHub,


00:22:57.660 --> 00:23:01.020
get your content off of your machine in case there's a disaster.


00:23:01.020 --> 00:23:03.020
That is definitely the first level.


00:23:03.020 --> 00:23:05.700
The next level starts to build workflows around it


00:23:05.700 --> 00:23:09.140
where we can say, "I want to create issues,


00:23:09.140 --> 00:23:13.480
I want to create project management things,


00:23:13.480 --> 00:23:16.580
I want to create milestones, I want to create goals."


00:23:16.580 --> 00:23:18.580
And so that's kind of the next level.


00:23:18.580 --> 00:23:23.680
Leveling up again, we can start to create a social community around that


00:23:23.680 --> 00:23:28.520
where we can start to have conversations around the content


00:23:28.520 --> 00:23:35.100
where I can create a diff and we can all talk about it and we can collaborate on it


00:23:35.100 --> 00:23:38.200
and once it's good enough, now we can pull it in.


00:23:38.200 --> 00:23:43.600
Add to that then the mechanism around pull requests and things like that.


00:23:43.600 --> 00:23:46.880
Git has a concept of push and pull,


00:23:46.880 --> 00:23:52.520
you know, publish and receive, I guess, might be the terminology that matches here.


00:23:52.520 --> 00:23:55.320
And what's interesting about a pull request,


00:23:55.320 --> 00:23:58.960
I don't have write access to your repository, but I want to contribute.


00:23:58.960 --> 00:24:02.120
So instead of pushing my content to you,


00:24:02.120 --> 00:24:06.200
I'm going to request that you pull it from me.


00:24:06.200 --> 00:24:11.640
And so no longer do I need to create this email and write out all the content


00:24:11.640 --> 00:24:13.640
and hope you read the email.


00:24:13.640 --> 00:24:17.240
I create this code up in my space


00:24:17.240 --> 00:24:21.080
and I request that you include it in your space.


00:24:21.080 --> 00:24:25.080
And that made collaborating with projects


00:24:25.080 --> 00:24:27.080
really, really easy.


00:24:27.080 --> 00:24:29.480
So with that comes the next level of GitHub


00:24:29.480 --> 00:24:32.360
where we have these communities that can socialize


00:24:32.360 --> 00:24:36.600
and develop and hang out


00:24:36.600 --> 00:24:38.280
in this coding space.


00:24:38.280 --> 00:24:40.840
And that's really what made GitHub so magical


00:24:40.840 --> 00:24:44.940
is that we have this community around coding,


00:24:44.940 --> 00:24:48.940
where previously with source forge or other environments,


00:24:48.940 --> 00:24:51.240
yeah, we had that online source control system,


00:24:51.240 --> 00:24:54.280
but we didn't have those levels of interaction.


00:24:54.280 --> 00:24:58.500
So pull requests, or merge requests, or whatever you're going to call it


00:24:58.500 --> 00:25:01.660
is that mechanism of being able to collaborate


00:25:01.660 --> 00:25:04.540
with low trust type of environments.


00:25:04.540 --> 00:25:08.260
I want to offer up my solution to the community


00:25:08.260 --> 00:25:11.060
and see if that's going to fit into this ecosystem.


00:25:11.060 --> 00:25:15.460
Yeah, I think that's why I get one as well.


00:25:15.460 --> 00:25:18.660
And Verda Rose out there says,


00:25:18.660 --> 00:25:21.380
"Open source is the best way to learn and improve technically


00:25:21.380 --> 00:25:22.820
and collaborate with people you don't know."


00:25:22.820 --> 00:25:26.180
Yeah, and I think it's the people that you don't know


00:25:26.180 --> 00:25:28.820
that makes it special because it allows you to create


00:25:28.820 --> 00:25:31.540
these connections with people all around the world


00:25:31.540 --> 00:25:34.500
who you would otherwise not meet


00:25:34.500 --> 00:25:36.260
and you get a chance to work with them.


00:25:36.260 --> 00:25:40.100
Even if you live in rural Canada,


00:25:40.100 --> 00:25:42.260
and you want to do software development,


00:25:42.260 --> 00:25:45.700
maybe no one around you is really good at whatever you're trying to do,


00:25:45.700 --> 00:25:47.780
but go to GitHub, find a project,


00:25:47.780 --> 00:25:49.620
you can collaborate the best people in the world on that.


00:25:49.620 --> 00:25:54.900
We can create these communities around our passions for technology


00:25:54.900 --> 00:25:56.900
or the problems that we want to solve,


00:25:56.900 --> 00:25:59.460
not necessarily based on the geographic boundaries


00:25:59.460 --> 00:26:00.500
that we find ourselves in.


00:26:00.500 --> 00:26:02.020
Yeah, absolutely.


00:26:02.020 --> 00:26:03.860
All right.


00:26:03.860 --> 00:26:07.780
So I feel like that's the history of it a little bit.


00:26:07.780 --> 00:26:12.160
I talked a little bit on why distributed source control is really powerful.


00:26:12.160 --> 00:26:16.120
And I think it has really unlocked open source in a special way


00:26:16.120 --> 00:26:19.700
and on a much larger scale than it has.


00:26:19.700 --> 00:26:24.420
And it is interesting to note that Git and GitHub are different.


00:26:24.420 --> 00:26:29.960
GitHub uses Git under the covers to be able to build its social experiences.


00:26:29.960 --> 00:26:33.340
But Git is a thing that is separate and distinct.


00:26:33.340 --> 00:26:36.540
There is no pull request concept in Git, for example.


00:26:36.540 --> 00:26:40.300
And with Git on your local machine in a cave,


00:26:40.300 --> 00:26:44.840
you can version and create those save points.


00:26:44.840 --> 00:26:47.980
When you're ready to socialize, to publish your content,


00:26:47.980 --> 00:26:49.740
to communicate with your team,


00:26:49.740 --> 00:26:53.160
you can use Git together with lots of services,


00:26:53.160 --> 00:26:56.360
GitHub, or Bitbucket, or GitLab,


00:26:56.360 --> 00:26:59.120
or there's lots of private services as well


00:26:59.120 --> 00:27:02.260
that allow you to create that online community.


00:27:02.260 --> 00:27:06.260
Now, GitHub has published their magic sauce to the world


00:27:06.260 --> 00:27:08.260
and lots of us have cloned it.


00:27:08.260 --> 00:27:12.100
So GitHub is still the place where we code for the most part.


00:27:12.100 --> 00:27:14.100
But if you prefer coding in another community,


00:27:14.100 --> 00:27:16.100
then that's totally fine.


00:27:16.100 --> 00:27:19.140
You can still use Git and all of the tools


00:27:19.140 --> 00:27:21.780
to be able to create your save points


00:27:21.780 --> 00:27:23.780
and publish that content to others.


00:27:23.780 --> 00:27:26.260
You could just publish it to a different server as well.


00:27:26.260 --> 00:27:28.260
Git and GitHub are different.


00:27:28.260 --> 00:27:32.420
Yeah, and it's easy to see them as the same thing,


00:27:32.420 --> 00:27:34.500
but yeah, they're absolutely not.


00:27:34.500 --> 00:27:36.700
Right, we've got all these different locations.


00:27:36.700 --> 00:27:39.500
I have mixed emotions, mixed feelings about,


00:27:39.500 --> 00:27:42.020
if you have another project and you put it somewhere else,


00:27:42.020 --> 00:27:43.780
I'm not gonna name any particular service,


00:27:43.780 --> 00:27:46.540
but let's just say somewhere that's not GitHub,


00:27:46.540 --> 00:27:48.700
that's totally good, but at the same time,


00:27:48.700 --> 00:27:52.420
so much of the open source flow is around GitHub


00:27:52.420 --> 00:27:54.660
and the stuff that's happening there.


00:27:54.660 --> 00:27:56.740
It's, I don't know, it's just really interesting to think


00:27:56.740 --> 00:28:01.940
It's interesting to think why you might be at one place and not the other place and so on.


00:28:01.940 --> 00:28:06.840
Yeah. And a lot of people were worried when GitHub was bought by Microsoft,


00:28:06.840 --> 00:28:10.640
is this going to be the end of the community collaboration?


00:28:10.640 --> 00:28:15.640
And I think Microsoft has been a really good steward of the GitHub community


00:28:15.640 --> 00:28:19.040
and really making sure that GitHub is still available to all of us


00:28:19.040 --> 00:28:22.740
and facilitating the success of that ecosystem.


00:28:22.740 --> 00:28:29.740
Yeah, I, there was a lot of hesitancy and concern within certain communities.


00:28:29.740 --> 00:28:32.740
And I feel like they've done a great job.


00:28:32.740 --> 00:28:38.740
I, yeah, what I didn't realize was that GitHub really needed some help from somebody.


00:28:38.740 --> 00:28:42.740
Like they financially, they were not doing as well.


00:28:42.740 --> 00:28:51.740
I looked at my other place must be incredibly successful, but it, you know, what came out after when some of the reports and stuff that was, you know, it was kind of important that someone was doing it.


00:28:51.740 --> 00:28:53.340
It was kind of important that someone came along.


00:28:53.340 --> 00:28:55.860
And if that's the case, then I was, you know,


00:28:55.860 --> 00:28:57.720
head over heels that Microsoft bought them.


00:28:57.720 --> 00:28:59.340
Last thing I want to see is them go away.


00:28:59.340 --> 00:29:00.380
And I think they've done a good job


00:29:00.380 --> 00:29:02.420
of just letting them be, right?


00:29:02.420 --> 00:29:03.740
Don't go mess with them.


00:29:03.740 --> 00:29:06.040
It's working really well.


00:29:06.040 --> 00:29:09.580
So I think it's been a good deal that worked out there.


00:29:09.580 --> 00:29:12.260
- See also Docker for an example of a community


00:29:12.260 --> 00:29:14.480
that is amazing and contributing,


00:29:14.480 --> 00:29:16.900
but doesn't have a financial business model


00:29:16.900 --> 00:29:18.620
to be able to survive.


00:29:18.620 --> 00:29:21.900
- Yeah, yeah, hopefully things go well for Docker,


00:29:21.900 --> 00:29:23.060
but it's tricky.


00:29:23.060 --> 00:29:26.020
They tried the enterprise thing and then they're--


00:29:26.020 --> 00:29:26.860
- Yeah.


00:29:26.860 --> 00:29:27.680
- They're switching to--


00:29:27.680 --> 00:29:29.600
- I love their pivot back to focusing on developers


00:29:29.600 --> 00:29:31.620
in the community, which is wonderful,


00:29:31.620 --> 00:29:34.420
but I still feel like they haven't found their spot


00:29:34.420 --> 00:29:38.180
that allows them to be business successful.


00:29:38.180 --> 00:29:42.140
And the hard part is you can only do that for so long,


00:29:42.140 --> 00:29:45.460
and then you need to pivot to something


00:29:45.460 --> 00:29:48.480
that can start to facilitate the business.


00:29:48.480 --> 00:29:50.280
- Yeah, absolutely.


00:29:50.280 --> 00:29:53.260
All right, are you ready to go into the Git folder


00:29:53.260 --> 00:29:56.200
and find where the hidden magic lives?


00:29:56.200 --> 00:29:57.040
- Yes.


00:29:57.040 --> 00:29:59.280
- No, if I go to-- - That's wonderful.


00:29:59.280 --> 00:30:00.120
- Yeah, go ahead.


00:30:00.120 --> 00:30:04.520
What I was gonna say is if you go into a project


00:30:04.520 --> 00:30:07.800
that you've get cloned or you've get a knitted


00:30:07.800 --> 00:30:09.520
and you create some files and you mess around there,


00:30:09.520 --> 00:30:10.840
you don't see anything different.


00:30:10.840 --> 00:30:13.600
It looks just like any other folder


00:30:13.600 --> 00:30:15.720
that might have a project in it, right?


00:30:17.000 --> 00:30:21.340
but in there actually is contained the,


00:30:21.340 --> 00:30:23.000
almost the entire backup,


00:30:23.000 --> 00:30:26.480
the entire contents of all the versions of those files,


00:30:26.480 --> 00:30:28.920
at least every branch that you've checked out,


00:30:28.920 --> 00:30:31.240
hidden in the hidden.git file.


00:30:31.240 --> 00:30:34.560
So .git on--


00:30:34.560 --> 00:30:36.320
- And it's not almost, it is.


00:30:36.320 --> 00:30:39.520
That is the entire history of the project.


00:30:39.520 --> 00:30:43.160
So the way to backup a Git database,


00:30:43.160 --> 00:30:44.720
misusing that term,


00:30:44.720 --> 00:30:46.960
is to grab that .git folder


00:30:46.960 --> 00:30:47.800
and copy it.


00:30:47.800 --> 00:30:52.920
Inside that .git folder is lots of files


00:30:52.920 --> 00:30:56.040
that describe the history of the project


00:30:56.040 --> 00:30:58.880
since its inception down to the current version.


00:30:58.880 --> 00:31:02.960
And so, you know, kind of the only way that you can break git


00:31:02.960 --> 00:31:06.160
is to open up that .git folder and change stuff.


00:31:06.160 --> 00:31:07.480
The cool part though is that--


00:31:07.480 --> 00:31:10.040
- It was good that you let's go in here and mess with it.


00:31:10.040 --> 00:31:10.880
That's--


00:31:10.880 --> 00:31:11.720
- Yeah.


00:31:11.720 --> 00:31:12.540
(laughing)


00:31:12.540 --> 00:31:13.380
- Just kidding.


00:31:14.680 --> 00:31:19.060
By default, this folder is hidden on most systems.


00:31:19.060 --> 00:31:21.820
So you may have to show hidden files and folders


00:31:21.820 --> 00:31:23.820
to be able to see the .git folder.


00:31:23.820 --> 00:31:26.500
But it's there, and it's really powerful.


00:31:26.500 --> 00:31:28.500
Yeah, and so on Windows, you go to Explorer,


00:31:28.500 --> 00:31:31.340
there's like one of those little ribbon things that drops down


00:31:31.340 --> 00:31:34.340
in the checkbox for show hidden folders and files.


00:31:34.340 --> 00:31:38.440
On macOS, I learned you can hit Shift + Command + .


00:31:38.440 --> 00:31:39.940
and that will show hidden files.


00:31:39.940 --> 00:31:43.140
That I did not know, and I was very delighted


00:31:43.140 --> 00:31:44.640
when users told me about that.


00:31:44.640 --> 00:31:49.080
On Linux, I don't know, I mean, you can go and do an LL in there on the terminal,


00:31:49.080 --> 00:31:52.880
but there's probably some way to show it in the Explorer equivalent as well.


00:31:52.880 --> 00:31:55.480
- Yeah. - But yeah, then you'll just run it.


00:31:55.480 --> 00:31:59.520
You can navigate into it from your terminal or wherever.


00:31:59.520 --> 00:32:02.520
And once you're inside of it, yeah, all of the files are right there.


00:32:02.520 --> 00:32:05.980
Yeah, so we go in here, we find things like


00:32:05.980 --> 00:32:11.120
head, config, description, hooks, index, info, logs, objects,


00:32:11.120 --> 00:32:13.120
packed refs and refs.


00:32:13.760 --> 00:32:17.300
You want to maybe give us a rundown of what each one of these are,


00:32:17.300 --> 00:32:20.860
and then we can dive deeper with one of the tools that you built into


00:32:20.860 --> 00:32:23.360
maybe some things like refs and so on.


00:32:23.360 --> 00:32:25.360
But yeah, also maybe hook.


00:32:25.360 --> 00:32:27.860
-Wherever you want to start. -What's cool in this database is


00:32:27.860 --> 00:32:31.200
it is the entire history of your project.


00:32:31.200 --> 00:32:34.200
And it's Zlib compressed.


00:32:34.200 --> 00:32:38.700
So for example, the 20-year history of Perl,


00:32:40.080 --> 00:32:46.200
the .git folder is ever so slightly larger than the checkout folder.


00:32:46.200 --> 00:32:49.940
And that includes the entire history, including all of the changes


00:32:49.940 --> 00:32:55.460
and all of the authors and all of that is really nicely compressed into this folder.


00:32:55.460 --> 00:32:58.580
It breaks down into a couple of groups of things.


00:32:58.580 --> 00:33:01.240
We have the content,


00:33:01.240 --> 00:33:06.920
we have branches and tags, you know, references to the content.


00:33:06.920 --> 00:33:11.640
we have configuration details around this repository,


00:33:11.640 --> 00:33:15.120
we have index files, we have temp files,


00:33:15.120 --> 00:33:17.120
and then we have automation tools.


00:33:17.120 --> 00:33:21.720
And so these are kind of the groups of things that we'll find in this folder.


00:33:21.720 --> 00:33:25.040
A lot of them happen to be in their own folder, which is really nice.


00:33:25.040 --> 00:33:28.040
So for example, hooks is the place that you go for automation.


00:33:28.040 --> 00:33:30.960
Refs is the place where all of the content is.


00:33:34.600 --> 00:33:39.860
No, refs is the place for branches, objects is the place for the content.


00:33:39.860 --> 00:33:43.240
And so a lot of the things that we'll see will have their own folder,


00:33:43.240 --> 00:33:48.240
but some of them spill out, like configuration is in the config file,


00:33:48.240 --> 00:33:51.600
but there's also some stuff in the info folder for that.


00:33:51.600 --> 00:33:57.160
Indexes, we've got the index file right there on the root directory,


00:33:57.160 --> 00:34:02.160
but we also end up with index files inside of pack folders.


00:34:02.160 --> 00:34:04.800
and so it gets a little bit interesting.


00:34:04.800 --> 00:34:06.800
- Yeah, so let's talk about-- - The first one that's really--


00:34:06.800 --> 00:34:08.800
Yeah, go ahead.


00:34:08.800 --> 00:34:12.680
The first one to dive into is probably the Objects folder


00:34:12.680 --> 00:34:17.180
because this is the stash of all of the content in your repository.


00:34:17.180 --> 00:34:21.180
Now, as you commit something into Git,


00:34:21.180 --> 00:34:23.520
you'll first add it to the staging area,


00:34:23.520 --> 00:34:25.520
and then you'll commit it with a message,


00:34:25.520 --> 00:34:30.660
and as you do so, you'll end up with content inside the Objects folder.


00:34:30.660 --> 00:34:34.920
Now what's interesting to note here is if you look at a git log,


00:34:34.920 --> 00:34:39.900
you'll see a hexadecimal thing, you know, it might be seven characters


00:34:39.900 --> 00:34:41.900
or it might be much longer than that.


00:34:41.900 --> 00:34:45.600
And as you do that log,


00:34:45.600 --> 00:34:49.440
you can take a look at that inside the objects folder


00:34:49.440 --> 00:34:51.440
are folders with two digits.


00:34:51.440 --> 00:34:54.320
Those are the first two digits of the commit number.


00:34:54.320 --> 00:34:58.820
Inside that folder is all of the commits


00:34:58.820 --> 00:35:03.460
that happen to start with that two-digit number or letter.


00:35:03.460 --> 00:35:07.980
So that means that not all of the files will be in one directory.


00:35:07.980 --> 00:35:10.460
They'll kind of be arranged a little bit.


00:35:10.460 --> 00:35:13.820
That gets around too many files in one directory errors.


00:35:13.820 --> 00:35:18.500
But it's that .git, that objects folder


00:35:18.500 --> 00:35:21.260
that then stores all of the content there.


00:35:21.260 --> 00:35:24.100
Now what's interesting is I think of it,


00:35:24.100 --> 00:35:27.940
if I commit one, and that's where this talk was really cool,


00:35:27.940 --> 00:35:32.040
When I commit one thing and I go look in that objects folder,


00:35:32.040 --> 00:35:34.780
I will have three different files.


00:35:34.780 --> 00:35:36.780
Now they are Zlib compressed,


00:35:36.780 --> 00:35:39.620
- so I do a cool demo... - Yeah, you can't just open them up


00:35:39.620 --> 00:35:42.220
and look at them, right? They're kind of...


00:35:42.220 --> 00:35:44.220
- Right. - ...scrambled up.


00:35:44.220 --> 00:35:46.620
But it's not magic, you know,


00:35:46.620 --> 00:35:50.660
I built a tool that will un-Zlib compress one,


00:35:50.660 --> 00:35:52.660
which is pretty cool.


00:35:52.660 --> 00:35:56.500
But once we identify a thing that we want to do,


00:35:56.500 --> 00:35:59.000
we can also use git cat file.


00:35:59.000 --> 00:36:03.740
Git cat file allows us to look at both the type


00:36:03.740 --> 00:36:06.740
and the content in a particular node.


00:36:06.740 --> 00:36:10.580
Notice it's a directional acyclical graph nodes,


00:36:10.580 --> 00:36:15.380
DAG nodes, that specify relationships between these things.


00:36:15.380 --> 00:36:17.380
- But what's cool is we-- - Here's a branch,


00:36:17.380 --> 00:36:20.460
here's a file that's in that branch, something like that.


00:36:20.460 --> 00:36:23.460
They're not branches, but they are folders.


00:36:23.460 --> 00:36:25.620
Here's a file within a folder.


00:36:25.620 --> 00:36:30.120
Here's the content. So we have three different types of these nodes.


00:36:30.120 --> 00:36:34.860
One is a commit, and in the commit, we have the author's name


00:36:34.860 --> 00:36:39.400
and the date that it was committed, the message that we gave.


00:36:39.400 --> 00:36:44.940
And also in that commit is a reference to the tree nodes


00:36:44.940 --> 00:36:46.940
that are part of that commit.


00:36:46.940 --> 00:36:52.320
Now each tree node can specify files or folders,


00:36:52.320 --> 00:36:54.780
so a tree node can reference another tree node.


00:36:54.780 --> 00:36:59.020
And inside the tree node, we have references to those files.


00:36:59.020 --> 00:37:03.160
So I might have a tree node that references file1.txt.


00:37:03.160 --> 00:37:05.860
The third type is a blob.


00:37:05.860 --> 00:37:09.200
And so as we look at blobs,


00:37:09.200 --> 00:37:12.600
then that's the actual content in the thing.


00:37:12.600 --> 00:37:17.740
So go back to the... click on...


00:37:17.740 --> 00:37:23.080
Oh, I don't think I have a one to get back to the blob.


00:37:23.080 --> 00:37:26.020
But the cool part about this app, hit refresh,


00:37:26.020 --> 00:37:28.760
and you'll get to that big blob of stuff.


00:37:28.760 --> 00:37:31.300
Here's all of the bits in this.


00:37:31.300 --> 00:37:34.020
>> I jumped ahead so we had something visually to look at here,


00:37:34.020 --> 00:37:36.620
and it's about to pull up its rendering.


00:37:36.620 --> 00:37:39.380
>> Yes, I'm still performing.


00:37:39.380 --> 00:37:42.380
>> That's all right. You built this thing called Git-Explorer,


00:37:42.380 --> 00:37:47.620
which is a little web app that runs that you pointed at a Git repository,


00:37:47.620 --> 00:37:51.860
and it lets you look at these things that you're describing visually,


00:37:51.860 --> 00:37:53.860
and then click around on them, right?


00:37:53.860 --> 00:37:55.860
Right. So click on show type,


00:37:55.860 --> 00:37:57.860
and we see the three different colors emerge.


00:37:57.860 --> 00:37:59.860
There are commits, trees, and blobs.


00:37:59.860 --> 00:38:01.860
And it's like, okay, I have a whole bunch


00:38:01.860 --> 00:38:03.860
of files in my


00:38:03.860 --> 00:38:05.860
objects folder,


00:38:05.860 --> 00:38:07.860
and I can click on each one, and


00:38:07.860 --> 00:38:09.860
I'll use that git cat file


00:38:09.860 --> 00:38:11.860
thing to go figure out what it is.


00:38:11.860 --> 00:38:13.860
But it's like, you know,


00:38:13.860 --> 00:38:15.860
I really wish I had more


00:38:15.860 --> 00:38:17.860
stuff about it. And so that's where I click


00:38:17.860 --> 00:38:19.860
alphabetical, and that will


00:38:19.860 --> 00:38:21.860
put them all in order.


00:38:21.860 --> 00:38:24.520
Click on tags and now you can see


00:38:24.520 --> 00:38:27.100
the name of that thing.


00:38:27.100 --> 00:38:29.100
And I'm only showing the first


00:38:29.100 --> 00:38:31.100
seven digits of the commit here.


00:38:31.100 --> 00:38:33.100
But now you can kind of get a sense for


00:38:33.100 --> 00:38:36.380
here are all the objects and click on each one and open it up.


00:38:36.380 --> 00:38:39.740
Right, and these names are what often go by "shahs"


00:38:39.740 --> 00:38:41.740
in Git, Parlance,


00:38:41.740 --> 00:38:45.860
which is just the type of hash, SHA, whatever it is.


00:38:45.860 --> 00:38:49.380
And I don't know how many people know this, but you can use


00:38:49.380 --> 00:38:54.140
sub pieces of the SHA to refer to it in Git.


00:38:54.140 --> 00:38:55.740
So you don't have to say the full,


00:38:55.740 --> 00:38:57.980
what is that, 32 characters or whatever


00:38:57.980 --> 00:39:00.780
to describe a name as long as it's enough to be unique.


00:39:00.780 --> 00:39:04.060
It'll go like you could issue commands against these things


00:39:04.060 --> 00:39:06.060
in this abbreviated form, right?


00:39:06.060 --> 00:39:07.820
Right, exactly.


00:39:07.820 --> 00:39:10.780
So oftentimes only two digits is necessary.


00:39:10.780 --> 00:39:12.780
Sometimes three or four.


00:39:12.780 --> 00:39:15.260
And that's why often when you're looking at Git history,


00:39:15.260 --> 00:39:17.260
it'll only show you the first seven.


00:39:17.260 --> 00:39:19.580
- Because that's-- - Surely enough.


00:39:19.580 --> 00:39:20.580
Yeah.


00:39:20.580 --> 00:39:24.060
Now, what we start to do as we're clicking through this


00:39:24.060 --> 00:39:27.300
is we get a feel for all of these green nodes,


00:39:27.300 --> 00:39:29.660
that's the content in the files,


00:39:29.660 --> 00:39:31.820
the blue nodes are the tree nodes,


00:39:31.820 --> 00:39:34.340
and as I click on one of those blue tree nodes,


00:39:34.340 --> 00:39:36.860
then it references other files.


00:39:36.860 --> 00:39:41.740
I can see their SHAs, their git hashes there in that list.


00:39:41.740 --> 00:39:44.620
And then as I look at the red ones, the commits,


00:39:44.620 --> 00:39:50.120
That's my commit message that includes the parent node


00:39:50.120 --> 00:39:53.200
that was the commit right before this.


00:39:53.200 --> 00:39:56.800
It also references the tree node that has the files for this.


00:39:56.800 --> 00:40:00.960
And so wouldn't it be nice if we could, I don't know, arrange them in a way.


00:40:00.960 --> 00:40:05.740
So let's, instead of going from alphabetical, let's click on parent child


00:40:05.740 --> 00:40:08.240
and start to see the relationships.


00:40:08.240 --> 00:40:12.080
We'll need to turn on lines now, and we probably want to also turn on tags.


00:40:12.080 --> 00:40:15.080
And now we can take a look at those commits


00:40:15.080 --> 00:40:17.680
and see how each one references.


00:40:17.680 --> 00:40:20.180
Now, if you have a very large repository...


00:40:20.180 --> 00:40:22.180
- Shoots off. - Then...


00:40:22.180 --> 00:40:24.180
I haven't built scrolling yet, sorry.


00:40:24.180 --> 00:40:27.460
But you can see that the red commit nodes


00:40:27.460 --> 00:40:29.460
all reference each other,


00:40:29.460 --> 00:40:31.800
and reference the previous ones,


00:40:31.800 --> 00:40:34.060
and then they go into these tree nodes


00:40:34.060 --> 00:40:36.060
that may reference other tree nodes,


00:40:36.060 --> 00:40:38.060
and eventually those reference the file nodes.


00:40:38.060 --> 00:40:40.640
As part of my demo, I highlight that


00:40:40.640 --> 00:40:43.640
if we create the same file content


00:40:43.640 --> 00:40:46.440
and commit it in two different directories,


00:40:46.440 --> 00:40:49.680
it's actually only one blob on disk.


00:40:49.680 --> 00:40:51.680
There's only one green blob node.


00:40:51.680 --> 00:40:55.440
But the cool part here is we were able to explore


00:40:55.440 --> 00:40:58.320
each of these objects in our repository


00:40:58.320 --> 00:41:00.320
and we get a feel for how they work.


00:41:00.320 --> 00:41:03.120
So if I change one line in a very big file,


00:41:03.120 --> 00:41:04.560
what gets committed?


00:41:04.560 --> 00:41:06.560
Well, the entire file.


00:41:06.560 --> 00:41:07.560
[LAUGHS]


00:41:07.560 --> 00:41:08.560
Yeah.


00:41:10.160 --> 00:41:13.920
Yeah, and I suspect that's probably why large binary files


00:41:13.920 --> 00:41:15.920
are not ideal to be committed here,


00:41:15.920 --> 00:41:17.920
even though we technically can put them there.


00:41:17.920 --> 00:41:20.040
Right.


00:41:20.040 --> 00:41:23.040
So that's the first group of things, is these objects.


00:41:23.040 --> 00:41:25.540
- Yeah, that's the objects folder. - And the group that we want to...


00:41:25.540 --> 00:41:27.540
Go ahead.


00:41:27.540 --> 00:41:30.740
So that's the top-level objects folder in the .git folder.


00:41:30.740 --> 00:41:32.740
- Yeah. - Yes, exactly.


00:41:32.740 --> 00:41:36.540
Now, there is a pack folder inside there.


00:41:36.540 --> 00:41:39.540
If you run various commands,


00:41:39.540 --> 00:41:45.280
then Git will say, "Well, do I have too many commits,


00:41:45.280 --> 00:41:49.080
too many of these objects that I need to pack together


00:41:49.080 --> 00:41:52.560
to make this repository smaller on disk?"


00:41:52.560 --> 00:41:57.560
And if so, then it'll automatically do a GC, a garbage collect,


00:41:57.560 --> 00:42:02.400
where it starts to pack those into pack files.


00:42:02.400 --> 00:42:06.600
Now, it's kind of a Zlib compressed group of Zlib compressed files,


00:42:06.600 --> 00:42:11.120
So it gets very meta there, but that's what the pack folder is inside the objects folder.


00:42:11.120 --> 00:42:13.120
Yeah, okay.


00:42:13.120 --> 00:42:16.360
So next up, let's talk about the refs folder.


00:42:16.360 --> 00:42:23.020
Now when we look at refs, we look at branches and tags and remotes.


00:42:23.020 --> 00:42:27.200
These are files that reference commits.


00:42:27.200 --> 00:42:32.640
So one example is the head folder in the root of the .git directory.


00:42:32.640 --> 00:42:38.020
and inside that head folder, it will specify what head points to.


00:42:38.020 --> 00:42:42.920
So if you do a git log and you see that head has an arrow pointing to, I don't know, main,


00:42:42.920 --> 00:42:46.920
or trunk, or develop, or whatever,


00:42:46.920 --> 00:42:50.520
then if you open up that head file,


00:42:50.520 --> 00:42:55.960
you'll see the text in that file is that file.


00:42:55.960 --> 00:42:58.320
It's basically the SHA, right? Is that what it is?


00:42:58.320 --> 00:43:02.240
It is the SHA if your head is pointing at a SHA.


00:43:02.240 --> 00:43:05.040
But typically, your head won't be pointing at a SHA,


00:43:05.040 --> 00:43:07.040
it'll be pointing at a branch.


00:43:07.040 --> 00:43:11.160
Oh, yeah, mine right now is refs/heads/main,


00:43:11.160 --> 00:43:13.840
which is the default branch for this project.


00:43:13.840 --> 00:43:15.840
So that's awesome.


00:43:15.840 --> 00:43:18.520
Head says it goes to refs/heads/main,


00:43:18.520 --> 00:43:20.520
so we can go into the refs folder,


00:43:20.520 --> 00:43:23.960
we can go into the heads folder, and we can open up main.


00:43:23.960 --> 00:43:29.480
And what's in main is the SHA of the commit that main points to.


00:43:29.480 --> 00:43:31.480
Okay.


00:43:31.480 --> 00:43:34.920
What's cool here is that each of these refs,


00:43:34.920 --> 00:43:38.120
both head and all of these branches,


00:43:38.120 --> 00:43:43.160
is just pointers to the commits in the objects folder.


00:43:43.160 --> 00:43:49.560
Yeah, so these are like the-- what is it?


00:43:49.560 --> 00:43:52.940
The main file is just a text file


00:43:52.940 --> 00:43:55.440
that just literally has only the SHA


00:43:55.440 --> 00:43:57.940
that is where that branch currently is.


00:43:57.940 --> 00:43:59.940
Exactly.


00:43:59.940 --> 00:44:01.200
Okay.


00:44:01.200 --> 00:44:04.000
So technically, to create a branch,


00:44:04.000 --> 00:44:08.500
I just create a file that happens to be in refs, heads,


00:44:08.500 --> 00:44:10.500
I name it something and I give it a SHA.


00:44:10.500 --> 00:44:13.740
And now I have a branch that points at that thing.


00:44:13.740 --> 00:44:18.700
Branches in Git are not these durable, fragile things


00:44:18.700 --> 00:44:21.140
like in TFS or in Subversion.


00:44:21.140 --> 00:44:25.380
Branches in Git are just name tags, they're pointers,


00:44:25.380 --> 00:44:30.180
their references to the commits in this tree of objects.


00:44:30.180 --> 00:44:32.900
So the cool thing is we can--


00:44:32.900 --> 00:44:36.100
These named commits through the history of--


00:44:36.100 --> 00:44:37.620
the overall history of it, right?


00:44:37.620 --> 00:44:39.220
Right.


00:44:39.220 --> 00:44:42.180
They're the labels that we give it so that we can understand it


00:44:42.180 --> 00:44:47.260
because communicating in 32-digit SHAs is not as much fun.


00:44:47.260 --> 00:44:49.260
No, definitely not.


00:44:49.260 --> 00:44:50.260
Definitely not.


00:44:50.260 --> 00:44:54.380
One of the talks that I like to do is I do a Git log


00:44:54.380 --> 00:44:58.820
and I show that 32 digit hash and I read it out


00:44:58.820 --> 00:45:00.520
and then I walk up to somebody in the audience


00:45:00.520 --> 00:45:03.420
and pretend they're the project manager and I go,


00:45:03.420 --> 00:45:04.360
can I ship it?


00:45:04.360 --> 00:45:10.700
And they're like, yeah, thus we have these labels.


00:45:10.700 --> 00:45:12.780
- Yeah, that's right.


00:45:12.780 --> 00:45:16.620
- Now in the heads folder is all of the branches.


00:45:16.620 --> 00:45:22.300
In the tags folder is all of the tags.


00:45:22.300 --> 00:45:23.220
And there are also--


00:45:23.220 --> 00:45:26.660
My repo is empty, I don't have any, but people might tag a release


00:45:26.660 --> 00:45:29.100
or a version or a beta version or something like that.


00:45:29.100 --> 00:45:31.100
So you can refer to it by name,


00:45:31.100 --> 00:45:36.260
by label instead of main with a SHA or something weird like that.


00:45:36.260 --> 00:45:37.980
Right.


00:45:37.980 --> 00:45:40.580
And then we have a remotes folder,


00:45:40.580 --> 00:45:43.780
which references where I last saw


00:45:43.780 --> 00:45:48.380
another copy of this Git repository's branches.


00:45:48.380 --> 00:45:50.860
Yep.


00:45:53.140 --> 00:45:57.440
So in this case, you have one that says refs, remotes, origin, main,


00:45:57.440 --> 00:45:58.680
and that's perfect.


00:45:58.680 --> 00:46:01.740
That's where I last saw this server,


00:46:01.740 --> 00:46:06.260
this server's main branch.


00:46:06.260 --> 00:46:11.660
Now, in this case, I chose to call my remote server origin.


00:46:11.660 --> 00:46:17.420
Now, this could be a server that we've designated as the server,


00:46:17.420 --> 00:46:22.100
it could be one of my co-workers, it could be a network share.


00:46:22.100 --> 00:46:27.040
Git isn't really opinionated about what constitutes a remote repository


00:46:27.040 --> 00:46:29.040
other than that it isn't this one.


00:46:29.040 --> 00:46:31.620
Yeah, okay.


00:46:31.620 --> 00:46:34.580
How does it know what origin is?


00:46:34.580 --> 00:46:38.660
As I create a remote, I'm going to name it.


00:46:38.660 --> 00:46:39.380
Okay.


00:46:39.380 --> 00:46:43.100
So as I clone, I'm going to say, "Git clone this repository,"


00:46:43.100 --> 00:46:46.600
and it'll build one, and it'll, by default, call it origin.


00:46:46.600 --> 00:46:51.940
But I could also say, "Git remote add origin."


00:46:51.940 --> 00:46:54.460
I just gave it a name, and then give it a URL.


00:46:54.460 --> 00:46:57.080
I could say, "git remote add upstream."


00:46:57.080 --> 00:46:59.780
I could say, "git remote add Michael."


00:46:59.780 --> 00:47:03.180
Now it's a reference from my repository to yours.


00:47:03.180 --> 00:47:07.320
And so it's just, in this case, in the refs/remotes folder,


00:47:07.320 --> 00:47:11.320
it's just a folder referencing the branches that I saw in your machine.


00:47:11.320 --> 00:47:14.620
Nice. Is there somewhere where it stores the URL?


00:47:14.620 --> 00:47:19.260
It does, and that is the next section that we may want to look at,


00:47:19.260 --> 00:47:21.260
which is configuration.


00:47:21.260 --> 00:47:25.760
Let's open up the config file in the root of the .git folder.


00:47:25.760 --> 00:47:32.500
Now this configuration file is really cool.


00:47:32.500 --> 00:47:37.540
It includes all kinds of configuration details associated with our repository.


00:47:37.540 --> 00:47:40.040
Now in this case, we have remote origin,


00:47:40.040 --> 00:47:44.180
where we've named this one and here's the URLs that we go to there.


00:47:44.180 --> 00:47:48.140
In this case, it's github.com/talkpython.


00:47:48.140 --> 00:47:53.300
We have other configuration details associated with this repository.


00:47:53.300 --> 00:48:02.620
This .gitconfig file is actually one of three on my machine.


00:48:02.620 --> 00:48:10.060
And we'll start out with our config file that's installed when we install Git.


00:48:10.060 --> 00:48:15.100
So it's probably in program files, or it's in user local bin,


00:48:15.100 --> 00:48:18.700
or somewhere off in the ether of how we install it,


00:48:18.700 --> 00:48:20.380
we probably don't want to touch that one.


00:48:20.380 --> 00:48:24.380
But that's the base configuration of all the options that we chose


00:48:24.380 --> 00:48:25.820
when we installed Git.


00:48:25.820 --> 00:48:29.100
So if I run a command, if I were to say something like,


00:48:29.100 --> 00:48:34.300
you know, git email global, something like that,


00:48:34.300 --> 00:48:37.260
you know, the -g command, maybe it's modifying that one.


00:48:37.260 --> 00:48:40.860
Well, the one that we just talked about was the system one.


00:48:40.860 --> 00:48:44.060
The second one is the global one, which is user specific.


00:48:44.060 --> 00:48:46.420
I find that name a little confusing.


00:48:46.420 --> 00:48:51.620
But my user specific, the .gitconfig in my user home directory,


00:48:51.620 --> 00:48:56.500
so, you know, C users Rob or user...


00:48:56.500 --> 00:49:02.800
or the tilde slash directory on Mac and Linux,


00:49:02.800 --> 00:49:09.540
that .gitconfig overrides any settings in my system configuration.


00:49:09.540 --> 00:49:12.340
And so oftentimes when you first install Git,


00:49:12.340 --> 00:49:17.580
you'll say, "git config -global user.email user.name."


00:49:17.580 --> 00:49:22.520
And so if you open up that .git config in your user home directory,


00:49:22.520 --> 00:49:24.520
you'll see those settings.


00:49:24.520 --> 00:49:30.160
You'll see your username, your name, your email,


00:49:30.160 --> 00:49:32.560
and all of the details that you've configured there.


00:49:32.560 --> 00:49:37.360
And then the third one is the config file here in your repository


00:49:37.360 --> 00:49:39.540
that will override any of those settings.


00:49:40.000 --> 00:49:43.840
So it doesn't make sense for us to have origin


00:49:43.840 --> 00:49:47.840
in our system, in our user-specific configuration file,


00:49:47.840 --> 00:49:51.520
because, well, each repository will have a different origin.


00:49:51.520 --> 00:49:55.200
But it probably does make sense to put our name and email


00:49:55.200 --> 00:49:58.560
in our system, in our user-specific directory,


00:49:58.560 --> 00:50:02.680
because that would apply to all the repositories on our machine.


00:50:02.680 --> 00:50:05.800
Yeah, absolutely. Almost all of them.


00:50:05.800 --> 00:50:07.800
You might be doing home-based,


00:50:08.800 --> 00:50:11.040
open source work and you might be doing


00:50:11.040 --> 00:50:13.760
corporate button up work,


00:50:13.760 --> 00:50:17.120
and your formal corporate place might not love your


00:50:17.120 --> 00:50:19.120
corporate email


00:50:19.120 --> 00:50:21.120
on the open source project.


00:50:21.120 --> 00:50:23.120
- Maybe you don't like that. - Exactly.


00:50:23.120 --> 00:50:27.440
So when I have that scenario where I need to set my email address,


00:50:27.440 --> 00:50:29.280
maybe my name differently,


00:50:29.280 --> 00:50:31.280
in different repositories,


00:50:31.280 --> 00:50:35.760
I can set it in my .git config in my user home directory,


00:50:35.760 --> 00:50:38.720
and then I can override it in each repository.


00:50:38.720 --> 00:50:42.660
just copy those couple of lines, set them in your config file here,


00:50:42.660 --> 00:50:48.060
and now you've set this repository to track your email differently.


00:50:48.060 --> 00:50:53.700
Is there a git command to change it so I don't actually go into the .git folder


00:50:53.700 --> 00:50:56.700
and I say like git email but not global or git config?


00:50:56.700 --> 00:50:58.700
Yeah, leave off the --global.


00:50:58.700 --> 00:51:00.700
Yeah, okay, perfect.


00:51:00.700 --> 00:51:05.700
Then you don't even have to know how, you just know I do git email and what my email is.


00:51:05.700 --> 00:51:07.700
Right.


00:51:07.700 --> 00:51:12.800
Now there are other configuration files here in the .git folder


00:51:12.800 --> 00:51:16.900
but the config file is really the big one that we like to talk about.


00:51:16.900 --> 00:51:18.900
Yeah.


00:51:18.900 --> 00:51:21.620
But you'll see a description file here.


00:51:21.620 --> 00:51:23.620
That's a configuration file.


00:51:23.620 --> 00:51:29.340
Git-insta-web is a web server baked into Git


00:51:29.340 --> 00:51:32.900
that allows you to kind of browse through your repository.


00:51:32.900 --> 00:51:35.900
Now, Git-insta-web works pretty well on Linux


00:51:35.900 --> 00:51:38.220
and not so great on Windows.


00:51:38.220 --> 00:51:41.740
I bet you've never used Git InstaWeb


00:51:41.740 --> 00:51:43.100
in most-- - I'd never heard of it


00:51:43.100 --> 00:51:45.100
until you brought it up the other day.


00:51:45.100 --> 00:51:50.220
- Yeah, but this configuration file is the name of the website


00:51:50.220 --> 00:51:52.220
when you launch Git InstaWeb.


00:51:52.220 --> 00:51:55.020
- Yeah, so Git ships with a web server


00:51:55.020 --> 00:51:57.340
that can be the host of that Git repository.


00:51:57.340 --> 00:51:59.340
- Yeah.


00:51:59.340 --> 00:52:01.660
Now, why would I ever do that?


00:52:01.660 --> 00:52:03.660
Why wouldn't I just use GitHub?


00:52:03.660 --> 00:52:07.100
Exactly, which is why you've never heard of Git InstaWeb.


00:52:07.100 --> 00:52:14.060
Yeah, I mean, you might say we want a private Git server or public Git server or something


00:52:14.060 --> 00:52:15.060
like that.


00:52:15.060 --> 00:52:17.620
That might be, but yeah, usually, yeah, I've never heard of it.


00:52:17.620 --> 00:52:18.620
So very interesting.


00:52:18.620 --> 00:52:19.620
Yeah.


00:52:19.620 --> 00:52:20.620
All right.


00:52:20.620 --> 00:52:21.620
What else is in this list here?


00:52:21.620 --> 00:52:22.620
Yeah.


00:52:22.620 --> 00:52:23.740
Objects folder.


00:52:23.740 --> 00:52:27.100
We've talked about the branches and tags in the rest folder.


00:52:27.100 --> 00:52:28.820
We've talked about configuration.


00:52:28.820 --> 00:52:30.740
Let's go poke in the hooks folder.


00:52:30.740 --> 00:52:31.740
Oh, hooks.


00:52:31.740 --> 00:52:34.000
- Yeah, hooks is interesting. - Where we do automation.


00:52:34.000 --> 00:52:37.820
Yeah, it is really cool.


00:52:37.820 --> 00:52:44.540
Yeah, so people probably heard of pre-commit hooks, right?


00:52:44.540 --> 00:52:48.100
Like probably the most popular example in the Python space


00:52:48.100 --> 00:52:49.940
is to run the black formatter.


00:52:49.940 --> 00:52:51.760
So it automatically formats your code


00:52:51.760 --> 00:52:53.300
before it checks it in.


00:52:53.300 --> 00:52:56.460
So indentation, whitespace,


00:52:56.460 --> 00:53:00.140
like between a comma and an argument or something,


00:53:00.140 --> 00:53:00.980
it's always consistent


00:53:00.980 --> 00:53:06.260
so you don't get these back and forth editor driven merge issues.


00:53:06.260 --> 00:53:09.900
There's no real change, but I format it in my editor,


00:53:09.900 --> 00:53:13.020
you format it in yours, and back and forth it goes between


00:53:13.020 --> 00:53:16.020
spaces with a comma, no spaces with a comma, spaces with a comma.


00:53:16.020 --> 00:53:19.900
And so you could set up a pre-commit hook to canonicalize it


00:53:19.900 --> 00:53:21.900
before it goes in.


00:53:21.900 --> 00:53:23.900
- Right. - But there's more than pre-commit, right?


00:53:23.900 --> 00:53:29.060
Yeah, I could set up a pre-commit hook to make sure all my unit tests pass


00:53:29.060 --> 00:53:31.600
before I commit, I could set up...


00:53:31.600 --> 00:53:34.060
And so what we see here in this hooks directory


00:53:34.060 --> 00:53:39.300
is all different kinds of automation things.


00:53:39.300 --> 00:53:43.140
So pre-commit hook, a pre-merge hook, a pre-push hook,


00:53:43.140 --> 00:53:47.880
a pre-rebase hook, and each of these are shell scripts.


00:53:47.880 --> 00:53:49.880
Well, with one exception, it's a Perl script.


00:53:49.880 --> 00:53:54.020
But you see at the very top, it says /bin/sh.


00:53:54.020 --> 00:53:56.020
Why am I on a Windows box?


00:53:56.020 --> 00:53:58.020
Is this shell script still going to work?


00:53:58.020 --> 00:54:03.860
Oh, yeah, Git ships with enough Linux-y, Unix-y, Bash-like stuff


00:54:03.860 --> 00:54:06.660
to be able to kick off these shell scripts and run them


00:54:06.660 --> 00:54:08.660
as it would on any Linux system.


00:54:08.660 --> 00:54:12.660
Okay, and then here in this shell script--


00:54:12.660 --> 00:54:14.660
It's basically like a little mini Bash that comes with it.


00:54:14.660 --> 00:54:17.460
I remember people using that Bash shell from Git


00:54:17.460 --> 00:54:19.940
to be more Unix-like on Windows.


00:54:19.940 --> 00:54:21.940
Exactly.


00:54:21.940 --> 00:54:25.220
So here in this shell script, I could do all kinds of things.


00:54:25.220 --> 00:54:27.220
Maybe I'm calling a PowerShell script.


00:54:27.220 --> 00:54:30.860
maybe I'm calling a Python script, maybe I'm calling a node formatter,


00:54:30.860 --> 00:54:34.460
I can just call into whatever tasks I want to accomplish,


00:54:34.460 --> 00:54:39.460
and that will then accomplish that task whenever this event happens.


00:54:39.460 --> 00:54:44.260
So what I love to do in my demo is remove all the dot sample pieces


00:54:44.260 --> 00:54:47.900
so that they're actual scripts, and then just merely the presence


00:54:47.900 --> 00:54:51.340
of that file will be able to kick off that automation.


00:54:51.340 --> 00:54:54.940
Alright, so there's a bunch of files that are sample shell scripts


00:54:54.940 --> 00:54:59.540
named things like pre-commit.sample or pre-merge-commit-sample.


00:54:59.540 --> 00:55:02.960
If I just called it pre-commit but not the dot sample,


00:55:02.960 --> 00:55:04.960
now it's going to be active?


00:55:04.960 --> 00:55:06.960
- Exactly. - Okay.


00:55:06.960 --> 00:55:08.960
Nice.


00:55:08.960 --> 00:55:12.300
Now the cool part about these is that I have all my automation set up.


00:55:12.300 --> 00:55:17.460
I'm running the formatters, I've got my unit test passing, and it's great.


00:55:17.460 --> 00:55:21.100
But this file is inside my .git folder.


00:55:21.100 --> 00:55:23.100
So I can't commit these.


00:55:23.100 --> 00:55:26.020
It's not one of the files that is available for me


00:55:26.020 --> 00:55:28.100
to add to the staging area.


00:55:28.100 --> 00:55:28.940
- Right.


00:55:28.940 --> 00:55:32.220
It would be inception if you tried to commit stuff


00:55:32.220 --> 00:55:33.900
in the .git folder.


00:55:33.900 --> 00:55:35.180
- Right.


00:55:35.180 --> 00:55:39.460
So often we'll create shell scripts outside the .git folder


00:55:39.460 --> 00:55:43.180
and commit them and then have something here


00:55:43.180 --> 00:55:45.780
inside the .git folder that calls into


00:55:45.780 --> 00:55:47.220
that other shell script.


00:55:47.220 --> 00:55:49.500
- Yeah, and you make some kind of node-based tool


00:55:49.500 --> 00:55:53.500
that you can use that will manage that stuff, right?


00:55:53.500 --> 00:55:55.740
Right. There's lots of packages.


00:55:55.740 --> 00:56:02.080
The one that I show is githooks, that is an npm package.


00:56:02.080 --> 00:56:05.920
And once you install githooks, it will actually create all those aliases


00:56:05.920 --> 00:56:11.120
from the folder where you actually build the scripts that you can commit


00:56:11.120 --> 00:56:14.860
into this hooks directory so that then they'll run.


00:56:14.860 --> 00:56:19.060
Just installing this package installs those hooks into place.


00:56:19.060 --> 00:56:24.660
I see. So basically, if you just install the package once,


00:56:24.660 --> 00:56:28.660
it will find those other external scripts


00:56:28.660 --> 00:56:31.160
and make those be the ones that get seized


00:56:31.160 --> 00:56:33.360
with the advantage that you can commit them into GitHub.


00:56:33.360 --> 00:56:36.660
And if somebody makes a change, that change will propagate to everyone else.


00:56:36.660 --> 00:56:40.660
Yes, you can commit them into Git, push them up to GitHub,


00:56:40.660 --> 00:56:42.160
and they will run.


00:56:42.160 --> 00:56:44.160
Okay, yeah, fantastic.


00:56:44.160 --> 00:56:46.160
Yeah.


00:56:46.160 --> 00:56:48.160
Yeah, very neat, very neat. Okay.


00:56:48.160 --> 00:56:49.560
What else have we got here?


00:56:49.560 --> 00:56:51.960
- So we looked through- - I think maybe index,


00:56:51.960 --> 00:56:54.120
maybe that's an interesting one.


00:56:54.120 --> 00:56:56.980
- Yeah, index is really interesting.


00:56:56.980 --> 00:56:58.240
As we look through index,


00:56:58.240 --> 00:57:01.520
if we just pop it open in a editor,


00:57:01.520 --> 00:57:03.800
it's just a bunch of gobbledygook.


00:57:03.800 --> 00:57:05.280
And we're like, what is this?


00:57:05.280 --> 00:57:06.120
- It's a file, right?


00:57:06.120 --> 00:57:07.040
Yeah.


00:57:07.040 --> 00:57:08.600
- Yeah.


00:57:08.600 --> 00:57:10.100
This isn't the only index,


00:57:10.100 --> 00:57:12.700
but this is one of the really cool indexes


00:57:12.700 --> 00:57:16.100
where Git keeps track of interesting stuff.


00:57:16.100 --> 00:57:16.940
Yeah, check out this blog.


00:57:16.940 --> 00:57:18.540
>> I tried to look at it.


00:57:18.540 --> 00:57:23.780
It's like a binary blob exploded and died on my terminal.


00:57:23.780 --> 00:57:25.620
But there are file names in there somewhere.


00:57:25.620 --> 00:57:27.740
So it must be something to do with that.


00:57:27.740 --> 00:57:28.240
>> Yeah.


00:57:28.240 --> 00:57:44.340
I'm not remembering the command where


00:57:44.340 --> 00:57:51.300
can go look, I think it's get ls-files, where you can go look through this index.


00:57:51.300 --> 00:58:06.020
Oh yeah, we can't run it. It's ls-files. All one word. Yeah, there we go. And if we pass in


00:58:06.020 --> 00:58:12.020
flags to that, then it'll be able to show the status of those files. But this is looking through


00:58:12.020 --> 00:58:18.900
that index. And the cool part about looking through that index is that Git, if it wants


00:58:18.900 --> 00:58:27.540
to do a quick thing like which files have changed, needs to know the blob that is checked


00:58:27.540 --> 00:58:32.940
out in my working directory. Which blob did I start with? As we look through those objects,


00:58:32.940 --> 00:58:39.340
we saw a big tree of things. And so opening up each commit node, finding all the tree


00:58:39.340 --> 00:58:42.640
opening up each tree node, finding all of the blob nodes.


00:58:42.640 --> 00:58:44.640
That takes a while.


00:58:44.640 --> 00:58:47.640
And so this is a cache, an index,


00:58:47.640 --> 00:58:50.440
of all the files that I checked out in my working directory.


00:58:50.440 --> 00:58:52.940
This allows Git to move really fast


00:58:52.940 --> 00:58:56.540
as it looks through my folder


00:58:56.540 --> 00:58:59.340
and identifies any files that have changed


00:58:59.340 --> 00:59:01.640
or new files or things like that.


00:59:01.640 --> 00:59:03.640
So that's what this index file is for.


00:59:03.640 --> 00:59:08.040
Yeah, and my Git incantations are not pulling it up here,


00:59:08.040 --> 00:59:11.640
but I think you can get it to show the Shaw of each file as well, right?


00:59:11.640 --> 00:59:17.040
Right, in which case then instead of traversing the whole history.


00:59:17.040 --> 00:59:22.140
And actually looked at the file hard drive and saying, well, what is its hash?


00:59:22.140 --> 00:59:24.240
Do I have an update for this file?


00:59:24.240 --> 00:59:26.940
I could just look in this binary file and get that answer, right?


00:59:26.940 --> 00:59:28.840
Exactly.


00:59:28.840 --> 00:59:31.540
Nice.


00:59:31.540 --> 00:59:33.940
Yeah.


00:59:33.940 --> 00:59:36.540
One of the files of


00:59:37.440 --> 00:59:41.280
The next section of files that we want to look at are logs.


00:59:41.280 --> 00:59:44.980
And the cool thing about Git's logs


00:59:44.980 --> 00:59:50.380
is they keep track of where all of our branches have been.


00:59:50.380 --> 00:59:55.660
So if we cat.git/logs/head,


00:59:55.660 --> 00:59:59.500
then we get a thing that kind of looks really weird.


00:59:59.500 --> 01:00:01.600
We've got really long lines in this.


01:00:01.600 --> 01:00:06.140
And in our first line, it says a whole bunch of zeros, space,


01:00:06.140 --> 01:00:09.940
And then we've got the git shaw of the commit that it went to


01:00:09.940 --> 01:00:11.940
and a little bit about that commit.


01:00:11.940 --> 01:00:17.780
This is a log of where our branches have been.


01:00:17.780 --> 01:00:21.080
And so we'll have a file for each of our branches.


01:00:21.080 --> 01:00:23.460
In this case, we're looking at the head file.


01:00:23.460 --> 01:00:28.620
So we see that head started out nowhere and ended up at ed13fc.


01:00:28.620 --> 01:00:33.060
- Now the really interesting-- - It has my username, my email,


01:00:33.060 --> 01:00:35.060
and then some other stuff.


01:00:35.060 --> 01:00:36.060
Yeah.


01:00:36.060 --> 01:00:41.200
The really interesting thing is this log can be really useful


01:00:41.200 --> 01:00:45.300
if, for example, I switch branches and forgot where I was,


01:00:45.300 --> 01:00:48.840
or I commit something and then I uncommit it.


01:00:48.840 --> 01:00:50.540
That's a thing.


01:00:50.540 --> 01:00:54.440
And I want to get back to it, or I delete a branch before I merged it in,


01:00:54.440 --> 01:00:56.220
or those types of things.


01:00:56.220 --> 01:00:57.920
If I do that quickly enough,


01:00:57.920 --> 01:01:00.220
remember, Git's going to do that garbage collect


01:01:00.220 --> 01:01:04.280
and go prune nodes that aren't used anymore.


01:01:04.280 --> 01:01:07.620
If I get there quickly enough, I can use this log


01:01:07.620 --> 01:01:12.460
to go back through my refs and go find that commit.


01:01:12.460 --> 01:01:17.660
The objects are still there, I just don't have any refs pointing to them anymore.


01:01:17.660 --> 01:01:22.700
And so the command that we can use on the command line is called "git reflog,"


01:01:22.700 --> 01:01:26.300
and we can pass "git reflog" a particular branch we want to look at,


01:01:26.300 --> 01:01:29.540
but by default, if we just say "git reflog," all one word,


01:01:29.540 --> 01:01:33.380
then it will show the history of head.


01:01:33.380 --> 01:01:37.020
Now, in this case, we didn't move it very far.


01:01:37.020 --> 01:01:41.820
But we can see there, oh, and here's the branch that I just deleted.


01:01:41.820 --> 01:01:44.460
And here's the SHA for this one.


01:01:44.460 --> 01:01:48.540
And so at that point, then we can get checkout that commit


01:01:48.540 --> 01:01:53.740
and get back to the content that we had created and then lost the reference to.


01:01:53.740 --> 01:01:57.340
Right. Okay, nice. There's a little bit of recovery.


01:01:57.340 --> 01:02:00.580
Kind of an undelete if you had to in there.


01:02:00.580 --> 01:02:02.580
Yeah.


01:02:02.580 --> 01:02:04.580
Nice.


01:02:04.580 --> 01:02:10.580
The funny thing about this, the command is git reflog, but I've


01:02:10.580 --> 01:02:12.580
also heard it pronounced git reflog.


01:02:12.580 --> 01:02:16.580
And I'm like, so I've got this cat of nine tails, and I'm like,


01:02:16.580 --> 01:02:18.580
no, you can't, git reflog.


01:02:18.580 --> 01:02:20.580
Exactly.


01:02:20.580 --> 01:02:22.580
Do it again.


01:02:22.580 --> 01:02:25.580
But once you understand how the refs folder works, then git reflog


01:02:25.580 --> 01:02:27.580
makes a whole lot of sense.


01:02:27.580 --> 01:02:32.580
at what those ref files have said in the past.


01:02:32.580 --> 01:02:34.660
Here's what it was before we changed it.


01:02:34.660 --> 01:02:36.940
Here's what it became after we changed it


01:02:36.940 --> 01:02:38.980
and a little bit more context around it.


01:02:38.980 --> 01:02:40.340
- Where you're currently working


01:02:40.340 --> 01:02:41.860
is where the head is pointing.


01:02:41.860 --> 01:02:43.380
Often that's some kind of branch.


01:02:43.380 --> 01:02:46.900
And this is like, where's the history of that bin


01:02:46.900 --> 01:02:48.700
throughout the branch that it's on?


01:02:48.700 --> 01:02:50.660
- Yes.


01:02:50.660 --> 01:02:54.960
- Yeah, very cool, very cool.


01:02:54.960 --> 01:02:57.220
So we're getting sort of short on time here.


01:02:57.220 --> 01:02:59.820
What else should we be talking about?


01:02:59.820 --> 01:03:02.140
What else should we close this out with


01:03:02.140 --> 01:03:07.140
in terms of content of our .gif file?


01:03:07.140 --> 01:03:10.620
- The only other section in here is temp files.


01:03:10.620 --> 01:03:13.060
So if we've committed stuff,


01:03:13.060 --> 01:03:16.580
we might see a commit_msg file,


01:03:16.580 --> 01:03:20.120
or maybe it's called commit_message.


01:03:20.120 --> 01:03:21.860
We might see other temp files.


01:03:21.860 --> 01:03:25.520
We have a temp folder sometimes baked into things.


01:03:25.520 --> 01:03:29.360
And so that's the last group of files here in the .git folder


01:03:29.360 --> 01:03:31.360
is temp files.


01:03:31.360 --> 01:03:35.640
Temp files, configuration, objects, refs, hooks,


01:03:35.640 --> 01:03:38.100
these are all the pieces that come together


01:03:38.100 --> 01:03:40.100
to make this Git database.


01:03:40.100 --> 01:03:42.840
And once again, you really can't break Git.


01:03:42.840 --> 01:03:46.320
It's like, "Well, I did this incantation and it's broken."


01:03:46.320 --> 01:03:50.480
Well, no, you can use reflog to get back to a particular commit,


01:03:50.480 --> 01:03:52.480
or you can use various commands,


01:03:52.480 --> 01:03:55.760
check out to get back to where you need to,


01:03:55.760 --> 01:03:58.200
maybe you'll use reset to, you know,


01:03:58.200 --> 01:04:00.560
kind of get your working directory back in shape.


01:04:00.560 --> 01:04:03.400
But that structure of Git,


01:04:03.400 --> 01:04:06.820
the double entry bookkeeping inside this repository


01:04:06.820 --> 01:04:09.280
is really good at keeping track of the things.


01:04:09.280 --> 01:04:12.420
And so you really can't break Git.


01:04:12.420 --> 01:04:15.720
- Yeah.


01:04:15.720 --> 01:04:18.480
And back this up, you back it up, right?


01:04:18.480 --> 01:04:20.240
You back up this folder, you back up


01:04:20.240 --> 01:04:21.640
basically everything, right?


01:04:21.640 --> 01:04:26.120
Now it might be easier to back it up, not by just backing up this folder,


01:04:26.120 --> 01:04:29.360
but by publishing your changes to another repository.


01:04:29.360 --> 01:04:31.680
And that's where we have great workflows, like,


01:04:31.680 --> 01:04:34.000
I will push all of these changes


01:04:34.000 --> 01:04:37.000
to another server, maybe I'll call that server origin.


01:04:37.000 --> 01:04:41.320
Yeah, absolutely. And that is automatic if you check out from somewhere like,


01:04:41.320 --> 01:04:42.960
clone it from somewhere like Git.


01:04:42.960 --> 01:04:44.280
Right.


01:04:44.280 --> 01:04:49.320
So there's just a couple of other things maybe I want to touch on really quickly while we have a moment.


01:04:49.320 --> 01:04:51.160
When you talked about breaking Git,


01:04:51.160 --> 01:04:55.960
There's an interesting little Zine thing called Dangit Git,


01:04:55.960 --> 01:04:59.080
or even better, maybe I'll link to the better version,


01:04:59.080 --> 01:05:01.200
the not safe for work version where you're frustrated


01:05:01.200 --> 01:05:03.840
and it's like, oh no, I just did something terribly wrong.


01:05:03.840 --> 01:05:04.800
Please tell me how to do it.


01:05:04.800 --> 01:05:07.920
And Reflog is right at the top of these things.


01:05:07.920 --> 01:05:10.040
I committed and immediately realized


01:05:10.040 --> 01:05:11.040
I need to make a change,


01:05:11.040 --> 01:05:13.280
or I need to change my commit message.


01:05:13.280 --> 01:05:16.040
And yeah, anyway, that's a pretty interesting one.


01:05:16.040 --> 01:05:18.640
Another thing we've talked a lot about GitHub,


01:05:18.640 --> 01:05:20.600
and what we haven't really talked about


01:05:20.600 --> 01:05:24.240
at all, really, is .gitignore.


01:05:24.240 --> 01:05:26.240
As much as you want to track stuff,


01:05:26.240 --> 01:05:28.740
you don't want to automatically track a bunch of things


01:05:28.740 --> 01:05:30.740
that are working files.


01:05:30.740 --> 01:05:33.480
Build stuff from C++,


01:05:33.480 --> 01:05:36.720
or maybe node_modules,


01:05:36.720 --> 01:05:41.220
or PyCharm working files,


01:05:41.220 --> 01:05:44.120
or all sorts of things should not go into your project.


01:05:44.120 --> 01:05:46.120
Right?


01:05:46.120 --> 01:05:48.120
- Your vn directory? - Yeah.


01:05:48.120 --> 01:05:50.120
Yes, exactly, your vn directory. Absolutely.


01:05:50.120 --> 01:05:53.920
- So there's getting more-- - Any content that you download,


01:05:53.920 --> 01:05:57.360
any content that you compile,


01:05:57.360 --> 01:05:59.960
any of that content shouldn't be in your repository


01:05:59.960 --> 01:06:01.960
because it changes too infrequently,


01:06:01.960 --> 01:06:06.360
and it's usually easier to either rebuild it or redownload it.


01:06:06.360 --> 01:06:08.640
All those things should be ignored.


01:06:08.640 --> 01:06:12.080
Yeah, it's a huge merge nightmare as well.


01:06:12.080 --> 01:06:14.080
Even if you could keep it, right?


01:06:14.080 --> 01:06:16.080
Suppose I check in my VM directory,


01:06:16.080 --> 01:06:19.480
and you go on Windows, well, you can't have the same contents as mine


01:06:19.480 --> 01:06:21.980
because mine is the macOS version.


01:06:21.980 --> 01:06:24.240
So you change it, put your Windows version in there,


01:06:24.240 --> 01:06:26.240
and I get it back out and it breaks my Mac versions.


01:06:26.240 --> 01:06:27.400
I got right those.


01:06:27.400 --> 01:06:29.780
So there's stuff you should ignore. Absolutely.


01:06:29.780 --> 01:06:31.780
And when you create a new project on GitHub,


01:06:31.780 --> 01:06:33.980
it very handily says,


01:06:33.980 --> 01:06:36.440
"Hey, what kind of project is this?


01:06:36.440 --> 01:06:39.240
We can get you far down the road with your gitignore.


01:06:39.240 --> 01:06:40.700
Is this a Python project?


01:06:40.700 --> 01:06:43.540
Is it a Node project or whatever, right?"


01:06:43.540 --> 01:06:47.660
What I wanted to point out is that dropdown list,


01:06:47.660 --> 01:06:51.240
There's actually a GitHub project called gitignore


01:06:51.240 --> 01:06:54.700
that has the ignore for all of these different languages.


01:06:54.700 --> 01:06:59.480
So if you want to make a change to, say, Python's gitignore,


01:06:59.480 --> 01:07:02.480
you can go there and pull it up and see it,


01:07:02.480 --> 01:07:05.320
and you could technically do a PR against it to say,


01:07:05.320 --> 01:07:08.120
"There's this new thing that's common in the community now.


01:07:08.120 --> 01:07:10.520
Please fix it." That's pretty cool.


01:07:10.520 --> 01:07:13.360
And these things aren't perfect.


01:07:13.360 --> 01:07:19.040
you know, most of them will exclude everything that starts with or ends with or contains log.


01:07:19.040 --> 01:07:23.760
But your iLogger or your log handler


01:07:23.760 --> 01:07:26.560
might get excluded by that as well.


01:07:26.560 --> 01:07:30.080
So you may need to adjust this to get it the way you want.


01:07:30.080 --> 01:07:34.880
Yeah, but it is nice to know that at least it'll give you a bit of a start and that it's


01:07:34.880 --> 01:07:38.160
it's a thing that you can contribute back to. It's not just


01:07:38.160 --> 01:07:42.320
magic inside of GitHub, but it's its own GitHub open source repository.


01:07:42.320 --> 01:07:44.320
Right.


01:07:44.320 --> 01:07:46.320
Quite neat.


01:07:46.320 --> 01:07:48.820
Let's see, what else should we cover really quick?


01:07:48.820 --> 01:07:50.820
I think maybe just one other thing


01:07:50.820 --> 01:07:53.560
I think that's maybe worth throwing out there that was interesting,


01:07:53.560 --> 01:07:57.480
but it's pretty specific, but you've mentioned Windows a couple of times.


01:07:57.480 --> 01:07:59.480
Maybe two things actually.


01:07:59.480 --> 01:08:03.320
One is on the shell that you saw on my screen just a minute ago,


01:08:03.320 --> 01:08:05.320
when I was inside of a Git repository,


01:08:05.320 --> 01:08:08.620
it would actually put what branch it was on


01:08:08.620 --> 01:08:10.620
and the Git state and so on.


01:08:10.620 --> 01:08:13.140
I have that because I have oh my Z shell


01:08:13.140 --> 01:08:18.300
all which is a really nice shell for Mac and Linux


01:08:18.300 --> 01:08:21.100
that gives you things like branch awareness


01:08:21.100 --> 01:08:22.980
and number of changes and so on.


01:08:22.980 --> 01:08:26.460
I saw your talk, you had something like that for PowerShell


01:08:26.460 --> 01:08:28.300
the new Microsoft terminal.


01:08:28.300 --> 01:08:30.580
What were you using for that one?


01:08:30.580 --> 01:08:32.160
- It's called oh my posh.


01:08:32.160 --> 01:08:37.820
And Scott Hanselman has a really cool video about oh my posh


01:08:37.820 --> 01:08:40.480
where he walks us through how to get it installed.


01:08:40.480 --> 01:08:43.480
There are various themes into OhMyPosh,


01:08:43.480 --> 01:08:47.200
but the theme that I really enjoy actually puts the cursor on the next line.


01:08:47.200 --> 01:08:51.200
One of the things that I frequently do in command prompt is,


01:08:51.200 --> 01:08:54.000
I have all of the path to get to this folder,


01:08:54.000 --> 01:08:57.840
and so the command that I'm trying to teach ends up getting wrapped to the next line.


01:08:57.840 --> 01:09:01.040
And so OhMyPosh or OhMyZSH


01:09:01.040 --> 01:09:04.140
gives you that additional context of


01:09:04.140 --> 01:09:06.020
how's your Git repository doing?


01:09:06.020 --> 01:09:08.020
You could also show your remote.


01:09:08.020 --> 01:09:11.540
It's basically just running a shell script behind the scenes.


01:09:11.540 --> 01:09:13.740
And so you can modify that shell script.


01:09:13.740 --> 01:09:16.020
Scott Hanselman is diabetic


01:09:16.020 --> 01:09:18.860
and so needs to check his blood sugar a lot.


01:09:18.860 --> 01:09:22.780
And so he actually has built into his OhMyPosh script,


01:09:22.780 --> 01:09:24.780
his blood sugar number.


01:09:24.780 --> 01:09:26.500
Because it's really easy to miss,


01:09:26.500 --> 01:09:28.940
and it's one of those things that's really important not to miss.


01:09:28.940 --> 01:09:30.940
- So it's in his kernel all the time. - Probably color code it, right?


01:09:30.940 --> 01:09:32.940
Out of range, make it red.


01:09:32.940 --> 01:09:34.800
if it's not out of range, you make it green,


01:09:34.800 --> 01:09:35.640
something like that.


01:09:35.640 --> 01:09:36.620
- Yes.


01:09:36.620 --> 01:09:38.220
- Wow, how interesting.


01:09:38.220 --> 01:09:39.280
Yeah, this looks fantastic.


01:09:39.280 --> 01:09:41.220
I've never played with this before,


01:09:41.220 --> 01:09:43.180
but yeah, it looks really nice.


01:09:43.180 --> 01:09:44.020
You recommend it?


01:09:44.020 --> 01:09:45.520
- Yeah, I do.


01:09:45.520 --> 01:09:47.660
- Cool, cool.


01:09:47.660 --> 01:09:50.660
All right, well, I guess the one other thing


01:09:50.660 --> 01:09:52.140
that I was gonna throw out there is,


01:09:52.140 --> 01:09:55.560
I heard of this thing called VSF for Git.


01:09:55.560 --> 01:09:59.780
Talked about large files,


01:09:59.780 --> 01:10:03.280
And this sounds like it's very much a Windows-only thing,


01:10:03.280 --> 01:10:06.560
but it's a neat idea, this virtual file system for Git,


01:10:06.560 --> 01:10:09.440
that if you have a really large repository,


01:10:09.440 --> 01:10:13.160
it's kind of like the smart sync for Dropbox or something.


01:10:13.160 --> 01:10:15.360
It only pulls the files and interacts with the files


01:10:15.360 --> 01:10:16.800
that you actually touch,


01:10:16.800 --> 01:10:20.000
but it does that behind the scenes without you knowing it.


01:10:20.000 --> 01:10:20.840
Have you seen this?


01:10:20.840 --> 01:10:24.180
- Yeah, and we actually said VSF for Git,


01:10:24.180 --> 01:10:27.740
but it's actually VFS for Git, virtual file system.


01:10:27.740 --> 01:10:32.200
It's great when your repository is just massively huge.


01:10:32.200 --> 01:10:35.400
And 98% of our repositories are not.


01:10:35.400 --> 01:10:39.040
But when you have the code base of, I don't know, Windows,


01:10:39.040 --> 01:10:40.640
then you need something like this


01:10:40.640 --> 01:10:43.040
because you can't get clone the entire thing.


01:10:43.040 --> 01:10:46.000
GitHub, not GitHub, Google is famous


01:10:46.000 --> 01:10:49.000
for having their corporate mono repo.


01:10:49.000 --> 01:10:51.240
And I suspect that's bigger than it,


01:10:51.240 --> 01:10:54.440
than you could get clone onto each machine as well.


01:10:54.440 --> 01:10:56.160
And so the cool part is,


01:10:56.160 --> 01:11:00.320
One of the benefits of subversion that we lost as we moved to Git


01:11:00.320 --> 01:11:03.760
was I could clone only part of a repository.


01:11:03.760 --> 01:11:08.000
And VFS kind of gives us that ability back.


01:11:08.000 --> 01:11:09.840
Most of the time, we don't need it,


01:11:09.840 --> 01:11:11.940
but if you've been really bad


01:11:11.940 --> 01:11:15.000
and you've committed a whole bunch of binary files to your repository,


01:11:15.000 --> 01:11:18.680
it's interesting, it might be worth kicking the tires.


01:11:18.680 --> 01:11:23.220
It isn't necessarily Windows only, it is a plugin to Git itself,


01:11:23.220 --> 01:11:27.420
but it allows you to put that checkout directory somewhere else.


01:11:27.420 --> 01:11:32.420
So for example, on a shared file, a shared network drive.


01:11:32.420 --> 01:11:37.180
Now I have all of those objects, all of those blobs in one place,


01:11:37.180 --> 01:11:39.660
and I don't need to copy each of those to my machine.


01:11:39.660 --> 01:11:41.900
Yeah, interesting.


01:11:41.900 --> 01:11:47.940
The Windows people that were switching to Git said it was really a nightmare.


01:11:47.940 --> 01:11:51.060
So for example, the source code for Linux repo


01:11:51.060 --> 01:11:53.940
is something like 600 megs or 0.6 gigs.


01:11:53.940 --> 01:11:55.940
Windows is like 270 gigs.


01:11:55.940 --> 01:11:58.380
So it's really ginormous.


01:11:58.380 --> 01:12:00.900
And they said to do a clone took 12 hours,


01:12:00.900 --> 01:12:02.820
to do a checkout took three hours,


01:12:02.820 --> 01:12:04.980
to do a get status took eight minutes


01:12:04.980 --> 01:12:07.540
and to do an add and commit took 30 minutes


01:12:07.540 --> 01:12:08.800
before they made this change.


01:12:08.800 --> 01:12:11.060
So they were suffering some hard pains


01:12:11.060 --> 01:12:13.900
to go down this path for sure.


01:12:13.900 --> 01:12:16.740
I guess it probably was worth it for them.


01:12:16.740 --> 01:12:17.580
- Right.


01:12:17.580 --> 01:12:20.220
Well, let's...


01:12:20.220 --> 01:12:22.620
I guess we probably should put a bow on it.


01:12:22.620 --> 01:12:24.620
We're more or less out of time there, Rob.


01:12:24.620 --> 01:12:27.500
- Yeah. - I'll ask you the two questions.


01:12:27.500 --> 01:12:28.940
I always ask it at the end of the show.


01:12:28.940 --> 01:12:31.500
If you're going to write some code, what editor do you use?


01:12:31.500 --> 01:12:35.820
It depends on the code that I'm trying to write.


01:12:35.820 --> 01:12:38.140
In most cases, I'll reach for VS Code,


01:12:38.140 --> 01:12:40.540
but I'll also reach for Visual Studio.


01:12:40.540 --> 01:12:44.060
- Right. - Sometimes I'm also known to reach for...


01:12:44.060 --> 01:12:45.420
Oh, sorry. Go ahead.


01:12:45.420 --> 01:12:48.700
If you're doing like ASP.NET or something you're talking about like that or


01:12:48.700 --> 01:12:53.420
something you can, maybe something like WPF where the tools are built in, you have to basically,


01:12:53.420 --> 01:12:55.420
not have to, almost have to use them.


01:12:55.420 --> 01:12:59.420
But sometimes I also reach for Sublime Text or TextEdit.


01:12:59.420 --> 01:13:01.420
Okay.


01:13:01.420 --> 01:13:03.420
Cool, cool. And then


01:13:03.420 --> 01:13:07.900
often asked for a Python package library recommendation.


01:13:07.900 --> 01:13:09.900
Maybe we could make it your


01:13:09.900 --> 01:13:11.900
git


01:13:11.900 --> 01:13:15.900
script, the one that runs the pre commit stuff,


01:13:15.900 --> 01:13:17.900
the one that moves that outside the get folder.


01:13:17.900 --> 01:13:19.900
What was that called again?


01:13:19.900 --> 01:13:21.900
It's called get hooks.


01:13:21.900 --> 01:13:23.900
Let me grab a link to it.


01:13:23.900 --> 01:13:25.900
It's actually a node package, but exactly.


01:13:25.900 --> 01:13:27.900
You just install it wherever


01:13:27.900 --> 01:13:29.900
and it's good to go, right?


01:13:29.900 --> 01:13:31.900
Yes.


01:13:31.900 --> 01:13:34.900
And so if you have maybe a Flask server


01:13:34.900 --> 01:13:36.900
and you want to,


01:13:36.900 --> 01:13:38.900
and as part of your Flask server,


01:13:38.900 --> 01:13:40.900
maybe you have a React or a Vue app


01:13:40.900 --> 01:13:44.900
or you needed to pull down GA query as part of your client-side dependencies,


01:13:44.900 --> 01:13:49.640
then you may have enough node stuff to be able to leverage this as well.


01:13:49.640 --> 01:13:52.020
Yeah, that makes a lot of sense.


01:13:52.020 --> 01:13:54.820
If you're already using NPM because you're doing front-end stuff,


01:13:54.820 --> 01:13:56.820
then you might as well, right?


01:13:56.820 --> 01:13:58.380
Yes.


01:13:58.380 --> 01:13:59.380
Yeah, very cool.


01:13:59.380 --> 01:14:02.380
One of the things that we didn't talk about, and it's really cool how this happened,


01:14:02.380 --> 01:14:04.380
Git workflows.


01:14:04.380 --> 01:14:07.980
What's beautiful about Git is it's really unopinionated


01:14:07.980 --> 01:14:09.980
about how you do your workflow.


01:14:09.980 --> 01:14:12.880
Are you going to do Git flow? Are you going to do GitHub flow?


01:14:12.880 --> 01:14:14.880
Are you going to do something else?


01:14:14.880 --> 01:14:17.380
Git can work for all of those scenarios


01:14:17.380 --> 01:14:21.280
because it is just a mechanism of committing and sharing files.


01:14:21.280 --> 01:14:26.680
It doesn't impose a specific branching or naming convention.


01:14:26.680 --> 01:14:28.680
You can choose to put those on top,


01:14:28.680 --> 01:14:34.040
but Git's workflow is really open to whatever you need it to do.


01:14:34.040 --> 01:14:36.680
Yeah, well, when I was first getting familiar with


01:14:36.680 --> 01:14:41.400
this whole PRs and merging and those kinds of things.


01:14:41.400 --> 01:14:43.140
I felt like, oh, that's a Git thing.


01:14:43.140 --> 01:14:43.980
That's a GitHub thing.


01:14:43.980 --> 01:14:45.800
It has nothing to do with Git, right?


01:14:45.800 --> 01:14:48.140
It's just Git facilitates that on top of it.


01:14:48.140 --> 01:14:50.940
So you can choose however you wanna work, right?


01:14:50.940 --> 01:14:52.000
- Right.


01:14:52.000 --> 01:14:53.340
- Quite cool.


01:14:53.340 --> 01:14:55.180
All right, well, I don't normally close out this show


01:14:55.180 --> 01:14:59.460
with a joke, but Robert Robinson had a good one here


01:14:59.460 --> 01:15:00.300
in the live stream.


01:15:00.300 --> 01:15:02.860
So I'm gonna put this up here for us as our parting thought


01:15:02.860 --> 01:15:05.140
and then I'll ask you for one more as well, maybe.


01:15:05.140 --> 01:15:05.980
- Yeah.


01:15:05.980 --> 01:15:09.580
He said, there's a programmer who once told him,


01:15:09.580 --> 01:15:10.460
couldn't use Git.


01:15:10.460 --> 01:15:12.800
He was afraid to commit.


01:15:12.800 --> 01:15:17.580
- He was afraid of the Git commitment.


01:15:17.580 --> 01:15:19.040
Oh, that's awesome.


01:15:19.040 --> 01:15:20.340
- Yeah, yeah, thank you for that.


01:15:20.340 --> 01:15:21.500
Thanks for making us laugh.


01:15:21.500 --> 01:15:22.540
All right, final call to action.


01:15:22.540 --> 01:15:24.440
People wanna go a little bit deeper than Git.


01:15:24.440 --> 01:15:27.060
Maybe they just do the three commands,


01:15:27.060 --> 01:15:31.300
Git clone, you know, Git, I don't know,


01:15:31.300 --> 01:15:32.820
Git add, Git commit, Git push,


01:15:32.820 --> 01:15:33.820
like that's four commands.


01:15:33.820 --> 01:15:37.020
like beyond that, how do you get more into this world?


01:15:37.020 --> 01:15:42.700
What's really interesting is as we're coming off of those other systems,


01:15:42.700 --> 01:15:46.800
we want to kind of build up that tribal knowledge that we had.


01:15:46.800 --> 01:15:49.340
And so we're going to go grab those three or five commands,


01:15:49.340 --> 01:15:51.900
and we're going to stick them to the Post-it under our keyboard.


01:15:51.900 --> 01:15:55.140
Take the next step to go figure out,


01:15:55.140 --> 01:15:58.180
you know, what is the next command that I want to do?


01:15:58.180 --> 01:16:00.780
Or how does this command work?


01:16:01.140 --> 01:16:04.600
What we did today was we explored through that .git folder


01:16:04.600 --> 01:16:07.740
so that we could take that next level to see how it works.


01:16:07.740 --> 01:16:11.380
Git isn't a black box, it's not magic.


01:16:11.380 --> 01:16:14.580
It just works a little bit differently than the source control system


01:16:14.580 --> 01:16:16.080
you might have been familiar with.


01:16:16.080 --> 01:16:18.020
So definitely get familiar with it,


01:16:18.020 --> 01:16:20.320
Google the terms that you're looking for,


01:16:20.320 --> 01:16:23.720
and really start to embrace that mechanism


01:16:23.720 --> 01:16:25.600
and get really powerful with Git.


01:16:25.600 --> 01:16:29.200
I'm confident that you can get past just those few commands


01:16:29.200 --> 01:16:33.080
and you can make it just an inherent process in your workflow


01:16:33.080 --> 01:16:35.320
and use it to be really, really powerful.


01:16:35.320 --> 01:16:39.320
Specifically, separating the save points from the publish points.


01:16:39.320 --> 01:16:42.480
That's the thing you couldn't do before that you can now do with Git.


01:16:42.480 --> 01:16:44.560
Yeah, well said.


01:16:44.560 --> 01:16:46.560
Definitely agree with all of that.


01:16:46.560 --> 01:16:49.480
I think getting really good with source control


01:16:49.480 --> 01:16:52.280
and source control these days really means Git almost


01:16:52.280 --> 01:16:56.120
it allows you to be fearless with your code.


01:16:56.120 --> 01:16:58.440
So often people are like, "Oh, I would like to try this,


01:16:58.440 --> 01:17:00.600
But what if I break it? What if it doesn't go right?


01:17:00.600 --> 01:17:04.680
Well, if you know how to, you know, create your branches, work locally,


01:17:04.680 --> 01:17:06.680
do all sorts of stuff, roll back,


01:17:06.680 --> 01:17:09.180
you can just go crazy and just explore things.


01:17:09.180 --> 01:17:11.180
And if it doesn't work, you know, throw it away.


01:17:11.180 --> 01:17:13.180
No harm, no foul. It's lovely.


01:17:13.180 --> 01:17:15.180
And if you get really stuck,


01:17:15.180 --> 01:17:18.020
hit me up on Twitter @Rob_Rich


01:17:18.020 --> 01:17:20.360
and show me the code where you got stuck


01:17:20.360 --> 01:17:21.820
and let's get you unstuck


01:17:21.820 --> 01:17:24.120
because I would love to continue this conversation


01:17:24.120 --> 01:17:26.120
and really help you be successful.


01:17:26.120 --> 01:17:29.560
Awesome. All right. Well, thank you for taking the time and being here.


01:17:29.560 --> 01:17:31.560
It's been great to chat, get with you.


01:17:31.560 --> 01:17:34.320
Most definitely. Thanks for having me on.


01:17:34.320 --> 01:17:36.320
Yeah. See you later.


01:17:36.320 --> 01:17:38.660
And thank you to everyone in the live stream for being here.


01:17:38.660 --> 01:17:41.200
It was really great. We will catch you next time.


01:17:41.200 --> 01:17:51.200
[BLANK_AUDIO]

