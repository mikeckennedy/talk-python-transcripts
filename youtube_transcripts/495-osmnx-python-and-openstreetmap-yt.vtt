WEBVTT

00:00:00.001 --> 00:00:02.800
Jeff, welcome to Talk Python To Me.

00:00:02.800 --> 00:00:04.760
Thank you for having me.

00:00:04.760 --> 00:00:06.760
It's great to have you here.

00:00:06.760 --> 00:00:10.360
We're going to talk maps and consuming map data

00:00:10.360 --> 00:00:14.760
and a lot of interesting research that you've done with the data.

00:00:14.760 --> 00:00:17.480
So you have a very cool project,

00:00:17.480 --> 00:00:22.000
OSMNX, OpenStreetMapNetworkX,

00:00:22.000 --> 00:00:25.880
that we're going to dive into and it really makes all of

00:00:25.880 --> 00:00:31.360
this street and map data super accessible to users of Python, right?

00:00:31.360 --> 00:00:33.480
Yeah.

00:00:33.480 --> 00:00:36.480
Yeah. Excellent. I'm really looking forward to talk about that.

00:00:36.480 --> 00:00:37.960
Before we dive into it though,

00:00:37.960 --> 00:00:41.360
just a quick introduction. Who are you?

00:00:41.360 --> 00:00:44.800
Yeah. So my name is Jeff Boeing.

00:00:44.800 --> 00:00:50.040
I'm an assistant professor at the University of Southern California here in Los Angeles.

00:00:50.040 --> 00:00:54.080
I'm in its Department of Urban Planning and Spatial Analysis.

00:00:54.080 --> 00:01:01.960
And most of my research and teaching are around that intersection of urban planning and spatial analysis.

00:01:01.960 --> 00:01:04.960
I did my PhD in city planning at UC Berkeley.

00:01:04.960 --> 00:01:07.120
And my focus is on urban data science.

00:01:07.120 --> 00:01:11.560
So using Python tools, usually open data,

00:01:11.560 --> 00:01:16.400
to try to understand cities and housing markets and transportation networks

00:01:16.400 --> 00:01:22.680
and how people move through space and how we can make our cities more resilient to natural disasters,

00:01:22.680 --> 00:01:24.280
which is relevant in LA this week.

00:01:24.280 --> 00:01:31.280
Also more equitable, nicer places to walk around and basically just better for urban living.

00:01:31.280 --> 00:01:36.280
Okay. Well, that sounds like amazing, amazing research.

00:01:36.280 --> 00:01:44.160
It's probably interesting to live in LA as one of the bigger, crazier locations in terms of

00:01:44.160 --> 00:01:47.160
sort of traffic and congestion and population.

00:01:47.160 --> 00:01:52.160
It's not New York in terms of density, but it's probably its own special beast, I imagine.

00:01:52.160 --> 00:01:53.160
Yeah, it is.

00:01:53.160 --> 00:01:58.040
You know, LA is an ironic place to be an urban planning professor because it can be so frustrating

00:01:58.040 --> 00:02:02.040
for a lot of our best practices in urban planning.

00:02:02.040 --> 00:02:07.040
But at the same time, there is no better place in the US to be studying and trying to intervene

00:02:07.040 --> 00:02:10.040
into some of these crises that urban planning has wrought.

00:02:10.040 --> 00:02:17.920
Yeah. Yeah. A lot of it was just, I imagine in the early days, just a free for all, right?

00:02:17.920 --> 00:02:24.880
There was people, especially out in the West, right? The US West, people will just move out there

00:02:24.880 --> 00:02:31.200
and there was not a whole lot going on. So what a city, just neighborhoods go that way and not quite

00:02:31.200 --> 00:02:37.240
enough density for a lot of public transit makes it challenging. And then they become huge cities,

00:02:37.240 --> 00:02:41.320
and that, but they're stuck with those consequences. Like, yeah, exactly.

00:02:41.320 --> 00:02:46.120
And it's hard to, to retrofit a city once it's built out because those are people's homes and

00:02:46.120 --> 00:02:52.360
private properties that you can't just, you know, cut from whole cloth laid out a new city plan.

00:02:52.360 --> 00:02:54.520
Yeah. Yeah.

00:02:54.520 --> 00:02:58.440
Are there cities out there that are basically planned from the, from scratch?

00:02:58.440 --> 00:03:06.920
Yeah, there are places like Brasilia, the capital of Brazil was a master planned

00:03:06.920 --> 00:03:12.920
city in the modernist era, mid-century city planning, where it's designed to look almost

00:03:12.920 --> 00:03:17.560
like the shape of an airplane for the jet age, a modern city for the jet age.

00:03:17.560 --> 00:03:18.360
Amazing.

00:03:18.360 --> 00:03:19.000
Yeah.

00:03:19.000 --> 00:03:23.320
But you know, there's a wide range of how cities come to be. Some of them are very organic,

00:03:23.320 --> 00:03:30.280
like you think old medieval cities that just kind of formed over centuries. There are places like LA

00:03:30.280 --> 00:03:36.120
that built out very rapidly or like in Chicago, all these straight lines following from

00:03:37.400 --> 00:03:44.760
these 19th century ideas of rationality and orthogonal street networks. And then there are these master

00:03:44.760 --> 00:03:50.120
planned cities where, you know, strong central leadership lets you lay it down. However, you think

00:03:50.120 --> 00:03:50.680
is best.

00:03:50.680 --> 00:03:51.560
Mm-hmm.

00:03:51.560 --> 00:04:01.400
I imagine that how the cities are built has a lot to do with the people who helped construct the city or

00:04:01.400 --> 00:04:06.120
there in the early days, how they perceived distance, right? People perceive distance in LA

00:04:06.120 --> 00:04:12.920
by how you, how far can you go in a car in 20 minutes, but people perceived distance in Stuttgart,

00:04:12.920 --> 00:04:18.360
how far can you walk? Maybe you can take a horse, you know, potentially, right? And that really probably

00:04:18.360 --> 00:04:19.000
changes things.

00:04:19.000 --> 00:04:26.120
Yeah. You know, one way we talk about that idea of the perception of distance and how the urban form

00:04:26.120 --> 00:04:33.080
shapes up is this idea of transportation technologies in different eras. And in general, you really see

00:04:33.080 --> 00:04:41.560
something of a death of geography. That is, if you look at a 1990s suburb of Philadelphia or of

00:04:41.560 --> 00:04:49.560
Los Angeles, they look very similar to each other. You don't see that sort of local culture. What you see

00:04:49.560 --> 00:04:55.080
is really building around the transportation technology and design aesthetic of the era,

00:04:55.640 --> 00:05:01.160
rather than the local hands building the place up. And it's, you know, when cars are how you get

00:05:01.160 --> 00:05:03.480
around, you build a city designed for cars.

00:05:03.480 --> 00:05:08.600
Yeah. And then the cars get to be huge SUVs and they still don't fit. All right.

00:05:08.600 --> 00:05:15.880
Let's talk. You have this really cool visualization, which I'm going to link to in the show notes,

00:05:15.880 --> 00:05:25.320
called City Street Orientations Around the World. And it's got some pretty wild graphics. You want to

00:05:25.320 --> 00:05:29.800
tell people about this and kind of try to describe it for folks listening?

00:05:29.800 --> 00:05:38.200
Yeah. So what these show is the orientation of your city streets. By orientation, we mean on a compass.

00:05:38.200 --> 00:05:45.080
Like, do they point north, south, east, west? Are they off that north, south, east, west orientation?

00:05:45.640 --> 00:05:51.160
Or do your streets point more chaotically in all directions around the compass? Like, there isn't a

00:05:51.160 --> 00:05:58.920
more consistent orientation. So to visualize these, I used what's basically just a histogram.

00:05:58.920 --> 00:06:06.040
But it's a polar histogram. So where a normal histogram will count your observations across some

00:06:06.040 --> 00:06:12.040
set of bins. For a polar histogram, we've wrapped those bins around the circle of a compass.

00:06:12.600 --> 00:06:21.320
So that each bin represents 10 degrees around the compass. And there's 36 bins total for 360 degrees around the circle.

00:06:21.320 --> 00:06:29.880
And then the length of each of the bars in those bins represents the frequency of streets pointing in that

00:06:29.880 --> 00:06:41.240
direction in the city. So in a place like Chicago or Beijing on screen here, most of the streets point north, south, east, west.

00:06:41.240 --> 00:06:47.080
And what that tells us is it's kind of grid-like. And this is common in a lot of cities around the world.

00:06:47.640 --> 00:06:53.720
Even a lot of pre-modern cities would still orient themselves generally north, south, east, west,

00:06:53.720 --> 00:06:56.760
just based on patterns where the sun was rising and setting.

00:06:56.760 --> 00:07:04.040
Yeah, I'm super surprised to see, for example, Barcelona is pretty, not north, south, but it's 90 degrees.

00:07:04.040 --> 00:07:10.840
Yeah. Yeah. So in Barcelona, you see that 19th century and early 20th century,

00:07:10.840 --> 00:07:15.480
Aixample development. So around medieval old Barcelona,

00:07:15.480 --> 00:07:22.360
El Defante Serrida laid out his grand city plan that is fairly grid-like around it. You can really see that here.

00:07:22.360 --> 00:07:28.520
Yeah, absolutely. For people listening, some of them look like airplane four blade propellers,

00:07:28.520 --> 00:07:35.960
and some look maybe like boat propellers, like really dense. But yeah, it's quite wild to get a quick look.

00:07:35.960 --> 00:07:38.760
Do we have LA in there? We must, right?

00:07:38.760 --> 00:07:44.120
I have LA in the big one. If you scroll down, we have American cities.

00:07:44.120 --> 00:07:50.680
Oh yeah, yeah, yeah. Okay. That's a pretty stark contrast. It's like all of them are propeller

00:07:50.680 --> 00:07:55.640
looking other than Boston and interestingly, Charlotte. Yeah, really interesting.

00:07:55.640 --> 00:07:59.400
Yeah, but Charlotte doesn't feel like a city like that to me, but what do I do?

00:07:59.400 --> 00:08:07.080
Yeah. So Boston is kind of one of those pre-modern, say American cities. And its street

00:08:07.080 --> 00:08:13.080
orientation looks like that for a couple of reasons. One, Boston is an agglomeration of multiple smaller

00:08:13.080 --> 00:08:19.080
towns over several centuries. And each of them had grids to some extent, but they didn't all face the same

00:08:19.080 --> 00:08:25.240
way. So they all got merged together. And then it has a lot of hills that made it harder to build, especially

00:08:25.240 --> 00:08:32.280
in the early days. And it really predated America's obsession with grids. Charlotte is kind of the

00:08:32.280 --> 00:08:39.160
opposite. It's late 20th century, the sort of winding streets and cul-de-sacs to make up those, you know,

00:08:39.160 --> 00:08:45.000
arterial roads. And then this sort of secluded in the center, super blocks of subdivisions.

00:08:45.800 --> 00:08:51.400
Well, I'm happy to see that Portland, where I live, is like a perfect propeller blade shape. You know,

00:08:51.400 --> 00:08:59.720
in our town, you have northeast, northwest, southeast, and then street numbers like northeast 120th

00:08:59.720 --> 00:09:05.400
street, right? And it just screams. We're on a perpendicular north, south, east, west grid.

00:09:05.400 --> 00:09:11.240
And it definitely shows up here. And so this is some of the stuff that you came up with, OSM and X.

00:09:13.240 --> 00:09:21.080
Yeah. So I used OSM and X to build all of these street network models from OpenStreetMap data.

00:09:21.080 --> 00:09:27.800
And then OSM and X has built into it a visualization module that creates these kind of polar

00:09:27.800 --> 00:09:34.920
histograms to understand how streets are oriented. Awesome. It's super interesting. Let's, and it's

00:09:34.920 --> 00:09:41.640
like, it communicates to you just immediately as you look at it. It's great. Let's start by talking about

00:09:41.640 --> 00:09:49.720
OpenStreetMap. This is the backing data, obviously, the important backing data of your library. So

00:09:49.720 --> 00:09:57.400
what's the origin of OpenStreetMap? Yeah. So OpenStreetMap started maybe 20 years ago or so.

00:09:57.400 --> 00:10:04.440
For folks who haven't seen it before, I often describe it as being akin to Google Maps meets Wikipedia.

00:10:05.160 --> 00:10:14.360
So it's a worldwide mapping project with global coverage. Anyone can edit or contribute to it.

00:10:14.360 --> 00:10:22.840
There is some editorial oversight as well to validate those edits. But what's cool about OpenStreetMap is

00:10:22.840 --> 00:10:33.000
that its data license allows you to pull data from it. So unlike, say, Google Maps, which is fairly limited in what all it can draw,

00:10:33.000 --> 00:10:38.280
you can really pull all of these features from OpenStreetMap. And if you look, if you, you know,

00:10:38.280 --> 00:10:41.080
just zoom in on one of these cities here. Yeah. Let's go to Riverside.

00:10:41.080 --> 00:10:56.040
Riverside. Yeah. Surface streets, rail lines, building footprints, parks, train stations, often grocery stores, restaurants, public schools, all this stuff we're interested in from an urban planning perspective.

00:10:58.040 --> 00:11:13.120
Yeah. Oh, it's really interesting. And you can add in additional layers like cycling maps or transportation maps or topology maps, topological maps, all sorts of interesting things here.

00:11:13.120 --> 00:11:23.200
Yeah, exactly. And it really lets you kind of hone in on the specific characteristics of the city that you're interested in.

00:11:23.200 --> 00:11:33.440
And there's a humanitarian layer that you can see. And this has been one of the big uses of OpenStreetMap now for 15 years or so.

00:11:33.440 --> 00:11:45.880
Often when there is a disaster in a less developed country, humanitarian aid organizations will go in and use OpenStreetMap and contribute to it

00:11:45.880 --> 00:11:50.680
to create a kind of a digital layer of the facts on the ground.

00:11:50.680 --> 00:11:59.000
So the Haiti earthquake a few years back was a primary example of that, where it helped them understand where urbanization was,

00:11:59.000 --> 00:12:07.480
where there were water pumps, toilets and so forth, the kind of things that people need, but aren't well mapped, often in these informal settlements.

00:12:07.480 --> 00:12:15.240
Yeah. Oh, it's it's amazing that we have, you know, I think everyone was amazed when Google Maps

00:12:15.240 --> 00:12:23.640
came out, right before then we had MapQuest and all those things, you'd have big little up arrow, up arrow, right arrow to like pull in tiles of the world.

00:12:23.640 --> 00:12:30.520
And, you know, Google Maps and the worldview that they had, what was that product called? Remember?

00:12:30.520 --> 00:12:37.560
Where you could kind of fly, it was like a 3D thing, you could kind of fly around in the early days, but it was the same basic data thing.

00:12:37.560 --> 00:12:44.200
Anyway, when that stuff came out, it was like, wow, this stuff is, you can now know about the world, you can say, where did that road go?

00:12:44.200 --> 00:12:50.200
I never went down, you could just follow it and see or go to Street View or whatever. But a lot of that is locked behind.

00:12:50.200 --> 00:12:59.000
However, Google wants you to use it. Right. And it's, it's not super accessible. And so having something

00:12:59.000 --> 00:13:03.400
like this, where people can contribute, especially if they care about their neighborhood, right? A lot of

00:13:03.400 --> 00:13:07.400
this people are contributing back into OpenStreetMap data.

00:13:07.400 --> 00:13:13.800
Yeah, exactly. Yeah, so the nice thing with this is that it really is much more in that

00:13:13.800 --> 00:13:20.440
open source, open data model of the world, which means we can do open science with it, citizen science

00:13:20.440 --> 00:13:25.640
with it. People, you know, who just noticed that stuff is missing in their own community, you're able

00:13:25.640 --> 00:13:30.120
to fix it. It's no longer that frustration of, well, when will Google get this thing right?

00:13:30.120 --> 00:13:35.480
Right. We have this new highway that was built outside my town. When's it going to show up? I mean,

00:13:35.480 --> 00:13:40.760
it's up to you. You can make it show up later today. There is a drawback to that though. The drawback is

00:13:40.760 --> 00:13:48.760
you get what we call sampling biases. That is, you tend to see more coverage in places where people tend to

00:13:48.760 --> 00:13:54.600
contribute more. And those things tend to be correlated with demographic characteristics. Men contribute more

00:13:54.600 --> 00:14:01.560
than women. Higher income places more than lower income places, just from a resourcing perspective.

00:14:01.560 --> 00:14:06.920
And so one of the challenges we face as researchers using OpenStreetMap data for our

00:14:06.920 --> 00:14:13.480
analytics work is keeping those in mind because it's hard to do comparative analysis. If you don't know,

00:14:13.480 --> 00:14:18.360
it's because the infrastructure is actually different in two places or because it's been digitized to a

00:14:18.360 --> 00:14:25.400
different extent in two places. Right. Right. Right. Just maybe higher fidelity information might skew

00:14:25.400 --> 00:14:30.600
some analysis one way or another, right? That's right. Exactly. And it tends to work pretty well

00:14:30.600 --> 00:14:39.720
comparatively for stuff like roads, streets, whereas things like pedestrian footpaths or fresh food markets

00:14:39.720 --> 00:14:46.360
might be well digitized in San Francisco and Portland, but probably not, say, in a small town in India or

00:14:46.360 --> 00:14:53.400
Indonesia, let alone like a suburb of Des Moines, Iowa. Yeah. Yeah, absolutely. One of the apps that I use a lot

00:14:53.400 --> 00:15:03.640
is OnX. Do you know OnX? Yeah. OnX is cool. You can, I do a lot of off-road motorcycle riding and it'll show you

00:15:03.640 --> 00:15:09.160
all the little trails and stuff, but you know, someone's got to go and enter all that information. And so

00:15:10.280 --> 00:15:17.640
some places are super well mapped and others are not on the map at all. But yeah, I imagine they

00:15:17.640 --> 00:15:21.160
probably get some of their data from OpenStreetMap as well, though I haven't been able to tell.

00:15:21.160 --> 00:15:28.280
Yeah, it's a good question. A lot of people downstream do use OpenStreetMap data because of its quality and

00:15:28.280 --> 00:15:35.080
accessibility. Yeah. Mark out in the audience is asking, is there some kind of mobile app that kind of gives you

00:15:35.640 --> 00:15:44.600
access to the OpenStreetMap data? Kind of like Google Maps, but not. Yeah, there are some mobile apps for it.

00:15:46.600 --> 00:15:52.600
I don't use them. It has some challenges with routing because it is publicly editable. Sometimes

00:15:52.600 --> 00:15:58.840
there'll be little breaks in the connections where it's not digitized quite right. But there are

00:15:58.840 --> 00:16:03.160
routing apps. So you could replace a Google Maps on your phone with OpenStreetMap and you can route with

00:16:03.160 --> 00:16:10.360
it. Works particularly well in big cities and places like Europe and the US, less so in small rural areas

00:16:10.360 --> 00:16:15.880
or in less developed countries. Yeah. Yeah. The OnX thing is, it doesn't really route you.

00:16:15.880 --> 00:16:21.560
But it shows you on a map and it shows you where you go on it. And if you choose to stay on the path,

00:16:21.560 --> 00:16:27.720
then it'll really help you. But it doesn't really say, you can't say, give me directions.

00:16:27.720 --> 00:16:33.480
At least not when you're off-road. If you're on-road, maybe it'll fall back to something that works. But

00:16:33.480 --> 00:16:41.480
yeah, amazing. So what's the licensing story behind all this data? Like how the name probably gives a lot

00:16:41.480 --> 00:16:45.880
of it away, OpenStreetMap. But how is this data usable? What can people do with it?

00:16:45.880 --> 00:16:53.960
Yeah. So it's basically usable for non-commercial purposes with attribution. So for example, as

00:16:53.960 --> 00:17:00.920
as researchers, when we are using these data, we just need to attribute where it came from,

00:17:01.160 --> 00:17:09.240
OpenStreetMap and its contributors. And I ended up including that license information somewhere on

00:17:09.240 --> 00:17:17.000
the readme for OSM and X. Because I think a lot of times people will look over these underlying data

00:17:17.000 --> 00:17:26.040
sources and tools when they're using these kind of downstream downstream tools and apps. So

00:17:26.040 --> 00:17:30.840
because of that, I just wanted to call it. Yeah, you can see it on screen here. So I mentioned

00:17:30.840 --> 00:17:35.720
OpenStreetMap's open data license requires that derivative works provide proper attribution,

00:17:35.720 --> 00:17:42.760
which is really nice because it's a very easy thing to do for the cornucopia of data that they make

00:17:42.760 --> 00:17:49.480
available. Yeah. Yeah. That's amazing. If I wanted to build a commercial product, I wanted to build on

00:17:49.480 --> 00:17:54.920
X squared or whatever, where I could have people drive around and use that and map it and make notes,

00:17:54.920 --> 00:18:01.400
maybe contribute back. Do you know what the story, I mean, obviously not a lawyer, right? But what's the,

00:18:01.400 --> 00:18:06.200
would people be able to do that? Or is there a paid API or how does it work?

00:18:06.200 --> 00:18:10.680
It's a, it's a good question. So I know in practice people can, because I see commercial

00:18:10.680 --> 00:18:15.080
tools that use OpenStreetMap data all the time. I don't know the details though, because one of the

00:18:15.080 --> 00:18:19.960
nice things about being in academia is you end up being so divorced from the commercial world that I

00:18:19.960 --> 00:18:27.080
don't have to worry about that. Yeah. And that's, that's pretty good, right? Just do, do your research,

00:18:27.080 --> 00:18:31.640
answer interesting questions and follow the lead, right? Those are the benefits. Yeah. It comes with

00:18:31.640 --> 00:18:36.120
drawbacks, but those are the benefits. Yeah. I'm aware of some of the drawbacks as well, for sure.

00:18:36.120 --> 00:18:45.160
All right. Well, so that is the foundation of this project, OSMNX. Tell us about your project.

00:18:45.160 --> 00:18:55.400
Yeah. So, OSMNX is a Python package, that lets you interact with OpenStreetMap's APIs to make

00:18:55.400 --> 00:19:04.680
it really easy to download data and build models or a data frame of those data. So the two main

00:19:04.680 --> 00:19:13.560
things that it does is it can create a graph model. So that is a model of a network like streets or rails

00:19:13.560 --> 00:19:19.800
or highways or anything else. or you can create a geo data frame. That's kind of a spatialized version

00:19:19.800 --> 00:19:27.160
of a pandas data frame using geo pandas of OpenStreetMap features. So that's all the stuff in OpenStreetMap.

00:19:27.160 --> 00:19:34.920
It could be points, lines, polygons. It could be, you know, traffic signals or parks or schools or roads.

00:19:34.920 --> 00:19:41.240
But you can download either of those and then do whatever it is you want to do with them. And open,

00:19:41.240 --> 00:19:48.760
OSMNX has some other stuff built in. So it has a simple routing engine built in, some visualization

00:19:48.760 --> 00:19:56.120
tools. You can work with elevation so that you can figure out, street grades, particularly

00:19:56.120 --> 00:20:00.760
relevant. For example, if you're a cyclist and you're trying to choose a shortest path that maybe

00:20:00.760 --> 00:20:02.520
minimizes those grades and so forth.

00:20:02.520 --> 00:20:12.280
Even for cars, you know, Google started offering a, this path saves, use the least fuel, or in my

00:20:12.280 --> 00:20:19.320
case, the least electricity, whatever, whatever you put into it to make it go. that's also,

00:20:19.320 --> 00:20:21.720
you know, that's uses like that would be interesting.

00:20:21.720 --> 00:20:27.480
Yeah, exactly. Yeah. I mean, that kind of superficially, we always imagine that our,

00:20:27.480 --> 00:20:31.000
our shortest path to get somewhere is the one that minimizes our travel time.

00:20:31.880 --> 00:20:35.960
But in reality, there are a lot of other things we try to minimize, including fuel consumption

00:20:35.960 --> 00:20:41.560
or for pedestrians. empirically, we, we, we know that people will take longer routes. If it's

00:20:41.560 --> 00:20:46.840
a nicer route, we're not trying to shake off a minute to walk, you know, along the arterial road with

00:20:46.840 --> 00:20:54.360
you go, you go through the fence by that old abandoned factory back here and go straight across.

00:20:54.360 --> 00:20:57.640
It'll be, it'll be great. You'll save a minute. Like, yeah, I'll go the long way.

00:20:57.640 --> 00:21:00.440
Exactly. Amazing.

00:21:01.320 --> 00:21:07.320
Okay. Yeah. Super fun. And as part of those visualizations, can you draw maps? Like, can you?

00:21:07.320 --> 00:21:15.560
You can. Yeah. So it has, some mapping capabilities. you can also plot routes on it.

00:21:15.560 --> 00:21:25.000
It ties in to a folium package, which is a Python package to develop leaflet JavaScript web maps.

00:21:25.000 --> 00:21:34.680
Okay. So you can do interactive web maps from it. and then on top of OSMNX, there's a cool downstream

00:21:34.680 --> 00:21:41.480
package called pretty maps that I'm not affiliated with, but does really nice, aesthetically pleasing

00:21:41.480 --> 00:21:45.560
mapping. It's really customizable and really cool.

00:21:45.560 --> 00:21:48.760
Mm-hmm. Okay. Do you have a gallery or something?

00:21:48.760 --> 00:21:54.840
I do. Yeah. So if you scroll up a little bit, there's a link to the examples gallery. It's on

00:21:54.840 --> 00:21:58.360
GitHub. OSMNX examples.

00:21:58.360 --> 00:22:00.680
Oh, you can pull up different notebooks, huh?

00:22:00.680 --> 00:22:06.040
Yeah, exactly. So each notebook kind of covers a different theme of analysis. It would be commonly

00:22:06.040 --> 00:22:10.600
done with OSMNX. Oh, nice. Yeah. That's really cool. And people can just pull up the notebook and

00:22:10.600 --> 00:22:14.120
see how it works. What one do you think is a good representative one to maybe like get a sense of how

00:22:14.120 --> 00:22:20.280
to work with it? So, we count from zero because we're in the Python world. So notebook 00, is a

00:22:20.280 --> 00:22:27.240
good place to start. Yeah. It kind of steps through some of the basic functionality that, most users

00:22:27.240 --> 00:22:34.040
would be interested in starting with. Sure. Okay. Yeah. So people can download these notebooks

00:22:34.600 --> 00:22:40.520
in the examples repository, which I'll link to. Yeah, that's really good. Yeah, exactly. So,

00:22:40.520 --> 00:22:45.080
so there's a getting started guide and in the documentation after kind of reading through

00:22:45.080 --> 00:22:50.760
that, that examples gallery is a really good way to just kind of get a sense of code that you can

00:22:50.760 --> 00:22:58.040
copy and paste to get started. Okay. Excellent. And 5,000 GitHub stars, almost a thousand forks.

00:22:58.040 --> 00:23:03.080
You know, that's quite a bit of traction and congratulations. Yeah. Thanks. I mean, it's, it's weird.

00:23:03.080 --> 00:23:09.320
This is very much my, my side hustle, but it's also really been a labor of love for a long time.

00:23:09.320 --> 00:23:21.080
I think if you explain it very carefully to academic power brokers, they say that makes sense. That's great. That's a good contribution.

00:23:21.080 --> 00:23:30.840
uh, prima facie, that doesn't mean anything. Yeah. It's really, it's tough to put it on a 10 year application. Right?

00:23:30.840 --> 00:23:37.400
Yeah. It makes it sound like you're, you're wasting your time and you don't understand what you're supposed to be doing with your time.

00:23:37.400 --> 00:23:50.600
But you understand the research is so easy now. Yeah. Yeah. I mean, that's really how that started. I thought I was going to be able to do this research without having to create my own tool, but it turned out I was not able to.

00:23:51.400 --> 00:23:53.560
Interesting. What was your background on programming at that point?

00:23:53.560 --> 00:24:02.920
yeah, so, my, undergrad and master's degree, I did computer systems and information systems.

00:24:03.640 --> 00:24:09.880
I worked on the private sector for a few years and decided to go back to school for my PhD in urban planning.

00:24:09.880 --> 00:24:23.320
But when I was coming into that, I was pitching myself as the sort of like data science analytics kind of person in that world, which was starting to get kind of hot at that time. So it ended up being a nice fit.

00:24:23.320 --> 00:24:32.200
And, when I started my, my dissertation, I had this dissertation proposal, that was, you know, very, very nice.

00:24:32.200 --> 00:24:33.880
This kind of big grand proposal.

00:24:33.880 --> 00:24:39.960
I ended up only doing the first chapter of it for my entire dissertation because of how these things expand to fill space.

00:24:39.960 --> 00:24:47.320
And when I, when I pitched my proposal to my dissertation committee, there were a lot of assumptions about the tools that were out there.

00:24:47.320 --> 00:24:48.920
You know, I knew OpenStreetMap was out there.

00:24:48.920 --> 00:24:51.880
I'd seen there were some tools to download and work with data from it.

00:24:51.880 --> 00:24:59.320
So I was pretty sure we'd be able to create a nice mathematical graph model of OpenStreetMap data automatically.

00:25:00.280 --> 00:25:06.040
as I started on my first week of making that happen, I realized that the tool did not exist.

00:25:06.040 --> 00:25:11.080
And in fact, it was profoundly difficult to get data from OpenStreetMap.

00:25:11.080 --> 00:25:15.320
And I, if you wanted to filter it, like, I just want pedestrian paths, not everything.

00:25:15.320 --> 00:25:16.440
Right.

00:25:16.440 --> 00:25:19.800
I just want, you know, drivable streets, not everything else.

00:25:19.800 --> 00:25:27.560
And so the first year of my dissertation work was creating, the first version of OSM and X accordingly.

00:25:29.560 --> 00:25:35.320
So you must have grants and stuff as for your research as academics do.

00:25:35.320 --> 00:25:43.160
How much time are you allowed to sort of bring some of that into, you know, adding features back to this project?

00:25:44.520 --> 00:25:44.840
Yeah.

00:25:44.840 --> 00:25:47.240
You know, back to the benefits of academia.

00:25:47.240 --> 00:25:52.440
The nice thing is as long as you get what they want to see done, as long as those outputs are there,

00:25:52.440 --> 00:25:55.080
your time is really completely your own, right?

00:25:55.080 --> 00:25:55.320
Yeah.

00:25:55.320 --> 00:25:56.440
You teach a couple classes.

00:25:56.440 --> 00:25:57.880
You have to publish a few papers a year.

00:25:57.880 --> 00:26:00.280
Other than that, you're free to do whatever.

00:26:00.280 --> 00:26:03.880
So I do get grants to help me fund my graduate students.

00:26:03.880 --> 00:26:13.240
ironically, it's very hard to get grants to do this kind of open source software, open commons development.

00:26:13.240 --> 00:26:15.160
Everyone talks about it.

00:26:15.160 --> 00:26:21.800
And especially grant funders know how much we all use this stuff and they really like it, but it just doesn't get funded.

00:26:21.800 --> 00:26:28.600
So what you have to do is you have to kind of hack it in or sideload it, I guess, into your grants,

00:26:28.600 --> 00:26:33.000
where the grant will answer this empirical question that's near and dear to the funders heart.

00:26:33.000 --> 00:26:40.520
But to do that, we have this tool building phase for six months, be able to unlock the analytics for it.

00:26:40.520 --> 00:26:47.480
And so that's really how a lot of the features and a lot of the modules have been added to OSMNX over time.

00:26:47.480 --> 00:26:49.480
There's this new project I ought to do.

00:26:49.480 --> 00:26:51.560
So we'll just build it into the package.

00:26:51.560 --> 00:26:51.800
Right.

00:26:51.800 --> 00:26:54.200
We need to, need to be able to answer new questions.

00:26:54.200 --> 00:26:56.920
So we got to have new ways to get to the data.

00:26:56.920 --> 00:26:57.080
Yeah.

00:26:57.080 --> 00:26:57.080
Yeah.

00:26:57.080 --> 00:26:58.840
Yeah, exactly.

00:26:58.840 --> 00:27:19.080
And it's, it is poorly incentivized in academia, but academia has really been home to a lot of open source tool development, especially niche tools, you know, from stuff like AstroPy, for the astronomers and astrophysicists to things like PySAL, the spatial analysis library in Python.

00:27:19.080 --> 00:27:24.360
And a lot of things that academics have kind of been at the forefront of, but for us, it's always a side hustle.

00:27:24.360 --> 00:27:25.560
Right.

00:27:25.560 --> 00:27:29.160
Stuff with biology, psychology, a lot of the sciences, I imagine.

00:27:29.160 --> 00:27:30.120
Yeah.

00:27:30.120 --> 00:27:41.820
Working on open source projects like this feels to me very much like the concept of funding basic science, right?

00:27:41.820 --> 00:27:42.520
Not funding.

00:27:42.520 --> 00:27:48.500
We need to solve this problem so we can create a bomb or new energy or go to space.

00:27:48.500 --> 00:27:57.340
But we're just doing it because we need to understand the science better and it'll help us then apply it eventually maybe at some point, right?

00:27:57.340 --> 00:27:58.280
Same sort of thing here.

00:27:58.280 --> 00:28:07.180
If these exist, it will supercharge the urban planning space to a huge degree.

00:28:07.180 --> 00:28:15.280
But getting people to fund it or to care about helping build that up, I imagine it's a little bit frustrating.

00:28:15.280 --> 00:28:17.760
No, that's exactly it.

00:28:17.760 --> 00:28:26.260
The way I talk about it is it really is a sort of basic science work that everyone takes for granted as though these things just exist, right?

00:28:26.440 --> 00:28:28.480
This tool just exists.

00:28:28.480 --> 00:28:29.700
We don't know where it comes from.

00:28:29.700 --> 00:28:30.780
It has an API.

00:28:30.780 --> 00:28:32.280
That API just exists.

00:28:32.280 --> 00:28:47.700
And it really kind of obscures all of these human decisions and social structures and processes and institutions that make it difficult or make other things easy and really shape what we end up being able to work with.

00:28:48.700 --> 00:28:49.480
Yeah, absolutely.

00:28:49.480 --> 00:28:49.620
Absolutely.

00:28:49.620 --> 00:28:53.780
Well, someday maybe you can put down.

00:28:53.780 --> 00:28:54.820
Yeah.

00:28:54.820 --> 00:28:58.700
I only wrote two papers, but I have 10,000 get up stars.

00:28:58.700 --> 00:29:02.760
So here's your tenure assignment.

00:29:02.760 --> 00:29:05.200
This is the future.

00:29:05.200 --> 00:29:06.800
I'm there for it.

00:29:07.920 --> 00:29:14.980
It's a race between whether ChatGPT overtakes all of that stuff or you get there and people, I don't know, that's a whole different deal.

00:29:14.980 --> 00:29:15.780
We can talk about that later.

00:29:15.780 --> 00:29:20.120
Let's talk about the Overpass API, though.

00:29:20.120 --> 00:29:25.980
That's the way that you get data from OpenStreetMap.

00:29:26.020 --> 00:29:26.520
What is this?

00:29:26.520 --> 00:29:27.740
Yeah.

00:29:27.740 --> 00:29:43.360
So the Overpass API is another open source tool that lets us query OpenStreetMap's database and download stuff, basically any of OpenStreetMap's features.

00:29:44.440 --> 00:29:51.860
So what's nice about Overpass is that there are some public instances that you can just query as a web API.

00:29:51.860 --> 00:29:58.920
You can also host it locally if you want to work around throttling limits, rate limits.

00:29:58.920 --> 00:30:13.820
Challenge with the Overpass API, you can see a little bit of it here on screen, is that the OverpassQL, its query language, can be really hard to work with to do complex stuff.

00:30:13.820 --> 00:30:15.120
So this is a fairly simple one.

00:30:15.120 --> 00:30:22.580
On screen, we can see there's a bounding box with some lat-long coordinates to explain where we want to download data from.

00:30:22.580 --> 00:30:25.600
The output will be in JSON format.

00:30:25.600 --> 00:30:27.900
The server timeout is 90 seconds.

00:30:27.900 --> 00:30:30.560
Big queries can take a long time to run.

00:30:30.560 --> 00:30:34.380
And then we're querying here for way elements.

00:30:34.380 --> 00:30:38.640
So way would be a line feature in OpenStreetMap.

00:30:38.640 --> 00:30:41.740
Any line, it could be street.

00:30:42.320 --> 00:30:46.360
It could also be the building footprint's boundary line.

00:30:46.360 --> 00:30:47.260
I see.

00:30:47.260 --> 00:30:51.620
Property lines or zoning or whatever, right?

00:30:51.620 --> 00:30:52.820
Yeah, exactly.

00:30:52.820 --> 00:30:55.760
Anything represented as a line.

00:30:55.760 --> 00:30:57.680
And so we get that back out.

00:30:57.680 --> 00:30:59.480
It'll be kicked out as a JSON.

00:30:59.620 --> 00:31:06.500
And what OSMX does is it works with this Overpass API to try to automate some of these queries.

00:31:06.500 --> 00:31:20.760
So rather than having to write the query yourself, download the data, and then convert that raw OpenStreetMap data into a useful data format, like drop it into GeoPandas or into a NetworkX graph, it assembles all of that under the hood.

00:31:21.480 --> 00:31:22.320
It's open source.

00:31:22.320 --> 00:31:23.220
It's well-documented.

00:31:23.220 --> 00:31:26.200
I have a few peer-reviewed articles about the exact process.

00:31:26.700 --> 00:31:31.640
So we don't all have to reinvent the wheel trying to work with this data because none of this is automatic.

00:31:31.640 --> 00:31:38.440
And in fact, you know, 10 plus years ago, people were very laboriously having to write these long scripts.

00:31:38.440 --> 00:31:39.460
You know what I'm going to do?

00:31:39.460 --> 00:31:46.520
I'm going to get a grad student, and it's going to be their job for the summer to convert this to Excel or MATLAB for me.

00:31:46.520 --> 00:31:47.120
Something like that?

00:31:47.120 --> 00:31:47.920
Exactly, yeah.

00:31:47.920 --> 00:31:49.480
Grad students are great.

00:31:50.800 --> 00:31:55.120
But what's greater, I think, is having one or two lines of code to replace your grad student.

00:31:55.120 --> 00:31:58.640
100% and let them do meaningful work that they also like, right?

00:31:58.640 --> 00:32:00.380
Yeah, that's the whole.

00:32:00.380 --> 00:32:02.520
Yeah, yeah, it's fantastic.

00:32:02.520 --> 00:32:13.400
As I look at this and think about this, it feels to me like OSM and X is a little bit like an ORM is to SQL and databases, right?

00:32:13.740 --> 00:32:14.180
Yeah.

00:32:14.180 --> 00:32:23.360
Let's you think more in Python language and concepts and don't worry about the query syntax and the data and all that kind of stuff.

00:32:23.360 --> 00:32:25.540
Is that a reasonable analogy?

00:32:25.540 --> 00:32:27.060
Yeah, that's a good way to put it.

00:32:27.060 --> 00:32:33.740
And the goal for doing something like that is to try to democratize doing some of these analyses.

00:32:33.740 --> 00:32:36.740
You know, OpenStreetMap data are really amazing.

00:32:36.740 --> 00:32:43.000
Overpass is an amazing resource, but it's really hard to work with unless you have some software development

00:32:43.000 --> 00:32:45.300
or database experience.

00:32:45.300 --> 00:32:50.720
And a lot of urban planners or urban geographers or urban sociologists do not.

00:32:50.720 --> 00:32:52.660
They have great questions.

00:32:52.660 --> 00:32:53.600
They have great theory.

00:32:53.600 --> 00:32:55.340
They want a hypothesis test, right?

00:32:55.340 --> 00:33:02.180
But we limit science if our tools are too difficult to use or the right data are too hard to access.

00:33:02.180 --> 00:33:02.980
Yeah.

00:33:02.980 --> 00:33:07.300
Back to that basic science ideas, right?

00:33:07.300 --> 00:33:08.360
Yeah.

00:33:09.000 --> 00:33:09.440
Yeah.

00:33:09.440 --> 00:33:16.260
So for something like this, what OSMX does is it puts that kind of overpass query into much more natural language.

00:33:16.260 --> 00:33:26.600
Since Python is so readable in the first place, you can just say something like graph from place, give it a city name, say Pasadena, California.

00:33:27.380 --> 00:33:30.100
My network type will be drive.

00:33:30.100 --> 00:33:37.000
And then just like that, I have that drivable street network model within the city limits of Pasadena.

00:33:37.000 --> 00:33:38.280
Right.

00:33:38.280 --> 00:33:38.540
Yeah.

00:33:38.540 --> 00:33:42.080
That sounds entirely more usable.

00:33:42.180 --> 00:33:48.620
And one of the things you said is that it can be pretty expensive to query the overpass API.

00:33:48.620 --> 00:33:52.180
And so your library caches that stuff locally, right?

00:33:52.180 --> 00:33:53.260
That's right.

00:33:53.260 --> 00:33:53.440
Yeah.

00:33:53.440 --> 00:33:58.520
So expense in the computational sense, all these things are free to use.

00:33:58.520 --> 00:33:59.120
Yeah.

00:33:59.120 --> 00:34:00.520
Computationally expensive.

00:34:01.040 --> 00:34:02.000
Yeah, exactly.

00:34:02.000 --> 00:34:04.860
And there's a lot of time complexity to it as well.

00:34:04.860 --> 00:34:09.720
So what we do is we cache everything, which helps you avoid rate limiting.

00:34:09.720 --> 00:34:17.180
Let's OSMX be a good neighbor to these free public commons resources that are out there.

00:34:18.520 --> 00:34:18.960
Yeah.

00:34:18.960 --> 00:34:19.380
Interesting.

00:34:19.380 --> 00:34:31.300
It sounds almost like you could have a Docker containers for different cities that are preloaded with all the data that might be interesting to just instantaneously answer a bunch of questions.

00:34:31.300 --> 00:34:32.460
Yeah.

00:34:32.460 --> 00:34:33.760
Which is really my workload.

00:34:33.760 --> 00:34:40.800
So a lot of what I do will be I study every street network for every urbanized area in the world, right?

00:34:40.800 --> 00:34:44.900
So we'll have like 8,000 to 9,000 of these large urban models.

00:34:45.660 --> 00:34:56.200
And so I'll just have things cached locally so that the model building and analytics are really at the forefront rather than the downloading and querying for a day.

00:34:56.200 --> 00:34:57.180
Right.

00:34:57.180 --> 00:35:04.140
It not only lets you be a good citizen and not hammer on OpenStreetMaps API, but it just lets your stuff work faster.

00:35:04.140 --> 00:35:06.880
So the incentives are aligned there, right?

00:35:06.880 --> 00:35:07.920
Yeah.

00:35:07.920 --> 00:35:15.420
And in fact, a lot of the time when people first use OSMX, you'll download, say, the model of Los Angeles, California.

00:35:15.420 --> 00:35:28.000
And it takes a minute to run the query on their server, download whatever 100 megabytes of data, and then build that graph theoretic model, do all the spatial stuff to it.

00:35:28.740 --> 00:35:34.180
But after that, it's nice and fast the next time that you do it because you're able to skip all that preprocessing.

00:35:34.180 --> 00:35:34.460
Right.

00:35:34.460 --> 00:35:40.060
It probably puts it into some super efficient data structure.

00:35:40.060 --> 00:35:45.360
Oct trees or a tree or some others, you know, maybe dictionary, who knows, right?

00:35:45.360 --> 00:35:46.340
Yeah.

00:35:46.340 --> 00:35:46.560
Yeah.

00:35:46.560 --> 00:35:53.660
And we use spatial indexes to accelerate all of the spatial queries locally too as well.

00:35:54.200 --> 00:35:56.780
Is that built into Geopandas?

00:35:56.780 --> 00:35:58.360
Yeah.

00:35:58.360 --> 00:36:04.480
Built into Geopandas, there is an R tree, which is probably the most common spatial index.

00:36:04.480 --> 00:36:11.200
But in addition to that, we also use SciPy's KD tree.

00:36:11.200 --> 00:36:16.480
They have like a C implementation of a K dimensional tree that we use for the nearest neighbor search.

00:36:16.600 --> 00:36:22.180
So that if you, so for example, you know, Google Maps, you say from my origin to my destination, we can do the same kind of thing.

00:36:22.180 --> 00:36:28.360
Say from this point to that point, we'll snap the nearest neighbor on the network and then solve a path between them.

00:36:28.360 --> 00:36:29.520
Okay.

00:36:29.520 --> 00:36:33.660
So just the K nearest neighbor algorithm sort of applied to, what is that?

00:36:33.660 --> 00:36:39.140
The vectors of the intersections or something?

00:36:39.420 --> 00:36:41.300
And then you, the distance, the lines.

00:36:41.300 --> 00:36:41.300
Yeah.

00:36:41.300 --> 00:36:45.780
So normally when you do like origins and destinations, you would snap to a node in the network.

00:36:45.780 --> 00:36:47.940
So the nodes would be like the intersections and dead ends.

00:36:47.940 --> 00:36:54.000
And then the edges would be the links, the street segments that connect everything together.

00:36:54.480 --> 00:37:02.740
And when you solve a path on a graph, it would be from a start node to an end node.

00:37:02.740 --> 00:37:09.500
And you'd minimize it by something, either the fewest hops or the shortest distance or the shortest travel time.

00:37:09.500 --> 00:37:20.300
If you incorporate, say, speed limits, everything else, you can bring in congestion information to minimize traffic congested travel time or minimize going up and down hills or anything else.

00:37:20.300 --> 00:37:21.540
Excellent.

00:37:22.460 --> 00:37:37.580
If I got this data downloaded and I wanted to put it into a proper database, and by proper, I mean one that like is its own process, different machines can talk to it in parallel and whatever, you know, like Postgres or Mongo or something.

00:37:37.580 --> 00:37:46.180
Are there good databases that you would recommend or that you've tried like EdgeDB or Neo4j or graph databases the right way to go?

00:37:46.180 --> 00:37:47.160
Or what do you think?

00:37:47.160 --> 00:37:52.000
It depends on what you're trying to do in terms of OpenStreetMap features.

00:37:52.000 --> 00:38:03.440
So if you're just downloading features and you're not worried about, say, those topological relationships between things, like in a street network, any tabular data structure will do.

00:38:03.440 --> 00:38:06.600
You know, any kind of like SQL database will do just fine.

00:38:06.600 --> 00:38:19.920
For a graph model, yeah, you'd want some kind of graph database because they can handle graph algorithms to do stuff like routing or other kinds of graph analytics like understanding connectivity on the network.

00:38:19.920 --> 00:38:20.160
Yeah.

00:38:20.160 --> 00:38:20.200
Yeah.

00:38:20.200 --> 00:38:20.320
Yeah.

00:38:20.320 --> 00:38:20.640
Yeah.

00:38:20.640 --> 00:38:20.920
Yeah.

00:38:20.920 --> 00:38:23.960
I have this, given this node, tell me all the things that are connected to it.

00:38:23.960 --> 00:38:25.640
Like that, those kinds of questions could be answered.

00:38:25.640 --> 00:38:25.880
Yeah.

00:38:25.880 --> 00:38:26.600
Those kinds of questions.

00:38:26.600 --> 00:38:26.880
Yeah.

00:38:26.880 --> 00:38:27.240
Yeah.

00:38:27.240 --> 00:38:27.280
Yeah.

00:38:27.280 --> 00:38:31.180
They're kind of pre-computed by the indices and the structures.

00:38:31.180 --> 00:38:34.580
What about bringing in other data?

00:38:34.580 --> 00:38:55.120
You know, what if I have real estate data that doesn't come from OpenStreetMap, but I want to pull that in and overlay it with, say, zoning information, overlapped with census data that gives me revenue, you know, how much that person in that area makes per year on average or something like that.

00:38:55.240 --> 00:38:56.360
Can you answer questions like that?

00:38:56.360 --> 00:38:56.860
Yeah.

00:38:56.860 --> 00:38:57.120
Yeah.

00:38:57.120 --> 00:38:58.160
A really common use case.

00:38:58.160 --> 00:39:03.520
So OSMNX can kind of do that by itself, but mostly as a tool in the toolkit to do it.

00:39:05.200 --> 00:39:09.100
So, you know, a common way that we often will do this is for accessibility analyses.

00:39:09.100 --> 00:39:17.160
So, for example, here at my house, how many grocery stores could I access within a 15 minute walk?

00:39:17.160 --> 00:39:21.980
And it gives you a sense of, you know, how car dependent or not a place is.

00:39:21.980 --> 00:39:27.020
And also we can start looking at food deserts in certain communities where people don't have access to fresh food.

00:39:27.340 --> 00:39:33.220
So for that, what you're doing is you have a model of the network and then you also have all of this point of interest data, right?

00:39:33.220 --> 00:39:44.300
So where all these amenities are located, you would then snap them, load them onto the graph, and then you can calculate accessibility by looking at where those things are located.

00:39:44.300 --> 00:39:51.260
And you can either look at cumulative opportunities within some time horizon or distance to the nearest opportunity.

00:39:51.260 --> 00:40:00.940
You can put different decays on it, like the utility of it being so far away drops off with a linear decay the further I have to go or a nonlinear decay that really drops off fast.

00:40:00.940 --> 00:40:01.300
Right.

00:40:01.300 --> 00:40:02.160
But it's exactly that.

00:40:02.160 --> 00:40:02.820
Yeah.

00:40:02.820 --> 00:40:07.600
If a grocery store is three miles away, it's not one third as useful as one that's one mile away.

00:40:07.600 --> 00:40:10.480
It's quite a bit more to carry your groceries that far.

00:40:11.100 --> 00:40:15.540
And similarly, there's marginal utility for the 30th grocery store that you can reach.

00:40:15.540 --> 00:40:18.600
It doesn't give you that much benefit over the 29th that you can reach.

00:40:18.600 --> 00:40:21.280
Whereas the first and second are very valuable.

00:40:21.280 --> 00:40:22.060
Yeah.

00:40:22.060 --> 00:40:25.580
If it goes from zero to one and one to two, those are big, big jumps right there.

00:40:25.580 --> 00:40:26.240
Yep.

00:40:26.240 --> 00:40:27.380
Yeah.

00:40:27.380 --> 00:40:28.060
Okay.

00:40:28.060 --> 00:40:29.080
Very interesting.

00:40:29.080 --> 00:40:35.320
How about some projects that people might be thinking about?

00:40:35.320 --> 00:40:40.420
You know, they look at this data and they're like, wow, this looks really detailed and neat.

00:40:40.440 --> 00:40:45.680
And we have all these different aspects we can ask about, but, you know, maybe they just want to play around.

00:40:45.680 --> 00:40:47.320
Yeah.

00:40:47.320 --> 00:40:55.200
I mean, hopefully, you know, if you look at the getting started guide, these usage examples, you'll see it's really easy to play around, you know, two, three lines of code.

00:40:55.200 --> 00:40:59.040
And you have a visualization of your local street network.

00:40:59.040 --> 00:41:04.720
A few things that we've done in my lab at USC that may spark some interest.

00:41:05.520 --> 00:41:12.460
We look at air pollution exposure and driving patterns in Los Angeles to try to understand, you know, who's driving and where.

00:41:13.280 --> 00:41:19.200
And then in turn, who is exposed to that tailpipe, those tailpipe emissions from those cars.

00:41:19.200 --> 00:41:28.240
So we use OSM and X to model those street networks, to simulate those trips and to look at what census tracts that stuff goes through.

00:41:28.240 --> 00:41:31.140
We also use it for studies of urban form.

00:41:31.360 --> 00:41:37.080
So that is kind of the shape, texture, density, the grain of a city.

00:41:37.080 --> 00:41:43.960
I have this series of square mile visualizations of different cities around the world.

00:41:43.960 --> 00:41:51.080
And you can really quickly see how different forms of urbanism look relative to each other.

00:41:51.080 --> 00:41:59.480
So a place like Irvine, California, here in Southern California, has this really coarse grained street network.

00:41:59.480 --> 00:42:06.860
A place like Venice in Italy has incredibly fine grained like spider web street network.

00:42:06.860 --> 00:42:13.320
Stuff like that really helps to kind of convey these different modes of urbanism and urbanization.

00:42:13.320 --> 00:42:16.900
We also use these to look at disaster resilience.

00:42:16.900 --> 00:42:23.640
That is, different street networks will be better if things start going wrong around them.

00:42:23.640 --> 00:42:31.800
Things with more redundancy, more connectivity built in are easier to route around if parts start failing in a fire, in an earthquake.

00:42:31.800 --> 00:42:39.320
So we can calculate some of these characteristics and then make recommendations to planners and policymakers about how to make your street network,

00:42:39.320 --> 00:42:41.360
how to intervene in it to make it more resilient.

00:42:42.640 --> 00:42:43.080
Yeah.

00:42:43.080 --> 00:42:43.120
Yeah.

00:42:43.120 --> 00:42:51.480
In my area, there's an east-west highway, one of the very few that goes from the city west.

00:42:51.480 --> 00:42:53.060
It has to go through this mountain tunnel.

00:42:53.060 --> 00:42:56.980
And it's two lanes each way in the mountain or three lanes in the mountain tunnel.

00:42:56.980 --> 00:43:03.580
And there's even on a Saturday afternoon, there's stopped cars trying to go through that tunnel.

00:43:03.580 --> 00:43:04.980
And those are on good days.

00:43:04.980 --> 00:43:06.440
Imagine if there was an emergency.

00:43:06.440 --> 00:43:07.420
It would just be done.

00:43:08.220 --> 00:43:10.220
Yeah, that's the 26, right?

00:43:10.220 --> 00:43:11.380
Exactly.

00:43:11.380 --> 00:43:12.300
It is the 26.

00:43:12.300 --> 00:43:12.960
Yeah.

00:43:12.960 --> 00:43:14.180
I used to live in Portland.

00:43:14.180 --> 00:43:17.520
I lived in Goose Hollow.

00:43:17.520 --> 00:43:18.640
Oh, yeah, yeah.

00:43:18.640 --> 00:43:19.740
And my gym was in Beaverton.

00:43:19.740 --> 00:43:22.400
So I would have to go through that tunnel to go work out.

00:43:22.400 --> 00:43:26.040
It would always be like, you know, one of these days.

00:43:26.040 --> 00:43:27.200
One of these days.

00:43:28.540 --> 00:43:28.900
Exactly.

00:43:28.900 --> 00:43:29.280
Yeah.

00:43:29.280 --> 00:43:32.340
I live about a mile from Goose Hollow up through that tunnel.

00:43:32.340 --> 00:43:33.180
So, yeah.

00:43:33.180 --> 00:43:33.660
Oh, cool.

00:43:33.660 --> 00:43:34.580
Yeah, yeah.

00:43:34.580 --> 00:43:35.500
Very cool.

00:43:35.500 --> 00:43:35.780
Yeah.

00:43:35.780 --> 00:43:39.960
But there's just – and that one's hard to fix because there's houses all along there.

00:43:39.960 --> 00:43:41.420
It's a big hill.

00:43:41.960 --> 00:43:42.740
It's hard to go over it.

00:43:42.740 --> 00:43:46.480
You know, it would take a lot of willpower to make another tunnel.

00:43:46.480 --> 00:43:48.520
Yeah, interesting thing.

00:43:48.520 --> 00:44:00.480
I did my PhD at Berkeley, and there is another tunnel there that goes from that kind of inner East Bay, Berkeley, Oakland border, out to the further east suburbs like Orinda, Moraga, and so forth.

00:44:00.480 --> 00:44:03.360
And that tunnel is really old.

00:44:03.360 --> 00:44:06.340
I mean, it's, I don't know, 80 years old, maybe, something like that.

00:44:06.620 --> 00:44:11.540
And they determined that when the big one does eventually hit, it will fail, it will collapse.

00:44:11.540 --> 00:44:16.340
And it's not – it's cost prohibitive to actually prevent that from happening.

00:44:16.340 --> 00:44:23.700
So, the idea is it will collapse and crush everyone in that tunnel, and they will then build a new tunnel at that point when they have to.

00:44:23.700 --> 00:44:24.420
Oh, my goodness.

00:44:24.420 --> 00:44:26.600
We have, like, that's what it's all about.

00:44:26.600 --> 00:44:30.560
Yeah, just go quickly when you're in the tunnel.

00:44:30.560 --> 00:44:31.420
Get out of there.

00:44:31.420 --> 00:44:32.420
I always did.

00:44:32.420 --> 00:44:35.500
Amazing.

00:44:36.260 --> 00:44:36.780
All right.

00:44:36.780 --> 00:44:47.120
Let's talk real quickly about integrating Open OSMNX with other data science tooling, right?

00:44:47.120 --> 00:44:48.440
We have so many different things.

00:44:48.440 --> 00:44:50.120
We have PyTorch.

00:44:50.120 --> 00:44:51.200
We have Pandas.

00:44:51.200 --> 00:44:52.500
We have Polars.

00:44:52.500 --> 00:44:55.100
All the different things.

00:44:55.100 --> 00:44:57.580
Like, what are the different integration features?

00:44:57.580 --> 00:44:58.940
You know, you talked about data frames.

00:44:58.940 --> 00:45:01.980
That sounds like Pandas and Pandas and Geopandas, right?

00:45:01.980 --> 00:45:05.080
So, that's one sort of path across those things.

00:45:05.900 --> 00:45:06.900
Yeah.

00:45:06.900 --> 00:45:06.900
Yeah.

00:45:06.900 --> 00:45:15.380
So, OSMNX is built primarily on top of three things.

00:45:15.380 --> 00:45:26.000
It's NetworkX for the graph models, Geopandas for the spatial data frames, and Matplotlib for the visualizations.

00:45:26.000 --> 00:45:40.100
In the spatial Python world, most stuff happens in the Pandas ecosystem because Geopandas and PySAL and similar tools are very Pandas oriented.

00:45:40.100 --> 00:45:47.940
I know there's been some work toward Geopolar, but it's kind of in its infancy, as far as I know, to this extent.

00:45:47.940 --> 00:45:51.120
But that'll be great when that's available.

00:45:51.120 --> 00:45:56.000
NetworkX is another funny one because it's a pure Python implementation.

00:45:56.000 --> 00:45:57.020
It has a lot of loops.

00:45:57.120 --> 00:46:04.200
So, it can go really slow for calculating some of these big time complexity graph algorithms.

00:46:04.200 --> 00:46:11.220
Things like betweenness centrality, where you have this massive OD matrix of basically all the nodes to all the nodes.

00:46:11.400 --> 00:46:11.760
Yeah, yeah.

00:46:11.760 --> 00:46:13.520
Some combinatorial craziness.

00:46:13.520 --> 00:46:21.760
It ends up being very time consuming to calculate those kinds of things for a metro area sized network model.

00:46:22.400 --> 00:46:25.000
So, we'll integrate with other tools.

00:46:25.000 --> 00:46:28.180
iGraph does that in C.

00:46:28.180 --> 00:46:33.920
Also, using tools like QGraph, where you can do it on the GPU instead.

00:46:33.920 --> 00:46:34.500
Oh, wow.

00:46:34.500 --> 00:46:34.840
Okay.

00:46:34.840 --> 00:46:35.480
Yeah.

00:46:35.480 --> 00:46:43.920
But it's limited because the waiting scheme doesn't let you say, I want to minimize travel time, stuff like that.

00:46:43.920 --> 00:46:44.500
I see.

00:46:46.560 --> 00:46:47.160
Yeah.

00:46:47.160 --> 00:46:55.620
And then also integrated with Folium to create interactive leaflet web maps out of the box.

00:46:55.620 --> 00:46:56.860
Yeah.

00:46:56.860 --> 00:47:04.340
I wonder how that the free-threaded Python stuff will affect some of those computational things.

00:47:04.340 --> 00:47:11.320
Like that everything compared with everything else sounds like a so-called embarrassingly parallel sort of problem.

00:47:11.320 --> 00:47:12.200
Yeah.

00:47:12.200 --> 00:47:12.380
Right?

00:47:12.380 --> 00:47:18.460
And so, if you could just say, well, you have 10 cores, so let's just do 10 blocks of them all in parallel.

00:47:18.460 --> 00:47:19.400
And, you know.

00:47:19.400 --> 00:47:19.820
Yeah.

00:47:19.820 --> 00:47:22.740
So, that's what we do when we do it in pure Python.

00:47:22.740 --> 00:47:27.720
So, we'll use multiprocessing generally with all your CPUs.

00:47:27.720 --> 00:47:35.880
The only challenge is that your OD matrix, your origin destination matrix is growing at this exponential rate.

00:47:36.140 --> 00:47:41.140
But then there's a linear number of cores, so going from 1 to 24 and dividing by a factor of 24.

00:47:41.140 --> 00:47:49.740
But when you have, say, a million nodes times a million nodes in your graph, it's going to take you a long time.

00:47:49.740 --> 00:47:50.740
It's still going to be slow.

00:47:50.740 --> 00:47:51.460
But it's...

00:47:51.460 --> 00:47:53.600
You've gone from months down to weeks.

00:47:53.600 --> 00:47:55.080
Yeah.

00:47:55.140 --> 00:48:00.280
I mean, you're still dividing it by the number of cores, but it doesn't necessarily mean it's super fast.

00:48:00.280 --> 00:48:04.300
Although, the GPU stuff seems like it could absolutely fly, right?

00:48:04.300 --> 00:48:05.320
Yeah.

00:48:05.320 --> 00:48:07.140
That makes a big difference.

00:48:07.140 --> 00:48:11.400
And I think that's really the area of growth where handling...

00:48:11.400 --> 00:48:15.980
I mean, basically getting out of Python loops in the first place is the biggest area of growth.

00:48:15.980 --> 00:48:17.800
And then doing things on a...

00:48:17.800 --> 00:48:24.440
Since these are really just very simple linear algebra problems, being able to do them on a GPU makes it much more efficient.

00:48:25.020 --> 00:48:25.500
Yeah.

00:48:25.500 --> 00:48:29.300
Did you hear about this thing, this new NVIDIA?

00:48:29.300 --> 00:48:30.280
I don't know what it's called.

00:48:30.280 --> 00:48:31.520
Project Digits?

00:48:31.520 --> 00:48:36.880
Where they announced a $3,000 desktop AI computer.

00:48:36.880 --> 00:48:40.460
I mean, they call it AI, but really it's just a GPU beast.

00:48:40.460 --> 00:48:41.020
It is interesting.

00:48:41.020 --> 00:48:41.980
No, I hadn't heard about that.

00:48:41.980 --> 00:48:45.020
And this thing, it's the size of a Mac Mini.

00:48:45.020 --> 00:48:49.240
If you look at the picture, it's a little bit of a golden thing.

00:48:49.240 --> 00:48:50.680
It's kind of clever that made it gold.

00:48:50.680 --> 00:48:56.920
But that's a massive computer sitting next to you.

00:48:56.920 --> 00:48:58.460
Yeah.

00:48:58.460 --> 00:48:59.420
You could run that.

00:48:59.420 --> 00:49:01.200
This is pretty interesting, actually, I think.

00:49:01.200 --> 00:49:02.940
Yeah.

00:49:04.420 --> 00:49:05.380
Yeah, that is.

00:49:05.380 --> 00:49:05.720
That is.

00:49:05.720 --> 00:49:12.020
I mean, it's shocking, too, because it looks so much smaller than just an NVIDIA card in your desktop.

00:49:12.020 --> 00:49:17.620
I think it basically is just the GPU and nothing to do with graphics.

00:49:17.620 --> 00:49:24.380
And then you just remote into it over, I don't know, a terminal or however you, or maybe you set it as the Docker host.

00:49:24.540 --> 00:49:27.760
And then you just do Docker locally, but it runs there, you know, that type of thing.

00:49:27.760 --> 00:49:30.340
I don't know how it works, but I kind of want one.

00:49:30.340 --> 00:49:31.280
Yeah.

00:49:31.280 --> 00:49:33.320
I mean, it looks sexy enough.

00:49:33.320 --> 00:49:34.480
Of course you would want one, right?

00:49:34.480 --> 00:49:35.460
Of course.

00:49:35.460 --> 00:49:48.220
But if you had questions like that, if you say, I have a million nodes and I could run that on a GPU, getting something like this that's, you know, kind of the H100 style of like the really large, just meant for compute, not really a graphics card.

00:49:48.220 --> 00:49:49.180
Yeah.

00:49:49.180 --> 00:49:51.800
It seems like that would really unlock some interesting options.

00:49:51.800 --> 00:49:53.300
Yeah, totally.

00:49:53.300 --> 00:49:53.980
I mean, yeah.

00:49:53.980 --> 00:50:00.240
So I have a GeForce card in my desktop that I'll pass some of that stuff locally onto.

00:50:00.240 --> 00:50:13.680
But another one of the academic benefits at USC, we have a high performance computing buster that I can schedule tasks to run on that, say, over winter break and then come back in January.

00:50:13.680 --> 00:50:19.520
January and the month of 1000 CPUs is all done.

00:50:19.520 --> 00:50:21.300
That's amazing.

00:50:21.300 --> 00:50:31.340
We had a mainframe, Silicon Graphics mainframe when I was studying math that we could all work on in this group, maybe 10 of us.

00:50:32.800 --> 00:50:38.540
And it wasn't as big as what you're saying, but it was, you know, a quite expensive big machine.

00:50:38.540 --> 00:50:41.420
It had its own room and it was really loud to go into that room.

00:50:41.420 --> 00:50:49.060
And I remember we came in to, I came in to do whatever I was working on as a grad student or whatever.

00:50:49.060 --> 00:50:50.000
I think I was a senior.

00:50:50.000 --> 00:50:54.440
Anyway, I came in to work on my project and nobody could access it.

00:50:54.440 --> 00:50:58.700
And it was still in there making loud noises like it was running, but it acted like it wasn't running.

00:50:58.700 --> 00:50:59.760
And so what is going on?

00:50:59.760 --> 00:51:07.460
One of the other grad students had run a job like you're talking about, but they were having trouble getting into work because they were math people, not programmers.

00:51:07.460 --> 00:51:10.000
And they started logging everything.

00:51:11.420 --> 00:51:14.640
And there were no limits on what people could do to the computer.

00:51:14.640 --> 00:51:16.260
The people had set it up.

00:51:16.260 --> 00:51:22.880
And so what had happened is it ran 100% CPU on all the cores all night logging until it ran out of space.

00:51:22.880 --> 00:51:25.920
And then apparently the computer won't run anymore if it has zero more bytes.

00:51:25.920 --> 00:51:27.440
It needed some temp file or something.

00:51:27.440 --> 00:51:29.860
And so it just, it was just done.

00:51:29.860 --> 00:51:33.560
I imagine you guys have more guardrails than that.

00:51:33.560 --> 00:51:36.060
Yeah, a lot of guardrails.

00:51:36.060 --> 00:51:39.560
I would love to try to do something like that just for the yuck sometime.

00:51:40.700 --> 00:51:45.860
The admins of that computer would not please with that grad student.

00:51:45.860 --> 00:51:47.180
I can only imagine.

00:51:47.180 --> 00:51:49.360
It took a long time to get it going.

00:51:49.360 --> 00:51:53.800
It's like a day of work to get it turned back on because they didn't even know what was wrong with it at first.

00:51:53.800 --> 00:51:54.720
It just wouldn't turn on.

00:51:54.720 --> 00:51:56.080
Oh, well.

00:51:56.080 --> 00:52:04.360
Jumping back a moment to the, no, that's not the one I wanted to copy, to the integration.

00:52:04.360 --> 00:52:06.540
Have you considered working with narwhals?

00:52:07.940 --> 00:52:10.640
I looked into narwhals recently.

00:52:10.640 --> 00:52:15.600
My understanding is one of the things that does well is it kind of abstracts away from pandas versus polars.

00:52:15.600 --> 00:52:16.220
Yeah.

00:52:16.220 --> 00:52:18.000
So you're less tool dependent, right?

00:52:18.420 --> 00:52:18.860
Yeah.

00:52:18.860 --> 00:52:26.540
And it also lets people who want to consume your library, who want to do their work in polars, talk polars to your project.

00:52:26.540 --> 00:52:33.080
And people want to do pandas, talk pandas, as well as QDF, moden, pyro, and other.

00:52:33.080 --> 00:52:35.460
It kind of is an adapting layer.

00:52:35.460 --> 00:52:38.480
So people can work in their native framework and then talk to you.

00:52:39.140 --> 00:52:39.540
Yeah.

00:52:39.540 --> 00:52:42.520
I mean, yeah, on paper it sounds great.

00:52:42.520 --> 00:52:45.080
I haven't played with it yet other than just being familiar with it.

00:52:45.080 --> 00:52:48.500
But I mean, that sounds like the ideal, right?

00:52:48.500 --> 00:52:52.160
We shouldn't be enforcing these certain APIs or languages on people.

00:52:52.720 --> 00:52:52.980
Yeah.

00:52:52.980 --> 00:52:54.240
It does look interesting.

00:52:54.240 --> 00:52:58.760
I believe it's foundational internals or maybe just the API.

00:52:58.760 --> 00:53:00.960
But they're polars, not pandas.

00:53:00.960 --> 00:53:02.440
So maybe that's not as good of a fit.

00:53:02.440 --> 00:53:10.080
But it could be an interesting thing to look in the future to sort of make it native to all the different data frame libraries that people want to talk in.

00:53:10.080 --> 00:53:11.080
Yeah.

00:53:11.080 --> 00:53:12.140
Yeah, definitely.

00:53:12.140 --> 00:53:13.760
Are you going to need a new grant?

00:53:14.600 --> 00:53:14.920
Yeah.

00:53:14.920 --> 00:53:17.200
Here's the basic science stuff, right?

00:53:17.200 --> 00:53:26.500
I mean, if I can't get them interested in network models, I don't know about getting into the nuts and bolts of which data frame API we should have people use.

00:53:26.500 --> 00:53:28.380
Yeah.

00:53:28.380 --> 00:53:29.580
Yeah, absolutely.

00:53:29.580 --> 00:53:30.920
All right.

00:53:30.920 --> 00:53:38.380
Well, let's close this whole conversation out by talking about something that I know is on a lot of people's minds.

00:53:38.380 --> 00:53:40.340
And that's LLMs.

00:53:41.100 --> 00:53:51.060
And, you know, what is what do LLMs mean for this mapping data and the types of questions you can answer and OSM and X, all these types of things?

00:53:51.060 --> 00:53:53.380
Like, how's that shaping your world?

00:53:53.380 --> 00:53:54.960
Yeah.

00:53:54.960 --> 00:53:57.920
So two ways that I like to think about it.

00:53:57.920 --> 00:54:01.400
One is what LLMs have to offer us today.

00:54:01.400 --> 00:54:05.820
And then one is what LLMs have to offer us, say, five to 10 years from now.

00:54:05.820 --> 00:54:11.160
That is, how do we future-proof ourselves, our careers, our livelihoods?

00:54:11.160 --> 00:54:18.120
And I mean, or just optimistically, how do we really get ahead of it to take advantage of nice things that they'll have to offer?

00:54:18.120 --> 00:54:25.160
Today, I am deeply unimpressed with most of the use cases that I see for it.

00:54:25.440 --> 00:54:31.020
I think that the outputs only look good to people who aren't experts and don't know how wrong it is.

00:54:31.020 --> 00:54:35.820
It does some things well, you know, like having a co-pilot while you're coding and having it recommending.

00:54:35.820 --> 00:54:37.400
That's nice.

00:54:37.400 --> 00:54:39.540
I mean, it's like tab complete from years ago.

00:54:39.540 --> 00:54:41.900
It's the same kind of thing, just iterating it.

00:54:42.740 --> 00:54:48.660
But, you know, when someone tells it to, you know, here's the prompt, generate my algorithm for me.

00:54:48.660 --> 00:54:50.080
Two things.

00:54:50.080 --> 00:54:53.900
One, it very often doesn't do that good of a job even at this point.

00:54:53.900 --> 00:55:01.800
And number two, if you don't enjoy doing that kind of thing, I'm not sure why you're in software development in the first place.

00:55:01.800 --> 00:55:02.780
I know.

00:55:02.780 --> 00:55:06.500
For me, when I interface with it, it's usually in the classroom.

00:55:06.500 --> 00:55:10.560
And you'll have, so, you know, people like to complain, kids these days.

00:55:10.560 --> 00:55:12.400
It's the same way it was when I was in school.

00:55:12.400 --> 00:55:15.240
You know, a third of the class loves a subject.

00:55:15.240 --> 00:55:16.660
They're just killing it.

00:55:16.660 --> 00:55:17.460
They want to be there.

00:55:17.460 --> 00:55:18.540
They want a job in this.

00:55:18.540 --> 00:55:21.520
A third of the class, they're like, well, it's a required class.

00:55:21.520 --> 00:55:22.700
I'll try to do what I can.

00:55:22.700 --> 00:55:25.700
And a third of them say, I don't know why I'm here.

00:55:25.700 --> 00:55:26.960
Why is this a required course?

00:55:26.960 --> 00:55:27.880
I hate this.

00:55:27.880 --> 00:55:30.620
Is there any way I can cheat to just get a passing grade?

00:55:30.620 --> 00:55:31.820
Where's my shortcut?

00:55:31.820 --> 00:55:33.060
Exactly.

00:55:33.060 --> 00:55:40.440
I mean, and, you know, the difference today is that LLMs make it so much easier and they really normalized cheating.

00:55:40.440 --> 00:55:55.960
And I think one of the problems here, you know, it goes back to like licensing or attribution.

00:55:55.960 --> 00:56:02.840
And when we normalize this kind of cheating, we're normalizing taking credit for things that aren't our work.

00:56:02.840 --> 00:56:05.580
And if we're doing that in school, we build those habits.

00:56:05.580 --> 00:56:08.080
What's it going to look like when we're working in the workforce?

00:56:08.080 --> 00:56:19.300
We either don't have the skills that people think we have or we think it's just normal, acceptable practice to copy and paste and say, here's my intellectual contribution.

00:56:19.300 --> 00:56:20.460
It's too much of a crutch.

00:56:20.460 --> 00:56:28.000
And if, you know, maybe it solves 90% of the problems, but that 10% it doesn't, you're fully incapable of approaching that problem, right?

00:56:28.580 --> 00:56:29.020
Exactly.

00:56:29.020 --> 00:56:29.420
Yeah.

00:56:29.420 --> 00:56:33.100
And I think, you know, so that's the first part, what LLMs offer us today.

00:56:33.100 --> 00:56:36.060
I think the second part is, say, five to 10 years from now.

00:56:36.060 --> 00:56:39.200
And part of it is scary and part of it is exciting.

00:56:39.200 --> 00:56:45.660
I think that coding, as it looks today, is going to largely go away over my lifetime.

00:56:46.660 --> 00:56:52.560
Because coding is this mix of art and intellectual labor and manual labor.

00:56:52.560 --> 00:56:56.840
The manual labor parts, you know, will be going away.

00:56:56.840 --> 00:57:01.540
And that's where a lot of people use LLMs now to reduce some of that grind of coding.

00:57:01.540 --> 00:57:13.100
And I think it's important for us to figure out where those intellectual contributions are, where the art, the poetry of coding remains a human contribution moving forward.

00:57:13.340 --> 00:57:19.140
Where we have, you know, that sort of human in the loop to make ethical decisions that we don't pass off.

00:57:19.140 --> 00:57:24.360
Where it is humans who are doing some of the architecting and not just handing it off saying, here's a prompt.

00:57:24.360 --> 00:57:27.480
Now, redesign our financial system from the ground up for us.

00:57:27.480 --> 00:57:39.180
But that it remains human guardrails and human ethics and human notions of justice that we use AI to help us, but doesn't replace that.

00:57:39.500 --> 00:57:39.900
Yeah.

00:57:39.900 --> 00:57:53.120
I feel like there's going to be a lot of people who are programmers now are going to have to kind of be a senior tech team lead type of thing where the team is asking the LLM to do stuff for you.

00:57:53.120 --> 00:57:56.480
And that's going to be awesome for those people, us.

00:57:56.480 --> 00:58:01.380
But for the people who are brand new, there's going to be a wider gap to try to cross.

00:58:01.600 --> 00:58:10.240
It's going to be harder and harder to go from real beginner to that level when who's going to employ you when it takes you a day.

00:58:10.240 --> 00:58:14.360
And I can ask the LLM to do it in five minutes and I got to review it either way.

00:58:14.360 --> 00:58:18.140
That's a very concerning social consequence, I think.

00:58:18.800 --> 00:58:19.280
Exactly.

00:58:19.280 --> 00:58:26.040
And I think those kind of entry level jobs are very much more labor focused, right?

00:58:26.040 --> 00:58:33.520
The senior dev isn't doing that work because someone with less experience, less pay can do it.

00:58:33.520 --> 00:58:38.600
And if LLMs replace that over time, it's really hard to get your foot in the door in that industry.

00:58:39.320 --> 00:58:43.000
It's going to be like COBOL programmers did not a program without an LLM someday.

00:58:43.000 --> 00:58:44.660
Yeah.

00:58:44.660 --> 00:58:48.260
I don't know if that's good or bad, but it's going to be weird.

00:58:48.260 --> 00:58:51.920
Anyway, I think it's probably pretty interesting.

00:58:51.920 --> 00:58:58.980
And given access with your API and with all this data, I'm sure people will be able to ask and answer interesting questions with it.

00:58:58.980 --> 00:59:00.340
That's the hope.

00:59:00.340 --> 00:59:01.700
Indeed.

00:59:01.700 --> 00:59:02.080
All right.

00:59:02.080 --> 00:59:04.800
Two really quick things to close out our conversation.

00:59:04.800 --> 00:59:05.960
Roadmap.

00:59:06.340 --> 00:59:10.580
Anything on the roadmap coming real soon that people have been asking about, thinking about?

00:59:10.580 --> 00:59:11.580
Yeah.

00:59:11.580 --> 00:59:15.660
So I just released V2.0.

00:59:15.660 --> 00:59:17.820
I love my show ago.

00:59:17.820 --> 00:59:19.240
Thank you.

00:59:19.240 --> 00:59:24.360
And that was really just a year of rethinking the API.

00:59:24.360 --> 00:59:27.340
I was going to allow myself breaking changes, really cleaning things up.

00:59:27.340 --> 00:59:30.380
I added type annotations for the first time.

00:59:30.380 --> 00:59:34.880
I really changed the linting and formatting, CI, pre-commit, everything.

00:59:35.720 --> 00:59:38.780
So it's a much more rigorous package at this point.

00:59:38.780 --> 00:59:45.400
I'm taking a breather right now where I don't have that much big on the horizon.

00:59:45.400 --> 00:59:49.940
I try to keep a really clean issue board as well where I quickly triage.

00:59:49.940 --> 00:59:50.760
This is in scope.

00:59:50.760 --> 00:59:51.440
This is not.

00:59:51.440 --> 00:59:52.440
Yeah.

00:59:52.440 --> 00:59:55.460
I noticed you have three open issues and zero PRs, which is awesome.

00:59:56.500 --> 00:59:56.780
Yeah.

00:59:56.780 --> 01:00:02.680
I try to do it courteously where I'll tell people a lot of the time, you know, this isn't in scope for the project, but I appreciate the suggestion.

01:00:02.680 --> 01:00:04.100
But I'm busy.

01:00:04.100 --> 01:00:06.600
So keeping a clean issue board makes my life simple.

01:00:06.600 --> 01:00:10.800
So short answer, I'm taking a breather instead of roadmapping.

01:00:10.800 --> 01:00:13.480
But you just had a big release, which is cool.

01:00:13.480 --> 01:00:14.360
Yeah.

01:00:14.920 --> 01:00:15.140
Yeah.

01:00:15.140 --> 01:00:17.900
Contributions accepted?

01:00:17.900 --> 01:00:19.740
Absolutely.

01:00:19.740 --> 01:00:25.460
And very often what I ask when someone opens an issue and I say, yeah, that does sound useful.

01:00:25.460 --> 01:00:27.800
Would you like to open a PR?

01:00:28.640 --> 01:00:39.860
I, you know, in as much as this is my side hustle, most of the pull requests that I add to it are very much aligned with a current or recent research project that I'm working on.

01:00:39.860 --> 01:00:40.380
Right.

01:00:40.380 --> 01:00:49.120
So for others, you know, if you see a gap or a cool feature that could make people's lives easier, better analytics down the road, please propose it.

01:00:49.120 --> 01:00:50.320
And I'd love a contribution.

01:00:50.320 --> 01:00:51.840
Excellent.

01:00:51.840 --> 01:00:53.460
All right.

01:00:53.460 --> 01:00:54.280
Final call to action.

01:00:54.280 --> 01:00:56.300
People are psyched about mapping.

01:00:56.300 --> 01:00:57.480
They want to get started.

01:00:57.480 --> 01:00:58.040
What do you tell them?

01:00:58.040 --> 01:01:05.060
I tell them to work through existing examples from the tools that are out there.

01:01:05.060 --> 01:01:09.800
If you haven't done any kind of mapping before, there's a lot of cool packages in R and in Python.

01:01:09.800 --> 01:01:11.720
Find something you're comfortable with.

01:01:11.720 --> 01:01:13.560
Work through some tutorials.

01:01:13.560 --> 01:01:16.140
And then figure out something close to home.

01:01:16.140 --> 01:01:20.260
It's so much easier if you have that kind of local motivation, local knowledge.

01:01:20.260 --> 01:01:21.420
Do some mapping.

01:01:21.420 --> 01:01:25.860
Do an analysis in your community for something that's bothering you that you think could be better.

01:01:25.860 --> 01:01:27.040
Excellent.

01:01:27.620 --> 01:01:27.980
All right.

01:01:27.980 --> 01:01:29.160
Well, thank you for being here.

01:01:29.160 --> 01:01:30.720
And congrats on the cool project.

01:01:30.720 --> 01:01:32.380
Thank you very much.

01:01:32.380 --> 01:01:33.160
Yep.

01:01:33.160 --> 01:01:33.580
Bye.

01:01:33.580 --> 01:01:33.620
Bye.

01:01:33.620 --> 01:01:35.580
Okay.

