WEBVTT

00:00:00.000 --> 00:00:05.000
- Roman, welcome back to Talk Python To Me.


00:00:05.000 --> 00:00:06.840
- Hi, hi.


00:00:06.840 --> 00:00:08.960
- Hey, so good to have you back on the show.


00:00:08.960 --> 00:00:10.240
Yeah, you as well.


00:00:10.240 --> 00:00:13.080
- Thank you. - How have you been?


00:00:13.080 --> 00:00:17.920
- So it was a nice adventure for me,


00:00:17.920 --> 00:00:22.920
like these two years of moving to other countries.


00:00:22.920 --> 00:00:29.120
- Yeah, are you up for sharing that with people?


00:00:29.120 --> 00:00:30.560
- What, you're up too? - Sorry?


00:00:30.560 --> 00:00:32.400
- Are you up for sharing where you've moved to?


00:00:32.400 --> 00:00:35.760
Last time we spoke, you were in Berlin, I believe.


00:00:35.760 --> 00:00:37.240
- I was in Germany, and now I'm in Africa.


00:00:37.240 --> 00:00:38.720
- Yeah, Nick Jetzt.


00:00:38.720 --> 00:00:41.320
(Roman laughs)


00:00:41.320 --> 00:00:42.960
- So completely different culture,


00:00:42.960 --> 00:00:45.480
completely different continent.


00:00:45.480 --> 00:00:47.960
- Yeah, are you enjoying your time there?


00:00:47.960 --> 00:00:50.680
- Yeah, so I like it so much.


00:00:50.680 --> 00:00:52.520
Honestly, I like Germany too.


00:00:52.520 --> 00:00:56.240
So Germany's a great country, but I like different.


00:00:56.240 --> 00:00:59.480
- But yeah, but you're probably looking forward


00:00:59.480 --> 00:01:01.320
to not freezing cold winters.


00:01:01.320 --> 00:01:03.800
- I want to try, honestly.


00:01:03.800 --> 00:01:05.640
I don't know if I will like it or not,


00:01:05.640 --> 00:01:08.800
but I want to try just a few years, for example.


00:01:08.800 --> 00:01:16.680
- I moved to San Diego, California a long time ago,


00:01:16.680 --> 00:01:20.360
and I didn't really enjoy the fact


00:01:20.360 --> 00:01:23.280
that there was no winters and there was no fall.


00:01:23.280 --> 00:01:25.560
It was just always nice, always.


00:01:26.360 --> 00:01:28.960
Until one day I realized, you know what?


00:01:28.960 --> 00:01:31.480
We just headed out mountain biking in the mountains,


00:01:31.480 --> 00:01:33.880
and the weather was perfect, and it was February,


00:01:33.880 --> 00:01:36.880
and we didn't even check if it was gonna rain or be nice,


00:01:36.880 --> 00:01:37.800
'cause it's always nice.


00:01:37.800 --> 00:01:38.640
You know what?


00:01:38.640 --> 00:01:40.000
That's a good trade-off.


00:01:40.000 --> 00:01:41.240
You could do a lot of cool stuff


00:01:41.240 --> 00:01:42.200
when you live in a place like that.


00:01:42.200 --> 00:01:45.040
So I'm glad to hear that.


00:01:45.040 --> 00:01:47.200
You'll have to let us know how it goes.


00:01:47.200 --> 00:01:52.200
And yeah, Beanie has been going really well as well, right?


00:01:53.720 --> 00:01:57.400
So when we first spoke, Beanie was just kind of


00:01:57.400 --> 00:02:02.400
a new project, and the thing that caught my eye about it


00:02:02.400 --> 00:02:06.800
was two really cool aspects, asynchronous and Pydantic.


00:02:06.800 --> 00:02:08.120
I'm like, oh, those things together,


00:02:08.120 --> 00:02:10.720
plus MongoDB, sound pretty awesome.


00:02:10.720 --> 00:02:13.400
And so it's been really fun to watch it grow


00:02:13.400 --> 00:02:14.360
over the last two years,


00:02:14.360 --> 00:02:16.520
and it's gaining quite a bit of popularity.


00:02:16.520 --> 00:02:19.640
- Yeah, it's kind of, I don't know.


00:02:19.640 --> 00:02:22.560
It's kind of popular, but not that much,


00:02:22.560 --> 00:02:24.840
as Pydantic itself, as FastAPI.


00:02:24.840 --> 00:02:29.320
But yeah, still popular in context of MongoDB, for sure.


00:02:29.320 --> 00:02:30.360
- Sure, absolutely.


00:02:30.360 --> 00:02:34.360
I think it's a little bit different


00:02:34.360 --> 00:02:36.520
than a web framework, potentially, right?


00:02:36.520 --> 00:02:38.600
Like, it's hard to say, you know,


00:02:38.600 --> 00:02:41.320
is it as popular as FastAPI or Flask


00:02:41.320 --> 00:02:42.400
or something like that, right?


00:02:42.400 --> 00:02:46.560
Because those things, those are the contexts


00:02:46.560 --> 00:02:49.120
in which this is used, but not everyone uses Mongo,


00:02:49.120 --> 00:02:51.720
not everybody cares about AsyncMongo, all that, right?


00:02:51.720 --> 00:02:52.880
There's a lot of filters down.


00:02:52.880 --> 00:02:55.240
But I think you've done a really great job


00:02:55.240 --> 00:02:56.840
shepherding this project.


00:02:56.840 --> 00:03:00.360
I think you've been really responsive to people.


00:03:00.360 --> 00:03:02.760
I know I've seen the issues coming back and forth.


00:03:02.760 --> 00:03:05.080
I've seen lots of releases on it.


00:03:05.080 --> 00:03:08.880
And I guess the biggest news is around,


00:03:08.880 --> 00:03:11.320
yeah, welcome, I think the biggest news is around,


00:03:11.320 --> 00:03:14.320
you know, when Pydantic 2 came out,


00:03:14.320 --> 00:03:17.680
that kind of changed so many things.


00:03:20.320 --> 00:03:25.320
I spoke to Sam McAlvin about his plan there.


00:03:25.320 --> 00:03:29.920
I spoke to Sebastian Ramirez from FastAPI


00:03:29.920 --> 00:03:33.600
about like what he was thinking and where that was going.


00:03:33.600 --> 00:03:36.520
And it sounded like it was, you know,


00:03:36.520 --> 00:03:38.520
not too much work for people using Pydantic,


00:03:38.520 --> 00:03:40.200
but quite a bit of work for people like you


00:03:40.200 --> 00:03:43.400
that was like deep inside of Pydantic, yeah?


00:03:43.400 --> 00:03:48.400
- Yeah, so honestly, I have a Discord channel


00:03:48.400 --> 00:03:50.440
for support Beanie users.


00:03:50.440 --> 00:03:53.560
And there I was talking with other guys,


00:03:53.560 --> 00:03:55.920
like probably, I'm sorry,


00:03:55.920 --> 00:03:58.160
but probably I will not support both versions


00:03:58.160 --> 00:03:59.000
in the same time.


00:03:59.000 --> 00:04:01.880
Maybe I will have two different branches of Beanie


00:04:01.880 --> 00:04:04.440
with v1 and v2 supporting.


00:04:04.440 --> 00:04:08.000
But finally, I, yeah, I made it, you know,


00:04:08.000 --> 00:04:09.800
to in a single branch.


00:04:09.800 --> 00:04:12.840
And this was very challenging, honestly, because-


00:04:12.840 --> 00:04:13.680
- Okay, interesting.


00:04:13.680 --> 00:04:16.080
I didn't realize you were going backwards


00:04:16.080 --> 00:04:18.360
on that maintainability there


00:04:18.360 --> 00:04:21.160
for the people who didn't want to move to Pydantic too.


00:04:21.160 --> 00:04:26.600
- There are, yeah, there are legacy stuff.


00:04:26.600 --> 00:04:31.600
And I must support new features for Pydantic v1 also,


00:04:31.600 --> 00:04:35.240
definitely, because it may be,


00:04:35.240 --> 00:04:37.480
maybe people want to move to Pydantic v2,


00:04:37.480 --> 00:04:40.600
but they could be stuck on other libraries


00:04:40.600 --> 00:04:42.840
that support only v1, for example.


00:04:42.840 --> 00:04:45.840
And it can go for a while, like months.


00:04:45.840 --> 00:04:51.120
And even for me, it took like three weeks


00:04:51.120 --> 00:04:54.720
to make it work, so.


00:04:54.720 --> 00:04:56.480
- Yeah, yeah.


00:04:56.480 --> 00:04:58.360
Well, just so people know,


00:04:58.360 --> 00:05:01.280
talkpython.fm and pythonbytes.fm,


00:05:01.280 --> 00:05:05.240
both of those are based on MongoDB and Beanie.


00:05:05.240 --> 00:05:08.760
And when you came out with the new one,


00:05:08.760 --> 00:05:10.880
I saw when the release for v2 came out,


00:05:10.880 --> 00:05:13.160
I was like, all right, how long until Beanie supports this?


00:05:13.160 --> 00:05:15.760
And I saw that you were right on top of it


00:05:15.760 --> 00:05:18.120
and working on that, that was great.


00:05:18.120 --> 00:05:20.320
And then when I went to upgrade it,


00:05:20.320 --> 00:05:22.600
it was really easy, right?


00:05:22.600 --> 00:05:25.480
Just, I used pip-tools and I used pip compile


00:05:25.480 --> 00:05:28.000
to just get all the latest versions of the dependencies


00:05:28.000 --> 00:05:29.760
and update the requirements.


00:05:29.760 --> 00:05:32.480
So then I installed a new one and it wouldn't run


00:05:32.480 --> 00:05:35.560
because there's, not because of anything that Beanie did,


00:05:35.560 --> 00:05:38.040
but just some changes to Pydantic too.


00:05:38.040 --> 00:05:40.000
For example, if I had a,


00:05:40.000 --> 00:05:45.000
let's say there's a database field that was URL


00:05:45.000 --> 00:05:47.320
and it was an optional string.


00:05:47.320 --> 00:05:49.840
In Pydantic one, you could say,


00:05:49.840 --> 00:05:53.800
URL colon optional bracket str, that's it.


00:05:53.800 --> 00:05:58.440
But there's no default value explicitly set, right?


00:05:58.440 --> 00:05:59.720
- Yeah.


00:05:59.720 --> 00:06:03.520
- Yeah, so in Pydantic two, that's not accepted, right?


00:06:03.520 --> 00:06:06.000
It says, no, no, no, if you want it to be none by default,


00:06:06.000 --> 00:06:08.640
you have to set it to be none explicitly.


00:06:08.640 --> 00:06:10.040
So I had to go through and like find


00:06:10.040 --> 00:06:12.280
all my database documents.


00:06:12.280 --> 00:06:14.440
Basically anytime there's an optional something,


00:06:14.440 --> 00:06:15.320
set it equal to none.


00:06:15.320 --> 00:06:18.320
And then that was it, that was the upgrade process.


00:06:18.320 --> 00:06:20.200
And now the website runs faster.


00:06:20.200 --> 00:06:21.040
Thank you.


00:06:21.040 --> 00:06:23.160
- Welcome.


00:06:23.160 --> 00:06:26.040
Yeah, I implemented a middleware,


00:06:26.040 --> 00:06:30.720
like a few classes and functions that just check


00:06:30.720 --> 00:06:34.160
if you use Pydantic V1 or Pydantic V2.


00:06:34.160 --> 00:06:38.620
And based on this, uses different kind of backends,


00:06:38.620 --> 00:06:41.640
but interface is the same for both.


00:06:41.640 --> 00:06:44.920
So I unified interface inside of Beanie.


00:06:44.920 --> 00:06:49.480
- So before we get too far down this conversation,


00:06:49.480 --> 00:06:54.480
give us two quick bits of background information here.


00:06:54.480 --> 00:06:58.400
First of all, why MongoDB?


00:06:58.400 --> 00:07:03.400
There's a lot of excitement around things like MySQL,


00:07:04.680 --> 00:07:09.620
but especially Postgres, relational databases,


00:07:09.620 --> 00:07:11.760
MongoDB's document database.


00:07:11.760 --> 00:07:14.580
Give us the elevator pitch.


00:07:14.580 --> 00:07:16.660
Why do you like to work with Mongo?


00:07:16.660 --> 00:07:19.620
- Honestly, I like to work with all the databases.


00:07:19.620 --> 00:07:22.500
I have become databases fan and nerd.


00:07:22.500 --> 00:07:26.020
So I like them all.


00:07:26.020 --> 00:07:28.500
But yeah, MongoDB is a document database


00:07:28.500 --> 00:07:32.300
and it means the schema, the data scheme


00:07:32.300 --> 00:07:36.400
is much more flexible than in SQL databases


00:07:36.400 --> 00:07:40.080
because in SQL you use tables, plain tables,


00:07:40.080 --> 00:07:44.000
while in MongoDB you can use, you use extra documents


00:07:44.000 --> 00:07:48.560
which could be nested and the level of this nestedness


00:07:48.560 --> 00:07:50.480
is, could be really, really high.


00:07:50.480 --> 00:07:54.840
There are some trade-offs based on this.


00:07:54.840 --> 00:07:58.280
The relation system for plain tables


00:07:58.280 --> 00:08:02.340
would be implemented much simpler than for documents


00:08:02.340 --> 00:08:07.340
because this flexi structure is hard to,


00:08:07.340 --> 00:08:10.620
it's hard to make nice relations.


00:08:10.620 --> 00:08:16.500
But I'd say it's much more useful for,


00:08:16.500 --> 00:08:24.460
if you use nested data structures in your applications,


00:08:24.460 --> 00:08:28.220
it's much simpler to keep this same data structure


00:08:28.220 --> 00:08:29.480
in your database.


00:08:29.480 --> 00:08:32.520
And this makes all the processes of development


00:08:32.520 --> 00:08:37.520
much more easy and much more simple to understand it,


00:08:37.520 --> 00:08:39.400
I'd say.


00:08:39.400 --> 00:08:40.240
- Yeah.


00:08:40.240 --> 00:08:43.700
Don't have the so-called object relational impedance


00:08:43.700 --> 00:08:46.240
mismatch where it's like, well, you break it all apart


00:08:46.240 --> 00:08:47.800
like this in the database and you reassemble it


00:08:47.800 --> 00:08:49.920
into an object hierarchy over here


00:08:49.920 --> 00:08:51.920
and then you do it again in the other way


00:08:51.920 --> 00:08:53.720
and like all that stuff,


00:08:53.720 --> 00:08:56.520
it's kind of just mirrored the same, right?


00:08:56.520 --> 00:08:57.760
- Yeah, yeah, true.


00:08:57.760 --> 00:09:01.920
And I really like MongoDB to make like small projects.


00:09:01.920 --> 00:09:04.560
I mean, when I just want to play with something


00:09:04.560 --> 00:09:07.040
and I play with data structures a lot


00:09:07.040 --> 00:09:09.800
and using Postgres or MySQL,


00:09:09.800 --> 00:09:11.880
I have to do a lot of migrations


00:09:11.880 --> 00:09:14.680
because when I change the type of fields


00:09:14.680 --> 00:09:17.880
or just number of fields, I have to do this stuff.


00:09:17.880 --> 00:09:19.240
And this kind of annoying


00:09:19.240 --> 00:09:22.200
because I just want to make fun and to play.


00:09:22.200 --> 00:09:23.600
- Yes, exactly.


00:09:23.600 --> 00:09:24.440
Exactly.


00:09:24.440 --> 00:09:28.360
For me, it's easy to make MongoDB fast


00:09:28.360 --> 00:09:33.040
and it's operationally almost trivial, right?


00:09:33.040 --> 00:09:37.200
If I want to add a field to some collection,


00:09:37.200 --> 00:09:39.120
I just add it to the class and start using it


00:09:39.120 --> 00:09:41.480
and it just, it appears, it just shows up


00:09:41.480 --> 00:09:43.520
and you want to add a nested object, you just add it


00:09:43.520 --> 00:09:46.040
and it just, you don't have to keep running migrations


00:09:46.040 --> 00:09:47.960
and having server downtime and all that.


00:09:47.960 --> 00:09:49.360
It's just, it's glorious.


00:09:49.360 --> 00:09:51.760
Okay, so that's the background


00:09:51.760 --> 00:09:54.480
of people maybe haven't done anything with Mongo.


00:09:54.480 --> 00:09:55.720
What about Beanie?


00:09:55.720 --> 00:09:58.160
Why, what is Beanie really quick for people?


00:09:58.160 --> 00:09:59.000
We talked about a bit,


00:09:59.000 --> 00:10:01.080
but give us the quick rundown on Beanie


00:10:01.080 --> 00:10:02.720
and why you built it.


00:10:02.720 --> 00:10:03.680
Like there were other things


00:10:03.680 --> 00:10:05.680
that talked to MongoDB and Python before.


00:10:05.680 --> 00:10:07.640
- Yeah, yeah.


00:10:07.640 --> 00:10:09.680
So there are a lot of tools.


00:10:09.680 --> 00:10:12.920
There is Mongo engine, which is nice


00:10:12.920 --> 00:10:13.760
and which is--


00:10:13.760 --> 00:10:14.680
- Yeah, I like Mongo engine too.


00:10:14.680 --> 00:10:15.960
- Yeah.


00:10:15.960 --> 00:10:20.960
Yeah, but one day I was playing again with new technologies


00:10:21.080 --> 00:10:24.760
and FastAPI was super new that time.


00:10:24.760 --> 00:10:29.320
It was like, you know, it wasn't that famous at time,


00:10:29.320 --> 00:10:34.040
like three years ago and already was super nice.


00:10:34.040 --> 00:10:36.200
And I wanted to play with it


00:10:36.200 --> 00:10:39.680
before I can use it in my production projects.


00:10:39.680 --> 00:10:43.280
And I found that there is no nice,


00:10:43.280 --> 00:10:46.480
let's say connector to MongoDB from FastAPI


00:10:46.480 --> 00:10:48.680
because there is nothing that could support


00:10:48.680 --> 00:10:53.680
and pedantic and asynchronous MongoDB driver motor.


00:10:53.680 --> 00:10:56.760
And I decided like, but why?


00:10:56.760 --> 00:10:59.880
I think I can implement it myself, why not?


00:10:59.880 --> 00:11:03.880
And I made a very small, tiny ODM.


00:11:03.880 --> 00:11:08.160
And then I even thought it would be tiny all the time.


00:11:08.160 --> 00:11:12.920
Like, you know, it could support only models


00:11:12.920 --> 00:11:13.760
of the documents.


00:11:13.760 --> 00:11:18.240
It could insert them and all the operations


00:11:19.240 --> 00:11:24.240
of MongoDB, it wasn't hidden inside of Beanie.


00:11:24.240 --> 00:11:29.720
You had to use MQL, Mongo query language there, like plain.


00:11:29.720 --> 00:11:35.160
And so I'm just to release this.


00:11:35.160 --> 00:11:40.160
And somehow in one month it got not that popular


00:11:40.160 --> 00:11:44.720
but people just came to me and like, I like what you did.


00:11:44.720 --> 00:11:46.840
Could you please add this feature and that feature?


00:11:46.840 --> 00:11:51.240
And this part works wrongly, so please fix this.


00:11:51.240 --> 00:11:53.640
And I was like, whoa, whoa, I didn't know


00:11:53.640 --> 00:11:56.320
but I made an open source product.


00:11:56.320 --> 00:11:57.720
- Yeah, that's cool.


00:11:57.720 --> 00:11:59.880
Some weird podcaster guy goes, this is great


00:11:59.880 --> 00:12:02.280
except for where are the indexes?


00:12:02.280 --> 00:12:05.160
- Yeah, this was like first, maybe second week


00:12:05.160 --> 00:12:08.520
after I published it and yeah, you came to my,


00:12:08.520 --> 00:12:10.720
to GitHub issues, could you add indexes?


00:12:10.720 --> 00:12:12.760
And I was like, I forgot about indexes.


00:12:12.760 --> 00:12:14.960
Yeah, I have to add them.


00:12:16.000 --> 00:12:18.320
- Yeah, indexes are like database magic.


00:12:18.320 --> 00:12:20.160
They're just awesome.


00:12:20.160 --> 00:12:22.360
- Yeah, yeah, true.


00:12:22.360 --> 00:12:24.720
So yeah, and this was kind of playground project


00:12:24.720 --> 00:12:29.720
and now this is nice ODM for MongoDB.


00:12:29.720 --> 00:12:32.040
- Yeah, I think it's good.


00:12:32.040 --> 00:12:33.880
It's been really, really reliable


00:12:33.880 --> 00:12:35.080
for all the work that we've been doing.


00:12:35.080 --> 00:12:37.800
So good work on that.


00:12:37.800 --> 00:12:44.320
Let's see, I guess there's two angles to go here.


00:12:44.840 --> 00:12:46.640
Number one, if we go over the releases,


00:12:46.640 --> 00:12:51.640
the big release is this 1.21.0


00:12:51.640 --> 00:12:55.280
which says Pydantic V2 support.


00:12:55.280 --> 00:12:57.080
So I wanna spend a lot of time talking to you


00:12:57.080 --> 00:12:58.680
about like what was your experience going


00:12:58.680 --> 00:13:00.120
from Pydantic one to two?


00:13:00.120 --> 00:13:03.520
Because as you said, there's the really famous ones


00:13:03.520 --> 00:13:07.760
like FastAPI and others, but there's many, many projects


00:13:07.760 --> 00:13:10.400
out there that use Pydantic.


00:13:10.400 --> 00:13:12.720
I wonder if we could get it to show it.


00:13:12.720 --> 00:13:14.560
So, you know, GitHub has that feature


00:13:14.560 --> 00:13:19.560
it shows used by 229,000 projects.


00:13:19.560 --> 00:13:24.360
228,826 projects.


00:13:24.360 --> 00:13:27.080
- Nearly all the projects use Pydantic now, right?


00:13:27.080 --> 00:13:30.520
- Exactly, just on GitHub use Pydantic.


00:13:30.520 --> 00:13:35.520
So, you know, many of them still haven't necessarily done


00:13:35.520 --> 00:13:36.960
this work to move to two.


00:13:36.960 --> 00:13:40.120
And so I wanna make that the focus of our conversation.


00:13:40.120 --> 00:13:43.840
However, since we had a nice episode on BD before,


00:13:43.840 --> 00:13:45.360
before we get into that aspect,


00:13:45.360 --> 00:13:48.360
let's just do a catch up on like what's happened


00:13:48.360 --> 00:13:49.400
with BD in the last two years.


00:13:49.400 --> 00:13:52.280
What are some of the cool new features


00:13:52.280 --> 00:13:54.520
and things that you wanna highlight for folks?


00:13:54.520 --> 00:14:00.480
- Yeah, so I added a lot of features, honestly,


00:14:00.480 --> 00:14:03.880
but there were a few really big.


00:14:03.880 --> 00:14:05.720
I really like one.


00:14:05.720 --> 00:14:09.360
I didn't know that it could be needed for anybody,


00:14:09.360 --> 00:14:13.400
but I was continuously asked about this ad


00:14:13.400 --> 00:14:17.440
and this, and I didn't want to it, but finally I added.


00:14:17.440 --> 00:14:20.080
And now I love this so much.


00:14:20.080 --> 00:14:22.920
This is called inheritance.


00:14:22.920 --> 00:14:27.200
You can inherit documents.


00:14:27.200 --> 00:14:31.440
So you can make a big inherited structure like car,


00:14:31.440 --> 00:14:37.040
then yeah, vehicle, then from vehicle,


00:14:37.040 --> 00:14:39.440
you can inherit bicycle, buy car,


00:14:39.440 --> 00:14:42.280
and from car inherit something else.


00:14:42.280 --> 00:14:47.040
And the thing is, everything will be stored


00:14:47.040 --> 00:14:50.000
in the same collection, in the same MongoDB collection.


00:14:50.000 --> 00:14:55.000
And if you want to make statistics over all the types,


00:14:55.000 --> 00:14:58.240
you can do it.


00:14:58.240 --> 00:15:03.240
And when you need to operate only with a type or subtype,


00:15:03.240 --> 00:15:04.480
you can do it as well.


00:15:04.480 --> 00:15:09.200
And you can choose what you want to do.


00:15:09.200 --> 00:15:11.800
And I know this feature is used in productions.


00:15:11.800 --> 00:15:14.960
Now in the many projects, and this is nice,


00:15:14.960 --> 00:15:15.800
this kind of-


00:15:15.800 --> 00:15:16.920
- Yeah, this is really cool.


00:15:16.920 --> 00:15:21.200
So when I first heard about it, my first impression was,


00:15:21.200 --> 00:15:25.200
okay, so instead of deriving from beanie.document,


00:15:25.200 --> 00:15:27.840
you create some class that has some common features,


00:15:27.840 --> 00:15:30.880
maybe properties and validation and stuff,


00:15:30.880 --> 00:15:33.640
and then other documents can derive from it.


00:15:33.640 --> 00:15:36.800
So like you said, bicycle versus car.


00:15:36.800 --> 00:15:39.560
But in my mind, those would still go


00:15:39.560 --> 00:15:41.360
into different collections, right?


00:15:41.360 --> 00:15:42.520
They would go in different collections


00:15:42.520 --> 00:15:44.520
and that would just be a simpler way to have the code


00:15:44.520 --> 00:15:47.800
that would have a significant bit of reuse.


00:15:47.800 --> 00:15:50.160
But the fact that they all go into the same collection


00:15:50.160 --> 00:15:54.000
and the documents are kind of supersets of each other,


00:15:54.000 --> 00:15:56.480
that's, I think that's pretty interesting.


00:15:56.480 --> 00:15:57.320
- Yeah.


00:15:57.320 --> 00:15:58.480
- I hadn't really thought about how to use that.


00:15:58.480 --> 00:16:01.480
- You can do even two different, like you can,


00:16:01.480 --> 00:16:05.600
if you want to count all the vehicles, you can do it


00:16:05.600 --> 00:16:09.680
without making requests to each of the collections,


00:16:09.680 --> 00:16:11.640
because everything is in the same collection.


00:16:11.640 --> 00:16:15.280
And you can do this with different fields there as well.


00:16:15.280 --> 00:16:17.520
And you can make aggregations over all of them


00:16:17.520 --> 00:16:20.240
and even over cars separately.


00:16:20.240 --> 00:16:21.840
So this is nice.


00:16:21.840 --> 00:16:23.680
- Oh, interesting.


00:16:23.680 --> 00:16:25.240
Does the record have something,


00:16:25.240 --> 00:16:27.960
some kind of indicator of what-


00:16:27.960 --> 00:16:29.360
- Yeah, inside there is-


00:16:29.360 --> 00:16:30.200
- What class it is?


00:16:30.200 --> 00:16:33.000
It's like, I'm a car class, I'm a bike class.


00:16:33.000 --> 00:16:35.360
- Yeah, yeah, you can specify.


00:16:35.360 --> 00:16:39.640
Originally it is called class name or something like this,


00:16:39.640 --> 00:16:42.040
with underscore, but you can specify


00:16:42.040 --> 00:16:44.400
which fields would work for this.


00:16:44.400 --> 00:16:46.760
So we can specify the name of this field.


00:16:46.760 --> 00:16:49.920
And in this field, I store,


00:16:49.920 --> 00:16:52.400
it stores not only the name of the class,


00:16:52.400 --> 00:16:53.800
but the structure itself.


00:16:53.800 --> 00:16:58.720
Like for bus, it will keep vehicle, car, bus.


00:16:58.720 --> 00:17:03.360
Yeah, so in this field.


00:17:03.360 --> 00:17:04.200
- Okay.


00:17:04.200 --> 00:17:05.880
- And that's why it will be able to,


00:17:05.880 --> 00:17:07.840
even on the database level,


00:17:07.840 --> 00:17:12.120
it will understand the hierarchy of this object.


00:17:12.120 --> 00:17:15.480
- Right, and so if you wanna do data science-y things,


00:17:15.480 --> 00:17:17.240
you could use the aggregation framework


00:17:17.240 --> 00:17:22.240
to run a bunch of those types of queries on it, right?


00:17:22.240 --> 00:17:23.680
- Yeah, yeah.


00:17:23.680 --> 00:17:26.240
And it's better to do all this stuff on the database layer


00:17:26.240 --> 00:17:29.880
because Python is not that fast with iterations.


00:17:29.880 --> 00:17:33.280
While MongoDB is super fast.


00:17:33.280 --> 00:17:35.440
- Yeah, and plus, you don't need necessarily


00:17:35.440 --> 00:17:37.400
to pull all the data back,


00:17:37.400 --> 00:17:40.720
just to read some field or whatever, right?


00:17:40.720 --> 00:17:42.640
So yeah, that's really cool.


00:17:42.640 --> 00:17:45.200
All right, this is not what I expected


00:17:45.200 --> 00:17:47.840
when I first heard about it, but this is quite cool.


00:17:47.840 --> 00:17:53.880
- Yeah, and first time I heard this, about this feature,


00:17:53.880 --> 00:17:58.880
I was like, "Nobody wants this, why do you try it?"


00:17:58.880 --> 00:18:03.880
But then I found how flexible this is getting to be.


00:18:03.880 --> 00:18:06.000
And so yeah, this is nice.


00:18:06.880 --> 00:18:11.360
- Yeah, I guess it, the reason I guess it's a surprise


00:18:11.360 --> 00:18:13.840
to me is it leverages an aspect of MongoDB


00:18:13.840 --> 00:18:15.480
that's in document databases in general


00:18:15.480 --> 00:18:18.160
that are interesting, but that I don't find myself


00:18:18.160 --> 00:18:22.480
using very much is in that you don't have to have,


00:18:22.480 --> 00:18:25.400
there's not a real structured schema.


00:18:25.400 --> 00:18:28.840
And a lot of people say that and kind of get a sense for it.


00:18:28.840 --> 00:18:29.760
For me, that's always meant like,


00:18:29.760 --> 00:18:31.720
"Well, the database doesn't control the schema,


00:18:31.720 --> 00:18:34.320
"but my code does, and that's probably gonna be the same."


00:18:34.320 --> 00:18:38.640
Right, so there's kind of an implicit static schema


00:18:38.640 --> 00:18:41.320
at any given time that matches the code,


00:18:41.320 --> 00:18:45.760
but you can do things like put different records


00:18:45.760 --> 00:18:47.400
into the same collection.


00:18:47.400 --> 00:18:48.640
I mean, you wouldn't do it just like,


00:18:48.640 --> 00:18:51.160
"Well, here's a user and here's a blog post


00:18:51.160 --> 00:18:52.400
"and just put them in the same collection."


00:18:52.400 --> 00:18:53.480
That would be insane.


00:18:53.480 --> 00:18:56.360
But there's, if you have this commonality


00:18:56.360 --> 00:18:58.640
of this base class, I can see why you might do this.


00:18:58.640 --> 00:18:59.480
It's interesting.


00:18:59.480 --> 00:19:01.880
- Yeah, yeah, and in this context,


00:19:01.880 --> 00:19:05.320
blog post or video post could be different by structure,


00:19:05.320 --> 00:19:07.760
but could be stored in a single collection then.


00:19:07.760 --> 00:19:10.840
- Mm-hmm, yeah, yeah, cool.


00:19:10.840 --> 00:19:12.680
Okay, one other thing on the page here


00:19:12.680 --> 00:19:14.680
that we could maybe talk about is link.


00:19:14.680 --> 00:19:17.400
I wanna tell people about what link is.


00:19:17.400 --> 00:19:22.400
- Yeah, MongoDB is non-relational database,


00:19:22.400 --> 00:19:25.840
but you can force it to work with relations.


00:19:25.840 --> 00:19:30.840
And there is a data type in MongoDB called db_ref,


00:19:31.840 --> 00:19:36.840
db_reference, which is used to work


00:19:36.840 --> 00:19:42.000
with this link type in Beanie.


00:19:42.000 --> 00:19:45.640
So in Beanie, with this generic type link,


00:19:45.640 --> 00:19:49.160
you can put inside of the link any document type,


00:19:49.160 --> 00:19:55.640
and it can make relations based on this link.


00:19:55.640 --> 00:19:58.560
So you can fetch linked documents


00:19:58.560 --> 00:20:01.640
from another collections using just standard


00:20:01.640 --> 00:20:03.720
find operations in Beanie.


00:20:03.720 --> 00:20:09.800
Yeah, and there is kind of magic under the hood.


00:20:09.800 --> 00:20:13.320
I use, instead of using find operations,


00:20:13.320 --> 00:20:17.040
MongoDB find operations, I use aggregation framework


00:20:17.040 --> 00:20:21.200
of MongoDB, but it is hidden under the hood of Beanie.


00:20:21.200 --> 00:20:25.240
And so, yeah, and you can use relations then.


00:20:25.240 --> 00:20:28.360
And the nice thing about new features,


00:20:28.360 --> 00:20:30.440
because link already was implemented,


00:20:30.440 --> 00:20:34.720
I think two years ago, but again,


00:20:34.720 --> 00:20:39.240
was I don't come up with my own features, I think.


00:20:39.240 --> 00:20:41.360
Every feature, somebody asked me for.


00:20:41.360 --> 00:20:45.800
And I was asked for another feature


00:20:45.800 --> 00:20:50.800
to make backtracking, back references for these links.


00:20:50.800 --> 00:20:53.800
Like if you have a link from one document to another,


00:20:53.800 --> 00:20:56.840
another document should be able to have,


00:20:56.840 --> 00:21:01.040
to fetch this relation backwards.


00:21:01.040 --> 00:21:01.880
And that's how-


00:21:01.880 --> 00:21:03.920
- I see, so in this case, you've got an owner


00:21:03.920 --> 00:21:07.360
which has a list of vehicles, but given a vehicle,


00:21:07.360 --> 00:21:10.080
you would like to ask who is its owner, right?


00:21:10.080 --> 00:21:11.360
- Yeah, true.


00:21:11.360 --> 00:21:12.200
- Okay.


00:21:12.200 --> 00:21:16.360
- And I implemented this, I named it backlinks,


00:21:16.360 --> 00:21:22.480
backlink, and it can just fetch it in reverse direction.


00:21:22.480 --> 00:21:26.480
- That's cool.


00:21:26.480 --> 00:21:28.520
- And the nice thing about this is


00:21:28.520 --> 00:21:32.120
it only uses the magic of aggregations


00:21:32.120 --> 00:21:36.200
and it doesn't store anything for backlinks fields


00:21:36.200 --> 00:21:39.640
in the collection itself.


00:21:39.640 --> 00:21:41.760
Like in the MongoDB document,


00:21:41.760 --> 00:21:44.560
you never will find this field for backlink


00:21:44.560 --> 00:21:47.160
because everything you need is on the link.


00:21:47.160 --> 00:21:50.480
And this is nice.


00:21:50.480 --> 00:21:51.880
- Yeah, that is really cool.


00:21:54.240 --> 00:21:56.560
In the queries, in the find statement,


00:21:56.560 --> 00:21:59.160
you add fetch_link equals true,


00:21:59.160 --> 00:22:00.520
and that's kind of like a join.


00:22:00.520 --> 00:22:01.680
Is that how that works?


00:22:01.680 --> 00:22:03.760
- Yeah, yeah.


00:22:03.760 --> 00:22:04.600
When you-


00:22:04.600 --> 00:22:07.600
- Like eager versus lazy loading type of thing?


00:22:07.600 --> 00:22:11.320
- Yeah, when you find without this option,


00:22:11.320 --> 00:22:12.840
by default it is false.


00:22:12.840 --> 00:22:15.320
You will see in the link field,


00:22:15.320 --> 00:22:18.600
you will see only link itself.


00:22:18.600 --> 00:22:22.600
It will be link with ID inside of the object.


00:22:22.600 --> 00:22:26.400
But if you put fetch, and you can fetch it manually,


00:22:26.400 --> 00:22:30.320
like with method.fetch, it will work.


00:22:30.320 --> 00:22:34.400
But when you put fetch_link true,


00:22:34.400 --> 00:22:36.200
it will fetch it everything automatically


00:22:36.200 --> 00:22:39.200
on the database layer.


00:22:39.200 --> 00:22:44.000
And yeah, it will return all the link documents.


00:22:44.000 --> 00:22:46.880
- Oh yeah, that's really cool.


00:22:46.880 --> 00:22:50.680
Other one?


00:22:50.680 --> 00:22:51.760
Lazy parsing.


00:22:51.760 --> 00:22:53.160
I mean, we all wanna be lazy,


00:22:53.160 --> 00:22:54.120
but what are we doing here?


00:22:54.120 --> 00:22:55.800
What is this one?


00:22:55.800 --> 00:22:57.680
- Yeah, so this is,


00:22:57.680 --> 00:23:00.280
in some cases,


00:23:00.280 --> 00:23:04.480
Beanie could be used for really high load projects.


00:23:04.480 --> 00:23:07.120
And sometimes you need to fetch


00:23:07.120 --> 00:23:11.280
like thousands of documents in a moment.


00:23:11.280 --> 00:23:15.240
And the nature of Pydentic is synchronous,


00:23:15.240 --> 00:23:16.160
not asynchronous,


00:23:16.160 --> 00:23:19.960
because it uses CPU bound operations there.


00:23:19.960 --> 00:23:22.800
And when you fetch hundreds of documents,


00:23:22.800 --> 00:23:24.360
or even thousands of documents,


00:23:24.360 --> 00:23:26.400
you completely block your system.


00:23:26.400 --> 00:23:30.760
Because a lot of loops to parse data,


00:23:30.760 --> 00:23:32.800
to validate data, and et cetera.


00:23:32.800 --> 00:23:35.720
And if you use it in asynchronous framework,


00:23:35.720 --> 00:23:39.400
this is not behavior that you like to have.


00:23:39.400 --> 00:23:42.480
And to fix this problem-


00:23:42.480 --> 00:23:44.240
- Maybe even in asynchronous framework,


00:23:44.240 --> 00:23:47.080
it might be the behavior you don't wanna have as well.


00:23:47.080 --> 00:23:47.920
- Yeah.


00:23:47.920 --> 00:23:48.760
- Right, even then, yeah, yeah.


00:23:48.760 --> 00:23:49.920
- This is true.


00:23:49.920 --> 00:23:50.760
- But even in-


00:23:50.760 --> 00:23:52.680
- Because for example, maybe-


00:23:52.680 --> 00:23:53.520
Yeah, exactly.


00:23:53.520 --> 00:23:55.280
But it's totally reasonable to think,


00:23:55.280 --> 00:23:58.280
"Well, I'm gonna do a query against this document,


00:23:58.280 --> 00:24:00.400
"and it's got some nested stuff."


00:24:00.400 --> 00:24:02.600
Maybe it's a big sort of complex one,


00:24:02.600 --> 00:24:06.720
but you really just want three fields in this case.


00:24:06.720 --> 00:24:09.280
Now, you can use projections, right?


00:24:09.280 --> 00:24:12.000
Like that is the purpose of projections,


00:24:12.000 --> 00:24:13.880
but it limits the flexibility,


00:24:13.880 --> 00:24:17.280
'cause you only have those fields that were projected.


00:24:17.280 --> 00:24:19.840
And in different situations,


00:24:19.840 --> 00:24:21.280
maybe you don't really know


00:24:21.280 --> 00:24:24.080
what parts you're going to use, right?


00:24:24.080 --> 00:24:25.720
And so this is a more-


00:24:25.720 --> 00:24:30.280
Yeah, so this kind of lets the consumer of the query


00:24:30.280 --> 00:24:32.320
use only what they need, right?


00:24:32.320 --> 00:24:33.240
- Yeah, yeah.


00:24:33.240 --> 00:24:36.440
And so when you use this lazy parsing,


00:24:36.440 --> 00:24:41.000
Pydentic doesn't parse anything on the initial call.


00:24:41.000 --> 00:24:42.720
Like you receive everything


00:24:42.720 --> 00:24:46.160
and store everything in a raw format in dictionaries,


00:24:46.160 --> 00:24:47.920
in Python dictionaries there.


00:24:47.920 --> 00:24:52.920
And when you call any field of the document,


00:24:52.920 --> 00:24:57.280
it just parses using Pydentic tools


00:24:57.280 --> 00:25:01.560
to parse as Pydentic do it internally.


00:25:01.560 --> 00:25:02.400
- Okay.


00:25:02.400 --> 00:25:04.080
- Yeah.


00:25:04.080 --> 00:25:07.600
- So is this lazy parse primarily implemented by Pydentic,


00:25:07.600 --> 00:25:10.240
or is this something you've done on top of Pydentic?


00:25:10.240 --> 00:25:12.360
- I implemented my own library for this.


00:25:12.360 --> 00:25:14.480
Like it's on top of Pydentic for sure,


00:25:15.640 --> 00:25:19.840
but it uses, in Pydentic there are tools


00:25:19.840 --> 00:25:21.760
and different in V1 and V2,


00:25:21.760 --> 00:25:23.000
the name of this tool is different,


00:25:23.000 --> 00:25:28.000
but you can parse something into type,


00:25:28.000 --> 00:25:31.040
not into base model, but just into type.


00:25:31.040 --> 00:25:34.880
You can provide a type and the value to be parsed


00:25:34.880 --> 00:25:37.400
into this type and you can parse it.


00:25:37.400 --> 00:25:40.640
So I use this, and additionally I had to handle


00:25:40.640 --> 00:25:44.280
with all the validator stacks


00:25:44.280 --> 00:25:49.280
because this is a very important part of Pydentic


00:25:49.280 --> 00:25:52.640
and you have to be able to validate things.


00:25:52.640 --> 00:25:56.720
And with lazy parsing, if it sees that this is,


00:25:56.720 --> 00:25:58.760
there are root validators,


00:25:58.760 --> 00:26:01.920
then it will validate it against any field,


00:26:01.920 --> 00:26:04.920
or if there is a field specific validator,


00:26:04.920 --> 00:26:07.000
it will validate it against the field


00:26:07.000 --> 00:26:08.400
if this field was called.


00:26:08.400 --> 00:26:13.400
So yeah, I had to do some magic with Pydentic there.


00:26:13.400 --> 00:26:17.360
But it, especially with Pydentic V1,


00:26:17.360 --> 00:26:21.600
which was slower than V2, significantly slower,


00:26:21.600 --> 00:26:26.600
it was very helpful for people who have to fetch


00:26:26.600 --> 00:26:29.440
really big amounts of documents


00:26:29.440 --> 00:26:33.880
and to not block their pipeline in this step.


00:26:33.880 --> 00:26:36.560
So this is a nice feature also.


00:26:36.560 --> 00:26:39.600
- Yeah, I think this is a really nice feature.


00:26:39.600 --> 00:26:42.800
What is the, what's the harm?


00:26:42.800 --> 00:26:45.440
And does it make certain things slower


00:26:45.440 --> 00:26:48.480
if you're going to use every field or, you know,


00:26:48.480 --> 00:26:52.120
why not just turn this on all the time, right?


00:26:52.120 --> 00:26:52.960
That's my question.


00:26:52.960 --> 00:26:55.240
- Yeah, if you, yes, for sure.


00:26:55.240 --> 00:26:57.800
There are trade-offs.


00:26:57.800 --> 00:27:01.520
If you will use this all the time,


00:27:01.520 --> 00:27:06.320
it would be like around twice slower


00:27:06.320 --> 00:27:10.440
than just Pydentic validation


00:27:10.440 --> 00:27:12.480
if you will use all the fields.


00:27:12.840 --> 00:27:16.080
If you will use just a few fields, it would be faster.


00:27:16.080 --> 00:27:18.360
But I didn't turn it on by default


00:27:18.360 --> 00:27:19.560
because in general case,


00:27:19.560 --> 00:27:24.120
when people just want to fetch 10, maybe 20 documents


00:27:24.120 --> 00:27:28.000
and use all the fields of them, it would be slower.


00:27:28.000 --> 00:27:29.880
- Yeah, that makes sense.


00:27:29.880 --> 00:27:31.080
That's kind of what I expected.


00:27:31.080 --> 00:27:34.920
But if you've got a really complicated document


00:27:34.920 --> 00:27:37.320
and you only use a few fields here and there,


00:27:37.320 --> 00:27:38.520
then it seems like a real win,


00:27:38.520 --> 00:27:41.640
but if you're gonna use everything anyway.


00:27:41.640 --> 00:27:43.600
- And especially for Pydentic V2,


00:27:43.600 --> 00:27:47.840
when all the validation happens on the Rust layer,


00:27:47.840 --> 00:27:50.080
but here I cannot do this because I cannot, you know,


00:27:50.080 --> 00:27:53.600
I cannot put the logic into the Rust layer


00:27:53.600 --> 00:27:55.600
because there is no Rust layer for Bini.


00:27:55.600 --> 00:27:59.000
And if you will fetch all the fields of the documents


00:27:59.000 --> 00:28:00.280
using this lazy parsing,


00:28:00.280 --> 00:28:02.200
everything will happen on the Python layer


00:28:02.200 --> 00:28:03.760
instead of the Rust layer.


00:28:03.760 --> 00:28:06.840
And it will be as slow as V1.


00:28:06.840 --> 00:28:10.040
And so we will not see the benefits of V2.


00:28:10.040 --> 00:28:10.880
- Okay, yeah.


00:28:10.880 --> 00:28:14.640
I guess it's interesting even in the V1 version of Pydentic,


00:28:14.640 --> 00:28:18.880
but now with Pydentic 2 being roughly 22 times faster,


00:28:18.880 --> 00:28:21.440
that all of a sudden you wanna let Pydentic


00:28:21.440 --> 00:28:22.680
do its thing if it can.


00:28:22.680 --> 00:28:25.040
- Yeah, true.


00:28:25.040 --> 00:28:25.880
- Yeah.


00:28:25.880 --> 00:28:31.040
Speaking of Pydentic getting some speed up from Rust,


00:28:31.040 --> 00:28:37.800
is any part of Bini some other runtime compilation story


00:28:37.800 --> 00:28:40.800
than pure Python?


00:28:40.800 --> 00:28:45.800
Is there like a Cython thing or a Numba or any of those?


00:28:45.800 --> 00:28:50.760
- No, the thing about the speed of Bini is,


00:28:50.760 --> 00:28:55.760
Bini is not about, so as Pydentic is very CPU bound,


00:28:55.760 --> 00:29:01.400
all the stuff happens on the CPU layer.


00:29:01.400 --> 00:29:05.800
While Bini uses mostly input/output operations


00:29:05.800 --> 00:29:09.080
because it interacts with database.


00:29:09.080 --> 00:29:12.000
And for this, just default, I think,


00:29:12.000 --> 00:29:17.000
await pattern of Python uses works the best.


00:29:17.000 --> 00:29:22.000
And all the time, if there are any delays,


00:29:22.000 --> 00:29:25.640
it's most likely about this interaction process


00:29:25.640 --> 00:29:30.160
between application and MongoDB.


00:29:30.160 --> 00:29:33.680
It could be network, it could be just delay


00:29:33.680 --> 00:29:36.400
from the query and et cetera, but not Bini


00:29:36.400 --> 00:29:38.960
because Bini doesn't compute anything.


00:29:38.960 --> 00:29:41.280
- Yeah, Bini doesn't do very much, I guess, right?


00:29:41.280 --> 00:29:46.280
It coordinates motor, the asynchronous engine from MongoDB


00:29:46.280 --> 00:29:50.320
and it coordinates Pydentic.


00:29:50.320 --> 00:29:54.080
It kind of clicks those together using async and await


00:29:54.080 --> 00:29:57.680
and a nice query API that you put together.


00:29:57.680 --> 00:30:02.200
And so, right, it's more about letting motor be fast


00:30:02.200 --> 00:30:03.480
and letting Pydentic be fast


00:30:03.480 --> 00:30:05.960
and getting out of the way, I suppose.


00:30:05.960 --> 00:30:07.200
- Yeah, this is true, this is true.


00:30:07.200 --> 00:30:12.200
So yeah, Bini is mostly about making some magic


00:30:12.200 --> 00:30:16.920
and convert Python syntax into MongoDB syntax.


00:30:16.920 --> 00:30:21.320
- Using, yeah, thank you for that.


00:30:21.320 --> 00:30:22.920
That's really nice.


00:30:22.920 --> 00:30:25.360
It's super nice the way that the syntax works, right?


00:30:25.360 --> 00:30:29.320
The fact that you're able to use native operators,


00:30:29.320 --> 00:30:33.080
for example, right, to do the queries, I really like that.


00:30:34.600 --> 00:30:38.360
- Yeah, I don't like when somebody uses this


00:30:38.360 --> 00:30:41.320
in production applications, I mean, when,


00:30:41.320 --> 00:30:44.400
because it's hard to find problems.


00:30:44.400 --> 00:30:46.360
But when we are talking about libraries,


00:30:46.360 --> 00:30:50.600
this is really nice when it supports Python syntax.


00:30:50.600 --> 00:30:51.880
So that's why I decided to include it.


00:30:51.880 --> 00:30:53.080
- People shouldn't get too crazy


00:30:53.080 --> 00:30:55.080
with overloading their own operators.


00:30:55.080 --> 00:30:58.360
But as an API, it's really good.


00:30:58.360 --> 00:31:00.880
So for example, in this case, you have a sample document


00:31:00.880 --> 00:31:01.760
and it has a number.


00:31:01.760 --> 00:31:04.120
And so the query is sample.find


00:31:04.120 --> 00:31:08.800
and then the argument is sample.number equal equal 10, right?


00:31:08.800 --> 00:31:11.760
Which is exactly the way you would do it in an if statement.


00:31:11.760 --> 00:31:14.080
You'll contrast that with other languages


00:31:14.080 --> 00:31:17.680
or other frameworks such as Mongo engine,


00:31:17.680 --> 00:31:20.240
which I used previously and is nice.


00:31:20.240 --> 00:31:23.280
But you would say, you would say sample.find


00:31:23.280 --> 00:31:27.360
and then just number_eq equals 10, right?


00:31:27.360 --> 00:31:29.440
You're like, I know what that means,


00:31:29.440 --> 00:31:32.360
but it's not speaking to me the same way


00:31:32.360 --> 00:31:35.040
as if I was just doing a raw database query


00:31:35.040 --> 00:31:37.520
or writing pure Python, right?


00:31:37.520 --> 00:31:39.720
- Yeah, it sounds like you have to learn


00:31:39.720 --> 00:31:41.240
another one of English, right?


00:31:41.240 --> 00:31:43.880
- Exactly, you've got to,


00:31:43.880 --> 00:31:45.280
like if you want to do a nested thing,


00:31:45.280 --> 00:31:47.200
it's a double underscore,


00:31:47.200 --> 00:31:50.320
you know, it'd be like number double underscore item


00:31:50.320 --> 00:31:52.160
underscore eq equals 10.


00:31:52.160 --> 00:31:53.840
You're like, oh my goodness.


00:31:53.840 --> 00:31:55.400
So yeah, that's kind of tricky.


00:31:55.400 --> 00:31:58.440
- Yeah, true, true, definitely true.


00:31:58.440 --> 00:31:59.360
- Cool.


00:31:59.360 --> 00:32:02.840
Okay, well, let's talk about this upgrading story


00:32:02.840 --> 00:32:06.560
for the 229,000 other folks out there


00:32:06.560 --> 00:32:07.920
who maybe haven't done this.


00:32:07.920 --> 00:32:10.840
So a while ago, back in 2022,


00:32:10.840 --> 00:32:13.880
almost exactly to the day a year ago,


00:32:13.880 --> 00:32:16.120
I had Samuel Colvin on to talk about


00:32:16.120 --> 00:32:18.360
the plan to move to Pydantic V2,


00:32:18.360 --> 00:32:20.600
why he did it, it was really interesting.


00:32:20.600 --> 00:32:22.600
So that's worth listening to if people want to learn more,


00:32:22.600 --> 00:32:24.800
as well as I had Sebastian Ramirez


00:32:24.800 --> 00:32:29.800
and Samuel Colvin on to talk about it live at PyCon


00:32:29.800 --> 00:32:30.760
and that was fun too.


00:32:30.760 --> 00:32:32.680
So if people want background on


00:32:32.680 --> 00:32:34.640
like what is the story of Pydantic 2,


00:32:34.640 --> 00:32:36.600
then check that out.


00:32:36.600 --> 00:32:40.680
But the big announcement was on June 30th,


00:32:40.680 --> 00:32:41.520
a couple months ago,


00:32:41.520 --> 00:32:44.080
I guess that's a month and a half ago,


00:32:44.080 --> 00:32:48.680
Pydantic V2 is here after just one year of hard work.


00:32:48.680 --> 00:32:52.840
So that was a huge project for the Pydantic folks,


00:32:52.840 --> 00:32:55.200
which they've done a great job on it.


00:32:55.200 --> 00:32:58.760
And I guess the big takeaway really is


00:32:58.760 --> 00:33:02.280
that Pydantic V2 is quite a bit faster.


00:33:02.280 --> 00:33:04.620
Maybe you could speak to that.


00:33:04.620 --> 00:33:09.640
And it's mostly, but not exactly the same


00:33:09.640 --> 00:33:11.000
because as you already pointed out,


00:33:11.000 --> 00:33:14.000
the core of it is rewritten in Rust for performance reasons.


00:33:14.000 --> 00:33:15.880
- Yeah, yeah.


00:33:15.880 --> 00:33:18.440
So I've made a load test.


00:33:19.880 --> 00:33:24.720
It is much faster when you talk about validation


00:33:24.720 --> 00:33:26.920
of the models itself,


00:33:26.920 --> 00:33:30.000
especially when you validate


00:33:30.000 --> 00:33:33.520
parse really nested and complicated models,


00:33:33.520 --> 00:33:36.920
then it's much, much faster than Python,


00:33:36.920 --> 00:33:39.360
than V1 implementation.


00:33:39.360 --> 00:33:42.200
While with Beanie,


00:33:42.200 --> 00:33:48.080
you still can see significant great performance upgrade,


00:33:48.600 --> 00:33:53.600
but not that much because Beanie works with MongoDB


00:33:53.600 --> 00:33:58.280
and there is this input output operation,


00:33:58.280 --> 00:34:03.560
which is slow and which could not be upgraded


00:34:03.560 --> 00:34:08.560
by just by decreasing processing time.


00:34:08.560 --> 00:34:14.360
But yeah, when we are talking about simple documents,


00:34:14.360 --> 00:34:19.360
it's not that visible, like 10, sometimes 20% faster.


00:34:19.360 --> 00:34:24.200
But when we talk about nested documents,


00:34:24.200 --> 00:34:27.360
when there are nested dictionaries


00:34:27.360 --> 00:34:29.600
or nested lists of dictionaries,


00:34:29.600 --> 00:34:32.240
then it's much, much, much faster.


00:34:32.240 --> 00:34:37.240
In my load test, it is twice faster, V2 against V1.


00:34:37.240 --> 00:34:40.600
And I was super impressed by this


00:34:40.600 --> 00:34:42.440
because I was expecting this,


00:34:42.440 --> 00:34:48.000
that it would not be that faster


00:34:48.000 --> 00:34:52.120
than as pedantic V2 itself


00:34:52.120 --> 00:34:54.640
because of this input output operation.


00:34:54.640 --> 00:34:56.880
But yeah, this is crazy.


00:34:56.880 --> 00:35:01.520
- Right, because it's not just the parsing


00:35:01.520 --> 00:35:02.760
that Beanie does, right?


00:35:02.760 --> 00:35:04.800
Beanie sends the message over to Mongo,


00:35:04.800 --> 00:35:06.080
the network does some stuff,


00:35:06.080 --> 00:35:08.600
Mongo does its thing, sends it back,


00:35:08.600 --> 00:35:10.040
serialized as BSON,


00:35:10.040 --> 00:35:15.040
and then it's got to deserialize into objects somehow.


00:35:15.040 --> 00:35:17.800
And then the pedantic part kicks in, right?


00:35:17.800 --> 00:35:20.120
And plus all the extra bits you've already talked about.


00:35:20.120 --> 00:35:23.640
So it can only affect that part.


00:35:23.640 --> 00:35:28.640
But I think it, your example here shows


00:35:28.640 --> 00:35:31.680
standard computer science answer, it depends.


00:35:31.680 --> 00:35:34.560
Is it faster? It depends.


00:35:34.560 --> 00:35:38.200
I would guess the more complicated your document is,


00:35:38.200 --> 00:35:41.360
the bigger bonus you get, which you've already said.


00:35:41.360 --> 00:35:44.880
And the more documents you return.


00:35:44.880 --> 00:35:47.520
So if I return one record from the database,


00:35:47.520 --> 00:35:49.200
it's got five fields.


00:35:49.200 --> 00:35:52.400
The amount of that processing that is pedantic is small.


00:35:52.400 --> 00:35:54.560
But if I return a thousand records,


00:35:54.560 --> 00:35:56.760
and there's all that serialization,


00:35:56.760 --> 00:35:59.560
like the database has kind of done


00:35:59.560 --> 00:36:00.840
more or less the same amount of work,


00:36:00.840 --> 00:36:01.920
it's streamed the stuff back.


00:36:01.920 --> 00:36:03.880
But when it gets to Python, it's like,


00:36:03.880 --> 00:36:06.600
whoa, I've got a lot of stuff to validate in parse.


00:36:06.600 --> 00:36:08.080
And I suspect that also matters


00:36:08.080 --> 00:36:10.200
how many records are coming back.


00:36:10.200 --> 00:36:13.680
- Yeah, that's why this affected this case


00:36:13.680 --> 00:36:16.640
for lazy parsing that was implemented for V1.


00:36:16.640 --> 00:36:20.800
And now it's not necessary for many cases,


00:36:20.800 --> 00:36:23.680
only for very extreme high load.


00:36:23.680 --> 00:36:25.720
- Yeah, okay.


00:36:25.720 --> 00:36:27.640
Yeah, that's really cool.


00:36:27.640 --> 00:36:30.680
So what makes me smile from this is,


00:36:30.680 --> 00:36:34.480
the more pedantic you use,


00:36:34.480 --> 00:36:37.560
the more awesome this upgrade to two becomes.


00:36:37.560 --> 00:36:40.240
And it's like I said, it's almost no work.


00:36:40.240 --> 00:36:43.720
Technically I had to set all the optionals to be none.


00:36:43.720 --> 00:36:45.760
That's not a beanie thing, that's a pedantic thing,


00:36:45.760 --> 00:36:48.560
but it's not a big deal.


00:36:48.560 --> 00:36:52.520
So upgrading basically means all the parts of your frame,


00:36:52.520 --> 00:36:53.560
all the frameworks you use


00:36:53.560 --> 00:36:55.600
that are built on pedantic get faster.


00:36:55.600 --> 00:36:58.160
So for me, when I upgraded the website,


00:36:58.160 --> 00:37:01.160
it went about, I don't know, 40% faster


00:37:01.160 --> 00:37:02.000
or something like that,


00:37:02.040 --> 00:37:06.600
which is a huge speed up or very little work.


00:37:06.600 --> 00:37:08.840
It's already really fast, right?


00:37:08.840 --> 00:37:11.720
If you go to the podcast, you pull up an episode page,


00:37:11.720 --> 00:37:13.040
it's like 30 milliseconds.


00:37:13.040 --> 00:37:16.960
You go to the courses and you pull up a video to play.


00:37:16.960 --> 00:37:18.600
It's got many queries it does,


00:37:18.600 --> 00:37:21.320
but it's probably 20 milliseconds.


00:37:21.320 --> 00:37:24.520
So now it's 15 milliseconds or 14 milliseconds.


00:37:24.520 --> 00:37:28.320
But still, to get that much of a speed up


00:37:28.320 --> 00:37:31.080
and do basically no work on my part, that's awesome.


00:37:31.080 --> 00:37:33.680
And I'm not using a framework like FastAPI


00:37:33.680 --> 00:37:37.320
where the other side of that story is also pedantic.


00:37:37.320 --> 00:37:39.640
So if you're using FastAPI in Beanie,


00:37:39.640 --> 00:37:42.300
which I think is probably a common combination,


00:37:42.300 --> 00:37:45.000
both the database side


00:37:45.000 --> 00:37:46.780
that gets you the pedantic things is faster,


00:37:46.780 --> 00:37:49.700
and then the outbound and inbound processing


00:37:49.700 --> 00:37:52.120
that the API itself does is a lot faster


00:37:52.120 --> 00:37:53.320
because of pedantic.


00:37:53.320 --> 00:37:57.040
And so you get this kind of multiplicative doubling


00:37:57.040 --> 00:37:59.080
of the speed on both ends, right?


00:38:00.080 --> 00:38:01.480
- Yeah, definitely.


00:38:01.480 --> 00:38:06.280
This is, yeah, I think the numbers you just told


00:38:06.280 --> 00:38:08.080
about your website,


00:38:08.080 --> 00:38:13.080
it's like this time is only about this communication.


00:38:13.080 --> 00:38:17.680
I mean, how beats are going from one computer to another.


00:38:17.680 --> 00:38:20.040
There is no computations there probably.


00:38:20.040 --> 00:38:22.280
- Yeah, it's super, super impressive.


00:38:22.280 --> 00:38:24.240
You know, you hear people say,


00:38:24.240 --> 00:38:25.880
"Well, Python is not fast enough."


00:38:25.880 --> 00:38:30.400
Hmm, that may be true for a few very rare,


00:38:30.400 --> 00:38:32.600
you know, extremely high load situations,


00:38:32.600 --> 00:38:35.240
but I would bet it's fast enough for most people.


00:38:35.240 --> 00:38:39.040
You know, if your website end-to-end processing


00:38:39.040 --> 00:38:41.360
is responding in 15 milliseconds,


00:38:41.360 --> 00:38:44.240
like, you know, you've got other parts of your system,


00:38:44.240 --> 00:38:47.540
like CDNs and an amount of JavaScript you send


00:38:47.540 --> 00:38:51.120
to worry about, not your framework you chose, right?


00:38:51.120 --> 00:38:53.080
Pretty awesome.


00:38:53.080 --> 00:38:55.860
Because of indexes also, don't forget your indexes.


00:38:55.860 --> 00:38:59.520
- Yeah, each time when I have any requests


00:38:59.520 --> 00:39:01.600
about my things are slow


00:39:01.600 --> 00:39:06.000
and probably I have to switch Python to anything else,


00:39:06.000 --> 00:39:08.160
usually the problem is about the data model,


00:39:08.160 --> 00:39:10.280
not about the processing,


00:39:10.280 --> 00:39:14.520
because, you know, people could store things a bit wrongly,


00:39:14.520 --> 00:39:18.080
a bit too nested or less nested than it should be,


00:39:18.080 --> 00:39:20.200
and et cetera, and yeah, indexes.


00:39:20.200 --> 00:39:21.800
- Okay, or yeah, indexes,


00:39:21.800 --> 00:39:24.600
or you've done a query where you return a hundred things


00:39:24.600 --> 00:39:27.580
and you have huge documents and you only want,


00:39:27.580 --> 00:39:30.300
like, say the title and last updated,


00:39:30.300 --> 00:39:31.860
but you don't do a projection,


00:39:31.860 --> 00:39:33.700
and so you're sending way too much data.


00:39:33.700 --> 00:39:37.260
It's like select star instead of select title, comma, date,


00:39:37.260 --> 00:39:39.100
you know, something like that, right?


00:39:39.100 --> 00:39:44.100
- Yeah, and then sometimes also works


00:39:44.100 --> 00:39:46.500
to make protection on the database layer,


00:39:46.500 --> 00:39:51.500
like to make some, like, to find maximum elements


00:39:51.500 --> 00:39:53.740
or minimum elements and to do this stuff


00:39:53.740 --> 00:39:54.740
with the database layer,


00:39:54.740 --> 00:39:56.560
but it's not always that efficient.


00:39:56.560 --> 00:39:57.400
So you have to do it,


00:39:57.400 --> 00:39:58.240
you have to do it in Python,


00:39:58.240 --> 00:39:59.080
you have to do it in Python,


00:39:59.080 --> 00:39:59.920
and you have to do it in Python.


00:39:59.920 --> 00:40:00.740
- Yeah, and you have to do it in Python.


00:40:00.740 --> 00:40:01.580
- Yeah, and you have to do it in Python.


00:40:01.580 --> 00:40:02.420
- Yeah, and you have to do it in Python.


00:40:02.420 --> 00:40:03.240
- Yeah, and you have to do it in Python.


00:40:03.240 --> 00:40:04.080
- Yeah, and you have to do it in Python.


00:40:04.080 --> 00:40:04.920
- Yeah, and you have to do it in Python.


00:40:04.920 --> 00:40:05.740
- Yeah, and you have to do it in Python.


00:40:05.740 --> 00:40:06.580
- Yeah, and you have to do it in Python.


00:40:06.580 --> 00:40:07.420
- Yeah, and you have to do it in Python.


00:40:07.420 --> 00:40:08.240
- Yeah, and you have to do it in Python.


00:40:08.240 --> 00:40:09.080
- Yeah, and you have to do it in Python.


00:40:09.080 --> 00:40:34.080
- Yeah, and you have to do it in Python.


00:40:34.080 --> 00:40:35.080
- Yeah, and you have to do it in Python.


00:40:35.080 --> 00:40:36.080
- Yeah, and you have to do it in Python.


00:40:36.080 --> 00:40:37.080
- Yeah, and you have to do it in Python.


00:40:37.080 --> 00:40:38.080
- Yeah, and you have to do it in Python.


00:40:38.080 --> 00:40:39.080
- Yeah, and you have to do it in Python.


00:40:39.080 --> 00:40:40.080
- Yeah, and you have to do it in Python.


00:40:40.080 --> 00:40:41.080
- Yeah, and you have to do it in Python.


00:40:41.080 --> 00:40:42.080
- Yeah, and you have to do it in Python.


00:40:42.080 --> 00:40:43.080
- Yeah, and you have to do it in Python.


00:40:43.080 --> 00:40:44.080
- Yeah, and you have to do it in Python.


00:40:44.080 --> 00:40:45.080
- Yeah, and you have to do it in Python.


00:40:45.080 --> 00:40:46.080
- Yeah, and you have to do it in Python.


00:40:46.080 --> 00:40:47.080
- Yeah, and you have to do it in Python.


00:40:47.080 --> 00:40:48.080
- Yeah, and you have to do it in Python.


00:40:48.080 --> 00:40:49.080
- Yeah, and you have to do it in Python.


00:40:49.080 --> 00:41:14.080
- Yeah, and you have to do it in Python.


00:41:14.080 --> 00:41:15.080
- Yeah, and you have to do it in Python.


00:41:15.080 --> 00:41:16.080
- Yeah, and you have to do it in Python.


00:41:16.080 --> 00:41:17.080
- Yeah, and you have to do it in Python.


00:41:17.080 --> 00:41:18.080
- Yeah, and you have to do it in Python.


00:41:18.080 --> 00:41:19.080
- Yeah, and you have to do it in Python.


00:41:19.080 --> 00:41:20.080
- Yeah, and you have to do it in Python.


00:41:20.080 --> 00:41:21.080
- Yeah, and you have to do it in Python.


00:41:21.080 --> 00:41:22.080
- Yeah, and you have to do it in Python.


00:41:22.080 --> 00:41:23.080
- Yeah, and you have to do it in Python.


00:41:23.080 --> 00:41:24.080
- Yeah, and you have to do it in Python.


00:41:24.080 --> 00:41:25.080
- Yeah, and you have to do it in Python.


00:41:25.080 --> 00:41:26.080
- Yeah, and you have to do it in Python.


00:41:26.080 --> 00:41:27.080
- Yeah, and you have to do it in Python.


00:41:27.080 --> 00:41:28.080
- Yeah, and you have to do it in Python.


00:41:28.080 --> 00:41:29.080
- Yeah, and you have to do it in Python.


00:41:29.080 --> 00:41:53.080
- Yeah, and you have to do it in Python.


00:41:53.080 --> 00:41:54.080
- Yeah, and you have to do it in Python.


00:41:54.080 --> 00:41:55.080
- Yeah, and you have to do it in Python.


00:41:55.080 --> 00:41:56.080
- Yeah, and you have to do it in Python.


00:41:56.080 --> 00:41:57.080
- Yeah, and you have to do it in Python.


00:41:57.080 --> 00:41:58.080
- Yeah, and you have to do it in Python.


00:41:58.080 --> 00:41:59.080
- Yeah, and you have to do it in Python.


00:41:59.080 --> 00:42:00.080
- Yeah, and you have to do it in Python.


00:42:00.080 --> 00:42:01.080
- Yeah, and you have to do it in Python.


00:42:01.080 --> 00:42:02.080
- Yeah, and you have to do it in Python.


00:42:02.080 --> 00:42:03.080
- Yeah, and you have to do it in Python.


00:42:03.080 --> 00:42:04.080
- Yeah, and you have to do it in Python.


00:42:04.080 --> 00:42:05.080
- Yeah, and you have to do it in Python.


00:42:05.080 --> 00:42:06.080
- Yeah, and you have to do it in Python.


00:42:06.080 --> 00:42:07.080
- Yeah, and you have to do it in Python.


00:42:07.080 --> 00:42:08.080
- Yeah, and you have to do it in Python.


00:42:08.080 --> 00:42:34.080
- Yeah, and you have to do it in Python.


00:42:34.080 --> 00:42:35.080
- Yeah, and you have to do it in Python.


00:42:35.080 --> 00:42:36.080
- Yeah, and you have to do it in Python.


00:42:36.080 --> 00:42:37.080
- Yeah, and you have to do it in Python.


00:42:37.080 --> 00:42:38.080
- Yeah, and you have to do it in Python.


00:42:38.080 --> 00:42:39.080
- Yeah, and you have to do it in Python.


00:42:39.080 --> 00:42:40.080
- Yeah, and you have to do it in Python.


00:42:40.080 --> 00:42:41.080
- Yeah, and you have to do it in Python.


00:42:41.080 --> 00:42:42.080
- Yeah, and you have to do it in Python.


00:42:42.080 --> 00:42:43.080
- Yeah, and you have to do it in Python.


00:42:43.080 --> 00:42:44.080
- Yeah, and you have to do it in Python.


00:42:44.080 --> 00:42:45.080
- Yeah, and you have to do it in Python.


00:42:45.080 --> 00:42:46.080
- Yeah, and you have to do it in Python.


00:42:46.080 --> 00:42:47.080
- Yeah, and you have to do it in Python.


00:42:47.080 --> 00:42:48.080
- Yeah, and you have to do it in Python.


00:42:48.080 --> 00:42:49.080
- Yeah, and you have to do it in Python.


00:42:49.080 --> 00:43:10.080
- Yeah, and you have to do it in Python.


00:43:10.080 --> 00:43:34.080
- Yeah, and you have to do it in Python.


00:43:34.080 --> 00:44:02.080
- Yeah, and you have to do it in Python.


00:44:02.080 --> 00:44:04.080
- Yeah, and you have to do it in Python.


00:44:04.080 --> 00:44:05.080
- Yeah, and you have to do it in Python.


00:44:05.080 --> 00:44:06.080
- Yeah, and you have to do it in Python.


00:44:06.080 --> 00:44:07.080
- Yeah, and you have to do it in Python.


00:44:07.080 --> 00:44:08.080
- Yeah, and you have to do it in Python.


00:44:08.080 --> 00:44:09.080
- Yeah, and you have to do it in Python.


00:44:09.080 --> 00:44:10.080
- Yeah, and you have to do it in Python.


00:44:10.080 --> 00:44:11.080
- Yeah, and you have to do it in Python.


00:44:11.080 --> 00:44:12.080
- Yeah, and you have to do it in Python.


00:44:12.080 --> 00:44:13.080
- Yeah, and you have to do it in Python.


00:44:13.080 --> 00:44:14.080
- Yeah, and you have to do it in Python.


00:44:14.080 --> 00:44:15.080
- Yeah, and you have to do it in Python.


00:44:15.080 --> 00:44:16.080
- Yeah, and you have to do it in Python.


00:44:16.080 --> 00:44:17.080
- Yeah, and you have to do it in Python.


00:44:17.080 --> 00:44:18.080
- Yeah, and you have to do it in Python.


00:44:18.080 --> 00:44:42.080
- Yeah, and you have to do it in Python.


00:44:42.080 --> 00:44:43.080
- Yeah, and you have to do it in Python.


00:44:43.080 --> 00:44:44.080
- Yeah, and you have to do it in Python.


00:44:44.080 --> 00:44:45.080
- Yeah, and you have to do it in Python.


00:44:45.080 --> 00:44:46.080
- Yeah, and you have to do it in Python.


00:44:46.080 --> 00:44:47.080
- Yeah, and you have to do it in Python.


00:44:47.080 --> 00:44:48.080
- Yeah, and you have to do it in Python.


00:44:48.080 --> 00:44:49.080
- Yeah, and you have to do it in Python.


00:44:49.080 --> 00:44:50.080
- Yeah, and you have to do it in Python.


00:44:50.080 --> 00:44:51.080
- Yeah, and you have to do it in Python.


00:44:51.080 --> 00:44:52.080
- Yeah, and you have to do it in Python.


00:44:52.080 --> 00:44:53.080
- Yeah, and you have to do it in Python.


00:44:53.080 --> 00:44:54.080
- Yeah, and you have to do it in Python.


00:44:54.080 --> 00:44:55.080
- Yeah, and you have to do it in Python.


00:44:55.080 --> 00:44:56.080
- Yeah, and you have to do it in Python.


00:44:56.080 --> 00:44:57.080
- Yeah, and you have to do it in Python.


00:44:57.080 --> 00:45:23.080
- Yeah, and you have to do it in Python.


00:45:23.080 --> 00:45:24.080
- Yeah, and you have to do it in Python.


00:45:24.080 --> 00:45:25.080
- Yeah, and you have to do it in Python.


00:45:25.080 --> 00:45:26.080
- Yeah, and you have to do it in Python.


00:45:26.080 --> 00:45:27.080
- Yeah, and you have to do it in Python.


00:45:27.080 --> 00:45:28.080
- Yeah, and you have to do it in Python.


00:45:28.080 --> 00:45:29.080
- Yeah, and you have to do it in Python.


00:45:29.080 --> 00:45:30.080
- Yeah, and you have to do it in Python.


00:45:30.080 --> 00:45:31.080
- Yeah, and you have to do it in Python.


00:45:31.080 --> 00:45:32.080
- Yeah, and you have to do it in Python.


00:45:32.080 --> 00:45:33.080
- Yeah, and you have to do it in Python.


00:45:33.080 --> 00:45:34.080
- Yeah, and you have to do it in Python.


00:45:34.080 --> 00:45:35.080
- Yeah, and you have to do it in Python.


00:45:35.080 --> 00:45:36.080
- Yeah, and you have to do it in Python.


00:45:36.080 --> 00:45:37.080
- Yeah, and you have to do it in Python.


00:45:37.080 --> 00:45:38.080
- Yeah, and you have to do it in Python.


00:45:38.080 --> 00:46:04.080
- Yeah, and you have to do it in Python.


00:46:04.080 --> 00:46:11.080
- Yeah, and you have to do it in Python.


00:46:11.080 --> 00:46:16.080
- Yeah, and you have to do it in Python.


00:46:16.080 --> 00:46:22.080
- Yeah, and you have to do it in Python.


00:46:22.080 --> 00:46:23.080
- Yeah, and you have to do it in Python.


00:46:23.080 --> 00:46:24.080
- Yeah, and you have to do it in Python.


00:46:24.080 --> 00:46:25.080
- Yeah, and you have to do it in Python.


00:46:25.080 --> 00:46:26.080
- Yeah, and you have to do it in Python.


00:46:26.080 --> 00:46:27.080
- Yeah, and you have to do it in Python.


00:46:27.080 --> 00:46:28.080
- Yeah, and you have to do it in Python.


00:46:28.080 --> 00:46:29.080
- Yeah, and you have to do it in Python.


00:46:29.080 --> 00:46:30.080
- Yeah, and you have to do it in Python.


00:46:30.080 --> 00:46:31.080
- Yeah, and you have to do it in Python.


00:46:31.080 --> 00:46:32.080
- Yeah, and you have to do it in Python.


00:46:32.080 --> 00:46:33.080
- Yeah, and you have to do it in Python.


00:46:33.080 --> 00:46:34.080
- Yeah, and you have to do it in Python.


00:46:34.080 --> 00:46:35.080
- Yeah, and you have to do it in Python.


00:46:35.080 --> 00:46:36.080
- Yeah, and you have to do it in Python.


00:46:36.080 --> 00:46:37.080
- Yeah, and you have to do it in Python.


00:46:37.080 --> 00:46:38.080
- Yeah, and you have to do it in Python.


00:46:38.080 --> 00:46:39.080
- Yeah, and you have to do it in Python.


00:46:39.080 --> 00:46:40.080
- Yeah, and you have to do it in Python.


00:46:40.080 --> 00:46:41.080
- Yeah, and you have to do it in Python.


00:46:41.080 --> 00:46:42.080
- Yeah, and you have to do it in Python.


00:46:42.080 --> 00:46:43.080
- Yeah, and you have to do it in Python.


00:46:43.080 --> 00:46:44.080
- Yeah, and you have to do it in Python.


00:46:44.080 --> 00:46:45.080
- Yeah, and you have to do it in Python.


00:46:45.080 --> 00:46:46.080
- Yeah, and you have to do it in Python.


00:46:46.080 --> 00:46:47.080
- Yeah, and you have to do it in Python.


00:46:47.080 --> 00:46:48.080
- Yeah, and you have to do it in Python.


00:46:48.080 --> 00:47:16.080
- Yeah, and you have to do it in Python.


00:47:16.080 --> 00:47:17.080
- Yeah, and you have to do it in Python.


00:47:17.080 --> 00:47:18.080
- Yeah, and you have to do it in Python.


00:47:18.080 --> 00:47:19.080
- Yeah, and you have to do it in Python.


00:47:19.080 --> 00:47:20.080
- Yeah, and you have to do it in Python.


00:47:20.080 --> 00:47:21.080
- Yeah, and you have to do it in Python.


00:47:21.080 --> 00:47:22.080
- Yeah, and you have to do it in Python.


00:47:22.080 --> 00:47:23.080
- Yeah, and you have to do it in Python.


00:47:23.080 --> 00:47:24.080
- Yeah, and you have to do it in Python.


00:47:24.080 --> 00:47:25.080
- Yeah, and you have to do it in Python.


00:47:25.080 --> 00:47:26.080
- Yeah, and you have to do it in Python.


00:47:26.080 --> 00:47:27.080
- Yeah, and you have to do it in Python.


00:47:27.080 --> 00:47:28.080
- Yeah, and you have to do it in Python.


00:47:28.080 --> 00:47:29.080
- Yeah, and you have to do it in Python.


00:47:29.080 --> 00:47:30.080
- Yeah, and you have to do it in Python.


00:47:30.080 --> 00:47:31.080
- Yeah, and you have to do it in Python.


00:47:31.080 --> 00:47:52.080
- Yeah, and you have to do it in Python.


00:47:52.080 --> 00:48:18.080
- Yeah, and you have to do it in Python.


00:48:18.080 --> 00:48:25.080
- Yeah, and you have to do it in Python.


00:48:25.080 --> 00:48:31.080
- Yeah, and you have to do it in Python.


00:48:31.080 --> 00:48:37.080
- Yeah, and you have to do it in Python.


00:48:37.080 --> 00:48:43.080
- Yeah, and you have to do it in Python.


00:48:43.080 --> 00:48:51.080
- Yeah, and you have to do it in Python.


00:48:51.080 --> 00:48:59.080
- Yeah, and you have to do it in Python.


00:48:59.080 --> 00:49:05.080
- Yeah, and you have to do it in Python.


00:49:05.080 --> 00:49:11.080
- Yeah, and you have to do it in Python.


00:49:11.080 --> 00:49:17.080
- Yeah, and you have to do it in Python.


00:49:17.080 --> 00:49:23.080
- Yeah, and you have to do it in Python.


00:49:23.080 --> 00:49:29.080
- Yeah, and you have to do it in Python.


00:49:29.080 --> 00:49:35.080
- Yeah, and you have to do it in Python.


00:49:35.080 --> 00:49:43.080
- Yeah, and you have to do it in Python.


00:49:43.080 --> 00:49:51.080
- Yeah, and you have to do it in Python.


00:49:51.080 --> 00:49:57.080
- Yeah, and you have to do it in Python.


00:49:57.080 --> 00:50:03.080
- Yeah, and you have to do it in Python.


00:50:03.080 --> 00:50:09.080
- Yeah, and you have to do it in Python.


00:50:09.080 --> 00:50:15.080
- Yeah, and you have to do it in Python.


00:50:15.080 --> 00:50:21.080
- Yeah, and you have to do it in Python.


00:50:21.080 --> 00:50:27.080
- Yeah, and you have to do it in Python.


00:50:27.080 --> 00:50:33.080
- Yeah, and you have to do it in Python.


00:50:33.080 --> 00:50:39.080
- Yeah, and you have to do it in Python.


00:50:39.080 --> 00:50:45.080
- Yeah, and you have to do it in Python.


00:50:45.080 --> 00:50:51.080
- Yeah, and you have to do it in Python.


00:50:51.080 --> 00:50:57.080
- Yeah, and you have to do it in Python.


00:50:57.080 --> 00:51:03.080
- Yeah, and you have to do it in Python.


00:51:03.080 --> 00:51:09.080
- Yeah, and you have to do it in Python.


00:51:09.080 --> 00:51:15.080
- Yeah, and you have to do it in Python.


00:51:15.080 --> 00:51:21.080
- Yeah, and you have to do it in Python.


00:51:21.080 --> 00:51:27.080
- Yeah, and you have to do it in Python.


00:51:27.080 --> 00:51:33.080
- Yeah, and you have to do it in Python.


00:51:33.080 --> 00:51:39.080
- Yeah, and you have to do it in Python.


00:51:39.080 --> 00:51:45.080
- Yeah, and you have to do it in Python.


00:51:45.080 --> 00:51:51.080
- Yeah, and you have to do it in Python.


00:51:51.080 --> 00:51:57.080
- Yeah, and you have to do it in Python.


00:51:57.080 --> 00:52:03.080
- Yeah, and you have to do it in Python.


00:52:03.080 --> 00:52:09.080
- Yeah, and you have to do it in Python.


00:52:09.080 --> 00:52:15.080
- Yeah, and you have to do it in Python.


00:52:15.080 --> 00:52:21.080
- Yeah, and you have to do it in Python.


00:52:21.080 --> 00:52:27.080
- Yeah, and you have to do it in Python.


00:52:27.080 --> 00:52:33.080
- Yeah, and you have to do it in Python.


00:52:33.080 --> 00:52:39.080
- Yeah, and you have to do it in Python.


00:52:39.080 --> 00:52:45.080
- Yeah, and you have to do it in Python.


00:52:45.080 --> 00:52:51.080
- Yeah, and you have to do it in Python.


00:52:51.080 --> 00:52:57.080
- Yeah, and you have to do it in Python.


00:52:57.080 --> 00:53:03.080
- Yeah, and you have to do it in Python.


00:53:03.080 --> 00:53:09.080
- Yeah, and you have to do it in Python.


00:53:09.080 --> 00:53:15.080
- Yeah, and you have to do it in Python.


00:53:15.080 --> 00:53:21.080
- Yeah, and you have to do it in Python.


00:53:21.080 --> 00:53:27.080
- Yeah, and you have to do it in Python.


00:53:27.080 --> 00:53:33.080
- Yeah, and you have to do it in Python.


00:53:33.080 --> 00:53:39.080
- Yeah, and you have to do it in Python.


00:53:39.080 --> 00:53:45.080
- Yeah, and you have to do it in Python.


00:53:45.080 --> 00:53:51.080
- Yeah, and you have to do it in Python.


00:53:51.080 --> 00:53:57.080
- Yeah, and you have to do it in Python.


00:53:57.080 --> 00:54:03.080
- Yeah, and you have to do it in Python.


00:54:03.080 --> 00:54:09.080
- Yeah, and you have to do it in Python.


00:54:09.080 --> 00:54:15.080
- Yeah, and you have to do it in Python.


00:54:15.080 --> 00:54:21.080
- Yeah, and you have to do it in Python.


00:54:21.080 --> 00:54:27.080
- Yeah, and you have to do it in Python.


00:54:27.080 --> 00:54:33.080
- Yeah, and you have to do it in Python.


00:54:33.080 --> 00:54:39.080
- Yeah, and you have to do it in Python.


00:54:39.080 --> 00:54:45.080
- Yeah, and you have to do it in Python.


00:54:45.080 --> 00:54:51.080
- Yeah, and you have to do it in Python.


00:54:51.080 --> 00:54:57.080
- Yeah, and you have to do it in Python.


00:54:57.080 --> 00:55:03.080
- Yeah, and you have to do it in Python.


00:55:03.080 --> 00:55:09.080
- Yeah, and you have to do it in Python.


00:55:09.080 --> 00:55:15.080
- Yeah, and you have to do it in Python.


00:55:15.080 --> 00:55:21.080
- Yeah, and you have to do it in Python.


00:55:21.080 --> 00:55:27.080
- Yeah, and you have to do it in Python.


00:55:27.080 --> 00:55:33.080
- Yeah, and you have to do it in Python.


00:55:33.080 --> 00:55:39.080
- Yeah, and you have to do it in Python.


00:55:39.080 --> 00:55:45.080
- Yeah, and you have to do it in Python.


00:55:45.080 --> 00:55:51.080
- Yeah, and you have to do it in Python.


00:55:51.080 --> 00:55:57.080
- Yeah, and you have to do it in Python.


00:55:57.080 --> 00:56:03.080
- Yeah, and you have to do it in Python.


00:56:03.080 --> 00:56:09.080
- Yeah, and you have to do it in Python.


00:56:09.080 --> 00:56:15.080
- Yeah, and you have to do it in Python.


00:56:15.080 --> 00:56:21.080
- Yeah, and you have to do it in Python.


00:56:21.080 --> 00:56:27.080
- Yeah, and you have to do it in Python.


00:56:27.080 --> 00:56:33.080
- Yeah, and you have to do it in Python.


00:56:33.080 --> 00:56:39.080
- Yeah, and you have to do it in Python.


00:56:39.080 --> 00:56:45.080
- Yeah, and you have to do it in Python.


00:56:45.080 --> 00:56:51.080
- Yeah, and you have to do it in Python.


00:56:51.080 --> 00:56:57.080
- Yeah, and you have to do it in Python.


00:56:57.080 --> 00:57:03.080
- Yeah, and you have to do it in Python.


00:57:03.080 --> 00:57:09.080
- Yeah, and you have to do it in Python.


00:57:09.080 --> 00:57:15.080
- Yeah, and you have to do it in Python.


00:57:15.080 --> 00:57:21.080
- Yeah, and you have to do it in Python.


00:57:21.080 --> 00:57:27.080
- Yeah, and you have to do it in Python.


00:57:27.080 --> 00:57:33.080
- Yeah, and you have to do it in Python.


00:57:33.080 --> 00:57:39.080
- Yeah, and you have to do it in Python.


00:57:39.080 --> 00:57:49.080
- Yeah, what a cool project. So this lets you do really nice modeling of how users interact with your site using Python.


00:57:49.080 --> 00:58:03.080
And then what you get is, I don't know if there's any cool pictures that show up on here in terms of the graphs, but you get really nice graphs that show you real time about how many requests per second and different scenarios you get.


00:58:03.080 --> 00:58:22.080
And on this one, I'm pretty sure when I upgraded it to Pydantic 2 and ran it again, I'm trying to think of all the variations that you know, there could be something that has changed that I wasn't aware of, like maybe I recorded it on my M1 Mac Mini and then ran it again on my M2 Pro Mac Mini.


00:58:22.080 --> 00:58:45.080
So that could affect it by like a little bit as well, like 20%. But I think just so using Beanie and FastAPI and upgrading all those paths to Pydantic 2 and the respective Beanie and FastAPI versions, I think it went 50% or double fast, two times as fast, 100% faster just by making that change.


00:58:45.080 --> 00:58:48.080
So that was pretty awesome.


00:58:49.080 --> 00:58:54.080
This is great. Yeah, I see this 50% also.


00:58:54.080 --> 00:59:03.080
Yeah, and all I did is I just reran pip-tools to get the new versions of everything and reran the load tests and look how much faster they are.


00:59:03.080 --> 00:59:12.080
And so that's a real cool example of kind of what I was talking about. So yeah, if you want to see all this stuff in action, check out the MongoDB with Async Python course.


00:59:12.080 --> 00:59:14.080
Cool. Well.


00:59:17.080 --> 00:59:29.080
Roman, thanks for coming on the show and updating us on Beanie and especially giving us this look into your journey of migrating based on Pydantic 1 to 2. I think that's really cool.


00:59:29.080 --> 00:59:31.080
Yeah, thank you very much.


00:59:31.080 --> 00:59:44.080
Absolutely. Of course. So before you get out of here, got a PyPI project library to recommend to people, something besides, of course, Beanie and Pydantic, which are pretty awesome and obvious.


00:59:44.080 --> 00:59:55.080
So for sure, Motor, I would recommend to use Motor. This is kind of PyMongo, but asynchronous.


00:59:55.080 --> 01:00:02.080
Integrates with Async and Await perfectly, which is real, real nice.


01:00:02.080 --> 01:00:12.080
Yeah, and if you want to do something more low level than Beanie, then you have to at least meet with Motor because this is a really nice library.


01:00:12.080 --> 01:00:18.080
And even after that many years, it's still very actual.


01:00:18.080 --> 01:00:21.080
And what else?


01:00:21.080 --> 01:00:29.080
Honestly, I don't have anything in my mind currently.


01:00:29.080 --> 01:00:33.080
Yeah, Pydantic's good stuff. Awesome.


01:00:33.080 --> 01:00:38.080
Okay, I'll throw Locust out there for people. They can check out Locust. That's pretty cool.


01:00:38.080 --> 01:00:52.080
If you are going through the same process, you've got code built on Beanie or just Pydantic in general, and you want to see, you know, how does my system respond before and after, Locust is like ridiculously easy to set up.


01:00:52.080 --> 01:01:01.080
Run it against your code, pip install, upgrade, run it again, and just see what happens. I think that'll be a really good recommendation too.


01:01:01.080 --> 01:01:14.080
Yeah, so final call to action. People want to get started with Beanie. Maybe people out there already using Beanie want to upgrade their code. What do you tell them?


01:01:14.080 --> 01:01:27.080
So yeah, just pip install it. Everything would work fine. So just try it. But at least you have to upgrade everything. So please write tests.


01:01:27.080 --> 01:01:29.080
Absolutely.


01:01:29.080 --> 01:01:37.080
And if something will go wrong, go to my Discord channel and me or other people will answer your questions.


01:01:37.080 --> 01:01:44.080
Sounds good. Alright, well, congrats on upgrading Beanie. You must be really happy to have it done.


01:01:44.080 --> 01:01:46.080
Yeah, thank you very much.


01:01:46.080 --> 01:01:48.080
Yeah, you bet. See you later.


01:01:48.080 --> 01:01:50.080
See you.


01:01:50.080 --> 01:02:08.140
[ Silence ]

