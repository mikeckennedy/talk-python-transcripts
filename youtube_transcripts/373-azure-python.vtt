WEBVTT

00:00:00.000 --> 00:00:06.000
Anthony, Shane, welcome to Talk Python To Me.


00:00:06.000 --> 00:00:07.000
Hey, how are you?


00:00:07.000 --> 00:00:10.000
I'm doing well. It's great to have you here.


00:00:10.000 --> 00:00:11.000
Yeah, yeah.


00:00:11.000 --> 00:00:14.000
I'm excited to talk about this,


00:00:14.000 --> 00:00:18.000
re-envisioning how Python works on Azure


00:00:18.000 --> 00:00:22.000
as a developer story that you all are working on.


00:00:22.000 --> 00:00:25.000
It looks, from the really quick preview I've seen,


00:00:25.000 --> 00:00:28.000
it looks really exciting. You must be excited to share it.


00:00:28.000 --> 00:00:31.320
>> Yeah, it's been an adventure to figure out what's


00:00:31.320 --> 00:00:36.020
the fastest way to get a developer up and running on


00:00:36.020 --> 00:00:38.180
Azure and in the Cloud without


00:00:38.180 --> 00:00:40.840
having to learn a whole set of new things.


00:00:40.840 --> 00:00:42.600
That's the goal here.


00:00:42.600 --> 00:00:45.240
>> Sure. Shane, you and I,


00:00:45.240 --> 00:00:46.980
when we first started talking,


00:00:46.980 --> 00:00:50.920
we were reminiscing back to Azure in


00:00:50.920 --> 00:00:54.240
the early days when there were only a couple of services.


00:00:54.240 --> 00:00:54.680
>> Right.


00:00:54.680 --> 00:00:55.280
>> Yeah.


00:00:55.280 --> 00:00:57.440
- Yeah, back in Silverlight.


00:00:57.440 --> 00:00:59.560
- You ran on Silverlight.


00:00:59.560 --> 00:01:01.400
Silverlight, oh my goodness.


00:01:01.400 --> 00:01:02.600
- Right.


00:01:02.600 --> 00:01:03.440
- Those were the days.


00:01:03.440 --> 00:01:05.840
What was that, 2008-ish?


00:01:05.840 --> 00:01:06.840
Maybe a little earlier even?


00:01:06.840 --> 00:01:08.760
- Yeah, that sounds about right.


00:01:08.760 --> 00:01:11.120
Yeah, we had Silverlight.


00:01:11.120 --> 00:01:14.440
I think we had three actual products,


00:01:14.440 --> 00:01:16.480
and this is long before I started at Microsoft,


00:01:16.480 --> 00:01:18.800
and SQL Server was its own portal.


00:01:18.800 --> 00:01:21.040
So it had its own little space,


00:01:21.040 --> 00:01:22.880
and now we're like, I don't know,


00:01:22.880 --> 00:01:25.080
well over 100 different things that we can do


00:01:25.080 --> 00:01:30.120
the portal. Yeah, I don't know how many folks who are listening have actually


00:01:30.120 --> 00:01:37.680
gone to the portal and pulled it up and sort of just browsed it, but between


00:01:37.680 --> 00:01:41.200
Azure and AWS it's just like a paradox of choice.


00:01:41.200 --> 00:01:46.040
There's just layers of "oh my gosh the screen is full of icons, I opened up


00:01:46.040 --> 00:01:50.040
one and that was a subsection of now we have like deploy features that fill the


00:01:50.040 --> 00:01:54.320
screen." It's quite the challenge to get up and going, right?


00:01:54.320 --> 00:01:58.480
Yeah, yeah, I think if you ask any web developer,


00:01:58.480 --> 00:02:01.760
"Hey, you've got code, how do you run this on the cloud?"


00:02:01.760 --> 00:02:08.000
And it's like, it depends truly takes full meaning, you know, when it comes to that.


00:02:08.000 --> 00:02:15.120
And, you know, before it was, you know, maybe it was just a slider bar for scaling, right?


00:02:15.120 --> 00:02:16.720
Like, "Oh, I want maybe two or three."


00:02:16.720 --> 00:02:20.560
And now it's like, "Oh, well, it's based on CPU and this and how the moon is moving."


00:02:20.560 --> 00:02:22.320
And there's just so many different ways


00:02:22.320 --> 00:02:26.400
that we can scale a web app or any part of our architecture


00:02:26.400 --> 00:02:27.200
now.


00:02:27.200 --> 00:02:29.440
- Yeah, and so many areas in which the pressure might


00:02:29.440 --> 00:02:32.080
be exerted that it needs to scale rather than just CPU


00:02:32.080 --> 00:02:33.520
and CPU RAM.


00:02:33.520 --> 00:02:36.040
Before we get to it, though, just quick introduction for you.


00:02:36.040 --> 00:02:39.840
I guess, Anthony, people know you.


00:02:39.840 --> 00:02:41.500
You've been on the show so many times.


00:02:41.500 --> 00:02:43.360
It's fantastic to have you back.


00:02:43.360 --> 00:02:44.920
- Yeah, it's great to be here again.


00:02:44.920 --> 00:02:45.680
- Yeah, for sure.


00:02:45.680 --> 00:02:46.880
It's always good to have you on the show.


00:02:46.880 --> 00:02:47.920
And when you're not on the show, we're


00:02:47.920 --> 00:02:49.760
often talking about you, about some project


00:02:49.760 --> 00:02:53.000
that you're doing, some pet that lives in your IDE


00:02:53.000 --> 00:02:55.680
or some comic sans font you're using,


00:02:55.680 --> 00:02:57.180
and all sorts of fun things.


00:02:57.180 --> 00:03:00.940
- Yeah, rumors of a golden jacket somewhere.


00:03:00.940 --> 00:03:03.280
- Yeah, I didn't realize how close you were


00:03:03.280 --> 00:03:04.120
to the golden jacket.


00:03:04.120 --> 00:03:04.940
That's amazing.


00:03:04.940 --> 00:03:06.120
We're gonna have to work on that.


00:03:06.120 --> 00:03:08.720
So just give us a quick catch up


00:03:08.720 --> 00:03:12.100
and then Shane can introduce yourself.


00:03:12.100 --> 00:03:13.320
What have you been up to?


00:03:13.320 --> 00:03:15.460
- Anthony. - Have we spoken?


00:03:15.460 --> 00:03:16.480
Yeah, Anthony, have we spoken


00:03:16.480 --> 00:03:19.360
since you moved to Microsoft?


00:03:19.360 --> 00:03:23.840
think we have, I'm not 100% sure, but let's assume we haven't. Tell people about what


00:03:23.840 --> 00:03:24.840
you're up to these days.


00:03:24.840 --> 00:03:31.660
Yeah, so I'm kind of working on advocating for Python within Microsoft and then working


00:03:31.660 --> 00:03:36.300
on advocating Python outside of Microsoft as well. So I'm still doing a lot of open


00:03:36.300 --> 00:03:42.860
source work, but then within Microsoft, I guess, trying to integrate Python more into


00:03:42.860 --> 00:03:47.080
our products and stuff like that, and also get the Python community and things like that


00:03:47.080 --> 00:03:53.600
more into how we work and find out more about how Python is being used across the company


00:03:53.600 --> 00:03:56.040
and how we can do better as well.


00:03:56.040 --> 00:04:00.200
So I've been focused on performance and security.


00:04:00.200 --> 00:04:06.320
They're kind of two things I'm always interested in, but also like modern Python applications


00:04:06.320 --> 00:04:08.840
and how they kind of come into play as well.


00:04:08.840 --> 00:04:14.760
So yeah, so many things I couldn't possibly list them all over the last year.


00:04:14.760 --> 00:04:17.760
The first year, I've been in Microsoft for over a year now.


00:04:17.760 --> 00:04:19.700
And I made a list and it was like 50 things


00:04:19.700 --> 00:04:21.360
I think I'd done in the first year.


00:04:21.360 --> 00:04:25.020
But yeah, it's been a whirlwind, but really fun.


00:04:25.020 --> 00:04:25.860
- It has.


00:04:25.860 --> 00:04:27.000
And you just came back from PyCon.


00:04:27.000 --> 00:04:30.880
I wanna give us a quick report from being on the scene.


00:04:30.880 --> 00:04:32.520
Did I see you on the big screen,


00:04:32.520 --> 00:04:34.800
big stage giving a talk there?


00:04:34.800 --> 00:04:37.080
- Yeah, it's my first time doing that.


00:04:37.080 --> 00:04:37.920
That was fun.


00:04:37.920 --> 00:04:38.880
- Congratulations.


00:04:38.880 --> 00:04:40.440
- Yeah, it's terrifying.


00:04:40.440 --> 00:04:44.120
Yeah, I gave a short update


00:04:44.120 --> 00:04:46.240
on behalf of Microsoft.


00:04:46.240 --> 00:04:48.640
I was also on the diversity and inclusion,


00:04:48.640 --> 00:04:51.580
I'm on the diversity and inclusion work group at the PSF.


00:04:51.580 --> 00:04:55.020
And we had like a panel discussion on the stage.


00:04:55.020 --> 00:04:57.620
And then I also gave a talk, like a full talk.


00:04:57.620 --> 00:05:01.080
- What was your talk on?


00:05:01.080 --> 00:05:04.200
- It was on performance anti-patterns and--


00:05:04.200 --> 00:05:07.440
- Yeah, and that's from your Perf Lint project?


00:05:07.440 --> 00:05:09.200
- Yeah, so I basically gave background


00:05:09.200 --> 00:05:12.200
to the performance linter project that I've been working on


00:05:12.200 --> 00:05:15.080
and what things I'm looking for in code


00:05:15.080 --> 00:05:17.000
and why they slow it down.


00:05:17.000 --> 00:05:18.760
And then just trying to demonstrate


00:05:18.760 --> 00:05:22.960
what the difference is to people on 3.9 or 3.10.


00:05:22.960 --> 00:05:26.040
So like a simple one line code change


00:05:26.040 --> 00:05:29.200
can make 60% difference.


00:05:29.200 --> 00:05:30.040
- Yeah, it's incredible.


00:05:30.040 --> 00:05:32.120
- In terms of how quickly the code runs.


00:05:32.120 --> 00:05:33.600
- And then you can get into the debate again


00:05:33.600 --> 00:05:35.880
with people that no, list comprehensions are just loops.


00:05:35.880 --> 00:05:36.880
They don't make it any faster.


00:05:36.880 --> 00:05:40.000
You're like, okay, can we run the benchmarks again


00:05:40.000 --> 00:05:41.580
and let's have another?


00:05:41.580 --> 00:05:42.840
- Yes, that's great.


00:05:42.840 --> 00:05:43.680
That's good work.


00:05:43.680 --> 00:05:48.680
Last thing, what's the status of Perfluent?


00:05:48.680 --> 00:05:50.060
Is it a thing people are using already?


00:05:50.060 --> 00:05:52.660
Is it still under development?


00:05:52.660 --> 00:05:54.660
- Yeah, it's definitely very early beta.


00:05:54.660 --> 00:05:57.840
It raises a lot of false positives at the moment,


00:05:57.840 --> 00:05:59.800
but it's raised some really interesting things


00:05:59.800 --> 00:06:02.560
on production code bases that I've run it against.


00:06:02.560 --> 00:06:08.700
So for example, our serverless platform is Azure Functions.


00:06:09.540 --> 00:06:14.000
That's all, the Python serverless is all written in Python


00:06:14.000 --> 00:06:17.120
and it uses gRPC for communication.


00:06:17.120 --> 00:06:19.360
So I'm actually running the performance linter


00:06:19.360 --> 00:06:23.200
against that code base to look at ways


00:06:23.200 --> 00:06:24.300
that we can make it faster.


00:06:24.300 --> 00:06:26.320
And there's a list of stuff that I'm working through


00:06:26.320 --> 00:06:27.280
with the engineering team.


00:06:27.280 --> 00:06:30.160
So yeah, trying to put that to proof


00:06:30.160 --> 00:06:32.760
instead of just making it theoretical.


00:06:32.760 --> 00:06:34.200
- That's a really good test case actually.


00:06:34.200 --> 00:06:36.740
And performance, if you can improve performance


00:06:36.740 --> 00:06:41.260
of the fabric of the cloud, then you've


00:06:41.260 --> 00:06:43.140
made it better for everyone, right?


00:06:43.140 --> 00:06:46.520
- Yeah, so there's a couple of loops I was looking at,


00:06:46.520 --> 00:06:48.740
which probably get executed hundreds of millions


00:06:48.740 --> 00:06:50.220
of times a day.


00:06:50.220 --> 00:06:53.100
So I'm like, okay, well if I can improve that by 10%,


00:06:53.100 --> 00:06:54.940
then that's gonna make a big difference.


00:06:54.940 --> 00:06:56.180
- Yeah, absolutely.


00:06:56.180 --> 00:06:57.100
Awesome.


00:06:57.100 --> 00:06:58.760
Well, it seems like you're having a good time there.


00:06:58.760 --> 00:07:01.700
I'm happy to see you've found a new home.


00:07:01.700 --> 00:07:02.540
- Yeah, definitely.


00:07:02.540 --> 00:07:03.580
- Yeah, indeed.


00:07:03.580 --> 00:07:04.740
Shane, welcome.


00:07:04.740 --> 00:07:05.580
Welcome to the show.


00:07:05.580 --> 00:07:06.660
Tell people about yourself.


00:07:06.660 --> 00:07:08.660
- Thanks, it's a hard act to follow.


00:07:08.660 --> 00:07:09.500
- I know.


00:07:09.500 --> 00:07:11.880
- I did perfect my last job,


00:07:11.880 --> 00:07:14.500
so I appreciate any perfect improvements.


00:07:14.500 --> 00:07:18.820
So, yeah, I said I've been at Microsoft now six years.


00:07:18.820 --> 00:07:20.380
It'll be six years in the summer,


00:07:20.380 --> 00:07:22.000
so in about a month or so.


00:07:22.000 --> 00:07:24.340
And it feels like some days it's six days,


00:07:24.340 --> 00:07:26.420
some days it feels like 60 days.


00:07:26.420 --> 00:07:27.940
Others it's 60 years.


00:07:27.940 --> 00:07:31.060
Yeah, what do I do at Microsoft?


00:07:31.060 --> 00:07:36.060
I run an end-to-end and developer experiences team.


00:07:36.060 --> 00:07:38.440
for Azure inside of DevDiv.


00:07:38.440 --> 00:07:42.300
We do work closely with Anthony and other folks on his team too


00:07:42.300 --> 00:07:47.080
around just finding out what is hard about running Python


00:07:47.080 --> 00:07:50.700
and the other languages on Azure,


00:07:50.700 --> 00:07:54.320
on our tools, VS Code, Visual Studio,


00:07:54.320 --> 00:07:59.220
and how to get your code on the Cloud,


00:07:59.220 --> 00:08:00.820
and all the things that come along with it,


00:08:00.820 --> 00:08:05.040
everything from Docs to the actual components,


00:08:05.040 --> 00:08:10.000
the services and what's that full story and kind of where are those pain points and then,


00:08:10.000 --> 00:08:15.040
you know, working with those service teams to find out, you know, what makes sense to you,


00:08:15.040 --> 00:08:19.760
what feels, you know, feels like, you know, a Python developer should feel, you know.


00:08:19.760 --> 00:08:26.080
One of the early things that Anthony brought forward was, these are great, these, it's great


00:08:26.080 --> 00:08:30.720
that we have logs, but it's not how I want to see logs, right? So I think that, you know,


00:08:30.720 --> 00:08:34.800
that makes sense. And that's the, again, like you talked earlier, that's the fabric of,


00:08:34.800 --> 00:08:40.560
you know, a developer. Like I want to, when something goes wrong, we want to fix, you know,


00:08:40.560 --> 00:08:44.400
fix what it should look like so I can find that problem fast. And those are the types of things


00:08:44.400 --> 00:08:52.080
that we dig into and report up and help solve on our team. - Yeah, there's this story of when Scott


00:08:52.080 --> 00:08:56.480
Guthrie was put in charge of Azure. Scott Guthrie being the guy at Microsoft who was really


00:08:56.480 --> 00:09:00.960
responsible for a lot of the developer experience and took a bunch of the people on the team and


00:09:00.960 --> 00:09:07.760
had them all sit down and say, okay, get an app on Azure. And it was apparently a real struggle.


00:09:07.760 --> 00:09:12.960
A lot of people didn't succeed. And it was like, this is the problem. We need to fix this. And I


00:09:12.960 --> 00:09:17.040
think that made it a lot better in some ways, but it sounds to me like you're kind of doing a


00:09:17.040 --> 00:09:23.120
microcosm of that with Python with the two of you. - Yeah. Yeah. And we do it for many, you know,


00:09:23.120 --> 00:09:30.960
for every type of developer, every language stack in Python is important to us. For the very reasons


00:09:30.960 --> 00:09:34.560
that Anthony mentioned, some of our core components are actually written in Python.


00:09:34.560 --> 00:09:43.280
We appreciate that part of what we're doing and how those applications are written. And again,


00:09:43.280 --> 00:09:49.600
the perf, that's a very classic story that you bring up because it's often referenced and


00:09:49.600 --> 00:09:55.120
Probably a core reason why my team exists now does because we still have, you know, we have to solve those problems.


00:09:55.120 --> 00:10:11.360
Yeah, sure. Well, it's like we said, it's fabric, right? And if the fabric is scratchy or itchy, you don't want to wear it. And that's, that's a really big problem, right? You want to make this as smooth and seamless for people to get it right, without bouncing off the walls too badly.


00:10:11.360 --> 00:10:12.080
For sure.


00:10:12.680 --> 00:10:13.920
- For sure.


00:10:13.920 --> 00:10:16.520
Now, we're gonna talk about this project


00:10:16.520 --> 00:10:18.760
that you all are working on, which is super exciting


00:10:18.760 --> 00:10:20.880
about structuring Python applications


00:10:20.880 --> 00:10:23.140
and deploying them to Azure.


00:10:23.140 --> 00:10:28.140
Before we do, though, there's some other interesting folks


00:10:28.140 --> 00:10:31.040
working with you at Microsoft these days,


00:10:31.040 --> 00:10:32.280
a lot of core developers.


00:10:32.280 --> 00:10:36.040
Microsoft's doing a lot of stuff with Python these days


00:10:36.040 --> 00:10:37.560
in terms of the number of core developers.


00:10:37.560 --> 00:10:40.560
I mean, obviously, taking over GitHub


00:10:40.560 --> 00:10:45.560
is like a big step into the whole open source steps


00:10:45.560 --> 00:10:47.960
that you're all taking, but you know,


00:10:47.960 --> 00:10:50.040
the sort of the direct contribution to Python


00:10:50.040 --> 00:10:51.720
is super interesting.


00:10:51.720 --> 00:10:54.600
And the most significant one, I guess,


00:10:54.600 --> 00:10:57.200
that we could talk about is, when was this?


00:10:57.200 --> 00:11:01.500
A little while ago, we had this big announcement


00:11:01.500 --> 00:11:06.500
that back in 2018, Gita Van Rossum retires as BDFL.


00:11:06.500 --> 00:11:09.280
And that was it, right?


00:11:09.280 --> 00:11:11.040
The steering council was created.


00:11:11.040 --> 00:11:13.700
Governance thing was up in the air,


00:11:13.700 --> 00:11:16.300
but then figured out and seems to be really nailed.


00:11:16.300 --> 00:11:19.280
And then hung out at home for a while.


00:11:19.280 --> 00:11:21.380
COVID hit, you couldn't really travel, do too much.


00:11:21.380 --> 00:11:22.220
It's like, you know what?


00:11:22.220 --> 00:11:24.120
I kind of want to go back and do some interesting stuff.


00:11:24.120 --> 00:11:27.820
So now Python creator Guido van Rossum joins Microsoft


00:11:27.820 --> 00:11:30.980
and talk to him about that some and whatnot.


00:11:30.980 --> 00:11:34.120
But still very interesting.


00:11:34.120 --> 00:11:36.220
You guys are working with him.


00:11:36.220 --> 00:11:39.580
Most recently I spoke to him and Mark Shannon


00:11:39.580 --> 00:11:44.220
about the Shannon plan and making CPython five times faster.


00:11:44.220 --> 00:11:47.380
So, Anthony, you wanna give us sort of an update


00:11:47.380 --> 00:11:50.180
on the stuff you see going on?


00:11:50.180 --> 00:11:53.500
I know you might not be directly involved, but.


00:11:53.500 --> 00:11:56.540
- Yeah, we were actually testing


00:11:56.540 --> 00:11:58.420
and doing some of the PyCon.


00:11:58.420 --> 00:12:02.180
So some other Microsoft booths,


00:12:02.180 --> 00:12:04.100
so the team that they're talking about,


00:12:04.100 --> 00:12:09.500
So Guido, Mark Shannon, there's now seven people on that team.


00:12:09.500 --> 00:12:14.020
All core developers are working full-time, apart from Guido, Guido's part-time, but all


00:12:14.020 --> 00:12:19.780
the others working full-time on the Shannon plan and a whole bunch of other concepts.


00:12:19.780 --> 00:12:26.700
And what they're doing is basically making changes to CPython core to make it faster,


00:12:26.700 --> 00:12:33.900
targeting Python 3.11, which will be out in October this year, 3.12 and 3.13, some of


00:12:33.900 --> 00:12:36.660
the ideas are actually penciled for 3.13.


00:12:36.660 --> 00:12:38.160
- Right, this is like a five-year plan


00:12:38.160 --> 00:12:39.560
that Mark had laid out of,


00:12:39.560 --> 00:12:43.300
if we could make it 1.5x better each year,


00:12:43.300 --> 00:12:45.940
compounding is good, and we'll get fast.


00:12:45.940 --> 00:12:46.780
- Yeah, exactly.


00:12:46.780 --> 00:12:49.540
So some of the fruits of that are actually coming out


00:12:49.540 --> 00:12:50.840
in 3.11.


00:12:50.840 --> 00:12:54.200
So we were actually doing some live benchmarks


00:12:54.200 --> 00:12:58.140
and stuff at PyCon on different workloads


00:12:58.140 --> 00:12:59.140
and things like that.


00:12:59.140 --> 00:13:03.100
I'm seeing 25% performance gain


00:13:03.100 --> 00:13:05.740
on most workloads, which is awesome.


00:13:05.740 --> 00:13:09.220
And in some cases up to 60%.


00:13:09.220 --> 00:13:13.020
So it depends very much on what your workload is.


00:13:13.020 --> 00:13:14.980
But yeah, that's 3.11.


00:13:14.980 --> 00:13:18.860
But I think some of the bigger changes are coming in 3.12.


00:13:18.860 --> 00:13:21.700
So basically, there's a core team of people


00:13:21.700 --> 00:13:26.100
working full time now on CPython itself.


00:13:26.100 --> 00:13:27.340
And not a fork of CPython.


00:13:27.340 --> 00:13:29.740
They're working directly on CPython.


00:13:29.740 --> 00:13:34.200
- Right, as amazing as the stuff


00:13:34.200 --> 00:13:39.680
that was done over at say like Cinder and Instagram, right?


00:13:39.680 --> 00:13:41.460
Really interesting stuff, but it was kind of like,


00:13:41.460 --> 00:13:44.860
we forked it, here's a sort of interesting thing we built,


00:13:44.860 --> 00:13:47.340
take it or leave it, take some ideas, off it goes.


00:13:47.340 --> 00:13:48.900
It's really different to say, we're like,


00:13:48.900 --> 00:13:51.540
the next time you just, you know,


00:13:51.540 --> 00:13:55.220
apt upgrade or brew upgrade your Python,


00:13:55.220 --> 00:13:57.040
it just gets better, chocolatey upgrade,


00:13:57.040 --> 00:13:58.300
however you do it, right?


00:13:58.300 --> 00:14:03.300
- Yeah, definitely.


00:14:03.300 --> 00:14:04.020
So yeah, the 3.11 changes already,


00:14:04.020 --> 00:14:06.340
I think are going to benefit everybody.


00:14:06.340 --> 00:14:09.380
And getting people onto the newest version of Python


00:14:09.380 --> 00:14:11.620
is definitely going to help everyone in the long term anyway


00:14:11.620 --> 00:14:15.100
because it's got a list of other cool features.


00:14:15.100 --> 00:14:19.100
- It's pretty remarkable that after 30 years


00:14:19.100 --> 00:14:22.420
you can make one of these big step changes


00:14:22.420 --> 00:14:25.180
of that significant of a performance improvement.


00:14:23.420 --> 00:14:24.420
Yeah, definitely.


00:14:24.420 --> 00:14:28.700
Yeah, it's great to have a dedicated team working on this, but I mean, they're not the


00:14:28.700 --> 00:14:29.700
only people working on it.


00:14:29.700 --> 00:14:34.900
There are engineers from all over and other core developers working on contributions and


00:14:34.900 --> 00:14:35.900
stuff like that.


00:14:35.900 --> 00:14:42.020
But it's good that we can sponsor a full-time team to work just on this specific area.


00:14:42.020 --> 00:14:44.740
So Guido is kind of coordinating that.


00:14:44.740 --> 00:14:49.180
And then a lot of the ideas come from Mark Shannon's plan that was in the podcast last


00:14:49.180 --> 00:14:50.180
year.


00:14:50.180 --> 00:14:54.740
Do you know any of the story around the no-gil type of stuff?


00:14:54.740 --> 00:14:56.740
Yeah, there was more.


00:14:56.740 --> 00:15:02.020
There was sub-interpreters, there was Sam Gross's actual no-gil stuff.


00:15:02.020 --> 00:15:11.620
Yeah, there was actually an open space at PyCon on that specific topic and performance


00:15:11.620 --> 00:15:12.620
in general.


00:15:12.620 --> 00:15:16.160
And Sam Gross is there as well as the Cinder team,


00:15:16.160 --> 00:15:20.340
the team that works on Pyrodide


00:15:20.340 --> 00:15:22.260
and a lot of other core developers.


00:15:22.260 --> 00:15:24.620
And that was discussed in detail.


00:15:24.620 --> 00:15:26.700
I know that from what I've heard,


00:15:26.700 --> 00:15:30.580
I think Sam Gross is still working on his Noguil branch


00:15:30.580 --> 00:15:33.500
and trying to break it down into smaller chunks


00:15:33.500 --> 00:15:34.900
that can be merged,


00:15:34.900 --> 00:15:38.980
like smaller pieces that can be merged individually.


00:15:38.980 --> 00:15:40.700
'Cause there's quite a number of changes


00:15:40.700 --> 00:15:42.620
in order to get that whole thing done,


00:15:42.620 --> 00:15:44.240
but it's still carrying on.


00:15:44.240 --> 00:15:48.980
I guess it's 'cause it was targeted against


00:15:48.980 --> 00:15:50.840
what was now an older version of Python,


00:15:50.840 --> 00:15:51.680
then as Python continues to--


00:15:51.680 --> 00:15:53.580
- Right, 3.8 or something like that, yeah.


00:15:53.580 --> 00:15:56.140
- Yeah, so Syndia I think was 3.8


00:15:56.140 --> 00:15:57.940
and they're trying to get it to 3.9,


00:15:57.940 --> 00:16:00.980
but yeah, as Python continues to march forward,


00:16:00.980 --> 00:16:03.480
it gets harder and harder to upstream those things.


00:16:03.480 --> 00:16:06.060
- Yeah, still very exciting.


00:16:06.060 --> 00:16:07.700
So the reason I ask is,


00:16:07.700 --> 00:16:11.600
The work that Guido and Mark and team are doing


00:16:11.600 --> 00:16:14.640
is sort of orthogonal to that no-gil work, right?


00:16:14.640 --> 00:16:17.360
Like this is, a lot of stuff he's working on


00:16:17.360 --> 00:16:19.360
is just make it run faster single core.


00:16:19.360 --> 00:16:22.000
And then if you could unlock it for multi-core


00:16:22.000 --> 00:16:24.600
and each core, like it's a really nice


00:16:24.600 --> 00:16:25.960
multiplicative thing.


00:16:25.960 --> 00:16:29.780
You could easily see Python 20, 40 times faster.


00:16:29.780 --> 00:16:31.920
If you could say, well, you can scale it across 10 cores


00:16:31.920 --> 00:16:33.800
and it got four times faster.


00:16:33.800 --> 00:16:36.520
- Yeah, so Eric's still working on his sub-interpreters.


00:16:36.520 --> 00:16:41.520
Mark is conceptually looking through a JIT specification


00:16:41.520 --> 00:16:45.420
and they're working through specialized compilation


00:16:45.420 --> 00:16:47.800
as well at the moment, which is partially coming out


00:16:47.800 --> 00:16:50.540
in 3.11, but then more of that coming out in 3.12.


00:16:50.540 --> 00:16:54.140
So yeah, it's gonna just leaps and bounds,


00:16:54.140 --> 00:16:57.100
I think is in terms of performance difference.


00:16:57.100 --> 00:16:58.880
- That's so exciting.


00:16:58.880 --> 00:17:00.580
Last thing to ask on this topic


00:17:00.580 --> 00:17:02.900
and then we'll get to the main topic.


00:17:02.900 --> 00:17:05.140
Pigeon, Pigeon is somewhere involved


00:17:05.140 --> 00:17:06.180
in this performance thing.


00:17:06.180 --> 00:17:10.180
your JIT thing that we've had you on the show before


00:17:10.180 --> 00:17:11.580
to speak about and stuff.


00:17:11.580 --> 00:17:12.740
Is that involved in any way


00:17:12.740 --> 00:17:14.700
or is it sort of a parallel story?


00:17:14.700 --> 00:17:18.420
- Yeah, I'm sharing some of that with the team.


00:17:18.420 --> 00:17:22.100
So things that I learned in Pigeon that worked,


00:17:22.100 --> 00:17:24.500
what made a difference, and especially in the JIT,


00:17:24.500 --> 00:17:27.440
like where there were gains to be made.


00:17:27.440 --> 00:17:31.380
My desire really is that the learnings from Pigeon


00:17:31.380 --> 00:17:34.920
can be part of the future of CPython


00:17:34.920 --> 00:17:36.960
and then Pigeon isn't required.


00:17:36.960 --> 00:17:40.000
So if CPython gets its own JIT,


00:17:40.000 --> 00:17:42.760
and if some of the other stuff that Pigeon could do


00:17:42.760 --> 00:17:46.360
was part of CPython, then I think that's a win-win


00:17:46.360 --> 00:17:48.040
'cause you don't have to install something separately.


00:17:48.040 --> 00:17:50.640
If you just get the performance gains out of the box,


00:17:50.640 --> 00:17:54.040
then that's a win for everyone.


00:17:54.040 --> 00:17:55.800
- Yeah, absolutely.


00:17:55.800 --> 00:17:57.800
Oh, that's really encouraging


00:17:57.800 --> 00:18:00.160
to hear all those improvements coming.


00:18:00.160 --> 00:18:02.740
Awesome, thanks.


00:18:02.740 --> 00:18:06.260
- Well, let's start off our conversation here


00:18:06.260 --> 00:18:10.620
by just talking about deploying to the cloud, right?


00:18:10.620 --> 00:18:15.060
I mean, your goal really is to make deploying to Azure


00:18:15.060 --> 00:18:19.020
awesome, but let's just take a step back


00:18:19.020 --> 00:18:22.620
and talk about deploying to the cloud.


00:18:22.620 --> 00:18:24.320
When people talk about deployment,


00:18:24.320 --> 00:18:27.740
well, let's just say they have a FastAPI,


00:18:27.740 --> 00:18:30.820
Flash Django, whatever app, it has a database,


00:18:30.820 --> 00:18:32.100
they've developed it.


00:18:32.100 --> 00:18:35.140
And usually it's a huge gap to go from,


00:18:35.140 --> 00:18:36.540
well, I got it to work on my machine


00:18:36.540 --> 00:18:40.620
using SQLite and the tutorial.


00:18:40.620 --> 00:18:41.580
Now I need it to run.


00:18:41.580 --> 00:18:43.780
And they all said, well, you need to learn about SSL


00:18:43.780 --> 00:18:48.340
and servers and Nginx and all these things.


00:18:48.340 --> 00:18:50.900
Like, whoa, whoa, whoa, I don't even know Linux.


00:18:50.900 --> 00:18:53.660
This is like a big step to take.


00:18:53.660 --> 00:18:56.700
All right, so how do you guys, Shane,


00:18:56.700 --> 00:19:01.260
how do you think about sort of the spectrum of options


00:19:01.260 --> 00:19:03.500
and how people are doing it.


00:19:03.500 --> 00:19:06.260
- Yeah, it's interesting because,


00:19:06.260 --> 00:19:11.540
when you're creating that on your own machine,


00:19:11.540 --> 00:19:13.060
that's the environment, right?


00:19:13.060 --> 00:19:14.580
That you have to worry about.


00:19:14.580 --> 00:19:18.420
And even when we are deploying to on-prem machines,


00:19:18.420 --> 00:19:21.340
at least we could walk over and touch the,


00:19:21.340 --> 00:19:23.020
for you rack that was there.


00:19:23.020 --> 00:19:25.580
We knew kind of what it was running on.


00:19:25.580 --> 00:19:27.460
- Right, and a lot of times you plugged into,


00:19:27.460 --> 00:19:29.700
somebody had a database for you.


00:19:29.700 --> 00:19:32.060
you ask them to create the database.


00:19:32.060 --> 00:19:32.900
- Right.


00:19:32.900 --> 00:19:37.260
- They ask you, you plead for a database to be set up


00:19:37.260 --> 00:19:38.540
and they give you a connection string


00:19:38.540 --> 00:19:39.980
and then that's that, right?


00:19:39.980 --> 00:19:40.900
- Yeah, yeah.


00:19:40.900 --> 00:19:44.460
And here's your connection string and you're on your way.


00:19:44.460 --> 00:19:47.960
I think the thought of now is,


00:19:47.960 --> 00:19:49.820
how do I set this?


00:19:49.820 --> 00:19:51.320
How do I provision it?


00:19:51.320 --> 00:19:58.860
How do I deploy my code to the stuff


00:19:58.860 --> 00:20:00.860
that I've now provisioned there?


00:20:00.860 --> 00:20:02.260
How do I make all the connections


00:20:02.260 --> 00:20:05.380
between my front end and my middle tier


00:20:05.380 --> 00:20:07.980
and my backend stuff?


00:20:07.980 --> 00:20:11.600
How do I secure that with all my environment variables


00:20:11.600 --> 00:20:15.500
and connection strings and monitoring is there?


00:20:15.500 --> 00:20:18.380
I mean, then how do I just,


00:20:18.380 --> 00:20:22.280
as a developer for me, I go, that's a great,


00:20:22.280 --> 00:20:23.340
I wanna do that one time.


00:20:23.340 --> 00:20:25.500
And then really I just wanna change my code


00:20:25.500 --> 00:20:26.980
and check in my code, right?


00:20:26.980 --> 00:20:28.900
I just kind of want it to run.


00:20:28.900 --> 00:20:29.940
Yeah, that's for me.


00:20:29.940 --> 00:20:33.220
That's I want to get to that point.


00:20:33.220 --> 00:20:39.580
And I think even if I have a very few about components,


00:20:39.580 --> 00:20:42.820
I've had meetings at companies that lasted three or four weeks


00:20:42.820 --> 00:20:46.620
just talking about how are we going to set all this stuff up.


00:20:46.620 --> 00:20:50.380
And the promise of the cloud is, hey, we can do this super fast.


00:20:50.380 --> 00:20:53.740
And sometimes that's not so much true.


00:20:53.740 --> 00:20:55.420
It's still very challenging.


00:20:55.420 --> 00:21:04.300
Yeah, previously it was, I need a server in our data center to be provisioned and we got


00:21:04.300 --> 00:21:08.180
to order it from Dell or wherever, wait for it to come.


00:21:08.180 --> 00:21:11.300
And now it's really easy to go to the cloud and get it, but there's a lot of decisions


00:21:11.300 --> 00:21:12.300
to make.


00:21:12.300 --> 00:21:14.380
Is it, are we getting VMs?


00:21:14.380 --> 00:21:20.900
And then it's my job to run shell scripts to set up NGINX and other things.


00:21:20.900 --> 00:21:23.340
How do I, what's the topography of that?


00:21:23.340 --> 00:21:24.940
How do I set that up for possibly,


00:21:24.940 --> 00:21:27.960
what if we need to scale the web end or whatever?


00:21:27.960 --> 00:21:31.380
Maybe we use Docker, maybe we use a platform as a service.


00:21:31.380 --> 00:21:33.180
Right, that could be a long conversation


00:21:33.180 --> 00:21:36.740
'cause ultimately it's somebody's responsibility.


00:21:36.740 --> 00:21:40.140
If it doesn't work out right, they're going,


00:21:40.140 --> 00:21:42.720
you know, you're gonna have to come in on the weekend


00:21:42.720 --> 00:21:44.260
and fix it.


00:21:44.260 --> 00:21:45.100
- Yeah.


00:21:45.100 --> 00:21:46.060
- Or be at least responsible


00:21:46.060 --> 00:21:47.500
to make sure it keeps running, right?


00:21:47.500 --> 00:21:49.300
- Yeah, who do I call when it breaks?


00:21:49.300 --> 00:21:51.940
- Yeah, exactly.


00:21:51.940 --> 00:21:53.200
- For sure.


00:21:53.200 --> 00:21:54.400
- Okay. - Yeah.


00:21:54.400 --> 00:21:58.400
- So where are you seeing people


00:21:58.400 --> 00:21:59.880
who you're talking to a lot going?


00:21:59.880 --> 00:22:02.980
I mean, we've got on, I think on one far end,


00:22:02.980 --> 00:22:04.700
like at the very far end,


00:22:04.700 --> 00:22:06.940
like if you turn it to either negative one or 11,


00:22:06.940 --> 00:22:09.840
depending on which side you consider this to be on,


00:22:09.840 --> 00:22:12.860
bare metal, that's very rare these days,


00:22:12.860 --> 00:22:16.920
but VMs and then Docker, Kubernetes,


00:22:16.920 --> 00:22:19.160
platform as a service maybe,


00:22:19.160 --> 00:22:20.980
maybe some more functions,


00:22:20.980 --> 00:22:22.220
- Yeah, yeah. - Status functions


00:22:22.220 --> 00:22:23.060
living there?


00:22:23.060 --> 00:22:23.900
- Yeah, VMs.


00:22:23.900 --> 00:22:25.420
- Actually, usually 100% alone, but.


00:22:25.420 --> 00:22:29.260
- I think VMs are still very popular with some companies


00:22:29.260 --> 00:22:31.820
who are just trying to get to the cloud, right?


00:22:31.820 --> 00:22:34.260
It's very easy to kind of park your car


00:22:34.260 --> 00:22:35.780
in somebody else's garage, right?


00:22:35.780 --> 00:22:38.620
I think that's, okay, it's there.


00:22:38.620 --> 00:22:40.260
- Yeah, it solves the biggest problem is


00:22:40.260 --> 00:22:42.820
how do I get a reliable internet connection that's fast


00:22:42.820 --> 00:22:45.540
and a server and network infrastructure


00:22:45.540 --> 00:22:46.780
that I don't have to take care of?


00:22:46.780 --> 00:22:50.660
- Yeah, I think those are still, it's a very viable option


00:22:51.780 --> 00:22:53.660
for some folks.


00:22:53.660 --> 00:22:58.660
The PaaS option is, again,


00:22:58.660 --> 00:23:02.020
most companies can still run


00:23:02.020 --> 00:23:04.680
a very sophisticated system on PaaS.


00:23:04.680 --> 00:23:08.780
The one thing that I'm seeing right now


00:23:08.780 --> 00:23:13.780
is that companies are wanting to,


00:23:13.780 --> 00:23:16.380
and even small companies,


00:23:16.380 --> 00:23:17.980
or even they hear Kubernetes,


00:23:17.980 --> 00:23:19.100
they hear the promise of it,


00:23:19.100 --> 00:23:20.860
it's scalability, it's responsive,


00:23:20.860 --> 00:23:21.780
it's self repairing.


00:23:21.780 --> 00:23:23.220
- Zero downtime.


00:23:23.220 --> 00:23:25.000
- Yeah, no downtime, scale to zero,


00:23:25.000 --> 00:23:28.580
like all the buzziness that comes with it.


00:23:28.580 --> 00:23:32.140
And there's the memes that go around with


00:23:32.140 --> 00:23:35.880
the tiny box on a tractor trailer.


00:23:35.880 --> 00:23:37.540
Like I put my blog on Kubernetes.


00:23:37.540 --> 00:23:41.140
You don't need it, but everybody wants it


00:23:41.140 --> 00:23:42.820
and they're not sure why.


00:23:42.820 --> 00:23:45.780
And then it's just cost prohibitive


00:23:45.780 --> 00:23:49.620
in both manpower and management and cognitive load


00:23:49.620 --> 00:23:50.840
and all of the things.


00:23:50.840 --> 00:23:54.260
So there's that aspect of it.


00:23:54.260 --> 00:23:58.540
And then we wanna find a place that is somewhere in between,


00:23:58.540 --> 00:24:01.680
like what if I could have all the promise of Kubernetes,


00:24:01.680 --> 00:24:03.660
but not have to learn Kubernetes, right?


00:24:03.660 --> 00:24:05.660
And that's another thing that we were talking about


00:24:05.660 --> 00:24:08.100
with things like Azure Container Apps,


00:24:08.100 --> 00:24:12.820
and being able to have kind of the best of both worlds.


00:24:12.820 --> 00:24:13.660
So--


00:24:13.660 --> 00:24:14.500
- Right, and looking forward,


00:24:14.500 --> 00:24:15.420
I don't wanna get into it yet,


00:24:15.420 --> 00:24:16.700
but just to give people a preview,


00:24:16.700 --> 00:24:21.020
is you guys have built CLI tools for Python


00:24:21.020 --> 00:24:24.820
and some templates that kind of help people realize


00:24:24.820 --> 00:24:26.900
that goal much more quickly than just,


00:24:26.900 --> 00:24:28.420
all right, well, I guess I'm gonna set up


00:24:28.420 --> 00:24:32.780
a Kubernetes cluster and nodes and all that kind of stuff.


00:24:32.780 --> 00:24:34.020
- Yeah, exactly.


00:24:34.020 --> 00:24:35.940
- Yeah, yeah, yeah.


00:24:35.940 --> 00:24:39.460
Okay, well, Docker's an interesting one, right?


00:24:39.460 --> 00:24:42.100
To do Kubernetes, you gotta do Docker, right?


00:24:42.100 --> 00:24:43.900
Or you gotta do containers at least.


00:24:43.900 --> 00:24:48.900
There's the look how easy it is to run Docker.


00:24:48.900 --> 00:24:54.020
I just, you know, get the image,


00:24:54.020 --> 00:24:56.620
Docker run, off it goes,


00:24:56.620 --> 00:25:00.140
unless you've got multiple tiers like many apps do, right?


00:25:00.140 --> 00:25:02.340
I've got like a database layer,


00:25:02.340 --> 00:25:07.020
maybe a background worker service for like emails


00:25:07.020 --> 00:25:08.820
and other long running jobs.


00:25:08.820 --> 00:25:10.780
And then all of a sudden coordination


00:25:10.780 --> 00:25:12.020
that becomes really hard.


00:25:13.740 --> 00:25:20.660
Yeah, I'd say that like, kind of where people start off with containerization is the Python


00:25:20.660 --> 00:25:22.060
app itself.


00:25:22.060 --> 00:25:29.380
So the Python code, whether that's in like a Whiskey application or using ASCII or something,


00:25:29.380 --> 00:25:32.460
so that's like Django, Flask, FastAPI.


00:25:32.460 --> 00:25:38.700
So like running that in a container is a great place to start.


00:25:38.700 --> 00:25:40.820
But hardly ever is that the whole application.


00:25:40.820 --> 00:25:46.940
And just Flask and Django alone, you need some sort of web app at the front end, like


00:25:46.940 --> 00:25:50.140
a HTTP server, like Nginx or something.


00:25:50.140 --> 00:25:52.820
And then you need the distribution to the WSGI.


00:25:52.820 --> 00:26:00.020
So you need G-Unicorn or Uvicorn or Hypercorn or one of the other corns to connect between


00:26:00.020 --> 00:26:03.940
the HTTP front end and the back.


00:26:03.940 --> 00:26:08.980
And then once you've got that in place, you're like, "Okay, I need to configure my SSL certificates


00:26:08.980 --> 00:26:10.580
and my DNS and stuff."


00:26:10.580 --> 00:26:18.280
So you can do that, but I think people start to try and jam everything into one container.


00:26:18.280 --> 00:26:19.280
And that's where it kind of gets...


00:26:19.280 --> 00:26:20.280
Until it absolutely explodes.


00:26:20.280 --> 00:26:22.700
You're like, all right, it just won't take it anymore, right?


00:26:22.700 --> 00:26:27.300
But preserve that, just call run on it as long as you can, right?


00:26:27.300 --> 00:26:28.300
Yeah.


00:26:28.300 --> 00:26:29.940
That's what people I imagine are trying, yeah.


00:26:29.940 --> 00:26:32.500
Yeah, and they're not supposed to be persistent.


00:26:32.500 --> 00:26:37.620
Like, you know, containers are supposed to be immutable, but you can attach storage to


00:26:37.620 --> 00:26:43.420
them which is where it gets tricky with databases because really running something like Postgres


00:26:43.420 --> 00:26:49.140
in Docker you can but like it's not going to be particularly fast and you've got all


00:26:49.140 --> 00:26:55.780
these extra challenges of if the image stops then what did you just lose.


00:26:55.780 --> 00:27:02.120
So yeah I think containerization is great to get some of the Python environment complexities


00:27:02.120 --> 00:27:07.140
like you know you've got a virtual environment to configure how was that installed what version


00:27:07.140 --> 00:27:08.140
of Python.


00:27:08.140 --> 00:27:11.940
So there's like all the bits of Python that are specific to getting a Python app running


00:27:11.940 --> 00:27:14.560
consistently in one place and another.


00:27:14.560 --> 00:27:17.940
So Docker is great for that and containerizing it is great for that.


00:27:17.940 --> 00:27:23.380
But you often find yourself needing more than one container, which is where things start


00:27:23.380 --> 00:27:30.780
to get complicated because then it's like, okay, I've got Redis in there, I want to run


00:27:30.780 --> 00:27:35.940
Nginx in one container, I want to run my app in another.


00:27:35.940 --> 00:27:39.740
So then how do you coordinate all that stuff?


00:27:39.740 --> 00:27:44.220
- Right, and just how do I keep them connected, right?


00:27:44.220 --> 00:27:47.940
Because in regular non-Docker world,


00:27:47.940 --> 00:27:51.500
you just say my Redis connection string is this,


00:27:51.500 --> 00:27:54.060
my database connection string is that,


00:27:54.060 --> 00:27:57.460
and GenX says I route traffic over either this Unix socket


00:27:57.460 --> 00:28:02.260
or through this HTTP, TCP socket,


00:28:02.260 --> 00:28:04.500
but those are not stable.


00:28:04.500 --> 00:28:07.660
as these Docker images come and go separately, right?


00:28:07.660 --> 00:28:10.140
It gets tricky to connect them still.


00:28:10.140 --> 00:28:12.860
- Yeah, there's the connection and the coordination of it.


00:28:12.860 --> 00:28:15.420
And things like Docker compose, I think helps


00:28:15.420 --> 00:28:17.500
with that there. - They do, yeah.


00:28:17.500 --> 00:28:23.180
- Anthony mentioned a very valid point


00:28:23.180 --> 00:28:24.940
around databases and containers.


00:28:24.940 --> 00:28:27.860
I think when container development started


00:28:27.860 --> 00:28:29.420
to kind of hockey stick a little bit,


00:28:29.420 --> 00:28:31.900
I can't tell you how many times I answered the question,


00:28:31.900 --> 00:28:33.940
should I run my database in a container?


00:28:33.940 --> 00:28:36.940
And I was like, well, no.


00:28:36.940 --> 00:28:39.540
And then it was like, well, why not?


00:28:39.540 --> 00:28:41.380
And I was like, okay, here's the 15 reasons


00:28:41.380 --> 00:28:42.220
why you should never do that.


00:28:42.220 --> 00:28:45.460
- Yeah, but I go to my framework and write in the tutorial


00:28:45.460 --> 00:28:46.980
that shows me how to run Postgres.


00:28:46.980 --> 00:28:51.980
- Yeah, it was more like, what happens when it dies?


00:28:51.980 --> 00:28:53.860
And they go, oh no, you mean I lose my data?


00:28:53.860 --> 00:28:56.220
Yes, so don't do that.


00:28:56.220 --> 00:28:59.940
But they serve very well for emulating


00:29:01.040 --> 00:29:03.920
those big cloud managed services like Redis


00:29:03.920 --> 00:29:06.120
and like Postgres and stuff like that,


00:29:06.120 --> 00:29:08.420
they would typically run in a managed service,


00:29:08.420 --> 00:29:13.840
instead of trying to have your entire world,


00:29:13.840 --> 00:29:16.240
if you will, running on your local machine.


00:29:16.240 --> 00:29:19.620
And then the other part of that is, how many is too many?


00:29:19.620 --> 00:29:26.420
The microservices type of scenario of,


00:29:26.420 --> 00:29:29.200
are you gonna run 200 individual containers


00:29:29.200 --> 00:29:32.760
on your local machine, there is a cap


00:29:32.760 --> 00:29:34.660
which where it's just too much.


00:29:34.660 --> 00:29:42.840
- True, and we're even seeing some sort of swinging


00:29:42.840 --> 00:29:45.360
of the pendulum, I guess you would call it,


00:29:45.360 --> 00:29:48.600
back to articles like, give me my monolith back.


00:29:48.600 --> 00:29:50.320
(laughs)


00:29:50.320 --> 00:29:52.480
Life just got too hard and now,


00:29:52.480 --> 00:29:56.240
my personal philosophy and I'm not suggesting


00:29:56.240 --> 00:29:57.480
anyone else has to adopt it.


00:29:57.480 --> 00:29:58.760
But when I think about these things,


00:29:58.760 --> 00:30:00.880
like microservices versus monoliths,


00:30:00.880 --> 00:30:05.160
and Docker and Kubernetes versus more simple things,


00:30:05.160 --> 00:30:08.880
is I try to keep the complex parts


00:30:08.880 --> 00:30:10.920
in the areas that I'm really good at,


00:30:10.920 --> 00:30:12.120
and not push them to areas


00:30:12.120 --> 00:30:13.320
that I have little experience with.


00:30:13.320 --> 00:30:16.000
Like, I don't have a great DevOps background,


00:30:16.000 --> 00:30:18.480
so I don't wanna push tons of the complexity to DevOps,


00:30:18.480 --> 00:30:19.640
and keep the code simple,


00:30:19.640 --> 00:30:20.880
'cause I can handle complex code,


00:30:20.880 --> 00:30:23.120
but I can't handle complex DevOps.


00:30:23.120 --> 00:30:24.380
Not right now, anyway, you know?


00:30:24.380 --> 00:30:26.720
So for me, I kinda try to think of the balance


00:30:26.720 --> 00:30:28.760
like what works for me, you know?


00:30:28.760 --> 00:30:33.760
- I literally saw an example where somebody was saying,


00:30:33.760 --> 00:30:37.080
"I manage all of my configuration in its own repo


00:30:37.080 --> 00:30:39.280
and then that sucks into my DevOps pipeline."


00:30:39.280 --> 00:30:40.880
I was like, "What is happening?"


00:30:40.880 --> 00:30:44.800
I'm not even gonna talk about that.


00:30:44.800 --> 00:30:46.920
You know, I'm sure that works for you.


00:30:46.920 --> 00:30:49.320
But like you said, unless you really understand


00:30:49.320 --> 00:30:52.600
that level of, you know, complexity.


00:30:52.600 --> 00:30:56.000
- And if you specialize in that area,


00:30:56.000 --> 00:30:59.080
then maybe that's exactly your secret sauce.


00:30:59.080 --> 00:30:59.920
- Yeah, yeah.


00:30:59.920 --> 00:31:02.800
- Don't like see someone else be doing that


00:31:02.800 --> 00:31:03.920
and go, I should just do that


00:31:03.920 --> 00:31:05.760
'cause it's working for them.


00:31:05.760 --> 00:31:08.000
Maybe, but it's not a clear, I should just go that way.


00:31:08.000 --> 00:31:09.520
I think it's the story.


00:31:09.520 --> 00:31:11.920
- Yeah, and I think just like in a coding world,


00:31:11.920 --> 00:31:14.240
like we can use things like interfaces


00:31:14.240 --> 00:31:16.920
and polymorphism to the nth degree.


00:31:16.920 --> 00:31:20.640
And for a simplistic programmer,


00:31:20.640 --> 00:31:22.840
examples are going, why are you doing that?


00:31:22.840 --> 00:31:25.320
'Cause I can just do it in a single file, thanks.


00:31:25.320 --> 00:31:26.220
- Exactly.


00:31:26.220 --> 00:31:29.000
Why do we have like dependency injection registries


00:31:29.000 --> 00:31:30.400
when it's 50 lines long?


00:31:30.400 --> 00:31:32.640
Like I really just don't, it's just not.


00:31:32.640 --> 00:31:34.320
- It's hello world, man.


00:31:34.320 --> 00:31:35.800
- Yeah, exactly, exactly.


00:31:35.800 --> 00:31:37.880
It's just a manuscript script.


00:31:37.880 --> 00:31:40.720
All right, so maybe that probably sets the stage


00:31:40.720 --> 00:31:43.880
a little bit for the work that you two


00:31:43.880 --> 00:31:46.000
have been doing in this project we're gonna talk about.


00:31:46.000 --> 00:31:47.760
- Sure, sure.


00:31:47.760 --> 00:31:51.640
- But one more predecessor, bit of history.


00:31:51.640 --> 00:31:55.160
So one of the notable things about the Azure CLI


00:31:55.160 --> 00:31:56.800
that is the CLI that everyone uses


00:31:56.800 --> 00:31:58.920
when they're not working in the crazy,


00:31:58.920 --> 00:32:02.900
bladed, very full management portal,


00:32:02.900 --> 00:32:05.660
is built in Python, right?


00:32:05.660 --> 00:32:08.440
- Yes, it is.


00:32:08.440 --> 00:32:10.400
- Yes, but it's not that that actually


00:32:10.400 --> 00:32:11.920
makes any difference for Python people.


00:32:11.920 --> 00:32:14.600
It's just an interesting detail.


00:32:14.600 --> 00:32:19.260
But that one is not focused as much on helping developers


00:32:19.260 --> 00:32:22.720
get their code out as maybe helping IT, DevOps,


00:32:22.720 --> 00:32:26.040
side of the world, DevOps on Azure, right?


00:32:26.040 --> 00:32:31.040
- Right, I would say it's primary goal is referred to


00:32:31.040 --> 00:32:36.720
as kind of a management, you know, ops plane functionality.


00:32:36.720 --> 00:32:41.320
There is some capabilities in there for, you know,


00:32:41.320 --> 00:32:44.480
pushing up, you know, simplistic, you know,


00:32:44.480 --> 00:32:47.740
web applications, there's a web app up command


00:32:47.740 --> 00:32:50.800
where I can kind of get, you know, a simple page up


00:32:50.800 --> 00:32:53.080
and there's some static web apps capabilities


00:32:53.080 --> 00:32:53.940
within that command.


00:32:53.940 --> 00:32:58.800
But when you get into a full kind of job to be done


00:32:58.800 --> 00:33:03.640
for a developer focused type of activity


00:33:03.640 --> 00:33:07.880
that does not serve that type of persona.


00:33:07.880 --> 00:33:09.380
- Sure.


00:33:09.380 --> 00:33:12.400
All right, well, that brings us to your project.


00:33:12.400 --> 00:33:14.240
Does your project have a name?


00:33:14.240 --> 00:33:16.920
Just so people know, at the time of us talking about this,


00:33:16.920 --> 00:33:18.880
this is not yet released,


00:33:18.880 --> 00:33:21.160
but at the time people are going to be listening to it,


00:33:21.160 --> 00:33:22.200
it will be released.


00:33:22.200 --> 00:33:25.040
And so I'm kind of behind the scenes.


00:33:25.040 --> 00:33:27.160
Maybe I can pull up your screen here


00:33:27.160 --> 00:33:29.480
and we can start from there.


00:33:29.480 --> 00:33:33.620
- We'll call it the lowercase Azure Developer CLI.


00:33:33.620 --> 00:33:35.920
Because if it's uppercase,


00:33:35.920 --> 00:33:37.280
I think that means it has a name.


00:33:37.280 --> 00:33:41.160
So we'll say it's the lowercase Azure Developer CLI.


00:33:41.160 --> 00:33:46.160
It's a standalone install,


00:33:46.680 --> 00:33:51.680
which is command is AZD or AZD,


00:33:51.680 --> 00:33:52.840
depending on where you're from.


00:33:52.840 --> 00:33:54.840
- Don't go into LNA, Anthony.


00:33:54.840 --> 00:33:55.680
- Yeah.


00:33:55.680 --> 00:33:58.240
- And much of the other rest of the English speaking world.


00:33:58.240 --> 00:34:00.080
- Yeah, everywhere but the US.


00:34:00.080 --> 00:34:05.960
And its primary goal is to, you know,


00:34:05.960 --> 00:34:10.160
make it easy for developers to get up and running


00:34:10.160 --> 00:34:13.720
with both infrastructure and code, you know,


00:34:13.720 --> 00:34:17.760
in Azure based on, at least initially,


00:34:17.760 --> 00:34:20.000
we've got some out-of-the-box templates


00:34:20.000 --> 00:34:26.100
to help establish kind of a getting started


00:34:26.100 --> 00:34:28.960
kind of to-do app,


00:34:28.960 --> 00:34:32.940
which at least in this particular example,


00:34:32.940 --> 00:34:38.860
we have a to-do application that's got a Python FastAPI,


00:34:40.640 --> 00:34:46.800
middle tier with a React JS front end.


00:34:46.800 --> 00:34:50.360
Then the back end is supported with


00:34:50.360 --> 00:34:55.640
Azure Cosmos DB with Mongo API.


00:34:55.640 --> 00:34:59.880
>> The way it's going to go now is it will have the Mongo API,


00:34:59.880 --> 00:35:04.520
but the Mongo API can be pointed at Cosmos DB,


00:35:04.520 --> 00:35:07.200
your document database in Azure, is that correct?


00:35:07.200 --> 00:35:08.240
>> Correct.


00:35:08.240 --> 00:35:10.740
Let me ask another really quick question on that.


00:35:10.740 --> 00:35:15.740
What's the interaction with the Mongo API?


00:35:15.740 --> 00:35:17.240
Is there an ODM they're using?


00:35:17.240 --> 00:35:20.160
Is it just PyMongo or rather motor or something like that?


00:35:20.160 --> 00:35:23.520
>> Yeah. This app was built within ODM.


00:35:23.520 --> 00:35:25.240
It was built with Beanie.


00:35:25.240 --> 00:35:28.160
>> I love Beanie. I converted


00:35:28.160 --> 00:35:31.320
the talkpython.fm and pythonbytes.fm over to it.


00:35:31.320 --> 00:35:34.240
The really big one left for me is the training site,


00:35:34.240 --> 00:35:37.320
which is massive, but it's getting some Beanie on it as well.


00:35:37.320 --> 00:35:41.900
Yes, so for like a fully async ASCII app on FastAPI,


00:35:41.900 --> 00:35:45.540
Beanies is a great option because it's like async from end to end


00:35:45.540 --> 00:35:49.740
and it uses the async motor client for talking to Mongo.


00:35:49.740 --> 00:35:51.740
So yes, super fast.


00:35:51.740 --> 00:35:54.740
So that's what we've built for the to-do app,


00:35:54.740 --> 00:35:56.740
which is like the demo application.


00:35:56.740 --> 00:36:00.340
Yeah, so let me see if I can summarize this for folks


00:36:00.340 --> 00:36:02.340
before we dive into more detail.


00:36:02.340 --> 00:36:07.100
Basically, you guys have built this full stack-ish,


00:36:07.100 --> 00:36:08.540
I guess full stack fits.


00:36:08.540 --> 00:36:14.460
Full stack, FastAPI, document, database, JavaScript front end


00:36:14.460 --> 00:36:18.180
app that sort of natively integrates in the ways


00:36:18.180 --> 00:36:20.380
that you would expect it to in Azure.


00:36:20.380 --> 00:36:23.220
Not just you can get it up there and get it to run,


00:36:23.220 --> 00:36:26.620
but it's got different sections.


00:36:26.620 --> 00:36:28.500
It uses a hosted database.


00:36:28.500 --> 00:36:30.140
It integrates with CI/CD.


00:36:30.140 --> 00:36:32.580
It has tests that plug into all those kinds of things,


00:36:32.580 --> 00:36:33.660
and so on.


00:36:33.660 --> 00:36:36.700
And so you can take that and sort of publish that


00:36:36.700 --> 00:36:40.480
to Azure, but then of course you can just use it as a prototype to say, well,


00:36:40.480 --> 00:36:44.440
we don't need to do, we need this other thing. So we'll swap out whatever.


00:36:44.440 --> 00:36:49.840
Yeah. Yeah. Yeah. I would say there's a, there's a couple of,


00:36:49.840 --> 00:36:54.580
key key components. you know, we do all of our,


00:36:54.580 --> 00:36:59.040
um, commands, again, it's command line based. We,


00:36:59.040 --> 00:37:03.240
we're focused on a CLI first approach, to this,


00:37:03.280 --> 00:37:04.360
for a couple of reasons.


00:37:04.360 --> 00:37:06.920
A, it feels natural, you know,


00:37:06.920 --> 00:37:08.800
for a lot of developers who kind of


00:37:08.800 --> 00:37:10.500
are on a terminal constantly,


00:37:10.500 --> 00:37:14.160
but also allows, you know,


00:37:14.160 --> 00:37:17.680
if VS Code wants to build an experience on top of it,


00:37:17.680 --> 00:37:20.420
if PyTorch wanted to build an experience on top of it,


00:37:20.420 --> 00:37:21.560
they can, you know,


00:37:21.560 --> 00:37:24.440
because they just call into those same hooks,


00:37:24.440 --> 00:37:26.440
but also--


00:37:26.440 --> 00:37:30.820
- Can we consume the CLI as a Python library?


00:37:32.980 --> 00:37:36.780
- Well, that's a good question because we are also looking


00:37:36.780 --> 00:37:41.780
at making this an extension inside of the core Azure CLI.


00:37:41.780 --> 00:37:46.700
So we have actually wrapped this as a Python extension


00:37:46.700 --> 00:37:47.620
for them.


00:37:47.620 --> 00:37:48.460
Yeah.


00:37:48.460 --> 00:37:50.860
- You can always sub process it around all day you want,


00:37:50.860 --> 00:37:51.820
but.


00:37:51.820 --> 00:37:54.860
- Yeah, it's written as in go.


00:37:54.860 --> 00:37:55.700
- Okay, got it.


00:37:55.700 --> 00:37:58.260
- Yeah, so it's a super lightweight.


00:37:58.260 --> 00:37:59.980
It's like five and a half megs.


00:37:59.980 --> 00:38:00.940
It's really small.


00:38:02.220 --> 00:38:04.920
And once you have the binary, you have it.


00:38:04.920 --> 00:38:08.220
That is one of the true beauties of Go.


00:38:08.220 --> 00:38:09.140
- Yeah.


00:38:09.140 --> 00:38:09.980
- Yeah.


00:38:09.980 --> 00:38:13.140
- So the other parts of it, like you mentioned,


00:38:13.140 --> 00:38:17.140
if there's pieces of this, of the app,


00:38:17.140 --> 00:38:20.660
if I back up one section here,


00:38:20.660 --> 00:38:25.660
is that a lot of these samples that we come across,


00:38:25.660 --> 00:38:29.220
they are a hello world, they're a very simplistic app.


00:38:29.220 --> 00:38:31.420
And once you kind of go through the process,


00:38:31.420 --> 00:38:33.460
when you're all done with it, you're like,


00:38:33.460 --> 00:38:37.320
okay, this is great, I built my Hello World app, now what?


00:38:37.320 --> 00:38:43.700
This is an opinionated structure


00:38:43.700 --> 00:38:48.280
that allows you to swap out components, build upon it,


00:38:48.280 --> 00:38:50.060
like I can take out the FastAPI


00:38:50.060 --> 00:38:51.980
if I wanna use Flask or Django or whatever,


00:38:51.980 --> 00:38:53.980
I can swap that out and do it.


00:38:53.980 --> 00:38:57.300
Swap in Postgres if I'd like.


00:38:57.300 --> 00:38:59.580
We have a infrastructure as code.


00:38:59.580 --> 00:39:03.120
Right now we're using Bicep to do that,


00:39:03.120 --> 00:39:05.220
and in the future we'll support things like


00:39:05.220 --> 00:39:08.780
Terraform and other IAC providers.


00:39:08.780 --> 00:39:12.540
That's just how we would swap out any of the infrastructure.


00:39:12.540 --> 00:39:13.180
>> Right.


00:39:13.180 --> 00:39:15.440
>> This particular sample,


00:39:15.440 --> 00:39:20.660
we are targeting the Azure Container Apps as our target host,


00:39:20.660 --> 00:39:22.900
but we do support PaaS,


00:39:22.900 --> 00:39:26.260
and in the future also things like Kubernetes.


00:39:26.660 --> 00:39:32.180
>> Yeah. Also, in terms of how Cloud-native is it?


00:39:32.180 --> 00:39:34.020
If you don't scroll away, just come back really quick.


00:39:34.020 --> 00:39:34.900
>> Okay. Sorry.


00:39:34.900 --> 00:39:39.060
>> Yeah. In terms of just how Cloud-native it is,


00:39:39.060 --> 00:39:41.660
how much does it reach into all those things?


00:39:41.660 --> 00:39:44.200
Basically, four areas that are interesting.


00:39:44.200 --> 00:39:46.300
Azure Container Apps.


00:39:46.300 --> 00:39:51.300
Anthony, let me know what it sounds like.


00:39:51.300 --> 00:39:54.540
You've got maybe an Nginx type of container,


00:39:54.540 --> 00:39:57.820
And then you've got one that runs


00:39:57.820 --> 00:40:01.540
UVA Corn, FastAPI, Workers.


00:40:01.540 --> 00:40:04.580
- Yeah, so there's two containers in this example,


00:40:04.580 --> 00:40:07.620
but like, yeah, Azure Container Apps


00:40:07.620 --> 00:40:09.860
is more where you've got a collection of containers


00:40:09.860 --> 00:40:11.340
that form an application,


00:40:11.340 --> 00:40:14.220
like if you put that in a Docker Compose or something.


00:40:14.220 --> 00:40:15.060
- Yeah.


00:40:15.060 --> 00:40:17.020
- And then we kind of spin those up for you


00:40:17.020 --> 00:40:18.060
and manage that for you,


00:40:18.060 --> 00:40:20.880
so you don't have to think of or plan about


00:40:20.880 --> 00:40:22.780
things like Kubernetes.


00:40:22.780 --> 00:40:27.420
And it does SSL certificates and DNS


00:40:27.420 --> 00:40:28.540
and everything else for you.


00:40:28.540 --> 00:40:31.580
So you just go, okay, here's my web app.


00:40:31.580 --> 00:40:33.620
Yeah, it does all that for you.


00:40:33.620 --> 00:40:34.460
- Nice.


00:40:34.460 --> 00:40:37.400
And then that hosted Cosmos DB.


00:40:37.400 --> 00:40:43.460
- Yeah, so Cosmos DB is the document database on Azure.


00:40:43.460 --> 00:40:44.620
And when you deploy it,


00:40:44.620 --> 00:40:47.100
you can choose which API you want it to have.


00:40:47.100 --> 00:40:50.580
You can pick the Cosmos API or you can pick a Mongo API.


00:40:50.580 --> 00:40:52.020
So if you pick the Mongo API,


00:40:52.020 --> 00:40:57.020
then you can use your existing Mongo tools and clients.


00:40:57.020 --> 00:40:59.180
- Right, like Beanie and so on, yeah.


00:40:59.180 --> 00:41:00.920
- Exactly, and that'll just work.


00:41:00.920 --> 00:41:05.620
- Okay, and then monitoring, Azure Monitor,


00:41:05.620 --> 00:41:09.380
this is like century type stuff, right?


00:41:09.380 --> 00:41:12.380
Like is it up, is it running into errors?


00:41:12.380 --> 00:41:15.500
Does it also do performance or just sort of error?


00:41:15.500 --> 00:41:17.420
- Yeah, it will do all of your calls,


00:41:17.420 --> 00:41:20.740
basically does tracing


00:41:20.740 --> 00:41:23.140
between all of the different containers


00:41:23.140 --> 00:41:24.660
or different components of the app.


00:41:24.660 --> 00:41:27.900
You can look at telemetry between those calls,


00:41:27.900 --> 00:41:30.660
how long is the call taking to the database?


00:41:30.660 --> 00:41:32.180
You can look at the individual calls,


00:41:32.180 --> 00:41:34.820
see where the errors are, trace those down to,


00:41:34.820 --> 00:41:39.820
it was a get call on the to-dos collection


00:41:39.820 --> 00:41:41.540
and actually look at those


00:41:41.540 --> 00:41:43.780
and then introspect those inside of Azure Monitor.


00:41:43.780 --> 00:41:45.300
So it's pretty detailed.


00:41:45.300 --> 00:41:47.100
- Yeah, that's really nice.


00:41:47.100 --> 00:41:50.340
I use that stuff all the time for my sites.


00:41:50.340 --> 00:41:52.220
if I run into a problem.


00:41:52.220 --> 00:41:54.460
Probably the first place I go is the actual log,


00:41:54.460 --> 00:41:56.300
but if it's not super clear right away, I'm like,


00:41:56.300 --> 00:41:58.260
all right, let's go to the monitoring


00:41:58.260 --> 00:41:59.500
and see the local variables


00:41:59.500 --> 00:42:02.580
and see what was going on for real.


00:42:02.580 --> 00:42:04.620
And then the last one is secrets.


00:42:04.620 --> 00:42:11.300
It is nice to just check in your API keys into GitHub,


00:42:11.300 --> 00:42:13.420
but I don't understand why.


00:42:13.420 --> 00:42:15.020
I heard you're not supposed to.


00:42:15.020 --> 00:42:16.360
(laughing)


00:42:16.360 --> 00:42:18.500
No, I understand why, you're not supposed to.


00:42:18.500 --> 00:42:19.580
- Yeah, yeah.


00:42:19.580 --> 00:42:22.420
The Key Vault is really great in the sense of, yeah,


00:42:22.420 --> 00:42:27.140
this is kind of, it is the sauce, if you will,


00:42:27.140 --> 00:42:32.140
where we keep the connection string for the Mongo database.


00:42:32.140 --> 00:42:37.580
And then within the actual FastAPI app,


00:42:37.580 --> 00:42:41.780
we can then connect to the Key Vault


00:42:41.780 --> 00:42:43.580
to pull that out securely.


00:42:43.580 --> 00:42:45.380
And then really, the nice thing about Key Vault


00:42:45.380 --> 00:42:48.100
is if we need to change it, we can just change that one key


00:42:48.100 --> 00:42:52.540
not have to kind of redeploy all the other apps, which is it was just great.


00:42:52.540 --> 00:42:59.060
And from a local development story there,


00:42:59.060 --> 00:43:03.180
you know, we use an environment variables to have that locally,


00:43:03.180 --> 00:43:07.060
as opposed to passing it around or keeping it in a GitHub repo, of course.


00:43:07.060 --> 00:43:07.940
Got it.


00:43:07.940 --> 00:43:14.300
Yeah. So the app's kind of like built in a way that we said,


00:43:15.580 --> 00:43:19.100
if we were building a production app, this is how we do it.


00:43:19.100 --> 00:43:25.940
So like Shane said, the example app is opinionated because we've picked how we've configured


00:43:25.940 --> 00:43:30.500
Python virtual environments and how I've done the testing and how the ASCII configuration


00:43:30.500 --> 00:43:31.500
works and stuff like that.


00:43:31.500 --> 00:43:36.820
But it's done in a way that it's, okay, this is a production style web app that we put


00:43:36.820 --> 00:43:44.860
together and here's how you would deploy it using this new AZD CLI, so the new Azure Dev


00:43:44.860 --> 00:43:50.300
And the other important thing is that you don't have to learn all these new concepts.


00:43:50.300 --> 00:43:55.420
So it's not like we've said, okay, we've got our own configuration language that we're


00:43:55.420 --> 00:44:00.180
going to throw at you and we've got our own, you know, like his hundred YAML files you


00:44:00.180 --> 00:44:02.020
need to write or stuff like that.


00:44:02.020 --> 00:44:04.500
It's try to keep it as native as possible.


00:44:04.500 --> 00:44:13.340
So in the Python application, in the web app, then there's a Docker file and there's a pyproject.toml.


00:44:13.340 --> 00:44:17.620
And if you want to run the Docker file locally, you can do that.


00:44:17.620 --> 00:44:22.540
>> One of the opinions that you're choosing is like you use poetry, for example, right?


00:44:22.540 --> 00:44:23.540
>> Yeah.


00:44:23.540 --> 00:44:24.540
Yeah.


00:44:24.540 --> 00:44:29.740
So using poetry to manage the dependencies and make those, I guess, pinning dependencies


00:44:29.740 --> 00:44:34.580
and making them between creating things that lock files.


00:44:34.580 --> 00:44:41.020
But also if you work on the repo, the demo repo in VS Code, you can run and debug the


00:44:41.020 --> 00:44:43.580
app locally as well.


00:44:43.580 --> 00:44:46.080
So you don't have to figure out all the extra complexity.


00:44:46.080 --> 00:44:51.740
So yeah, we kind of really thought, okay, let's write a production type application


00:44:51.740 --> 00:44:57.780
using all the normal tools we would use, which is like Docker files and pyproject.toml requirements


00:44:57.780 --> 00:44:58.940
files.


00:44:58.940 --> 00:45:02.620
And then on the front end app, like, you know, it's in React.


00:45:02.620 --> 00:45:08.860
So we've got our normal, you know, project and Node.js configuration and stuff.


00:45:08.860 --> 00:45:10.860
All the NPM stuff.


00:45:10.860 --> 00:45:16.900
>> Yeah. What would the developer need to describe that in a way


00:45:16.900 --> 00:45:18.500
that then can be deployed up to the Cloud


00:45:18.500 --> 00:45:20.560
and try to make that as simple as possible?


00:45:20.560 --> 00:45:21.960
>> Sure.


00:45:21.960 --> 00:45:26.940
>> Now, Shane, you spoke about Bicept as a way to get your things up.


00:45:26.940 --> 00:45:30.700
Then I think it might be worth touching a little bit on the Bicep story.


00:45:30.700 --> 00:45:31.300
>> Sure.


00:45:31.300 --> 00:45:34.460
>> I mean, that's usually arm wrestling for me,


00:45:34.460 --> 00:45:35.900
but I'm thinking, no.


00:45:35.900 --> 00:45:39.860
Bicep is like Ansible or Terraform.


00:45:39.860 --> 00:45:40.440
>> Yeah.


00:45:40.440 --> 00:45:45.180
>> But it's one of these Azure native thing.


00:45:45.180 --> 00:45:49.380
>> Yeah. Most Azure DevOps folks


00:45:49.380 --> 00:45:51.540
would understand if we said,


00:45:51.540 --> 00:45:54.060
"Hey, what's your ARM template look like?"


00:45:54.060 --> 00:45:57.060
>> Azure Resource Manager template or something like that?


00:45:57.060 --> 00:45:57.340
>> Management template, yeah.


00:45:57.340 --> 00:45:58.100
>> Yeah, management, okay.


00:45:58.100 --> 00:45:59.380
>> Lots of JSON,


00:45:59.380 --> 00:46:03.260
lot of JSON, thousands of lines of JSON.


00:46:03.260 --> 00:46:08.260
not easy to write, read, or kind of understand.


00:46:08.260 --> 00:46:11.100
Bicep is a simpler format


00:46:11.100 --> 00:46:13.660
and kind of self-describing almost.


00:46:13.660 --> 00:46:18.120
So we use that right now to describe the resources


00:46:18.120 --> 00:46:23.120
that we're going to provision and deploy our app to.


00:46:23.120 --> 00:46:26.980
And in this particular case, in this template,


00:46:26.980 --> 00:46:29.660
we have a number of templates, but in this template,


00:46:29.660 --> 00:46:34.340
You know, we're putting together a container registry,


00:46:34.340 --> 00:46:37.620
we're provisioning the container apps environments,


00:46:37.620 --> 00:46:39.420
you know, the web apps, the Mongo database,


00:46:39.420 --> 00:46:41.620
a lot of things that, you know,


00:46:41.620 --> 00:46:43.060
if you did those individually,


00:46:43.060 --> 00:46:45.340
it would take a lot of time to do so.


00:46:45.340 --> 00:46:48.260
We're doing that all as a part of the, you know,


00:46:48.260 --> 00:46:50.920
one single line command to do that.


00:46:50.920 --> 00:46:55.740
So we're looking at implementing, you know,


00:46:55.740 --> 00:46:59.020
other IAC providers like Terraform and Pulumi.


00:46:59.020 --> 00:47:00.940
as well.


00:47:00.940 --> 00:47:01.780
- Sure.


00:47:01.780 --> 00:47:05.060
- You know, if that was makes you happy in your place,


00:47:05.060 --> 00:47:08.100
you know, we're not hiding anything in what we're doing.


00:47:08.100 --> 00:47:11.100
We're more of an orchestrator of the tools


00:47:11.100 --> 00:47:15.140
instead of, you know, hiding some secret commands


00:47:15.140 --> 00:47:16.860
to make all this happen.


00:47:16.860 --> 00:47:20.420
So, you know, we like folks to kind of see


00:47:20.420 --> 00:47:22.440
what the steps are to do it.


00:47:22.440 --> 00:47:24.340
We're just gonna do the steps for you.


00:47:24.340 --> 00:47:27.820
A single press of the button, press the easy button.


00:47:27.820 --> 00:47:29.960
- Yeah, yeah, absolutely.


00:47:29.960 --> 00:47:31.220
- Right.


00:47:31.220 --> 00:47:32.060
- That's great.


00:47:32.060 --> 00:47:34.100
So maybe Anthony, it'd be a good time for you


00:47:34.100 --> 00:47:36.960
just to sort of talk us through some of the code


00:47:36.960 --> 00:47:38.140
and the projects,


00:47:38.140 --> 00:47:39.700
'cause I think that'll give people a sense


00:47:39.700 --> 00:47:44.460
of what they're getting in terms of what this app looks like.


00:47:44.460 --> 00:47:48.340
- Yeah, so the demo app that we put together


00:47:48.340 --> 00:47:51.300
has got two main containers on the front end,


00:47:51.300 --> 00:47:55.460
which is the React.js web app,


00:47:55.460 --> 00:47:59.840
which is running under node 16,


00:47:59.840 --> 00:48:02.040
and then a FastAPI,


00:48:02.040 --> 00:48:04.880
API which does basically the middleware


00:48:04.880 --> 00:48:08.460
between the front end and the database in the backend.


00:48:08.460 --> 00:48:15.080
So the React JS one is an app that we wrote


00:48:15.080 --> 00:48:17.360
to demonstrate a lot of functionality


00:48:17.360 --> 00:48:20.820
and it's a to-do management app basically.


00:48:20.820 --> 00:48:23.360
In terms of the FastAPI app--


00:48:23.360 --> 00:48:25.560
- A canonical example that people may try.


00:48:25.560 --> 00:48:26.700
(laughs)


00:48:26.700 --> 00:48:28.440
- Yeah, exactly.


00:48:28.440 --> 00:48:32.940
And the FastAPI one is the one I worked on with the team.


00:48:32.940 --> 00:48:35.100
And that's really kind of looking at, okay,


00:48:35.100 --> 00:48:37.380
if we did a modern Python application,


00:48:37.380 --> 00:48:39.940
how would we write it and how would we deploy it?


00:48:39.940 --> 00:48:46.400
And like I said, using poetry for requirements management


00:48:46.400 --> 00:48:49.020
and stuff, but you could use whatever.


00:48:49.020 --> 00:48:50.740
This is an example.


00:48:50.740 --> 00:48:52.860
You don't have to use poetry,


00:48:52.860 --> 00:48:59.500
I'm just showing the latest approach and the latest design with the application.


00:48:59.500 --> 00:49:04.580
And then if you want to swap out or change bits of it, obviously you can do that.


00:49:04.580 --> 00:49:07.100
So yeah, the project itself has got a PyProject.toml.


00:49:07.100 --> 00:49:13.300
We're using FastAPI, Uvicorn, and then Beanie is the ODM.


00:49:13.300 --> 00:49:14.300
And then--


00:49:14.300 --> 00:49:17.140
Maybe just tell people real quick about just what Beanie is.


00:49:17.140 --> 00:49:22.100
Just so that-- I've had Roman on the show before, but maybe not everyone knows.


00:49:22.100 --> 00:49:29.740
Yeah, so if you're working with FastAPI, often you would describe models that the API reads


00:49:29.740 --> 00:49:34.340
or writes or reflects using something like Pydantic.


00:49:34.340 --> 00:49:37.040
So these are kind of like your data classes.


00:49:37.040 --> 00:49:46.000
So Beanie basically allows you to write Pydantic style models, data classes, and then read


00:49:46.000 --> 00:49:48.840
and write those from a Mongo database.


00:49:48.840 --> 00:49:53.820
So this app is basically written in a way that the to-do list items, the tasks and stuff


00:49:53.820 --> 00:49:59.420
like that are all reflected in a models file.


00:49:59.420 --> 00:50:03.240
And then Beanie does the work of actually putting those in a database.


00:50:03.240 --> 00:50:06.740
So we have a to-do list.


00:50:06.740 --> 00:50:10.700
You can also do things like to-do items.


00:50:10.700 --> 00:50:15.220
And each of those are a document, but they're written in a way that's very similar to, basically


00:50:15.220 --> 00:50:18.180
identical to how you'd write a Pydantic model.


00:50:18.180 --> 00:50:21.260
>> Slightly different in this class.


00:50:21.260 --> 00:50:24.060
>> Yeah. Beanie also allows you to


00:50:24.060 --> 00:50:28.900
lazily reflect Beanie models into Pydantic models.


00:50:28.900 --> 00:50:30.500
So when you're working with FastAPI,


00:50:30.500 --> 00:50:34.500
you can get all that nice functionality of using Pydantic.


00:50:34.500 --> 00:50:39.260
But you get a lot of the performance of basically


00:50:39.260 --> 00:50:40.420
trying to keep it as close to


00:50:40.420 --> 00:50:42.780
the actual document in Mongo as possible.


00:50:42.780 --> 00:50:44.820
So yeah, that's one big challenge


00:50:44.820 --> 00:50:49.220
people have to overcome when they use stuff like Pydantic,


00:50:49.220 --> 00:50:53.580
which is like, when do you put stuff into Pydantic bottles?


00:50:53.580 --> 00:50:56.300
Like if you're reading a thousand rows from the database


00:50:56.300 --> 00:50:58.620
and you're just gonna give that straight to the user,


00:50:58.620 --> 00:51:02.420
there's no point in reflecting all that into Pydantic.


00:51:02.420 --> 00:51:04.860
- Right, do all the conversions or whatever craziness.


00:51:04.860 --> 00:51:05.680
Yeah.


00:51:05.680 --> 00:51:06.600
- Yeah. - Yeah, okay, cool.


00:51:06.600 --> 00:51:08.160
And this is a really good choice


00:51:08.160 --> 00:51:11.740
because it matches the native MongoDB API


00:51:11.740 --> 00:51:15.460
And it matches FastAPI on at least two levels.


00:51:15.460 --> 00:51:18.820
Pydantic models are all about driving the data exchange


00:51:18.820 --> 00:51:21.340
and the open API specification, which is fantastic.


00:51:21.340 --> 00:51:25.660
But then also, Beanie is an async ODM,


00:51:25.660 --> 00:51:27.540
so it allows you to fully leverage


00:51:27.540 --> 00:51:29.940
the scalability of FastAPI.


00:51:29.940 --> 00:51:31.700
I think it's a great choice.


00:51:31.700 --> 00:51:34.540
- Yeah, it's a nice configuration,


00:51:34.540 --> 00:51:35.580
and it's nice to run as well.


00:51:35.580 --> 00:51:36.900
It's pretty responsive.


00:51:38.500 --> 00:51:42.180
And then what we did on the app itself,


00:51:42.180 --> 00:51:45.580
so in FastAPI, a couple of things that you have to do,


00:51:45.580 --> 00:51:48.260
configuring cores, which is always fun.


00:51:48.260 --> 00:51:52.500
And then we've put tracing in the app as well.


00:51:52.500 --> 00:51:56.300
- I just ran into a cores error on a,


00:51:56.300 --> 00:51:58.300
just an HTML file I opened.


00:51:58.300 --> 00:52:00.420
I'm like, there is no server, I can't do cores,


00:52:00.420 --> 00:52:01.500
please don't do this.


00:52:01.500 --> 00:52:05.540
- Yeah, it becomes a bit of a challenge.


00:52:05.540 --> 00:52:06.460
- It does.


00:52:06.460 --> 00:52:09.540
- So on FastAPI, we've been doing a lot of work


00:52:09.540 --> 00:52:13.420
over the last year on a project called OpenTelemetry.


00:52:13.420 --> 00:52:19.340
It's a cross-company open source collaboration


00:52:19.340 --> 00:52:24.220
to create basically a tracing and eventing framework


00:52:24.220 --> 00:52:25.580
across multiple languages.


00:52:25.580 --> 00:52:30.580
So you can use OpenTelemetry in Go, Rust, Python,


00:52:30.580 --> 00:52:31.980
and basically in store--


00:52:31.980 --> 00:52:34.100
- Does it connect into the thing that Shane


00:52:34.100 --> 00:52:35.980
was talking about with Azure monitoring?


00:52:35.980 --> 00:52:37.300
Yeah, it does.


00:52:37.300 --> 00:52:41.580
And it also connects into a whole bunch of other monitoring tools.


00:52:41.580 --> 00:52:51.420
So it's not the Azure monitoring library for Python, it is a agnostic library.


00:52:51.420 --> 00:52:54.140
And it's got support for FastAPI.


00:52:54.140 --> 00:52:58.160
It also has support for lots of other Python components.


00:52:58.160 --> 00:53:04.060
So when you get the actual logging data, for example, if your app crashed, or somebody


00:53:04.060 --> 00:53:07.040
made a request which gave a 500 error.


00:53:07.040 --> 00:53:11.200
In Azure Monitor, you get the full stack trace and you get all the events that led up to


00:53:11.200 --> 00:53:13.620
that as well.


00:53:13.620 --> 00:53:15.300
So it's not just a log file, basically.


00:53:15.300 --> 00:53:20.500
We're actually putting stuff in the Python app to get all the tracing information.


00:53:20.500 --> 00:53:28.140
You can also use it to see performance regressions and slow pages or slow requests.


00:53:28.140 --> 00:53:31.940
So in Azure Monitor, you can actually go and see what are the slowest requests I've had


00:53:31.940 --> 00:53:34.440
to the application and what was the cause of that.


00:53:34.440 --> 00:53:37.300
Yeah, and none of that stuff is proprietary.


00:53:37.300 --> 00:53:39.660
It's all basically using OpenTelemetry,


00:53:39.660 --> 00:53:40.880
which is open source,


00:53:40.880 --> 00:53:44.580
but we have a special source is the exporter.


00:53:44.580 --> 00:53:49.080
So we export OpenTelemetry events to Azure Monitor.


00:53:49.080 --> 00:53:50.180
- Okay.


00:53:50.180 --> 00:53:51.700
Yeah, this all looks super nice.


00:53:51.700 --> 00:53:53.620
And the reason I wanted you to talk through this


00:53:53.620 --> 00:53:55.620
is the project looks really nice.


00:53:55.620 --> 00:53:58.540
It looks like an app that I would like to use


00:53:58.540 --> 00:54:03.020
as a starting place for my final destination,


00:54:03.020 --> 00:54:06.340
rather than just, oh cool, there's a main.py,


00:54:06.340 --> 00:54:08.220
app.py is all just jammed in there,


00:54:08.220 --> 00:54:12.260
and it feels like a good starting point, I think.


00:54:12.260 --> 00:54:14.580
- Yeah, and then, like I mentioned,


00:54:14.580 --> 00:54:18.820
debugging is set up already, so yeah,


00:54:18.820 --> 00:54:22.420
in VS Code, you can either debug the React app


00:54:22.420 --> 00:54:24.760
or the API, the FastAPI app,


00:54:24.760 --> 00:54:27.020
and that'll run the whole application in--


00:54:27.020 --> 00:54:29.900
- Does that run just on your local machine


00:54:29.900 --> 00:54:32.740
or does that like fire up the containers?


00:54:32.740 --> 00:54:34.180
- It just runs in your local machine.


00:54:34.180 --> 00:54:37.260
So it would run FastAPI locally.


00:54:37.260 --> 00:54:39.180
- I give that a thumbs up.


00:54:39.180 --> 00:54:40.340
(laughs)


00:54:40.340 --> 00:54:41.180
- Yeah.


00:54:41.180 --> 00:54:44.060
- Right, so if you wanted to, for example,


00:54:44.060 --> 00:54:45.460
debug the front end and it needs to get,


00:54:45.460 --> 00:54:48.260
just go start the backend and then go debug the front end,


00:54:48.260 --> 00:54:49.580
something like that, right?


00:54:49.580 --> 00:54:51.460
- Yeah, just trying to keep it super simple.


00:54:51.460 --> 00:54:52.820
- Yeah, that's good.


00:54:52.820 --> 00:54:57.340
And then we also wrote tests for both components.


00:54:57.340 --> 00:55:02.340
So yeah, the ToDo app comes with its own unit tests


00:55:02.340 --> 00:55:07.180
for FastAPI and then for the front end as well.


00:55:07.180 --> 00:55:10.020
And then all of that's set up in VS Code.


00:55:10.020 --> 00:55:12.100
Well, it's all Py, they're all pytest tests.


00:55:12.100 --> 00:55:14.540
So if you just wanna run pytest over it, you can.


00:55:14.540 --> 00:55:18.380
But yeah, asynchronous FastAPI tests


00:55:18.380 --> 00:55:21.140
are a bit fiddly to set up the first time,


00:55:21.140 --> 00:55:23.340
So we've done all that as a demo as well.


00:55:23.340 --> 00:55:25.860
- Yeah, this is great.


00:55:25.860 --> 00:55:28.900
And one area that we haven't talked about yet, Shane,


00:55:28.900 --> 00:55:30.060
when you deploy this,


00:55:30.060 --> 00:55:31.940
and we can talk about how to do that in just a second,


00:55:31.940 --> 00:55:35.460
is that it automatically sets up,


00:55:35.460 --> 00:55:37.780
at least with one of the CLI commands,


00:55:37.780 --> 00:55:39.900
CI/CD, continuous integration


00:55:39.900 --> 00:55:42.980
and continuous delivery or deployment.


00:55:42.980 --> 00:55:44.900
And these tests that Anthony is talking about,


00:55:44.900 --> 00:55:48.420
these automatically just like start running


00:55:48.420 --> 00:55:50.460
on check-ins for you, right?


00:55:50.460 --> 00:55:54.620
that whole life cycle is connected here.


00:55:54.620 --> 00:55:56.740
- Yeah, it's, Anthony, I don't know if you could


00:55:56.740 --> 00:56:00.420
maybe scroll up and touch on the GitHub actions


00:56:00.420 --> 00:56:02.000
that are included there.


00:56:02.000 --> 00:56:07.000
So with every template that we're providing


00:56:07.000 --> 00:56:10.620
out of the box, we include the GitHub actions


00:56:10.620 --> 00:56:12.140
in order to run those.


00:56:12.140 --> 00:56:16.820
So on the builds, we'll actually provision, deploy,


00:56:16.820 --> 00:56:20.240
and we would include the test run as well


00:56:20.240 --> 00:56:22.140
as a part of the container build,


00:56:22.140 --> 00:56:24.700
if it's targeting containers or if it's paths,


00:56:24.700 --> 00:56:26.220
then we would have the test command,


00:56:26.220 --> 00:56:28.360
which is not in this particular one,


00:56:28.360 --> 00:56:31.680
but it would be like azd test would be the command


00:56:31.680 --> 00:56:34.040
that would run, it would run through all the testing


00:56:34.040 --> 00:56:36.240
that are in there depending on the platform.


00:56:36.240 --> 00:56:40.560
Gets us to that point, like I said, as a developer,


00:56:40.560 --> 00:56:43.900
I just wanna check in code and know that my tests


00:56:43.900 --> 00:56:47.540
are gonna run, if they pass, it deploys to the environment


00:56:47.540 --> 00:56:51.980
that's specified and gets me to a happy place


00:56:51.980 --> 00:56:53.980
as a developer, you know.


00:56:53.980 --> 00:56:55.180
- Right, right, right.


00:56:55.180 --> 00:56:56.560
You don't have to know about this stuff.


00:56:56.560 --> 00:57:00.460
And you know, to some degree that might not be 100% true.


00:57:00.460 --> 00:57:02.980
Right, like if your code is running somewhere,


00:57:02.980 --> 00:57:05.500
you need to have some level of understanding


00:57:05.500 --> 00:57:07.980
even if you don't have to directly touch it.


00:57:07.980 --> 00:57:08.820
- Yeah.


00:57:08.820 --> 00:57:10.140
- But I think one of the big benefits is


00:57:10.140 --> 00:57:12.340
for a lot of people, you can start running there


00:57:12.340 --> 00:57:14.140
and you can kind of grow into a better,


00:57:14.140 --> 00:57:16.680
deeper understanding, right?


00:57:16.680 --> 00:57:20.360
you don't have to like swallow the whole,


00:57:20.360 --> 00:57:23.060
I learned all of the Linux configuration all in one shot


00:57:23.060 --> 00:57:25.140
just to get it to even start, you know?


00:57:25.140 --> 00:57:27.260
- Yeah, I think that's important to mention


00:57:27.260 --> 00:57:31.360
a couple of times is that even though we have a command,


00:57:31.360 --> 00:57:34.740
like in order to get this whole architecture


00:57:34.740 --> 00:57:36.700
that Anthony just walked through,


00:57:36.700 --> 00:57:39.660
if I wanted to get this into Azure,


00:57:39.660 --> 00:57:43.980
I would just run azd up and then pass in


00:57:43.980 --> 00:57:46.640
the name of the template repo, you know?


00:57:46.640 --> 00:57:52.480
And it would then deploy all of that and run it for me.


00:57:52.480 --> 00:57:55.040
So if--


00:57:55.040 --> 00:57:58.540
- Yeah, yeah, let's talk about like, we've got the app.


00:57:58.540 --> 00:58:01.420
Anthony talked about running and developing it locally.


00:58:01.420 --> 00:58:02.260
- Right. - Now what?


00:58:02.260 --> 00:58:04.380
Like I actually wanna get it up and running.


00:58:04.380 --> 00:58:07.260
I want CI, CD, I want all the things.


00:58:07.260 --> 00:58:09.400
- Yeah, so if I started from nothing,


00:58:09.400 --> 00:58:12.200
if I was just opened up, you know, VS Code


00:58:12.200 --> 00:58:15.160
or my command line or whatever I'm in in a terminal,


00:58:15.160 --> 00:58:20.760
I could just run azd up and then pass in a --template


00:58:20.760 --> 00:58:22.080
and in this particular case,


00:58:22.080 --> 00:58:26.840
it would be like to do dash Python, ACA dash Mongo, right?


00:58:26.840 --> 00:58:29.840
And that would clone that repo.


00:58:29.840 --> 00:58:33.960
It would then start to provision those resources on Azure,


00:58:33.960 --> 00:58:39.040
you know, based on your login to Azure


00:58:39.040 --> 00:58:42.240
and then use the Bicep infrastructure definitions


00:58:42.240 --> 00:58:44.160
to create that target host,


00:58:44.160 --> 00:58:47.120
if it's PaaS or Azure Container apps,


00:58:47.120 --> 00:58:49.960
and then build and deploy, you know,


00:58:49.960 --> 00:58:51.680
the API at the front end,


00:58:51.680 --> 00:58:55.120
and then make all those connections and so on


00:58:55.120 --> 00:58:57.080
as we walk through how that's all put together.


00:58:57.080 --> 00:58:58.400
- Right, and so it's worth thinking about


00:58:58.400 --> 00:59:02.680
that those Bicep DevOps commands and configuration,


00:59:02.680 --> 00:59:04.780
if you want a slight variation of what this gives you,


00:59:04.780 --> 00:59:09.160
you changed the Bicept and then AZD up


00:59:09.160 --> 00:59:11.780
just uses your slight variation, right?


00:59:11.780 --> 00:59:13.060
- Well, yeah, exactly.


00:59:13.060 --> 00:59:16.700
And one of the services that is very common to use


00:59:16.700 --> 00:59:18.780
in our apps nowadays is Redis.


00:59:18.780 --> 00:59:21.900
Like if I wanna add Redis and make a couple of changes,


00:59:21.900 --> 00:59:25.340
I could just put that definition in my Bicep code,


00:59:25.340 --> 00:59:28.260
add in the environment variables that are necessary


00:59:28.260 --> 00:59:30.940
to expose in my app and call up.


00:59:30.940 --> 00:59:34.500
And then we would then push them into Key Vault,


00:59:34.500 --> 00:59:37.660
provision the service, redeploy the code,


00:59:37.660 --> 00:59:39.580
and hopefully if we typed it all right,


00:59:39.580 --> 00:59:40.940
it would happen right.


00:59:40.940 --> 00:59:45.940
So that would be the way to do that for sure.


00:59:45.940 --> 00:59:51.840
And if I run the AZD pipeline command


00:59:51.840 --> 00:59:54.500
and help that establish my GitHub repo


00:59:54.500 --> 00:59:58.460
and kick off those workflows in the GitHub actions,


00:59:58.460 --> 01:00:00.260
at that point I could just make those changes


01:00:00.260 --> 01:00:02.460
to the Bicep files and check those in,


01:00:02.460 --> 01:00:05.360
and then the workflow would kick off that process for me.


01:00:05.360 --> 01:00:07.600
- That's cool.


01:00:07.600 --> 01:00:10.680
Can I start from code and then do this


01:00:10.680 --> 01:00:12.580
or do I do the template to create the code


01:00:12.580 --> 01:00:13.420
and the GitHub repo?


01:00:13.420 --> 01:00:15.620
Like if I already have a GitHub repo, for example.


01:00:15.620 --> 01:00:17.180
- Yeah, that's a good question.


01:00:17.180 --> 01:00:21.780
We have some documentation and walkthroughs


01:00:21.780 --> 01:00:24.580
on how to what we call Devify your project.


01:00:24.580 --> 01:00:28.460
And basically it will walk you through


01:00:28.460 --> 01:00:30.460
how to set up that on the infra folder,


01:00:30.460 --> 01:00:37.020
that infra folder will contain the Bicep definitions.


01:00:37.020 --> 01:00:41.380
We've got an Azure.yaml file which will hold a couple of


01:00:41.380 --> 01:00:43.560
the naming structures that we have as


01:00:43.560 --> 01:00:46.500
an opinionated way to name things,


01:00:46.500 --> 01:00:48.460
and then also set up that target host.


01:00:48.460 --> 01:00:50.420
Again, it's that PaaS or is it


01:00:50.420 --> 01:00:54.100
App Service or is it Container Apps or AKS?


01:00:54.100 --> 01:00:55.700
A little bit of setup,


01:00:55.700 --> 01:01:00.180
and then you can start using AZD up or AZD deploy.


01:01:00.180 --> 01:01:04.780
if you just want to deploy the app to then take your code


01:01:04.780 --> 01:01:07.860
and push it onto the platform.


01:01:07.860 --> 01:01:08.780
- Sure, okay.


01:01:08.780 --> 01:01:11.420
Yeah, that sounds really good.


01:01:11.420 --> 01:01:15.060
What about the, talk about the continuous delivery part.


01:01:15.060 --> 01:01:17.220
So I've got this created, I've got a GitHub repo,


01:01:17.220 --> 01:01:18.600
it's up and running.


01:01:18.600 --> 01:01:24.380
How do I associate a domain name, by the way, first?


01:01:24.380 --> 01:01:27.900
- Well, the domain name, we would push it onto the,


01:01:27.900 --> 01:01:30.300
obviously onto Azure and then create that.


01:01:30.300 --> 01:01:34.020
>> Your app, GUID.Azure or something like that.


01:01:34.020 --> 01:01:36.900
>> Yeah. Azurewebsites.net/.


01:01:36.900 --> 01:01:39.140
Then that would be part of


01:01:39.140 --> 01:01:43.060
that configuration inside of Azure portal or


01:01:43.060 --> 01:01:46.860
through the management plane where you'd actually go through of


01:01:46.860 --> 01:01:52.380
associating your domain name with whatever your entry point is.


01:01:52.380 --> 01:01:57.500
In this case, it's going to be the React front end.


01:01:57.500 --> 01:01:59.660
So I would go into that particular app service


01:01:59.660 --> 01:02:02.500
and set that up with your DNS and such there.


01:02:02.500 --> 01:02:05.260
- You probably want to, you probably want the API,


01:02:05.260 --> 01:02:08.020
if you wanna surface an API out of FastAPI.


01:02:08.020 --> 01:02:08.860
- Yeah.


01:02:08.860 --> 01:02:10.820
- And then you want the React front end,


01:02:10.820 --> 01:02:12.340
obviously for most people.


01:02:12.340 --> 01:02:13.300
- Yeah, and you could add,


01:02:13.300 --> 01:02:15.340
if you wanna get into things like that,


01:02:15.340 --> 01:02:17.220
one of the pieces you could add is things like


01:02:17.220 --> 01:02:20.740
Azure Front Door or, you know, API management


01:02:20.740 --> 01:02:23.580
or something like that in front of those components too.


01:02:23.580 --> 01:02:26.060
- Okay, well that step is like a separate step.


01:02:26.060 --> 01:02:27.440
You go in there and you configure it


01:02:27.440 --> 01:02:30.280
- Because how often do you really wanna have a thing


01:02:30.280 --> 01:02:31.720
messing with your DNS?


01:02:31.720 --> 01:02:32.560
- Yeah.


01:02:32.560 --> 01:02:33.380
- As little as possible, I would say.


01:02:33.380 --> 01:02:35.880
- The one time shot, that's all I wanna do.


01:02:35.880 --> 01:02:39.240
- Yeah, please wait 24 to 48 hours for this to propagate.


01:02:39.240 --> 01:02:40.400
Like no.


01:02:40.400 --> 01:02:43.800
- You know, it's funny, I haven't had a DNS,


01:02:43.800 --> 01:02:47.040
knock wood, I haven't had a DNS change take longer


01:02:47.040 --> 01:02:49.520
than a few minutes nowadays, but.


01:02:49.520 --> 01:02:51.520
- Yeah, it is a lot better than it used to be.


01:02:51.520 --> 01:02:52.360
- Yeah.


01:02:52.360 --> 01:02:54.760
- I've done it, I just changed all of our email


01:02:54.760 --> 01:02:57.540
and stuff around and there's been a lot of MX records


01:02:57.540 --> 01:03:01.520
and the like verification keys and yeah, it's.


01:03:01.520 --> 01:03:02.920
- No matter how many times you do it,


01:03:02.920 --> 01:03:04.620
you're sure you did it wrong.


01:03:04.620 --> 01:03:06.580
- Yep, that's for sure.


01:03:06.580 --> 01:03:11.720
Yeah, so back to my original train of thought,


01:03:11.720 --> 01:03:14.000
I was like, let's just sort of kind of wrap this up


01:03:14.000 --> 01:03:15.520
with the continuous delivery.


01:03:15.520 --> 01:03:18.000
I've got the app up, now we know how to get the domain


01:03:18.000 --> 01:03:19.560
associated with it and whatnot,


01:03:19.560 --> 01:03:22.580
presumably go and buy a domain, wherever you buy domains.


01:03:23.600 --> 01:03:26.580
pointed at it, let it map over,


01:03:26.580 --> 01:03:30.400
but then I make some changes and I get push a thing.


01:03:30.400 --> 01:03:32.060
What happens now?


01:03:32.060 --> 01:03:34.700
- Yeah, if you set up your CI/CD pipeline,


01:03:34.700 --> 01:03:37.780
it would then run through that same process.


01:03:37.780 --> 01:03:39.660
And we showed it in the GitHub actions here


01:03:39.660 --> 01:03:40.540
and talk through it.


01:03:40.540 --> 01:03:43.740
It would run your test, do the deployments.


01:03:43.740 --> 01:03:46.100
We do support multiple environments.


01:03:46.100 --> 01:03:50.180
So we can help set up a, like a dev or a QA environment


01:03:50.180 --> 01:03:53.140
as well, other than just a--


01:03:53.140 --> 01:03:56.060
like a staging sort of thing that people can click on.


01:03:56.060 --> 01:03:59.060
- Yeah, and then you can set up some processes,


01:03:59.060 --> 01:04:00.340
you know, within Azure, like,


01:04:00.340 --> 01:04:03.220
hey, this passes, let me do an IP switch


01:04:03.220 --> 01:04:06.540
or however you manage that in the platform


01:04:06.540 --> 01:04:07.820
based on your scenario.


01:04:07.820 --> 01:04:09.740
But yeah, we get to that point


01:04:09.740 --> 01:04:11.700
where we're just checking in code.


01:04:11.700 --> 01:04:13.580
- Okay, and do you,


01:04:13.580 --> 01:04:15.460
what's the branching structure look like?


01:04:15.460 --> 01:04:17.900
If I just push domain, is that gonna go live


01:04:17.900 --> 01:04:20.060
and I gotta work on a dev branch to not do that


01:04:20.060 --> 01:04:22.860
or is there like a prod branch or?


01:04:22.860 --> 01:04:24.960
- Yeah, you can set that up in your GitHub Action.


01:04:24.960 --> 01:04:25.800
- Okay.


01:04:25.800 --> 01:04:27.800
- Right now we have, the template is just going to work.


01:04:27.800 --> 01:04:29.640
- If I don't do anything, what happens?


01:04:29.640 --> 01:04:31.080
- It's main branch.


01:04:31.080 --> 01:04:32.440
- Main branch goes straight to production.


01:04:32.440 --> 01:04:33.280
I love it.


01:04:33.280 --> 01:04:35.680
Y'all are just carefree.


01:04:35.680 --> 01:04:36.520
Let's just go for it.


01:04:36.520 --> 01:04:37.360
- That's right.


01:04:37.360 --> 01:04:38.180
Do a lot.


01:04:38.180 --> 01:04:40.160
- The users are the testers, let's go.


01:04:40.160 --> 01:04:41.000
- Do a lot.


01:04:41.000 --> 01:04:42.720
- No, okay, got it.


01:04:42.720 --> 01:04:45.400
So you would just tweak your GitHub Action,


01:04:45.400 --> 01:04:47.680
YAML file and change your branch name or something?


01:04:47.680 --> 01:04:50.440
- Yeah, you can set some conditionals in the GitHub Action


01:04:50.440 --> 01:04:52.740
based on the environments that are coming in.


01:04:52.740 --> 01:04:55.360
- Cool.


01:04:55.360 --> 01:04:57.160
Anthony, what were you gonna say?


01:04:57.160 --> 01:04:59.560
- Yeah, it assumes a single branch strategy,


01:04:59.560 --> 01:05:02.720
but I mean, or you can tell it to generate


01:05:02.720 --> 01:05:05.880
the template for you and you can put that template wherever.


01:05:05.880 --> 01:05:10.160
It's pretty easy nowadays to say with GitHub,


01:05:10.160 --> 01:05:14.160
you know, which branch and stuff this should apply for,


01:05:14.160 --> 01:05:17.120
or this pipeline should only run on pull requests,


01:05:17.120 --> 01:05:20.040
or, I mean, my recommendation to people


01:05:20.040 --> 01:05:23.400
that you keep main highly protected.


01:05:23.400 --> 01:05:28.360
You don't let people push directly to main and it can only be merged into and then it


01:05:28.360 --> 01:05:30.280
has to be reviewed and stuff.


01:05:30.280 --> 01:05:36.720
I think keeping a clean main branch is a good strategy anyway.


01:05:36.720 --> 01:05:43.440
And then you can have a feature branch or release branch separately to that.


01:05:43.440 --> 01:05:49.560
So probably the main branch would be your dev, your sort of live dev environment.


01:05:49.560 --> 01:05:52.600
And then maybe you want a feature branch or a release,


01:05:52.600 --> 01:05:55.080
a main release branch separately to that,


01:05:55.080 --> 01:05:56.880
but using the same templates.


01:05:56.880 --> 01:06:00.560
So all you're really changing is the targeted environment names.


01:06:00.560 --> 01:06:01.460
- Yeah, okay.


01:06:01.460 --> 01:06:03.460
That sounds like good advice.


01:06:03.460 --> 01:06:04.300
- Yeah.


01:06:04.300 --> 01:06:06.480
- All right, guys.


01:06:06.480 --> 01:06:07.880
Well, we're getting a little short on time now.


01:06:07.880 --> 01:06:10.080
This looks like a really interesting project.


01:06:10.080 --> 01:06:14.120
I love the technical choices on the backend,


01:06:14.120 --> 01:06:15.560
you know, that you've made to sort of


01:06:15.560 --> 01:06:17.760
create building blocks for people.


01:06:17.760 --> 01:06:22.760
Yeah, I guess we could wrap it up real quickly with,


01:06:22.760 --> 01:06:27.720
we've got this more DevOps management IT like CLI


01:06:27.720 --> 01:06:29.620
that people have used previously.


01:06:29.620 --> 01:06:32.360
If they're doing Python stuff


01:06:32.360 --> 01:06:35.080
and they kind of want this container hosted world,


01:06:35.080 --> 01:06:38.120
this is probably the recommended way, at least from you all.


01:06:38.120 --> 01:06:40.800
- Yeah, definitely.


01:06:40.800 --> 01:06:45.000
- Yeah, okay, fantastic.


01:06:45.000 --> 01:06:46.480
All right, anything else you wanna add about this


01:06:46.480 --> 01:06:48.240
before we call it a show?


01:06:48.240 --> 01:06:52.160
- No, nothing from my side.


01:06:52.160 --> 01:06:56.120
I think Shane's frozen.


01:06:56.120 --> 01:06:58.020
- Oh no, Shane is frozen.


01:06:58.020 --> 01:07:02.640
I thought he was just being getting tired


01:07:02.640 --> 01:07:04.600
'cause it's late where he is, but no.


01:07:04.600 --> 01:07:06.140
All right, well, Anthony,


01:07:06.140 --> 01:07:09.440
I'm sure this is not gonna come as a big surprise


01:07:09.440 --> 01:07:11.600
given all of your current work and stuff,


01:07:11.600 --> 01:07:14.480
but I'll ask you the final two questions first


01:07:14.480 --> 01:07:17.480
and then we'll hopefully get Shane back shortly.


01:07:17.480 --> 01:07:21.360
Good Arisa Pylon code?


01:07:21.360 --> 01:07:23.760
What editor are you using these days still?


01:07:23.760 --> 01:07:24.920
- Definitely VS Code.


01:07:24.920 --> 01:07:27.640
- But tell people about the font.


01:07:27.640 --> 01:07:30.740
- Comic Sans Mono.


01:07:30.740 --> 01:07:35.600
So it's a Comic Sans font, but in Mono space.


01:07:35.600 --> 01:07:37.240
- Awesome, is it a nerd font?


01:07:37.240 --> 01:07:41.760
- There is, I think there's a nerd font flavor of it.


01:07:41.760 --> 01:07:43.400
I haven't configured my terminal


01:07:43.400 --> 01:07:46.320
to use Comic Mono yet because I think that'd be going a bit far.


01:07:46.320 --> 01:07:50.800
It actually looks better than you think.


01:07:50.800 --> 01:07:53.560
>> It looks way better than you would think Comic Sans looks.


01:07:53.560 --> 01:07:55.840
It looks, I would totally get down to it.


01:07:55.840 --> 01:07:56.600
>> It's really readable.


01:07:56.600 --> 01:07:59.040
>> I had to make a DNS joke.


01:07:59.040 --> 01:08:03.080
>> You did. You took yourself offline, but you're back.


01:08:03.080 --> 01:08:05.040
Just in time to answer the question,


01:08:05.040 --> 01:08:06.120
have you write some Python code?


01:08:06.120 --> 01:08:08.240
What editor are you using these days?


01:08:08.240 --> 01:08:10.600
>> I use VS Code.


01:08:10.600 --> 01:08:11.800
>> Right on.


01:08:11.800 --> 01:08:14.280
I don't know I use VS Code for taking notes.


01:08:14.280 --> 01:08:15.960
I mean it's just.


01:08:15.960 --> 01:08:18.360
No, it's it's marked down or if it's in


01:08:18.360 --> 01:08:21.200
Mark everything's in Markdown or whatever code.


01:08:21.200 --> 01:08:23.540
So all my notes these days are at Markdown.


01:08:23.540 --> 01:08:25.080
If not like a Google Doc,


01:08:25.080 --> 01:08:26.160
so Doc something like that.


01:08:26.160 --> 01:08:27.440
It's definitely in Markdown.


01:08:27.440 --> 01:08:30.280
It was like I think it was like three years ago.


01:08:30.280 --> 01:08:32.280
I was in a meeting with Chris Diaz,


01:08:32.280 --> 01:08:35.400
who's the kind of owner of VS Code.


01:08:35.400 --> 01:08:36.960
And he pulled up his screen and he


01:08:36.960 --> 01:08:38.440
started taking notes and VS Code.


01:08:38.440 --> 01:08:40.440
I was like I'm an idiot.


01:08:40.440 --> 01:08:41.440
I should be doing that.


01:08:41.440 --> 01:08:44.700
Yes, just go to the bottom right, change that little language.


01:08:44.700 --> 01:08:47.700
So yeah, that's right.


01:08:47.700 --> 01:08:49.040
Absolutely. Yeah.


01:08:49.040 --> 01:08:51.740
All right. Notepad is dead to me.


01:08:51.740 --> 01:08:52.200
Yeah. Yeah.


01:08:52.200 --> 01:08:54.940
Problem I have at the moment is I've probably got too many extensions.


01:08:54.940 --> 01:08:57.200
I just realized this morning I have 99 now.


01:08:57.200 --> 01:09:00.100
So yeah, you may be an outlier.


01:09:00.100 --> 01:09:02.100
Nearly at three figures.


01:09:02.100 --> 01:09:06.180
It might not be room in the UI to just display that number.


01:09:06.180 --> 01:09:08.280
It might stop at two digits.


01:09:08.280 --> 01:09:09.940
Just hilarious. Yeah.


01:09:09.940 --> 01:09:13.900
I didn't even I tell you, I didn't even the first bit of


01:09:13.900 --> 01:09:19.940
tear some irony, the first time I ever wrote Python was, it


01:09:19.940 --> 01:09:25.740
feels like 100 years ago, but was actually to write a sublime


01:09:25.740 --> 01:09:33.660
add in to enable the .NET intellisense, or net core. So I


01:09:33.660 --> 01:09:37.580
was on the Omni sharp team to write the add ins for that. So


01:09:37.780 --> 01:09:42.660
Completely like not python related, but I was using python to enable.net and sublime


01:09:42.660 --> 01:09:45.460
Wow back in the day, so


01:09:45.460 --> 01:09:49.860
That's cool. Yeah, so very meta using the editor to write the editor, right?


01:09:49.860 --> 01:09:52.900
All right, and then notable pypi package


01:09:52.900 --> 01:09:57.060
Anything you want to give a shout out to I mean, we've definitely mentioned a bunch of fun ones, but


01:09:57.060 --> 01:10:00.100
Yeah, i'd say beanie. Um


01:10:00.100 --> 01:10:03.300
and perfluent which is one of mine, but um


01:10:04.020 --> 01:10:06.060
- Yeah, check out Perflint if you want to


01:10:06.060 --> 01:10:07.580
and check out Beanie as well.


01:10:07.580 --> 01:10:11.300
It's a really nice approach to document databases


01:10:11.300 --> 01:10:13.260
in asynchronous front-end.


01:10:13.260 --> 01:10:15.540
- Yeah, especially if you're doing FastAPI.


01:10:15.540 --> 01:10:18.980
- And I was gonna say, I used to struggle


01:10:18.980 --> 01:10:22.140
with document databases and Pydantic


01:10:22.140 --> 01:10:25.460
and Beanie made my life a whole lot better.


01:10:25.460 --> 01:10:26.300
- Yeah, yeah.


01:10:26.300 --> 01:10:29.420
I think we all concur, Beanie.


01:10:29.420 --> 01:10:30.780
Definitely a good one.


01:10:30.780 --> 01:10:32.020
Okay, cool.


01:10:32.020 --> 01:10:33.780
Yeah, absolutely.


01:10:33.780 --> 01:10:36.380
All right, guys, final call to action.


01:10:36.380 --> 01:10:38.380
People wanna get started with this.


01:10:38.380 --> 01:10:40.620
Once it's out, what do they do?


01:10:40.620 --> 01:10:41.880
When they're listening to this, it'll be out.


01:10:41.880 --> 01:10:43.420
So about to confuse folks.


01:10:43.420 --> 01:10:45.660
- I've got a quick,


01:10:45.660 --> 01:10:50.140
I've got a link that folks can go and check this out.


01:10:50.140 --> 01:10:52.260
It'll obviously be in the show notes.


01:10:52.260 --> 01:10:53.620
It's just a short link.


01:10:53.620 --> 01:10:58.620
It's an aka.ms and it's try-aca-python.


01:10:58.620 --> 01:11:00.140
- Right on.


01:11:00.140 --> 01:11:02.460
- And they can see the project template,


01:11:02.460 --> 01:11:06.540
sign up for our preview, check out the repos, et cetera.


01:11:06.540 --> 01:11:08.300
- Cool.


01:11:08.300 --> 01:11:10.820
Yeah, it looks like a neat project.


01:11:10.820 --> 01:11:14.100
And, you know, definitely people are doing Azure.


01:11:14.100 --> 01:11:17.920
It's like supercharges you into a ton of best practices.


01:11:17.920 --> 01:11:19.520
- Yeah, yeah, for sure.


01:11:19.520 --> 01:11:20.740
- Cool, well, nice work


01:11:20.740 --> 01:11:22.640
and thanks for joining me to talk about it.


01:11:22.640 --> 01:11:24.280
- Yeah, appreciate the time, thanks.


01:11:24.280 --> 01:11:25.720
- Yeah, you bet, bye.


01:11:25.720 --> 01:11:26.560
- Bye.


01:11:26.560 --> 01:11:36.560
[BLANK_AUDIO]

