WEBVTT

00:00:00.001 --> 00:00:03.500
Calvin, welcome to Talk Python To Me.

00:00:03.500 --> 00:00:05.840
It's great to finally have you on the show.

00:00:05.840 --> 00:00:07.300
What have you been doing all this time?

00:00:07.300 --> 00:00:08.360
I don't know.

00:00:08.360 --> 00:00:09.620
Not being on your show, I guess.

00:00:09.620 --> 00:00:13.440
I actually was super excited when you asked if I could be on here

00:00:13.440 --> 00:00:14.720
because this has been like a life goal,

00:00:14.720 --> 00:00:17.760
at least a goal since Talk Python To Me has ever existed.

00:00:17.760 --> 00:00:19.420
I really appreciate that.

00:00:19.420 --> 00:00:20.020
That's very kind.

00:00:20.020 --> 00:00:22.160
Well, it's great to have you on here.

00:00:22.160 --> 00:00:25.700
And I am all about DevOps and deployment these days.

00:00:25.700 --> 00:00:31.700
I think it's another superpower that I think people can really have.

00:00:31.700 --> 00:00:33.240
You've got an idea.

00:00:33.240 --> 00:00:38.580
You want to deploy the dream as the song that we'll play later, we'll say.

00:00:38.580 --> 00:00:46.100
And if you're not familiar with this stuff, it's a huge roadblock.

00:00:46.100 --> 00:00:48.620
You're like, oh, I built this thing, but how do I get it up there

00:00:48.620 --> 00:00:50.240
and how can I keep it running?

00:00:50.240 --> 00:00:51.140
Yeah.

00:00:51.140 --> 00:00:54.680
And so what we're going to talk about is a framework you all have created

00:00:54.680 --> 00:01:00.200
to make this much more automated and easy and packaged up, if you will.

00:01:00.200 --> 00:01:02.120
Yeah, I agree.

00:01:02.120 --> 00:01:07.580
Part of the developer experience, not just the deployment story,

00:01:07.580 --> 00:01:11.080
but how do I make a developer be productive from day one?

00:01:11.080 --> 00:01:14.820
I get super obsessed about the experience.

00:01:14.820 --> 00:01:16.000
Is it smooth?

00:01:16.000 --> 00:01:16.680
Is it easy?

00:01:16.680 --> 00:01:20.380
Can developers join your organization and be productive right away?

00:01:20.380 --> 00:01:24.280
That's important to me as an owner of a business who produces software.

00:01:24.660 --> 00:01:25.400
Mm-hmm.

00:01:25.400 --> 00:01:27.060
We'll start there.

00:01:27.060 --> 00:01:29.660
Who are you?

00:01:29.660 --> 00:01:30.360
What is your business?

00:01:30.360 --> 00:01:30.940
What do you do?

00:01:30.940 --> 00:01:32.380
Set the stage for everyone.

00:01:32.380 --> 00:01:33.120
All right.

00:01:33.120 --> 00:01:34.760
So my name's Calvin Hendryx-Parker.

00:01:34.760 --> 00:01:37.120
I am CTO and co-founder of Six Feet Up.

00:01:37.120 --> 00:01:42.820
We are a Python and AI for good software agency based out of the Midwest here in Indiana.

00:01:43.380 --> 00:01:46.900
But we have folks all across the country and a few folks across the globe.

00:01:46.900 --> 00:01:51.160
We help impactful tech leaders level up their game.

00:01:51.160 --> 00:01:56.880
Like if you've got an idea and you can see the future, part of our goal is to make that happen.

00:01:56.880 --> 00:02:02.400
Like we love tackling the super hard software problems.

00:02:02.400 --> 00:02:05.960
The harder, the better, and the more unique, and the more impactful, the better.

00:02:05.960 --> 00:02:10.600
Part of our goal has been to do 100 impactful projects by 2033.

00:02:10.600 --> 00:02:14.080
And those impactful projects are things that are making the world a better place.

00:02:14.480 --> 00:02:18.820
So some of our projects do actually impact climate or energy.

00:02:18.820 --> 00:02:23.180
We've done some stuff with NASA on space travel.

00:02:23.180 --> 00:02:28.180
So it's cool stuff like that that the people who work at Six Feet Up get super excited about.

00:02:28.180 --> 00:02:32.860
And like part of what drives me to do what we do every day, for sure.

00:02:32.860 --> 00:02:33.620
Yeah.

00:02:33.620 --> 00:02:35.080
And to get to work on space travel.

00:02:35.080 --> 00:02:35.880
Oh, man.

00:02:35.880 --> 00:02:38.720
It's like I'm getting up early today.

00:02:38.720 --> 00:02:40.080
It's literally rocket science.

00:02:40.080 --> 00:02:41.000
Literally rocket science.

00:02:41.000 --> 00:02:41.760
Yeah.

00:02:41.760 --> 00:02:42.520
How amazing.

00:02:42.520 --> 00:02:44.480
And you've been doing Python for a long time.

00:02:44.480 --> 00:02:47.520
You've been involved since the early days, right?

00:02:47.520 --> 00:02:47.860
Yeah.

00:02:47.860 --> 00:02:51.960
I first adopted or touched Python in literally the year 2000.

00:02:51.960 --> 00:02:53.000
I started working.

00:02:53.000 --> 00:02:53.200
Really?

00:02:53.200 --> 00:02:55.740
I was in a startup in the Bay Area.

00:02:55.740 --> 00:03:02.440
And the guy sitting next to me was like, check out this Python-based application server called Zope.

00:03:02.440 --> 00:03:05.500
And at that point in time in my life, I had just graduated college.

00:03:05.500 --> 00:03:09.740
And I think I understood the three words in between all the other words that he just said.

00:03:09.740 --> 00:03:12.500
And so that was a whole new world that got opened up to me.

00:03:13.020 --> 00:03:19.080
And so I started out my journey in Python really with Zope as kind of the first thing that got me in.

00:03:19.080 --> 00:03:25.680
But back in that day, like Zope and BitTorrent were kind of the killer apps for Python.

00:03:25.680 --> 00:03:28.680
If folks remember, there were like Zope tracks at PyCon.

00:03:28.680 --> 00:03:31.600
And keynotes were like around Zope.

00:03:31.600 --> 00:03:32.660
It was the thing.

00:03:32.840 --> 00:03:39.040
And I still attribute that community to really bringing me into Python and getting me engaged.

00:03:39.040 --> 00:03:45.200
It's some of the smartest people I've ever worked with who are part of that open source community who made that a thing.

00:03:45.200 --> 00:03:46.580
And I'm still friends with those people today.

00:03:46.580 --> 00:03:48.900
You know, people like Paul Everett and Trey Seaver.

00:03:48.900 --> 00:03:53.440
And those folks were really part of my upbringing into the Python community.

00:03:53.440 --> 00:03:55.200
And I can't thank them enough.

00:03:55.920 --> 00:03:56.620
That's awesome.

00:03:56.620 --> 00:04:05.760
You know, there's a really interesting fact that was shown at least amongst survey respondents in the PSF JetBrains survey, speaking of Paul Everett,

00:04:06.440 --> 00:04:16.660
that I would say 40% of the people who are doing Python these days are two years or less into it.

00:04:16.660 --> 00:04:17.040
Wow.

00:04:17.040 --> 00:04:19.320
Which is an incredible statistic.

00:04:19.320 --> 00:04:23.280
I think 30% or so is this is their first year.

00:04:23.280 --> 00:04:25.560
And then, you know, the rest is the second year.

00:04:25.560 --> 00:04:29.640
So we're amongst the rare birds.

00:04:29.640 --> 00:04:31.060
But the reason I bring that up is...

00:04:31.060 --> 00:04:32.560
25 years later, we're still here doing it.

00:04:32.560 --> 00:04:33.280
Exactly.

00:04:34.160 --> 00:04:39.820
The reason I bring that up is, you know, I suspect people who have been at this for three or four years maybe don't know what Zope is.

00:04:39.820 --> 00:04:43.120
They probably heard the word, but they're like, yeah.

00:04:43.120 --> 00:04:45.420
Is that like a thing that Django does?

00:04:45.420 --> 00:04:48.100
Tell people what Zope is real quick.

00:04:48.100 --> 00:04:54.960
I mean, the application framework space back in the 2000s was not a crowded space.

00:04:54.960 --> 00:04:56.340
There weren't many options.

00:04:56.340 --> 00:05:02.600
And I think the beauty of what Zope was an application framework, it had some interesting opinions.

00:05:02.940 --> 00:05:13.340
One of them being the Zodb, which I still do love to this day, which is an object graph database that enabled you to build applications quickly.

00:05:13.340 --> 00:05:16.940
And I think initially one of their goals was like through the web, even.

00:05:16.940 --> 00:05:24.780
Like if you remember Z classes, like you could build and rapid prototype through the web, you know, in your browser.

00:05:25.220 --> 00:05:29.900
I mean, this is the year 2000 and this is not last year, like where people were like, wow, cool.

00:05:29.900 --> 00:05:30.780
This is low code thing.

00:05:30.780 --> 00:05:33.360
Like this was that 25 years ago.

00:05:33.360 --> 00:05:34.440
This was ahead of its time.

00:05:34.440 --> 00:05:35.680
Way ahead of its time.

00:05:35.680 --> 00:05:38.420
Now, granted, I don't think that that was not the future.

00:05:38.420 --> 00:05:39.380
That shouldn't be the future.

00:05:39.960 --> 00:05:45.340
I'm actually hoping to give some conference talks this year about low code, no code and my opinions on that.

00:05:45.340 --> 00:05:49.500
Especially, actually, I should frame it in my context of Zope and Z classes.

00:05:49.500 --> 00:05:52.340
But maybe that's too much of an inside joke.

00:05:52.340 --> 00:05:55.880
I don't know if enough people would even understand what I'm talking about there.

00:05:56.300 --> 00:05:59.840
Because like you said, so many people are new to the community, which I think is awesome.

00:05:59.840 --> 00:06:02.640
I think that shows it's a vibrant, growing community.

00:06:02.640 --> 00:06:09.360
If you're in a community and you're wondering or worrying where the new next generation is going to come from, there's a problem.

00:06:09.360 --> 00:06:11.420
And I don't think that Python has that problem.

00:06:11.420 --> 00:06:15.520
Python has an incredible traction with new people.

00:06:15.520 --> 00:06:18.180
And I've always loved it because of the simplicity.

00:06:18.180 --> 00:06:22.760
I love it because the language is predictable in its patterns.

00:06:23.080 --> 00:06:31.400
It's not a cognitive overhead to remember all the various ways to call things in Python because typically they're pretty consistent.

00:06:31.400 --> 00:06:32.820
Yeah.

00:06:32.820 --> 00:06:34.300
But Python's slow.

00:06:34.300 --> 00:06:35.180
We can't use it for stuff.

00:06:35.180 --> 00:06:39.200
I do not believe that for a second.

00:06:39.200 --> 00:06:39.580
No.

00:06:39.580 --> 00:06:47.180
I think if you're doing maybe mathematical simulations or certain types of really, really intense low-level things, maybe.

00:06:47.180 --> 00:06:50.340
But as a general application framework, it flies.

00:06:50.340 --> 00:06:50.800
It's fine.

00:06:50.800 --> 00:06:51.280
Yeah.

00:06:51.640 --> 00:07:07.740
And that's the problem, too, is that if you go off right now and you ask your ChatGPT or your Claude about maybe what are some disadvantages of Python, it's going to mention these kind of broad, old opinions about it because it only knows the average of all the knowledge has ever been on the internet.

00:07:07.740 --> 00:07:11.280
And it's learned a bunch of trash talk as well.

00:07:11.280 --> 00:07:11.860
Exactly.

00:07:11.860 --> 00:07:13.760
And which is mostly inaccurate.

00:07:14.120 --> 00:07:20.800
But if you ask it to dig deeper and someday we'll be able to ask it and think a little more critically, you'll probably dig in and get the truth.

00:07:20.800 --> 00:07:21.740
Yeah.

00:07:21.740 --> 00:07:24.040
Bit of a side note.

00:07:24.040 --> 00:07:28.120
I recently, for a couple of things I needed, got the ChatGPT Pro.

00:07:28.120 --> 00:07:31.020
Not the paid version, but the Insane Pro version.

00:07:31.020 --> 00:07:31.800
Oh, the $200?

00:07:31.800 --> 00:07:32.740
Yeah.

00:07:32.740 --> 00:07:33.880
$200 a month.

00:07:33.880 --> 00:07:34.680
And I laughed at myself.

00:07:34.680 --> 00:07:36.880
Like, this is the stupidest thing I've ever done, but I need it.

00:07:36.900 --> 00:07:39.080
So I'm going to do it for a few days, turn it off.

00:07:39.080 --> 00:07:40.220
It's incredible.

00:07:40.220 --> 00:07:40.980
I'm not turning it off.

00:07:40.980 --> 00:07:45.320
It's like my side buddy.

00:07:45.320 --> 00:07:46.280
I can ask anything.

00:07:46.280 --> 00:07:48.800
And it is so good.

00:07:48.800 --> 00:07:51.180
The future is here.

00:07:51.180 --> 00:07:52.840
It's just not evenly distributed, you know?

00:07:52.840 --> 00:08:02.660
It's not evenly distributed because it's hard for most folks to have the right mindset, I think, to approach to get that level of value out of it.

00:08:02.660 --> 00:08:05.420
I think you have to know how to talk to it.

00:08:06.020 --> 00:08:06.960
And I've said this before.

00:08:06.960 --> 00:08:11.100
It's the same problem with people who aren't good at using Google.

00:08:11.100 --> 00:08:12.460
Just plain old search.

00:08:12.460 --> 00:08:20.220
Like, you know, the people who have to say, let me Google that for you, are the ones who understand how to, like, use a search engine, you know, well.

00:08:20.220 --> 00:08:21.580
Some people...

00:08:21.580 --> 00:08:25.560
You know, that can be answered in an exact phrase if you just say the phrase.

00:08:25.560 --> 00:08:27.000
Just say the phrase.

00:08:27.000 --> 00:08:27.600
You know what I mean?

00:08:27.600 --> 00:08:27.780
Yeah.

00:08:27.780 --> 00:08:29.520
And it's also a mindset, right?

00:08:29.520 --> 00:08:38.620
Like, I started thinking, like, instead of this is a cost or something, like, this is, like, another employee that I can just give jobs.

00:08:38.620 --> 00:08:39.940
And five minutes later, I'll come back.

00:08:39.940 --> 00:08:42.940
And it's done pretty thorough research.

00:08:42.940 --> 00:08:43.720
You know, it's...

00:08:43.720 --> 00:08:43.820
Yeah.

00:08:43.820 --> 00:08:47.540
Especially with the new scheduling feature where you can actually schedule tasks to happen.

00:08:47.540 --> 00:08:49.520
I'm getting kind of excited about it.

00:08:49.520 --> 00:08:50.560
Everyone's talking about agents.

00:08:50.560 --> 00:08:53.420
And I know this isn't the AI show we're here to talk about.

00:08:53.420 --> 00:08:56.900
But I think agents are interesting, but we're not there yet.

00:08:57.660 --> 00:09:02.380
They're about the level of maybe interns and what you would trust them to do for you.

00:09:02.380 --> 00:09:03.720
Yeah.

00:09:03.720 --> 00:09:04.800
I totally agree.

00:09:04.800 --> 00:09:10.080
I'm a little worried about what all this stuff is going to do to the industry in a broad sense.

00:09:10.080 --> 00:09:16.180
My main concern is I think it'll sort of carve out that gap between early dev and senior dev.

00:09:16.180 --> 00:09:18.800
And it's going to be harder for folks to cross that.

00:09:18.800 --> 00:09:19.900
Yeah.

00:09:19.900 --> 00:09:21.420
But it's also an incredible technology.

00:09:21.420 --> 00:09:25.060
And I think it's also silly to pretend it doesn't exist.

00:09:25.060 --> 00:09:26.760
So anyway, you're right.

00:09:26.760 --> 00:09:27.460
It's not the AI show.

00:09:27.460 --> 00:09:30.520
But boy, is it on top of mind for a lot of us, right?

00:09:30.520 --> 00:09:31.780
Yeah, for sure.

00:09:31.780 --> 00:09:33.300
Yeah.

00:09:33.300 --> 00:09:34.580
Okay.

00:09:34.580 --> 00:09:39.920
So let's talk Python deployment.

00:09:39.920 --> 00:09:42.040
Let's talk some pitfalls.

00:09:42.040 --> 00:09:43.860
Maybe a little bit of Docker.

00:09:43.860 --> 00:09:45.280
How's this?

00:09:45.280 --> 00:09:47.280
It's interesting.

00:09:47.280 --> 00:09:49.540
Why did you all attack this problem?

00:09:49.540 --> 00:09:51.140
And I guess setting the stages.

00:09:53.380 --> 00:09:56.140
Where does this fit in your consulting story, right?

00:09:56.140 --> 00:10:03.480
You must need to deliver these applications often in a way that people can continue to keep them going on their own without you constantly going back.

00:10:03.480 --> 00:10:04.960
Yeah, there's some pip updates.

00:10:04.960 --> 00:10:06.060
So we'll take care of that for you.

00:10:06.060 --> 00:10:10.580
Well, and that definitely reaches into the longer tale of the whole story.

00:10:11.100 --> 00:10:26.640
But I think if you go back to the beginning of the story of deployment, a lot of us started out, or a lot of us older ones, more seasoned veteran developer folks in a world where if you wanted to deploy your web application, you threw some PHP into a web root.

00:10:26.960 --> 00:10:30.240
And as long as you had mod PHP installed, the stuff ran.

00:10:30.240 --> 00:10:36.020
Like you didn't have to think about configuring ingress and egress routes.

00:10:36.020 --> 00:10:39.620
And it was, you know, databases just ran on the same server you were on.

00:10:39.620 --> 00:10:40.960
So you just ran it on localhost.

00:10:41.120 --> 00:10:44.380
Like it's the world has changed when it comes to the deployment story.

00:10:44.380 --> 00:10:50.200
But it's because things have gotten more complex and sophisticated because they had to.

00:10:50.200 --> 00:10:54.660
Like we had needs for more sophisticated authentication mechanism.

00:10:54.660 --> 00:10:57.140
We have needs for caching and delivery.

00:10:57.140 --> 00:10:59.280
We have needs for time series data.

00:10:59.280 --> 00:11:07.680
Because those opportunities opened up, more sophisticated software gets built, which means it's a little trickier to deploy.

00:11:07.680 --> 00:11:14.740
Well, looking back and, you know, with your perspective of all this experience as well, it's something I've seen.

00:11:14.740 --> 00:11:20.640
Every time the technology gets easier to work with, you know, like that used to be 100 lines of code.

00:11:20.640 --> 00:11:21.440
Now it's three.

00:11:21.440 --> 00:11:23.220
Well, we're going to be out of jobs soon.

00:11:23.220 --> 00:11:27.000
A lot of people would say it's like, no, we're just going to solve bigger and ambitious problems.

00:11:27.600 --> 00:11:30.500
And that's been the case for so long.

00:11:30.500 --> 00:11:33.880
And it's not that, well, things got easier, so we're not going to do it.

00:11:33.880 --> 00:11:37.920
It's no, every time it got easier, we were able to just think of bigger, more.

00:11:37.920 --> 00:11:39.880
Instead of, we don't need a team.

00:11:39.880 --> 00:11:41.600
One person can solve this amazing problem.

00:11:41.600 --> 00:11:48.160
But that means underneath that, there's this mountain, this iceberg of stuff going on, right?

00:11:48.160 --> 00:11:53.980
Well, and that's what I think that's where deployment has gotten, I think, hard in a lot of people's minds.

00:11:54.240 --> 00:12:01.460
It's because there is a mountain of knowledge, like a giant shoulders that you're standing on that makes that happen.

00:12:01.460 --> 00:12:10.740
And my VP of engineering was complaining to me yesterday, like, why can't we just, how can we not easily put websites on the internet anymore?

00:12:10.740 --> 00:12:13.780
It's not that we can't put websites on the internet anymore.

00:12:13.780 --> 00:12:15.380
They just do so much for us.

00:12:15.380 --> 00:12:21.020
It's like the complexity and the sophistication under the covers is what's causing a lot of this issue.

00:12:21.020 --> 00:12:31.500
And the person who wrote software is not always the person who deploys software, because I think they've just got kind of different mindsets or different ways of thinking about the problems.

00:12:31.500 --> 00:12:39.480
And it's rare you find people who are truly a full stack can do front end to the back end to the database to the network to all the layers that are in between.

00:12:39.480 --> 00:12:47.000
And it's nice that services like, you know, the cloud have come about where it simply greatly simplifies that deployment.

00:12:47.000 --> 00:12:49.580
I mean, that was part of our journey into containers.

00:12:50.580 --> 00:13:01.140
I was resistant to containers probably until 2020 when we did in 2020, there was a change, obviously.

00:13:01.140 --> 00:13:05.360
Some things happened in the world, but we also built more time to be at home and think about stuff.

00:13:05.360 --> 00:13:05.820
Right.

00:13:05.820 --> 00:13:11.480
But we also had time to build some software to help us empower a little conference we were doing.

00:13:11.480 --> 00:13:14.200
We put on the Python web conference during the pandemic.

00:13:14.200 --> 00:13:15.480
We actually started the pre-pandemic.

00:13:16.200 --> 00:13:20.900
But during the pandemic, we took time to write some software to deploy a virtual event platform.

00:13:20.900 --> 00:13:40.780
And I think containers, at that point in time, I adopted containers and container orchestration because it allowed the developers to think more about developing and less about the deploying part of a sophisticated application like streaming web video, audio mixing, switching live chats and web sockets.

00:13:40.780 --> 00:13:47.460
I mean, there's a whole lot of moving parts in something when you're delivering a live video conference experience.

00:13:47.460 --> 00:14:00.180
And the containers were a nice, like, equalizing layer to allow us to say, I don't care where it goes to, whether it's in Docker Compose or Kubernetes or Docker Swarm.

00:14:00.180 --> 00:14:05.020
Or in our case, we used Amazon's Fargate because I just didn't want to deal with infrastructure.

00:14:05.440 --> 00:14:10.220
I just told Fargate, I got some tasks here, some containers, make them live.

00:14:10.220 --> 00:14:11.360
Like, turn them on.

00:14:11.360 --> 00:14:12.280
Yeah.

00:14:12.280 --> 00:14:16.060
And it sounds like that's for devs as well.

00:14:16.060 --> 00:14:16.980
Yeah.

00:14:16.980 --> 00:14:17.840
And we do containers.

00:14:17.840 --> 00:14:24.020
Not just the infrastructure you're deploying to, but it sounds like you're smoothing the path for the whole team, right?

00:14:24.020 --> 00:14:24.800
Correct.

00:14:24.960 --> 00:14:28.780
That's an opinion I hold that containers are for development as well.

00:14:28.780 --> 00:14:30.900
Like, that developer experience.

00:14:30.900 --> 00:14:38.520
Some organizations I've seen, they may be deploying on the Kubernetes because there were operational opinions about deploying into containers.

00:14:38.520 --> 00:14:49.660
But the developers themselves haven't adopted that fully on their local workstation because it may feel hard until you've got that muscle built up for doing that level of development.

00:14:49.660 --> 00:14:56.180
And that's originally, that's why SCAF came about, is to make that development experience just a breeze.

00:14:56.180 --> 00:15:04.060
Like, we focused on how quickly can a developer be productive locally using containers and still have all your tools.

00:15:04.060 --> 00:15:16.060
Like, it shouldn't feel different than if you were developing with your local Django files on your local file system and you were just running a Postgres instance, you know, out of homebrew.

00:15:16.060 --> 00:15:21.220
Except it's better because now the versions will match what's running in production.

00:15:21.220 --> 00:15:40.240
And you can have five different projects running with five different versions of things because you want to make sure they match your expectations when they go to launch and not be surprised when, you know, the version of Redis doesn't support some new operator because you're one minor version off in your local machine compared to the sandbox and production machines.

00:15:40.500 --> 00:15:41.020
Yeah.

00:15:41.020 --> 00:15:41.080
Yeah.

00:15:41.080 --> 00:15:55.380
I was not against containers, but I was resistant to use them myself because I felt like, well, here's another thing, another thing to understand, another thing that's a layer between me and my code.

00:15:55.380 --> 00:15:59.160
And it's just, it could go wrong and I don't need it.

00:15:59.160 --> 00:16:00.240
And you know what?

00:16:00.240 --> 00:16:03.040
I'm, I'm a believer.

00:16:03.040 --> 00:16:08.180
It is so nice to be able to just say, here's three commands you can run.

00:16:08.180 --> 00:16:08.780
Exactly.

00:16:08.780 --> 00:16:10.060
It's always going to be exactly.

00:16:10.060 --> 00:16:18.980
And another thing that I've done is on my new, my new Macs and stuff, my dev machines, I don't put databases on there.

00:16:18.980 --> 00:16:19.380
Nope.

00:16:19.380 --> 00:16:19.940
Caching.

00:16:19.940 --> 00:16:28.320
I don't even necessarily install Python directly on, you know, as in go to python.org or homebrew or something like that.

00:16:28.320 --> 00:16:37.060
It's, if I want a tool and, you know, instead of installing say MongoDB, I can just have a Docker command that runs MongoDB.

00:16:37.060 --> 00:16:37.900
Yeah.

00:16:37.900 --> 00:16:38.880
That listens on the same port.

00:16:38.880 --> 00:16:39.040
Yep.

00:16:39.040 --> 00:16:39.560
Yep.

00:16:39.560 --> 00:16:40.940
And it's, it's always up to date.

00:16:40.940 --> 00:16:42.240
And if I don't like it, I get rid of it.

00:16:42.240 --> 00:16:46.300
If I want to change the version of it, I just change a flag somewhere in a file.

00:16:46.300 --> 00:16:49.020
And it's, it's incredible.

00:16:49.020 --> 00:16:50.200
But that and UV.

00:16:50.400 --> 00:16:50.640
Yeah.

00:16:50.640 --> 00:17:02.040
Think back to the old, the old days when the old days for us, but probably the current state for a lot of people in certain organizations is you had a large getting started document that you would have to follow top to bottom.

00:17:02.600 --> 00:17:03.900
You know, make sure you get this version of that.

00:17:03.900 --> 00:17:05.140
Make sure you get that version of this.

00:17:05.140 --> 00:17:06.620
Make sure you put these files there.

00:17:06.620 --> 00:17:14.400
Make sure your database is running with these, these couple of extra options because we've enabled some, you know, maybe we've enabled GIS or some extension to the database.

00:17:14.560 --> 00:17:23.480
If you didn't get all those magic incantations just right and follow the document to the letter, you were having, you know, a long time to get started.

00:17:23.480 --> 00:17:24.740
Like it was a struggle.

00:17:24.740 --> 00:17:31.420
Whereas you just tell someone get pull and then we'll tilt up in our case for scaf.

00:17:31.420 --> 00:17:38.720
We we've adopted the tilt management tool they're running and they can start making, you know, contributing code within an hour.

00:17:38.720 --> 00:17:39.620
Yeah.

00:17:39.620 --> 00:17:40.120
That's my goal.

00:17:40.120 --> 00:17:46.660
My goal has always been fresh laptop out of the box on my desk and be able to contribute like a pull request in an hour would be.

00:17:46.660 --> 00:17:47.300
Yeah.

00:17:47.300 --> 00:17:48.040
That's pretty excellent.

00:17:48.040 --> 00:17:49.120
Yeah.

00:17:49.120 --> 00:17:49.840
That's pretty excellent.

00:17:51.440 --> 00:18:01.240
So do you, when you guys are doing development, do you actually do development in containers or do you just use them to support all of your, your stuff?

00:18:01.240 --> 00:18:02.640
No, everything's in containers.

00:18:02.640 --> 00:18:06.460
Uh, that's, that was like scaf primarily.

00:18:06.460 --> 00:18:08.700
I mean, some people will see scaf as a deployment tool.

00:18:08.700 --> 00:18:12.060
I see scaf as a developer experience tool and a deployment tool.

00:18:12.060 --> 00:18:18.480
I covered both, both ends of that spectrum because everything starts obviously with the developer and an idea and some building some software.

00:18:18.820 --> 00:18:27.480
Well, if they can't build the software easily or they can't collaborate with another contributor on that software, it slows things down.

00:18:27.480 --> 00:18:36.400
So part of what we, you know, that scaf tool is, is a, it's going to be able to give you the scaffolding to build out an initial project.

00:18:36.400 --> 00:18:38.680
Like starting from scratch, you have nothing on the file system.

00:18:38.680 --> 00:18:41.980
Skaf will build out those initial tools, but then scaf is a set of opinions.

00:18:41.980 --> 00:18:45.600
More importantly, because lots of scaffolding tools exist out there.

00:18:45.600 --> 00:18:50.680
I mean, it's current scaf is built on cookie cutter, but we're, you know, going to, we can move that.

00:18:50.680 --> 00:18:55.020
We can move those opinions as we change our opinions about the development world.

00:18:55.020 --> 00:19:04.120
So as we build a new project and, and, you know, let that get started, we now can develop locally on containers.

00:19:04.120 --> 00:19:07.980
Like we use kind for our Kubernetes cluster locally, which is nice.

00:19:07.980 --> 00:19:14.280
It, you can, you think running Kubernetes might be overkill for a local development environment.

00:19:14.280 --> 00:19:20.360
But the nice part about that is like now the, the Kubernetes manifests, you know, layer nicely.

00:19:20.360 --> 00:19:23.500
You've got a local base layer, a local instance.

00:19:23.500 --> 00:19:26.580
You've got a sandbox instance or a development instance.

00:19:26.580 --> 00:19:32.840
You may launch into the cloud someplace, or you've got your, your production layers all right in there using customize.

00:19:32.840 --> 00:19:35.000
For example, nice.

00:19:35.000 --> 00:19:35.480
Yeah.

00:19:35.480 --> 00:19:44.200
Nice part about that is if my machine, it doesn't have enough horsepower or memory or disk space to run a specific project that where I need to, you know, jump in and help.

00:19:44.200 --> 00:19:45.800
I can just run that in the cloud.

00:19:45.800 --> 00:19:50.040
I don't, there's nothing saying I have to be running that locally on my own machine.

00:19:50.040 --> 00:19:54.980
All the tooling, all the file synchronization will work just as well.

00:19:54.980 --> 00:20:02.680
If it's running in a sidecar, like if I had a, you know, big white box, you know, Intel machine or, you know, machine sitting in my, under my desk.

00:20:02.680 --> 00:20:07.400
I could run that or I can just launch it into, you know, digital ocean or an AWS cloud.

00:20:07.400 --> 00:20:08.200
Doesn't matter.

00:20:08.200 --> 00:20:11.480
Yeah, absolutely.

00:20:11.480 --> 00:20:12.800
So let's dive in.

00:20:12.800 --> 00:20:14.480
Let's dive into Skaf.

00:20:14.480 --> 00:20:21.880
But before we do, have you seen, I talked about this in the last episode, this, this new AI computer thing that NVIDIA announced?

00:20:21.880 --> 00:20:23.260
I'm pretty excited about that, actually.

00:20:23.260 --> 00:20:24.280
I'm super excited.

00:20:24.280 --> 00:20:27.760
NVIDIA unveils a $3,000 desktop AI computer.

00:20:28.020 --> 00:20:31.340
And I think it's just, you kind of remote in and run containers on it as well.

00:20:31.340 --> 00:20:31.940
I'm pretty sure.

00:20:31.940 --> 00:20:33.980
Yeah.

00:20:33.980 --> 00:20:40.340
I was, I was excited because I felt like CES, this is obviously launched at CES by NVIDIA on stage.

00:20:40.340 --> 00:20:45.040
And I was excited to see CES have something that was interesting for developers again.

00:20:45.460 --> 00:20:50.140
I feel like CES had kind of gotten boring maybe over the last decade.

00:20:50.140 --> 00:20:51.620
And this was exciting.

00:20:51.620 --> 00:20:52.440
Yeah.

00:20:52.440 --> 00:20:52.920
I think that.

00:20:52.920 --> 00:20:54.680
It's got to be all doorbells and TVs.

00:20:54.680 --> 00:20:55.000
Yeah.

00:20:55.000 --> 00:20:55.760
Right.

00:20:55.760 --> 00:20:56.480
Exactly.

00:20:56.480 --> 00:20:58.860
And I love home automation.

00:20:58.860 --> 00:20:59.580
Don't get me wrong.

00:21:00.160 --> 00:21:02.880
But there's only so much of that junk I could possibly be interested in.

00:21:02.880 --> 00:21:04.580
And this is something I'm very interested in.

00:21:04.580 --> 00:21:05.660
Exactly.

00:21:05.660 --> 00:21:11.060
Well, Jamie out in the audience says, totally all in on developing with containers.

00:21:11.060 --> 00:21:13.080
Very few tools installed on my own Mac locally.

00:21:13.080 --> 00:21:14.620
We're here with you.

00:21:14.620 --> 00:21:15.000
Awesome.

00:21:15.000 --> 00:21:15.180
Yeah.

00:21:15.180 --> 00:21:15.960
The important tools.

00:21:15.960 --> 00:21:17.840
Like, you've got your IDE, your VS Code.

00:21:17.840 --> 00:21:21.540
You've got your, you know, you've got your favorite Git visualization tool.

00:21:21.540 --> 00:21:24.900
Like, I mean, those are critical to your tool chain, your workflow.

00:21:24.900 --> 00:21:25.720
And they should work everywhere.

00:21:25.720 --> 00:21:28.880
They should work just as work alike on every project you're on.

00:21:28.880 --> 00:21:29.880
Yeah.

00:21:29.880 --> 00:21:32.100
I agree.

00:21:32.100 --> 00:21:33.700
I don't develop containers.

00:21:33.700 --> 00:21:36.420
But I work with, you know, local virtual environments.

00:21:36.420 --> 00:21:39.160
And then, like, basically try to replicate exactly the same.

00:21:39.160 --> 00:21:44.740
But all the surrounding stuff, all the daemons and the servers and all that is all, like, so.

00:21:44.740 --> 00:21:48.160
We're at a slightly different stage of our container journey, I believe.

00:21:48.160 --> 00:21:50.240
But we're both far down the path, I think.

00:21:50.240 --> 00:21:52.180
Much further than we used to be.

00:21:52.180 --> 00:21:52.800
That's for sure.

00:21:52.800 --> 00:21:53.360
Oh, certainly.

00:21:53.360 --> 00:21:54.800
Much further than I used to be.

00:21:54.800 --> 00:21:56.300
All right.

00:21:56.300 --> 00:21:57.440
Here we are.

00:21:57.440 --> 00:21:58.940
Six feet up slash scaf on GitHub.

00:21:58.940 --> 00:21:59.620
Yep.

00:21:59.620 --> 00:22:07.040
Scap provides developers and DevOps engineers with a complete blueprint for a new project using Kubernetes.

00:22:07.040 --> 00:22:10.560
We talked a lot about the motivation and so on.

00:22:10.560 --> 00:22:13.980
But let's start with the beginning.

00:22:13.980 --> 00:22:15.960
You said, I have an idea for a project.

00:22:15.960 --> 00:22:16.940
I want it well-structured.

00:22:17.500 --> 00:22:25.300
So this is a little cookie cutter-ish in a sense that, but what it makes is more than just a Python project, right?

00:22:25.300 --> 00:22:26.460
Tell us what we got here.

00:22:27.600 --> 00:22:38.240
So this started out, if you've ever followed the cookie cutter project, there was a cookie cutter Django template out there made by, you know, PyDanny.

00:22:38.540 --> 00:22:40.080
It kind of kicked that off and started it.

00:22:40.080 --> 00:22:46.040
I liked a lot of his opinions, but I wanted more to it, or I wanted to change some of them.

00:22:46.040 --> 00:22:49.700
So that was the original, like, kind of kernel of where this started.

00:22:50.080 --> 00:22:58.100
And then we grew a lot more around the deployment story and some of the developer tools so that we could be on Kubernetes.

00:22:58.100 --> 00:23:01.240
We could standardize on Kubernetes as a container platform.

00:23:01.240 --> 00:23:08.380
So we could launch into any cloud, whether it's a managed Kubernetes or whether you're bare metal and are running, like, VMs and EC2.

00:23:08.380 --> 00:23:17.600
It doesn't matter because the nice part about Kubernetes is it gives you that agnostic interface to, you know, launch new containers.

00:23:17.600 --> 00:23:25.240
I think a lot of people see Kubernetes as complex and used for, like, container orchestration and scaling.

00:23:25.580 --> 00:23:32.420
But I see Kubernetes as a way, it's an interface, it's an API to allow us to deploy easily.

00:23:32.420 --> 00:23:34.740
So we wanted to focus on things like CICD.

00:23:34.740 --> 00:23:36.580
And could you make that simple?

00:23:36.580 --> 00:23:40.640
So SCAF includes opinions around Argo CD, for example.

00:23:40.640 --> 00:23:48.420
So when you deploy into Sandbox, it deploys the Argo CD operator, and then it sits and watches your repository for changes.

00:23:48.420 --> 00:23:54.980
So anytime you merge to the dev branch, for example, it will release to Sandbox and then the QA team can go test.

00:23:55.520 --> 00:23:56.400
And you don't have to think about it.

00:23:56.400 --> 00:23:57.780
Like, you just make a PR.

00:23:57.780 --> 00:24:01.260
If it gets reviewed and accepted and merged, the release happens.

00:24:01.260 --> 00:24:02.740
Like, no one forgets to do the release.

00:24:02.740 --> 00:24:04.780
No one has to do manual steps to do the release.

00:24:04.780 --> 00:24:16.960
Long gone are the days of, you know, shelling into a box and doing a get pull or SVN up in a directory and then forgetting to restart some service to pick up those changes.

00:24:17.480 --> 00:24:19.420
Because humans, we're humans.

00:24:19.420 --> 00:24:25.620
We're terrible about repeatability and maintaining and being able to do maintenance type tasks like that.

00:24:25.620 --> 00:24:27.180
We're just not built for it.

00:24:27.180 --> 00:24:28.700
We're built for creative type thinking.

00:24:28.700 --> 00:24:33.660
So we should let the computers do the bits they're good at, which I feel like that's what some of these opinions are based around.

00:24:33.660 --> 00:24:35.720
Can we automate those pieces away?

00:24:36.420 --> 00:24:36.540
Right.

00:24:36.540 --> 00:24:38.140
It's like a deployment checkbox.

00:24:38.140 --> 00:24:39.060
Oh, yeah.

00:24:39.060 --> 00:24:39.480
Checklist.

00:24:39.480 --> 00:24:40.500
And it's like, check, check, check.

00:24:40.500 --> 00:24:41.240
Have we installed this?

00:24:41.240 --> 00:24:42.760
Do you set this version exactly?

00:24:42.760 --> 00:24:43.260
Yeah.

00:24:43.260 --> 00:24:43.840
Yeah.

00:24:44.260 --> 00:24:46.320
And some humans are good at checklists.

00:24:46.320 --> 00:24:48.340
Like, there's people who are, that is their thing.

00:24:48.340 --> 00:24:50.380
Like, you know, doctors and surgery.

00:24:50.380 --> 00:24:51.460
Don't take their checks from them.

00:24:51.460 --> 00:24:51.580
Right.

00:24:51.580 --> 00:24:54.180
They love their checklists and glad they've got them.

00:24:54.180 --> 00:25:03.100
I feel like people who have gravitated towards software development are craftsmen, kind of artisans about a craft.

00:25:03.100 --> 00:25:07.460
And it's not so much about checking checkboxes as it is how do they creatively solve a problem?

00:25:07.460 --> 00:25:09.680
Because a lot of the problems they're solving haven't existed.

00:25:09.680 --> 00:25:11.820
If they existed already, they would be solved.

00:25:11.820 --> 00:25:13.720
And what would be the point of us writing any software?

00:25:14.460 --> 00:25:14.640
Yeah.

00:25:14.640 --> 00:25:15.620
And that's why we have that.

00:25:15.620 --> 00:25:16.460
It works on my machine.

00:25:16.460 --> 00:25:17.080
Yeah, totally.

00:25:17.080 --> 00:25:21.080
It's a game program because we don't check the boxes.

00:25:21.080 --> 00:25:25.140
And we're not amazing at making everything work the same.

00:25:25.140 --> 00:25:26.060
But, yeah.

00:25:26.060 --> 00:25:32.580
And this is my goal is getting rid of the works on my machine.

00:25:32.580 --> 00:25:34.620
Like, it should work everywhere exactly the same.

00:25:34.620 --> 00:25:37.680
And you should be able to use your own machine for development.

00:25:38.160 --> 00:25:44.900
I've seen a lot of teams where they have this big central server that's called dev.

00:25:44.900 --> 00:25:48.840
And that's where they all shell into and work simultaneously on a single spot.

00:25:48.840 --> 00:25:54.820
And that just feels fraught with errors and terror to me.

00:25:54.820 --> 00:25:55.120
Yeah.

00:25:55.240 --> 00:25:59.120
You know what it feels like it screams to me is you might end up, it doesn't work on my machine.

00:25:59.120 --> 00:26:00.480
It only works on that machine.

00:26:00.480 --> 00:26:01.200
Exactly.

00:26:01.200 --> 00:26:01.960
Even worse.

00:26:01.960 --> 00:26:02.760
It only works on that machine.

00:26:02.760 --> 00:26:09.160
I once worked on a research project with a pretty big funding organization.

00:26:09.160 --> 00:26:13.900
And there was a bunch of different contractors, one of them out of Seattle.

00:26:13.900 --> 00:26:18.060
And we all had to build some pretty complex software.

00:26:18.060 --> 00:26:21.420
The team I was on, we built something that kind of coordinated all of them.

00:26:21.420 --> 00:26:22.020
And it was fine.

00:26:22.020 --> 00:26:23.700
It worked great.

00:26:23.700 --> 00:26:24.320
We were all happy.

00:26:24.320 --> 00:26:25.320
The other people all delivered.

00:26:25.320 --> 00:26:34.900
But there was this one team that had built something on a big, big Linux server and big fat desktop thing.

00:26:34.900 --> 00:26:36.640
Why do I know the size of it?

00:26:36.640 --> 00:26:40.540
Because they had worked on it for nine months.

00:26:40.540 --> 00:26:42.680
And then they tried to get it to run on another.

00:26:42.680 --> 00:26:46.640
They literally could not get it to run on any other computer.

00:26:47.200 --> 00:26:52.500
And so they put it into the most fragile, their most careful shipping container they could.

00:26:52.500 --> 00:26:55.100
And they drove it from Seattle to San Diego.

00:26:55.100 --> 00:27:00.760
And they set it up in the corner because they literally couldn't get the software they wrote to run on any other system.

00:27:00.760 --> 00:27:02.420
Could you imagine?

00:27:02.420 --> 00:27:04.700
Like, what are you going to do in that next time around?

00:27:04.700 --> 00:27:05.540
What if it breaks?

00:27:05.540 --> 00:27:08.260
Yeah.

00:27:08.260 --> 00:27:10.440
I'm working on a big central server.

00:27:10.440 --> 00:27:12.380
Maybe there's a way to, like, restore it and stuff.

00:27:12.380 --> 00:27:20.220
But you could craft your software into a corner on that big server where it's like, well, we're going to move to the cloud.

00:27:20.220 --> 00:27:21.760
Like, no, we're going to keep it on that thing.

00:27:21.760 --> 00:27:23.580
And it better just be enough, you know?

00:27:23.580 --> 00:27:24.180
Right.

00:27:24.180 --> 00:27:26.640
And how do you onboard someone new to help you?

00:27:26.640 --> 00:27:28.900
Like, you got to be like, well, be very, very careful.

00:27:28.900 --> 00:27:31.020
There's this only one server where it only runs.

00:27:31.020 --> 00:27:31.880
Oh, my goodness.

00:27:31.880 --> 00:27:35.480
Onboarding is such a challenge there.

00:27:35.480 --> 00:27:36.460
Yeah.

00:27:37.580 --> 00:27:40.600
You want to be on board developers, like, with confidence.

00:27:40.600 --> 00:27:43.820
And they can have the confidence to know that they can make mistakes.

00:27:43.820 --> 00:27:45.780
And they can burn things to the ground.

00:27:45.780 --> 00:27:52.300
And they can try stuff knowing that it's not going to affect, like, the production machine or even the sandbox machine.

00:27:52.300 --> 00:27:56.100
Like, they can experiment with, you know, a little bit of reckless abandon.

00:27:56.100 --> 00:27:56.860
Yeah.

00:27:56.860 --> 00:27:57.580
Because that's how you learn.

00:27:57.580 --> 00:27:58.660
Like, you break things.

00:27:58.660 --> 00:28:00.400
In my mind, you break things to learn.

00:28:00.400 --> 00:28:02.720
Like, there's a lot of learning that happens when you get to break things.

00:28:02.720 --> 00:28:05.820
And if you can break things confidently knowing that no big deal.

00:28:05.980 --> 00:28:10.020
I can just, you know, get pull or, you know, put a branch and delete that branch and start over.

00:28:10.020 --> 00:28:11.120
100%.

00:28:11.120 --> 00:28:16.200
And there's different layers at which people should embrace that to the maximum.

00:28:16.200 --> 00:28:21.200
They should embrace that in refactoring and reorganizing, right?

00:28:21.200 --> 00:28:26.660
So, if I have Git and I have frequent check-ins, I should be able to go crazy.

00:28:26.660 --> 00:28:27.940
You should be like, oh, don't mess with that.

00:28:27.940 --> 00:28:31.540
You should be able to go crazy on your code and go, oh, my gosh, it's better.

00:28:31.540 --> 00:28:32.700
Or that was a horrible idea.

00:28:32.700 --> 00:28:33.480
Revert.

00:28:33.480 --> 00:28:34.480
Exactly.

00:28:34.480 --> 00:28:35.460
Get rid of that.

00:28:35.460 --> 00:28:38.620
And it should not be terror.

00:28:38.620 --> 00:28:40.520
It should be like, oh, let's give that a try.

00:28:40.520 --> 00:28:41.440
I bet that would be awesome.

00:28:41.440 --> 00:28:42.840
And if it's not, we're going to get out.

00:28:42.840 --> 00:28:49.740
Also, though, on the containers give you that for your infrastructure locally and in the cloud.

00:28:49.740 --> 00:28:52.540
What if we ran on the newest version of Postgres?

00:28:52.540 --> 00:28:52.940
Yep.

00:28:52.940 --> 00:28:53.500
Let's try it.

00:28:53.500 --> 00:28:54.940
Is that amazing or is it a horrible idea?

00:28:54.940 --> 00:28:55.540
Let's try it.

00:28:55.540 --> 00:29:04.740
Well, if you've got the one server that everyone's using, you're definitely, or even a QA server, you're like, we're not going to break everyone because there's 10 people who are going to lose their productivity if we screw this up.

00:29:04.740 --> 00:29:07.200
But I can change a number in a Docker file.

00:29:07.200 --> 00:29:07.880
Oh.

00:29:07.880 --> 00:29:10.560
And I've seen this in action.

00:29:10.820 --> 00:29:21.240
In production, in action, with our own customer stuff where a junior admin, sysadmin was doing some standard maintenance activity.

00:29:21.240 --> 00:29:23.340
Maybe they accidentally dropped the database.

00:29:23.980 --> 00:29:31.800
But if you have all the things lined up and all the infrastructure set up in this kind of optimal way, it's no big deal.

00:29:31.800 --> 00:29:33.620
It's like no problem.

00:29:33.620 --> 00:29:36.760
Like you go run the command that like restores the DB.

00:29:36.760 --> 00:29:39.980
Like, for example, one of our opinions in here is CloudNativePG.

00:29:39.980 --> 00:29:41.180
So you have options.

00:29:41.180 --> 00:29:43.060
Like we can use CloudNativePG in the cluster.

00:29:43.060 --> 00:29:46.640
And that does things like point in time restores, recovery.

00:29:46.640 --> 00:29:48.320
You can be using RDS.

00:29:48.320 --> 00:29:51.100
Those opinions can happen afterwards.

00:29:51.100 --> 00:30:01.820
But given that the whole thing can be blown away and redeployed in a moment, in literally a moment's notice, gives you a lot of confidence in being able to bring something back from a destructive action.

00:30:01.820 --> 00:30:03.060
Yeah, absolutely.

00:30:03.060 --> 00:30:04.860
I think we're both so excited about this.

00:30:04.860 --> 00:30:06.460
We keep getting on tangents.

00:30:06.460 --> 00:30:09.420
I originally wanted to ask you kind of, how do I get started with this?

00:30:09.420 --> 00:30:10.680
Like, talk us through.

00:30:10.680 --> 00:30:11.980
Talk us through.

00:30:11.980 --> 00:30:12.720
Like, I'm a...

00:30:12.720 --> 00:30:14.540
Oh, you'd like to try it?

00:30:14.540 --> 00:30:20.800
Yeah, give people a sense of like, if they don't, obviously most people don't have this already.

00:30:20.800 --> 00:30:21.920
Like, what are they...

00:30:21.920 --> 00:30:22.720
They want a new project.

00:30:22.720 --> 00:30:26.800
They want it to have this more forward-looking...

00:30:26.800 --> 00:30:27.580
Yep.

00:30:27.580 --> 00:30:28.800
So on that...

00:30:28.800 --> 00:30:29.380
...structure.

00:30:29.380 --> 00:30:30.060
How do I have to go?

00:30:30.060 --> 00:30:32.040
Yeah, on that GitHub page, there's a one-liner.

00:30:32.040 --> 00:30:34.760
You can just copy-paste into your terminal.

00:30:34.760 --> 00:30:36.240
I think it's toward the...

00:30:36.240 --> 00:30:36.860
There it is, right there.

00:30:36.860 --> 00:30:38.060
Yeah, there's a little...

00:30:38.060 --> 00:30:40.600
I applaud you for not having the dollar at the beginning.

00:30:40.600 --> 00:30:41.080
Thank you.

00:30:41.080 --> 00:30:43.800
I'm pragmatic.

00:30:43.800 --> 00:30:45.200
I'm pragmatic about this.

00:30:45.200 --> 00:30:45.400
Yeah.

00:30:45.400 --> 00:30:45.880
Yeah.

00:30:45.880 --> 00:30:46.740
So...

00:30:46.740 --> 00:30:49.900
And that one-liner will install a lot of the opinions.

00:30:49.900 --> 00:30:53.400
I've mentioned this before to some people that...

00:30:53.400 --> 00:31:02.500
Scaf gives you all those kind of cool opinions, cool tools, like neat techniques that as a developer,

00:31:02.500 --> 00:31:07.360
like it takes like decades to refine and hone and kind of gain into your toolbox.

00:31:07.600 --> 00:31:09.840
Scaf tries to give those to you like right away.

00:31:09.840 --> 00:31:10.620
Like so it's...

00:31:10.620 --> 00:31:17.000
For example, it's going to install kubectl and kind and tilt and a couple other tools if they're not found on your system.

00:31:17.000 --> 00:31:18.560
And it'll use...

00:31:18.560 --> 00:31:22.220
If you've got homebrew installed, it'll just use homebrew out of the box to do that.

00:31:22.220 --> 00:31:24.580
And it puts it into your home directory.

00:31:24.580 --> 00:31:25.180
It doesn't...

00:31:25.180 --> 00:31:26.760
Shouldn't require...

00:31:26.760 --> 00:31:30.760
You know, one of my goals is not to require a sudo anywhere in this process.

00:31:30.760 --> 00:31:35.000
You know, there's no sudo needed here for that curl command to run.

00:31:35.280 --> 00:31:41.940
And so it should be less impactful on your system than a lot of other tools.

00:31:41.940 --> 00:31:44.320
But it gives you a lot of power for what you are installing.

00:31:44.320 --> 00:31:45.280
So you run that one-liner.

00:31:45.280 --> 00:31:53.300
It will now give you in like your .local bin directory a Scaf CLI command that you'll be able to run.

00:31:53.300 --> 00:31:56.580
And you can just run Scaf and then the name of the project you want to build.

00:31:56.580 --> 00:31:58.000
And it'll ask you some questions.

00:31:58.000 --> 00:32:00.300
So this is the kind of cookie cutter part at that point.

00:32:00.300 --> 00:32:05.660
It's going to ask you, hey, do you want to build a Django app with a Next.js frontend?

00:32:05.660 --> 00:32:07.180
And do you want to use Sentry?

00:32:07.180 --> 00:32:08.120
Do you want to have Celery?

00:32:08.120 --> 00:32:10.240
You know, just some standard questions.

00:32:10.240 --> 00:32:12.000
What mail provider are you going to use?

00:32:12.000 --> 00:32:17.060
So it gives you then on your file system a new, in this case, a Django project.

00:32:17.520 --> 00:32:20.860
I'll talk about some of the future vision pieces of that.

00:32:20.860 --> 00:32:21.860
But that's what it gives you today.

00:32:21.860 --> 00:32:29.300
It also gives you, in addition to a standard Django project, because you can get a Django project just by running the Django start project.

00:32:29.300 --> 00:32:31.360
You know, a Django admin start project command.

00:32:31.360 --> 00:32:35.200
It would blow out a very simple version of a Django project.

00:32:35.200 --> 00:32:36.300
But this has more to it.

00:32:36.380 --> 00:32:40.180
There's some opinions about, like, users and sites and some other things.

00:32:40.180 --> 00:32:43.900
But not only that, there's going to be all the Kubernetes manifests for running locally.

00:32:43.900 --> 00:32:48.920
There's going to be Terraform in there for deploying into a sandbox cloud, like on Amazon, for example.

00:32:48.920 --> 00:32:56.820
So if you chose Amazon as your target cloud, there's going to be all these kind of other opinions in here.

00:32:56.820 --> 00:32:58.500
What database we're using?

00:32:58.500 --> 00:33:00.880
What if we're using Celery?

00:33:00.880 --> 00:33:02.060
We're going to use Redis.

00:33:02.060 --> 00:33:03.180
Actually, we should change that.

00:33:03.280 --> 00:33:08.000
We're changing from Redis over to Valkey at the moment as well.

00:33:08.000 --> 00:33:09.100
Valkey?

00:33:09.100 --> 00:33:10.160
What is this?

00:33:10.160 --> 00:33:11.780
So Valkey.

00:33:11.780 --> 00:33:13.480
V-A-L-K-E-Y.

00:33:13.480 --> 00:33:15.360
Close.

00:33:15.360 --> 00:33:16.980
Valkey.

00:33:16.980 --> 00:33:18.500
Valkey.

00:33:18.500 --> 00:33:19.180
Valkey.

00:33:19.180 --> 00:33:19.540
Okay.

00:33:19.540 --> 00:33:20.120
Okay.

00:33:20.120 --> 00:33:21.200
The Redis replacement.

00:33:21.200 --> 00:33:21.740
Valkey.io.

00:33:21.740 --> 00:33:22.580
Yeah.

00:33:22.580 --> 00:33:23.140
Okay.

00:33:23.140 --> 00:33:24.420
Why this?

00:33:24.420 --> 00:33:28.000
Just because of licensing changes on the Redis side of things.

00:33:28.000 --> 00:33:30.520
I think that's another whole...

00:33:30.520 --> 00:33:34.780
We could do a whole other podcast on just open source licensing and interesting history.

00:33:34.780 --> 00:33:37.500
You know, the Elastic folks did this with Elastic Cache.

00:33:37.500 --> 00:33:40.940
I think the Redis folks kind of were following suit.

00:33:40.940 --> 00:33:42.000
But then you now you see...

00:33:42.000 --> 00:33:43.680
I think Mongo did maybe a little bit as well.

00:33:43.680 --> 00:33:46.740
Well, now you've seen the Elastic folks kind of go back on that.

00:33:46.740 --> 00:33:50.180
They're heading back toward the more open source licensing.

00:33:50.180 --> 00:33:51.580
We'll see.

00:33:51.820 --> 00:33:53.460
I'm sympathetic to...

00:33:53.460 --> 00:33:53.980
Oh, totally.

00:33:53.980 --> 00:33:57.360
At least some of these because they built these businesses and then the cloud folks are just

00:33:57.360 --> 00:33:58.160
like, awesome.

00:33:58.160 --> 00:33:58.860
We'll host that for you.

00:33:58.860 --> 00:33:59.060
Thanks.

00:33:59.060 --> 00:34:00.120
You know, like, wait a minute.

00:34:00.120 --> 00:34:02.140
We were hoping to kind of...

00:34:02.140 --> 00:34:02.280
Yeah.

00:34:02.280 --> 00:34:02.800
Some kind of...

00:34:02.800 --> 00:34:03.440
Be that.

00:34:03.440 --> 00:34:04.220
Yeah.

00:34:04.220 --> 00:34:04.340
Yeah.

00:34:04.340 --> 00:34:04.600
Yeah.

00:34:04.600 --> 00:34:04.820
Yeah.

00:34:04.820 --> 00:34:10.160
I can also totally understand like, no, we just want this stuff unencumbered.

00:34:10.160 --> 00:34:10.400
Yeah.

00:34:10.400 --> 00:34:11.920
It's not that complicated.

00:34:11.920 --> 00:34:12.340
Probably.

00:34:12.340 --> 00:34:13.520
We could probably make this work.

00:34:13.520 --> 00:34:15.320
And we got together and teamed up and okay.

00:34:15.320 --> 00:34:16.320
This is news to me.

00:34:16.320 --> 00:34:16.780
This is awesome.

00:34:17.320 --> 00:34:17.520
Yeah.

00:34:17.520 --> 00:34:18.880
No, it's...

00:34:18.880 --> 00:34:23.600
Again, it's drop-in replacement for the most current version of Redis.

00:34:23.600 --> 00:34:27.600
I was actually just thinking about doing something with Redis, but I think I might just do a

00:34:27.600 --> 00:34:30.820
little Norse legend type of stuff.

00:34:30.820 --> 00:34:32.660
Try that out.

00:34:32.660 --> 00:34:37.280
Russ out there asks, Wagtail?

00:34:37.280 --> 00:34:38.480
Not yet.

00:34:38.480 --> 00:34:42.900
I don't believe we have a Wagtail template, but I'll talk about that in the roadmap.

00:34:42.900 --> 00:34:43.880
Yeah.

00:34:43.880 --> 00:34:44.440
Okay.

00:34:44.440 --> 00:34:45.260
That's coming.

00:34:45.900 --> 00:34:53.020
I guess it's worth pointing out to people that this is sort of at its core Django philosophy,

00:34:53.020 --> 00:34:53.340
right?

00:34:53.340 --> 00:34:53.780
Currently.

00:34:53.780 --> 00:34:54.240
Okay.

00:34:54.240 --> 00:34:54.780
Okay.

00:34:54.780 --> 00:34:55.280
Currently.

00:34:55.280 --> 00:35:00.720
We have some other use cases that we want to be able to satisfy with SCAF as well.

00:35:00.720 --> 00:35:06.840
For example, instead of deploying into a cloud and like you've got Argo CD watching for continuous

00:35:06.840 --> 00:35:07.700
deployment type stuff.

00:35:07.700 --> 00:35:12.680
What if you were deploying an appliance like into someone's data center and there were different

00:35:12.680 --> 00:35:16.720
concerns around security and updates and adopting updates and how it got updated.

00:35:16.720 --> 00:35:18.780
We want to be able to support that use case.

00:35:18.780 --> 00:35:23.480
We want to be able to, I would love to be able to support a fully serverless, you know,

00:35:23.480 --> 00:35:30.800
SCAF light type environment where maybe we're using Lambdas and DynamoDB and API gateway to

00:35:30.800 --> 00:35:33.220
deploy the backend in a totally serverless manner.

00:35:33.220 --> 00:35:35.080
SCAF should be able to support that too.

00:35:35.320 --> 00:35:36.220
It's not there yet.

00:35:36.220 --> 00:35:38.420
That's definitely, that's the roadmap piece for sure.

00:35:38.420 --> 00:35:43.640
There probably is some, I'm not totally up on it, but it's probably some open source

00:35:43.640 --> 00:35:51.160
Val key equivalent Docker based Lambda type stuff as well that you might be able to say,

00:35:51.160 --> 00:35:54.360
we want to have a self-contained serverless as part of this.

00:35:54.860 --> 00:35:55.020
Yeah.

00:35:55.020 --> 00:35:59.700
For, for example, the, the SCAF challenge.

00:35:59.700 --> 00:36:05.260
So if you went to DjangoCon last year, 6pm ran a SCAF challenge where to see how fast you

00:36:05.260 --> 00:36:10.200
could basically run and get a running Django project on your machine in Kubernetes running

00:36:10.200 --> 00:36:11.320
locally, ready to develop.

00:36:11.320 --> 00:36:18.680
Uh, the winner did it in 26 seconds from running SCAF to Django actually ready to respond to,

00:36:18.680 --> 00:36:20.360
uh, HTTP requests.

00:36:20.360 --> 00:36:21.200
Wow.

00:36:21.200 --> 00:36:29.080
That, backend that tracked it was all done in Dynamo, Lambda and API gateway using the

00:36:29.080 --> 00:36:29.700
SAM framework.

00:36:29.700 --> 00:36:36.300
And so on Amazon, there's the serverless application framework that they've got called SAM, which

00:36:36.300 --> 00:36:37.800
is really nice because you can run it all locally.

00:36:37.800 --> 00:36:44.640
Uh, you just, you know, do SAM, SAM serve or whatever, SAM start, and it spins up containers

00:36:44.640 --> 00:36:45.060
locally.

00:36:45.060 --> 00:36:47.220
You spin up your Dynamo container locally.

00:36:47.220 --> 00:36:51.580
So I had the whole thing running on my own machine much in the way that's why I like about

00:36:51.580 --> 00:36:53.020
SCAF is it all runs locally.

00:36:53.020 --> 00:36:56.380
It all is contained and I can, you know, play with it.

00:36:56.380 --> 00:36:57.160
I can destroy it.

00:36:57.160 --> 00:36:58.980
I can, you know, make mistakes.

00:36:58.980 --> 00:37:00.840
And then when I'm ready, I make a pull request.

00:37:00.840 --> 00:37:01.500
Yeah.

00:37:01.500 --> 00:37:07.780
One of the things that I'm always apprehensive about is building apps that have to have

00:37:07.780 --> 00:37:11.120
lots of cloud services constantly active.

00:37:11.120 --> 00:37:11.120
Yeah.

00:37:11.120 --> 00:37:11.880
Right.

00:37:11.880 --> 00:37:18.180
And not just because I want to be able to say work in a coffee shop with poor internet

00:37:18.180 --> 00:37:21.480
connectivity or on an airplane or something like that.

00:37:21.480 --> 00:37:24.940
But also I feel like there's probably some leakage.

00:37:24.940 --> 00:37:29.140
I mean, I just heard an ad on some podcast about it for a company that whose job is to

00:37:29.140 --> 00:37:33.420
go and look at all the AWS or Azure stuff you're doing that you might've left running and it's

00:37:33.420 --> 00:37:36.600
costing you $10,000 a month because people just forgot about, you know, they'd be like,

00:37:36.600 --> 00:37:37.200
Oh, let's try this.

00:37:37.200 --> 00:37:38.180
I think you should say that.

00:37:38.180 --> 00:37:39.260
We've had that.

00:37:39.260 --> 00:37:40.360
Oh, really?

00:37:40.360 --> 00:37:41.460
Tell us a story.

00:37:41.460 --> 00:37:42.080
Yeah.

00:37:42.080 --> 00:37:43.340
I mean, that's another thing.

00:37:43.340 --> 00:37:47.500
That's another reason again, for parts we're adding into SCAF around like compliance and

00:37:47.500 --> 00:37:48.140
cost controls.

00:37:48.140 --> 00:37:54.880
I'm a big fan of an open source tool called Cloud Custodian, which is a event driven cloud

00:37:54.880 --> 00:37:56.600
compliance tool.

00:37:56.820 --> 00:38:02.780
So if you haven't checked it out, Cloud Custodian is a really cool, great tool for compliance,

00:38:02.780 --> 00:38:07.380
but also FinOps, like, you know, making sure your dev instances aren't running 24 seven when

00:38:07.380 --> 00:38:09.180
they really only need to run probably eight hours a day.

00:38:09.180 --> 00:38:10.420
They don't need to run on weekends.

00:38:10.420 --> 00:38:12.160
Like Cloud Custodian can shut those things down.

00:38:12.160 --> 00:38:17.880
So that's something we were adding into SCAF right now is some minimum set of things like

00:38:17.880 --> 00:38:21.480
make sure any cloud resources to get deployed are properly tagged.

00:38:21.480 --> 00:38:24.220
You know, are they tagged with an environment like production or development?

00:38:24.460 --> 00:38:28.760
Are they tagged with a cost center or whatever your policies may be?

00:38:28.760 --> 00:38:32.900
But that will help you avoid those kind of instances where we had, for example, someone

00:38:32.900 --> 00:38:34.900
spun up a spot instance.

00:38:34.900 --> 00:38:40.040
Well, if you're not familiar with Amazon, you can request spot instances, which are kind

00:38:40.040 --> 00:38:43.620
of excess EC2 VMs that are hanging out.

00:38:43.620 --> 00:38:46.080
And if someone releases one, you can pick it up and use it cheaper.

00:38:46.080 --> 00:38:51.220
And they're typically meant to be used temporarily, but you request them and they come asynchronously

00:38:51.220 --> 00:38:51.740
to you.

00:38:51.740 --> 00:38:54.140
So you could go into your console and request one.

00:38:54.240 --> 00:38:56.380
If it doesn't come right away, you'd be like, shoot, that didn't work.

00:38:56.380 --> 00:38:58.780
And you could take off, you know, go get a coffee and get lunch.

00:38:58.780 --> 00:39:02.640
And then totally forget you requested the spot instance for a giant GPU, whatever.

00:39:02.640 --> 00:39:03.740
That is ready.

00:39:03.740 --> 00:39:06.240
And then it'll show up later in the day.

00:39:06.240 --> 00:39:11.380
And if you don't go and turn it off, you'll pay for it for the month, which was $10,000

00:39:11.380 --> 00:39:13.940
for one of them once that happened to us.

00:39:13.940 --> 00:39:19.220
So putting in place the fact that if someone did spin up an instance like that, Cloud Custodian

00:39:19.220 --> 00:39:22.780
would be watching for it and would shut it down within a day if it didn't follow, you know,

00:39:22.780 --> 00:39:25.080
whatever your policy is for starting up new kinds of instances.

00:39:26.920 --> 00:39:27.940
That's really cool.

00:39:27.940 --> 00:39:30.560
We're learning about a lot of cool open source tools here.

00:39:30.560 --> 00:39:31.040
This is great.

00:39:31.040 --> 00:39:34.520
And that's why they're all packaged into SCAF because not everyone knows about all these

00:39:34.520 --> 00:39:34.860
things.

00:39:34.860 --> 00:39:39.900
So we're trying to take like our kind of cumulative six feet up journey of 25 years of being on

00:39:39.900 --> 00:39:43.780
the internet and deploying software and developing software and packaging those opinions into

00:39:43.780 --> 00:39:47.560
like one spot where it's kind of like someone took our brains, collective brains, and put

00:39:47.560 --> 00:39:48.560
them into a code repository.

00:39:48.880 --> 00:39:52.940
And now we can deploy and develop like we've been doing it for 25 years.

00:39:52.940 --> 00:39:54.620
Yeah.

00:39:54.620 --> 00:39:56.000
It's like, well, that was a really sharp edge.

00:39:56.000 --> 00:39:56.880
Let's see if we can.

00:39:56.880 --> 00:39:57.420
Oh my gosh.

00:39:57.420 --> 00:40:05.760
Somebody's like, guys, I'm sorry, but there's a big bill.

00:40:05.760 --> 00:40:07.020
There was a big bill.

00:40:07.020 --> 00:40:09.160
Look, I'll give a shout out to Amazon.

00:40:09.160 --> 00:40:13.880
I contacted them and they did refund us for that accidental bill.

00:40:13.880 --> 00:40:17.040
They're generally pretty good about it if you make that mistake once.

00:40:17.680 --> 00:40:20.820
Now you gotta make sure you show them, you can demonstrate to them you've put in place

00:40:20.820 --> 00:40:22.020
things to not have it happen again.

00:40:22.020 --> 00:40:23.100
Okay.

00:40:23.100 --> 00:40:26.200
Because you might, you might pay for it again.

00:40:26.200 --> 00:40:26.420
Yeah.

00:40:26.420 --> 00:40:29.140
I honestly work in the cloud is super scary in that regard.

00:40:29.140 --> 00:40:32.960
You know, when it's overly automated.

00:40:32.960 --> 00:40:38.480
So one of the things, speaking of deployments and all this that I do when I'm working on my

00:40:38.480 --> 00:40:41.060
Docker stuff is I'll set up a Docker compose file.

00:40:41.060 --> 00:40:42.500
That's kind of my Zen right now.

00:40:42.500 --> 00:40:42.920
Yeah.

00:40:42.920 --> 00:40:46.140
And in there you can set deployment limits.

00:40:46.140 --> 00:40:49.680
It's like this container can only use so much CPU more significantly.

00:40:49.680 --> 00:40:54.160
For me, usually it's like this container can only use one gig of Ram, even though the

00:40:54.160 --> 00:40:54.980
server's got 16.

00:40:54.980 --> 00:40:56.760
Tell it it has one.

00:40:56.760 --> 00:41:01.460
And the reason that I think that's super useful is, you know, something goes crazy or starts

00:41:01.460 --> 00:41:03.040
using too much memory or something like that.

00:41:03.040 --> 00:41:06.840
You could say, oh, there's something going on here without it taking down everything else.

00:41:07.420 --> 00:41:09.400
And there's other things, especially databases.

00:41:09.400 --> 00:41:10.280
Yep.

00:41:10.280 --> 00:41:12.640
They're like, oh, I've got 16 gigs.

00:41:12.640 --> 00:41:16.160
I was just going to load everything into memory because that'll be more efficient.

00:41:16.160 --> 00:41:16.780
Like, no, no, no.

00:41:16.780 --> 00:41:18.360
You're sharing this with everyone.

00:41:18.360 --> 00:41:20.880
Could you just load the indexes into your two gigs?

00:41:20.880 --> 00:41:21.820
It's going to be good, right?

00:41:21.820 --> 00:41:23.480
Is there stuff like that here?

00:41:23.480 --> 00:41:24.480
Yeah, exactly.

00:41:24.480 --> 00:41:27.560
And our opinions on that are in the Kubernetes world.

00:41:27.560 --> 00:41:30.340
You can be able to put in resource limits and priorities.

00:41:30.660 --> 00:41:32.800
This actually also literally happened to us.

00:41:32.800 --> 00:41:35.740
Again, all of our experience, you get to benefit from.

00:41:35.740 --> 00:41:38.200
If you aren't careful with Kubernetes.

00:41:38.200 --> 00:41:42.400
I think every one of these would have a little, like a little double dagger thing.

00:41:42.400 --> 00:41:43.020
You click on it.

00:41:43.020 --> 00:41:44.980
Here's the horror story why this is here.

00:41:44.980 --> 00:41:45.900
Here's the story why this is here.

00:41:45.900 --> 00:41:47.000
Here's the story why this is here.

00:41:47.000 --> 00:41:48.480
Because that's the truth.

00:41:48.480 --> 00:41:49.320
Okay.

00:41:49.320 --> 00:41:49.600
Yeah.

00:41:49.600 --> 00:41:54.620
If you don't use resource limits on Kubernetes, they will absolutely stomp on each other.

00:41:54.620 --> 00:41:58.000
Kubernetes is an amazing orchestrator and it will do exactly what it's told.

00:41:58.000 --> 00:42:02.580
And if you've told it that this doesn't have limits, it will give it all the things all

00:42:02.580 --> 00:42:03.120
the time.

00:42:03.120 --> 00:42:08.060
And you can run into a situation, for example, if you're using cloud native PG, your database

00:42:08.060 --> 00:42:11.020
is in the cluster, which means it's orchestrated by the cluster.

00:42:11.020 --> 00:42:16.960
If you don't give it any limits and you were running multiples and you do a backup, the resources

00:42:16.960 --> 00:42:18.560
when you do a backup go up.

00:42:18.560 --> 00:42:20.500
Yes, 100%.

00:42:20.500 --> 00:42:20.700
Yeah.

00:42:20.700 --> 00:42:24.640
If you do, it basically like scans through all of the data.

00:42:24.640 --> 00:42:25.480
All the things.

00:42:25.480 --> 00:42:26.760
Why is it using three gigs?

00:42:26.760 --> 00:42:27.780
It was using just one.

00:42:27.780 --> 00:42:29.740
Oh, because I asked for a full backup.

00:42:29.740 --> 00:42:35.020
Well, and they tell you what it'll do is it'll consume all the resources on one node and then

00:42:35.020 --> 00:42:37.040
it'll fail over orchestrated.

00:42:37.040 --> 00:42:40.260
It'll fail over to the second node and then use all the resources on the second node and

00:42:40.260 --> 00:42:41.960
then it'll corrupt your database and crash the whole thing.

00:42:41.960 --> 00:42:47.100
Now, if you put in the resource limits and the priorities, because what it should do is it

00:42:47.100 --> 00:42:49.960
should go off and be like, hmm, there's a lot of Django instances running that probably

00:42:49.960 --> 00:42:50.460
don't need to be.

00:42:50.460 --> 00:42:51.560
I can kill those first.

00:42:52.040 --> 00:42:52.960
I can save resources.

00:42:52.960 --> 00:42:56.800
I can orchestrate smartly for you only if you smartly configure it.

00:42:56.800 --> 00:42:58.000
Right.

00:42:58.000 --> 00:42:58.420
All right.

00:42:58.420 --> 00:43:00.760
Here's my goal is to not let this get out of control.

00:43:00.760 --> 00:43:02.340
Help me with that.

00:43:02.340 --> 00:43:03.840
Don't just feed it everything.

00:43:03.840 --> 00:43:04.740
Yeah.

00:43:04.740 --> 00:43:05.040
Yeah.

00:43:05.040 --> 00:43:05.580
It's interesting.

00:43:05.580 --> 00:43:08.360
A lot of these servers are like, we could do better if we could just take it.

00:43:08.360 --> 00:43:12.340
We could load up more and pre-cache more, but they don't work well together like that.

00:43:12.340 --> 00:43:13.260
Right.

00:43:13.260 --> 00:43:13.760
Yeah.

00:43:13.860 --> 00:43:16.280
I mean, they're greedy.

00:43:16.280 --> 00:43:20.020
They're going to try and take it at the resources they need to do the job they need to do,

00:43:20.020 --> 00:43:21.620
but they can be told to be less greedy.

00:43:21.620 --> 00:43:24.440
And Kubernetes is how we do that.

00:43:24.440 --> 00:43:25.060
Yeah.

00:43:25.060 --> 00:43:26.800
More importantly, they can be forced to be less greedy.

00:43:26.800 --> 00:43:28.360
You need to stay in line.

00:43:28.360 --> 00:43:30.660
That's what you got.

00:43:30.660 --> 00:43:31.620
You're not getting any more.

00:43:31.620 --> 00:43:31.820
All right.

00:43:31.820 --> 00:43:33.820
Let's talk through the building blocks here.

00:43:33.820 --> 00:43:39.360
You mentioned a couple of them, but there's a big long list of things that I think is going

00:43:39.360 --> 00:43:40.820
to be pretty interesting to people.

00:43:41.040 --> 00:43:43.960
Start with Django and then let's go down the building block.

00:43:43.960 --> 00:43:46.260
When I make an app like this, it has an opinion.

00:43:46.260 --> 00:43:47.700
It looks like as well.

00:43:47.700 --> 00:43:50.020
It's not just a vanilla Django app.

00:43:50.020 --> 00:43:50.700
Correct.

00:43:50.700 --> 00:43:51.280
Yeah.

00:43:51.280 --> 00:43:52.920
You could be doing asynchronous tasks.

00:43:52.920 --> 00:43:54.880
So that's why there's a Celery opinion in there.

00:43:54.880 --> 00:43:58.600
If you've got a project, you know you're going to have jobs in the background.

00:43:58.600 --> 00:43:59.480
Sure.

00:43:59.480 --> 00:44:01.340
Let's get Celery installed.

00:44:01.340 --> 00:44:06.080
If you're doing something with a fancy front end and you like React, our opinion is really

00:44:06.080 --> 00:44:06.780
to use Next.js.

00:44:07.440 --> 00:44:12.660
And if you install Next.js, you'll get like the strawberry GraphQL stuff out of the box,

00:44:12.660 --> 00:44:13.720
which is kind of nice.

00:44:13.720 --> 00:44:17.180
And Apollo on the front end, if the Next.js is also chosen.

00:44:17.180 --> 00:44:24.460
So some GraphQL opinions have been made and the plumbing laid to make it just work, which

00:44:24.460 --> 00:44:25.400
is kind of hard sometimes.

00:44:25.400 --> 00:44:32.420
If you're diving into a new technology like React and GraphQL, it's nice to have some opinions

00:44:32.420 --> 00:44:36.560
and to have them pre-wired up for you so you can just kind of follow the pattern that's

00:44:36.560 --> 00:44:38.360
already been laid for you.

00:44:38.360 --> 00:44:40.000
Okay.

00:44:40.000 --> 00:44:42.420
I'm told that Next.js is really, really popular.

00:44:42.420 --> 00:44:43.160
Yeah.

00:44:43.160 --> 00:44:45.320
Tell us what is Next.js.

00:44:45.320 --> 00:44:45.680
Yeah.

00:44:45.680 --> 00:44:49.940
I mean, Next.js is a set of opinions around React.

00:44:50.580 --> 00:44:56.860
Much in the way that, for example, like Zope and Plone were opinions around how to do a

00:44:56.860 --> 00:44:57.640
Python web framework.

00:44:57.640 --> 00:45:05.240
Next.js is kind of a packaging of some opinions about how I would deploy and write React applications

00:45:05.240 --> 00:45:06.140
and keep them up to date.

00:45:06.140 --> 00:45:13.140
For anyone who's done a React application, you can start with the standard React demo application.

00:45:13.800 --> 00:45:15.180
But from there, you start adding on it.

00:45:15.180 --> 00:45:22.740
Again, I'm definitely not the Node TypeScript, JavaScript, front-end person.

00:45:22.740 --> 00:45:31.280
But dependency spaghetti mess will happen very quickly in this world or can happen very quickly in this world,

00:45:31.280 --> 00:45:36.600
which will lead you into a spot where it's really difficult to upgrade your React application

00:45:36.600 --> 00:45:38.120
to get all the dependencies upgraded.

00:45:38.120 --> 00:45:41.840
And there's security vulnerabilities and issues you need to be aware of and performance things.

00:45:41.840 --> 00:45:44.640
So you want to make sure you can stay on top of those versions.

00:45:44.640 --> 00:45:50.940
And Next.js is basically a set of guidelines and opinions that should help guide you down a more happy path.

00:45:50.940 --> 00:45:52.700
And that's why we chose it.

00:45:52.700 --> 00:45:59.180
I think even the React folks tend to suggest using Next instead of just React on its own

00:45:59.180 --> 00:46:02.820
because you get those opinions and should have an easier time keeping things up to date.

00:46:02.820 --> 00:46:03.800
Yeah.

00:46:03.800 --> 00:46:10.420
I know the JS stuff feels like it's so complicated, but it's, again, because we're asking more and more.

00:46:10.420 --> 00:46:16.860
People have high expectations of the web applications that they interact with on a daily basis.

00:46:16.860 --> 00:46:19.940
It's just a fact of life.

00:46:19.940 --> 00:46:24.300
People have expectations about how things are going to behave and the experience they're going to get.

00:46:24.300 --> 00:46:26.700
They're like, Gmail's cool.

00:46:26.700 --> 00:46:27.860
Google Maps is cool.

00:46:27.860 --> 00:46:28.800
Can ours do that?

00:46:28.800 --> 00:46:30.400
Hold on.

00:46:30.400 --> 00:46:34.580
You realize this is a static website.

00:46:34.580 --> 00:46:36.380
You have any developers who run that?

00:46:36.380 --> 00:46:37.280
Yeah.

00:46:38.280 --> 00:46:42.120
And then if we keep kind of going down this list, I mean, we've standardized on Postgres.

00:46:42.120 --> 00:46:44.800
And that's historic.

00:46:44.800 --> 00:46:49.580
We probably 15 years ago used MySQL.

00:46:49.580 --> 00:46:50.480
Yeah.

00:46:50.480 --> 00:46:51.380
Yeah.

00:46:51.380 --> 00:46:55.800
That was back in the days of MySQL silently dropping data on you.

00:46:55.800 --> 00:46:58.220
But I don't think...

00:46:58.220 --> 00:46:58.720
You got enough?

00:46:58.720 --> 00:46:59.980
I mean, you got enough of your data cap?

00:46:59.980 --> 00:47:00.680
It's like there's a lot.

00:47:00.900 --> 00:47:01.980
It's exactly what it was.

00:47:01.980 --> 00:47:05.140
So we switched to Postgres and haven't looked back.

00:47:05.140 --> 00:47:08.020
And there's just a lot of exciting things happening there.

00:47:08.020 --> 00:47:10.220
So if you're not on Postgres, I highly recommend it.

00:47:10.220 --> 00:47:11.920
Good bet there.

00:47:12.000 --> 00:47:17.080
Because if you look at the surveys and stuff, the majority of people are doing that, especially

00:47:17.080 --> 00:47:18.400
if they're doing relational databases.

00:47:18.400 --> 00:47:20.020
It's Postgres.

00:47:20.020 --> 00:47:24.080
And then you better justify why you're not using Postgres these days.

00:47:24.080 --> 00:47:24.200
Yep.

00:47:24.200 --> 00:47:27.520
And then if you're going to run Postgres and you're running Kubernetes, you're going to want

00:47:27.520 --> 00:47:29.540
to have some kind of an operator to manage it for you.

00:47:29.540 --> 00:47:31.440
Because you want to have high availability.

00:47:31.440 --> 00:47:33.020
You want to have data backups.

00:47:33.020 --> 00:47:34.880
And that's what Cloud Native PG gives you.

00:47:35.460 --> 00:47:39.760
You can back up into S3 buckets or you can back up into, you know, you name it.

00:47:39.760 --> 00:47:41.680
There's multiple kinds of targets that are supported.

00:47:41.680 --> 00:47:44.340
But it manages all that hard complexity for you.

00:47:44.340 --> 00:47:50.100
If you've ever set up Postgres replication and high availability on your own and had to

00:47:50.100 --> 00:47:55.620
deal with all the wall files and moving them around and backing them up, it's a sophisticated

00:47:55.620 --> 00:47:58.780
beast, a complicated, sophisticated beast.

00:47:58.780 --> 00:48:00.420
And no one wants to deal with that.

00:48:00.420 --> 00:48:01.980
And that's what Cloud Native PG does for you.

00:48:01.980 --> 00:48:05.300
It gives you a UI and a way to configure it and away you go.

00:48:06.020 --> 00:48:07.440
And then after that, we have Valkey.

00:48:07.440 --> 00:48:08.460
Yeah, Valkey.

00:48:08.460 --> 00:48:11.640
Which is our Redis drop-in replacement.

00:48:11.640 --> 00:48:14.320
If you're not using Redis in your Django apps, you should be.

00:48:14.320 --> 00:48:19.040
Even if nothing more than just the Django template cache, I would turn that on.

00:48:19.040 --> 00:48:22.660
We've been using MailHog for our email locally.

00:48:22.660 --> 00:48:24.680
So this is a local developer tool.

00:48:24.680 --> 00:48:29.780
Allows you to simulate email being sent off of your development instance without actually

00:48:29.780 --> 00:48:30.740
sending email anywhere.

00:48:30.740 --> 00:48:33.100
It's a little bit like mocking email.

00:48:33.100 --> 00:48:33.620
Yeah.

00:48:33.620 --> 00:48:34.500
Yeah, it's super nice.

00:48:34.500 --> 00:48:35.660
It runs an SMTP server.

00:48:35.660 --> 00:48:36.660
It gives you a web UI.

00:48:36.660 --> 00:48:40.420
It looks like real email.

00:48:40.420 --> 00:48:41.480
It gives you an inbox.

00:48:41.480 --> 00:48:43.920
So you can basically see what your end users are going to see.

00:48:43.920 --> 00:48:46.440
Argo is the CICD product.

00:48:46.440 --> 00:48:48.980
So that's open source GitOps.

00:48:48.980 --> 00:48:53.380
So it watches your repositories, kind of tracks the status of the deployments.

00:48:54.060 --> 00:48:54.360
Okay.

00:48:54.360 --> 00:48:59.440
So you basically pick a prod branch or something like that and you push the prod, then magic

00:48:59.440 --> 00:48:59.820
happens.

00:48:59.820 --> 00:49:00.200
Yeah.

00:49:00.200 --> 00:49:01.820
Argo does the magic behind that.

00:49:01.820 --> 00:49:05.080
And you can see that it also gives you a bit of insights into your cluster.

00:49:05.080 --> 00:49:08.680
You know, what's running, what's being deployed, what state they're in.

00:49:09.220 --> 00:49:17.640
It handles all the blue green rollout of new pods and new containers into your clusters.

00:49:17.640 --> 00:49:18.860
Yeah.

00:49:18.860 --> 00:49:23.140
You probably can set up a QA cluster as well.

00:49:23.140 --> 00:49:23.740
Yep.

00:49:23.960 --> 00:49:24.160
Right.

00:49:24.160 --> 00:49:25.820
Just pick a different branch and have it watch that.

00:49:25.820 --> 00:49:26.040
Right.

00:49:26.040 --> 00:49:27.160
Well, that's what we do.

00:49:27.160 --> 00:49:34.360
So in inside the scaf built skeleton you get on your file system, you're going to have

00:49:34.360 --> 00:49:39.880
a Kubernetes manifest directory that has a base set of manifests, which are, this is what's

00:49:39.880 --> 00:49:44.280
needed to define the deployment and the services and all the bits.

00:49:44.280 --> 00:49:48.580
And then each environment, for example, like the sandbox environment has an Argo running

00:49:48.580 --> 00:49:51.500
that will be watching for sandbox changes and the production environment will be watching

00:49:51.500 --> 00:49:52.980
for production changes.

00:49:52.980 --> 00:49:58.320
Another thing we standardize on here that's not listed is things like sealed secrets.

00:49:58.320 --> 00:50:04.280
So you can check in your secrets to your Git repository for sandbox, for example.

00:50:04.800 --> 00:50:09.280
But the only machine on the planet that can decrypt them is the sandbox instance, because

00:50:09.280 --> 00:50:12.700
you actually use the sealed secrets operator to do the encryption.

00:50:12.700 --> 00:50:17.160
And the only way it can be decrypted is if those things are sitting in that cluster, in

00:50:17.160 --> 00:50:19.000
the sandbox cluster or in the production cluster.

00:50:19.000 --> 00:50:23.800
So what's nice is the sandbox cluster cannot decrypt the production secrets.

00:50:23.800 --> 00:50:27.760
So you can have, obviously you want to have different secrets for production than you do for sandbox.

00:50:27.760 --> 00:50:29.620
So you can have least privilege.

00:50:29.620 --> 00:50:34.180
Developers have access, maybe more unfettered access to sandbox, but they may have

00:50:34.180 --> 00:50:39.520
more limited access on production and tools like sealed secrets and customized and Kubernetes

00:50:39.520 --> 00:50:42.520
manifests and sealed secrets actually make all that work.

00:50:42.520 --> 00:50:44.000
Okay.

00:50:44.000 --> 00:50:45.000
Yeah.

00:50:45.000 --> 00:50:47.160
And that's, that's news to me as well.

00:50:47.160 --> 00:50:48.480
This one, I love it.

00:50:48.480 --> 00:50:51.820
I do something similar with my things as well.

00:50:51.820 --> 00:50:57.120
Like I know a lot of people have huge environment variable definitions of all their, I'm like,

00:50:57.220 --> 00:50:57.660
Yeah.

00:50:57.660 --> 00:51:04.100
You just, you just need one value that unlocks the other, you know, highly encrypted stuff.

00:51:04.100 --> 00:51:08.600
Now for, for someone actually asked a question I'm getting ready to answer, which is about

00:51:08.600 --> 00:51:10.920
external secrets and services for those things.

00:51:10.920 --> 00:51:12.400
Local development.

00:51:12.400 --> 00:51:13.560
We've have an opinion around.

00:51:13.560 --> 00:51:20.100
around using one password for all of our secrets management, whether it's like passwords for

00:51:20.100 --> 00:51:26.580
websites or API keys, or in this case, development environment, database passwords, development

00:51:26.580 --> 00:51:31.780
environment, you know, secrets like Django has a secret, Django secret in there, things like

00:51:31.780 --> 00:51:32.040
that.

00:51:32.040 --> 00:51:35.080
Those are actually in our case, environment variables.

00:51:35.080 --> 00:51:40.620
And we use the one password command line tool to only decrypt them ever in memory.

00:51:40.620 --> 00:51:48.980
So when you run like the Django start or like the, anytime you run the Kubernetes cluster locally

00:51:48.980 --> 00:51:56.660
in kind, it will feed those environment variables via the config map into your cluster so that it

00:51:56.660 --> 00:51:58.540
can access the database in the cluster locally.

00:51:58.540 --> 00:52:04.200
So even locally, you have a long random unknown password to you that is, but actually stored in

00:52:04.200 --> 00:52:04.640
one password.

00:52:04.640 --> 00:52:10.600
So if you want to go use your, you know, I use Postico as a GUI for accessing my local

00:52:10.600 --> 00:52:12.180
Postgres, I can use that.

00:52:12.180 --> 00:52:16.820
I can actually feed it the data from one password and actually access my services.

00:52:16.820 --> 00:52:20.360
So locally using one password and environment variables and config maps.

00:52:20.360 --> 00:52:25.520
But when I'm going to sandbox, we just use sealed secrets on sandbox and production for

00:52:25.520 --> 00:52:27.760
mostly cross-platform consistency.

00:52:28.180 --> 00:52:34.260
You could be using, you know, SSM parameter store on Amazon or secrets manager on Amazon,

00:52:34.260 --> 00:52:36.920
but then that won't work on Google or won't work on Azure.

00:52:36.920 --> 00:52:43.180
And so we just standardize around the sealed secrets for ease of deployment to any cluster

00:52:43.180 --> 00:52:44.840
in any platform anywhere.

00:52:46.840 --> 00:52:47.280
Yeah.

00:52:47.280 --> 00:52:47.320
Yeah.

00:52:47.320 --> 00:52:53.620
The one password, new CLI stuff and SSH secret provider, whatever you call that thing.

00:52:53.620 --> 00:52:54.620
Yeah.

00:52:54.620 --> 00:52:55.760
It's, it is super nice.

00:52:55.760 --> 00:52:56.620
Yeah.

00:52:56.620 --> 00:52:57.280
Yeah.

00:52:57.280 --> 00:53:04.260
If you've not turned on the SSH keys for your one password CLI, I have no secret keys, no G,

00:53:04.260 --> 00:53:06.880
no SSH keys, no API credentials.

00:53:06.880 --> 00:53:09.740
I have no secrets on my file system unencrypted.

00:53:09.740 --> 00:53:14.680
They're living in one password and one password proxies that access when needed.

00:53:14.680 --> 00:53:16.000
Yeah.

00:53:16.000 --> 00:53:16.700
That's pretty neat.

00:53:16.700 --> 00:53:18.720
I feel like I should maybe embrace that more.

00:53:18.720 --> 00:53:22.600
I embrace one password a lot, but there's, there's more.

00:53:22.600 --> 00:53:25.800
There's no, especially when you're working, you're working on multiple projects and multiple

00:53:25.800 --> 00:53:26.520
environments.

00:53:26.840 --> 00:53:29.640
And you want to get, have that least privileged access.

00:53:29.640 --> 00:53:32.020
You don't want to have a one key to rule them all.

00:53:32.020 --> 00:53:36.020
You want to have keys to get you access to sandbox keys that can get you access to production.

00:53:36.020 --> 00:53:39.620
And you want to be able to give only certain people access to those production keys and only

00:53:39.620 --> 00:53:41.080
certain people access to sandbox keys.

00:53:41.080 --> 00:53:46.620
And we actually do that with, with the word Microsoft 365 shop.

00:53:46.620 --> 00:53:53.020
We use Microsoft's Entra, like directory service, which is their Azure Active Directory product.

00:53:53.020 --> 00:53:54.520
And we use security groups.

00:53:54.520 --> 00:53:58.500
And so based on what security groups or what project you're working on gives you access

00:53:58.500 --> 00:54:01.840
to only certain vaults inside of one password and gives you access to only certain accounts

00:54:01.840 --> 00:54:07.520
inside of, Amazon and those kinds of things are all wired up to our, our single

00:54:07.520 --> 00:54:08.560
sign on platform.

00:54:08.560 --> 00:54:10.280
Yeah.

00:54:10.280 --> 00:54:10.740
Very nice.

00:54:10.740 --> 00:54:11.980
Traffic.

00:54:11.980 --> 00:54:14.640
Traffic is just an ingress controller.

00:54:14.640 --> 00:54:17.100
Um, it's like a load balancer type thing.

00:54:17.100 --> 00:54:17.460
Yeah.

00:54:17.460 --> 00:54:19.120
It's a load balancer kind of cloud.

00:54:19.120 --> 00:54:25.040
If you rethought about a web server and it was cloud native and containers and understood

00:54:25.040 --> 00:54:28.460
clusters like Kubernetes clusters, this is what traffic is.

00:54:28.460 --> 00:54:30.220
Um, it's.

00:54:30.220 --> 00:54:30.840
I see.

00:54:30.840 --> 00:54:34.320
So maybe a better analogy would be like internet X or.

00:54:34.320 --> 00:54:34.680
Yeah.

00:54:34.680 --> 00:54:35.740
Yeah.

00:54:35.740 --> 00:54:36.900
I mean, I think we all grew up.

00:54:36.900 --> 00:54:41.580
We all grew up on engine X and made it do all the crazy reverse proxy things.

00:54:41.580 --> 00:54:47.120
Like traffic is the born born in the cloud native world version of that.

00:54:47.120 --> 00:54:52.140
Now, engine X has their own ingress controller as well that they've re rewritten to be more

00:54:52.140 --> 00:54:52.680
cloud native.

00:54:52.680 --> 00:54:55.020
That's just what traffic is for us.

00:54:55.020 --> 00:55:00.540
Um, cert manager again, handling things like TLS certificates and renewals and you name

00:55:00.540 --> 00:55:02.060
it cert manager, make sure that.

00:55:02.060 --> 00:55:06.240
How's that different than, let's encrypt and cert bot and things like that.

00:55:07.720 --> 00:55:10.520
Uh, I mean, it's really similar in those cases.

00:55:10.520 --> 00:55:13.600
I think actually cert managers, I think it's using less encrypt under the covers.

00:55:13.600 --> 00:55:15.580
Um, I could be wrong on that one.

00:55:15.580 --> 00:55:17.140
Maybe more cluster focus.

00:55:17.140 --> 00:55:18.520
Cause that could be a real challenge.

00:55:18.520 --> 00:55:21.360
Well, cause a lot of the, again, another beauty of Kubernetes.

00:55:21.360 --> 00:55:24.440
I don't think a lot of people talk about is the operators.

00:55:24.440 --> 00:55:29.080
These are like, you know, kind of extensions or plugins to the Kubernetes cluster that give

00:55:29.080 --> 00:55:32.900
you superpowers to do things like make sure the search are always, you know, renewed,

00:55:32.900 --> 00:55:35.060
make sure the latest code is always deployed.

00:55:35.480 --> 00:55:38.360
Uh, make sure the database is highly available and backed up.

00:55:38.360 --> 00:55:42.240
Make sure, you know, that's what these operators do in the Kubernetes world.

00:55:42.240 --> 00:55:46.460
Is there like just plugins to your cluster that give you these extended capabilities?

00:55:46.460 --> 00:55:48.080
Okay.

00:55:48.080 --> 00:55:49.080
And that's what cert manager is.

00:55:49.080 --> 00:55:49.760
It's another one of those.

00:55:49.760 --> 00:55:52.940
So, and I handle the certificates and ingress routes.

00:55:52.940 --> 00:55:55.620
That's all like kind of traffic cert manager certificates.

00:55:55.620 --> 00:55:56.100
It's all.

00:55:56.100 --> 00:55:56.960
Yeah.

00:55:56.960 --> 00:55:57.660
It's all together.

00:55:57.660 --> 00:55:58.300
All together.

00:55:58.300 --> 00:56:02.940
Won't give you the certificate unless it can prove that that certificate, that,

00:56:02.940 --> 00:56:05.140
that domain routes back to that thing.

00:56:05.140 --> 00:56:09.440
And yeah, it's, it's great, but it does get a little complicated in Docker already.

00:56:09.440 --> 00:56:12.620
And then I can imagine auto scaling clusters.

00:56:12.620 --> 00:56:13.200
Right.

00:56:13.200 --> 00:56:14.700
You want it all just to work.

00:56:14.700 --> 00:56:16.740
Yeah.

00:56:16.740 --> 00:56:18.020
You don't want the certificate expired.

00:56:18.020 --> 00:56:18.380
Warning.

00:56:18.380 --> 00:56:18.860
Danger.

00:56:18.860 --> 00:56:20.080
Do not proceed to this website.

00:56:20.080 --> 00:56:20.520
Oh no.

00:56:22.000 --> 00:56:22.420
All right.

00:56:22.420 --> 00:56:23.900
We got Prometheus in the house.

00:56:23.900 --> 00:56:26.960
Well, and Prometheus and Grafana are kind of together here.

00:56:26.960 --> 00:56:32.400
It's nice to have a observability, be able to see stats and trending data to be able to make

00:56:32.400 --> 00:56:35.640
decisions on how you're scaling or handling, you know, load.

00:56:35.640 --> 00:56:41.960
It's hard to predict sometimes what a service is going to do when you go deploy it to real

00:56:41.960 --> 00:56:42.320
users.

00:56:42.320 --> 00:56:49.000
Real, real users have a uncanny knack of pushing buttons and, and making things happen

00:56:49.000 --> 00:56:51.140
that produce lots of crazy edge cases.

00:56:51.140 --> 00:56:52.400
This part was slow.

00:56:52.400 --> 00:56:53.560
So I just kept pushing the button.

00:56:53.560 --> 00:56:55.700
Like you realize how much more load you're putting on.

00:56:55.700 --> 00:56:57.280
It was already slow because it couldn't handle it.

00:56:57.280 --> 00:57:02.160
And you, you'd prefer that, you know, about these problems before your develop, your users

00:57:02.160 --> 00:57:03.280
report them to you.

00:57:03.280 --> 00:57:06.880
So tools like Prometheus and, and Grafana and Loki.

00:57:06.880 --> 00:57:10.700
So Loki specifically is, is log aggregation.

00:57:10.700 --> 00:57:12.880
Prometheus is going to be a lot of metrics.

00:57:12.880 --> 00:57:15.180
And we combine those all into like Grafana dashboards.

00:57:15.180 --> 00:57:19.620
The trick here is, you know, you want to be able to get all the data, but then you got

00:57:19.620 --> 00:57:21.020
to make something meaningful of the data.

00:57:21.020 --> 00:57:27.200
And so we try to, I, we try to put in some, you know, default dashboards that give you that.

00:57:27.200 --> 00:57:31.200
If I was stuck on an Island, what was the one screen of information I might need to make

00:57:31.200 --> 00:57:36.540
a business decision about what's happening here type view of things and not overload you

00:57:36.540 --> 00:57:37.280
with too much information.

00:57:37.280 --> 00:57:41.400
But you want to be able to dive deeper and see, oh, you know, when the database backup

00:57:41.400 --> 00:57:44.580
kicks in, the IO all of a sudden goes crazy.

00:57:44.580 --> 00:57:46.540
And that's why we're seeing a dip in here.

00:57:46.540 --> 00:57:50.260
And that's why there was a failover, like be able to trace back those things without data

00:57:50.260 --> 00:57:50.900
is impossible.

00:57:50.900 --> 00:57:56.820
And you only, again, because we're in a clustered world and there's lots of interdependencies

00:57:56.820 --> 00:57:58.360
and these things can scale out.

00:57:58.360 --> 00:58:01.640
You could have many, many nodes running these, these, these tools.

00:58:01.640 --> 00:58:04.440
Uh, it's, you got to have some way of getting us.

00:58:04.440 --> 00:58:06.660
I hate to say it, a single pane of glass.

00:58:06.660 --> 00:58:08.400
I'll, I'll, I'll put that out there.

00:58:08.400 --> 00:58:13.800
I can, I can see my entire business in a single pane of glass and it is, it is humming smoothly.

00:58:13.800 --> 00:58:14.180
Yeah.

00:58:14.180 --> 00:58:14.420
Yeah.

00:58:14.420 --> 00:58:18.060
I'm sure all the, all the, every marketing person is just, they all just, they all just

00:58:18.060 --> 00:58:19.660
cringe to like, oh my God, he just said it.

00:58:19.660 --> 00:58:20.240
He just said it.

00:58:20.240 --> 00:58:24.840
Some people cringe and say, yes, they're speaking my language out there.

00:58:24.840 --> 00:58:29.800
Michael in the audience says the media cube Prometheus is all of the pre-configured dashboards

00:58:29.800 --> 00:58:30.940
for K8s out of the box.

00:58:30.940 --> 00:58:31.700
Awesome stuff.

00:58:31.700 --> 00:58:32.180
Yeah.

00:58:32.180 --> 00:58:32.740
Yeah.

00:58:32.740 --> 00:58:33.280
Yeah, definitely.

00:58:33.280 --> 00:58:38.400
I mean, there's, there's so many good example dashboards under FANA that it is no reason

00:58:38.400 --> 00:58:39.980
not to be using this for observability.

00:58:39.980 --> 00:58:41.360
And this is like the table stakes.

00:58:41.360 --> 00:58:44.600
Like you better start here and you better just do it.

00:58:44.600 --> 00:58:48.540
And, but a lot of people deploy an app and then they, they, they, I mean, how many times

00:58:48.540 --> 00:58:52.580
have you worked with another developer and you're like, well, if something's wrong, I can't

00:58:52.580 --> 00:58:53.040
figure out why.

00:58:53.040 --> 00:58:55.820
And the first thing you tell them, I guarantee you, Michael, the first thing you tell them to

00:58:55.820 --> 00:58:57.000
do is, did you look in the logs?

00:58:57.160 --> 00:58:58.880
And they're like, no, I didn't look in the logs.

00:58:58.880 --> 00:59:00.920
I'm like, well, that's the first thing you do is go look at the logs.

00:59:00.920 --> 00:59:02.140
No, no.

00:59:02.140 --> 00:59:04.760
That's the second thing you tell them.

00:59:04.760 --> 00:59:05.300
What's the first?

00:59:05.300 --> 00:59:07.580
The first thing is, do you have logging?

00:59:07.580 --> 00:59:09.840
It's true.

00:59:09.840 --> 00:59:10.160
Okay.

00:59:10.160 --> 00:59:10.620
Yes.

00:59:10.620 --> 00:59:12.080
I'm looking at them.

00:59:12.080 --> 00:59:12.940
Fair enough.

00:59:12.940 --> 00:59:14.260
I was about to ask you though.

00:59:14.300 --> 00:59:18.060
Like, do you have, do you have logging set up in this and do you have like log guru or

00:59:18.060 --> 00:59:20.780
do you have log book or do you just do Python logging or what's the story?

00:59:20.780 --> 00:59:21.380
Yeah.

00:59:21.380 --> 00:59:22.860
So I mean, we're, we're using containers.

00:59:22.860 --> 00:59:28.240
So things should be set up to, to log as we would expect them in Kubernetes.

00:59:28.240 --> 00:59:34.040
So kind of like the, if you've ever looked at the 12 factor app, you know, there, there's

00:59:34.040 --> 00:59:36.080
opinions about how logging should happen.

00:59:36.080 --> 00:59:40.880
That's what we adhere to is like the logging should end up in a natural spot where it's easy

00:59:40.880 --> 00:59:45.360
for us to aggregate with tools like Prometheus and Grafana and actually then action and do

00:59:45.360 --> 00:59:45.940
something with them.

00:59:45.940 --> 00:59:51.360
So we typically have another SSH into other machines to see, well, what's this thing doing?

00:59:51.360 --> 00:59:52.060
What's that doing?

00:59:52.060 --> 00:59:52.300
Yeah.

00:59:52.300 --> 00:59:56.060
And that's one thing I want to have no SSH into these clusters.

00:59:56.060 --> 01:00:01.960
Actually, one of our deployment opinions here is using things like Talos Linux for our communities

01:00:01.960 --> 01:00:02.960
deployments.

01:00:02.960 --> 01:00:06.140
Talos does not have a SSH shell enabled.

01:00:06.140 --> 01:00:10.520
Talos Linux has the ability to launch Kubernetes clusters.

01:00:10.520 --> 01:00:15.780
So you can use kubectl to manage your, your Kubernetes, but then you have a Talos CTL to

01:00:15.780 --> 01:00:16.620
manage Talos.

01:00:16.620 --> 01:00:18.640
And there's no reason to shell into a box.

01:00:18.640 --> 01:00:23.340
It's just another security surface that you can now get rid of.

01:00:23.340 --> 01:00:24.100
Yeah.

01:00:24.100 --> 01:00:25.600
Very interesting.

01:00:25.600 --> 01:00:31.040
There's a couple of these single purpose Linux distributions out there that are really,

01:00:31.040 --> 01:00:31.520
really cool.

01:00:31.520 --> 01:00:34.420
We've evaluated quite a few, and this is the one we picked.

01:00:34.420 --> 01:00:35.860
I liked its opinions.

01:00:35.860 --> 01:00:36.780
I liked its approach.

01:00:36.780 --> 01:00:38.420
I like the community that's behind it.

01:00:38.920 --> 01:00:41.460
One thing when you're picking a lot of these software tools is you need to look at the

01:00:41.460 --> 01:00:41.880
communities.

01:00:41.880 --> 01:00:43.340
You need to see how active they are.

01:00:43.340 --> 01:00:47.340
You need to understand, is this going to be a viable project, you know, five years from

01:00:47.340 --> 01:00:47.520
now?

01:00:47.520 --> 01:00:51.360
Because these are opinions you'll pick now and you'll have to live with for potentially

01:00:51.360 --> 01:00:51.940
a long time.

01:00:51.940 --> 01:00:54.060
That's a great, great point.

01:00:54.060 --> 01:00:57.500
Is this going to be your hobby project that you're going to have to keep it running for

01:00:57.500 --> 01:00:58.060
everyone else?

01:00:58.180 --> 01:00:59.900
Or is this thing got a life of its own?

01:00:59.900 --> 01:01:01.800
Because I don't need another hobby.

01:01:01.800 --> 01:01:02.840
Yeah, exactly.

01:01:02.840 --> 01:01:04.760
And we want this to be for real.

01:01:04.760 --> 01:01:05.720
Yeah.

01:01:05.720 --> 01:01:08.920
Let's do one more shout out of all the building blocks here.

01:01:08.920 --> 01:01:11.940
Sentry, you know, longtime sponsor and friend of the show.

01:01:11.940 --> 01:01:12.400
Yeah.

01:01:12.400 --> 01:01:19.840
So again, observability tools like this, especially when it comes to like tools like Sentry or even

01:01:19.840 --> 01:01:24.680
Datadog and New Relic, we just happen to pick Sentry because I like, again, like the community.

01:01:24.680 --> 01:01:27.380
I like the people who are behind that tool.

01:01:27.380 --> 01:01:33.540
I can't tell you how much time a tool like Sentry has saved us when trying to diagnose and

01:01:33.540 --> 01:01:34.820
debug performance issues.

01:01:34.820 --> 01:01:39.460
I know it has lots and lots of features it can do, but when you're looking at a stack and

01:01:39.460 --> 01:01:44.560
you've got an N plus one performance issue going on with your database queries and its

01:01:44.560 --> 01:01:49.760
integrations with Django, its integrations with Redis and Postgres, just make tracking

01:01:49.760 --> 01:01:51.740
down that kind of stuff so much easier.

01:01:51.740 --> 01:01:58.420
We, again, I'll go back to that 2020, 2021, when we launched Loudswarm as a virtual event

01:01:58.420 --> 01:02:06.760
platform space, being able to deliver the schedule to a React application quickly as it's changing

01:02:06.760 --> 01:02:09.520
throughout the day was actually a big performance challenge.

01:02:09.520 --> 01:02:12.440
And Sentry highlighted exactly where the problems were.

01:02:12.440 --> 01:02:17.880
And then we just implemented a simple Redis cache that took us from 90 second generation of

01:02:17.880 --> 01:02:19.380
the schedule down to like milliseconds.

01:02:19.680 --> 01:02:23.920
And that's because we were able to pinpoint the issue really, really carefully and really,

01:02:23.920 --> 01:02:24.780
really close to a Sentry.

01:02:24.780 --> 01:02:29.480
It just, it bubbles up your problems and now you just go pick off the low hanging fruit.

01:02:29.480 --> 01:02:30.720
Yeah, that's awesome.

01:02:30.720 --> 01:02:36.560
I've also used it for air monitoring stuff and it's, I'm more than one, I know I say this

01:02:36.560 --> 01:02:40.560
on the show for some of the ads, but more than once, and this is not an ad, but I've

01:02:40.560 --> 01:02:45.300
certainly gotten an error and it's got all the variables, not just the stack trace, but

01:02:45.300 --> 01:02:48.580
actually the variables of what user ran into the problems and all sorts of stuff.

01:02:48.580 --> 01:02:51.500
And I reached out to multiple people said, I see you ran this problem.

01:02:51.500 --> 01:02:52.140
I'm really sorry.

01:02:52.140 --> 01:02:53.300
I fixed it.

01:02:53.300 --> 01:02:54.440
Give it another try.

01:02:54.440 --> 01:03:00.800
And I'm sure that's a creepy experience in the one way, but also, geez, that doesn't happen

01:03:00.800 --> 01:03:01.280
very often.

01:03:01.280 --> 01:03:03.240
But you know, like, well, I fixed it and I know who it is.

01:03:03.300 --> 01:03:05.240
I might as well tell them like, Hey, sorry, you hit this.

01:03:05.240 --> 01:03:05.500
Yeah.

01:03:05.500 --> 01:03:05.840
Try again.

01:03:05.840 --> 01:03:10.080
One tool we've not mentioned here that is not in this list that I think is super important

01:03:10.080 --> 01:03:11.800
to our scaf stack is tilt.

01:03:11.800 --> 01:03:17.800
That is the local Kubernetes management tool of choice that we have picked.

01:03:17.800 --> 01:03:24.120
And if you've not played with tilt, we've gone through different tools along the way.

01:03:24.120 --> 01:03:28.380
There was one called scaffold and I can't remember the other ones we try.

01:03:28.540 --> 01:03:33.320
There's numerous ones out there who basically sit in this space and try and solve this problem.

01:03:33.320 --> 01:03:39.940
But the killer feature for tilt was two way sync between your cluster and your local machine.

01:03:39.940 --> 01:03:44.220
So again, if you're running locally and using kind, you probably don't notice anything because

01:03:44.220 --> 01:03:48.620
tilt is watching your file system, synchronizing your files into the Kubernetes cluster for you

01:03:48.620 --> 01:03:48.880
to work.

01:03:48.880 --> 01:03:51.080
But it also does the reverse.

01:03:51.080 --> 01:03:57.400
One of the key bits I wanted was when you do a compilation of your requirements for

01:03:57.400 --> 01:04:00.920
your project, you're running Django and you've got a whole set of requirements.

01:04:00.920 --> 01:04:06.680
If you get in some trickier things like around the data science world, there may be things

01:04:06.680 --> 01:04:11.780
that compile differently on macOS than on Linux than on Windows because they use some slightly

01:04:11.780 --> 01:04:12.580
different dependencies.

01:04:12.580 --> 01:04:15.700
That can be tricky when you're working in a container world.

01:04:15.700 --> 01:04:20.740
So you want to make sure you're doing your pip-tools compile will be a UV, but your

01:04:20.740 --> 01:04:25.380
pip-tools compile in the container in the target environment of where this is going to be deployed

01:04:25.380 --> 01:04:29.720
and built because you'll get different results if you ran that pip-tools compile on your Mac

01:04:29.720 --> 01:04:32.480
as opposed into the Linux VM or Linux container.

01:04:32.480 --> 01:04:32.980
Yeah, that's true.

01:04:32.980 --> 01:04:35.580
So platform specific wheels.

01:04:35.580 --> 01:04:35.800
Yeah.

01:04:35.800 --> 01:04:36.340
Yeah.

01:04:36.340 --> 01:04:41.320
So the tools like tilt makes sure that I can run my thing in the container and the result

01:04:41.320 --> 01:04:43.360
of it synchronizes back to my file system.

01:04:43.360 --> 01:04:44.800
And then I check that into the repository.

01:04:45.220 --> 01:04:46.740
That was a key bit there.

01:04:46.740 --> 01:04:48.880
And it's, again, it has a lot of other cool things.

01:04:48.880 --> 01:04:49.860
Nice UI.

01:04:49.860 --> 01:04:54.740
Like when you, if you fire up scaf at the very end of it, it'll tell you, congratulations,

01:04:54.740 --> 01:04:59.500
you've got a new project on your file system, CD into your project and just type tilt up.

01:04:59.500 --> 01:05:01.920
You type tilt up and you hit space bar.

01:05:01.920 --> 01:05:02.520
I think it is.

01:05:02.520 --> 01:05:07.260
And it launches a web browser with all the status of all the containers that are running locally.

01:05:07.260 --> 01:05:08.820
You can see all the logging.

01:05:08.820 --> 01:05:13.860
You can tilt watches for changes to your local file system for the code.

01:05:14.060 --> 01:05:15.920
Tilt watches for changes to the Docker files.

01:05:15.920 --> 01:05:20.260
If you change the Docker file out from underneath tilt, like while you're developing, say you're

01:05:20.260 --> 01:05:24.700
adding a new layer or new dependency or something that's needed in Docker and not in your Python,

01:05:24.700 --> 01:05:28.020
tilt will rebuild the container immediately for you.

01:05:28.020 --> 01:05:29.160
Like without you having to do anything.

01:05:29.280 --> 01:05:32.760
Like you just, you just kind of, you just code along and tilt keeps up.

01:05:32.760 --> 01:05:33.700
Wow.

01:05:33.700 --> 01:05:34.540
That's awesome.

01:05:34.540 --> 01:05:36.260
Yeah.

01:05:36.260 --> 01:05:39.220
It's a little bit like setting your unit test to run on every save.

01:05:39.220 --> 01:05:39.780
Exactly.

01:05:39.780 --> 01:05:40.620
It is.

01:05:40.620 --> 01:05:41.860
And it's fast.

01:05:41.860 --> 01:05:43.600
Sometimes you barely even notice.

01:05:43.600 --> 01:05:50.600
It's like if you're, if you're working in a very late layer in the build, those builds can happen really, really quickly because most of the stuff's cached.

01:05:50.600 --> 01:05:52.440
There's another set of opinions.

01:05:53.260 --> 01:06:00.140
We've really tried to finely tune all the caching in the Docker files and all the layers so that these images build fast.

01:06:00.140 --> 01:06:01.040
They build slim.

01:06:01.040 --> 01:06:02.400
They use caches.

01:06:02.400 --> 01:06:07.260
So if you've got, if you're running locally, it's going to cache things locally in your file system.

01:06:07.260 --> 01:06:11.080
If you blow things away and start over again, it doesn't take forever to download all the stuff.

01:06:11.080 --> 01:06:12.620
It should be pulling from your local cache.

01:06:13.660 --> 01:06:18.420
Yeah, that's a big shift when you're doing container type stuff.

01:06:18.420 --> 01:06:18.840
Oh, man.

01:06:18.840 --> 01:06:26.880
Because you, some folks may have a not great experience with containers because of the size of some of these things and because they're not effectively using caching.

01:06:26.880 --> 01:06:28.300
This is a game changer.

01:06:28.300 --> 01:06:28.680
Right.

01:06:28.680 --> 01:06:29.980
It 100% is.

01:06:29.980 --> 01:06:34.240
And just maybe potentially just reordering or splitting up commands can make.

01:06:34.240 --> 01:06:35.000
Oh, yeah.

01:06:35.000 --> 01:06:36.920
10 X difference in speed.

01:06:37.840 --> 01:06:44.060
Well, and you were the one who convinced me to switch over to UV inside their container builds as well.

01:06:44.060 --> 01:06:46.100
And that absolutely sped things up.

01:06:46.100 --> 01:06:46.940
Speed is a feature.

01:06:46.940 --> 01:06:48.980
I know you had that interview with Charlie.

01:06:48.980 --> 01:06:52.820
And that was one of the things that came out of that stuck in my head is speed is a feature.

01:06:52.820 --> 01:06:54.940
And I take that everywhere with me.

01:06:54.940 --> 01:06:56.000
Yeah, that's awesome.

01:06:56.000 --> 01:06:59.460
It's a cheap T code for sure.

01:06:59.460 --> 01:07:00.740
It's like, oh, we could just be 10 times.

01:07:00.740 --> 01:07:01.720
Let's try that.

01:07:01.720 --> 01:07:02.200
That's awesome.

01:07:02.200 --> 01:07:07.780
And then, yeah, you can layer on more caching on top of that and make it even more ridiculous.

01:07:08.320 --> 01:07:08.460
Totally.

01:07:08.460 --> 01:07:08.740
All right.

01:07:08.740 --> 01:07:10.980
I think that's probably it for the time to talk through this.

01:07:10.980 --> 01:07:12.260
What a cool project you got here.

01:07:12.260 --> 01:07:16.900
Let's close it out with a roadmap.

01:07:16.900 --> 01:07:19.580
So we got a lot of things coming.

01:07:19.580 --> 01:07:24.700
One of the big ones is a big shift from using cookie cutter, which I've mentioned already,

01:07:24.700 --> 01:07:29.020
to using copier as our underlying templating product.

01:07:29.020 --> 01:07:31.100
The big copier is.

01:07:31.100 --> 01:07:31.300
Yeah.

01:07:31.300 --> 01:07:31.600
Yeah.

01:07:31.600 --> 01:07:34.760
So copiers like cookie cutter actually should drop in replacement for cookie cutter.

01:07:34.900 --> 01:07:39.600
You can use your cookie cutter templates you've already built with copier, but now you can

01:07:39.600 --> 01:07:42.940
actually modularize them and upgrade them.

01:07:42.940 --> 01:07:47.160
So one of the problems with cookie cutter was it was kind of one and done.

01:07:47.160 --> 01:07:49.780
Like you blew out your template onto the file system.

01:07:49.780 --> 01:07:50.780
You've got your code.

01:07:50.780 --> 01:07:52.700
That's the last time you would touch cookie cutter.

01:07:53.500 --> 01:07:58.620
But if new opinions come around, which we're constantly adding new opinions to scaf about

01:07:58.620 --> 01:08:03.140
how we do dev and how we do deployment, you would want those to roll back into old projects

01:08:03.140 --> 01:08:04.820
that had been built with that same tool.

01:08:04.820 --> 01:08:05.880
Copier enables this.

01:08:05.880 --> 01:08:13.020
Copier now allows us to rerun against an existing project and adopt new opinions that have been

01:08:13.020 --> 01:08:14.840
made from the source template.

01:08:15.380 --> 01:08:21.660
That's another change we're making is we're actually allowing scaf to have multiple template types.

01:08:21.660 --> 01:08:26.140
So right now the scaf kind of runs in a full stack Django app mode.

01:08:26.140 --> 01:08:29.680
We're going to have the scaf lite version, which is maybe serverless.

01:08:29.680 --> 01:08:34.100
We're going to have the appliance mode, which would enable not using Argo CD, for example,

01:08:34.100 --> 01:08:35.280
but different ways of updating.

01:08:35.280 --> 01:08:39.200
We'll have opinions that are not Django necessarily.

01:08:39.200 --> 01:08:43.120
They may be more data pipeline versions of your apps.

01:08:43.120 --> 01:08:47.760
And so those will be templates that can be updated and redeployed and kept up to date with copier.

01:08:47.760 --> 01:08:49.480
That's cool.

01:08:49.480 --> 01:08:55.600
Yeah, I can see a whole idea, a whole concept of this for ML workloads and data science workflows.

01:08:55.600 --> 01:08:57.640
And we don't actually need a web app.

01:08:57.640 --> 01:09:01.060
Exactly what we need is data ingestion and detail.

01:09:01.060 --> 01:09:06.720
And we want results, either notebook or just something in a database on the other end of them.

01:09:06.720 --> 01:09:07.360
Yeah.

01:09:07.360 --> 01:09:09.700
Yeah, that's a big, that's a big deal.

01:09:09.700 --> 01:09:19.940
Well, that's another thing that is included in scaf opinions is the CI pipelines, like GitHub actions, bit bucket action, you know, workflows or whatever their CI thing is called.

01:09:19.940 --> 01:09:22.160
Because those are important.

01:09:22.160 --> 01:09:22.860
Those need to be there.

01:09:22.860 --> 01:09:28.560
Those need to be there day one because they're so hard to tack on later or you just get busy and you don't tack them on when you should have.

01:09:29.440 --> 01:09:37.920
Yeah, it's good to have all these, all this experience and all these rounded off rough edges put together in one box for you.

01:09:37.920 --> 01:09:38.420
It's very cool.

01:09:38.420 --> 01:09:39.700
All right.

01:09:39.700 --> 01:09:42.100
Well, we're certainly out of time, Calvin.

01:09:42.240 --> 01:09:47.080
So how about, we've got two things to close this out, unlike normal.

01:09:47.080 --> 01:09:49.820
So let's close it out with a final call to action.

01:09:49.820 --> 01:09:51.080
People are interested in scaf.

01:09:51.080 --> 01:09:52.000
Yeah.

01:09:52.000 --> 01:09:53.640
They should definitely go.

01:09:53.640 --> 01:09:54.440
They go, they star it.

01:09:54.440 --> 01:09:54.980
Yep.

01:09:54.980 --> 01:09:55.500
Go to star it.

01:09:55.500 --> 01:09:56.320
I got to log in, apparently.

01:09:56.320 --> 01:09:56.860
Yeah.

01:09:56.860 --> 01:09:57.440
Go hang out.

01:09:57.440 --> 01:10:00.980
Go to the 6up slash scaf GitHub repository.

01:10:00.980 --> 01:10:02.820
It's a one-liner to install.

01:10:03.020 --> 01:10:09.560
I would love to hear your feedback, any feature requests, any bugs you find.

01:10:09.560 --> 01:10:16.820
We've worked really hard on ironing out a lot of those issues over the last year as we kind of pushed toward DjangoCon last year.

01:10:16.820 --> 01:10:27.680
It's amazing and mind-blowing to see how fast you can get a Django project up and running on your own machine with Kubernetes in the mix.

01:10:27.680 --> 01:10:31.220
And maybe people need a little background information.

01:10:31.860 --> 01:10:33.260
They're like, I've heard of Kubernetes.

01:10:33.260 --> 01:10:35.800
What do I do with it?

01:10:35.800 --> 01:10:38.260
Like, you got good resources for them to...

01:10:38.260 --> 01:10:41.840
Oh, on YouTube, there's an excellent YouTuber.

01:10:41.840 --> 01:10:43.180
I can't remember.

01:10:43.180 --> 01:10:43.900
Her name's Nana.

01:10:43.900 --> 01:10:53.160
So if you just search Nana and Kubernetes, she does an incredible job of explaining Kubernetes to everybody.

01:10:53.160 --> 01:10:54.460
Yeah.

01:10:54.460 --> 01:10:56.300
I believe it's Nana codes.

01:10:56.300 --> 01:10:56.960
Yeah.

01:10:56.960 --> 01:10:57.760
Technical Nana.

01:10:57.760 --> 01:10:58.380
Yeah.

01:10:58.380 --> 01:10:58.760
Yeah.

01:10:58.760 --> 01:10:59.360
She's awesome.

01:10:59.360 --> 01:11:00.180
She's really good.

01:11:00.180 --> 01:11:00.340
Yeah.

01:11:00.340 --> 01:11:00.860
She's really good.

01:11:00.860 --> 01:11:01.460
She's really good.

01:11:01.780 --> 01:11:05.200
Great way of explaining these kind of deeper technology things.

01:11:05.200 --> 01:11:06.840
That's literally where I went.

01:11:06.840 --> 01:11:08.460
I was like, I need to know more about Kubernetes.

01:11:08.460 --> 01:11:09.640
I went and watched her videos.

01:11:09.640 --> 01:11:11.000
I've met her in person.

01:11:11.000 --> 01:11:12.140
She's actually an AWS hero.

01:11:12.140 --> 01:11:14.500
And she was at reInvent a couple years ago.

01:11:14.500 --> 01:11:19.460
And she's, again, superhuman being doing this for the love of technology.

01:11:19.460 --> 01:11:21.520
Yeah.

01:11:21.520 --> 01:11:24.460
Actually, I can give a shout out also to one of the people in the chat.

01:11:24.900 --> 01:11:29.140
Michael Levin is also a prolific YouTuber on Kubernetes.

01:11:29.140 --> 01:11:30.840
Oh, no kidding.

01:11:30.840 --> 01:11:31.140
Okay.

01:11:31.140 --> 01:11:33.480
I'll put a link to his channel as well.

01:11:33.480 --> 01:11:35.020
Awesome.

01:11:35.020 --> 01:11:35.360
All right.

01:11:35.360 --> 01:11:37.600
Well, Calvin, thank you for being here.

01:11:37.600 --> 01:11:38.760
It's been awesome.

01:11:39.180 --> 01:11:42.440
I can't tell you how excited I was about the opportunity.

01:11:42.440 --> 01:11:42.760
Yeah.

01:11:42.760 --> 01:11:43.240
Yeah.

01:11:43.240 --> 01:11:44.240
It's been super fun.

01:11:44.240 --> 01:11:45.500
And I was excited as well.

01:11:45.500 --> 01:11:46.860
So much so.

01:11:46.860 --> 01:11:50.540
So much so that I've made a theme song for this episode.

01:11:50.940 --> 01:11:53.580
I'm not going to play it on the YouTube live stream version.

01:11:53.580 --> 01:11:55.640
It's just the logistics of that are a little bit challenging.

01:11:55.640 --> 01:12:00.460
But I'll put a link in the YouTube description in a day or two.

01:12:00.460 --> 01:12:04.240
And when the show comes out, it's going to be at the end.

01:12:04.240 --> 01:12:09.020
So if you're listening to the MP3 version of Podcast Player, be sure to listen to the end.

01:12:09.020 --> 01:12:10.200
There's going to be a fun thing.

01:12:10.200 --> 01:12:10.600
Give me a crank it up.

01:12:10.600 --> 01:12:11.380
Yeah.

01:12:11.380 --> 01:12:12.340
So here's the thing.

01:12:12.340 --> 01:12:15.180
If you like Linkin Park and that style of music, you're going to love it.

01:12:15.180 --> 01:12:18.740
If you hate Linkin Park, maybe call it a show.

01:12:18.740 --> 01:12:20.900
Anyway, it's going to be super fun.

01:12:21.340 --> 01:12:24.060
We'll put Let's Deploy the Dream at the end.

01:12:24.060 --> 01:12:26.280
It'll be a great theme song to round things out.

01:12:26.280 --> 01:12:28.620
And with that, Calvin, thanks for being on the show.

01:12:28.620 --> 01:12:29.160
Awesome.

01:12:29.160 --> 01:12:29.800
Thanks, Michael.

01:12:29.800 --> 01:12:30.380
Yeah.

01:12:30.380 --> 01:12:30.620
Bye.

01:12:30.620 --> 01:12:33.200
Thank you.

