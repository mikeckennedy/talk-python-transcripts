WEBVTT

00:00:00.000 --> 00:00:02.000
(claps)


00:00:02.000 --> 00:00:07.460
- Everyone out there, welcome to the live stream.


00:00:07.460 --> 00:00:09.680
Michael, great to be chatting with you here.


00:00:09.680 --> 00:00:11.320
- Likewise, thanks for having me.


00:00:11.320 --> 00:00:12.160
- Yeah, you bet.


00:00:12.160 --> 00:00:14.480
Now, before we actually get to the podcast part,


00:00:14.480 --> 00:00:17.080
if you have comments for us during the show,


00:00:17.080 --> 00:00:20.940
please put them into the live comments on YouTube


00:00:20.940 --> 00:00:24.800
and we'll try to make them part of our conversation here.


00:00:24.800 --> 00:00:27.200
And so, yeah, with that out of the way,


00:00:27.200 --> 00:00:28.480
let's go and get started.


00:00:28.480 --> 00:00:32.720
- Michael, welcome back to Talk Python to Me.


00:00:32.720 --> 00:00:34.120
- Thank you.


00:00:34.120 --> 00:00:35.720
- Yeah, it's really great to have you back.


00:00:35.720 --> 00:00:40.140
You've been on before, and there's a bunch of stuff


00:00:40.140 --> 00:00:42.720
that we're gonna talk about that you've been up to


00:00:42.720 --> 00:00:43.540
and we've done.


00:00:43.540 --> 00:00:45.600
So you were back on episode 206


00:00:45.600 --> 00:00:48.360
when you talked about running Django in production.


00:00:48.360 --> 00:00:51.560
And you've had a couple of large sites


00:00:51.560 --> 00:00:53.440
that you've been running, and most recent one


00:00:53.440 --> 00:00:57.600
is probably testdriven.io where you do some articles,


00:00:57.600 --> 00:00:59.600
some tutorials and some courses, right?


00:00:59.600 --> 00:01:09.200
Yeah, so life was obviously much different back in when I was on the podcast back in, what was that, February of 2019.


00:01:09.200 --> 00:01:16.320
But yeah, I mean, so now I'm still working on testdriven.io.


00:01:16.320 --> 00:01:21.280
So that's a, you know, I do training courses for


00:01:21.280 --> 00:01:24.880
mid to senior level developers that are looking to


00:01:26.480 --> 00:01:31.480
get, learn test-driven development, microservices,


00:01:31.480 --> 00:01:34.760
and AWS infrastructure and whatnot.


00:01:34.760 --> 00:01:37.460
- Nice, it's mostly Python and JavaScript stuff,


00:01:37.460 --> 00:01:38.300
is that right?


00:01:38.300 --> 00:01:39.120
- Yeah, yeah.


00:01:39.120 --> 00:01:40.320
- Yeah, cool.


00:01:40.320 --> 00:01:42.100
Maybe some of the same time?


00:01:42.100 --> 00:01:44.120
- Yeah, a bit.


00:01:44.120 --> 00:01:45.680
Yeah, I mean, it's, we also,


00:01:45.680 --> 00:01:47.800
I also get a lot into like container orchestration


00:01:47.800 --> 00:01:49.920
and whatnot, a little bit of Kubernetes,


00:01:49.920 --> 00:01:52.400
a little bit of AWS ECS as well.


00:01:52.400 --> 00:01:54.600
- Awesome.


00:01:54.600 --> 00:01:56.240
And so what do you have to do now?


00:01:56.240 --> 00:02:01.240
So yeah, I am running testdriven.io on the side,


00:02:01.240 --> 00:02:04.960
but my full-time main gig is for Monitor.


00:02:04.960 --> 00:02:09.680
And we, as the banner there says,


00:02:09.680 --> 00:02:11.480
we're doing machine learning assurance.


00:02:11.480 --> 00:02:14.160
We're really doing probably machine learning governance


00:02:14.160 --> 00:02:16.360
is probably more like what,


00:02:16.360 --> 00:02:17.320
if we had to redo the website,


00:02:17.320 --> 00:02:18.960
that's probably what we would establish


00:02:18.960 --> 00:02:20.280
machine learning governance would be there


00:02:20.280 --> 00:02:21.200
rather than assurance.


00:02:21.200 --> 00:02:24.400
But basically we're helping to ensure


00:02:24.400 --> 00:02:30.200
that your AI is doing what it should be doing in production.


00:02:30.200 --> 00:02:35.700
So that your models are basically inferences or predictions


00:02:35.700 --> 00:02:39.700
that your models are serving up are like within a certain bounds, essentially.


00:02:39.700 --> 00:02:44.200
Right. Like if the input data changes and you don't change your models,


00:02:44.200 --> 00:02:47.500
maybe they're not meant to understand that type of data.


00:02:47.500 --> 00:02:50.300
And there's just, you know, the thing is, you're always going to get an answer, right?


00:02:50.300 --> 00:02:51.400
Yeah.


00:02:52.100 --> 00:02:55.860
So yeah, I mean wrong or invalid data like but it looks like a valid answer. Like how do you know?


00:02:55.860 --> 00:03:01.700
Right, it's kind of like yeah in excel like when you whenever you get you know, whatever it is besides an na or whatever


00:03:01.700 --> 00:03:06.100
You know, it's you know, you don't know, you know if that's like good or bad or not


00:03:06.100 --> 00:03:11.860
And so yeah, we're looking for like feature drift. we're looking for model drift. We're looking for bias, you know that sort of things


00:03:11.860 --> 00:03:18.260
um, we're also we take all inferences, that go through a model we're logging and then we're also


00:03:18.740 --> 00:03:23.860
versioning the model as well. So you can recreate the model run counterfactual type tests and whatnot.


00:03:23.860 --> 00:03:29.140
Interesting. Okay. Is that mostly Python stuff over there?


00:03:29.140 --> 00:03:38.020
Yeah, so it's a Django model. If that's like the back end API, using flask is sort of a middle


00:03:38.020 --> 00:03:46.180
layer to transform data between the API and the front end, the front end is in view. And it's


00:03:46.180 --> 00:03:53.340
It's primarily AWS and so I'm using Terraform as infrastructure as code to simplify the


00:03:53.340 --> 00:03:54.860
maintaining of the infrastructure.


00:03:54.860 --> 00:03:55.860
That's cool.


00:03:55.860 --> 00:03:58.060
I feel like Terraform has definitely taken off.


00:03:58.060 --> 00:04:01.020
I hear a lot of people saying that they're using it these days.


00:04:01.020 --> 00:04:02.540
Yeah, I've really...


00:04:02.540 --> 00:04:09.220
Is that like Ansible or Chef or it's like a competitor to that, right?


00:04:09.220 --> 00:04:11.700
Yeah, I think those are a little bit different.


00:04:11.700 --> 00:04:16.580
I would say it's more of a competitor to like cloud formation templates.


00:04:16.580 --> 00:04:23.140
And cloud for I think there's a new sort of infrastructure as code from AWS called CDK.


00:04:23.140 --> 00:04:27.100
That's a little bit more declarative, sort of how Terraform is.


00:04:27.100 --> 00:04:29.060
And I haven't had a chance to look at that.


00:04:29.060 --> 00:04:31.780
But I think that's sort of like the new hotness these days.


00:04:31.780 --> 00:04:35.580
And then there's one more called like Pulumi, I believe is the name.


00:04:35.580 --> 00:04:37.420
But I haven't used that one.


00:04:38.180 --> 00:04:42.580
Yeah, cool. People want to learn more about what's going on with Monitar. They can check out


00:04:42.580 --> 00:04:47.620
They can check out episode 261, which is a little newer


00:04:47.620 --> 00:04:53.460
April 2020 with one of your co-founders Andrew Clark. Is he still working with you?


00:04:53.460 --> 00:04:55.940
Yeah, definitely


00:04:55.940 --> 00:05:00.020
Yeah, cool. So we dive into all that sort of stuff over there, which is cool


00:05:00.020 --> 00:05:04.420
So really the main thing that we're going to talk about is fast api, right?


00:05:04.420 --> 00:05:06.580
Like that's what we're both here.


00:05:06.580 --> 00:05:10.060
We're both fans of FastAPI on multiple levels.


00:05:10.060 --> 00:05:13.980
And yeah, so we're gonna talk about the,


00:05:13.980 --> 00:05:16.780
basically all the extensions in the ecosystem


00:05:16.780 --> 00:05:21.620
around FastAPI, but make the case for us


00:05:21.620 --> 00:05:23.260
for FastAPI itself.


00:05:23.260 --> 00:05:28.260
Like I feel like there was a quite a thousand flowers


00:05:28.260 --> 00:05:32.260
blooming type of thing going on once async and await


00:05:32.260 --> 00:05:33.420
came out in Python, right?


00:05:33.420 --> 00:05:37.660
we had the Django, the Flask, old standbys.


00:05:37.660 --> 00:05:40.660
And then when things switched with type annotations


00:05:40.660 --> 00:05:42.780
and with async and await,


00:05:42.780 --> 00:05:46.220
those frameworks couldn't move super quick to adapt to those.


00:05:46.220 --> 00:05:49.100
So things like FastAPI and Sanic and Jupyter,


00:05:49.100 --> 00:05:51.180
and Starlette and API star,


00:05:51.180 --> 00:05:53.260
all these things just sort of came into existence.


00:05:53.260 --> 00:05:56.580
And FastAPI is certainly among that crowd, right?


00:05:56.580 --> 00:05:58.940
- Yeah, FastAPI definitely leverages Starlet.


00:05:58.940 --> 00:06:02.620
And so, yeah, you get the whole async syntax,


00:06:02.620 --> 00:06:08.540
async and await syntax. I would say that I like FastAPI for other things. I don't really


00:06:08.540 --> 00:06:15.660
take advantage of async and await. I have one production app that's running in FastAPI.


00:06:15.660 --> 00:06:21.140
I honestly care less about async and await. But it's more about the developer experience


00:06:21.140 --> 00:06:27.060
that I get. And also, I really like Pydantic. I would say that, yeah, if you're really into


00:06:27.060 --> 00:06:30.180
the Pydantic and that's like what you use


00:06:30.180 --> 00:06:33.820
for serialization, deserialization, whatnot,


00:06:33.820 --> 00:06:36.660
then I would definitely check out FastAPI.


00:06:36.660 --> 00:06:38.380
- Absolutely.


00:06:38.380 --> 00:06:41.100
Just you probably don't realize it


00:06:41.100 --> 00:06:42.500
'cause it's not very obvious.


00:06:42.500 --> 00:06:44.340
There's like, if you scoured the website,


00:06:44.340 --> 00:06:45.460
you might learn this.


00:06:45.460 --> 00:06:47.980
I just interviewed Samuel Colvin,


00:06:47.980 --> 00:06:49.740
who the creator and maintainer of Pydantic


00:06:49.740 --> 00:06:51.580
about Pydantic and all the cool stuff it does.


00:06:51.580 --> 00:06:53.180
So people who are listening to this


00:06:53.180 --> 00:06:54.940
probably may have just listened to that episode


00:06:54.940 --> 00:06:59.740
And FastAPI is a framework that absolutely takes Pydantic


00:06:59.740 --> 00:07:01.580
and puts it on the boundary, right?


00:07:01.580 --> 00:07:04.380
Like it's when data is exchanged with FastAPI,


00:07:04.380 --> 00:07:06.540
the most default way to do that


00:07:06.540 --> 00:07:09.340
is to somehow involve Pydantic models, right?


00:07:09.340 --> 00:07:10.500
- Yeah, yeah.


00:07:10.500 --> 00:07:12.980
And I mean, like, if you could think back to like Flask,


00:07:12.980 --> 00:07:15.820
Flask is like just a wrapper on top of, you know,


00:07:15.820 --> 00:07:18.660
WordSwig and not pronouncing that right,


00:07:18.660 --> 00:07:23.340
but WordSwig, Click and a couple others


00:07:23.340 --> 00:07:24.280
that are escaping me right now.


00:07:24.280 --> 00:07:25.960
but FastAPI is really just a wrapper.


00:07:25.960 --> 00:07:28.360
- It's dangerous and like a couple of them, yeah.


00:07:28.360 --> 00:07:30.840
- It's just a wrapper on top of, you know,


00:07:30.840 --> 00:07:34.160
Pydantic, OpenAPI, JSON, JSON Schema,


00:07:34.160 --> 00:07:35.480
you know, that sort of things.


00:07:35.480 --> 00:07:38.040
A few more like sort of modern tools like that.


00:07:38.040 --> 00:07:41.480
And so what makes FastAPI cool is that you can,


00:07:41.480 --> 00:07:44.080
it makes it easy to like hook into those two.


00:07:44.080 --> 00:07:45.560
So you can like leverage that


00:07:45.560 --> 00:07:47.760
and build plugins and whatnot.


00:07:47.760 --> 00:07:48.940
- Yeah.


00:07:48.940 --> 00:07:50.280
So you can say things like,


00:07:50.280 --> 00:07:52.480
here's my API endpoint that I expect somebody


00:07:52.480 --> 00:07:54.660
to send a JSON document to.


00:07:54.660 --> 00:07:57.840
Oh, and the argument to the document


00:07:57.840 --> 00:08:01.080
is just a Pydantic model, right?


00:08:01.080 --> 00:08:05.120
And then FastAPI will either successfully convert


00:08:05.120 --> 00:08:08.260
that model over or send something like a 400 or 422 back


00:08:08.260 --> 00:08:11.200
to say bad data, we can't convert it to what we're expecting.


00:08:11.200 --> 00:08:12.520
And on top of that,


00:08:12.520 --> 00:08:15.560
FastAPI then automatically generates the OpenAPI stuff,


00:08:15.560 --> 00:08:19.000
which you hinted at based on those models, right?


00:08:19.000 --> 00:08:20.240
- Yeah.


00:08:20.240 --> 00:08:21.680
Yeah, so you could throw that runtime,


00:08:21.680 --> 00:08:23.360
type checking that you were talking about.


00:08:23.360 --> 00:08:26.920
And so you're really abstracting that out all to Pydantic.


00:08:26.920 --> 00:08:28.960
And so you don't have to maintain a test suite


00:08:28.960 --> 00:08:29.880
around that either.


00:08:29.880 --> 00:08:32.720
And so it handles all of the error handling around that.


00:08:32.720 --> 00:08:37.720
It sends back a nice human and computer readable response.


00:08:37.720 --> 00:08:40.560
- Yeah, one of the things I like is if,


00:08:40.560 --> 00:08:42.600
so you've got a nested object,


00:08:42.600 --> 00:08:45.400
maybe I've got a Pydantic model


00:08:45.400 --> 00:08:48.960
and has a list of little baby Pydantic models.


00:08:48.960 --> 00:08:49.920
And then there's an error.


00:08:49.920 --> 00:08:52.840
The error would say the third thing in the list


00:08:52.840 --> 00:08:56.520
is where the problem is, not just there's some invalid data,


00:08:56.520 --> 00:08:58.920
but on this field, you've got a list,


00:08:58.920 --> 00:09:00.920
you've sent me a list of things, the third one,


00:09:00.920 --> 00:09:03.920
that's where that type conversion error is.


00:09:03.920 --> 00:09:07.320
It's really good about allowing you to drill out


00:09:07.320 --> 00:09:09.320
-of where the data is wrong. -Yeah.


00:09:09.320 --> 00:09:13.840
Okay, cool. So we've got the async and await stuff,


00:09:13.840 --> 00:09:16.440
which you said you don't use a lot, but if you need it,


00:09:16.440 --> 00:09:18.880
it's nice to have it, right? It's really there.


00:09:18.880 --> 00:09:22.420
We're going to talk about some of the places that plug into that in a moment.


00:09:22.420 --> 00:09:24.420
PyDandic, I think, is a big one.


00:09:24.420 --> 00:09:27.420
The OpenAPI stuff is a big one.


00:09:27.420 --> 00:09:29.680
And to me, also, deployment is just simple.


00:09:29.680 --> 00:09:33.180
As long as you've got uvicorn or gunicorn plus uvicorn,


00:09:33.180 --> 00:09:34.560
you're good to go.


00:09:34.560 --> 00:09:37.940
There's not a lot of other stuff you got to do on the server.


00:09:37.940 --> 00:09:40.400
Just gunicorn, fire this thing up,


00:09:40.400 --> 00:09:43.700
and maybe point Nginx, put Nginx in front of it.


00:09:43.700 --> 00:09:45.940
Yeah, definitely.


00:09:45.940 --> 00:09:48.700
I like how it doesn't have a development server.


00:09:48.700 --> 00:09:56.700
either. So you have to use UVI Corn in development. And I think that helps beginners that are


00:09:56.700 --> 00:10:02.140
new to web development conceptually understand that, hey, this development server is -- there's


00:10:02.140 --> 00:10:06.780
a difference here between this development server and this production server. Whereas


00:10:06.780 --> 00:10:11.820
like with Flask and with Django, where they give you a development WSGI server right out of the


00:10:11.820 --> 00:10:14.780
box, I think it's confusing. Because a lot of people are like, well, why do I need that? Why


00:10:15.660 --> 00:10:18.720
Why can't I use this instead of g-unicorn?


00:10:18.720 --> 00:10:20.660
- Exactly, and they always come with this warning.


00:10:20.660 --> 00:10:22.880
This is not a production server, please don't use this.


00:10:22.880 --> 00:10:24.080
And you're like, okay, well,


00:10:24.080 --> 00:10:26.800
what if I wanna test it for performance?


00:10:26.800 --> 00:10:28.720
Is it kinda like what I would expect?


00:10:28.720 --> 00:10:30.460
Is it really different?


00:10:30.460 --> 00:10:32.680
There's all these things, just make it run


00:10:32.680 --> 00:10:35.280
what you're gonna run in production anyway, right?


00:10:35.280 --> 00:10:36.520
- Yeah, yeah, definitely.


00:10:36.520 --> 00:10:40.040
- Pretty cool, okay, well, I think that's a pretty solid


00:10:40.040 --> 00:10:42.620
case for FastAPI.


00:10:44.520 --> 00:10:50.120
I do think it's probably its biggest parallel competitor type thing is probably Flask.


00:10:50.120 --> 00:10:53.560
You know, a lot of times people are using Django. They're trying to do a little bit more


00:10:53.560 --> 00:10:56.200
than maybe what they're doing with Flask.


00:10:56.200 --> 00:11:01.880
Flask has many, many plugins as well. So I don't know. What do you think about this?


00:11:01.880 --> 00:11:05.080
Do you see these working together? Would you use one instead of the other?


00:11:05.080 --> 00:11:10.200
It's interesting because I think last week, you know, Flask announced their 2.0.


00:11:10.920 --> 00:11:13.560
another 2.0 is going to have some async and await support.


00:11:13.560 --> 00:11:16.260
And that'll be interesting because the entire Flask,


00:11:16.260 --> 00:11:18.760
part of the power behind Flask is the ecosystem.


00:11:18.760 --> 00:11:21.060
Like you have just thousands of plugins.


00:11:21.060 --> 00:11:24.260
Some might argue that's like there's too many plugins,


00:11:24.260 --> 00:11:27.260
but regardless, there's a lot of different plugins there.


00:11:27.260 --> 00:11:30.960
And so are they all going to start migrating over


00:11:30.960 --> 00:11:32.920
and supporting async and await?


00:11:32.920 --> 00:11:34.120
What are they going to do?


00:11:34.120 --> 00:11:36.560
So I think that'll be interesting.


00:11:36.560 --> 00:11:39.800
But yeah, I would say there's obviously


00:11:39.800 --> 00:11:43.720
a lot of comparison type articles between Flask and FastAPI.


00:11:43.720 --> 00:11:47.320
I don't know. I try not to get into the either or


00:11:47.320 --> 00:11:50.600
type thinking and try and think of, you know, and in both, like they're both


00:11:50.600 --> 00:11:53.640
tools. I use all three. I like


00:11:53.640 --> 00:11:57.160
FastAPI for certain things. I use Django for other things and I use Flask


00:11:57.160 --> 00:12:00.040
for other things. And so, you know, it's just all about


00:12:00.040 --> 00:12:03.080
like the tool, you know, having the right tool for the


00:12:03.080 --> 00:12:08.280
job. Yeah, I would say that FastAPI is more, you know, similar to


00:12:08.280 --> 00:12:11.960
Flask then, you know, obviously is Django. And so it's probably going to be compared more


00:12:11.960 --> 00:12:17.240
to Flask. But I still think that there's like certain reasons that I would probably use Flask


00:12:17.240 --> 00:12:23.640
over FastAPI. Sure. That may well be because one of the plugins that you're talking about


00:12:23.640 --> 00:12:30.280
exactly nails the use case. Yeah. And I'm also going to have David and Phil on to talk about the


00:12:30.280 --> 00:12:35.720
Flask 2.0 release pretty soon. So that's, I think, you know, there's been this sort of like


00:12:35.720 --> 00:12:38.120
leapfrog thing is probably going to put Flask back.


00:12:38.120 --> 00:12:41.320
If not ahead of FastAPI and some of the cool features,


00:12:41.320 --> 00:12:44.680
it'll bring a lot of those features over, I would expect.


00:12:44.680 --> 00:12:46.760
It's also worth pointing out that like in Flask,


00:12:46.760 --> 00:12:49.160
you can still do cool stuff with say, Pydantic.


00:12:49.160 --> 00:12:51.800
You just need one extra line of code.


00:12:51.800 --> 00:12:54.600
The very first line of your API method could just be,


00:12:54.600 --> 00:13:00.360
model equals Pydantic thing star star request dot,


00:13:00.360 --> 00:13:04.360
get form or whatever the call is to get the form data


00:13:04.360 --> 00:13:07.400
that's been posted over or get the JSON data that's been posted over.


00:13:07.400 --> 00:13:09.400
And then run with it the same.


00:13:09.400 --> 00:13:12.740
Yeah, there's a nice Flask Pydantic plugin as well.


00:13:12.740 --> 00:13:17.640
So yeah, you can definitely use Pydantic inside of Flask.


00:13:17.640 --> 00:13:19.640
And then there's also like Flask REST X,


00:13:19.640 --> 00:13:24.400
which will give you nice open API slash Swagger type support as well.


00:13:24.400 --> 00:13:26.400
So if you want that out of the box.


00:13:26.400 --> 00:13:28.400
Interesting. Okay.


00:13:28.400 --> 00:13:30.400
Yeah, and a lot of this is awareness, right?


00:13:30.400 --> 00:13:33.120
Like knowing, oh, there's this thing that I can go get, right?


00:13:33.120 --> 00:13:37.840
knowing that I could get Flask, Pydantic, or the open API, so on.


00:13:37.840 --> 00:13:39.840
And that brings us to our main topic here.


00:13:39.840 --> 00:13:44.880
How do you discover these things and know that they're out there, right?


00:13:44.880 --> 00:13:53.200
It turns out there's actually a bunch of extension type libraries for FastAPI.


00:13:53.200 --> 00:13:55.920
I don't know there's an official plugin model for FastAPI,


00:13:55.920 --> 00:13:59.840
but certainly things built to make FastAPI better and add functionality to it, right?


00:14:01.920 --> 00:14:06.080
And so I learned about a lot of them from your awesome FastAPI list,


00:14:06.080 --> 00:14:11.520
but maybe just for a minute for people who are not aware of this whole trend of awesome lists,


00:14:11.520 --> 00:14:15.120
maybe just talk about awesome lists for us a little bit.


00:14:15.120 --> 00:14:17.440
Like what's the story? Where do these things come from?


00:14:17.440 --> 00:14:21.360
Yeah, I can't remember exactly when they started popping up.


00:14:21.360 --> 00:14:24.000
I feel like maybe like five years ago, something like that.


00:14:24.000 --> 00:14:28.000
But I mean, awesome lists is, I guess, just literally just a list of awesome things.


00:14:28.720 --> 00:14:32.400
In theory, it's contributed and maintained by the community.


00:14:32.400 --> 00:14:39.920
I mean, oftentimes what really happens is the main author becomes a dictator around that,


00:14:39.920 --> 00:14:46.640
which I think is totally fine. But yeah, I think there's thousands of different


00:14:46.640 --> 00:14:53.360
awesome lists out there. And so it's just... And you're at an awesome list. You're at a


00:14:53.360 --> 00:14:58.000
a meta awesome list of awesome lists type thing there.


00:14:58.000 --> 00:15:00.560
So it gets a little crazy.


00:15:00.560 --> 00:15:02.240
- It does get super, super meta.


00:15:02.240 --> 00:15:04.120
And it gets very specific as well.


00:15:04.120 --> 00:15:07.720
The one that probably people know best in the Python space


00:15:07.720 --> 00:15:12.080
is awesome-python.com, which is really general, right?


00:15:12.080 --> 00:15:14.320
I mean, there's Flask stuff and FastAPI stuff.


00:15:14.320 --> 00:15:17.720
There's zillions of other areas.


00:15:17.720 --> 00:15:19.960
And then there's all these offshoots like yours


00:15:19.960 --> 00:15:23.280
around FastAPI and Stumper Flask and so on.


00:15:23.280 --> 00:15:28.280
So when did you create your awesome FastAPI?


00:15:28.280 --> 00:15:30.120
It can't be more than two years ago, right?


00:15:30.120 --> 00:15:31.960
'Cause that's how long.


00:15:31.960 --> 00:15:34.960
- Yeah, I would say it must be like a year old,


00:15:34.960 --> 00:15:35.900
I would say.


00:15:35.900 --> 00:15:40.640
I can't remember when we launched the FastAPI course


00:15:40.640 --> 00:15:43.560
on test-driven, but it was like right around the same time.


00:15:43.560 --> 00:15:47.800
I think the list probably actually came out before that.


00:15:47.800 --> 00:15:50.680
'Cause the first blog posts on FastAPI came out


00:15:50.680 --> 00:15:52.080
in January of 2020.


00:15:52.080 --> 00:15:54.120
So it was definitely after that.


00:15:54.120 --> 00:15:56.800
- Yeah, really cool.


00:15:56.800 --> 00:15:57.820
Well, and I think, you know,


00:15:57.820 --> 00:16:00.220
it's FastAPI being around two years old,


00:16:00.220 --> 00:16:03.660
it takes a little while for these extra libraries


00:16:03.660 --> 00:16:05.240
to build up around it, right?


00:16:05.240 --> 00:16:07.800
And I definitely think it's gaining momentum.


00:16:07.800 --> 00:16:09.820
It was for the first time it showed up on,


00:16:09.820 --> 00:16:13.700
I think it was the PSF JetBrains survey for 2020.


00:16:13.700 --> 00:16:15.220
And it went straight to number three


00:16:15.220 --> 00:16:16.640
as the most popular web framework.


00:16:16.640 --> 00:16:19.480
It was really quite interesting how popular it,


00:16:19.480 --> 00:16:21.160
how quickly it became popular.


00:16:21.160 --> 00:16:24.540
To me, it's because it brings together these little pieces,


00:16:24.540 --> 00:16:28.980
each one that is kind of a neat, new, modern Python idea,


00:16:28.980 --> 00:16:32.900
like type hints, like Pydantic, like async and await,


00:16:32.900 --> 00:16:35.500
all those things, and you just bring it all together


00:16:35.500 --> 00:16:36.460
in one, and you're like, oh yeah,


00:16:36.460 --> 00:16:39.380
this has all the things that I care about, this is cool.


00:16:39.380 --> 00:16:42.220
All right, so your awesome list is broken down


00:16:42.220 --> 00:16:44.120
into a bunch of different categories,


00:16:44.120 --> 00:16:47.980
like third-party extensions, and then resources,


00:16:47.980 --> 00:16:50.380
including, say, a podcast episode like this one,


00:16:50.380 --> 00:16:53.420
and so on, and so on.


00:16:53.420 --> 00:16:55.700
So what I thought it'd be fun to do


00:16:55.700 --> 00:16:58.260
is let's just maybe go through some of those sections


00:16:58.260 --> 00:17:01.920
and highlight a couple of the tools or extensions


00:17:01.920 --> 00:17:04.640
or whatever that are really neat.


00:17:04.640 --> 00:17:06.220
- Yeah, that sounds great.


00:17:06.220 --> 00:17:08.720
- How about the FastAPI admin for the first one?


00:17:08.720 --> 00:17:09.560
(laughing)


00:17:09.560 --> 00:17:10.940
Sorry, I didn't mean to cut you off there, go ahead.


00:17:10.940 --> 00:17:13.680
- I was gonna say one of the reasons why I did create this


00:17:13.680 --> 00:17:16.540
is mainly for these third-party extensions


00:17:16.540 --> 00:17:17.780
for like listing these.


00:17:17.780 --> 00:17:22.220
So I think, you know, it's kind of Django packages at org


00:17:22.220 --> 00:17:24.660
really aggregates them really well for, you know,


00:17:24.660 --> 00:17:25.900
obviously for Django.


00:17:25.900 --> 00:17:29.720
I don't think there is one anymore for Flask.


00:17:29.720 --> 00:17:31.520
The main Flask docs used to have a list,


00:17:31.520 --> 00:17:33.580
but it just got out of control.


00:17:33.580 --> 00:17:36.140
But yeah, I think, you know, one of the powerful things


00:17:36.140 --> 00:17:38.660
is definitely the ecosystem and like these extensions.


00:17:38.660 --> 00:17:40.580
So I thought like, someone's got to like start this.


00:17:40.580 --> 00:17:44.100
So I took the helm.


00:17:44.100 --> 00:17:46.180
- Fantastic.


00:17:46.180 --> 00:17:48.580
All right, so the first one I think is pretty interesting


00:17:48.580 --> 00:17:50.740
is this FastAPI admin.


00:17:50.740 --> 00:17:52.300
Tell us about this.


00:17:52.300 --> 00:17:55.380
- Yeah, so if you're familiar with Django,


00:17:55.380 --> 00:17:57.540
like one of the powerful things that you get from Django


00:17:57.540 --> 00:18:01.240
right out of the box is a nice CRUD admin


00:18:01.240 --> 00:18:03.520
where you can interact with your models,


00:18:03.520 --> 00:18:06.620
your database models in sort of like a CRUD,


00:18:06.620 --> 00:18:08.140
GUI like fashion.


00:18:08.140 --> 00:18:10.280
And so you can add data,


00:18:10.280 --> 00:18:14.180
all of sort of the CRUD functionality right out of the box.


00:18:14.180 --> 00:18:16.680
so you don't have to jump into SQL.


00:18:16.680 --> 00:18:20.360
So yeah, this just mimics that same sort of behavior.


00:18:20.360 --> 00:18:22.700
- Very cool, very cool.


00:18:22.700 --> 00:18:24.660
Yeah, that's one of the main features of Django


00:18:24.660 --> 00:18:26.220
that I would see people using it for.


00:18:26.220 --> 00:18:27.380
- Yeah, yeah.


00:18:27.380 --> 00:18:33.860
- So yeah, so the idea is basically


00:18:33.860 --> 00:18:37.740
if I want to create users or mess with other tables,


00:18:37.740 --> 00:18:40.120
like here they have products and categories,


00:18:40.120 --> 00:18:42.500
and it's just like a grid type thing


00:18:42.500 --> 00:18:44.860
to add new ones, edit existing ones, right?


00:18:44.860 --> 00:18:45.700
- Yeah.


00:18:45.700 --> 00:18:48.660
Yeah, it's very straightforward, but yeah,


00:18:48.660 --> 00:18:51.140
it's not like, there's not really too much to say about it.


00:18:51.140 --> 00:18:53.260
It's not, you know, some super sexy interface


00:18:53.260 --> 00:18:54.800
or anything like that, but it is like,


00:18:54.800 --> 00:18:56.660
it just saves a lot of time.


00:18:56.660 --> 00:18:58.160
- Yeah, like one of the main features


00:18:58.160 --> 00:19:00.500
of the newer Django 3.2 maybe,


00:19:00.500 --> 00:19:03.140
was that there's now templating for its admin stuff


00:19:03.140 --> 00:19:05.220
to make it look all super cool.


00:19:05.220 --> 00:19:06.060
- Yeah.


00:19:06.060 --> 00:19:08.600
- But to be honest, I think one of the really important


00:19:08.600 --> 00:19:11.660
things is to make it easy for people to get started.


00:19:11.660 --> 00:19:12.500
- Yeah.


00:19:12.500 --> 00:19:13.780
- And you know, for me,


00:19:13.780 --> 00:19:15.980
if I had to build a little admin back end thing like this,


00:19:15.980 --> 00:19:18.900
like, all right, well, there's half a day,


00:19:18.900 --> 00:19:20.300
gotta do that to add in.


00:19:20.300 --> 00:19:22.100
But if you're starting new and you're like,


00:19:22.100 --> 00:19:24.460
okay, I got this page showing, but now I need to edit them.


00:19:24.460 --> 00:19:28.040
Oh no, like, this is gonna be such a pain, right?


00:19:28.040 --> 00:19:31.180
Having something like this, so you can just plug in


00:19:31.180 --> 00:19:33.980
would be, it'd be really helpful to say,


00:19:33.980 --> 00:19:36.460
oh, actually maybe I will choose FastAPI over,


00:19:36.460 --> 00:19:38.700
you know, Django rest framework, for example,


00:19:38.700 --> 00:19:41.420
potentially because it might have an admin, right?


00:19:41.420 --> 00:19:43.760
- Yeah, I think one of the negatives about this,


00:19:43.760 --> 00:19:45.680
and this is one of the negatives with Django,


00:19:45.680 --> 00:19:47.680
is a lot of people use it for stuff


00:19:47.680 --> 00:19:49.200
that is not intended to be used for.


00:19:49.200 --> 00:19:51.080
Like they try and create,


00:19:51.080 --> 00:19:53.040
make a consumer facing version of it.


00:19:53.040 --> 00:19:56.080
I think that's partly the impetus for the templates


00:19:56.080 --> 00:19:58.400
is to be able to do more stuff like that,


00:19:58.400 --> 00:20:00.360
which I think that is not,


00:20:00.360 --> 00:20:02.040
then you have to make everyone sort of an admin.


00:20:02.040 --> 00:20:04.040
I think that's a bad practice.


00:20:04.040 --> 00:20:06.520
- Yeah, it might lead to some problems.


00:20:06.520 --> 00:20:07.480
- Yeah, yeah.


00:20:07.480 --> 00:20:09.240
(laughing)


00:20:09.240 --> 00:20:12.480
- Yeah, Joe out there on the live stream says,


00:20:12.480 --> 00:20:14.760
does this include identity?


00:20:14.760 --> 00:20:17.900
Like, can I get a, I'm guessing,


00:20:17.900 --> 00:20:21.040
a restricted admin backend?


00:20:21.040 --> 00:20:23.160
- Yeah, I'm not sure.


00:20:23.160 --> 00:20:25.760
- We are gonna talk about other things


00:20:25.760 --> 00:20:28.480
that do include identity, and I suspect,


00:20:28.480 --> 00:20:30.520
I know I haven't plugged in,


00:20:30.520 --> 00:20:33.680
but there's probably some point where you write some bit


00:20:33.680 --> 00:20:36.600
of API endpoint maybe.


00:20:37.920 --> 00:20:41.420
I know there's got to be a way where you restrict access to it.


00:20:41.420 --> 00:20:43.220
Yeah.


00:20:43.220 --> 00:20:46.920
I mean, if it works, I haven't here, maybe that's it.


00:20:46.920 --> 00:20:49.820
I haven't used this particular one.


00:20:49.820 --> 00:20:52.520
I don't use tortoise and production.


00:20:52.520 --> 00:20:58.620
I last I looked at this, it didn't work with any other or Ms besides tortoise.


00:20:58.620 --> 00:21:02.120
But I know like the, if it's built similar to the, or designed like the


00:21:02.120 --> 00:21:06.220
Django or I'm the Django or, you know, it doesn't have like a concept of permissions.


00:21:06.520 --> 00:21:08.760
So it's just, it has like a super user.


00:21:08.760 --> 00:21:11.040
And so if you're super user access, you get access to it.


00:21:11.040 --> 00:21:14.400
So there's not really any, I think there's probably maybe some extensions you can use


00:21:14.400 --> 00:21:19.360
to like limit access, but yeah, it looks like permission true.


00:21:19.360 --> 00:21:21.920
You know, maybe there's like a concept of permissions here.


00:21:21.920 --> 00:21:26.200
- I'm thinking there's two places where you can put a little bit of protection here.


00:21:26.200 --> 00:21:29.560
One is this, where you say the URL is /admin.


00:21:29.560 --> 00:21:35.200
The URL could be /uuid out of some insane length, right?


00:21:35.200 --> 00:21:37.340
So it's not very guessable.


00:21:37.340 --> 00:21:39.640
And then this app secret, I suspect, is like,


00:21:39.640 --> 00:21:40.480
what is the secret?


00:21:40.480 --> 00:21:42.860
You know, knock, knock, what's the magic word sort of thing.


00:21:42.860 --> 00:21:44.040
And there's just one login for it.


00:21:44.040 --> 00:21:46.200
But you know, for the right type of app,


00:21:46.200 --> 00:21:47.800
that's probably good enough.


00:21:47.800 --> 00:21:50.300
- Yeah, you would definitely want to change


00:21:50.300 --> 00:21:51.340
that URL in production.


00:21:51.340 --> 00:21:53.680
You don't want a forward slash admin.


00:21:53.680 --> 00:21:56.120
People are just helping you with stuff like that.


00:21:56.120 --> 00:21:58.700
- Yeah, and I don't know if people out there


00:21:58.700 --> 00:21:59.960
in the audience have ever done this,


00:21:59.960 --> 00:22:03.380
but if you haven't, it's shocking.


00:22:03.380 --> 00:22:06.060
If you go and you just tail the log of your site,


00:22:06.060 --> 00:22:07.780
like the main request log,


00:22:07.780 --> 00:22:10.520
you'll just see like requests for all sorts of like weird,


00:22:10.520 --> 00:22:12.600
unrelated stuff.


00:22:12.600 --> 00:22:14.320
People just trying to guess to see if it exists.


00:22:14.320 --> 00:22:19.320
Like there's all sorts of requests for like wpadmin.php


00:22:19.320 --> 00:22:23.060
on my site and in Python,


00:22:23.060 --> 00:22:25.140
it has no admin thing like that whatsoever,


00:22:25.140 --> 00:22:27.700
but people are just going, is there this type of,


00:22:27.700 --> 00:22:30.120
is there, can I get and try a default password


00:22:30.120 --> 00:22:32.380
against a PHP admin backend,


00:22:32.380 --> 00:22:35.660
or try that for a Joomla backend


00:22:35.660 --> 00:22:38.200
and just start jamming on those things, right?


00:22:38.200 --> 00:22:41.660
And so having that URL, something that's just not default,


00:22:41.660 --> 00:22:43.860
while it's not a big piece of security,


00:22:43.860 --> 00:22:45.740
it dissuades the bots, I think.


00:22:45.740 --> 00:22:48.980
- Yeah, yeah, keeps the honest people honest.


00:22:48.980 --> 00:22:51.460
- Exactly, you wanna hack, you gotta do it for real.


00:22:51.460 --> 00:22:54.700
Okay, let's talk about authentication.


00:22:54.700 --> 00:22:56.460
There's a whole section on different types of things


00:22:56.460 --> 00:22:58.020
here, right?


00:22:58.020 --> 00:23:00.360
- Yeah, so the one that I like the best


00:23:00.360 --> 00:23:02.160
or the one that I've used the most,


00:23:02.160 --> 00:23:05.120
I guess I'd say is FastAPI users.


00:23:05.120 --> 00:23:07.440
And I think that's the most popular one.


00:23:07.440 --> 00:23:11.000
Yeah, yeah, this is it.


00:23:11.000 --> 00:23:13.680
So it uses all, like it uses JWT based auth,


00:23:13.680 --> 00:23:16.000
but you can also, instead of like, you know,


00:23:16.000 --> 00:23:18.880
like you can store your JWT wherever you want,


00:23:18.880 --> 00:23:22.340
but this also has like a session, you know,


00:23:22.340 --> 00:23:25.120
capability built into it where you can store the JWT


00:23:25.120 --> 00:23:26.320
in a cookie.


00:23:26.320 --> 00:23:30.960
a lot of times, you know, people are storing JOTS and local storage, which could lead to


00:23:30.960 --> 00:23:38.080
XSS type attacks or like open you up to like some, is it XSS or cross-site scripting? Or


00:23:38.080 --> 00:23:44.160
yeah, I always get those mixed up. But yeah, I thought that was cool. You don't see that a lot


00:23:44.160 --> 00:23:48.640
in like sort of like libraries that are like JOT based. Yeah, that's cool. Yeah, it has either a


00:23:48.640 --> 00:23:52.800
a cookie auth or a job auth backend, which is cool.


00:23:52.800 --> 00:23:54.660
And it also supports different ORMs.


00:23:54.660 --> 00:23:58.440
So if you'd like SQLAlchemy, you can do that.


00:23:58.440 --> 00:24:00.760
If you'd like MongoDB, you can do that.


00:24:00.760 --> 00:24:04.960
Tortoise or ORMR, which I haven't actually heard of before,


00:24:04.960 --> 00:24:07.660
but we'll probably talk about it in a minute anyway.


00:24:07.660 --> 00:24:09.040
But yeah, quite neat.


00:24:09.040 --> 00:24:10.600
And also OAuth2.


00:24:10.600 --> 00:24:12.720
- Yeah.


00:24:12.720 --> 00:24:13.640
- Yeah.


00:24:13.640 --> 00:24:16.360
So this is quite neat if you want to plug it in.


00:24:16.360 --> 00:24:18.760
It looks like a bunch of people have contributed to it.


00:24:18.760 --> 00:24:20.800
So it looks pretty lively.


00:24:20.800 --> 00:24:22.480
- Yeah, it's very popular.


00:24:22.480 --> 00:24:24.520
- Yeah, I mean, one thing people might wanna check out


00:24:24.520 --> 00:24:27.320
is the sneak package advisor.


00:24:27.320 --> 00:24:28.280
Have you seen this?


00:24:28.280 --> 00:24:31.280
Here.


00:24:31.280 --> 00:24:36.000
And you can put all sorts of different packages in here.


00:24:36.000 --> 00:24:38.040
So if you're like, this one or that one,


00:24:38.040 --> 00:24:42.400
and you could actually pull it up and have it tell you,


00:24:42.400 --> 00:24:44.060
maybe not always that quickly,


00:24:44.060 --> 00:24:46.860
the health of the, like, how popular is it?


00:24:46.860 --> 00:24:48.800
How healthy is its maintenance and its security


00:24:48.800 --> 00:24:50.660
and its sustainability and so on.


00:24:50.660 --> 00:24:52.900
So if you're like, oh, I got these two or three extensions


00:24:52.900 --> 00:24:54.460
that might be doing the same thing,


00:24:54.460 --> 00:24:57.620
it might be worth throwing into this sneak package advisor


00:24:57.620 --> 00:24:58.660
and get a sense for like, ah,


00:24:58.660 --> 00:25:01.620
this one seems a little stronger in terms of liveliness.


00:25:01.620 --> 00:25:04.780
- Is the popularity score, is it based on similar packages


00:25:04.780 --> 00:25:06.220
or just like kind of global?


00:25:06.220 --> 00:25:08.820
- Yeah, that's a good question.


00:25:08.820 --> 00:25:12.980
- 'Cause I can't imagine that there'd be a more popular


00:25:12.980 --> 00:25:13.820
- I think it's global.


00:25:13.820 --> 00:25:16.740
I'm pretty sure it's like a logarithmic global type thing


00:25:16.740 --> 00:25:18.820
because yeah, right.


00:25:18.820 --> 00:25:20.260
This is probably the most popular one.


00:25:20.260 --> 00:25:24.180
So what is it kind of, what's gonna beat it, right?


00:25:24.180 --> 00:25:28.980
But it's only 798 stars relative to like Flask users


00:25:28.980 --> 00:25:30.580
or something like that, right?


00:25:30.580 --> 00:25:31.420
Yeah.


00:25:31.420 --> 00:25:34.220
Yeah, I'd have to look and actually see.


00:25:34.220 --> 00:25:36.460
It does like show you similar packages.


00:25:36.460 --> 00:25:38.220
If you can find, sometimes it'll say,


00:25:38.220 --> 00:25:40.660
here's some other stuff that's like it, but anyway,


00:25:40.660 --> 00:25:41.980
I think that might be a good thing.


00:25:41.980 --> 00:25:46.420
Anyway, I think that might be something to like bring together with just awesome lists in general, right?


00:25:46.420 --> 00:25:49.100
Let's give me a chance to check these out and see how they're doing


00:25:49.100 --> 00:25:54.540
You've also got a flask enough FastAPI login based on the flask login


00:25:54.540 --> 00:25:57.580
They're both too similar and both words in the same place. Yeah


00:25:57.580 --> 00:26:03.620
Out off which is kind of cool. So like using off zero or


00:26:03.620 --> 00:26:08.780
AWS cognito or things like that if you're doing that anyway, that might be nice


00:26:11.300 --> 00:26:14.840
- Yeah, Office0, they just got bought by somebody,


00:26:14.840 --> 00:26:17.680
I feel like, Google or something like that, Facebook, yeah.


00:26:17.680 --> 00:26:19.720
- Yeah, I feel like they bought something else


00:26:19.720 --> 00:26:22.760
and then, you know, little fish, big fish, well.


00:26:22.760 --> 00:26:24.880
- Okta, I think Okta just bought them.


00:26:24.880 --> 00:26:27.240
- Yes, that's right, it was Okta, that's right.


00:26:27.240 --> 00:26:30.120
Another one I wanted to throw out there


00:26:30.120 --> 00:26:32.000
while we're in this section that I don't see here


00:26:32.000 --> 00:26:34.160
and I don't see anything that does this.


00:26:34.160 --> 00:26:37.720
Possibly, let's look at FastAPI security.


00:26:37.720 --> 00:26:41.320
Maybe this one does.


00:26:41.320 --> 00:26:43.640
It's not super documented over there.


00:26:43.640 --> 00:26:49.160
I feel like this throws some of the permissions in there


00:26:49.160 --> 00:26:51.520
that you would really want, but a place called.


00:26:51.520 --> 00:26:55.060
- Like open API type stuff.


00:26:55.060 --> 00:26:59.560
- More like the general OWASP stuff.


00:26:59.560 --> 00:27:03.720
If you check out secure, just how did they get this


00:27:03.720 --> 00:27:08.080
as the modern PyPI package name,


00:27:08.080 --> 00:27:09.520
just the word secure.


00:27:09.520 --> 00:27:14.420
But this one, it doesn't say that it plugs in with FastAPI,


00:27:14.420 --> 00:27:17.720
but it plugs in with Flask and Django and Pyramid


00:27:17.720 --> 00:27:20.360
and Court and Responder and Starlet.


00:27:20.360 --> 00:27:22.040
And Starlette is the foundation.


00:27:22.040 --> 00:27:23.400
So I think that it would actually.


00:27:23.400 --> 00:27:25.200
And what it does is it does things like


00:27:25.200 --> 00:27:29.240
it sets all the default header behaviors,


00:27:29.240 --> 00:27:32.840
like that the frame, you can't embed somebody else's,


00:27:32.840 --> 00:27:35.120
your site into somebody else's site


00:27:35.120 --> 00:27:39.240
and that cross-site scripting protection


00:27:39.240 --> 00:27:43.440
is set in certain types of cache policies and whatnot.


00:27:43.440 --> 00:27:45.640
And just by doing like one line of code


00:27:45.640 --> 00:27:49.140
over on against it, one or two lines,


00:27:49.140 --> 00:27:51.520
it'll automatically just like wrap every request


00:27:51.520 --> 00:27:52.360
with one of those.


00:27:52.360 --> 00:27:55.360
So that might also be interesting to think about


00:27:55.360 --> 00:27:56.200
in this regard.


00:27:56.200 --> 00:27:58.200
- Yeah, those headers can get confusing,


00:27:58.200 --> 00:28:00.700
especially if you're using like a single page application


00:28:00.700 --> 00:28:03.660
and you have to, if you're trying to use cookies


00:28:03.660 --> 00:28:06.380
or some sort of like session based auth


00:28:06.380 --> 00:28:07.860
or whatever at the same time,


00:28:07.860 --> 00:28:10.500
like it can get pretty complex on those headers.


00:28:10.500 --> 00:28:12.580
So yeah, that seems like a cool package.


00:28:12.580 --> 00:28:13.800
- Yeah, and if something new comes out


00:28:13.800 --> 00:28:15.820
that should be added that you don't pay attention to,


00:28:15.820 --> 00:28:17.700
but you happen to upgrade your package,


00:28:17.700 --> 00:28:21.500
maybe it'll bring like the new best practice along, right?


00:28:21.500 --> 00:28:22.980
Okay, so that's authentication.


00:28:22.980 --> 00:28:27.060
Databases, it's broken, you have it broken down into ORMs,


00:28:27.060 --> 00:28:30.960
query builders ODMs, which is for document databases,


00:28:30.960 --> 00:28:35.360
but it looks like a quick scan that document equal equal MongoDB for the moment.


00:28:35.360 --> 00:28:36.220
Yeah.


00:28:36.220 --> 00:28:39.860
And then there's other, which like JSON exchange and whatnot.


00:28:39.860 --> 00:28:43.660
Let's talk, let's talk ORMs first.


00:28:43.660 --> 00:28:46.660
Big, like you pointed out, big news for SQLAlchemy, right?


00:28:46.660 --> 00:28:51.460
Yeah, SQLAlchemy 1.4 was either last week or the week before.


00:28:51.460 --> 00:28:56.560
The change actually broke the FastAPI or actually broke the flask course,


00:28:56.560 --> 00:29:04.480
Because it requires the database uri to have postgresql as the name rather than just postgres and so, you know that broke broke the course


00:29:04.480 --> 00:29:10.400
So a little a little bit, you know, my courses too. It broke one of my fast agi courses because we were using async


00:29:10.400 --> 00:29:16.160
Uh, we were using the new one the async one, but then they said well you're using a driver that doesn't support async


00:29:16.160 --> 00:29:18.160
so we're going to throw an exception instead of


00:29:18.160 --> 00:29:20.800
Just work more slowly and like yeah


00:29:20.800 --> 00:29:25.200
Again, you had to put like a separate different driver in there and so on so


00:29:26.080 --> 00:29:28.880
Yeah, so we find out sometimes the hard way about these releases, but


00:29:28.880 --> 00:29:32.160
Yeah


00:29:32.160 --> 00:29:37.040
Yeah, so what's the big deal sql alchemy and then we got the sql alchemy plug in here


00:29:37.040 --> 00:29:45.200
Yeah, let's see. So I mean I haven't updated this like for specifically for like, anything new with sql alchemy


00:29:45.200 --> 00:29:47.520
So yeah, there's that fast api sql alchemy


00:29:47.520 --> 00:29:52.480
That'd be interesting to take a look at that one to see if like there's any has been any have there been any updates since?


00:29:52.480 --> 00:29:54.880
sql alchemy the new one


00:29:54.880 --> 00:29:56.120
- It looks like it hasn't been released.


00:29:56.120 --> 00:29:57.560
- It looks like, no.


00:29:57.560 --> 00:29:58.960
- Looks like it hasn't been touched yet.


00:29:58.960 --> 00:30:01.120
- Yeah, so maybe if you're looking to contribute,


00:30:01.120 --> 00:30:02.440
maybe there's something to be done here


00:30:02.440 --> 00:30:05.520
because SQLAlchemy used to not support async.


00:30:05.520 --> 00:30:07.720
The big thing with the SQLAlchemy 1.4,


00:30:07.720 --> 00:30:10.160
there's stuff which changes in the API


00:30:10.160 --> 00:30:11.840
to sort of move to something new.


00:30:11.840 --> 00:30:13.720
But the big one that's probably relevant here


00:30:13.720 --> 00:30:18.720
is SQLAlchemy now, as of 1.4, supports async and await.


00:30:18.720 --> 00:30:24.140
Like async, await, execute this query type of thing


00:30:24.600 --> 00:30:26.680
give me the objects back.


00:30:26.680 --> 00:30:28.040
You might not care at all about that,


00:30:28.040 --> 00:30:32.520
but if you're using async and await view or API endpoints


00:30:32.520 --> 00:30:34.800
and vast API, but you want to use SQLAlchemy,


00:30:34.800 --> 00:30:36.260
well, there goes your async, right?


00:30:36.260 --> 00:30:37.100
It's gone.


00:30:37.100 --> 00:30:37.940
'Cause one of the most important things


00:30:37.940 --> 00:30:40.840
to await upon is the database.


00:30:40.840 --> 00:30:43.380
And so now the new SQLAlchemy has that support.


00:30:43.380 --> 00:30:45.380
And I'm guessing this one,


00:30:45.380 --> 00:30:46.920
it probably doesn't support that, right?


00:30:46.920 --> 00:30:48.520
'Cause it just, it didn't exist.


00:30:48.520 --> 00:30:50.800
- Yeah. - But still, yeah.


00:30:52.120 --> 00:30:54.120
- Yeah, I'm not exactly sure.


00:30:54.120 --> 00:30:56.440
Like, let's see, Ed.


00:30:56.440 --> 00:30:58.620
- I'm sure it won't work because the sample right here


00:30:58.620 --> 00:31:01.360
is exactly the same code I had that broke.


00:31:01.360 --> 00:31:03.600
So it's not gonna work, but you know,


00:31:03.600 --> 00:31:05.720
it also is very possible to be quickly


00:31:05.720 --> 00:31:08.160
and easily updatable, I don't know.


00:31:08.160 --> 00:31:09.660
But people can check that out.


00:31:09.660 --> 00:31:13.000
I guess another one you've mentioned earlier is Tortoise.


00:31:13.000 --> 00:31:14.400
- Tortoise, yeah. - I haven't read anything


00:31:14.400 --> 00:31:15.640
with Tortoise, that's a story.


00:31:15.640 --> 00:31:18.280
Like database is supposed to be fast and here's a turtle.


00:31:18.280 --> 00:31:19.120
What's going on?


00:31:19.120 --> 00:31:21.800
(laughing)


00:31:21.800 --> 00:31:24.300
- Yeah, I mean, you know, naming is tough, right?


00:31:24.300 --> 00:31:26.040
(laughs)


00:31:26.040 --> 00:31:28.260
I would say like Tortoise is probably like


00:31:28.260 --> 00:31:31.380
the most popular one or like just the one that


00:31:31.380 --> 00:31:35.520
I've like seen the most use out of in terms of like,


00:31:35.520 --> 00:31:38.100
I've seen a lot of FastAPI projects.


00:31:38.100 --> 00:31:40.460
And so, yeah, I think Tortoise is one


00:31:40.460 --> 00:31:41.620
that's like leveraged a lot.


00:31:41.620 --> 00:31:43.360
Honestly, people use SQLAlchemy


00:31:43.360 --> 00:31:44.700
probably more than anything else.


00:31:44.700 --> 00:31:46.840
And they just like don't deal with async, you know,


00:31:46.840 --> 00:31:47.680
type stuff.


00:31:47.680 --> 00:31:50.460
But if you want async, you know, in a way, then yeah,


00:31:50.460 --> 00:31:53.900
I mean, Tortoise definitely has quite a bit of support there.


00:31:53.900 --> 00:31:57.980
- Yeah, you've got Pony ORM, Tortoise ORM,


00:31:57.980 --> 00:32:00.340
Peewee, I know Peewee has an async version.


00:32:00.340 --> 00:32:06.700
I know the Django people are working on an async ORM story,


00:32:06.700 --> 00:32:07.700
but it's not there yet.


00:32:07.700 --> 00:32:09.420
SQLAlchemy just got it.


00:32:09.420 --> 00:32:12.900
One of the things I like about this is they put just


00:32:12.900 --> 00:32:16.580
what seems like a pretty fair graph


00:32:16.580 --> 00:32:19.860
comparing all the different ORMs in terms of performance.


00:32:19.860 --> 00:32:24.860
And Tortoise ORM comes up pretty nice on like single inserts


00:32:24.860 --> 00:32:29.620
and whole updates, but there's also places


00:32:29.620 --> 00:32:31.360
where it's slower than other stuff.


00:32:31.360 --> 00:32:32.820
And they're just like, we're gonna put it all up there.


00:32:32.820 --> 00:32:35.660
And if you find it useful, here's what you get.


00:32:35.660 --> 00:32:39.540
- And Tortoise is similar to the Django ORM


00:32:39.540 --> 00:32:42.240
in the sense that it uses an active record type approach,


00:32:42.240 --> 00:32:45.540
more similar to PeeWee, whereas SQLAlchemy


00:32:45.540 --> 00:32:49.540
uses the escape me data mapper approach, I believe.


00:32:49.540 --> 00:32:51.740
- Yeah, yeah.


00:32:51.740 --> 00:32:53.220
- So that's confusing for people


00:32:53.220 --> 00:32:54.500
'cause you've got to create the session,


00:32:54.500 --> 00:32:56.620
then you do all this stuff and then you call commit


00:32:56.620 --> 00:32:58.140
and if you want to make changes


00:32:58.140 --> 00:33:00.340
and it's not that hard to deal with,


00:33:00.340 --> 00:33:01.540
but it is one of those things you're like,


00:33:01.540 --> 00:33:04.000
why, where do I get ahold of the session


00:33:04.000 --> 00:33:05.860
if I got ahold of objects and I want to update it?


00:33:05.860 --> 00:33:08.020
Like I do find the active record stuff


00:33:08.020 --> 00:33:11.580
for simple cases pretty handy, right?


00:33:11.580 --> 00:33:14.700
And it comes from Django as well in that style.


00:33:14.700 --> 00:33:15.540
- Yeah.


00:33:15.540 --> 00:33:17.020
- So it'd be felt real familiar.


00:33:17.020 --> 00:33:17.860
- Yeah.


00:33:17.860 --> 00:33:25.880
Yeah, very cool. Joe also out there says, "What's the most popular database to use with


00:33:25.880 --> 00:33:34.040
FastAPI?" Postgres, ExpressJS, Mongo, maybe is like another example of a pairing.


00:33:34.040 --> 00:33:37.000
Yeah, I would say Postgres.


00:33:37.000 --> 00:33:42.960
Yeah. I think generally speaking, if you're talking Python, it's Postgres if you're relational,


00:33:42.960 --> 00:33:45.960
And then you can also do a lot of things with MongoDB


00:33:45.960 --> 00:33:48.460
if you're not, that seems to be like the story.


00:33:48.460 --> 00:33:52.960
The important thing here is that you may care about async


00:33:52.960 --> 00:33:55.420
in a way, so then that limits the way in which you can talk


00:33:55.420 --> 00:33:59.260
to the things, but both Postgres and MongoDB


00:33:59.260 --> 00:34:01.260
have really good async stories.


00:34:01.260 --> 00:34:04.560
So I think that still holds for Flask API.


00:34:04.560 --> 00:34:06.060
- Does SQLite have any sort,


00:34:06.060 --> 00:34:07.760
like I don't know if you know this offhand,


00:34:07.760 --> 00:34:10.360
if SQLite has any sort of async support?


00:34:12.860 --> 00:34:16.200
the way you access it has important behaviors


00:34:16.200 --> 00:34:17.440
that are any different,


00:34:17.440 --> 00:34:22.140
but there's a new driver that allows it to integrate


00:34:22.140 --> 00:34:26.140
with an async event loop, asyncio event loop.


00:34:26.140 --> 00:34:27.540
So it won't block the loop,


00:34:27.540 --> 00:34:30.540
but basically it just means there's another thread waiting


00:34:30.540 --> 00:34:32.860
and you won't get like true scalability,


00:34:32.860 --> 00:34:35.660
but at least like if you're waiting on a query here


00:34:35.660 --> 00:34:37.460
and an external API there,


00:34:37.460 --> 00:34:38.900
they can both happen at the same time.


00:34:38.900 --> 00:34:40.140
But if you have a bunch of database calls,


00:34:40.140 --> 00:34:41.820
I think it just queues ups.


00:34:41.820 --> 00:34:42.660
- Yeah.


00:34:42.660 --> 00:34:45.100
Cool.


00:34:45.100 --> 00:34:45.920
All right.


00:34:45.920 --> 00:34:50.840
So Tortoise ORM, useful because down here somewhere,


00:34:50.840 --> 00:34:52.840
we probably have an await, I'm guessing.


00:34:52.840 --> 00:34:55.100
Here's the, you asked about the SQLite.


00:34:55.100 --> 00:34:56.300
Here's the SQLite library.


00:34:56.300 --> 00:34:59.940
AIO SQLite is the one that Mike Bayer was recommending.


00:34:59.940 --> 00:35:00.780
Yeah.


00:35:00.780 --> 00:35:04.620
But down here you can do, you know, await, create object,


00:35:04.620 --> 00:35:07.340
await, filter object dot first,


00:35:07.340 --> 00:35:10.860
like exactly what you want for simple access to.


00:35:10.860 --> 00:35:16.460
Yeah, I mean, if you're just doing like a quick select or delete or whatever it is,


00:35:16.460 --> 00:35:18.620
you're probably not going to get any sort of performance boost.


00:35:18.620 --> 00:35:21.780
But if you're doing a, for whatever reason, if you're doing a lot of different queries


00:35:21.780 --> 00:35:25.700
in a route handler that are not dependent on each other, or if you're like, you're doing


00:35:25.700 --> 00:35:30.900
more than one query that is very expensive, that's also not dependent on each other, then


00:35:30.900 --> 00:35:32.980
you might get a performance boost like this.


00:35:32.980 --> 00:35:36.420
Basically, the worse your database is, the better.


00:35:36.420 --> 00:35:38.940
Yeah, there you go.


00:35:38.940 --> 00:35:40.240
whatever benefit you're going to get,


00:35:40.240 --> 00:35:42.740
because async await is all about scaling,


00:35:42.740 --> 00:35:44.500
waiting and latency.


00:35:44.500 --> 00:35:46.960
So the more latency your database has,


00:35:46.960 --> 00:35:49.220
'cause you're doing slow queries


00:35:49.220 --> 00:35:51.240
or it's like cloud and far away or whatever,


00:35:51.240 --> 00:35:52.360
you're going to benefit from that.


00:35:52.360 --> 00:35:55.520
But if it's a one millisecond response time, who knows?


00:35:55.520 --> 00:35:56.360
All right.


00:35:56.360 --> 00:35:59.560
You also mentioned Gino, G-I-N-O.


00:35:59.560 --> 00:36:01.360
This is like literally the first time I'm seeing it.


00:36:01.360 --> 00:36:02.840
What is this?


00:36:02.840 --> 00:36:06.200
- Yeah, so Gino is from what I understand,


00:36:06.200 --> 00:36:09.000
It's more of like a full ecosystem.


00:36:09.000 --> 00:36:13.480
Yeah, so Gino is not ORM, it's like asynchronous ORM.


00:36:13.480 --> 00:36:16.120
So, but yeah, I mean, it is an ORM,


00:36:16.120 --> 00:36:19.800
but it also like, I believe there's a generator in here


00:36:19.800 --> 00:36:22.360
where you can build your project,


00:36:22.360 --> 00:36:26.760
you build like a scaffold out an entire like FastAPI app


00:36:26.760 --> 00:36:29.040
sort of like based on your models.


00:36:29.040 --> 00:36:31.480
- Yeah.


00:36:31.480 --> 00:36:33.720
- So similar to how the Rails like skeleton command works.


00:36:33.720 --> 00:36:35.160
I don't know if you're familiar with that at all,


00:36:35.160 --> 00:36:38.120
you can like scaffold out like a quick CRUD app.


00:36:38.120 --> 00:36:38.960
- Okay, cool.


00:36:38.960 --> 00:36:41.560
And it's one of these recursive acronyms.


00:36:41.560 --> 00:36:44.360
- Oh yeah, it is, yeah.


00:36:44.360 --> 00:36:48.640
- So it talks about having an async API


00:36:48.640 --> 00:36:50.200
on top of SQLAlchemy.


00:36:50.200 --> 00:36:55.200
I wonder how much importance that will have these days.


00:36:55.200 --> 00:36:57.040
But yeah, it sounds like it has other stuff


00:36:57.040 --> 00:36:58.720
like you talked about the whole community and stuff.


00:36:58.720 --> 00:36:59.640
So very cool.


00:36:59.640 --> 00:37:03.640
All right, what else is in here that we should talk about?


00:37:03.640 --> 00:37:04.720
There's a couple other ORMs.


00:37:04.720 --> 00:37:07.120
people can look at query builders.


00:37:07.120 --> 00:37:08.840
- I've used databases quite a bit.


00:37:08.840 --> 00:37:14.320
One difficult thing about databases is Googling.


00:37:14.320 --> 00:37:17.040
Is like, you try and Google any sort of like errors


00:37:17.040 --> 00:37:19.440
around databases, it's, you know,


00:37:19.440 --> 00:37:21.800
like who knows what's gonna come up, but yeah.


00:37:21.800 --> 00:37:23.960
I mean, this is like, you know, one that's,


00:37:23.960 --> 00:37:26.080
I think it's by this- - Was this originally done


00:37:26.080 --> 00:37:29.200
by Kenneth Wrights and then handed off?


00:37:29.200 --> 00:37:31.360
Or is this- - You know, I'm not sure.


00:37:31.360 --> 00:37:36.360
I think it's by the same team that does Starlet.


00:37:36.360 --> 00:37:38.720
Yeah, Tom Christie, that's escaped me there.


00:37:38.720 --> 00:37:39.560
Yeah. - Okay.


00:37:39.560 --> 00:37:40.920
- Yeah.


00:37:40.920 --> 00:37:41.860
- Cool.


00:37:41.860 --> 00:37:44.540
- Yeah, he does a lot of stuff.


00:37:44.540 --> 00:37:45.600
- I've had him on the show before.


00:37:45.600 --> 00:37:47.060
He's definitely a busy guy.


00:37:47.060 --> 00:37:47.900
That's awesome.


00:37:47.900 --> 00:37:51.320
Cool, so it's like a wrapper around SQLAlchemy Core


00:37:51.320 --> 00:37:54.360
that then will give you back like proper queries


00:37:54.360 --> 00:37:55.360
and stuff like that.


00:37:55.360 --> 00:37:58.480
- Yeah.


00:37:58.480 --> 00:37:59.760
- Nice, okay.


00:37:59.760 --> 00:38:00.760
All right, very nice.


00:38:00.760 --> 00:38:04.760
ODM's just, you know, really quick mentions


00:38:04.760 --> 00:38:09.760
as I was recently talking about Beanie on Python Bytes.


00:38:09.760 --> 00:38:10.760
Beanie's kind of cool.


00:38:10.760 --> 00:38:13.760
It's an async way to talk to MongoDB.


00:38:13.760 --> 00:38:15.760
It's an ODM object document mapper


00:38:15.760 --> 00:38:18.760
because there's no relations, not really.


00:38:18.760 --> 00:38:19.760
But what's interesting about that is,


00:38:19.760 --> 00:38:21.760
is one, it has an async option,


00:38:21.760 --> 00:38:23.760
and two, it's all about Pydantic.


00:38:23.760 --> 00:38:26.760
So you're normally you'd have like Django models


00:38:26.760 --> 00:38:27.760
or SQLAlchemy models, like,


00:38:27.760 --> 00:38:29.560
like Django models or SQLAlchemy models,


00:38:29.560 --> 00:38:32.600
like the models are Pydantic models


00:38:32.600 --> 00:38:34.060
that go to and from the database,


00:38:34.060 --> 00:38:36.240
which has an interesting possibility for integration


00:38:36.240 --> 00:38:38.920
back into the like return types and stuff


00:38:38.920 --> 00:38:42.180
that you would have say for a FastAPI.


00:38:42.180 --> 00:38:45.800
So anyway, that's if you're into it,


00:38:45.800 --> 00:38:47.220
that's potentially worth checking out.


00:38:47.220 --> 00:38:48.120
It's based on motor,


00:38:48.120 --> 00:38:51.880
which is the MongoDB official async driver for Python.


00:38:51.880 --> 00:38:54.960
- Yeah, the PR for that one came out, I think last week.


00:38:54.960 --> 00:38:56.600
And I heard about it maybe the week before.


00:38:56.600 --> 00:39:01.560
I don't know if that's like a new library beanie, but yeah, it's quite new because I was talking to


00:39:01.560 --> 00:39:04.920
Roman right I believe is the guy. Yeah, Roman, right?


00:39:04.920 --> 00:39:06.600
If I just read


00:39:06.600 --> 00:39:10.120
Roman, right is the guy who created this and when he did some stuff on it


00:39:10.120 --> 00:39:13.640
I talked about how I thought it was really cool to be using pydandic models and types


00:39:13.640 --> 00:39:20.840
But it needs indexes. And so he actually went and put a whole mechanism in for doing indexes


00:39:20.840 --> 00:39:23.160
I got to check them out. I guess that's just the example but


00:39:23.720 --> 00:39:27.400
a whole way in which you can put indexes in your models and stuff.


00:39:27.400 --> 00:39:29.400
Yeah, MongoDB indexes, perfect.


00:39:29.400 --> 00:39:34.360
So, pretty cool that it has that stuff built in.


00:39:34.360 --> 00:39:37.720
Yeah, it looks like it's coming on strong, so maybe that's a good one.


00:39:37.720 --> 00:39:39.720
Mongo engine is actually what I use over at Talk Python.


00:39:39.720 --> 00:39:42.120
But I don't believe it's async.


00:39:42.120 --> 00:39:45.400
I have suspicions it will never be async.


00:39:45.400 --> 00:39:49.880
It's super, super involved, and it doesn't seem to be changing real quickly.


00:39:49.880 --> 00:39:52.040
So I'm guessing that that's kind of where it is.


00:39:52.040 --> 00:39:53.540
- Yeah, that is cool.


00:39:53.540 --> 00:39:54.920
- I did, when I looked at this earlier,


00:39:54.920 --> 00:39:56.640
one thing I wasn't psyched about,


00:39:56.640 --> 00:40:00.080
I'd be interested to hear your thoughts on this, Michael.


00:40:00.080 --> 00:40:02.280
The way that it does this is at runtime.


00:40:02.280 --> 00:40:04.120
So, you know, you can run it at runtime,


00:40:04.120 --> 00:40:05.360
and you can run it at runtime,


00:40:05.360 --> 00:40:06.400
and you can run it at runtime,


00:40:06.400 --> 00:40:07.240
and you can run it at runtime,


00:40:07.240 --> 00:40:08.080
and you can run it at runtime,


00:40:08.080 --> 00:40:08.900
and you can run it at runtime,


00:40:08.900 --> 00:40:09.740
and you can run it at runtime,


00:40:09.740 --> 00:40:10.580
and you can run it at runtime,


00:40:10.580 --> 00:40:11.400
and you can run it at runtime,


00:40:11.400 --> 00:40:12.240
and you can run it at runtime,


00:40:12.240 --> 00:40:13.080
and you can run it at runtime,


00:40:13.080 --> 00:40:13.900
and you can run it at runtime,


00:40:13.900 --> 00:40:14.740
and you can run it at runtime,


00:40:14.740 --> 00:40:15.580
and you can run it at runtime,


00:40:15.580 --> 00:40:16.400
and you can run it at runtime,


00:40:16.400 --> 00:40:18.900
I'd be interested to hear your thoughts on this, Michael.


00:40:18.900 --> 00:40:22.700
The way that it does this is at runtime, right?


00:40:22.700 --> 00:40:26.200
So the way you get your SQLAlchemy model,


00:40:26.200 --> 00:40:29.100
you say, "Now I'm going to create a Pydantic user from my user


00:40:29.100 --> 00:40:32.400
by passing it to a function that does probably magic meta programming."


00:40:32.400 --> 00:40:35.200
And boom, out comes this type, Pydantic user.


00:40:35.200 --> 00:40:37.600
Right? And that's cool.


00:40:37.600 --> 00:40:40.800
But one thing I don't like about that style


00:40:40.800 --> 00:40:44.800
is the editors can't be very smart about helping you, right?


00:40:44.800 --> 00:40:46.300
Like, it doesn't know what the heck.


00:40:46.300 --> 00:40:51.820
Pydantic user can do or can be or, you know, auto complete and all that sort of stuff.


00:40:51.820 --> 00:40:56.700
So I feel like a lot of these sort of runtime converter things.


00:40:56.700 --> 00:41:01.380
I don't know, they let the good editors like PyCharm and VS Code down.


00:41:01.380 --> 00:41:01.900
What do you think?


00:41:01.900 --> 00:41:06.820
Yeah, I mean, is there a way to look at what it'll convert that down to?


00:41:06.820 --> 00:41:10.220
It'd be great if you could get it to like spit out.


00:41:10.220 --> 00:41:14.260
Yeah, actually, you run this one time and then you're good.


00:41:14.300 --> 00:41:17.660
I just want a way to go from 20 SQLAlchemy models


00:41:17.660 --> 00:41:20.040
to 20 hydraulic models.


00:41:20.040 --> 00:41:21.560
And then I'm gonna save that code and go with it


00:41:21.560 --> 00:41:22.920
or something like that would be cool.


00:41:22.920 --> 00:41:23.760
But--


00:41:23.760 --> 00:41:25.760
- So it must be cached sort of at some point.


00:41:25.760 --> 00:41:26.760
So like--


00:41:26.760 --> 00:41:27.860
- Yeah, yeah.


00:41:27.860 --> 00:41:32.200
- Yeah, that's interesting.


00:41:32.200 --> 00:41:33.840
- Yeah, I do think it's really powerful though,


00:41:33.840 --> 00:41:35.560
but it's just like, yeah, it's a little tricky


00:41:35.560 --> 00:41:37.680
to get help with what you're supposed to do, right?


00:41:37.680 --> 00:41:40.480
- 'Cause otherwise you have two different like model concepts


00:41:40.480 --> 00:41:42.320
like you have your model, like your database model,


00:41:42.320 --> 00:41:43.160
which is SQLAlchemy.


00:41:43.160 --> 00:41:44.520
then you have like sort of your model,


00:41:44.520 --> 00:41:46.280
which is more of like a schema,


00:41:46.280 --> 00:41:47.760
but PyDantec calls the models.


00:41:47.760 --> 00:41:51.160
And so like in my, you know, FastAPI code,


00:41:51.160 --> 00:41:52.440
I call them schemas.


00:41:52.440 --> 00:41:54.280
And so I have like a schemas.py file,


00:41:54.280 --> 00:41:55.720
and then I have a models.py file,


00:41:55.720 --> 00:41:57.160
which is the flask, you know,


00:41:57.160 --> 00:41:59.760
or sorry, I keep saying flask, but the--


00:41:59.760 --> 00:42:00.600
- I know, I do.


00:42:00.600 --> 00:42:02.600
It's so hard 'cause they're the same size word


00:42:02.600 --> 00:42:04.440
and they play a very similar way.


00:42:04.440 --> 00:42:06.040
(laughing)


00:42:06.040 --> 00:42:07.280
- Are they sponsoring this?


00:42:07.280 --> 00:42:09.320
(laughing)


00:42:09.320 --> 00:42:11.800
But yeah, I have two, like, yeah,


00:42:11.800 --> 00:42:14.240
Just having them combined together would make sense.


00:42:14.240 --> 00:42:16.420
But yeah, I get what you're saying about,


00:42:16.420 --> 00:42:18.320
you don't know exactly what that is until--


00:42:18.320 --> 00:42:20.360
- Yeah, if I go to one of those and say dot,


00:42:20.360 --> 00:42:22.960
it's like, it gives me nothing.


00:42:22.960 --> 00:42:23.940
- Yeah, yeah.


00:42:23.940 --> 00:42:26.920
- Cool, cool.


00:42:26.920 --> 00:42:29.840
Yeah, so Joe out there in the live stream says,


00:42:29.840 --> 00:42:31.280
would you recommend,


00:42:31.280 --> 00:42:32.840
what would you recommend as a DB driver


00:42:32.840 --> 00:42:37.240
instead of a Psycho PG2 for Postgres and FastAPI?


00:42:37.240 --> 00:42:39.200
You got a recommendation?


00:42:39.200 --> 00:42:40.960
- Well, if you're using synchronous,


00:42:40.960 --> 00:42:43.080
you wanna go with Psycho PG2, obviously,


00:42:43.080 --> 00:42:46.760
but if you're using the async, then it's gonna be Async PG.


00:42:46.760 --> 00:42:49.520
- Yeah, so there's a separate async one.


00:42:49.520 --> 00:42:50.640
Very cool.


00:42:50.640 --> 00:42:52.240
All right, let's talk about,


00:42:52.240 --> 00:42:53.920
did I just bag on code generators?


00:42:53.920 --> 00:42:55.200
Let's talk about code generators.


00:42:55.200 --> 00:42:56.480
(both laughing)


00:42:56.480 --> 00:42:58.640
Okay, 'cause they are valuable.


00:42:58.640 --> 00:43:00.040
One of the things that's super cool,


00:43:00.040 --> 00:43:02.800
like here I have a, here's a little site I built


00:43:02.800 --> 00:43:07.600
for a course, weather.talkpython.fm


00:43:07.600 --> 00:43:09.000
that lets you go and enter a city,


00:43:09.000 --> 00:43:11.040
and it'll tell you literally the real weather right now.


00:43:11.040 --> 00:43:15.260
Like for now in Portland, it's broken clouds


00:43:15.260 --> 00:43:17.600
within like a few moments, right?


00:43:17.600 --> 00:43:18.440
That's cool.


00:43:18.440 --> 00:43:19.420
And one of the things that's really nice though


00:43:19.420 --> 00:43:21.740
with all these things is you can go to slash docs


00:43:21.740 --> 00:43:23.920
and you get this cool documentation thing.


00:43:23.920 --> 00:43:27.300
And that's just where like your Pydantic model kicks in


00:43:27.300 --> 00:43:28.880
for the JSON schema response


00:43:28.880 --> 00:43:31.260
and all those cool things, right?


00:43:31.260 --> 00:43:33.440
So that's just FastAPI, that's amazing.


00:43:33.440 --> 00:43:37.740
But the next thing is the FastAPI code generator, right?


00:43:37.740 --> 00:43:42.040
- So this takes an open API file,


00:43:42.040 --> 00:43:45.660
and then it'll scaffold out your FastAPI app based on that.


00:43:45.660 --> 00:43:47.860
And so does that do all like the bi-dynamic models


00:43:47.860 --> 00:43:48.980
and whatnot?


00:43:48.980 --> 00:43:51.580
- I'm not sure if it does.


00:43:51.580 --> 00:43:52.420
- Or is it just do the endpoints?


00:43:52.420 --> 00:43:55.140
- It seems like it, it says the response model is pet.


00:43:55.140 --> 00:43:55.980
I think so.


00:43:55.980 --> 00:43:57.540
- From dot models import pets, yeah.


00:43:57.540 --> 00:44:00.500
- Yeah, so you pointed at that documentation,


00:44:00.500 --> 00:44:02.940
that slash docs that I was just talking about,


00:44:02.940 --> 00:44:06.820
and you say, here's some API specification.


00:44:06.820 --> 00:44:10.880
I want a FastAPI server implementation of that, boom.


00:44:10.880 --> 00:44:12.320
And you get it, right?


00:44:12.320 --> 00:44:14.800
- So you can sort of do like the document driven development.


00:44:14.800 --> 00:44:16.480
So then if you want to change your API,


00:44:16.480 --> 00:44:21.000
you change the open API doc.


00:44:21.000 --> 00:44:21.820
- Exactly, yeah.


00:44:21.820 --> 00:44:22.660
You can see right here,


00:44:22.660 --> 00:44:25.400
it is actually generating the Pydantic models


00:44:25.400 --> 00:44:28.320
and even the errors that it throws and so on.


00:44:28.320 --> 00:44:29.520
This is super cool.


00:44:29.520 --> 00:44:31.840
It even has support for say optional strings


00:44:31.840 --> 00:44:34.300
and default values versus non-optional strings.


00:44:34.300 --> 00:44:36.800
I like it.


00:44:36.800 --> 00:44:37.640
- That's cool.


00:44:37.640 --> 00:44:38.460
- I'm not sure I would use it


00:44:38.460 --> 00:44:40.080
'cause I don't find myself in a situation


00:44:40.080 --> 00:44:41.680
where I have that a lot,


00:44:41.680 --> 00:44:43.200
but if you wanted to do it,


00:44:43.200 --> 00:44:44.920
it seems like it would be really cool to have.


00:44:44.920 --> 00:44:49.280
All right, related to that is the other side of the story.


00:44:49.280 --> 00:44:52.720
I want to talk to an existing FastAPI.


00:44:52.720 --> 00:44:55.420
Probably this would work for any open API thing,


00:44:55.420 --> 00:44:58.880
I would guess, but it's called, it says it's for FastAPI.


00:44:58.880 --> 00:45:03.240
So, Jay, am I an IDE-friendly API client


00:45:03.240 --> 00:45:04.880
from an open API spec?


00:45:04.880 --> 00:45:13.840
This looks cool. Let's see some examples down here. It both supports async and synchronous


00:45:13.840 --> 00:45:20.160
clients. And I'm guessing it's using the similar example model because we have a pet here as


00:45:20.160 --> 00:45:24.200
well. So it generates the model, the Pydantic model that you're going to exchange with the


00:45:24.200 --> 00:45:27.520
server and all sorts of stuff. This is cool.


00:45:27.520 --> 00:45:31.760
So what does this generate exactly? It's during a client library to interact with the API?


00:45:31.760 --> 00:45:34.520
- Yeah, like, so instead of using requests to call the API


00:45:34.520 --> 00:45:37.840
and just putting bare dictionaries,


00:45:37.840 --> 00:45:40.160
it will actually generate the Pythonic models


00:45:40.160 --> 00:45:44.360
and it'll give you the API endpoints as functions


00:45:44.360 --> 00:45:46.800
instead of just request this URL.


00:45:46.800 --> 00:45:47.680
- Nice.


00:45:47.680 --> 00:45:49.640
Does that give you like Sphinx documentation


00:45:49.640 --> 00:45:50.480
and all that too?


00:45:50.480 --> 00:45:52.920
- I have no idea.


00:45:52.920 --> 00:45:54.280
- That would be cool.


00:45:54.280 --> 00:45:56.680
- Yeah, it's super cool though.


00:45:56.680 --> 00:45:58.520
It shows you how to basically take all that stuff


00:45:58.520 --> 00:45:59.360
and generate those.


00:45:59.360 --> 00:46:02.940
And it does say that it generates IDE-friendly ones.


00:46:02.940 --> 00:46:06.400
So it must export those and not do it at runtime,


00:46:06.400 --> 00:46:08.680
which those pet, you can see out right here,


00:46:08.680 --> 00:46:10.560
like from client.models import pet.


00:46:10.560 --> 00:46:12.200
So it generates the Python files


00:46:12.200 --> 00:46:15.160
and then you consume them instead of at runtime


00:46:15.160 --> 00:46:18.760
so that you get like auto-complete


00:46:18.760 --> 00:46:20.320
and type check-in and all that.


00:46:20.320 --> 00:46:22.280
- That's cool.


00:46:22.280 --> 00:46:23.200
- Yeah.


00:46:23.200 --> 00:46:25.320
Teddy out here on the live stream says,


00:46:25.320 --> 00:46:28.440
"What use case would you use FastAPI


00:46:28.440 --> 00:46:31.360
versus say Django REST framework?


00:46:31.360 --> 00:46:34.560
- It's kind of hard to compare the two.


00:46:34.560 --> 00:46:36.080
I mean, if you're already using Django,


00:46:36.080 --> 00:46:39.140
then yeah, obviously go Django REST framework.


00:46:39.140 --> 00:46:41.640
But yeah, in terms of, you know,


00:46:41.640 --> 00:46:45.440
Django plus Django REST framework versus FastAPI,


00:46:45.440 --> 00:46:48.260
you know, as always, it depends.


00:46:48.260 --> 00:46:49.720
You know, it just depends on what you're doing.


00:46:49.720 --> 00:46:51.320
It depends on the size of the API.


00:46:51.320 --> 00:46:53.040
It depends on if you need authentication.


00:46:53.040 --> 00:46:55.840
It depends, you know, if you want like, you know,


00:46:55.840 --> 00:46:58.040
the CRUD admin, you know, type stuff.


00:46:58.040 --> 00:47:00.120
It depends on what tools you're gonna be using


00:47:00.120 --> 00:47:01.780
to consume the API.


00:47:01.780 --> 00:47:04.720
If you want something that's tried and true


00:47:04.720 --> 00:47:05.800
and battle tested,


00:47:05.800 --> 00:47:08.040
I would go with Django and Django REST framework.


00:47:08.040 --> 00:47:10.360
If you want to play around with the new hotness


00:47:10.360 --> 00:47:11.840
and take advantage of,


00:47:11.840 --> 00:47:16.000
you sink and await and all the cool stuff that's coming out,


00:47:16.000 --> 00:47:18.160
then maybe check out FastAPI.


00:47:18.160 --> 00:47:19.120
- Yeah, I would certainly say,


00:47:19.120 --> 00:47:22.280
if you already have Django and you're already using it


00:47:22.280 --> 00:47:25.280
and just wanna plug into the same app and just keep rolling,


00:47:26.320 --> 00:47:28.680
probably just Django rest framework, right?


00:47:28.680 --> 00:47:31.080
Unless you really wanna commit to having multiple apps


00:47:31.080 --> 00:47:33.360
that you run separately and, I don't know,


00:47:33.360 --> 00:47:37.020
put behind Nginx through URL routing or something like that.


00:47:37.020 --> 00:47:40.840
Also, how much of the FastAPI features


00:47:40.840 --> 00:47:42.240
are you gonna use, right?


00:47:42.240 --> 00:47:43.720
If you don't care about async and await,


00:47:43.720 --> 00:47:45.400
and you don't care about the typing very much,


00:47:45.400 --> 00:47:46.840
and you don't care about the documentation,


00:47:46.840 --> 00:47:48.920
like, well, then it kinda comes down.


00:47:48.920 --> 00:47:51.000
But if like all of those things are super important to you,


00:47:51.000 --> 00:47:53.240
maybe breaking that out matters, I don't know.


00:47:53.240 --> 00:47:55.040
That's kinda my thought as well.


00:47:55.040 --> 00:47:55.880
- Yeah.


00:47:55.880 --> 00:47:56.720
- Yeah.


00:47:56.720 --> 00:47:59.120
- Is there anything that stands out as better?


00:47:59.120 --> 00:48:03.920
- No, I mean, it works well with Vue, React, Angular.


00:48:03.920 --> 00:48:05.960
- Vue.js is, 'cause it's Vue.js.


00:48:05.960 --> 00:48:08.400
(laughing)


00:48:08.400 --> 00:48:09.840
Cool, all right, another one here


00:48:09.840 --> 00:48:11.960
that I wanna talk about that's super neat


00:48:11.960 --> 00:48:13.480
is FastAPI Profiler.


00:48:13.480 --> 00:48:14.680
This looks really cool.


00:48:14.680 --> 00:48:18.960
So it's middleware.


00:48:18.960 --> 00:48:20.600
I mean, it's a middleware,


00:48:20.600 --> 00:48:23.600
but it's a middleware that's built on top of Vue.js.


00:48:23.600 --> 00:48:25.400
So it's middleware.


00:48:25.400 --> 00:48:29.160
I mean, you're the Django expert,


00:48:29.160 --> 00:48:31.180
certainly for the two of us here.


00:48:31.180 --> 00:48:32.020
Tell me how it works.


00:48:32.020 --> 00:48:32.880
I know in Pyramid,


00:48:32.880 --> 00:48:36.800
there's a debug toolbar you can turn on.


00:48:36.800 --> 00:48:39.560
And then one of the parts of that is show me the profile.


00:48:39.560 --> 00:48:43.040
Like when I request this page, where was my time spent?


00:48:43.040 --> 00:48:45.920
Show me my SQLAlchemy queries actually interlaced in there


00:48:45.920 --> 00:48:48.160
and so on, which is super cool.


00:48:48.160 --> 00:48:50.120
Django has something like that, right?


00:48:50.120 --> 00:48:52.240
- Yeah, Django has Django debug toolbar.


00:48:52.240 --> 00:48:56.560
as you had said, and it does, basically that works with your service-side templating


00:48:56.560 --> 00:49:01.840
to figure out with that specific template or with that specific route,


00:49:01.840 --> 00:49:07.120
how many different queries did it take to load this view.


00:49:07.120 --> 00:49:11.440
Right, if you've got the n+1 problem because you pass this thing and then you're all over


00:49:11.440 --> 00:49:15.760
touching the lazy loaded properties over and over and over, something like that.


00:49:15.760 --> 00:49:19.600
It's not going to detect n+1 issues for you, but you should be able to see them.


00:49:20.960 --> 00:49:24.040
- Why do I have a hundred queries on this page instead of two?


00:49:24.040 --> 00:49:26.500
That's jump out at you, right?


00:49:26.500 --> 00:49:27.340
- Yeah.


00:49:27.340 --> 00:49:30.640
- So this is, I'm guessing like that.


00:49:30.640 --> 00:49:33.900
- Yeah, I wonder where the output prints out at


00:49:33.900 --> 00:49:35.260
because with FastAPI,


00:49:35.260 --> 00:49:38.540
I usually don't have the server-side templating with it.


00:49:38.540 --> 00:49:42.260
So it's just like, just print out to the terminal or.


00:49:42.260 --> 00:49:43.980
- Yeah, it's worth pointing out that FastAPI


00:49:43.980 --> 00:49:45.820
does support Jinja.


00:49:45.820 --> 00:49:46.660
- Yeah.


00:49:46.660 --> 00:49:48.780
- But you gotta do a little extra work to make it do it.


00:49:48.780 --> 00:49:53.380
So it says this is really like a leveraging PI instrument


00:49:53.380 --> 00:49:54.340
from Joe Rick.


00:49:54.340 --> 00:49:57.900
And if you scroll down over on their repo, on his repo,


00:49:57.900 --> 00:49:59.980
there's a bunch of cool output.


00:49:59.980 --> 00:50:03.260
I think it might even open up, I don't know.


00:50:03.260 --> 00:50:04.660
I'm not sure exactly where it goes.


00:50:04.660 --> 00:50:07.220
It might, I think it saves it to like a profile file.


00:50:07.220 --> 00:50:08.860
So you get this like cool little view


00:50:08.860 --> 00:50:10.740
of like the profile output here.


00:50:10.740 --> 00:50:14.180
Even there's like a terminal version, which is, I don't know


00:50:14.180 --> 00:50:16.980
and like a rich colored terminal version,


00:50:16.980 --> 00:50:18.460
but there's a bunch of cool graphs and stuff.


00:50:18.460 --> 00:50:21.380
you can get, there's, I think I saw in here somewhere,


00:50:21.380 --> 00:50:24.100
you can open up a, yeah, you can open up


00:50:24.100 --> 00:50:27.500
some kind of like flame graph as well.


00:50:27.500 --> 00:50:28.660
- Oh, that's cool, yeah.


00:50:28.660 --> 00:50:29.560
- You can dig into it.


00:50:29.560 --> 00:50:31.860
So basically anything you can do with Pi Instrument,


00:50:31.860 --> 00:50:34.900
I think this is just a middleware wrapper


00:50:34.900 --> 00:50:37.820
that generates Pi Instrument stuff for you,


00:50:37.820 --> 00:50:40.340
which is, that's pretty cool.


00:50:40.340 --> 00:50:41.620
- Yeah, a lot of stuff is super powerful.


00:50:41.620 --> 00:50:43.620
Like you could probably take some of that stuff


00:50:43.620 --> 00:50:46.060
and tie it into your like integration type tests


00:50:46.060 --> 00:50:50.400
to ensure that, hey, I built this route, this view,


00:50:50.400 --> 00:50:52.300
it takes X amount of time.


00:50:52.300 --> 00:50:55.380
And now I wanna throw junior developer on my code,


00:50:55.380 --> 00:50:58.760
I wanna make sure, hey, there's not any performance loss.


00:50:58.760 --> 00:51:00.760
Then you can use some stuff like that


00:51:00.760 --> 00:51:04.200
to make sure that the number of queries


00:51:04.200 --> 00:51:06.820
don't all of a sudden triple,


00:51:06.820 --> 00:51:09.160
like the load time doesn't all of a sudden


00:51:09.160 --> 00:51:10.120
triple stuff like that.


00:51:10.120 --> 00:51:13.180
So tying that stuff into your test suite


00:51:13.180 --> 00:51:14.700
is super powerful.


00:51:14.700 --> 00:51:16.660
I do that with, there's a library called n+1


00:51:16.660 --> 00:51:18.500
that does that very same thing.


00:51:18.500 --> 00:51:20.140
- Yeah, yeah, very cool.


00:51:20.140 --> 00:51:21.580
Nice.


00:51:21.580 --> 00:51:23.060
I've heard of it, but I haven't used it.


00:51:23.060 --> 00:51:25.420
Another one I think that stands out is pretty interesting


00:51:25.420 --> 00:51:26.900
is FastAPI Mail.


00:51:26.900 --> 00:51:29.740
I mean, boring, but sending mail is one of those things


00:51:29.740 --> 00:51:30.980
that can take forever.


00:51:30.980 --> 00:51:35.180
Like I had one of these admin parts of my site.


00:51:35.180 --> 00:51:36.620
I had a way to like send an email


00:51:36.620 --> 00:51:38.900
to all the people in this class.


00:51:38.900 --> 00:51:40.300
Go.


00:51:40.300 --> 00:51:43.620
What, 20 seconds, 30 seconds, timed out.


00:51:43.620 --> 00:51:46.140
And it was going to like thousands of people.


00:51:46.140 --> 00:51:50.020
And the problem was it had sent hundreds of emails


00:51:50.020 --> 00:51:52.860
and then it timed out.


00:51:52.860 --> 00:51:56.620
So how do I resend that without sending a duplicate


00:51:56.620 --> 00:51:57.860
to the first half?


00:51:57.860 --> 00:51:59.300
- Maintain state there.


00:51:59.300 --> 00:52:00.820
- Yeah, and like, I don't really,


00:52:00.820 --> 00:52:02.700
like it's really hard to go back to figure out everyone


00:52:02.700 --> 00:52:04.820
who got it, but not, anyway, it was a huge pain.


00:52:04.820 --> 00:52:07.500
And I'm like, okay, sending a lot of emails kind of sucks.


00:52:07.500 --> 00:52:10.460
And so this one FastAPI mail is cool


00:52:10.460 --> 00:52:14.020
because email is one of those things


00:52:14.020 --> 00:52:15.220
that's like dreadfully slow.


00:52:15.220 --> 00:52:18.160
And this allows you to asynchronously send email messages


00:52:18.160 --> 00:52:19.320
in a super simple way.


00:52:19.320 --> 00:52:24.580
- So you're not using like SendGrid or SES or anything?


00:52:24.580 --> 00:52:26.420
- I was using SES at the time.


00:52:26.420 --> 00:52:29.540
But I was doing it, instead of like doing a bulk send,


00:52:29.540 --> 00:52:32.020
I said this customized email to that person,


00:52:32.020 --> 00:52:33.620
this customized email to that person.


00:52:33.620 --> 00:52:34.980
And like, I mean, it's fine


00:52:34.980 --> 00:52:37.980
if I even just set the timeout limit longer or whatever,


00:52:37.980 --> 00:52:39.100
it would have been fine.


00:52:39.100 --> 00:52:41.380
What I ended up doing is just putting that in the background queue


00:52:41.380 --> 00:52:42.420
and just let it go.


00:52:42.420 --> 00:52:43.380
That's how it should have been.


00:52:43.380 --> 00:52:45.340
It shouldn't have been as part of the request,


00:52:45.340 --> 00:52:47.780
but I learned the hard way the first time around.


00:52:47.780 --> 00:52:49.260
- How do you celery for that same exact thing?


00:52:49.260 --> 00:52:51.820
I mean, that just goes right to queue, yeah.


00:52:51.820 --> 00:52:53.500
- Perfect, yeah.


00:52:53.500 --> 00:52:55.180
So this one has an async.


00:52:55.180 --> 00:52:56.900
This makes, I mean, like you said,


00:52:56.900 --> 00:52:59.780
doing bulk sending on some kind of background thing


00:52:59.780 --> 00:53:00.780
is exactly what you should do.


00:53:00.780 --> 00:53:03.820
But if you're trying to not block your processing


00:53:03.820 --> 00:53:05.500
and you want to send an email, just one,


00:53:05.500 --> 00:53:07.060
like, "Hey, reset my password," right?


00:53:07.060 --> 00:53:09.540
that could be a thing you could just do right away.


00:53:09.540 --> 00:53:11.980
And so here's a way to await sending emails,


00:53:11.980 --> 00:53:13.080
which is kind of cool.


00:53:13.080 --> 00:53:17.180
- Yeah, if you don't really care too much


00:53:17.180 --> 00:53:18.540
about what happens to the email,


00:53:18.540 --> 00:53:19.940
like if you're not too concerned about,


00:53:19.940 --> 00:53:22.260
hey, if this doesn't get delivered, it's not a huge deal.


00:53:22.260 --> 00:53:24.300
I'd say like something like this is fine.


00:53:24.300 --> 00:53:27.320
If it's more like, you know,


00:53:27.320 --> 00:53:31.100
there's like any sort of like workflow based on,


00:53:31.100 --> 00:53:32.380
you know, what could happen there,


00:53:32.380 --> 00:53:34.700
like success, failure, you know, that sort of thing.


00:53:34.700 --> 00:53:36.460
Like if then this, that type stuff,


00:53:36.460 --> 00:53:38.480
You want to probably look more like towards salary,


00:53:38.480 --> 00:53:40.560
I would say, but I still think like,


00:53:40.560 --> 00:53:42.880
if you want to send like just a simple one-off email,


00:53:42.880 --> 00:53:45.000
maybe it's even to yourself or something like that.


00:53:45.000 --> 00:53:47.640
I do this like with FastAPI mails.


00:53:47.640 --> 00:53:50.900
I send myself notifications based on events


00:53:50.900 --> 00:53:52.920
and like, I don't necessarily need them.


00:53:52.920 --> 00:53:54.680
Like, you know, I'm not curing cancer here.


00:53:54.680 --> 00:53:56.440
So if I don't get it, I don't care.


00:53:56.440 --> 00:53:58.520
- Yeah, I have the same thing.


00:53:58.520 --> 00:54:00.120
I'll just shoot myself messages like,


00:54:00.120 --> 00:54:01.400
oh, here's the thing you should probably know


00:54:01.400 --> 00:54:02.520
about that happened.


00:54:02.520 --> 00:54:03.880
Very cool.


00:54:03.880 --> 00:54:06.780
Yeah, I have moved to SendGrid last month or two


00:54:06.780 --> 00:54:08.100
and really like it.


00:54:08.100 --> 00:54:09.200
- Yeah. - It's so big.


00:54:09.200 --> 00:54:12.400
Come back to normal size.


00:54:12.400 --> 00:54:16.480
So let's see, what else have we got here that's interesting?


00:54:16.480 --> 00:54:21.480
Then we got the obligatory utils, the catch all right.


00:54:21.480 --> 00:54:22.680
- Everything, yeah.


00:54:22.680 --> 00:54:25.040
Well-named, helpers.py.


00:54:25.040 --> 00:54:25.880
- Exactly.


00:54:25.880 --> 00:54:31.320
So we got Socket.io stuff, plugins, pagination.


00:54:31.320 --> 00:54:35.560
One I do, two that I'll call quick attention to


00:54:35.560 --> 00:54:37.800
that I think are neat in here.


00:54:37.800 --> 00:54:39.900
This is not an endorsement or saying I would use it,


00:54:39.900 --> 00:54:41.800
but I think I can see a real interesting use case.


00:54:41.800 --> 00:54:42.860
First, the cache one.


00:54:42.860 --> 00:54:47.440
Yeah, maybe tell us about this cache one here.


00:54:47.440 --> 00:54:50.280
- Yeah, so I haven't used this one exactly,


00:54:50.280 --> 00:54:53.120
but it looks like, yeah, it just is probably going to,


00:54:53.120 --> 00:54:56.200
probably cache at the route handler level.


00:54:56.200 --> 00:55:01.200
And it looks like it's caching the response


00:55:01.200 --> 00:55:04.840
based on the request parameters inside of Redis.


00:55:04.840 --> 00:55:07.840
One thing that's interesting here that it actually does,


00:55:07.840 --> 00:55:10.000
that I haven't seen in any of these examples yet,


00:55:10.000 --> 00:55:11.560
but it's certainly a FastAPI thing,


00:55:11.560 --> 00:55:14.360
is it uses dependency injection for the cache.


00:55:14.360 --> 00:55:17.000
So they've got a view method here,


00:55:17.000 --> 00:55:20.560
or API endpoint, I guess, called hello.


00:55:20.560 --> 00:55:25.080
And the params cache of type Redis cache backend


00:55:25.080 --> 00:55:28.160
equals the values depends on Redis cache.


00:55:28.160 --> 00:55:31.080
So it goes and finds the one instance of that


00:55:31.080 --> 00:55:35.640
and hands it off and it's like standard Redis key value type thing.


00:55:35.640 --> 00:55:37.640
Like, "Await, get the thing.


00:55:37.640 --> 00:55:39.640
The thing's not there, await, set the thing."


00:55:39.640 --> 00:55:42.040
You know, pretty standard.


00:55:42.040 --> 00:55:44.040
It's pretty cool, just the simple integration.


00:55:44.040 --> 00:55:47.040
Yeah, like dependency injection, I think,


00:55:47.040 --> 00:55:52.240
it's a pretty difficult concept if you look at it from a theoretical standpoint.


00:55:52.240 --> 00:55:56.800
But, you know, it's just like this object here


00:55:56.800 --> 00:55:59.720
is just taking this other object at runtime, you know, essentially.


00:55:59.720 --> 00:56:03.640
So it's just a way to like sort of split apart


00:56:03.640 --> 00:56:04.820
sort of your dependencies.


00:56:04.820 --> 00:56:06.760
And it makes testing a whole lot easier


00:56:06.760 --> 00:56:09.000
so you don't have to have like mocks all over the place.


00:56:09.000 --> 00:56:11.640
So you just switch out like the Redis cache


00:56:11.640 --> 00:56:13.840
for like in-memory cache or something like that.


00:56:13.840 --> 00:56:14.680
But I think--


00:56:14.680 --> 00:56:17.060
- You could pass anything that has a get and a set,


00:56:17.060 --> 00:56:18.320
you're good, right?


00:56:18.320 --> 00:56:19.800
- Yeah. (laughs)


00:56:19.800 --> 00:56:22.680
I think because of dependency injection,


00:56:22.680 --> 00:56:25.160
FastAPI, like you don't necessarily have to leverage it,


00:56:25.160 --> 00:56:28.200
but I think that if you are, it does take a little,


00:56:28.200 --> 00:56:30.920
Like you have to be a little bit more of a seasoned developer, I'd say,


00:56:30.920 --> 00:56:33.120
than someone that's just picking up Flask.


00:56:33.120 --> 00:56:35.360
Yeah, I totally agree about that.


00:56:35.360 --> 00:56:37.360
Dependency injection is one of those things like,


00:56:37.360 --> 00:56:39.360
"Oh, this is really cool and it makes things simpler."


00:56:39.360 --> 00:56:41.360
Why is it so complicated? What just happened?


00:56:41.360 --> 00:56:42.120
Yeah.


00:56:42.120 --> 00:56:43.120
You know, I don't know.


00:56:43.120 --> 00:56:46.320
When you start looking at Flask global objects,


00:56:46.320 --> 00:56:49.440
like, "Oh, that's complex."


00:56:49.440 --> 00:56:52.640
I'm thinking more of like the static languages like Java or C#


00:56:52.640 --> 00:56:55.400
where you've got an interface, one of these,


00:56:55.400 --> 00:56:56.960
and then a bunch of those registered,


00:56:56.960 --> 00:56:58.600
then like which one did it actually,


00:56:58.600 --> 00:57:00.720
like what concrete type am I even working with?


00:57:00.720 --> 00:57:02.480
Like, it can be a, I don't know,


00:57:02.480 --> 00:57:04.400
people can over pattern it, I guess.


00:57:04.400 --> 00:57:07.040
All right, speaking of not over patterning it,


00:57:07.040 --> 00:57:07.880
let's check this out.


00:57:07.880 --> 00:57:10.200
So I was talking at the Python,


00:57:10.200 --> 00:57:13.640
at the San Francisco Python meetup last night,


00:57:13.640 --> 00:57:14.800
and someone asked me,


00:57:14.800 --> 00:57:18.520
"Hey, is there a way in FastAPI to just like,"


00:57:18.520 --> 00:57:21.320
no, this was my office hours, same day though,


00:57:21.320 --> 00:57:22.640
and also video meeting.


00:57:22.640 --> 00:57:26.120
Anyway, somebody said, "Can I just take a database


00:57:26.120 --> 00:57:27.840
and make it like an API.


00:57:27.840 --> 00:57:33.240
Yes, this FastAPI dash CRUD router.


00:57:33.240 --> 00:57:34.480
It sounds amazing, right?


00:57:34.480 --> 00:57:39.840
So basically what you do is you tell it your models


00:57:39.840 --> 00:57:44.720
and the schemas, and then it just creates


00:57:44.720 --> 00:57:47.700
all these API endpoints to do restful things


00:57:47.700 --> 00:57:49.680
to that table through the model.


00:57:49.680 --> 00:57:53.200
So I have a get slash potato, potato was the model,


00:57:53.200 --> 00:57:55.340
get slash potato, that'll list them all.


00:57:55.340 --> 00:57:58.420
post a potato to slash potato will create one,


00:57:58.420 --> 00:58:03.140
delete, potato will get rid of all of them,


00:58:03.140 --> 00:58:06.060
delete potato slash ideal, delete that one and so on.


00:58:06.060 --> 00:58:10.220
So it just turns this into basically


00:58:10.220 --> 00:58:13.260
a series of FastAPI endpoints


00:58:13.260 --> 00:58:17.260
that are all the restful behaviors against your schemas.


00:58:17.260 --> 00:58:19.940
- You don't see it delete all very often.


00:58:19.940 --> 00:58:22.180
- Nope, nope, little Bobby T.


00:58:22.180 --> 00:58:24.540
- I wonder if this is how a Gino might be leveraging


00:58:24.540 --> 00:58:25.380
- Yeah.


00:58:25.380 --> 00:58:30.380
You know, to me, this feels overexposed,


00:58:30.380 --> 00:58:34.900
but if it's like something simple,


00:58:34.900 --> 00:58:37.260
something internal probably,


00:58:37.260 --> 00:58:38.660
yeah, maybe it makes sense to just go like,


00:58:38.660 --> 00:58:41.220
I just need to do that, but from JavaScript.


00:58:41.220 --> 00:58:42.060
- Yeah.


00:58:42.060 --> 00:58:43.140
- Can we just turn that on?


00:58:43.140 --> 00:58:46.100
But like I said, I probably would not turn that on


00:58:46.100 --> 00:58:47.340
'cause it scares me.


00:58:47.340 --> 00:58:49.020
Let's see, rate limiting.


00:58:49.020 --> 00:58:52.260
There's a couple of rate limiting things that are cool here.


00:58:52.260 --> 00:58:54.980
slow API and then what was the other one?


00:58:54.980 --> 00:58:56.340
FastAPI limiter.


00:58:56.340 --> 00:58:57.940
Those are cool.


00:58:57.940 --> 00:59:01.140
And that's pretty much it for the standard docs, right?


00:59:01.140 --> 00:59:03.660
Or standard extensions.


00:59:03.660 --> 00:59:05.540
And we've got the documentation.


00:59:05.540 --> 00:59:07.140
We've got some external resources,


00:59:07.140 --> 00:59:09.740
like some of the things that you have over at Test Driven.


00:59:09.740 --> 00:59:13.020
The podcasts you talked to, you mentioned,


00:59:13.020 --> 00:59:15.140
or somehow someone linked the Python bytes thing


00:59:15.140 --> 00:59:17.140
I had with Sebastian, I believe.


00:59:17.140 --> 00:59:21.100
- I'm starting to get to the point with this awesome list


00:59:21.100 --> 00:59:23.700
where it's like, I'm gonna probably have to like,


00:59:23.700 --> 00:59:25.460
curate the tutorials a little bit more


00:59:25.460 --> 00:59:27.560
because there's so many like new tutorials.


00:59:27.560 --> 00:59:29.100
Like when I started this,


00:59:29.100 --> 00:59:30.540
there were like three or four tutorials.


00:59:30.540 --> 00:59:33.300
And now there's like hundreds of them


00:59:33.300 --> 00:59:37.440
just based on the popularity of the framework.


00:59:37.440 --> 00:59:39.540
So getting a little bit smarter


00:59:39.540 --> 00:59:41.460
with curating the tutorials,


00:59:41.460 --> 00:59:46.140
like 'cause you don't need 15 different tutorials


00:59:46.140 --> 00:59:47.740
like showing how to build a CRUD app,


00:59:47.740 --> 00:59:49.300
that sort of thing.


00:59:49.300 --> 00:59:54.180
I did find this FastAPI for Flask users, super, super helpful


00:59:54.180 --> 00:59:57.380
because what it does, it says, you want to do this in Flask.


00:59:57.380 --> 00:59:58.780
Here's the FastAPI version.


00:59:58.780 --> 00:59:59.980
You want to do this in Flask.


00:59:59.980 --> 01:00:01.440
Here's the FastAPI version.


01:00:01.440 --> 01:00:02.820
And it just does like simple stuff.


01:00:02.820 --> 01:00:05.560
Like I want to, let me see if I can find some examples.


01:00:05.560 --> 01:00:07.980
I want to create a method that does post.


01:00:07.980 --> 01:00:09.060
Here's what it looks like there.


01:00:09.060 --> 01:00:12.820
Here's what it looks like in FastAPI and just side by side, sort


01:00:12.820 --> 01:00:15.100
of a cookbook type of thing.


01:00:15.100 --> 01:00:16.100
I like that a lot.


01:00:16.100 --> 01:00:18.860
So yeah, that's a good one.


01:00:18.860 --> 01:00:23.860
All right, we're just about out of time.


01:00:23.860 --> 01:00:27.060
Got a few moments left.


01:00:27.060 --> 01:00:28.960
I don't think we have time to go through all the tutorials


01:00:28.960 --> 01:00:31.460
and honestly, I haven't researched enough to talk about it.


01:00:31.460 --> 01:00:33.420
A couple of talks, which is cool.


01:00:33.420 --> 01:00:35.180
A couple of videos, which is cool.


01:00:35.180 --> 01:00:37.060
I'm sure there's probably some more out there


01:00:37.060 --> 01:00:38.820
on the internet that could overwhelm your list


01:00:38.820 --> 01:00:40.420
at this point.


01:00:40.420 --> 01:00:42.620
Courses, you and I, we've got a lock on it.


01:00:42.620 --> 01:00:46.100
- Yeah, I recognize a few of those names, right?


01:00:47.580 --> 01:00:50.580
There's three courses and now let's talk about yours first.


01:00:50.580 --> 01:00:56.660
- Yeah, so my course focuses on building just a RESTful API.


01:00:56.660 --> 01:00:59.700
It also focuses on heavily,


01:00:59.700 --> 01:01:01.700
obviously on test-driven development.


01:01:01.700 --> 01:01:06.620
I also focus on code formatting type tools


01:01:06.620 --> 01:01:09.900
like Black and Flake 8 and stuff like that.


01:01:09.900 --> 01:01:13.620
And so I also go into CI/CD with GitHub Actions


01:01:13.620 --> 01:01:15.140
and then everything is Dockerized


01:01:15.140 --> 01:01:17.440
and then you also deploy it to Heroku.


01:01:17.440 --> 01:01:24.440
Yeah, super cool. And I saw that both you and I are also sponsors of the FastAPI project and GitHub, which is pretty cool.


01:01:24.440 --> 01:01:29.940
Yeah, you're gold. I'm silver. I assume, you know, I assume you donate a few more bucks a month then?


01:01:29.940 --> 01:01:31.940
I guess so. I guess so.


01:01:31.940 --> 01:01:33.940
Yeah, how does that work?


01:01:33.940 --> 01:01:39.440
I don't call out to like say, oh, look how cool we are. I mean, I do see on the screen here, which sort of brought it to mind, but


01:01:40.940 --> 01:01:48.920
There's so many companies out there who are building major parts of their businesses on top of FastAPI and other projects.


01:01:48.920 --> 01:01:52.640
Like, GitHub has such a simple way to go press the sponsor button,


01:01:52.640 --> 01:01:58.720
support those things and make sure they have a nice, vibrant ecosystem, people backing them.


01:01:58.720 --> 01:02:02.100
You know, if we can do it, surely.


01:02:02.100 --> 01:02:02.760
Yeah.


01:02:02.760 --> 01:02:06.560
Bank of America, Chase, Microsoft, Google.


01:02:06.560 --> 01:02:08.100
Get in there.


01:02:08.100 --> 01:02:10.520
Anyway, that was more my pitch there.


01:02:10.520 --> 01:02:17.320
Yeah, I think more companies need to sort of call that just the cost of doing business.


01:02:17.320 --> 01:02:20.280
It's like we're resting on the shoulders of all these giants.


01:02:20.280 --> 01:02:24.840
We have this other remote team over here that we know nothing about and yet we're leveraging


01:02:24.840 --> 01:02:26.120
this team.


01:02:26.120 --> 01:02:30.760
And not all projects are curated or maintained by Google and Facebook either.


01:02:30.760 --> 01:02:35.560
And so, yeah, I think I'm not trying to push this in people's face like, "Hey, I'm better


01:02:35.560 --> 01:02:36.560
than you."


01:02:36.560 --> 01:02:43.280
"Hey, if I can do this, then yeah, I think a lot of companies should be thinking more and more about doing stuff like this."


01:02:43.280 --> 01:02:50.080
I totally agree. I think they should definitely see, we critically depend upon these technologies.


01:02:50.080 --> 01:02:52.480
Let's make sure that we do a little bit to support them.


01:02:52.480 --> 01:02:53.280
Yeah.


01:02:53.280 --> 01:02:56.320
Because a little bit for a lot of these companies would dramatically change it, right?


01:02:56.320 --> 01:03:02.880
If Flask got $2 million a year, that would fundamentally change that organization.


01:03:02.880 --> 01:03:05.560
And yet, given how many people use it,


01:03:05.560 --> 01:03:06.880
it would be nothing to the companies.


01:03:06.880 --> 01:03:09.000
And like, it wouldn't even show up almost, right?


01:03:09.000 --> 01:03:10.800
So I know there's a lot of complexity


01:03:10.800 --> 01:03:12.560
about how companies justify money


01:03:12.560 --> 01:03:14.480
and where it goes on the balance sheet and all that,


01:03:14.480 --> 01:03:17.400
but still, people encourage their companies


01:03:17.400 --> 01:03:18.680
to do stuff like that.


01:03:18.680 --> 01:03:21.240
All right, so this is a really cool course.


01:03:21.240 --> 01:03:23.580
I love the Docker angle of it as well.


01:03:23.580 --> 01:03:26.200
So nice, test-driven, how's that work?


01:03:26.200 --> 01:03:27.920
What's the story with that part?


01:03:27.920 --> 01:03:31.840
- Test-driven development?


01:03:31.840 --> 01:03:35.280
- Or like... - How's that plug in with like FastAPI?


01:03:35.280 --> 01:03:38.780
Like, are you doing like this dependency injection type stuff or like...


01:03:38.780 --> 01:03:42.480
I show both like sort of ways how to do tests.


01:03:42.480 --> 01:03:44.860
Like I show like how to mock everything.


01:03:44.860 --> 01:03:46.600
So if you want to like speed like your tests up,


01:03:46.600 --> 01:03:51.860
but I don't actually go into like all the dependency injection type stuff with the ORM.


01:03:51.860 --> 01:03:57.300
It gets a little bit too complex, I would say, especially with how Tortoise is set up.


01:03:57.300 --> 01:04:00.800
But yeah, I showed basically two different types of tests.


01:04:00.800 --> 01:04:03.980
like you can test it sort of like integration style


01:04:03.980 --> 01:04:05.400
where it's actually hitting the database


01:04:05.400 --> 01:04:08.920
or like you're using monkey patch to sort of mock out


01:04:08.920 --> 01:04:13.300
sort of the actual, the database layer.


01:04:13.300 --> 01:04:16.200
- Yeah, that sounds super cool and useful.


01:04:16.200 --> 01:04:17.040
All right.


01:04:17.040 --> 01:04:19.060
- It's also like what different between our two courses


01:04:19.060 --> 01:04:22.800
is like a like minor text-based and yours are.


01:04:22.800 --> 01:04:23.960
- All video based, yeah.


01:04:23.960 --> 01:04:25.560
- All video based, yes.


01:04:25.560 --> 01:04:28.240
- Yeah, I mean, there's source code on GitHub that's text,


01:04:28.240 --> 01:04:30.320
but that's not really text-based.


01:04:30.320 --> 01:04:32.000
- So yours are both then?


01:04:32.000 --> 01:04:33.360
- No, no, no, no, no, not really.


01:04:33.360 --> 01:04:34.960
It's all video based.


01:04:34.960 --> 01:04:37.840
So also, I mean, I didn't plan this ahead.


01:04:37.840 --> 01:04:39.440
I looked at it like, wow, you have my two courses,


01:04:39.440 --> 01:04:40.280
which is super cool.


01:04:40.280 --> 01:04:42.640
So I have two courses on here,


01:04:42.640 --> 01:04:44.320
modern APIs with FastAPI.


01:04:44.320 --> 01:04:45.520
And the idea is just like,


01:04:45.520 --> 01:04:50.520
let's build an API that uses Bidantic,


01:04:50.520 --> 01:04:52.160
that uses async and await,


01:04:52.160 --> 01:04:54.560
that has real live data, stuff like that.


01:04:54.560 --> 01:04:57.760
It's sort of the fundamentals of the FastAPI world.


01:04:57.760 --> 01:05:01.720
And then the other one is full web apps with FastAPI.


01:05:01.720 --> 01:05:06.720
So if you had already a Flask app or something like that,


01:05:06.720 --> 01:05:08.240
and you're like,


01:05:08.240 --> 01:05:10.040
I'd like to add some additional features to it.


01:05:10.040 --> 01:05:14.200
You could just plug in some API type thing to it,


01:05:14.200 --> 01:05:16.520
some RESTful API extension, and it goes.


01:05:16.520 --> 01:05:17.560
But if you're starting from scratch,


01:05:17.560 --> 01:05:19.920
you might create an API with FastAPI.


01:05:19.920 --> 01:05:22.780
Then you're like, well, I also wanted some HTML stuff.


01:05:22.780 --> 01:05:27.720
Could I actually add like a server side HTML story


01:05:27.720 --> 01:05:29.320
around this as well.


01:05:29.320 --> 01:05:31.200
So it shows you how to like create users,


01:05:31.200 --> 01:05:34.600
submit forms, validate data, use templates,


01:05:34.600 --> 01:05:35.480
all that kind of stuff.


01:05:35.480 --> 01:05:36.600
So kind of like,


01:05:36.600 --> 01:05:39.000
need a little bit more on the server side,


01:05:39.000 --> 01:05:41.560
a little more on the website, not just pure API,


01:05:41.560 --> 01:05:43.960
then like that would tell you how to do that.


01:05:43.960 --> 01:05:46.160
- So you're using server side templating for that?


01:05:46.160 --> 01:05:50.000
- Yeah, either Jinja2 or Chameleon, take your pick.


01:05:50.000 --> 01:05:50.840
- Okay.


01:05:50.840 --> 01:05:54.760
- Yeah, basically we recreate pypi.org and fastAPI.


01:05:54.760 --> 01:05:57.120
- So you're not doing a single page app


01:05:57.120 --> 01:06:00.920
and with Vue and React and Docker as a whole,


01:06:00.920 --> 01:06:02.840
then well, why not?


01:06:02.840 --> 01:06:04.640
- I know, I know. - You're not doing it right.


01:06:04.640 --> 01:06:05.760
- I'm totally doing it wrong though.


01:06:05.760 --> 01:06:08.440
I definitely would not be cool in the JavaScript world.


01:06:08.440 --> 01:06:10.160
And you know, it's not that I'm super against that,


01:06:10.160 --> 01:06:11.760
but I think that there's still a lot of value


01:06:11.760 --> 01:06:14.080
to having some of the stuff on server side.


01:06:14.080 --> 01:06:16.560
And then, you know, I don't know.


01:06:16.560 --> 01:06:18.680
I don't think everything has to be a spa, right?


01:06:18.680 --> 01:06:20.040
Single page app. - Yeah.


01:06:20.040 --> 01:06:22.200
Yeah, I was being sarcastic


01:06:22.200 --> 01:06:23.440
because that's stuff we do. - I know you were.


01:06:23.440 --> 01:06:25.000
I know you were. - Yeah, yeah.


01:06:25.000 --> 01:06:27.520
(laughing)


01:06:27.520 --> 01:06:30.520
So we were talking right before this,


01:06:30.520 --> 01:06:32.040
we realized we have our three classes here,


01:06:32.040 --> 01:06:33.000
our courses here,


01:06:33.000 --> 01:06:35.400
that we wanted to do some kind of special for people


01:06:35.400 --> 01:06:39.400
and a way to also to give back to FastAPI.


01:06:39.400 --> 01:06:40.560
I'll tell people what we came up with.


01:06:40.560 --> 01:06:42.160
Like this was not pre-planned until we were like,


01:06:42.160 --> 01:06:43.040
oh wait, why don't we,


01:06:43.040 --> 01:06:44.160
now we're looking at these three things here,


01:06:44.160 --> 01:06:45.160
let's do something.


01:06:45.160 --> 01:06:54.560
So we decided that we're going to sell these three classes


01:06:54.760 --> 01:06:56.080
as a bundle, not one off,


01:06:56.080 --> 01:06:58.460
but if you wanna take all three of these classes,


01:06:58.460 --> 01:07:03.540
we'll give you 50% off the price and 50% of that,


01:07:03.540 --> 01:07:06.040
50%, 50% of what you pay us,


01:07:06.040 --> 01:07:09.400
we'll go to support FastAPI directly.


01:07:09.400 --> 01:07:12.580
So we're gonna try to do a little fundraiser for FastAPI


01:07:12.580 --> 01:07:15.200
and do a little awareness for our courses.


01:07:15.200 --> 01:07:19.080
- Yeah, the courses kind of build into each other too.


01:07:19.080 --> 01:07:21.440
Like your core, your modern API is a FastAPI,


01:07:21.440 --> 01:07:23.160
I would recommend taking that first.


01:07:23.160 --> 01:07:25.920
And then sort of my course takes that to the next level.


01:07:25.920 --> 01:07:28.080
And then, you know, if you wanna learn how to like,


01:07:28.080 --> 01:07:30.760
hey, I want one of my routes to have like


01:07:30.760 --> 01:07:33.520
server-side templating so I can like serve up something


01:07:33.520 --> 01:07:34.960
to interact with API,


01:07:34.960 --> 01:07:39.080
then add the full web app course on top of that.


01:07:39.080 --> 01:07:40.240
- Yeah, I think so.


01:07:40.240 --> 01:07:42.880
So we don't have, because it's your course


01:07:42.880 --> 01:07:44.480
and my course is different platforms, all that,


01:07:44.480 --> 01:07:46.300
we don't have an official way to make this happen.


01:07:46.300 --> 01:07:48.760
So they just send you an email and say,


01:07:48.760 --> 01:07:51.920
hey, I'd like to do this bundle thing


01:07:51.920 --> 01:07:54.560
and we'll just make it happen behind the scenes, right?


01:07:54.560 --> 01:07:56.340
- Yeah, just shoot me a quick email,


01:07:56.340 --> 01:07:59.600
michael@testroom.io and I'll do all the hard work


01:07:59.600 --> 01:08:04.600
and link all that together and send and put the,


01:08:04.600 --> 01:08:06.380
probably just use Stripe for that,


01:08:06.380 --> 01:08:08.080
just send out a quick Stripe invoice


01:08:08.080 --> 01:08:10.140
and then yeah, we'll make it work behind the scenes


01:08:10.140 --> 01:08:14.180
and then get Sebastian, the FastAPI creator,


01:08:14.180 --> 01:08:18.240
the other 50% of that, so help support FastAPI.


01:08:18.240 --> 01:08:21.640
- Super cool, yeah, thanks for doing that together, Michael.


01:08:21.640 --> 01:08:22.480
That'd be fun.


01:08:22.480 --> 01:08:23.420
All right, now there's a couple of questions


01:08:23.420 --> 01:08:26.080
in the live chat before we wrap this up.


01:08:26.080 --> 01:08:31.080
I guess, let's go with this question from Joe real quick.


01:08:31.080 --> 01:08:32.680
Says, "I'm really happy with Flask.


01:08:32.680 --> 01:08:35.040
"Is there any reason for me to switch to FastAPI?"


01:08:35.040 --> 01:08:36.900
I mean, we've covered some of the reasons.


01:08:36.900 --> 01:08:39.460
I would point out before anyone out there listening


01:08:39.460 --> 01:08:43.640
makes that decision, if Flask 2.0 is coming out in a week,


01:08:43.640 --> 01:08:44.960
wait until that happens.


01:08:44.960 --> 01:08:48.280
And then look at what the modern Flask looks like.


01:08:48.280 --> 01:08:49.360
A lot of major stuff's coming,


01:08:49.360 --> 01:08:51.400
like async and await support and so on.


01:08:51.400 --> 01:08:56.400
- And yeah, I would say that's a hard no.


01:08:56.400 --> 01:08:58.560
No need, don't switch right away.


01:08:58.560 --> 01:09:01.240
Like spin up an app, like see if you like it,


01:09:01.240 --> 01:09:02.760
see if you enjoy it before like, you know,


01:09:02.760 --> 01:09:06.840
moving over, moving your application over to FastAPI.


01:09:06.840 --> 01:09:09.760
- Yeah, and then Teddy has another interesting question.


01:09:09.760 --> 01:09:12.880
Like, are we aware of any CMS-like projects


01:09:12.880 --> 01:09:14.240
building on top of FastAPI,


01:09:14.240 --> 01:09:16.220
similar to say Wagtail with Django?


01:09:16.220 --> 01:09:18.720
I don't know of any.


01:09:18.720 --> 01:09:20.720
- Yeah, I don't know any of it either.


01:09:20.720 --> 01:09:23.240
- The closest that I would say is like that thing


01:09:23.240 --> 01:09:25.600
I described with full web apps with FastAPI,


01:09:25.600 --> 01:09:28.520
which you can get the code from to the open public


01:09:28.520 --> 01:09:29.880
GitHub repo, you don't have to take the course


01:09:29.880 --> 01:09:31.240
to check it out.


01:09:31.240 --> 01:09:34.560
That does put like HTML views and stuff on top of it,


01:09:34.560 --> 01:09:35.400
but you're still there.


01:09:35.400 --> 01:09:37.800
It's more like what Flask does from scratch,


01:09:37.800 --> 01:09:40.360
not what Wagtail does from like, here's your CMS.


01:09:40.360 --> 01:09:41.960
So that's a very long ways from what you're asking,


01:09:41.960 --> 01:09:44.120
but it's as close as I know of.


01:09:44.120 --> 01:09:46.560
- Yeah, Wagtail is like in between WordPress


01:09:46.560 --> 01:09:48.080
and sort of Django.


01:09:48.080 --> 01:09:50.760
So it adds a lot on top of Django.


01:09:50.760 --> 01:09:53.560
So yeah, if you're looking for that sort of functionality,


01:09:53.560 --> 01:09:56.000
FastAPI is not gonna do that.


01:09:56.000 --> 01:09:58.640
I wouldn't even look for an extension out there for that.


01:09:58.640 --> 01:10:00.380
It's not the right tool.


01:10:00.380 --> 01:10:01.440
- Yeah, probably not.


01:10:01.440 --> 01:10:08.200
Dominus asks, what's the best platform to deploy FastAPI?


01:10:08.200 --> 01:10:11.920
- Yeah, so you can deploy it really sort of anywhere.


01:10:11.920 --> 01:10:14.040
It kind of gets into the hosting section there.


01:10:14.040 --> 01:10:15.280
So if you want to scroll down there.


01:10:15.280 --> 01:10:19.360
Yeah, yeah, we're like on the cusp of it, but we don't have time to go deep into it.


01:10:19.360 --> 01:10:24.800
Yeah, so yeah, I mean, if you containerize it, you can obviously deploy it wherever I deploy like,


01:10:24.800 --> 01:10:29.440
to Heroku. It's very simple to deploy containerized apps there.


01:10:29.440 --> 01:10:37.360
EC2, DigitalOcean as an app platform, you know, it's a platform as a service, it's similar to Heroku


01:10:37.360 --> 01:10:42.880
now. So yeah, I mean, really, wherever you like to do your deployments, you know, FastAPI,


01:10:43.440 --> 01:10:45.440
with like totally fine.


01:10:45.440 --> 01:10:49.520
There's even some serverless stuff that you point out in your list there right further down.


01:10:49.520 --> 01:10:54.120
Certainly on the infrastructure to service,


01:10:54.120 --> 01:10:57.000
Nginx, G-Unicorn,


01:10:57.000 --> 01:11:01.160
particularly running u-vehicorn workers.


01:11:01.160 --> 01:11:05.040
So you get the async support, which is like a special flag you can pass to G-Unicorn.


01:11:05.040 --> 01:11:08.720
And then let's encrypt for SSL and you're golden.


01:11:08.720 --> 01:11:12.720
Yeah, and I run an awesome flask


01:11:12.720 --> 01:11:14.820
you know, repo as well.


01:11:14.820 --> 01:11:17.800
And I literally copied and pasted this from Flask.


01:11:17.800 --> 01:11:20.720
So it's like, I mean, all of this is just agnostic.


01:11:20.720 --> 01:11:22.720
- Yeah, yeah, very cool.


01:11:22.720 --> 01:11:25.520
And Joe actually gave a call out to that earlier saying,


01:11:25.520 --> 01:11:27.000
"I just starred your live and realized


01:11:27.000 --> 01:11:29.400
you're the same guy that does the awesome Flask thing."


01:11:29.400 --> 01:11:30.320
- Yeah, there we go.


01:11:30.320 --> 01:11:31.480
(laughing)


01:11:31.480 --> 01:11:32.320
- Fantastic.


01:11:32.320 --> 01:11:36.120
All right, well, I think we're quite out of time here,


01:11:36.120 --> 01:11:40.280
Michael, but super fun, super fun stuff to talk about.


01:11:40.280 --> 01:11:41.120
Really helpful.


01:11:41.120 --> 01:11:42.280
I just love these awesome lists


01:11:42.280 --> 01:11:45.920
because not only do you learn about all these cool things


01:11:45.920 --> 01:11:50.920
like some of the plugins like FastAPI, SQLAlchemy


01:11:50.920 --> 01:11:54.320
but then also things that those are using.


01:11:54.320 --> 01:11:56.000
It's just such a cool exploration


01:11:56.000 --> 01:11:57.600
of all these different libraries


01:11:57.600 --> 01:11:58.980
and things that are out there, right?


01:11:58.980 --> 01:12:02.380
Like Beanie, for example, I didn't know about Beanie


01:12:02.380 --> 01:12:03.260
but now I discovered it


01:12:03.260 --> 01:12:06.300
even though I wasn't looking for that in particular.


01:12:06.300 --> 01:12:08.180
- Yeah, I don't know how many times I see on Reddit


01:12:08.180 --> 01:12:10.960
like people asking, well, hey, what should I use for Auth?


01:12:10.960 --> 01:12:12.680
what should I use for this?


01:12:12.680 --> 01:12:15.760
And it's like, well, I mean, yeah, I mean, here's a list.


01:12:15.760 --> 01:12:17.960
Here's a concise list of all the different things out there.


01:12:17.960 --> 01:12:19.760
It might not cover everything


01:12:19.760 --> 01:12:21.680
'cause there's obviously other things out there,


01:12:21.680 --> 01:12:25.200
but it's definitely nice to come to something like this


01:12:25.200 --> 01:12:30.200
versus searching PyPI with FastAPI- basically.


01:12:30.200 --> 01:12:32.120
- Exactly, exactly.


01:12:32.120 --> 01:12:35.040
One of the big challenges we have in the Python space,


01:12:35.040 --> 01:12:37.940
which is kind of the opposite of some places,


01:12:37.940 --> 01:12:39.480
like say the Microsoft world,


01:12:39.480 --> 01:12:41.040
where they're like, here's your ORM,


01:12:41.040 --> 01:12:42.100
here's your web framework.


01:12:42.100 --> 01:12:43.880
You go build with that, have a good time.


01:12:43.880 --> 01:12:46.360
We have the exact opposite of,


01:12:46.360 --> 01:12:48.240
there's a thousand flowers blooming


01:12:48.240 --> 01:12:50.480
in each level of the stack.


01:12:50.480 --> 01:12:51.320
- Yeah.


01:12:51.320 --> 01:12:52.140
- It's a paradox of choice.


01:12:52.140 --> 01:12:54.080
Did you notice, as a newcomer,


01:12:54.080 --> 01:12:56.360
I don't think it feels like amazing.


01:12:56.360 --> 01:12:57.200
Look at all these choices.


01:12:57.200 --> 01:12:58.760
It feels like overwhelming.


01:12:58.760 --> 01:13:00.160
What do I do?


01:13:00.160 --> 01:13:01.000
- Yeah.


01:13:01.000 --> 01:13:01.820
- Right.


01:13:01.820 --> 01:13:03.000
I think awesome lists like the one you created


01:13:03.000 --> 01:13:05.880
are helpful to really narrow it down to a couple.


01:13:05.880 --> 01:13:06.720
Go make a pick and just run with it.


01:13:06.720 --> 01:13:09.160
- A lot of the Ruby and Rails folks,


01:13:09.160 --> 01:13:10.440
when they come over to the Python space,


01:13:10.440 --> 01:13:11.960
they're like, well, there's more than one,


01:13:11.960 --> 01:13:13.600
there's more than one ORM.


01:13:13.600 --> 01:13:14.440
- Yeah.


01:13:14.440 --> 01:13:15.920
- Well, which one do I use?


01:13:15.920 --> 01:13:18.360
Well, I don't know, ask DHH, I guess.


01:13:18.360 --> 01:13:19.600
- Yeah, exactly, what are you doing?


01:13:19.600 --> 01:13:20.560
What are you doing?


01:13:20.560 --> 01:13:22.480
Yeah, very cool.


01:13:22.480 --> 01:13:24.360
All right, well, I guess we're down to


01:13:24.360 --> 01:13:26.560
the final two questions before I let you out of here.


01:13:26.560 --> 01:13:28.860
I'll see if this has changed since last time.


01:13:28.860 --> 01:13:31.640
So if you're gonna write some code,


01:13:31.640 --> 01:13:33.040
what editor do you use?


01:13:33.040 --> 01:13:37.880
- So I approached this question a little different


01:13:37.880 --> 01:13:40.860
'cause you asked me favorite editor and I said, idle


01:13:40.860 --> 01:13:43.240
because I don't use idle, obviously,


01:13:43.240 --> 01:13:45.880
but it has a special place in my heart


01:13:45.880 --> 01:13:48.200
'cause that's where I learned Python was idle.


01:13:48.200 --> 01:13:51.320
And thought is like sort of like in between


01:13:51.320 --> 01:13:54.480
like a VS Code or a PyCharm and idle,


01:13:54.480 --> 01:13:57.360
sort of like if you're gonna learn like on idle,


01:13:57.360 --> 01:13:58.720
like today, check out Thonny.


01:13:58.720 --> 01:14:01.160
It like adds like some debugging like type tools


01:14:01.160 --> 01:14:03.320
and it's like a lot prettier to look at.


01:14:03.320 --> 01:14:07.640
- Yeah, super interesting.


01:14:07.640 --> 01:14:10.600
It's like sort of like a notebook,


01:14:10.600 --> 01:14:13.800
sort of like a proper like auto-complete editor.


01:14:13.800 --> 01:14:15.640
And it looks a little bit like IDLE.


01:14:15.640 --> 01:14:16.680
Yeah. How interesting.


01:14:16.680 --> 01:14:17.800
- Yeah. Yeah.


01:14:17.800 --> 01:14:18.640
- Yeah. Cool.


01:14:18.640 --> 01:14:19.480
Okay. Yeah.


01:14:19.480 --> 01:14:20.320
I haven't thought about that one for a while.


01:14:20.320 --> 01:14:21.160
That's cool.


01:14:21.160 --> 01:14:23.560
- Don't use this on a daily basis though.


01:14:23.560 --> 01:14:27.760
So I definitely use VS Code on a daily basis.


01:14:27.760 --> 01:14:32.600
So I'm not coding in the IDLE.


01:14:32.600 --> 01:14:33.960
Like what does IDLE stand for?


01:14:33.960 --> 01:14:35.720
Integrated Development and Learning Environment.


01:14:35.720 --> 01:14:38.040
Yeah, don't use that on a daily basis.


01:14:38.040 --> 01:14:38.880
- Exactly.


01:14:38.880 --> 01:14:42.240
I use Scratch for my architecture design diagrams.


01:14:42.240 --> 01:14:43.320
- Yeah, there you go.


01:14:43.320 --> 01:14:45.460
- Yeah, and then notable PyPI package.


01:14:45.460 --> 01:14:48.480
- So I've been using for docstrings,


01:14:48.480 --> 01:14:51.780
I've been using Flake 8 docstrings to lint my docstrings


01:14:51.780 --> 01:14:53.800
and that has helped me.


01:14:53.800 --> 01:14:56.280
You know, I use like the sort of the Google,


01:14:56.280 --> 01:14:57.920
you know, flavor of docstrings


01:14:57.920 --> 01:15:00.860
and that has helped me adhere to that a little bit better.


01:15:02.640 --> 01:15:05.720
Also, I wanna give a shout out to Hotwire Django.


01:15:05.720 --> 01:15:10.720
So Hotwire comes from sort of the Rails sort of world,


01:15:10.720 --> 01:15:16.480
but this is like essentially HTML served over WebSockets.


01:15:16.480 --> 01:15:21.480
So instead of like doing all this stuff with Vue or React,


01:15:21.480 --> 01:15:24.960
what you do is you serve up basically templates


01:15:24.960 --> 01:15:27.880
and the templates are pre-rendered.


01:15:27.880 --> 01:15:30.880
Yeah, hey.com, that's where Hotwire comes from.


01:15:30.880 --> 01:15:33.680
but instead of serving up your JSON


01:15:33.680 --> 01:15:35.520
and having two forms of state,


01:15:35.520 --> 01:15:36.880
one on the client, one on the server,


01:15:36.880 --> 01:15:38.840
you just like, you simplify it all.


01:15:38.840 --> 01:15:40.840
I mean, it does add complexity with WebSockets


01:15:40.840 --> 01:15:41.800
and you have to deal with that,


01:15:41.800 --> 01:15:44.720
but yeah, I like sort of that paradigm


01:15:44.720 --> 01:15:47.760
and it feels like a little bit more like 2005-ish


01:15:47.760 --> 01:15:51.560
than 2020-ish, but yeah, I mean,


01:15:51.560 --> 01:15:56.000
it's definitely been working for the Rails folks


01:15:56.000 --> 01:15:58.280
and Basecamp.


01:15:58.280 --> 01:15:59.640
- Yeah, yeah.


01:15:59.640 --> 01:16:02.360
That place is interesting, all the frameworks that they kick out.


01:16:02.360 --> 01:16:03.360
Yeah.


01:16:03.360 --> 01:16:04.360
Cool.


01:16:04.360 --> 01:16:05.360
All right.


01:16:05.360 --> 01:16:08.800
So if you want to be like, "Hey," in DHH, you can go do that.


01:16:08.800 --> 01:16:09.800
That's really cool.


01:16:09.800 --> 01:16:11.760
I've heard good things about it.


01:16:11.760 --> 01:16:12.760
Awesome.


01:16:12.760 --> 01:16:16.400
Well, Michael, it's been really fun to talk about your awesome list.


01:16:16.400 --> 01:16:20.080
And I think all the stuff we touched on is going to be super helpful.


01:16:20.080 --> 01:16:21.720
Final call to action.


01:16:21.720 --> 01:16:27.200
If you want to get started with FastAPI and pick some libraries, what do they do?


01:16:27.200 --> 01:16:29.620
You know, obviously, yeah, I would definitely say


01:16:29.620 --> 01:16:31.580
start with the FastAPI documentation.


01:16:31.580 --> 01:16:35.740
It is great out of all of like the documentation out there


01:16:35.740 --> 01:16:37.700
in terms of Flask and Django and whatnot.


01:16:37.700 --> 01:16:40.240
That one is by far the best.


01:16:40.240 --> 01:16:42.100
Definitely start off there.


01:16:42.100 --> 01:16:44.060
After you just a basic app,


01:16:44.060 --> 01:16:46.420
check out the awesome like FastAPI list


01:16:46.420 --> 01:16:47.460
to see how to extend it.


01:16:47.460 --> 01:16:50.100
And then, you know, if you're looking to like learn more


01:16:50.100 --> 01:16:53.220
in the testing and, you know, Docker type realm,


01:16:53.220 --> 01:16:54.860
you know, check out my course and, you know,


01:16:54.860 --> 01:16:57.620
check out Michael's courses as well.


01:16:57.620 --> 01:17:00.220
- Yeah, and you can do that bundle thing.


01:17:00.220 --> 01:17:03.700
I'll include the email so they can send it over


01:17:03.700 --> 01:17:05.740
and help them out.


01:17:05.740 --> 01:17:07.060
- Yeah, sounds good.


01:17:07.060 --> 01:17:07.900
- Cool.


01:17:07.900 --> 01:17:08.720
- Yeah, awesome.


01:17:08.720 --> 01:17:09.980
So thank you so much for being here.


01:17:09.980 --> 01:17:10.820
Really appreciate it.


01:17:10.820 --> 01:17:13.900
And it's been super fun to talk FastAPI


01:17:13.900 --> 01:17:14.740
and all this stuff around it.


01:17:14.740 --> 01:17:16.620
It's really growing, isn't it?


01:17:16.620 --> 01:17:17.700
- Yeah, yeah, it's exciting.


01:17:17.700 --> 01:17:19.860
It's exciting to see just how much it's grown


01:17:19.860 --> 01:17:23.300
just in like, you know, just past like six months.


01:17:23.300 --> 01:17:24.300
- Yeah, absolutely.


01:17:24.300 --> 01:17:25.660
- Yeah. - All right, see you later.


01:17:25.660 --> 01:17:26.500
- Cool, well, cheers.


01:17:26.500 --> 01:17:27.420
Thanks for having me, appreciate it.


01:17:27.420 --> 01:17:28.420
- Yep, cheers.


01:17:28.420 --> 01:17:30.460
Thanks everyone now to the live stream.


01:17:30.460 --> 01:17:33.420
I see a bunch of thank you in the remarks there


01:17:33.420 --> 01:17:35.400
and the comments, so yeah, cheers.


01:17:35.400 --> 01:17:45.400
[BLANK_AUDIO]

