WEBVTT

00:00:00.000 --> 00:00:05.000
- Philip, welcome back to Talk Python To Me.

00:00:05.000 --> 00:00:06.400
Great to have you here.

00:00:06.400 --> 00:00:08.200
- Thank you, thank you for the invite.

00:00:08.200 --> 00:00:10.940
- Yeah, we're gonna talk about web things.

00:00:10.940 --> 00:00:12.840
I love some web things.

00:00:12.840 --> 00:00:14.440
We're gonna talk about async.

00:00:14.440 --> 00:00:15.640
I love async.

00:00:15.640 --> 00:00:18.940
And we're gonna talk about a lot of little cool things

00:00:18.940 --> 00:00:22.040
you can plug into your web apps that make them more awesome.

00:00:22.040 --> 00:00:25.280
And yeah, I think we'll give a lot of people

00:00:25.280 --> 00:00:26.240
a lot of things to think about.

00:00:26.240 --> 00:00:30.360
So yeah, let's do it.

00:00:30.360 --> 00:00:35.360
So I guess quickly before we get into talking about Quart,

00:00:35.360 --> 00:00:37.720
maybe a little catch up on where it's been

00:00:37.720 --> 00:00:39.480
since the last time we spoke about that.

00:00:39.480 --> 00:00:42.360
Give folks a bit of background on yourself

00:00:42.360 --> 00:00:44.620
for people who don't know you.

00:00:44.620 --> 00:00:45.680
- Sure, yeah.

00:00:45.680 --> 00:00:47.800
I guess probably in this context

00:00:47.800 --> 00:00:50.200
and maybe the people listening

00:00:50.200 --> 00:00:53.520
are probably known for Quart and Hypercorn

00:00:53.520 --> 00:00:55.880
and helping maintain the palettes libraries

00:00:55.880 --> 00:00:57.480
like Flask and Werkzeug.

00:00:57.480 --> 00:01:01.160
But well, outside of that,

00:01:01.160 --> 00:01:02.400
I guess in my professional career,

00:01:02.400 --> 00:01:05.160
I work as a software engineer in London.

00:01:05.160 --> 00:01:08.160
I work for a company called Cureleaf International

00:01:08.160 --> 00:01:10.920
and quite interestingly, 'cause it's not very well known,

00:01:10.920 --> 00:01:12.540
we're one of the few companies

00:01:12.540 --> 00:01:14.320
that do medical cannabis in the UK.

00:01:14.320 --> 00:01:16.240
Not many people know it's legal.

00:01:16.240 --> 00:01:19.080
But yeah, putting that aside.

00:01:19.080 --> 00:01:22.080
So I've worked there for about a year and a bit now.

00:01:23.120 --> 00:01:26.160
Before that, I worked at various other software firms.

00:01:26.160 --> 00:01:28.760
And then before that, I was actually a particle physicist

00:01:28.760 --> 00:01:31.240
working on an experiment out in Canada in a deep mine,

00:01:31.240 --> 00:01:32.200
which was quite good fun.

00:01:32.200 --> 00:01:35.920
- So you like your variety of your job, I can tell.

00:01:35.920 --> 00:01:37.820
- Yeah, I had a definite career shift.

00:01:37.820 --> 00:01:40.040
- Indeed.

00:01:40.040 --> 00:01:42.480
Just a funny sidebar,

00:01:42.480 --> 00:01:44.280
cannabis was legalized here

00:01:44.280 --> 00:01:46.020
three or four years ago in Oregon.

00:01:46.020 --> 00:01:52.040
There are more cannabis shops than there are Starbucks,

00:01:52.040 --> 00:01:53.600
than there are McDonald's.

00:01:53.600 --> 00:01:54.440
- Oh, wow.

00:01:54.440 --> 00:01:56.880
- I could walk the floor from my house in five minutes.

00:01:56.880 --> 00:01:57.720
It's nuts.

00:01:57.720 --> 00:02:01.560
Anyway, it's very different

00:02:01.560 --> 00:02:04.000
than it was a few years ago, for sure.

00:02:04.000 --> 00:02:05.880
It's all fine, but just different.

00:02:05.880 --> 00:02:07.920
All right, so court.

00:02:07.920 --> 00:02:15.240
Court, like flask, kind of, but very interesting

00:02:15.240 --> 00:02:18.400
in that it's got some other capabilities.

00:02:18.400 --> 00:02:19.680
Tell people about court.

00:02:19.680 --> 00:02:21.640
How's it relate to flask?

00:02:21.640 --> 00:02:23.720
There's a lot of crossover.

00:02:23.720 --> 00:02:26.600
You and David Lord are working pretty closely,

00:02:26.600 --> 00:02:28.000
it seems like, on things these days.

00:02:28.000 --> 00:02:31.920
- Yeah, so I started court about, I guess, seven,

00:02:31.920 --> 00:02:33.640
maybe a bit more years ago now.

00:02:33.640 --> 00:02:37.760
And the original idea was make flask async.

00:02:37.760 --> 00:02:40.520
At the time, I couldn't figure out how to adapt flask

00:02:40.520 --> 00:02:41.600
at all in that direction.

00:02:41.600 --> 00:02:44.200
So I thought, okay, I'll start by just re-implementing

00:02:44.200 --> 00:02:46.640
the flask API using a sinker weight.

00:02:46.640 --> 00:02:49.120
And that's what court started out to be.

00:02:49.120 --> 00:02:52.640
And over the years, David and I have worked

00:02:52.640 --> 00:02:54.520
to try and merge the two together.

00:02:54.520 --> 00:02:57.920
So the very latest change that's happened a few months ago

00:02:57.920 --> 00:03:00.520
is we actually based court on flask now.

00:03:00.520 --> 00:03:03.080
So there's a lot of shared code now.

00:03:03.080 --> 00:03:05.800
And for a long time, court was based on Werkzeug.

00:03:05.800 --> 00:03:07.800
And if you're familiar with the palettes

00:03:07.800 --> 00:03:10.680
and flask ecosystem, flask is built on Werkzeug.

00:03:10.680 --> 00:03:12.840
And court was, but now court is built on flask,

00:03:12.840 --> 00:03:15.440
which is built on Werkzeug, and they're very, very similar.

00:03:15.440 --> 00:03:16.800
- Yeah, that's fantastic.

00:03:16.800 --> 00:03:19.000
'Cause the more that you can share,

00:03:19.000 --> 00:03:22.480
like the more you all can just focus on features.

00:03:22.480 --> 00:03:23.320
- Exactly. - And make it better

00:03:23.320 --> 00:03:25.880
rather than duplicating that effort.

00:03:25.880 --> 00:03:29.720
- And the other aim is that the APIs,

00:03:29.720 --> 00:03:31.920
well, the same as they can be other than a sinker weight.

00:03:31.920 --> 00:03:34.600
So you can take your flask code base and move to court

00:03:34.600 --> 00:03:36.000
just by adding a sinker weight.

00:03:36.000 --> 00:03:37.520
That's the dream.

00:03:37.520 --> 00:03:40.160
So yeah, even closer than it's ever been to that now.

00:03:40.160 --> 00:03:45.760
- You're pretty close to be able to rename the word flask,

00:03:45.760 --> 00:03:49.680
keeping the case sensitivity intact from flask to court

00:03:49.680 --> 00:03:50.760
and it works, right?

00:03:50.760 --> 00:03:53.600
- Yeah, in simple projects.

00:03:53.600 --> 00:03:54.880
Yeah, the more complicated ones,

00:03:54.880 --> 00:03:56.240
it comes down to the extensions,

00:03:56.240 --> 00:03:58.320
which we're gonna talk about.

00:03:58.320 --> 00:04:00.960
- Yeah, that's the whole topic of today, right?

00:04:00.960 --> 00:04:02.320
- Yes, exactly.

00:04:02.320 --> 00:04:03.640
But yeah, that's the aim.

00:04:03.640 --> 00:04:05.840
Our long-term aim is to actually merge the two

00:04:05.840 --> 00:04:08.400
and be able to say async flask.

00:04:08.400 --> 00:04:09.920
Well, it's kind of the case now

00:04:09.920 --> 00:04:12.720
where you can say async flask is court

00:04:12.720 --> 00:04:14.680
and we can't quite do what Django has done

00:04:14.680 --> 00:04:17.920
and put async Django as it is in Django.

00:04:17.920 --> 00:04:20.480
Ours, you have to make a naming choice from the start,

00:04:20.480 --> 00:04:24.200
but yeah, I think it's getting as close as we can get.

00:04:24.200 --> 00:04:26.320
Maybe we'll figure out how to merge them in the future.

00:04:26.320 --> 00:04:28.160
- Yeah, it'd be great if it just,

00:04:28.160 --> 00:04:29.880
you could choose to use async def

00:04:29.880 --> 00:04:33.120
or just regular functions for your views and flask

00:04:33.120 --> 00:04:35.640
and not really think about--

00:04:35.640 --> 00:04:36.880
- What you can't do that now.

00:04:36.880 --> 00:04:37.720
- Okay.

00:04:37.720 --> 00:04:39.880
- You've been able to do that for about two years, I think,

00:04:39.880 --> 00:04:41.640
trying to figure out when we merged that.

00:04:41.640 --> 00:04:44.000
So you could use either, it's just not as performant.

00:04:44.000 --> 00:04:46.640
If your code base is gonna be mostly async,

00:04:46.640 --> 00:04:48.440
you probably wanna switch to court fully

00:04:48.440 --> 00:04:52.080
'cause it'd be more performant and more reliable and robust.

00:04:52.080 --> 00:04:52.920
- Sure, why is that?

00:04:52.920 --> 00:04:54.720
- But if not, it's a flask.

00:04:54.720 --> 00:04:58.720
So the flask implementation will run your async code

00:04:58.720 --> 00:04:59.960
on a separate thread.

00:04:59.960 --> 00:05:02.640
So you get all that overhead of switching between the threads

00:05:02.640 --> 00:05:05.200
sending the information over and back, et cetera.

00:05:05.200 --> 00:05:06.040
- Right.

00:05:06.040 --> 00:05:09.280
Does it run like an asyncio event loop on the other thread,

00:05:09.280 --> 00:05:10.400
but then--

00:05:10.400 --> 00:05:11.240
- Exactly.

00:05:11.240 --> 00:05:14.200
- Basically curry the results back and forth?

00:05:14.200 --> 00:05:15.040
- Yep.

00:05:15.040 --> 00:05:18.920
- And with court, it's running right on top

00:05:18.920 --> 00:05:21.320
of an ASCII server.

00:05:21.320 --> 00:05:22.160
- Yep.

00:05:22.160 --> 00:05:23.360
- Straight, right?

00:05:23.360 --> 00:05:24.360
- Yeah.

00:05:24.360 --> 00:05:25.880
- Okay, yeah, that's super cool.

00:05:25.880 --> 00:05:28.880
And you might be responsible

00:05:28.880 --> 00:05:33.320
for one of the more prominent ones out there.

00:05:33.320 --> 00:05:36.360
Tell people about what is an ASCII server

00:05:36.360 --> 00:05:38.120
for people who don't know, why does it exist?

00:05:38.120 --> 00:05:40.320
And then the one that you got.

00:05:40.320 --> 00:05:41.160
- Yeah, sure.

00:05:41.160 --> 00:05:44.440
So historically, there was the whiskey standard

00:05:44.440 --> 00:05:48.120
which separated servers from frameworks applications

00:05:48.120 --> 00:05:49.920
and kind of gave you a choice between

00:05:49.920 --> 00:05:52.760
how do you wanna serve and deal with concurrency and stuff?

00:05:52.760 --> 00:05:55.160
And then how do you want your API to build your apps,

00:05:55.160 --> 00:05:56.280
the framework to be?

00:05:56.280 --> 00:05:57.840
I think it was a great choice

00:05:57.840 --> 00:06:01.640
'cause it made the ecosystem really nice for developers.

00:06:01.640 --> 00:06:04.200
And ASCII is the same thing for async.

00:06:04.200 --> 00:06:08.240
And so court is an example of an ASCII framework

00:06:08.240 --> 00:06:10.040
and HyperCon is an ASCII server.

00:06:10.040 --> 00:06:13.360
They originally together, much like Sanic started out as well

00:06:13.360 --> 00:06:17.520
but then I split that out HyperCon into its own thing.

00:06:17.520 --> 00:06:20.600
And then later on now HyperCon is also a whiskey server.

00:06:20.600 --> 00:06:22.040
So yeah, in some respects,

00:06:22.040 --> 00:06:24.880
HyperCon is just a general purpose server for Python.

00:06:24.880 --> 00:06:31.760
- And so HyperCon, it lives in the same general usage base

00:06:31.760 --> 00:06:37.640
as G-Unicorn and MicroWSGI, U-W-S-G-I, right?

00:06:38.760 --> 00:06:40.560
So I could run it in production

00:06:40.560 --> 00:06:42.760
in a kind of like a overseer mode

00:06:42.760 --> 00:06:45.160
where you can fan out worker processes

00:06:45.160 --> 00:06:48.480
and a system daemon, system deal, all that.

00:06:48.480 --> 00:06:50.160
Is that where it's at?

00:06:50.160 --> 00:06:51.480
- Yeah, it's exactly like that.

00:06:51.480 --> 00:06:53.760
Yeah, and it also in the ASCII space,

00:06:53.760 --> 00:06:58.060
it's similar to UVCorn or Daphne, that's it.

00:06:58.060 --> 00:07:02.960
I think there's another, but I've forgotten the name just now.

00:07:02.960 --> 00:07:06.040
- Yeah, I was just messing with some Docker stuff

00:07:06.040 --> 00:07:11.040
and I was running the web app, a FastAPI app,

00:07:11.040 --> 00:07:15.560
NG-Unicorn using UVCorn workers.

00:07:15.560 --> 00:07:18.840
So handling the ASCII stuff that way.

00:07:18.840 --> 00:07:21.880
Is it better to use HyperCon?

00:07:21.880 --> 00:07:25.400
Is it rather than something along those lines?

00:07:25.400 --> 00:07:27.560
A little more, maybe, or what do you think?

00:07:27.560 --> 00:07:28.600
- I think it's a bit of a choice.

00:07:28.600 --> 00:07:32.960
So how it differs from, well, UVCon in general is quicker

00:07:32.960 --> 00:07:36.760
because it's HTTP parser, HTTP one parser is quicker.

00:07:36.760 --> 00:07:38.360
And there's a few other choices

00:07:38.360 --> 00:07:40.120
that tend to make it a bit quicker.

00:07:40.120 --> 00:07:42.160
However, at least last time I checked,

00:07:42.160 --> 00:07:46.000
UVCon doesn't support as many extensions as HyperCon

00:07:46.000 --> 00:07:49.040
and it doesn't support HTTP/2 or HTTP/3.

00:07:49.040 --> 00:07:50.920
Now, most people don't actually serve that directly.

00:07:50.920 --> 00:07:52.760
They tend to have a load balancer in front,

00:07:52.760 --> 00:07:54.940
but I tend to do that 'cause it's quite exciting.

00:07:54.940 --> 00:07:57.000
So you're getting there with HyperCon.

00:07:57.000 --> 00:07:58.440
And then after that, it's a bit of a choice

00:07:58.440 --> 00:08:01.560
between what features do they both have,

00:08:01.560 --> 00:08:02.400
what do you wanna use?

00:08:02.400 --> 00:08:04.920
So they're fairly similar, I would say.

00:08:04.920 --> 00:08:06.340
- Sure, okay, somewhat.

00:08:06.340 --> 00:08:09.200
Up to you what you wanna choose,

00:08:09.200 --> 00:08:10.960
but for people who have mental models,

00:08:10.960 --> 00:08:15.120
maybe using UVCon, they could check out HyperCon, right?

00:08:15.120 --> 00:08:16.880
- Yeah, yeah, so you wouldn't need GUnicorn

00:08:16.880 --> 00:08:18.800
'cause HyperCon has the process model

00:08:18.800 --> 00:08:21.240
that GUnicorn adds to UVCon.

00:08:21.240 --> 00:08:23.400
And yeah, you can just switch over.

00:08:23.400 --> 00:08:25.080
It should be a one-liner 'cause most of the time

00:08:25.080 --> 00:08:27.320
it's just that one command line where you set this up,

00:08:27.320 --> 00:08:28.640
right, so yeah.

00:08:28.640 --> 00:08:29.480
- Yeah, very exciting.

00:08:29.480 --> 00:08:31.960
I'm gonna give it a solid look

00:08:31.960 --> 00:08:34.440
because I'm deep in that world right now,

00:08:34.440 --> 00:08:37.320
playing with things, which is very exciting,

00:08:37.320 --> 00:08:38.560
but not the topic for today.

00:08:38.560 --> 00:08:42.760
So the topic for today is people who are interested

00:08:42.760 --> 00:08:46.320
in doing Flask and Quart, especially Quart,

00:08:46.320 --> 00:08:49.600
what are ways you can do more, right?

00:08:49.600 --> 00:08:53.520
So the frameworks are pretty simple, right?

00:08:53.520 --> 00:08:57.920
Of all the different APIs out there,

00:08:57.920 --> 00:09:01.320
the Flask API has definitely won.

00:09:01.320 --> 00:09:02.880
You know, even though there's many different

00:09:02.880 --> 00:09:07.000
web frameworks, right, if you look at the way

00:09:07.000 --> 00:09:09.560
programming works, you look at FastAPI,

00:09:09.560 --> 00:09:13.360
you look at Litestar, many of these things,

00:09:13.360 --> 00:09:15.240
it's like you gotta create a thing called app

00:09:15.240 --> 00:09:17.840
and then you say app.get and so on, right?

00:09:17.840 --> 00:09:22.840
So this style of programming is really popular

00:09:22.840 --> 00:09:25.200
and I think it's 'cause it's just straightforward

00:09:25.200 --> 00:09:28.680
and simple, opposite of Django maybe.

00:09:29.560 --> 00:09:33.760
Not so many batteries included, but you can add

00:09:33.760 --> 00:09:36.160
the batteries through extensions, yeah?

00:09:36.160 --> 00:09:38.040
- Yeah, exactly, I think that's always been

00:09:38.040 --> 00:09:39.560
the trade-off between Django and Flask,

00:09:39.560 --> 00:09:42.520
and well, I would say perhaps even Django and Quart

00:09:42.520 --> 00:09:45.440
if you were to go Quart is, Django makes the choice

00:09:45.440 --> 00:09:46.960
of your batteries to a large extent,

00:09:46.960 --> 00:09:50.120
whereas Quart and Flask means you have to choose,

00:09:50.120 --> 00:09:51.080
basically, yeah.

00:09:51.080 --> 00:09:53.280
- Yeah, which is really nice if you've got,

00:09:53.280 --> 00:09:55.160
like, you know, I would really rather use

00:09:55.160 --> 00:09:57.160
this graph database for this thing

00:09:57.160 --> 00:09:58.400
and I would really rather, you know,

00:09:58.400 --> 00:10:01.760
like you get a lot of choice, but you have to,

00:10:01.760 --> 00:10:03.440
you're gonna have to build a little bit more yourself

00:10:03.440 --> 00:10:06.360
and you've gotta decide more yourself, so.

00:10:06.360 --> 00:10:10.480
But with all these extensions, it starts to become easier

00:10:10.480 --> 00:10:13.200
to click the Lego blocks back together, yeah?

00:10:13.200 --> 00:10:14.280
- Yeah, exactly, yeah.

00:10:14.280 --> 00:10:20.200
- All right, so if you go, if people listening,

00:10:20.200 --> 00:10:24.560
go to quart.palettesproject.com

00:10:24.560 --> 00:10:27.880
and go in there and find the extensions.

00:10:27.880 --> 00:10:30.120
There's a great long list of extensions

00:10:30.120 --> 00:10:33.600
that we've got here that they can choose to run, right?

00:10:33.600 --> 00:10:35.880
And how to do that and so on.

00:10:35.880 --> 00:10:38.640
But you picked out a couple that you really wanna highlight

00:10:38.640 --> 00:10:41.560
and we'll dive into them and if there's extra time,

00:10:41.560 --> 00:10:44.640
maybe we can, you know, pick some more out of the list

00:10:44.640 --> 00:10:46.480
and just see what we can make of them.

00:10:46.480 --> 00:10:49.920
- Yeah, I think, I was gonna say,

00:10:49.920 --> 00:10:51.440
I think the best one to start with

00:10:51.440 --> 00:10:54.480
is the bit of discussion around an extension

00:10:54.480 --> 00:10:57.000
called Quart Flask Patch,

00:10:57.000 --> 00:10:58.560
which is a bit of a odd name

00:10:58.560 --> 00:11:01.480
and I maybe need to think of a better name for it.

00:11:01.480 --> 00:11:03.400
But the idea behind this extension

00:11:03.400 --> 00:11:06.840
is it patches Quart at import time

00:11:06.840 --> 00:11:09.680
to look very much like Flask.

00:11:09.680 --> 00:11:12.560
So you can use some Flask extensions directly.

00:11:12.560 --> 00:11:16.000
So this is again, the idea to make it easier

00:11:16.000 --> 00:11:19.160
if you are so willing to transfer from Flask to Quart,

00:11:19.160 --> 00:11:21.560
this would allow you to, an easier step

00:11:21.560 --> 00:11:25.520
'cause you could add this one line, import Quart Flask Patch

00:11:25.520 --> 00:11:28.760
and some of your Flask extensions would just work.

00:11:28.760 --> 00:11:30.160
Now you've changed to Quart.

00:11:30.160 --> 00:11:34.840
- That's awesome because there's a bunch out there.

00:11:34.840 --> 00:11:38.520
So what happens when I run this?

00:11:38.520 --> 00:11:40.120
Is it basically say like, okay,

00:11:40.120 --> 00:11:42.840
there's a bunch of module namespaces called Quart this,

00:11:42.840 --> 00:11:46.320
Quart that, let's create proxies called Flask

00:11:46.320 --> 00:11:49.520
that just delegate into the Quart elements

00:11:49.520 --> 00:11:50.720
and expose that back.

00:11:50.720 --> 00:11:53.360
So code written against Flask dot whatever,

00:11:53.360 --> 00:11:54.480
think it still exists.

00:11:55.480 --> 00:11:57.080
- Yeah, exactly that.

00:11:57.080 --> 00:12:00.200
Yeah, it does slightly more because what it also needs to do

00:12:00.200 --> 00:12:03.080
is 'cause a lot of the Quart APIs are async.

00:12:03.080 --> 00:12:06.280
It needs to wrap them in a wrapper

00:12:06.280 --> 00:12:08.600
that allows it to be called synchronously,

00:12:08.600 --> 00:12:12.000
but it needs to do so in a nested sense.

00:12:12.000 --> 00:12:14.240
And I don't know whether you've looked much

00:12:14.240 --> 00:12:17.000
into like nesting event loops in one another

00:12:17.000 --> 00:12:19.280
or getting back to the same event loop.

00:12:19.280 --> 00:12:22.800
It's a bit of a, I think it's fair maybe to call it

00:12:22.800 --> 00:12:27.440
a bit of a hack, but it does work well enough

00:12:27.440 --> 00:12:31.200
to allow you to buy that time to develop on,

00:12:31.200 --> 00:12:33.040
but that's what it has to do, yeah.

00:12:33.040 --> 00:12:37.240
- Yeah, I really wish that Python had an ambient event loop

00:12:37.240 --> 00:12:39.240
that was the default.

00:12:39.240 --> 00:12:41.680
This like, get me an event loop.

00:12:41.680 --> 00:12:43.080
Oh, it doesn't exist in exception.

00:12:43.080 --> 00:12:45.000
Oh, create an event loop.

00:12:45.000 --> 00:12:46.400
Sorry, exception, it already exists.

00:12:46.400 --> 00:12:48.240
Like, you know, there's like,

00:12:48.240 --> 00:12:51.480
it's just really tricky to figure out kind of

00:12:51.480 --> 00:12:53.760
deep down in some library, like, well,

00:12:53.760 --> 00:12:54.720
am I in charge of this?

00:12:54.720 --> 00:12:55.560
Is it already going?

00:12:55.560 --> 00:12:56.760
And I gotta be part of something bigger.

00:12:56.760 --> 00:12:59.600
If you could just say, just async run this,

00:12:59.600 --> 00:13:01.480
you know, and just, you do that.

00:13:01.480 --> 00:13:03.320
You need to make an event loop, make it.

00:13:03.320 --> 00:13:05.480
If you don't need to make one,

00:13:05.480 --> 00:13:06.880
just put it in the one that's already there, right?

00:13:06.880 --> 00:13:09.880
Like, I really wish there was a little bit cleaner

00:13:09.880 --> 00:13:12.560
story there, but you know, we're not gonna solve that

00:13:12.560 --> 00:13:14.480
with Quart extensions.

00:13:14.480 --> 00:13:16.680
- No, no, I mean, if they hadn't done that,

00:13:16.680 --> 00:13:19.960
it would have made making Flask async a lot easier.

00:13:19.960 --> 00:13:22.680
And you've probably come across the library.

00:13:22.680 --> 00:13:24.760
I think it's Greenback.

00:13:24.760 --> 00:13:26.760
- Greenback, no, this is new.

00:13:26.760 --> 00:13:30.280
- So Greenback is a green lit,

00:13:30.280 --> 00:13:32.800
like stack switcher based library

00:13:32.800 --> 00:13:37.000
that allows you to get back to the event loop

00:13:37.000 --> 00:13:39.680
when you're deep in some sync code,

00:13:39.680 --> 00:13:42.640
which is quite nice in the sense that, you know,

00:13:42.640 --> 00:13:44.880
it allows you to do all the stuff that's difficult,

00:13:44.880 --> 00:13:48.400
but it's not so nice in that it's kind of hidden

00:13:48.400 --> 00:13:50.080
in a way monkey patching type stuff

00:13:50.080 --> 00:13:51.800
going on in the background.

00:13:51.800 --> 00:13:54.560
But I think this is what SQLAlchemy uses

00:13:54.560 --> 00:13:58.480
to get their async await supporting.

00:13:58.480 --> 00:14:01.880
So it's certainly, yeah, I guess popular, yeah.

00:14:01.880 --> 00:14:04.960
- Sure, reenter asyncio or trio event loops

00:14:04.960 --> 00:14:07.120
from synchronous code, very nice.

00:14:07.120 --> 00:14:12.080
Cool, okay, so Flask patch,

00:14:12.080 --> 00:14:16.120
that's pretty good if you just have some Flask code

00:14:16.120 --> 00:14:17.840
and you're like, oh, I wanna switch to Quart,

00:14:17.840 --> 00:14:21.200
but hopefully nothing changes

00:14:21.200 --> 00:14:22.640
and I'll just run this at the beginning

00:14:22.640 --> 00:14:24.240
and everything will work.

00:14:24.240 --> 00:14:26.480
How often does that happen?

00:14:26.480 --> 00:14:30.080
How often does it work out to be easy like that?

00:14:30.080 --> 00:14:32.520
- So it depends on what the extension does.

00:14:32.520 --> 00:14:35.680
So if the extension does its own IO

00:14:35.680 --> 00:14:38.040
or calls certain Flask functions

00:14:38.040 --> 00:14:41.000
that this extension can't patch,

00:14:41.000 --> 00:14:42.280
then yeah, it just fails.

00:14:42.280 --> 00:14:45.760
And yeah, so not all of them.

00:14:45.760 --> 00:14:47.040
If you go into tests,

00:14:47.040 --> 00:14:48.920
you can see an example of some of them

00:14:48.920 --> 00:14:51.320
that we test against or I test against, sorry,

00:14:51.320 --> 00:14:52.280
just to make sure they work.

00:14:52.280 --> 00:14:53.560
- Login potentially.

00:14:53.560 --> 00:14:56.120
- Yeah, so login is probably the most popular, I think.

00:14:56.120 --> 00:15:01.120
So I don't think it works for SQLAlchemy, for example.

00:15:01.120 --> 00:15:04.000
There's a technical example,

00:15:04.000 --> 00:15:06.080
anywhere that uses app context

00:15:06.080 --> 00:15:10.120
as a contact manager in a synchronous location,

00:15:10.120 --> 00:15:11.400
basically that's too hard to patch.

00:15:11.400 --> 00:15:15.200
So they tend to all fail, but yeah,

00:15:15.200 --> 00:15:17.680
a few do and I hope it makes it easier for people.

00:15:17.680 --> 00:15:19.560
I'm pretty sure it is used 'cause I get bug reports.

00:15:19.560 --> 00:15:21.800
So some people find it useful at least.

00:15:21.800 --> 00:15:23.120
- Yeah, absolutely.

00:15:23.120 --> 00:15:25.080
It looks excellent, right?

00:15:25.080 --> 00:15:28.480
So once you do all the magic,

00:15:28.480 --> 00:15:31.440
you can just work with the login manager

00:15:31.440 --> 00:15:33.360
and off it goes, right?

00:15:33.360 --> 00:15:35.320
- Yeah, exactly that, yeah.

00:15:35.320 --> 00:15:37.060
- Yeah, super cool.

00:15:37.060 --> 00:15:43.460
Okay, Cores, everybody loves their cross-site or C++.

00:15:43.460 --> 00:15:46.460
Everybody loves their cross-site origin scripting

00:15:46.460 --> 00:15:47.580
restrictions.

00:15:47.580 --> 00:15:51.340
I guess we do love it in the sense that

00:15:51.340 --> 00:15:53.820
we're not getting our bank account stolen

00:15:53.820 --> 00:15:54.980
while we browse the web,

00:15:54.980 --> 00:15:56.740
but as a web developer, you're like,

00:15:56.740 --> 00:16:00.340
oh, Cores again, I need to allow this thing to talk to that,

00:16:00.340 --> 00:16:01.660
but it's, you know, right?

00:16:01.660 --> 00:16:02.860
It can be a hassle.

00:16:02.860 --> 00:16:07.700
And so I'm guessing Cores allows you control those settings

00:16:07.700 --> 00:16:10.140
and expose them and so on.

00:16:10.140 --> 00:16:10.980
- Yeah, exactly that.

00:16:10.980 --> 00:16:12.940
I think it's become more prevalent, right?

00:16:12.940 --> 00:16:15.500
Since the switch to kind of front-end frameworks

00:16:15.500 --> 00:16:17.940
has been so popular, right?

00:16:17.940 --> 00:16:19.020
'Cause you end up serving them,

00:16:19.020 --> 00:16:21.400
well, typically you end up serving them separately,

00:16:21.400 --> 00:16:23.540
but yeah, it's exactly as you described.

00:16:23.540 --> 00:16:25.620
You can put decorators on routes

00:16:25.620 --> 00:16:27.780
or you can put it on a blueprint or on the entire app

00:16:27.780 --> 00:16:30.980
and you just say, this is a Cores policy for everything.

00:16:30.980 --> 00:16:34.480
Yeah, very similar to Flask Cores, but different API.

00:16:34.480 --> 00:16:38.860
- Even like a blueprint and say this whole section of code

00:16:38.860 --> 00:16:40.740
is where the APIs live.

00:16:40.740 --> 00:16:42.500
Things can call that, but nothing else.

00:16:42.500 --> 00:16:44.060
That'd be really, that's really nice.

00:16:44.060 --> 00:16:45.620
- Yeah, yeah.

00:16:45.620 --> 00:16:46.900
- Yeah, okay.

00:16:46.900 --> 00:16:49.860
Let me pull up some--

00:16:49.860 --> 00:16:52.300
- So it also has a slight web,

00:16:52.300 --> 00:16:55.740
'cause obviously Quark does web sockets whereas Flask,

00:16:55.740 --> 00:16:57.100
at least natively can't,

00:16:57.100 --> 00:16:59.580
but yeah, there's some web socket considerations

00:16:59.580 --> 00:17:00.420
with Quark as well,

00:17:00.420 --> 00:17:02.380
which mostly come around to checking the origin header,

00:17:02.380 --> 00:17:04.460
but yeah, it does that as well.

00:17:04.460 --> 00:17:06.460
- Okay, so you have a route

00:17:06.460 --> 00:17:09.800
and you just put the @route_cores on it,

00:17:09.800 --> 00:17:11.940
or like you said, a blueprint or on the whole app

00:17:11.940 --> 00:17:12.780
or however you want,

00:17:12.780 --> 00:17:17.540
but and then what kind of arguments does it take?

00:17:17.540 --> 00:17:20.420
What can I ask it and make it do?

00:17:20.420 --> 00:17:22.220
- Yeah, so I went for the kind of,

00:17:22.220 --> 00:17:26.580
I guess, functional kind of API for it.

00:17:26.580 --> 00:17:28.860
So you can put in like the allow headers

00:17:28.860 --> 00:17:32.740
or the, what's the other one?

00:17:32.740 --> 00:17:34.700
The credentials, I forget what it's called now,

00:17:34.700 --> 00:17:35.540
but they're all listed

00:17:35.540 --> 00:17:37.940
and all keyword arguments effectively to it.

00:17:37.940 --> 00:17:40.260
There was in the issues, someone, a couple of,

00:17:40.260 --> 00:17:43.460
maybe last year put out a new suggestion for a new API

00:17:43.460 --> 00:17:46.380
for cores libraries that would be more intuitive,

00:17:46.380 --> 00:17:48.300
but wouldn't match the actual headers that came out.

00:17:48.300 --> 00:17:51.020
So at some point I hope to like look into that

00:17:51.020 --> 00:17:51.860
and offer that as well.

00:17:51.860 --> 00:17:53.740
But at the moment you basically say the header

00:17:53.740 --> 00:17:54.700
and then the values you want.

00:17:54.700 --> 00:17:56.980
So it's very, you have to really kind of know cores

00:17:56.980 --> 00:17:57.820
to use it.

00:17:57.820 --> 00:17:59.060
- I see, okay.

00:17:59.060 --> 00:18:00.860
It just basically juggles the headers

00:18:00.860 --> 00:18:04.260
and it's not a lot of abstractions in between.

00:18:04.260 --> 00:18:07.620
- No, no, so I think in the readme,

00:18:07.620 --> 00:18:08.780
it shows you them all actually.

00:18:08.780 --> 00:18:11.180
So if you wanted to have a look there.

00:18:11.180 --> 00:18:12.740
- Get back, yeah.

00:18:12.740 --> 00:18:18.300
- If you go down a bit further, here we go.

00:18:18.300 --> 00:18:19.140
- Oh yeah, there you go.

00:18:19.140 --> 00:18:20.700
- So these are all the headers you can control

00:18:20.700 --> 00:18:22.780
and it's basically the same name.

00:18:22.780 --> 00:18:26.420
- Sure, so access control, allow origin,

00:18:26.420 --> 00:18:28.620
access control, allow credentials,

00:18:28.620 --> 00:18:31.620
expose headers, max age, all this,

00:18:31.620 --> 00:18:34.740
all these things that you might wanna use, right?

00:18:34.740 --> 00:18:35.780
- Yeah. - Very cool.

00:18:35.780 --> 00:18:38.300
Okay.

00:18:38.300 --> 00:18:40.220
Oh, you have types as well.

00:18:40.220 --> 00:18:41.380
So that's lovely.

00:18:41.380 --> 00:18:44.860
Are you a fan of types, type hints?

00:18:44.860 --> 00:18:45.940
- I am, yeah.

00:18:45.940 --> 00:18:47.900
Since it came out, I've not,

00:18:47.900 --> 00:18:50.540
well, I've tried not to write untyped code, I think.

00:18:50.540 --> 00:18:51.380
Especially in a team,

00:18:51.380 --> 00:18:52.660
I think it makes a huge difference

00:18:52.660 --> 00:18:54.660
to the understanding of the code.

00:18:54.660 --> 00:18:56.820
So yeah, yeah, I'm a big fan.

00:18:56.820 --> 00:18:59.780
- Yeah, I also think it makes your editors help you more.

00:18:59.780 --> 00:19:02.420
You know, it knows what type that is.

00:19:02.420 --> 00:19:03.620
And you say dot, it'll,

00:19:03.620 --> 00:19:05.660
is this what you meant?

00:19:05.660 --> 00:19:07.460
Like, yes, actually, I didn't know that existed,

00:19:07.460 --> 00:19:09.060
but that's what I want, give that to me.

00:19:09.060 --> 00:19:11.100
Without types, you're kind of like, well,

00:19:11.100 --> 00:19:14.620
you know, you get object,

00:19:14.620 --> 00:19:18.100
weird, useless stuff that you can't do anything with.

00:19:18.100 --> 00:19:20.580
All right, so cores, if you need to do cores,

00:19:20.580 --> 00:19:22.340
there's, I guess,

00:19:22.340 --> 00:19:24.660
let me know how to do this,

00:19:24.660 --> 00:19:26.900
but I think pretty much most of these that exist,

00:19:26.900 --> 00:19:28.900
there's probably a Flask variant.

00:19:28.900 --> 00:19:31.540
So if you use Flask and you're like,

00:19:31.540 --> 00:19:33.700
oh, I need cores, but I don't use Court,

00:19:33.700 --> 00:19:37.180
just Flask-Cores instead of Court-Cores.

00:19:37.700 --> 00:19:39.500
- Yeah, yeah, I think it's quite well maintained,

00:19:39.500 --> 00:19:40.340
the Flask one.

00:19:40.340 --> 00:19:43.460
So yeah, the Flask-Cores, it's slightly different API,

00:19:43.460 --> 00:19:45.620
but the concepts are all the same, obviously.

00:19:45.620 --> 00:19:47.340
So yeah, not very much.

00:19:47.340 --> 00:19:51.340
- Okay, all right, another one is Auth.

00:19:51.340 --> 00:19:54.220
Auth means so many different things.

00:19:54.220 --> 00:19:59.060
Is it a session type-based Auth?

00:19:59.060 --> 00:20:00.020
Is it OAuth?

00:20:00.020 --> 00:20:02.900
Is it, who knows what, YubiKeys?

00:20:02.900 --> 00:20:04.380
What are we talking here?

00:20:04.380 --> 00:20:05.540
- So this is, yeah,

00:20:05.540 --> 00:20:07.660
session management via a secure cookie.

00:20:07.660 --> 00:20:10.260
So it's a similar usage,

00:20:10.260 --> 00:20:12.020
if you're familiar with Flask login,

00:20:12.020 --> 00:20:13.500
but I didn't want to call it Court login

00:20:13.500 --> 00:20:16.180
because it didn't really do anything with the login.

00:20:16.180 --> 00:20:17.940
It didn't check the password or the username

00:20:17.940 --> 00:20:20.740
or an MFA or anything to do with login, in my opinion.

00:20:20.740 --> 00:20:22.900
So I called it Auth instead.

00:20:22.900 --> 00:20:25.460
But yeah, so with this extension,

00:20:25.460 --> 00:20:27.300
you tell it to log in the user

00:20:27.300 --> 00:20:30.140
and give it some kind of identifier,

00:20:30.140 --> 00:20:33.180
and it saves that information securely in a cookie for you.

00:20:33.180 --> 00:20:35.900
And whenever the user comes back and presents the cookie,

00:20:35.900 --> 00:20:38.460
it then pulls it out and turns it into

00:20:38.460 --> 00:20:39.780
what is called the current user.

00:20:39.780 --> 00:20:42.140
So I think it's called the current user

00:20:42.140 --> 00:20:43.060
in Flask login as well.

00:20:43.060 --> 00:20:43.900
So very similar to that.

00:20:43.900 --> 00:20:46.940
- Okay, does it actually give you a user object back

00:20:46.940 --> 00:20:48.820
or like an ID?

00:20:48.820 --> 00:20:52.900
- Yep, you get a Auth user object,

00:20:52.900 --> 00:20:55.580
but you can change that to your own class.

00:20:55.580 --> 00:20:57.740
There's a, I think there's an Auth user class.

00:20:57.740 --> 00:21:01.180
Oh, oh, the light's just gone.

00:21:01.180 --> 00:21:02.180
Excuse me a second.

00:21:02.180 --> 00:21:03.020
(laughs)

00:21:03.020 --> 00:21:04.500
- It's absolutely dark in your room.

00:21:04.500 --> 00:21:05.340
That's nuts.

00:21:05.340 --> 00:21:07.580
Okay, don't worry, so hold on.

00:21:07.580 --> 00:21:09.780
- Okay, I might be a bit,

00:21:09.780 --> 00:21:11.940
'cause the light that was on my face

00:21:11.940 --> 00:21:13.460
has just died for some reason.

00:21:13.460 --> 00:21:14.860
That's a real shame.

00:21:14.860 --> 00:21:15.700
So sorry about that.

00:21:15.700 --> 00:21:18.740
I wonder if I can find somewhere so I'm a bit lighter.

00:21:18.740 --> 00:21:19.980
I'll try something else.

00:21:19.980 --> 00:21:26.620
It's a bit better, I suppose.

00:21:26.620 --> 00:21:29.060
- Yeah, at least we can see you.

00:21:29.060 --> 00:21:29.900
- Yeah.

00:21:29.900 --> 00:21:30.740
- Sorry about that.

00:21:30.740 --> 00:21:32.540
Did the light bulb break or something?

00:21:32.540 --> 00:21:34.140
- It does seem to have just died, yeah.

00:21:34.140 --> 00:21:36.100
I'm not really sure why.

00:21:36.100 --> 00:21:38.020
- It doesn't happen as much as it used to, right?

00:21:38.020 --> 00:21:41.900
Now we have like LED and other stuff that lasts longer.

00:21:41.900 --> 00:21:42.860
- But if it was ever gonna die,

00:21:42.860 --> 00:21:44.700
it would be now when I need it, so.

00:21:44.700 --> 00:21:46.020
- Yeah, of course it would.

00:21:46.020 --> 00:21:47.020
- That's guaranteed.

00:21:47.020 --> 00:21:48.660
- Of course it would.

00:21:48.660 --> 00:21:50.360
All right, no worries, no worries.

00:21:50.360 --> 00:21:52.900
All right, so you get this Auth user back.

00:21:52.900 --> 00:21:54.100
What is this Auth user?

00:21:54.100 --> 00:21:57.820
It's not like out of your database, right?

00:21:57.820 --> 00:21:59.460
It's some--

00:21:59.460 --> 00:22:01.700
- Yeah, yeah, so by default,

00:22:01.700 --> 00:22:04.420
it just has a method to say

00:22:04.420 --> 00:22:08.140
whether the user is authenticated and to return their ID.

00:22:08.140 --> 00:22:10.860
But if you customize it, if you extend it,

00:22:10.860 --> 00:22:13.260
so what I typically do in my code base is I extend it

00:22:13.260 --> 00:22:16.900
and I add methods to return a model

00:22:16.900 --> 00:22:18.640
from the database, for example.

00:22:18.640 --> 00:22:21.780
- Okay, yeah, very cool.

00:22:21.780 --> 00:22:27.540
Nice, and there's a lot of fancy login off stuff,

00:22:27.540 --> 00:22:30.680
but nice session cookie.

00:22:31.620 --> 00:22:34.260
You know, it just works these days.

00:22:34.260 --> 00:22:35.980
It still works really well.

00:22:35.980 --> 00:22:36.820
- It does, yeah.

00:22:36.820 --> 00:22:41.700
Much simpler than JDBTs and less likely to go wrong, I think.

00:22:41.700 --> 00:22:45.220
- Yeah, I don't know.

00:22:45.220 --> 00:22:46.460
It's not exactly related,

00:22:46.460 --> 00:22:50.660
but I've had a lot of websites now

00:22:50.660 --> 00:22:52.260
have given up on passwords,

00:22:52.260 --> 00:22:53.100
but they don't use something new

00:22:53.100 --> 00:22:55.120
or they just decided like every time

00:22:55.120 --> 00:22:56.360
you wanna get to the site,

00:22:56.360 --> 00:22:59.340
you just, we're gonna email you a code and you enter it.

00:22:59.340 --> 00:23:02.420
It's like, when did that become the way

00:23:02.420 --> 00:23:03.660
we're gonna log into everything?

00:23:03.660 --> 00:23:04.760
It's driving me crazy.

00:23:04.760 --> 00:23:08.220
So some good old username password,

00:23:08.220 --> 00:23:10.620
we're gonna store your ID in a cookie.

00:23:10.620 --> 00:23:12.500
- I've been-- - Warms the heart.

00:23:12.500 --> 00:23:15.500
- But I've been playing with the web auth

00:23:15.500 --> 00:23:18.680
and little USB keys and such recently.

00:23:18.680 --> 00:23:21.020
I quite like it.

00:23:21.020 --> 00:23:23.700
I think it might be a bit complex still.

00:23:23.700 --> 00:23:25.700
It's a little tricky to get working,

00:23:25.700 --> 00:23:29.140
but yeah, I think that's probably the future,

00:23:29.140 --> 00:23:30.180
to be honest with you.

00:23:30.180 --> 00:23:31.780
- Yeah, the site just sees like,

00:23:31.780 --> 00:23:34.780
yeah, you got the right hardware thing, off we go.

00:23:34.780 --> 00:23:37.220
Peter knows you're there, something like that, right?

00:23:37.220 --> 00:23:38.580
- Yeah, yeah.

00:23:38.580 --> 00:23:41.860
- Nice, okay, so people need to deal with users.

00:23:41.860 --> 00:23:46.140
This is not about storing them in the database,

00:23:46.140 --> 00:23:48.700
encrypting, hashing their passwords

00:23:48.700 --> 00:23:51.060
or those types of algorithms.

00:23:51.060 --> 00:23:54.780
It's really just about the web browser exchange

00:23:54.780 --> 00:23:56.500
that involves setting a cookie when you're logged in

00:23:56.500 --> 00:23:57.780
and getting it back and make sure

00:23:57.780 --> 00:23:59.860
it's not tampered with, right?

00:23:59.860 --> 00:24:01.580
- Yep, exactly that, yeah.

00:24:01.580 --> 00:24:05.700
Yeah, yeah, so what it does is it stores the value,

00:24:05.700 --> 00:24:09.100
like here, the number two is the ID for the user.

00:24:09.100 --> 00:24:12.340
So it stores that in the cookie in plain text,

00:24:12.340 --> 00:24:14.300
but then cryptographically signs it.

00:24:14.300 --> 00:24:17.700
So you don't wanna store anything sensitive in the cookie

00:24:17.700 --> 00:24:19.340
if you're worried about it being read,

00:24:19.340 --> 00:24:21.620
but you can store identifiers, et cetera,

00:24:21.620 --> 00:24:23.700
and know that it hasn't been tampered with.

00:24:23.700 --> 00:24:24.540
- Yeah, that's the thing.

00:24:24.540 --> 00:24:26.780
It's not gonna harm you to know

00:24:26.780 --> 00:24:31.780
that your user ID is two or 75117 or whatever,

00:24:31.780 --> 00:24:35.940
but if it's two, what's to stop somebody from going,

00:24:35.940 --> 00:24:38.500
let me change that to a three and see what happens.

00:24:38.500 --> 00:24:41.940
Oh, look, I'm an admin, how cool is that?

00:24:41.940 --> 00:24:43.340
Right, that's the problem

00:24:43.340 --> 00:24:46.540
that you're trying to solve with secure, right?

00:24:46.540 --> 00:24:48.140
- Exactly, yeah.

00:24:48.140 --> 00:24:49.080
- Yeah, cool.

00:24:49.080 --> 00:24:52.380
From my side, I bake that thing in myself,

00:24:52.380 --> 00:24:55.060
but having an extension that just does it,

00:24:55.060 --> 00:24:56.700
that sounds better.

00:24:56.700 --> 00:24:57.820
- Yeah, so the nice thing,

00:24:57.820 --> 00:25:00.460
well, I took a bit of interest.

00:25:00.460 --> 00:25:01.940
I think it's changed now with Flask login,

00:25:01.940 --> 00:25:04.180
but a couple of the areas where I wanted to improve

00:25:04.180 --> 00:25:09.180
is it does same site settings on the cookie by default.

00:25:09.180 --> 00:25:11.620
So it'll start with the strict,

00:25:11.620 --> 00:25:13.780
and then you can play around and go down to lax

00:25:13.780 --> 00:25:17.940
if you so need, but it also has the special,

00:25:17.940 --> 00:25:19.860
it allows the special host,

00:25:19.860 --> 00:25:22.420
you know, the double underscore host prefixes on the name

00:25:22.420 --> 00:25:24.380
and stuff like that.

00:25:24.380 --> 00:25:25.940
Although I don't think in reality

00:25:25.940 --> 00:25:27.940
that adds that much to your security,

00:25:27.940 --> 00:25:31.140
but it's kind of a safety net in some respects.

00:25:31.140 --> 00:25:33.700
- Yeah, sometimes, well, also it becomes a hassle

00:25:33.700 --> 00:25:35.220
when you're doing development

00:25:35.220 --> 00:25:37.540
'cause your host is local host,

00:25:37.540 --> 00:25:40.060
and you're saying it has to be on mysite.com,

00:25:40.060 --> 00:25:41.620
and like, well, I can't log in anymore,

00:25:41.620 --> 00:25:42.940
so then you've got to have local host,

00:25:42.940 --> 00:25:43.940
and then, I don't know,

00:25:43.940 --> 00:25:47.480
it doesn't feel super tamper resistant to me either.

00:25:47.480 --> 00:25:53.660
Are you familiar with securepy?

00:25:53.660 --> 00:25:55.060
There we go.

00:25:55.060 --> 00:25:58.140
- Yeah, so this, that's a lot of-

00:25:58.140 --> 00:26:00.100
- This is an interesting project too.

00:26:00.100 --> 00:26:01.380
Oh, it's archives.

00:26:01.380 --> 00:26:02.700
Oh, sadly.

00:26:02.700 --> 00:26:03.540
Is there a new one?

00:26:03.540 --> 00:26:05.380
No, but I think it still works.

00:26:05.380 --> 00:26:08.540
I'm not sure what, it's been deprecated.

00:26:08.540 --> 00:26:13.380
Yeah, mostly fresh.

00:26:13.380 --> 00:26:16.140
Okay, well, I guess that's not being used as well,

00:26:16.140 --> 00:26:17.580
used that much, but it used to be a way

00:26:17.580 --> 00:26:20.460
to kind of set all those different things, I believe.

00:26:20.460 --> 00:26:22.860
Or is this a different, this is a totally different-

00:26:22.860 --> 00:26:24.500
- I thought you were going to say secure headers,

00:26:24.500 --> 00:26:26.700
I think, is it called that?

00:26:26.700 --> 00:26:30.660
- I think, oh, I think it's just called secure,

00:26:30.660 --> 00:26:31.540
is what it is.

00:26:31.540 --> 00:26:33.300
Yeah, that's the one.

00:26:33.300 --> 00:26:35.340
So, sorry, that was some other random thing

00:26:35.340 --> 00:26:37.660
that we found that was called securepy, but not.

00:26:37.660 --> 00:26:39.940
This thing is still alive, right?

00:26:39.940 --> 00:26:42.380
And supports Court, which is why I brought it up

00:26:42.380 --> 00:26:45.140
amongst like lots of other frameworks.

00:26:45.140 --> 00:26:46.420
But yeah, you're going to tell people about this.

00:26:46.420 --> 00:26:47.260
This is cool.

00:26:47.260 --> 00:26:51.380
- Yeah, yeah, so, I mean,

00:26:51.380 --> 00:26:54.380
I pretty much end up adding all of these by hand.

00:26:54.380 --> 00:26:57.820
So yeah, most of the headers you want to add,

00:26:57.820 --> 00:26:59.300
and if you ever do a pen test, right,

00:26:59.300 --> 00:27:01.060
they're going to, if you don't have these headers

00:27:01.060 --> 00:27:03.340
by default, there's going to be a finding straight away.

00:27:03.340 --> 00:27:06.420
So yeah, you just add all the ones you want, really.

00:27:06.420 --> 00:27:08.660
- Right, for one of the ones that you might not think of

00:27:08.660 --> 00:27:10.860
that you should probably have,

00:27:10.860 --> 00:27:13.660
unless you have a really specific use case,

00:27:13.660 --> 00:27:17.900
is what if somebody created a site,

00:27:17.900 --> 00:27:20.020
you know, you had service.com

00:27:20.020 --> 00:27:23.700
and they had service.io or whatever,

00:27:23.700 --> 00:27:25.580
and they bought that,

00:27:25.580 --> 00:27:30.300
and then they could put your,

00:27:30.300 --> 00:27:32.060
whatever their URL is,

00:27:32.060 --> 00:27:37.060
just into your site as a 100% width and height iframe, right?

00:27:37.060 --> 00:27:39.260
And then they just capture all the keystrokes.

00:27:39.260 --> 00:27:42.340
It's like, huh, you're typing into your thing.

00:27:42.340 --> 00:27:45.460
It looks like your thing, your data is there.

00:27:45.460 --> 00:27:46.980
You don't want people to do that to your site

00:27:46.980 --> 00:27:49.460
or just randomly host your site in their site.

00:27:49.460 --> 00:27:53.020
So for example, this secure thing will set X frame options

00:27:53.020 --> 00:27:54.020
to same origin.

00:27:54.020 --> 00:27:56.100
So you can't embed.

00:27:56.100 --> 00:27:58.220
Your site can no longer be embedded by default.

00:27:58.220 --> 00:27:59.700
You've got to choose to let it be embedded.

00:27:59.700 --> 00:28:03.980
All those kinds of things, right, are really nice here.

00:28:03.980 --> 00:28:06.780
- Actually got caught out by that many, many years ago.

00:28:06.780 --> 00:28:11.580
I built an image photo editor in the browser

00:28:11.580 --> 00:28:14.100
and it started to get quite a lot of use.

00:28:14.100 --> 00:28:15.060
And I was like, oh, this is great.

00:28:15.060 --> 00:28:17.860
And then I realized it was on somebody else's domain,

00:28:17.860 --> 00:28:19.060
basically in an iframe.

00:28:19.060 --> 00:28:21.940
- They're like, look at our amazing editor

00:28:21.940 --> 00:28:25.260
that we're getting Google AdWord money for or whatever.

00:28:25.260 --> 00:28:27.020
Right? - Yeah, exactly.

00:28:27.020 --> 00:28:30.780
- Yeah, so a little bit of a header action

00:28:30.780 --> 00:28:31.860
will shut that stuff down.

00:28:31.860 --> 00:28:33.820
But I mean, I didn't know how to do it

00:28:33.820 --> 00:28:35.820
until I kind of dug into it more, right?

00:28:35.820 --> 00:28:39.060
Or you find out your site somewhere else.

00:28:39.060 --> 00:28:42.940
- I think it's like a lot of it seems to be,

00:28:42.940 --> 00:28:46.540
yeah, learn with experience, I guess, isn't it?

00:28:46.540 --> 00:28:47.740
- Yeah, exactly. - Or on the job.

00:28:47.740 --> 00:28:49.980
- That only happens once when you see your web app

00:28:49.980 --> 00:28:52.700
in somebody else's site embedded as an iframe.

00:28:52.700 --> 00:28:55.260
You're like, no, this is not gonna be okay.

00:28:55.260 --> 00:28:59.500
Awesome, all right, so that was court auth

00:28:59.500 --> 00:29:01.220
as well as a secure thing.

00:29:01.220 --> 00:29:06.740
Next, I guess kind of related to security, maybe.

00:29:06.740 --> 00:29:07.580
- All right, I would say so.

00:29:07.580 --> 00:29:10.060
- Believe me, someone, rate limiting.

00:29:10.060 --> 00:29:11.820
- Yeah, 'cause I mean, on a login route,

00:29:11.820 --> 00:29:13.900
you'd wanna put a rate limiter on straightaway

00:29:13.900 --> 00:29:16.180
to stop any kind of brute forcing anyway, right?

00:29:16.180 --> 00:29:17.220
- Oh, absolutely.

00:29:17.220 --> 00:29:22.020
And the ability to do really nice rate limiting

00:29:22.020 --> 00:29:27.900
in ways that punish the rate limit breaker

00:29:27.900 --> 00:29:36.180
is so much easier on async things like court, right?

00:29:36.180 --> 00:29:40.500
Because if you don't wanna be overwhelmed by them,

00:29:40.500 --> 00:29:42.500
a lot of times you just say, you send them

00:29:42.500 --> 00:29:44.340
some kind of response code item

00:29:44.340 --> 00:29:45.820
or the status code is like too many requests

00:29:45.820 --> 00:29:47.780
or something like some four.

00:29:47.780 --> 00:29:48.980
- 429.

00:29:48.980 --> 00:29:50.580
- Yeah, there you go.

00:29:50.580 --> 00:29:51.860
You can just send them back straightaway,

00:29:51.860 --> 00:29:56.860
but there's no cost for them to receive that 429.

00:29:56.860 --> 00:29:59.020
They're just like super quick going.

00:29:59.020 --> 00:30:00.660
If you wanted to say,

00:30:00.660 --> 00:30:02.340
because maybe they're trying to guess passwords

00:30:02.340 --> 00:30:03.180
or something, you're like,

00:30:03.180 --> 00:30:05.580
let's not let them guess so quickly.

00:30:05.580 --> 00:30:09.820
So you can sleep and then respond to them

00:30:09.820 --> 00:30:11.180
in 10 seconds later.

00:30:11.180 --> 00:30:13.140
So it's like, oh, well, I don't know.

00:30:13.140 --> 00:30:14.260
Is the password good or not?

00:30:14.260 --> 00:30:15.500
Why don't you wait around for a while

00:30:15.500 --> 00:30:17.300
instead of going somewhere else?

00:30:17.300 --> 00:30:19.260
With a asyncio based website,

00:30:19.260 --> 00:30:22.020
that's await asyncio.sleep,

00:30:22.020 --> 00:30:26.540
nearly zero cost to you other maybe an open socket, right?

00:30:26.540 --> 00:30:30.300
And you can just like send them to sort of time black holes,

00:30:30.300 --> 00:30:31.140
super easy.

00:30:31.140 --> 00:30:32.300
Whereas like a WSGI app,

00:30:32.300 --> 00:30:34.700
you're blocking a request and you can only handle so many

00:30:34.700 --> 00:30:36.400
and all that kind of stuff, right?

00:30:36.400 --> 00:30:41.980
- Yeah, so this one sadly doesn't do any of that fun.

00:30:41.980 --> 00:30:44.140
- It doesn't have punishment built into it.

00:30:44.140 --> 00:30:45.300
(laughing)

00:30:45.300 --> 00:30:47.300
- Tell us how it works and what it does.

00:30:47.300 --> 00:30:49.940
- I was gonna say, I think there was an article today

00:30:49.940 --> 00:30:51.980
suggesting you should serve zip bombs or something

00:30:51.980 --> 00:30:54.940
to like unpleasant requesters,

00:30:54.940 --> 00:30:55.780
but yeah, it doesn't do any of that.

00:30:55.780 --> 00:30:58.380
- Yeah, send them like a hundred gigs back.

00:30:58.380 --> 00:31:01.500
- So this-

00:31:01.500 --> 00:31:03.300
- That would be good, actually.

00:31:03.300 --> 00:31:08.220
- Yeah, so this one implements rate limiting

00:31:08.220 --> 00:31:11.900
as it's defined, like a user would be allowed

00:31:11.900 --> 00:31:14.100
to do so many requests in a certain time.

00:31:14.100 --> 00:31:18.660
And also implements the RFC for the like headers

00:31:18.660 --> 00:31:20.620
that you're supposed to send back

00:31:20.620 --> 00:31:23.300
when they go over the rate limits.

00:31:23.300 --> 00:31:24.540
So they know when they can,

00:31:24.540 --> 00:31:26.700
or when the client can then request again.

00:31:26.700 --> 00:31:27.520
So-

00:31:27.520 --> 00:31:28.360
- I see, like you've made too many,

00:31:28.360 --> 00:31:30.220
rather than just saying too many requests,

00:31:30.220 --> 00:31:32.060
try again later, you're like,

00:31:32.060 --> 00:31:33.580
and you'll be reset in five minutes

00:31:33.580 --> 00:31:36.540
or like there's a proper way to communicate that.

00:31:36.540 --> 00:31:37.420
- Yeah, yeah.

00:31:37.420 --> 00:31:40.100
But the thing I find really interesting about this,

00:31:40.100 --> 00:31:41.420
which I don't know if everyone does,

00:31:41.420 --> 00:31:42.660
but I'll say anyway,

00:31:42.660 --> 00:31:45.300
but most people implement rate limiting

00:31:45.300 --> 00:31:47.180
like a leaky bucket or something like that.

00:31:47.180 --> 00:31:48.980
These are the standard algorithms.

00:31:48.980 --> 00:31:51.860
And typically that requires you to store two variables

00:31:51.860 --> 00:31:55.340
per key, per rate limit you're looking at.

00:31:55.340 --> 00:31:56.220
But there's a,

00:31:56.220 --> 00:31:58.180
I think it's not a very well-known algorithm

00:31:58.180 --> 00:32:01.100
called the generic cell rate algorithm.

00:32:01.100 --> 00:32:02.300
I think that's right.

00:32:02.300 --> 00:32:05.460
And this allows you to store one algorithm,

00:32:05.460 --> 00:32:07.260
one variable per rate limit.

00:32:07.260 --> 00:32:10.060
And it's really quite nice, the algorithm.

00:32:10.060 --> 00:32:11.700
It's very, when you get it,

00:32:11.700 --> 00:32:13.100
it's really intuitive and clean.

00:32:13.100 --> 00:32:15.420
You basically, what you store is when you expect

00:32:15.420 --> 00:32:17.500
the next request to arrive.

00:32:17.500 --> 00:32:19.660
And if the request arrives too early,

00:32:19.660 --> 00:32:20.700
then you just rate limit it.

00:32:20.700 --> 00:32:22.540
And yeah, it's really clever, I think.

00:32:22.540 --> 00:32:24.820
So I'd like more people to know about it basically,

00:32:24.820 --> 00:32:26.580
'cause it's a really nice solution.

00:32:26.580 --> 00:32:29.960
- It's a great solution, yeah.

00:32:29.960 --> 00:32:36.980
So this, it doesn't slow them down.

00:32:36.980 --> 00:32:39.100
It just tells them that they've gone over the limit

00:32:39.100 --> 00:32:40.740
in this particular one, right?

00:32:40.740 --> 00:32:42.460
- Yeah, so-- - If you expect it

00:32:42.460 --> 00:32:44.780
to be in five seconds, you don't just sleep for four

00:32:44.780 --> 00:32:46.460
and then let it in.

00:32:46.460 --> 00:32:48.900
- No, no, so the idea is that this decorator

00:32:48.900 --> 00:32:52.900
is much less costly in terms of your compute

00:32:52.900 --> 00:32:54.220
than your function, your handler.

00:32:54.220 --> 00:32:58.260
So this decorator will just send back a 429 very quickly

00:32:58.260 --> 00:33:00.820
and never touch your route instead.

00:33:00.820 --> 00:33:02.140
- Sure.

00:33:02.140 --> 00:33:03.060
Okay, interesting.

00:33:03.060 --> 00:33:05.220
I'm starting to think about maybe

00:33:05.220 --> 00:33:08.100
if you have a Sink and Await available

00:33:08.100 --> 00:33:10.820
and your algorithm told you when the next one was coming,

00:33:10.820 --> 00:33:14.140
you could just sleep them until the next one's allowed,

00:33:14.140 --> 00:33:17.340
potentially, if it wasn't 10 minutes, right?

00:33:17.340 --> 00:33:18.740
That would be-- - Potentially.

00:33:18.740 --> 00:33:21.180
The client would, I mean, it depends on your rate limits,

00:33:21.180 --> 00:33:23.900
but there's a good chance the client would time out, right?

00:33:23.900 --> 00:33:25.540
- Right, it'd have to be like five seconds

00:33:25.540 --> 00:33:27.940
or something real short, right?

00:33:27.940 --> 00:33:30.300
I don't want more than one request a second

00:33:30.300 --> 00:33:33.540
type of rate limiting, not like five per hour,

00:33:33.540 --> 00:33:35.620
'cause then they would definitely time out.

00:33:36.300 --> 00:33:38.180
- Yeah, there's a lot of things you can do with this.

00:33:38.180 --> 00:33:40.860
So basically the way it works for people listening

00:33:40.860 --> 00:33:44.060
is you can set it up on the app,

00:33:44.060 --> 00:33:46.980
so the entire app itself,

00:33:46.980 --> 00:33:48.700
all the requests to it are limited, right?

00:33:48.700 --> 00:33:53.300
Or you can go and put kind of like tenacity.

00:33:53.300 --> 00:33:58.060
You can put the decorator exactly on a particular endpoint

00:33:58.060 --> 00:34:01.060
and then set the details for that one, right?

00:34:01.060 --> 00:34:03.740
- Yep, so a bit like calls, you can do it per app,

00:34:03.740 --> 00:34:06.500
per blueprint, or per route, depending on what you need.

00:34:06.500 --> 00:34:09.820
- Okay, and here you say rate limit one

00:34:09.820 --> 00:34:11.900
and then a time delta, what's the one?

00:34:11.900 --> 00:34:13.660
- It's the count.

00:34:13.660 --> 00:34:17.500
So you might want, so for a rate of one per second,

00:34:17.500 --> 00:34:20.180
you might want to express that as 10 per 10 seconds,

00:34:20.180 --> 00:34:22.260
so it would be instead of the one, the 10.

00:34:22.260 --> 00:34:24.620
And that allows you a bit of bursting, if you will,

00:34:24.620 --> 00:34:27.020
so that 10 can come in one second

00:34:27.020 --> 00:34:28.180
or it can be spread over.

00:34:28.180 --> 00:34:31.140
So yeah, it allows you to express the rate limits

00:34:31.140 --> 00:34:33.180
in different ways, really.

00:34:33.180 --> 00:34:38.060
- Guessing this probably bypasses the static files.

00:34:38.060 --> 00:34:38.900
Is that true?

00:34:38.900 --> 00:34:42.420
- If you do the default limits,

00:34:42.420 --> 00:34:44.620
I think that applies to static files as well.

00:34:44.620 --> 00:34:45.460
- Yeah.

00:34:45.460 --> 00:34:47.500
- I can't remember now, but I think that's what it does.

00:34:47.500 --> 00:34:52.500
- You might have six CSS files, 20 images, and so on, right?

00:34:52.500 --> 00:34:57.020
And like one page request might blast us all back super quick.

00:34:57.020 --> 00:34:59.500
- Yeah, yeah, you certainly want a higher limit.

00:34:59.500 --> 00:35:02.420
- Yeah, but presumably you're using something like Nginx

00:35:02.420 --> 00:35:05.020
or whatever, or maybe even a CDN,

00:35:05.020 --> 00:35:07.460
and then all those other things I described

00:35:07.460 --> 00:35:10.920
don't actually go through the Python app, ideally.

00:35:10.920 --> 00:35:13.620
- Yeah, yeah.

00:35:13.620 --> 00:35:16.420
I mean, it does work if you do it for the Python app as well.

00:35:16.420 --> 00:35:18.380
So up to you, I think, yeah.

00:35:18.380 --> 00:35:19.220
- Indeed.

00:35:19.220 --> 00:35:20.040
All right.

00:35:20.040 --> 00:35:25.700
WTForms, next up, QuartWTF.

00:35:25.700 --> 00:35:26.980
What is this?

00:35:26.980 --> 00:35:30.900
- So this was, I'm tempted to say

00:35:30.900 --> 00:35:34.220
it's been a bit less popular recently

00:35:34.220 --> 00:35:36.020
with the front-end frameworks and stuff.

00:35:36.020 --> 00:35:39.460
But when you did template rendering,

00:35:39.460 --> 00:35:40.660
you'd render the form,

00:35:40.660 --> 00:35:43.140
then you'd do the validation in your Python framework

00:35:43.140 --> 00:35:45.220
for that form, and you pass back the errors.

00:35:45.220 --> 00:35:48.780
And basically, the WTF framework

00:35:48.780 --> 00:35:50.740
would do a lot of that for you.

00:35:50.740 --> 00:35:53.660
So you could just put in, like in your template,

00:35:53.660 --> 00:35:56.580
an input box, and it would do the errors

00:35:56.580 --> 00:35:58.420
and do the, like you can see here,

00:35:58.420 --> 00:36:00.820
you could do the CSRF tokens

00:36:00.820 --> 00:36:03.860
and render all the HTML for the labels

00:36:03.860 --> 00:36:05.460
and the actual input boxes

00:36:05.460 --> 00:36:07.660
and get it all hooked up very easily.

00:36:07.660 --> 00:36:09.740
And that's what it does, yeah.

00:36:09.740 --> 00:36:10.580
It does all that.

00:36:10.580 --> 00:36:12.100
And the validation, when it comes to the back-end as well,

00:36:12.100 --> 00:36:14.420
I think you can just do form.validate on submit

00:36:14.420 --> 00:36:15.420
or something like that.

00:36:15.420 --> 00:36:16.260
- Yeah.

00:36:16.260 --> 00:36:17.100
- Yeah, there we are.

00:36:17.100 --> 00:36:18.060
And that's it.

00:36:18.060 --> 00:36:19.380
That's your whole validation.

00:36:19.380 --> 00:36:21.140
So it saves a lot of effort, really.

00:36:21.140 --> 00:36:23.740
- Yeah, that's pretty handy.

00:36:23.740 --> 00:36:28.740
I'm guessing you're getting generally generic HTML

00:36:28.740 --> 00:36:30.780
out on the client side

00:36:30.780 --> 00:36:33.340
so you can CSS style it up while you like.

00:36:33.340 --> 00:36:36.020
- Yeah, I think it's, I can't remember exactly.

00:36:36.020 --> 00:36:38.100
I think WTF might have hooks

00:36:38.100 --> 00:36:40.620
so you can put styling directly in.

00:36:40.620 --> 00:36:44.220
But yeah, it's pretty generic as I remember it.

00:36:44.220 --> 00:36:47.140
- Yeah, some frameworks require explicit stuff

00:36:47.140 --> 00:36:49.660
on say the input box,

00:36:49.660 --> 00:36:51.700
like form-control would be bootstrap

00:36:51.700 --> 00:36:53.420
and things like that, right?

00:36:53.420 --> 00:36:56.180
There's probably some way to set a class.

00:36:56.180 --> 00:36:59.260
- Yeah, I think there's a class name argument.

00:36:59.260 --> 00:37:02.340
I'm trying to, I may have misremembered that.

00:37:02.340 --> 00:37:03.860
I think it was called class name.

00:37:03.860 --> 00:37:05.380
- Yeah, sure.

00:37:05.380 --> 00:37:06.220
Nice.

00:37:06.220 --> 00:37:07.040
Yeah, I haven't used this really,

00:37:07.040 --> 00:37:10.460
but I've used it, something kind of like it in framework,

00:37:10.460 --> 00:37:11.940
other frameworks.

00:37:11.940 --> 00:37:16.340
In the end, I ended up just going back to writing my own HTML

00:37:16.340 --> 00:37:21.340
because I felt like I was getting 60% help

00:37:21.820 --> 00:37:25.580
but maybe 30% struggle to fight the system.

00:37:25.580 --> 00:37:26.420
You know what I mean?

00:37:26.420 --> 00:37:27.240
And then like, all right, you know what?

00:37:27.240 --> 00:37:28.920
I just know this stuff well enough.

00:37:28.920 --> 00:37:30.700
I'm just gonna do it myself.

00:37:30.700 --> 00:37:33.420
But if you don't wanna mess with it,

00:37:33.420 --> 00:37:35.540
you want some sort of quick development type of thing

00:37:35.540 --> 00:37:37.660
or maybe you're not super familiar with HTML,

00:37:37.660 --> 00:37:39.620
this will definitely help, right?

00:37:39.620 --> 00:37:40.460
- Absolutely, yeah.

00:37:40.460 --> 00:37:42.900
I think you can also write your own HTML instead

00:37:42.900 --> 00:37:45.260
and just let it do the Python validation part.

00:37:45.260 --> 00:37:46.100
- If you so wish.

00:37:46.100 --> 00:37:47.220
- As long as it lines up, yeah, sure.

00:37:47.220 --> 00:37:48.040
- Yeah, yeah.

00:37:48.040 --> 00:37:49.500
I think it's just the name that matters.

00:37:49.500 --> 00:37:51.820
Like your input has to have the right name.

00:37:51.820 --> 00:37:52.660
'Cause the CSRF--

00:37:52.660 --> 00:37:53.500
- I didn't know, right?

00:37:53.500 --> 00:37:55.220
It couldn't know.

00:37:55.220 --> 00:37:56.060
- Yeah, exactly.

00:37:56.060 --> 00:38:01.860
I was just gonna say the CSRF part is quite easy and nice.

00:38:01.860 --> 00:38:03.940
That just puts a hidden input in with the token in

00:38:03.940 --> 00:38:05.660
and it's all taken care of for you.

00:38:05.660 --> 00:38:07.620
So that can be quite nice.

00:38:07.620 --> 00:38:08.520
- Yeah, excellent.

00:38:08.520 --> 00:38:11.820
All right, schema.

00:38:11.820 --> 00:38:14.140
- So schema--

00:38:14.140 --> 00:38:15.660
- For APIs, right?

00:38:15.660 --> 00:38:18.380
- Yeah, so it's possibly the kind of more,

00:38:18.380 --> 00:38:21.180
I'll say modern, but I'm not sure if that's the word I mean.

00:38:21.180 --> 00:38:23.820
But yeah, so as an industry,

00:38:23.820 --> 00:38:26.260
we seem to have moved away from the forms of old

00:38:26.260 --> 00:38:28.940
and form data to sending JSON all the time, right?

00:38:28.940 --> 00:38:31.500
And Quartz schema is about saying,

00:38:31.500 --> 00:38:35.900
I expect this structure to arrive, validate it for me.

00:38:35.900 --> 00:38:38.460
So it's a very similar,

00:38:38.460 --> 00:38:39.740
it's very similar to FastAPI,

00:38:39.740 --> 00:38:41.580
which I'm sure a lot of people know.

00:38:41.580 --> 00:38:44.860
- Okay, that's pretty interesting.

00:38:45.860 --> 00:38:48.860
- So like I say, very much like FastAPI,

00:38:48.860 --> 00:38:52.900
it kind of brings in some frameworks called model binding,

00:38:52.900 --> 00:38:55.980
where you can say there's an argument and it's of this type.

00:38:55.980 --> 00:38:58.860
And then like a class,

00:38:58.860 --> 00:39:00.500
a data class or something along those lines,

00:39:00.500 --> 00:39:02.740
and it'll, here's a data class,

00:39:02.740 --> 00:39:05.540
and it'll take all the inputs, right?

00:39:05.540 --> 00:39:08.060
Query strings or route parameters, whatever,

00:39:08.060 --> 00:39:09.580
and parse them and map them in there,

00:39:09.580 --> 00:39:11.060
and then just give you an object and go,

00:39:11.060 --> 00:39:12.420
here, it's right here.

00:39:12.420 --> 00:39:15.140
- Yeah, so for this library, it supports,

00:39:15.140 --> 00:39:17.380
I've used all the documentation as data class,

00:39:17.380 --> 00:39:19.420
but it's by Pydantic based at the moment.

00:39:19.420 --> 00:39:21.780
And because of the, it's not actually the typing,

00:39:21.780 --> 00:39:23.060
so there's no dependency injection

00:39:23.060 --> 00:39:24.900
or anything like that with FastAPI,

00:39:24.900 --> 00:39:27.020
but it uses the decorator validate request

00:39:27.020 --> 00:39:28.620
and you pass it the model.

00:39:28.620 --> 00:39:30.620
And if the request that arrives

00:39:30.620 --> 00:39:34.340
can be turned into that structure and validated as such,

00:39:34.340 --> 00:39:36.220
then your function will be called

00:39:36.220 --> 00:39:37.900
and that'd be passed in as data.

00:39:37.900 --> 00:39:40.180
If it can't, then the class will be called.

00:39:40.180 --> 00:39:41.500
- Passed in as data.

00:39:41.500 --> 00:39:44.460
If it can't, then the client will get a 400 response.

00:39:44.460 --> 00:39:47.500
- Bad request, bad data.

00:39:47.500 --> 00:39:48.340
- Exactly, yeah.

00:39:48.340 --> 00:39:53.940
- Okay, what's the, so validate request,

00:39:53.940 --> 00:39:55.820
makes sense to me.

00:39:55.820 --> 00:39:58.940
It means like, here's your structured object that comes in,

00:39:58.940 --> 00:40:00.420
passed in as data.

00:40:00.420 --> 00:40:02.100
What's validate response?

00:40:02.100 --> 00:40:06.380
- So it's the same concept, but going back.

00:40:06.380 --> 00:40:11.020
So if you return like a to do class instance itself,

00:40:11.020 --> 00:40:12.660
then there's no validation to do, right?

00:40:12.660 --> 00:40:14.820
You've already said it's the right structure,

00:40:14.820 --> 00:40:17.260
but often you'd return a dictionary

00:40:17.260 --> 00:40:18.420
or something like that, right?

00:40:18.420 --> 00:40:20.900
And expect it to go back as JSON.

00:40:20.900 --> 00:40:22.140
What this will do is it will say,

00:40:22.140 --> 00:40:25.020
I'll check that dictionary is of the right structure.

00:40:25.020 --> 00:40:28.580
And if it isn't, it throws a 500 response to the client

00:40:28.580 --> 00:40:30.980
and an error that you can go and view

00:40:30.980 --> 00:40:33.340
in whatever error monitoring tool you've got.

00:40:33.340 --> 00:40:35.460
- Sure, okay, that's excellent.

00:40:35.460 --> 00:40:36.940
So I see you have data classes here

00:40:36.940 --> 00:40:39.580
and you said it also works with the Pydantic.

00:40:39.580 --> 00:40:41.180
- Yeah, so, well, actually a shout out

00:40:41.180 --> 00:40:43.300
to one of your previous recent streams

00:40:43.300 --> 00:40:46.060
is I'm working on msgspec support at the moment

00:40:46.060 --> 00:40:47.420
'cause I actually quite like that.

00:40:47.420 --> 00:40:48.500
So-- - Message spec,

00:40:48.500 --> 00:40:49.980
that's interesting.

00:40:49.980 --> 00:40:52.740
- So it will support Pydantic and msgspec.

00:40:52.740 --> 00:40:55.060
So you'd be able to use Pydantic, data classes,

00:40:55.060 --> 00:40:56.940
attas, msgspec stuff,

00:40:56.940 --> 00:40:59.940
well, the msgspec struct.

00:40:59.940 --> 00:41:01.940
I think that's probably all of it,

00:41:01.940 --> 00:41:02.780
but yeah, quite a bit choice there.

00:41:02.780 --> 00:41:04.660
- Yeah, the struct classes really,

00:41:04.660 --> 00:41:08.660
they've done some super interesting things here

00:41:08.660 --> 00:41:13.660
to make these data classes almost better for performance

00:41:13.660 --> 00:41:16.180
than even regular, and for memory and stuff,

00:41:16.180 --> 00:41:17.460
than regular Python classes.

00:41:17.460 --> 00:41:18.940
It's quite impressive.

00:41:18.940 --> 00:41:20.300
- Yes, absolutely, yeah.

00:41:20.300 --> 00:41:22.060
- Yeah, for people who don't know,

00:41:22.060 --> 00:41:25.100
maybe just tell them real quick what msgspec is.

00:41:25.100 --> 00:41:27.780
They probably know data classes in Pydantic.

00:41:27.780 --> 00:41:30.220
- Yeah, so much like data classes,

00:41:30.220 --> 00:41:31.620
and you can see here, it's a nice,

00:41:31.620 --> 00:41:33.900
simple way of creating a class

00:41:33.900 --> 00:41:36.700
with various things created for you.

00:41:36.700 --> 00:41:39.180
But it also, much like Pydantic,

00:41:39.180 --> 00:41:41.260
will do validation when you try,

00:41:41.260 --> 00:41:43.780
if you use one of its functions to convert raw data

00:41:43.780 --> 00:41:46.060
like a dictionary into this type.

00:41:46.060 --> 00:41:48.660
And much like Pydantic as well,

00:41:48.660 --> 00:41:51.420
it also gives the ability to take this model

00:41:51.420 --> 00:41:54.060
and turn it into a open API,

00:41:54.060 --> 00:41:55.540
the JSON schema definition.

00:41:55.540 --> 00:41:57.780
And that's the final thing that Quartz schema does

00:41:57.780 --> 00:42:00.780
is once you've decorated all your routes,

00:42:00.780 --> 00:42:05.220
it will auto-generate a open API definition for you as well.

00:42:05.220 --> 00:42:07.660
- Oh, well, okay.

00:42:07.660 --> 00:42:11.620
Yeah, using Swagger/Docs.

00:42:11.620 --> 00:42:15.020
Okay.

00:42:15.020 --> 00:42:16.700
I think that's really nice, right?

00:42:16.700 --> 00:42:19.540
Like a lot of APIs just don't,

00:42:19.540 --> 00:42:21.700
they're like, "We're not gonna do that."

00:42:21.700 --> 00:42:23.860
Yeah, if they don't have something automated to do it.

00:42:23.860 --> 00:42:28.780
And having typed classes representing all your inbound

00:42:28.780 --> 00:42:30.700
and outbound data, pretty easy, right?

00:42:30.980 --> 00:42:32.980
- Yeah, I mean, it really helps with mypy, right?

00:42:32.980 --> 00:42:35.740
'Cause instead of having like your request.data

00:42:35.740 --> 00:42:37.580
or something like that, which is some dict

00:42:37.580 --> 00:42:40.300
that as far as mypy concerns can be anything,

00:42:40.300 --> 00:42:43.220
it must be a to-do instance in this function now.

00:42:43.220 --> 00:42:46.140
So yeah, really helps with your type checking.

00:42:46.140 --> 00:42:47.500
- Yeah, absolutely.

00:42:47.500 --> 00:42:49.220
All right, what do we got next?

00:42:49.220 --> 00:42:54.220
Sock from Miguel Grimberg, Flask WebSockets.

00:42:54.220 --> 00:42:59.620
- Yeah, so this one, there is an extension for,

00:42:59.620 --> 00:43:00.900
because this is one of the areas

00:43:00.900 --> 00:43:03.500
that Quark being natively async can just do itself.

00:43:03.500 --> 00:43:06.860
So a quarter, I think I described sometimes

00:43:06.860 --> 00:43:08.700
as a superset of Flask.

00:43:08.700 --> 00:43:10.580
'Cause it can do everything Flask can do.

00:43:10.580 --> 00:43:12.260
- The C++ of Flask.

00:43:12.260 --> 00:43:13.740
(laughing)

00:43:13.740 --> 00:43:14.580
- Yeah, exactly.

00:43:14.580 --> 00:43:17.460
- Awesome.

00:43:17.460 --> 00:43:22.460
So WebSockets kind of solve a problem

00:43:22.460 --> 00:43:24.940
that websites generally have not been able to do.

00:43:24.940 --> 00:43:26.700
Like once you make a request,

00:43:26.700 --> 00:43:28.260
usually there's the response and that's it.

00:43:28.260 --> 00:43:30.500
But what if the server,

00:43:30.500 --> 00:43:32.100
you wanna send more stuff to the server,

00:43:32.100 --> 00:43:34.220
server wants to send stuff out to you later.

00:43:34.220 --> 00:43:36.180
Like I started this job three seconds later,

00:43:36.180 --> 00:43:37.020
now it's done.

00:43:37.020 --> 00:43:42.020
Or this bidirectional exchange is really cool.

00:43:42.020 --> 00:43:46.700
But a lot of times I feel like it's a little over the top.

00:43:46.700 --> 00:43:48.660
Like a lot of times I think people maybe just want

00:43:48.660 --> 00:43:53.100
push notifications from the server and not true.

00:43:53.100 --> 00:43:54.700
Like let's have a conversation.

00:43:54.700 --> 00:43:56.100
I just need to know when this happens.

00:43:56.100 --> 00:43:58.020
Just let me know as soon as it's done.

00:43:58.020 --> 00:43:59.300
- Yeah, so you said.

00:43:59.300 --> 00:44:00.140
- Yeah, go ahead.

00:44:00.140 --> 00:44:01.580
- I was gonna say,

00:44:01.580 --> 00:44:02.740
server sent events,

00:44:02.740 --> 00:44:04.100
server sent events, sorry,

00:44:04.100 --> 00:44:06.140
seem to be not that well known,

00:44:06.140 --> 00:44:09.660
but yeah, probably described your usage really well.

00:44:09.660 --> 00:44:10.940
- That's exactly what I was getting at.

00:44:10.940 --> 00:44:13.060
So does core support SSE?

00:44:13.060 --> 00:44:14.980
Does it support server sent events?

00:44:14.980 --> 00:44:15.820
- Yeah, yeah.

00:44:15.820 --> 00:44:17.940
I think there's an extension for it,

00:44:17.940 --> 00:44:21.620
but in reality it's a very small bit of code you need.

00:44:21.620 --> 00:44:24.860
So it, yeah, I mean,

00:44:24.860 --> 00:44:27.100
'cause you literally return a response

00:44:27.100 --> 00:44:30.980
with a certain header and then you just return a,

00:44:30.980 --> 00:44:31.820
well, here we go.

00:44:31.820 --> 00:44:33.620
Here's the, there's an example in the documentation

00:44:33.620 --> 00:44:36.740
for core, but you just return a certain data structure

00:44:36.740 --> 00:44:38.180
and then you've got it, yeah.

00:44:38.180 --> 00:44:40.500
- Yeah, so I think that's,

00:44:40.500 --> 00:44:41.940
when people say they want WebSockets,

00:44:41.940 --> 00:44:44.220
I think most of the time this is what they want.

00:44:44.220 --> 00:44:45.180
They want the client,

00:44:45.180 --> 00:44:47.020
the server to call the client sometimes,

00:44:47.020 --> 00:44:48.820
not just the other way around.

00:44:48.820 --> 00:44:51.820
- Yeah, so I'm gonna go slightly off topic

00:44:51.820 --> 00:44:53.020
'cause it's not that interesting,

00:44:53.020 --> 00:44:54.340
but it's related to this,

00:44:54.340 --> 00:44:57.020
but one of the things I implemented in the Hypercorn

00:44:57.020 --> 00:44:59.140
'cause I find it really interesting is,

00:44:59.140 --> 00:45:02.460
I think two, no, it must be more like four years ago,

00:45:02.460 --> 00:45:05.060
they introduced WebSockets for HTTP/2.

00:45:05.060 --> 00:45:07.300
And of course, one of the reasons you want WebSockets

00:45:07.300 --> 00:45:09.100
because the cost of opening a connection

00:45:09.100 --> 00:45:10.900
for HTTP/1 is fairly expensive.

00:45:10.900 --> 00:45:13.220
So you can keep it open and do the bidirectional.

00:45:13.220 --> 00:45:14.500
But with HTTP/2,

00:45:14.500 --> 00:45:16.760
you don't even need an extra connection anymore.

00:45:16.760 --> 00:45:18.180
You can have your WebSocket stream

00:45:18.180 --> 00:45:20.540
on the same connection as all your requests as well.

00:45:20.540 --> 00:45:21.940
So it's really nice and efficient.

00:45:21.940 --> 00:45:25.220
So yeah, I'd love to have an opportunity

00:45:25.220 --> 00:45:26.060
to make more use of it

00:45:26.060 --> 00:45:27.220
'cause I find it really interesting,

00:45:27.220 --> 00:45:29.580
but the code I write professionally at the moment

00:45:29.580 --> 00:45:32.060
doesn't quite need that level of real-time interaction.

00:45:32.060 --> 00:45:32.900
- I know, I know.

00:45:32.900 --> 00:45:33.720
All the stuff I build, I'm like,

00:45:33.720 --> 00:45:34.820
"Oh, that would be so fun,"

00:45:34.820 --> 00:45:37.380
but you know, I just don't need that.

00:45:37.380 --> 00:45:38.220
- Yeah, exactly.

00:45:38.220 --> 00:45:39.540
- I just have no use case.

00:45:39.540 --> 00:45:43.220
I mean, there are apps, I'm sure, that do it, right?

00:45:43.220 --> 00:45:47.960
Like really complicated single-page apps

00:45:47.960 --> 00:45:50.260
like StreamYard that we're using right now, for example.

00:45:50.260 --> 00:45:53.820
This has probably got some crazy interchange going on,

00:45:53.820 --> 00:45:56.060
but I don't write these kinds of apps either.

00:45:56.060 --> 00:45:59.820
All right, let's see.

00:45:59.820 --> 00:46:04.400
So, the Socket stuff, which is cool.

00:46:04.400 --> 00:46:06.620
That's, like you said, built into Court.

00:46:06.620 --> 00:46:07.900
That's one of the advantages of it,

00:46:07.900 --> 00:46:11.800
but you can use Miguel Grimberg's stuff to add it to Flask.

00:46:11.800 --> 00:46:16.180
SQLAlchemy, you mentioned them before.

00:46:16.180 --> 00:46:19.460
Probably outside, if you're not in the Django space,

00:46:19.460 --> 00:46:22.140
it's not the only option, for sure,

00:46:22.140 --> 00:46:24.540
but it's probably the de facto choice people,

00:46:24.540 --> 00:46:28.140
when they think, "I want an ORM for a relational database,"

00:46:28.140 --> 00:46:30.140
you probably start here, right?

00:46:30.140 --> 00:46:31.420
- Yeah, I think you would, yeah.

00:46:31.420 --> 00:46:34.460
And this is a port, as I understand it,

00:46:34.460 --> 00:46:37.940
of the Flask SQLAlchemy extension

00:46:37.940 --> 00:46:40.740
to work with, or natively work with Court.

00:46:40.740 --> 00:46:45.220
So, it should match all your expectations, I think.

00:46:45.220 --> 00:46:47.940
And if you're used to it, you just use this

00:46:47.940 --> 00:46:49.860
and it works with Court, and there you go.

00:46:49.860 --> 00:46:52.560
- Mm-hmm, let's see an example here.

00:46:52.560 --> 00:46:57.660
So, you can set up your database

00:46:57.660 --> 00:47:02.660
with a pretty interesting nested type of construct here,

00:47:02.660 --> 00:47:09.140
like just passing rich arguments that take more.

00:47:09.140 --> 00:47:11.640
And if you look at the code on there,

00:47:11.640 --> 00:47:14.820
just the shape of the code is kind of unique here,

00:47:14.820 --> 00:47:18.300
but you end up with this constructed database thing,

00:47:18.300 --> 00:47:21.660
and then it has the base model class,

00:47:21.660 --> 00:47:24.700
and off you go, right?

00:47:24.700 --> 00:47:28.960
You just create a session from it, do all the things.

00:47:28.960 --> 00:47:32.940
I've always had mixed feelings about these things

00:47:32.940 --> 00:47:36.580
that you set up here that are built

00:47:36.580 --> 00:47:39.500
like into the web frameworks, potentially,

00:47:39.500 --> 00:47:41.460
that make them part of the request.

00:47:41.460 --> 00:47:43.660
'Cause if you're gonna go and write little scripts

00:47:43.660 --> 00:47:47.660
that also do data stuff, you wanna be able to get access

00:47:47.660 --> 00:47:49.380
to the data and the models over there as well.

00:47:49.380 --> 00:47:52.900
All this looks like it does take the app there,

00:47:52.900 --> 00:47:57.180
but I don't know if it really needs a meaningful app.

00:47:57.180 --> 00:47:59.260
Like, I don't think that it would use it, probably.

00:47:59.260 --> 00:48:00.980
But it just-- - No, I don't think

00:48:00.980 --> 00:48:04.740
you need to be within an app context to use the DB.

00:48:04.740 --> 00:48:05.940
I may be wrong there, but yeah,

00:48:05.940 --> 00:48:09.580
I think you could probably use it in a script, yeah.

00:48:09.580 --> 00:48:12.180
- Sure, yeah, that's the only thing that concerns me

00:48:12.180 --> 00:48:14.380
about these database helpers is like,

00:48:14.380 --> 00:48:15.860
you know, I need to do database stuff

00:48:15.860 --> 00:48:17.980
outside of a request as well.

00:48:17.980 --> 00:48:20.380
Even potentially some of the stuff

00:48:20.380 --> 00:48:21.420
that we're gonna talk about in a minute,

00:48:21.420 --> 00:48:22.780
like it's just a background task.

00:48:22.780 --> 00:48:25.620
That's not part of an actual request,

00:48:25.620 --> 00:48:29.380
but it could even still be in the web server process, right?

00:48:29.380 --> 00:48:30.620
- Yeah, yeah, yeah.

00:48:30.620 --> 00:48:33.740
I mean, I use, there's an extension called QuarkDB,

00:48:33.740 --> 00:48:37.660
which is my preference, 'cause I prefer to write the SQL

00:48:37.660 --> 00:48:40.780
than go down the ORM route.

00:48:40.780 --> 00:48:45.060
And yeah, that works as you'd expect.

00:48:45.060 --> 00:48:46.900
You still set it up and pass it the app,

00:48:46.900 --> 00:48:48.460
which I think is true of this.

00:48:48.460 --> 00:48:50.900
But then you can just use it without an app context.

00:48:50.900 --> 00:48:52.860
It just basically uses the app

00:48:52.860 --> 00:48:54.580
to get the configuration values

00:48:54.580 --> 00:48:56.580
so it knows where the database is.

00:48:56.580 --> 00:48:57.420
- Got it, okay.

00:48:57.420 --> 00:49:00.140
Interesting.

00:49:00.140 --> 00:49:02.980
And now we're on to probably the biggest one

00:49:02.980 --> 00:49:04.540
that you wanna talk about,

00:49:04.540 --> 00:49:08.140
which is quite exciting, Quark tasks.

00:49:08.140 --> 00:49:11.500
- Yeah, so this is a very recent release

00:49:11.500 --> 00:49:13.700
that I haven't announced anywhere else yet,

00:49:13.700 --> 00:49:18.700
but this is something, I think I read a post recently

00:49:18.700 --> 00:49:21.380
that said, for your web framework,

00:49:21.380 --> 00:49:23.060
you need like five things.

00:49:23.060 --> 00:49:25.100
Like you need a database connection,

00:49:25.100 --> 00:49:27.380
you need some kind of validation, input/output,

00:49:27.380 --> 00:49:29.660
rate limiting, authentication,

00:49:29.660 --> 00:49:32.700
and you need a way to run periodic tasks.

00:49:32.700 --> 00:49:36.540
And in the past, my way to do this was extra infrastructure.

00:49:36.540 --> 00:49:40.060
So it was cron running somewhere or some kind of,

00:49:40.060 --> 00:49:43.100
I think clouds watched as some kind of event generator

00:49:43.100 --> 00:49:44.780
based on a cron schedule.

00:49:44.780 --> 00:49:47.380
And for me, that's just annoying

00:49:47.380 --> 00:49:49.540
'cause now I have to build extra infrastructure,

00:49:49.540 --> 00:49:50.380
which I don't need.

00:49:50.380 --> 00:49:53.860
- Maybe not Celery or RabbitMQ or something like that, right?

00:49:53.860 --> 00:49:54.700
- Yeah, exactly.

00:49:54.700 --> 00:49:55.780
But again, with those,

00:49:55.780 --> 00:49:57.940
you need that extra infrastructure for it to work.

00:49:57.940 --> 00:49:58.980
- It's another server,

00:49:58.980 --> 00:50:00.380
it's another thing that could get hacked.

00:50:00.380 --> 00:50:02.500
You gotta patch it, you gotta secure it,

00:50:02.500 --> 00:50:03.620
you gotta know how to run it.

00:50:03.620 --> 00:50:06.100
It could go down and then none of your background stuff

00:50:06.100 --> 00:50:07.140
works anymore.

00:50:07.140 --> 00:50:10.500
It's all a hassle, even though it has a benefit.

00:50:10.500 --> 00:50:11.420
- Yeah, yeah.

00:50:11.420 --> 00:50:15.700
So what I really wanna do is make use of the async event

00:50:15.700 --> 00:50:19.060
loop and just run a task in the background periodically.

00:50:19.060 --> 00:50:20.660
And obviously at some point in this one,

00:50:20.660 --> 00:50:21.500
normally on a scale,

00:50:21.500 --> 00:50:22.780
'cause I have so many background tasks,

00:50:22.780 --> 00:50:25.900
they dominate the server and stop it doing requests.

00:50:25.900 --> 00:50:27.900
But while I'm small and I'm starting out,

00:50:27.900 --> 00:50:30.260
this just makes life so much easier.

00:50:30.260 --> 00:50:31.180
- Absolutely.

00:50:31.180 --> 00:50:33.020
It totally does.

00:50:33.020 --> 00:50:35.940
And because everything's async and await,

00:50:35.940 --> 00:50:39.580
you can just set up the task and just await the task.

00:50:39.580 --> 00:50:42.420
And it just blends in hopefully well

00:50:42.420 --> 00:50:45.060
with all the web requests, right?

00:50:45.060 --> 00:50:45.900
- Yeah, yeah.

00:50:45.900 --> 00:50:47.740
So for core tasks,

00:50:47.740 --> 00:50:50.740
if you write your task as async def,

00:50:50.740 --> 00:50:52.540
then it will run it in the event loop.

00:50:52.540 --> 00:50:55.820
But if you write it as a def, it will run it on a thread.

00:50:55.820 --> 00:50:57.780
So if you have synchronous code

00:50:57.780 --> 00:50:59.140
that's gonna block the event loop,

00:50:59.140 --> 00:51:01.420
like you're using traditional IO

00:51:01.420 --> 00:51:03.580
to want for one of the better phrase,

00:51:03.580 --> 00:51:04.700
then if you just use def,

00:51:04.700 --> 00:51:05.700
it will run it on a task,

00:51:05.700 --> 00:51:06.700
won't block your event loop,

00:51:06.700 --> 00:51:07.540
and you'll be fine.

00:51:07.540 --> 00:51:09.900
So yes, it's nice in that respect.

00:51:09.900 --> 00:51:15.180
- Yeah, and as long as your async pieces

00:51:15.180 --> 00:51:18.740
are fine grained enough,

00:51:18.740 --> 00:51:20.980
you probably won't know, right?

00:51:20.980 --> 00:51:21.860
- Yeah, yeah.

00:51:21.860 --> 00:51:26.020
- Yeah, it's just if you run a whole bunch

00:51:26.020 --> 00:51:27.940
of synchronous code or something like that,

00:51:27.940 --> 00:51:29.460
you might start to clog things up,

00:51:29.460 --> 00:51:31.220
but don't do that.

00:51:33.700 --> 00:51:36.780
Honestly, like what I find anyway on the web most of the time

00:51:36.780 --> 00:51:38.220
is you're talking to other things,

00:51:38.220 --> 00:51:39.940
talking to a database,

00:51:39.940 --> 00:51:41.180
talking to a cache,

00:51:41.180 --> 00:51:42.260
talking to an API,

00:51:42.260 --> 00:51:46.260
all those things are like perfectly suited for a wait

00:51:46.260 --> 00:51:48.100
because it's most of the time

00:51:48.100 --> 00:51:49.820
you're almost outside the web app.

00:51:49.820 --> 00:51:52.900
- Yeah, I think the perfect one for this

00:51:52.900 --> 00:51:53.860
that I keep thinking of

00:51:53.860 --> 00:51:56.500
is when you wanna send a periodic email,

00:51:56.500 --> 00:51:59.580
like a reminder or a summary of the day,

00:51:59.580 --> 00:52:01.580
just write this decorator task run

00:52:01.580 --> 00:52:03.340
and you have your function that just sends emails.

00:52:03.340 --> 00:52:06.300
It's, yeah, that's why it exists for me.

00:52:06.300 --> 00:52:08.140
It makes that so much easier.

00:52:08.140 --> 00:52:09.060
- Yeah, absolutely.

00:52:09.060 --> 00:52:09.980
Right, yeah, like you say,

00:52:09.980 --> 00:52:11.700
just send out a quick email like,

00:52:11.700 --> 00:52:13.100
"Hey, I need to reset my password."

00:52:13.100 --> 00:52:15.380
All right, here we're gonna send you,

00:52:15.380 --> 00:52:17.700
call an API like SendGrid or something like that.

00:52:17.700 --> 00:52:18.900
We're gonna send you,

00:52:18.900 --> 00:52:22.060
but you don't wanna block things up.

00:52:22.060 --> 00:52:24.540
You just kick that onto the background work

00:52:24.540 --> 00:52:25.660
and off it goes.

00:52:25.660 --> 00:52:30.300
So one of the things that people would say,

00:52:30.300 --> 00:52:32.060
all right, you guys,

00:52:32.060 --> 00:52:32.980
I know you're excited about async,

00:52:32.980 --> 00:52:35.340
but we need durability.

00:52:35.340 --> 00:52:39.460
What about, what if the server goes down

00:52:39.460 --> 00:52:42.860
or what if another potential issue is

00:52:42.860 --> 00:52:45.700
what if you scale, like at least the cron stuff,

00:52:45.700 --> 00:52:47.940
like what if you fan out your web app

00:52:47.940 --> 00:52:50.380
into like 10 worker processes

00:52:50.380 --> 00:52:52.580
and you say run in five seconds

00:52:52.580 --> 00:52:54.660
and they all run in five seconds,

00:52:54.660 --> 00:52:59.660
10 times or those kinds of issues here.

00:53:02.100 --> 00:53:06.300
- So this extension supports a couple of extensions to it.

00:53:06.300 --> 00:53:09.620
So you can pass it a custom store,

00:53:09.620 --> 00:53:13.340
which allows you to store when the task last ran.

00:53:13.340 --> 00:53:15.180
And so that means if the server goes down

00:53:15.180 --> 00:53:16.860
and it misses an invocation,

00:53:16.860 --> 00:53:17.940
then when it comes back up,

00:53:17.940 --> 00:53:20.340
it will recognize that and run the test straight away

00:53:20.340 --> 00:53:22.540
rather than wait till the next time.

00:53:22.540 --> 00:53:24.700
And the other thing it supports is

00:53:24.700 --> 00:53:29.220
you can decide what should happen before the task starts

00:53:29.220 --> 00:53:30.740
and what should happen after.

00:53:30.740 --> 00:53:32.980
So this allows you to put some locking in

00:53:32.980 --> 00:53:34.700
for your second case.

00:53:34.700 --> 00:53:37.220
In both cases, the reason it's not built in to core tasks

00:53:37.220 --> 00:53:39.660
is you'll need to decide where you store this information,

00:53:39.660 --> 00:53:41.620
where do you store the lock, where do you store the...

00:53:41.620 --> 00:53:43.860
So usually a database works for that.

00:53:43.860 --> 00:53:45.740
So yeah, so you can add it all,

00:53:45.740 --> 00:53:47.460
but you've got to choose how yourself.

00:53:47.460 --> 00:53:49.980
- That's cool that it has placeholders

00:53:49.980 --> 00:53:51.580
and ways to plug that in.

00:53:51.580 --> 00:53:52.740
That's what I was thinking of, right?

00:53:52.740 --> 00:53:56.220
Like instead of just storing it in memory

00:53:56.220 --> 00:53:57.820
and throwing it on the queue,

00:53:57.820 --> 00:53:59.980
put it into the database and have the task

00:53:59.980 --> 00:54:01.380
just check the database and go,

00:54:01.380 --> 00:54:03.180
okay, I'm working on this one.

00:54:03.180 --> 00:54:04.180
No one else do this.

00:54:04.180 --> 00:54:06.700
We don't want to send 10 emails to the person.

00:54:06.700 --> 00:54:10.980
- Oh yeah, so it's not a job queue.

00:54:10.980 --> 00:54:14.220
Although I've been thinking about that recently.

00:54:14.220 --> 00:54:16.180
So yeah, it can't be like,

00:54:16.180 --> 00:54:18.820
it doesn't work in the sense that a job will run once,

00:54:18.820 --> 00:54:21.260
it will do jobs periodically.

00:54:21.260 --> 00:54:23.940
- Got it, okay, so more of a scheduler.

00:54:23.940 --> 00:54:24.780
- Yes, yeah.

00:54:24.780 --> 00:54:28.460
- Yeah, so I need to see if anyone's uploaded files

00:54:28.460 --> 00:54:31.060
to this location and then convert it from PNG

00:54:31.060 --> 00:54:34.140
to WebP or like safe space or-

00:54:34.140 --> 00:54:37.220
- Or you could be like every morning,

00:54:37.220 --> 00:54:40.700
I want to send out an email to the users and say,

00:54:40.700 --> 00:54:41.740
imagine it's a to-do app

00:54:41.740 --> 00:54:43.420
'cause everyone uses that as an example

00:54:43.420 --> 00:54:44.820
and say, these are your tasks for the day

00:54:44.820 --> 00:54:45.660
or something like that.

00:54:45.660 --> 00:54:50.060
- Sure, the people who've signed up for the daily digest,

00:54:50.060 --> 00:54:52.340
send them their digest, right?

00:54:52.340 --> 00:54:53.180
- Yeah.

00:54:53.180 --> 00:54:54.020
- Yeah, very cool.

00:54:54.020 --> 00:54:54.860
And because it's on a background thread,

00:54:54.860 --> 00:54:57.940
it's not gonna harm anything.

00:54:57.940 --> 00:55:02.940
Excellent, okay, well, it looks pretty simple again,

00:55:02.940 --> 00:55:06.540
very decorator driven, right?

00:55:06.540 --> 00:55:08.700
- Yeah, so I mean, with all of these,

00:55:08.700 --> 00:55:10.220
the extensions that they start for it

00:55:10.220 --> 00:55:13.100
and I've tried to follow the kind of Flask conventions

00:55:13.100 --> 00:55:14.940
for better for worse, so yeah.

00:55:14.940 --> 00:55:16.700
- It definitely feels native.

00:55:16.700 --> 00:55:20.060
Yeah, it feels like if you're already doing Flask or Quart,

00:55:20.060 --> 00:55:22.420
you just know what to do, it's just similar.

00:55:22.420 --> 00:55:23.260
- Yeah, yeah.

00:55:23.260 --> 00:55:26.900
- Excellent, all right.

00:55:26.900 --> 00:55:29.060
Well, I think we've covered all the ones

00:55:29.060 --> 00:55:30.500
we explicitly said,

00:55:30.500 --> 00:55:33.540
let's make sure we get a chance to cover those.

00:55:33.540 --> 00:55:34.940
I definitely wanna encourage people

00:55:34.940 --> 00:55:37.460
to check out the Quart extensions page

00:55:37.460 --> 00:55:39.380
'cause there's quite a few more.

00:55:39.380 --> 00:55:41.860
I'll see if maybe some jump out at me here

00:55:41.860 --> 00:55:43.740
that are kind of cool.

00:55:43.740 --> 00:55:45.940
- Quart-

00:55:45.940 --> 00:55:46.780
- Briefly.

00:55:46.780 --> 00:55:47.600
- Yeah, go ahead.

00:55:47.600 --> 00:55:49.820
- I was gonna say, we briefly mentioned QuartDB,

00:55:49.820 --> 00:55:50.860
which is one I maintain,

00:55:50.860 --> 00:55:53.780
so I could say a bit more about that if you're so interested.

00:55:53.780 --> 00:55:56.660
- Yeah, sure, and it's hanging out right here in your list.

00:55:57.660 --> 00:56:01.500
So this is much like the SQLAlchemy one,

00:56:01.500 --> 00:56:03.180
it's a way to connect to a database,

00:56:03.180 --> 00:56:06.900
but unlike the SQLAlchemy way,

00:56:06.900 --> 00:56:08.820
it doesn't promote an ORM,

00:56:08.820 --> 00:56:10.140
rather it just gives you a connection

00:56:10.140 --> 00:56:11.900
that you can run SQL on.

00:56:11.900 --> 00:56:13.460
I don't know you can do that with SQLAlchemy,

00:56:13.460 --> 00:56:16.740
I just, I mean, typically that's not what people do.

00:56:16.740 --> 00:56:18.860
So in this case, like the example here is

00:56:18.860 --> 00:56:21.380
you pass it the URL you wanna connect to

00:56:21.380 --> 00:56:24.980
and it supports Postgres and SQLite at the moment,

00:56:24.980 --> 00:56:27.100
and then in the roots,

00:56:27.100 --> 00:56:30.260
you have this g.connection object that you can make use of,

00:56:30.260 --> 00:56:32.660
and you can make use of that in background tasks

00:56:32.660 --> 00:56:35.060
and it's quite easy to make use of it

00:56:35.060 --> 00:56:36.260
actually in Quart tests as well,

00:56:36.260 --> 00:56:38.820
it's just a little snippet you need to do.

00:56:38.820 --> 00:56:40.260
But yeah, and that's it,

00:56:40.260 --> 00:56:43.500
you get a connection that you can do whatever you want with.

00:56:43.500 --> 00:56:44.480
- Yeah, okay.

00:56:44.480 --> 00:56:48.180
Very nice way to just have everything set up right,

00:56:48.180 --> 00:56:51.660
like you don't have to worry about passing things around

00:56:51.660 --> 00:56:55.760
and create a transaction, go do your things, right?

00:56:55.760 --> 00:56:59.260
Excellent.

00:56:59.260 --> 00:57:01.140
What else jumps out here?

00:57:01.140 --> 00:57:05.860
We got Quart events for broadcasting

00:57:05.860 --> 00:57:07.860
server sent events and WebSockets.

00:57:07.860 --> 00:57:10.060
- There is one, yeah.

00:57:10.060 --> 00:57:13.380
- Yeah, another one that's cool is minify,

00:57:13.380 --> 00:57:16.740
like minifying all of your elements, right?

00:57:16.740 --> 00:57:18.420
CSS, JavaScript.

00:57:19.780 --> 00:57:21.500
- Yeah, I've been doing that

00:57:21.500 --> 00:57:23.860
at the build stage a lot recently.

00:57:23.860 --> 00:57:25.500
There's a little snippet I can share

00:57:25.500 --> 00:57:26.820
if people want for Quart

00:57:26.820 --> 00:57:28.420
where you change the static function,

00:57:28.420 --> 00:57:33.020
so it will serve a gzipped version of the static file

00:57:33.020 --> 00:57:36.620
over the un-gzipped one if the client will accept it.

00:57:36.620 --> 00:57:39.020
And yeah, then if you do it build time,

00:57:39.020 --> 00:57:39.860
'cause I think this one,

00:57:39.860 --> 00:57:40.820
and it might be a mistake,

00:57:40.820 --> 00:57:42.860
but I suspect it works at runtime,

00:57:42.860 --> 00:57:44.140
so it compresses at runtime.

00:57:44.140 --> 00:57:45.660
- It sounds like it does, yeah.

00:57:45.660 --> 00:57:48.940
Let's see.

00:57:49.940 --> 00:57:52.540
It talks about doing it as a response, right?

00:57:52.540 --> 00:57:54.140
So yeah.

00:57:54.140 --> 00:57:59.260
Oh, it does have a cache though.

00:57:59.260 --> 00:58:00.100
- Ah, okay.

00:58:00.100 --> 00:58:01.220
Yeah, we get similar.

00:58:01.220 --> 00:58:03.580
Yeah, very similar to what I'm suggesting then.

00:58:03.580 --> 00:58:05.940
- Excellent.

00:58:05.940 --> 00:58:07.140
Now, those are really, really handy.

00:58:07.140 --> 00:58:11.500
If people go and they wanna make their website better,

00:58:11.500 --> 00:58:13.540
check out, gosh,

00:58:13.540 --> 00:58:17.300
I guess PageSpeed.

00:58:18.500 --> 00:58:19.340
- Oh, the Lighthouse.

00:58:19.340 --> 00:58:20.780
- Lighthouse is what I was gonna call it, yeah,

00:58:20.780 --> 00:58:23.300
but they renamed it to PageSpeed.

00:58:23.300 --> 00:58:24.540
So you go put in,

00:58:24.540 --> 00:58:28.300
let's see.

00:58:28.300 --> 00:58:31.940
Then talk Python and see how we're doing.

00:58:31.940 --> 00:58:33.420
But it'll give you things like,

00:58:33.420 --> 00:58:36.940
how is your site fast enough?

00:58:36.940 --> 00:58:38.980
Let's see how the desktop one's doing, right?

00:58:38.980 --> 00:58:41.220
And it'll give you a score and, you know,

00:58:41.220 --> 00:58:45.380
are we gonna index you well,

00:58:45.380 --> 00:58:46.580
or are you gonna be punished

00:58:46.580 --> 00:58:48.540
for having some kind of crappy experience?

00:58:48.540 --> 00:58:50.540
And this minification stuff that we're talking about

00:58:50.540 --> 00:58:52.020
can help there, right?

00:58:52.020 --> 00:58:53.380
- Absolutely, yeah.

00:58:53.380 --> 00:58:56.820
- Similar to your DB, your QuarkDB,

00:58:56.820 --> 00:58:58.540
we have QuarkMotor,

00:58:58.540 --> 00:59:02.620
which is the async database access library for MongoDB.

00:59:02.620 --> 00:59:05.300
So I suspect it's super similar.

00:59:05.300 --> 00:59:07.940
I haven't used it 'cause I use Beanie,

00:59:07.940 --> 00:59:09.700
which is like ORM style.

00:59:09.700 --> 00:59:11.420
So kind of on top of those things.

00:59:11.420 --> 00:59:15.260
Key Cloak is interesting.

00:59:16.540 --> 00:59:18.420
Redis also is pretty interesting.

00:59:18.420 --> 00:59:20.260
Uploads, let's finish it out with Uploads.

00:59:20.260 --> 00:59:21.500
We'll call it after that.

00:59:21.500 --> 00:59:24.220
So I haven't used this,

00:59:24.220 --> 00:59:27.740
but uploading files can always be a bit of a hassle, right?

00:59:27.740 --> 00:59:29.020
But yeah.

00:59:29.020 --> 00:59:34.380
- So it looks very similar to the Flask uploads one.

00:59:34.380 --> 00:59:37.180
So it's kind of a nice wrapper

00:59:37.180 --> 00:59:41.420
around how you get access to the files you've uploaded

00:59:41.420 --> 00:59:44.020
and what you do with them kind of thing, yeah.

00:59:44.020 --> 00:59:46.420
- Yeah, that can be a little bit of a hassle, right?

00:59:46.580 --> 00:59:51.580
So you got your request.files and all that.

00:59:51.580 --> 00:59:57.740
Okay, cool.

00:59:57.740 --> 00:59:59.260
I don't know how to use this thing,

00:59:59.260 --> 01:00:02.100
but I know that people kind of struggle

01:00:02.100 --> 01:00:03.860
uploading files a lot, so.

01:00:03.860 --> 01:00:10.180
- Yeah, I don't tend to actually write it that much

01:00:10.180 --> 01:00:11.700
come to think of it, but yeah,

01:00:11.700 --> 01:00:15.820
it just makes it easier.

01:00:15.820 --> 01:00:16.740
- Yeah, exactly.

01:00:16.740 --> 01:00:20.780
Profile, profile pictures maybe,

01:00:20.780 --> 01:00:22.900
it's like that kind of stuff I'd be doing.

01:00:22.900 --> 01:00:27.220
But yeah, anyway, I guess I've wrote some code

01:00:27.220 --> 01:00:31.060
that lets you upload MP3s at one point for podcasts,

01:00:31.060 --> 01:00:34.140
but I stopped using it, so it's not top of mind anymore.

01:00:34.140 --> 01:00:38.580
Anyway, excellent, excellent stuff here.

01:00:38.580 --> 01:00:40.100
I love just going through and seeing

01:00:40.100 --> 01:00:41.380
all these little pieces,

01:00:41.380 --> 01:00:43.180
these little building blocks you can bring together

01:00:43.180 --> 01:00:45.180
and just quickly build an app.

01:00:45.180 --> 01:00:48.140
So thanks for being on the show

01:00:48.140 --> 01:00:50.620
and telling everyone about it.

01:00:50.620 --> 01:00:52.780
- Oh, thank you, thank you, yeah, great.

01:00:52.780 --> 01:00:54.620
Hopefully opportunity to introduce some stuff

01:00:54.620 --> 01:00:56.660
that I hope people will find useful.

01:00:56.660 --> 01:00:57.900
- Yeah, and just more broadly,

01:00:57.900 --> 01:01:00.780
like thanks for working on Quart and pushing that forward.

01:01:00.780 --> 01:01:05.780
- Yeah, I mean, like I said, our aim is hopefully,

01:01:05.780 --> 01:01:08.580
well, we're kind of going around in different ways

01:01:08.580 --> 01:01:10.860
of how we'd actually might merge Flask and Quart,

01:01:10.860 --> 01:01:13.980
but yeah, that's still the ultimate aim.

01:01:13.980 --> 01:01:16.340
I kind of think, 'cause of the limitations

01:01:16.340 --> 01:01:19.580
we were talking about earlier about running async code

01:01:19.580 --> 01:01:21.940
when you're deep in async code base,

01:01:21.940 --> 01:01:24.620
I think you'll always have to make a choice with Flask

01:01:24.620 --> 01:01:26.940
where if you're gonna be mostly sync, you go Flask.

01:01:26.940 --> 01:01:29.740
If you're mostly async, you go an async Flask

01:01:29.740 --> 01:01:30.580
or whatever it's called,

01:01:30.580 --> 01:01:32.780
which at the moment it's called Quart.

01:01:32.780 --> 01:01:35.060
We might be able to put them in the same code base perhaps,

01:01:35.060 --> 01:01:38.340
so then you can maybe mix and match

01:01:38.340 --> 01:01:41.380
'cause you can certainly run Flask and Quart together

01:01:41.380 --> 01:01:42.820
with Hypercorn as a server

01:01:42.820 --> 01:01:44.500
and just have what's called

01:01:44.500 --> 01:01:47.220
the dispatch middleware layer in between

01:01:47.220 --> 01:01:49.140
that says for these routes, it goes to Flask

01:01:49.140 --> 01:01:50.460
and for those routes, it goes to Quart.

01:01:50.460 --> 01:01:53.780
So yeah, there are lots of ways to do it,

01:01:53.780 --> 01:01:55.780
but it depends what you wanna do really.

01:01:55.780 --> 01:01:57.980
- Yeah, that's interesting.

01:01:57.980 --> 01:01:59.700
Maybe you could even create a different app

01:01:59.700 --> 01:02:01.460
instead of app equals Flask,

01:02:01.460 --> 01:02:04.140
it's app equals async Flask, who knows?

01:02:04.140 --> 01:02:06.620
- Yeah, I mean, that's effectively what Quart is.

01:02:06.620 --> 01:02:09.460
I mean, I could have called it async Flask at the start.

01:02:09.460 --> 01:02:12.420
(laughing)

01:02:12.420 --> 01:02:13.820
- A Flask, yeah.

01:02:13.820 --> 01:02:15.980
It ranks higher in the alphabetical sortings.

01:02:15.980 --> 01:02:16.820
- Yeah.

01:02:16.820 --> 01:02:19.940
- All right, so people are excited with Quart.

01:02:19.940 --> 01:02:21.860
Maybe it's back on their radar

01:02:21.860 --> 01:02:24.940
now that we've been talking about all these extensions.

01:02:24.940 --> 01:02:25.780
What do you tell them?

01:02:25.780 --> 01:02:26.820
How do they get started?

01:02:26.820 --> 01:02:28.140
What do they do?

01:02:28.140 --> 01:02:30.380
- Oh, I mean, you can just pip install Quart

01:02:30.380 --> 01:02:33.620
and the quick start is as simple and familiar

01:02:33.620 --> 01:02:35.220
as it's ever been for Flask.

01:02:35.220 --> 01:02:37.100
You just do app equals Quart

01:02:37.100 --> 01:02:39.420
and then app.get or app.whatever

01:02:39.420 --> 01:02:41.700
and then your function below to handle it.

01:02:41.700 --> 01:02:42.540
- Awesome.

01:02:42.540 --> 01:02:44.980
Yeah, the selling point is basically

01:02:44.980 --> 01:02:46.740
if you know Flask, you know Quart.

01:02:46.740 --> 01:02:48.940
You just use the word async some of the time.

01:02:48.940 --> 01:02:50.500
- Yeah, yeah, yeah.

01:02:50.500 --> 01:02:51.980
I mean, even the WebSocket support,

01:02:51.980 --> 01:02:55.220
I've tried to make it as familiar as it would be

01:02:55.220 --> 01:02:56.260
if you had new Flask.

01:02:56.260 --> 01:02:58.700
So instead of using the global request,

01:02:58.700 --> 01:03:00.540
you now use the global WebSocket.

01:03:00.540 --> 01:03:01.860
So there's WebSocket.headers

01:03:01.860 --> 01:03:03.340
and you can do WebSocket.send,

01:03:03.340 --> 01:03:04.660
send a message, that kind of stuff.

01:03:04.660 --> 01:03:07.300
So hopefully it just feels familiar.

01:03:07.300 --> 01:03:08.300
- Yeah, fantastic.

01:03:08.300 --> 01:03:09.140
I'm sure it does.

01:03:09.140 --> 01:03:11.020
And thanks for being on the show

01:03:11.020 --> 01:03:12.900
and nice to have you back.

01:03:12.900 --> 01:03:13.740
- Thank you. - I'll catch you next time.

01:03:13.740 --> 01:03:14.580
- Yeah, you bet.

01:03:14.580 --> 01:03:24.220
[BLANK_AUDIO]

