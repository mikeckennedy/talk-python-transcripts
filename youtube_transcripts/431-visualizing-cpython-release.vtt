WEBVTT

00:00:00.000 --> 00:00:03.360
>> Hey all. Hey Seth.


00:00:03.360 --> 00:00:04.960
>> Hello.


00:00:04.960 --> 00:00:07.960
>> Awesome to have you here on the show.


00:00:07.960 --> 00:00:09.880
>> Thanks for having me.


00:00:09.880 --> 00:00:14.560
>> Yeah, absolutely. I'm looking forward to talking about the details,


00:00:14.560 --> 00:00:17.920
the steps of releasing CPython.


00:00:17.920 --> 00:00:22.720
For those of you who have not been watching and paying attention,


00:00:22.720 --> 00:00:24.440
by the time this comes out,


00:00:24.440 --> 00:00:25.800
it'll probably have already happened.


00:00:25.800 --> 00:00:27.480
I'm sure it's already happened.


00:00:27.480 --> 00:00:29.680
By the time this video is up though,


00:00:29.680 --> 00:00:31.040
It's not quite happening.


00:00:31.040 --> 00:00:35.600
So as of the recording next Monday, this whole process that we're going to talk


00:00:35.600 --> 00:00:37.400
about goes into action, right?


00:00:37.400 --> 00:00:39.120
Releasing Python 3.11.


00:00:39.120 --> 00:00:40.040
Yeah.


00:00:40.040 --> 00:00:41.560
This, not 3.12.


00:00:41.560 --> 00:00:43.240
This will have happened.


00:00:43.240 --> 00:00:45.600
3.12.


00:00:45.600 --> 00:00:47.080
I got to get used to it.


00:00:47.080 --> 00:00:51.360
It's like the, you know, in January, all you always write the year wrong.


00:00:51.360 --> 00:00:51.440
Yeah.


00:00:51.440 --> 00:00:58.600
So 3.12, the new version, the still faster, faster CPython 3.12 with lots of cool


00:00:58.600 --> 00:01:03.560
features is going to be out and how does that happen, right?


00:01:03.560 --> 00:01:05.720
There's a lot going on behind the scenes.


00:01:05.720 --> 00:01:10.600
And you wrote a really cool blog post called Visualizing the CPython Release Process or


00:01:10.600 --> 00:01:11.600
something like that.


00:01:11.600 --> 00:01:13.720
I'm getting off memory.


00:01:13.720 --> 00:01:16.320
And has a great diagram with a whole bunch of boxes.


00:01:16.320 --> 00:01:19.640
And so we're going to go through and kind of just talk about how that happens and so


00:01:19.640 --> 00:01:20.640
on.


00:01:20.640 --> 00:01:24.280
But before we get into it, maybe a quick intro for folks who don't know you yet.


00:01:24.280 --> 00:01:25.280
- Yeah.


00:01:25.280 --> 00:01:29.040
I'm Seth Larson, online everywhere.


00:01:29.040 --> 00:01:31.600
I am Seth M. Larson, that's my handle.


00:01:31.600 --> 00:01:34.520
And I am the security developer in residence


00:01:34.520 --> 00:01:35.960
at the Python Software Foundation,


00:01:35.960 --> 00:01:38.440
the inaugural security developer in residence.


00:01:38.440 --> 00:01:40.080
Hopeful for more, obviously.


00:01:40.080 --> 00:01:44.120
But yeah, this whole role is funded


00:01:44.120 --> 00:01:48.280
through the OpenSSF Alpha Omega project specifically.


00:01:48.280 --> 00:01:50.240
And it's kind of a project that's focusing


00:01:50.240 --> 00:01:53.880
on Alpha being really, really important projects


00:01:53.880 --> 00:01:57.640
that like everyone agrees, yep, that's a really important project to secure. So among them


00:01:57.640 --> 00:02:02.920
is Python and PyPI. And then Omega is kind of like the long tail, right? Like all the


00:02:02.920 --> 00:02:07.340
other projects, because there's open source is huge. There's millions of different projects.


00:02:07.340 --> 00:02:11.880
How can we secure those? And so yeah, the this role exists because of them. So I'm very


00:02:11.880 --> 00:02:18.840
thankful. And it's as are we all right? Yeah, as a community. This is yeah, there's been


00:02:18.840 --> 00:02:22.320
a lot of places where it's like, well, why doesn't someone take care of is like, well,


00:02:22.320 --> 00:02:27.600
nobody's whose sole job it is. But like, Python has been slowly rolling in these new roles,


00:02:27.600 --> 00:02:31.960
which is fantastic. Like, Lukas Lange at the developer in residence, you're the security


00:02:31.960 --> 00:02:38.680
developer in residence. We have Mike Fiedler, who I spoke to about on PyPI security. Like,


00:02:38.680 --> 00:02:42.520
there's people, there's developers working on stuff. It's awesome.


00:02:42.520 --> 00:02:47.000
There's something to be said, like having someone working on stuff full time, like you


00:02:47.000 --> 00:02:48.440
you can get a lot done.


00:02:48.440 --> 00:02:51.480
It's quite nice, like, 'cause we're so used to,


00:02:51.480 --> 00:02:54.100
you know, how the speed of open source, right?


00:02:54.100 --> 00:02:56.080
Which is not, I guess when someone says


00:02:56.080 --> 00:02:57.920
the speed of open source, they don't immediately think,


00:02:57.920 --> 00:03:00.200
oh yeah, that's gonna be fast and snappy


00:03:00.200 --> 00:03:01.040
because people have lots.


00:03:01.040 --> 00:03:01.860
- Sometimes it is.


00:03:01.860 --> 00:03:03.480
Yeah, well sometimes it is. - Sometimes it is.


00:03:03.480 --> 00:03:04.560
- When things are brand new,


00:03:04.560 --> 00:03:07.340
they can have a lot of momentum.


00:03:07.340 --> 00:03:10.780
But, you know, my personal view is like,


00:03:10.780 --> 00:03:12.120
on all these software projects,


00:03:12.120 --> 00:03:14.080
there's these little gnarly edges


00:03:14.080 --> 00:03:16.220
that is just as fun for no one, right?


00:03:16.220 --> 00:03:19.620
And like, I want to add this new feature or I want to add async to this thing.


00:03:19.620 --> 00:03:24.220
So people can do this and like, you can get so inspired even if it's not your job


00:03:24.220 --> 00:03:25.780
and it's just your project and really go on it.


00:03:25.780 --> 00:03:31.580
But like, you know, really polishing out that little bit of documentation or, or


00:03:31.580 --> 00:03:36.980
updating that detour, like it's, it's all the fine polish, I guess, that I think you


00:03:36.980 --> 00:03:39.260
all are bringing to Python, which is awesome.


00:03:39.260 --> 00:03:39.940
Yeah.


00:03:39.940 --> 00:03:40.940
There's tons of work.


00:03:40.940 --> 00:03:46.060
That's like, it really does need that amount of time investment and like


00:03:46.060 --> 00:03:50.700
a sustained time investment. So like when you're working with external groups, or like,


00:03:50.700 --> 00:03:54.580
you know, developing processes and stuff like that, like you just need, you just need to


00:03:54.580 --> 00:04:00.620
be there a lot more than you know, weekends. So it's good to have that full time presence.


00:04:00.620 --> 00:04:05.860
Yeah, yeah, I think it is too, although it's absolutely mind blowing how much stuff gets


00:04:05.860 --> 00:04:09.200
done in traditional pure open source.


00:04:09.200 --> 00:04:14.000
It really is. Honestly, it gives a whole new perspective to it, right? It's like, okay,


00:04:14.000 --> 00:04:19.040
You know, all of this is happening, but, you know, almost all of the people that I interact


00:04:19.040 --> 00:04:22.280
with on a day to day basis are volunteers.


00:04:22.280 --> 00:04:27.680
And so like, I kind of wrote about this a little bit in my opening, when I announced


00:04:27.680 --> 00:04:33.180
myself as a security developer in residence, but it's like, you need to, you can't have


00:04:33.180 --> 00:04:36.840
expectations and like, assign people work, you know what I mean?


00:04:36.840 --> 00:04:41.360
Like, this is not a traditional work environment where you can just tell people what to do.


00:04:41.360 --> 00:04:44.840
And you know, it, it, yeah, it's a certain way of working.


00:04:44.840 --> 00:04:48.160
And I'm used to it because I am an open source maintainer myself.


00:04:48.160 --> 00:04:50.080
So it, it makes a lot of sense to me.


00:04:50.080 --> 00:04:51.440
And I feel very comfortable with it.


00:04:51.440 --> 00:04:55.560
But it's very different than a regular security developer job would be.


00:04:55.560 --> 00:04:57.720
Would you say fewer TPS reports?


00:04:57.720 --> 00:05:00.880
Yeah, a few fewer.


00:05:00.880 --> 00:05:01.880
Yeah.


00:05:01.880 --> 00:05:02.880
Just a couple fewer.


00:05:02.880 --> 00:05:07.120
Hey, you, since you brought it up, maybe we'll come back to this if we have time at the end.


00:05:07.120 --> 00:05:11.360
you know, you've got some pretty notable projects that you're working on here. Like,


00:05:11.360 --> 00:05:14.240
give a quick shout out to some of your open source work that predates this.


00:05:14.240 --> 00:05:18.560
Yeah. So I am the lead maintainer of your lib three, which is one of the


00:05:18.560 --> 00:05:25.440
most downloaded Python packages on PyPI. I also help maintain requests. It's a user of your lib


00:05:25.440 --> 00:05:30.000
three. And then in addition to that, I have a library, which I quite love, which is called


00:05:30.000 --> 00:05:35.840
trustor, which is being adopted by a lot of package managers right now, like pip and conda and PDM,


00:05:36.480 --> 00:05:45.360
which allows those, those packages to use system certificates as opposed to something like certify,


00:05:45.360 --> 00:05:49.520
so that you can take advantage of all of the benefits that you get for using a system trust


00:05:49.520 --> 00:05:55.280
store for HTTPS, as opposed to like a static bundle of certificates because operating systems


00:05:55.280 --> 00:06:00.160
are actually constantly checking, updating all of these things. It's just a little bit better.


00:06:00.160 --> 00:06:05.040
Some certificate store or some certificate authority turns out to be shady and they get


00:06:05.040 --> 00:06:12.400
revoked and yeah, or just not have not have the best practices. And so yeah, just like,


00:06:12.400 --> 00:06:16.880
okay, we're gonna pull that one. But we're even pulling a search. Yeah, they even get


00:06:16.880 --> 00:06:22.080
stolen, right? Sometimes these certificates get stolen, they get stolen, you know, there's all


00:06:22.080 --> 00:06:26.000
sorts of things that can go wrong. Thankfully, it doesn't go wrong very often. Otherwise,


00:06:26.000 --> 00:06:29.920
there would be a lot bigger of a problem. But yeah, it does happen every once in a while.


00:06:29.920 --> 00:06:36.160
Yeah, that's cool. Yeah, and you're on Python Bytes, my other podcast I do with Brian, to talk


00:06:36.160 --> 00:06:42.480
about Trustor, which is cool. All right, back to this. So tell us a bit about this developer,


00:06:42.480 --> 00:06:47.520
security developer in residence role. Like people are like, oh, this, maybe they've heard of it,


00:06:47.520 --> 00:06:53.520
or it's maybe even new to them. But like, what is your, what is your job here in the PSF space?


00:06:54.640 --> 00:07:01.440
Yeah, it's, it's, it's kind of funny talking about my role, too, because people see security through


00:07:01.440 --> 00:07:05.440
so many different lenses. And this is even like outside of talking to people online that are in


00:07:05.440 --> 00:07:11.440
open source space. So whenever I talk about this job, people will say, Oh, so you do it security


00:07:11.440 --> 00:07:15.920
for the PSF? And I'm like, Well, no, I don't do that. And then they'll say, Oh, so you're a hacker?


00:07:15.920 --> 00:07:22.880
Yeah, right? I'm in, right? No, no. So I don't do that. I don't do it security for the PSF. And


00:07:22.880 --> 00:07:25.240
And then the next question they usually ask is like,


00:07:25.240 --> 00:07:30.240
oh, so you make it so that Python is more secure,


00:07:30.240 --> 00:07:33.640
like the code of Python is more secure.


00:07:33.640 --> 00:07:37.400
And I'm like, not really, honestly, I don't do that either.


00:07:37.400 --> 00:07:42.400
And what I really do is try my best to make it so that


00:07:42.400 --> 00:07:45.400
bad stuff doesn't happen to Python users.


00:07:45.400 --> 00:07:48.520
And so, you know, obviously those things are important,


00:07:48.520 --> 00:07:52.360
like securing Python, the actual code itself,


00:07:52.360 --> 00:07:54.960
but on like the scale factor,


00:07:54.960 --> 00:07:56.820
maybe those are a little bit less important


00:07:56.820 --> 00:07:59.680
than some things like making sure that


00:07:59.680 --> 00:08:02.580
when you download something from python.org,


00:08:02.580 --> 00:08:04.480
it is the correct thing.


00:08:04.480 --> 00:08:08.600
Making sure that when a release is happening for Python,


00:08:08.600 --> 00:08:12.160
nothing can subvert that release and get injected in


00:08:12.160 --> 00:08:13.960
and then distributed to everyone.


00:08:13.960 --> 00:08:15.600
And then it goes beyond Python


00:08:15.600 --> 00:08:17.800
when you start thinking about like the packaging space.


00:08:17.800 --> 00:08:21.800
So like making sure that pip release process is good.


00:08:21.800 --> 00:08:29.400
making sure that all of these tools and stuff that are using all of these binary libraries,


00:08:29.400 --> 00:08:35.600
how can you be sure that those libraries that are bundled along with them don't have vulnerabilities?


00:08:35.600 --> 00:08:40.900
And then a lot of things around process, so vulnerability management and making sure that


00:08:40.900 --> 00:08:44.700
vulnerabilities that are discovered in Python and reported to us,


00:08:44.700 --> 00:08:48.400
they actually get to the end of the process where they're fixed and released.


00:08:48.700 --> 00:08:54.140
There's just a whole bunch of things like that, where it's more of like a scale and safety and like making sure that


00:08:54.140 --> 00:09:00.380
my effort goes towards things that are gonna keep on churning as opposed to things that are like


00:09:00.380 --> 00:09:04.420
spot fixes, right? Because spot fixes, they're important,


00:09:04.420 --> 00:09:10.900
but they don't have the scale and they don't have that like keep on giving you the value aspect of them.


00:09:10.900 --> 00:09:18.580
Yeah, and the consequence of a lot of what you described sounds like supply chain type issues.


00:09:18.580 --> 00:09:21.520
The consequence of that is so bad.


00:09:21.520 --> 00:09:26.420
It doesn't matter how patched your computer is or how good your firewall is.


00:09:26.420 --> 00:09:29.920
If CPython itself ships with a virus, right.


00:09:29.920 --> 00:09:30.940
Right.


00:09:30.940 --> 00:09:31.500
Yeah.


00:09:31.500 --> 00:09:33.740
Or like somebody snuck it in right at the builds.


00:09:33.740 --> 00:09:34.040
Yeah.


00:09:34.040 --> 00:09:34.540
Yeah.


00:09:34.540 --> 00:09:35.260
Right, right, right.


00:09:35.260 --> 00:09:38.460
And so it's good that you're focused on those.


00:09:38.460 --> 00:09:39.660
Nobody wants that.


00:09:39.660 --> 00:09:41.180
Well, almost nobody wants that.


00:09:41.180 --> 00:09:43.180
Very few people want this.


00:09:43.180 --> 00:09:44.900
So those are not good people.


00:09:44.900 --> 00:09:45.980
We don't want them to want this.


00:09:46.060 --> 00:09:48.700
We don't take them into consideration


00:09:48.700 --> 00:09:50.700
for their use cases.


00:09:50.700 --> 00:09:52.020
- We sure don't.


00:09:52.020 --> 00:09:52.860
Awesome.


00:09:52.860 --> 00:09:55.100
And let's see, I believe you're on,


00:09:55.100 --> 00:09:56.860
well, when I read the article, you're on week nine.


00:09:56.860 --> 00:09:58.100
So you're on week 10.


00:09:58.100 --> 00:09:59.580
Is that where we are?


00:09:59.580 --> 00:10:01.420
- I think I'm on week 12 at this point.


00:10:01.420 --> 00:10:02.500
- Oh man, time flies.


00:10:02.500 --> 00:10:03.340
- Yeah, I know.


00:10:03.340 --> 00:10:06.140
I'm actually drafting up like a quarterly review


00:10:06.140 --> 00:10:07.860
and it's a big thing.


00:10:07.860 --> 00:10:08.800
So yeah.


00:10:08.800 --> 00:10:09.640
- Okay.


00:10:09.640 --> 00:10:12.620
See a quick question from the audience here


00:10:12.620 --> 00:10:13.620
in the live stream.


00:10:13.620 --> 00:10:19.300
you know, Lewis asks, is there a visibility or will there be a public visibility for CVEs


00:10:19.300 --> 00:10:20.300
in packages?


00:10:20.300 --> 00:10:22.300
That is an excellent question.


00:10:22.300 --> 00:10:23.300
It is a good question.


00:10:23.300 --> 00:10:29.060
And I bring this up because didn't the PSF just get certified as like a CVE authority


00:10:29.060 --> 00:10:31.140
or whatever that is like ability to create CVEs?


00:10:31.140 --> 00:10:32.140
I don't know.


00:10:32.140 --> 00:10:33.660
I can I can talk so much about this, right.


00:10:33.660 --> 00:10:36.980
So there, there's a whole bunch of stuff happening in that space.


00:10:36.980 --> 00:10:41.900
So the first I'll start off with stuff that I did not personally do, but I'm helping maintain


00:10:41.900 --> 00:10:46.820
now, which is there is an advisory database called,


00:10:46.820 --> 00:10:54.100
if you go on GitHub, it's github.com/pypa/advisorydatabase


00:10:54.100 --> 00:10:56.820
with a dash in between advisory and database.


00:10:56.820 --> 00:11:00.380
And that database is essentially trying


00:11:00.380 --> 00:11:04.520
to categorize all of the CVEs and what versions


00:11:04.520 --> 00:11:08.500
they affect for every single package on the Python package


00:11:08.500 --> 00:11:11.140
index, which is an impossible task,


00:11:11.140 --> 00:11:12.940
but so we're trying our best there.


00:11:12.940 --> 00:11:13.780
(laughing)


00:11:13.780 --> 00:11:14.620
But yeah, so one of the--


00:11:14.620 --> 00:11:16.620
- Only half a million packages, no problem.


00:11:16.620 --> 00:11:17.460
- No problem, right?


00:11:17.460 --> 00:11:19.500
Like that's a manual task right there.


00:11:19.500 --> 00:11:22.380
Yeah, no, so what this actually does is for the bulk of it,


00:11:22.380 --> 00:11:23.740
what it will do is it'll go out


00:11:23.740 --> 00:11:28.340
and it'll pull the CVE feed from MBD and Mitre


00:11:28.340 --> 00:11:32.120
and it will parse it and try to find references


00:11:32.120 --> 00:11:36.100
to Python packages and versions inside of CVEs.


00:11:36.100 --> 00:11:38.620
So obviously that's, sometimes there's false positives,


00:11:38.620 --> 00:11:41.700
But a lot of the times it just works out okay.


00:11:41.700 --> 00:11:43.700
And there's a little bit of triage involved.


00:11:43.700 --> 00:11:46.400
There's a little bit of manual submission of this too.


00:11:46.400 --> 00:11:50.600
But yeah, so tools like pip audit,


00:11:50.600 --> 00:11:53.340
which is a tool that I love so much,


00:11:53.340 --> 00:11:56.580
uses this database in addition to other scanning tools.


00:11:56.580 --> 00:11:59.900
Like any scanning tool can use this database.


00:11:59.900 --> 00:12:01.420
But yeah, this is the canonical location


00:12:01.420 --> 00:12:05.060
for vulnerabilities affecting Python packages.


00:12:05.060 --> 00:12:09.340
So for Python itself, the Python Software Foundation


00:12:09.340 --> 00:12:12.080
just recently, like a few weeks ago,


00:12:12.080 --> 00:12:16.740
announced that we are now a CVE numbering authority,


00:12:16.740 --> 00:12:19.500
which means that we are,


00:12:19.500 --> 00:12:22.120
we kind of have like a scope of just Python


00:12:22.120 --> 00:12:23.220
and pip right now.


00:12:23.220 --> 00:12:24.420
So those are the only two projects


00:12:24.420 --> 00:12:26.020
that we're emitting CVEs for.


00:12:26.020 --> 00:12:29.460
And what that means we can do is it means that people


00:12:29.460 --> 00:12:31.860
have to submit reports to us, which is good,


00:12:31.860 --> 00:12:34.420
because then they can't submit them to other places


00:12:34.420 --> 00:12:37.920
get CVs that way can be kind of frustrating, because in the past, sometimes that would


00:12:37.920 --> 00:12:41.640
happen. And then we wouldn't know about the vulnerability until it got published as a


00:12:41.640 --> 00:12:42.640
CV. And we'd be like, what?


00:12:42.640 --> 00:12:43.640
We have a CV.


00:12:43.640 --> 00:12:44.640
Yeah, right.


00:12:44.640 --> 00:12:50.500
The big deal is you're supposed to be told, in an ideal world, you're supposed to be given


00:12:50.500 --> 00:12:56.040
like a come knock in the back door, like that WebP code, we need to talk about the WebP


00:12:56.040 --> 00:12:57.040
code before.


00:12:57.040 --> 00:13:02.220
Oh, gosh, don't get me started on WebP. Don't get me started on WebP. So yeah, the real


00:13:02.220 --> 00:13:08.580
But like the ideal process is someone would Google like Python and security or like Python


00:13:08.580 --> 00:13:10.080
and report a vulnerability.


00:13:10.080 --> 00:13:13.620
And then they would find these like really lovely instructions that someone else wrote


00:13:13.620 --> 00:13:19.200
up to say, just send an email to security@python.org with whatever information you have.


00:13:19.200 --> 00:13:21.100
And then we triage that.


00:13:21.100 --> 00:13:25.360
And if we decided it's a vulnerability, we would ask for a CVE on your behalf and like


00:13:25.360 --> 00:13:28.420
credit you and all this stuff and then fix it.


00:13:28.420 --> 00:13:32.860
And then the release and publication of the CVE would happen at the same time.


00:13:32.860 --> 00:13:36.260
So that's what we call coordinated vulnerability disclosure.


00:13:36.260 --> 00:13:40.180
And so instead of like, oh, there's a vulnerability, but there's no fix available for that vulnerability,


00:13:40.180 --> 00:13:45.460
like that's what you want to avoid, because it causes it causes panic.


00:13:45.460 --> 00:13:48.100
And in theory, it could cause exposure, right?


00:13:48.100 --> 00:13:54.140
Where there's right, some dwell time in between when people or it doesn't minimize the dwell


00:13:54.140 --> 00:13:58.460
time between when people are able to patch and when the vulnerability is known to potential


00:13:58.460 --> 00:13:59.460
attackers.


00:13:59.460 --> 00:14:00.460
Right.


00:14:00.460 --> 00:14:04.180
There's already a latency from when it's announced to somebody actually fixing it.


00:14:04.180 --> 00:14:08.220
But if when you hear it, you can't actually fix it for two more weeks because it's not


00:14:08.220 --> 00:14:09.220
released.


00:14:09.220 --> 00:14:12.380
Well, that just gives people two weeks to try to dissect like what exactly do they mean


00:14:12.380 --> 00:14:15.060
by there's this image problem?


00:14:15.060 --> 00:14:16.060
Exactly.


00:14:16.060 --> 00:14:17.060
Yeah.


00:14:17.060 --> 00:14:18.060
Oh, yeah.


00:14:18.060 --> 00:14:19.060
I'm working on my image.


00:14:19.060 --> 00:14:20.060
Yeah.


00:14:20.060 --> 00:14:21.060
We're going to start talking about libwebp actually.


00:14:21.060 --> 00:14:22.060
Yeah.


00:14:22.060 --> 00:14:23.460
- I guess the most recent example,


00:14:23.460 --> 00:14:25.740
'cause last night there was a,


00:14:25.740 --> 00:14:27.140
and really relevant to CVEs,


00:14:27.140 --> 00:14:31.100
because there was some drama that Apple patched


00:14:31.100 --> 00:14:32.100
some of their code.


00:14:32.100 --> 00:14:33.180
When Google announced it,


00:14:33.180 --> 00:14:35.160
it looked like it was only applied to Chrome,


00:14:35.160 --> 00:14:37.420
but it actually applied to anything that used WebP,


00:14:37.420 --> 00:14:39.500
which looking at the updates is like,


00:14:39.500 --> 00:14:42.620
everything on my computer needs to be updated because of it.


00:14:42.620 --> 00:14:46.220
You know, like that mismatch was like,


00:14:46.220 --> 00:14:47.620
caused a lot of drama.


00:14:47.620 --> 00:14:48.740
- I definitely agree.


00:14:48.740 --> 00:14:51.380
Yeah, there was like a week of time


00:14:51.380 --> 00:14:56.380
in between when that CVE just mentioned Chrome and Apple,


00:14:56.380 --> 00:14:59.180
and then when it actually ended up mentioning LibWebP,


00:14:59.180 --> 00:15:00.620
and then right when it mentioned LibWebP,


00:15:00.620 --> 00:15:03.780
I'm like, oh, I know a lot of Python packages use that.


00:15:03.780 --> 00:15:07.060
And so I then went out and go and talk to those people.


00:15:07.060 --> 00:15:09.500
And they fixed those things now.


00:15:09.500 --> 00:15:10.540
- Yeah, that's great.


00:15:10.540 --> 00:15:14.460
Another good reason to stay on top of


00:15:14.460 --> 00:15:16.920
dependency management and stuff, right?


00:15:16.920 --> 00:15:17.880
Like tools.


00:15:19.620 --> 00:15:24.780
One of the things I think we're coming to sort of understand and manage better


00:15:24.780 --> 00:15:28.180
in the Python space is not your dependencies,


00:15:28.180 --> 00:15:31.260
but the transitive closure of your dependencies, right?


00:15:31.260 --> 00:15:33.820
So I might use, let me just say a guess,


00:15:33.820 --> 00:15:36.100
what if I use Pillow to work with images,


00:15:36.100 --> 00:15:40.100
but Pillow itself uses some other library that it pip installs


00:15:40.100 --> 00:15:42.620
that itself might have some kind of image code.


00:15:42.620 --> 00:15:45.820
If I say I use Pillow, oh, I need to update it,


00:15:46.380 --> 00:15:49.500
pip install --upgrade pillow


00:15:49.500 --> 00:15:52.940
doesn't upgrade its dependencies


00:15:52.940 --> 00:15:54.820
and those dependencies of the, right?


00:15:54.820 --> 00:15:56.820
So like, but that could be where


00:15:56.820 --> 00:15:58.820
a lot of silence issues live.


00:15:58.820 --> 00:16:02.540
And so things like Poetry, Flit, pip-tools,


00:16:02.540 --> 00:16:03.700
there's a lot of tools coming on


00:16:03.700 --> 00:16:05.060
that I think are gaining popularity


00:16:05.060 --> 00:16:08.060
that treat not just what you directly wanted


00:16:08.060 --> 00:16:11.740
to pip install, but its friends and its dependencies.


00:16:11.740 --> 00:16:12.580
- Yeah, definitely.


00:16:12.580 --> 00:16:13.400
- What's your thought about that


00:16:13.400 --> 00:16:15.140
from a security perspective?


00:16:15.140 --> 00:16:20.980
Yes. So having the most important thing from like a kind of dependency management side


00:16:20.980 --> 00:16:28.360
of things is having those lock files and having them have hashes. Like it's less of a problem


00:16:28.360 --> 00:16:34.600
now. Like I, it likely won't come to fruition that those hashes end up being important,


00:16:34.600 --> 00:16:39.480
but luckily lots of lock file formats do generate hashes anyways, which is great. So that subverts


00:16:39.480 --> 00:16:42.200
attacks against PyPI partially.


00:16:42.200 --> 00:16:45.520
And in the middle, DNS madness.


00:16:45.520 --> 00:16:46.560
Right, yeah.


00:16:46.560 --> 00:16:52.440
Like if somehow you've been tricked into using a bad certificate or something, right?


00:16:52.440 --> 00:16:54.800
Like it, it saves you from a lot of stuff like that.


00:16:54.800 --> 00:16:57.380
So having hashes, they're basically free.


00:16:57.380 --> 00:16:58.380
They're great.


00:16:58.380 --> 00:16:59.440
Just use those.


00:16:59.440 --> 00:17:05.160
The other side of it is running a vulnerability checker against those dependencies, because


00:17:05.160 --> 00:17:08.680
then you'll or either that or having a tool that's doing that for you.


00:17:08.680 --> 00:17:11.480
So like Dependabot is a tool that does that for you.


00:17:11.480 --> 00:17:13.280
It will check vulnerability databases


00:17:13.280 --> 00:17:17.040
and then give you like a security notification or a PR


00:17:17.040 --> 00:17:21.360
to say, hey, this is affected by a medium severity


00:17:21.360 --> 00:17:24.740
vulnerability, or you can run them your own via pip audit


00:17:24.740 --> 00:17:28.200
with, you can either check an already installed environment


00:17:28.200 --> 00:17:30.480
or it can check like a requirements file.


00:17:30.480 --> 00:17:33.480
I don't know the full extent of all the different file types


00:17:33.480 --> 00:17:34.320
that it can check.


00:17:34.320 --> 00:17:37.560
I know that it works on requirements.txt, but yeah,


00:17:37.560 --> 00:17:40.100
it'll check those files for known vulnerabilities


00:17:40.100 --> 00:17:42.100
and all of the transitive dependencies,


00:17:42.100 --> 00:17:43.400
just everything that's available.


00:17:43.400 --> 00:17:45.400
And then from there, it'll tell you,


00:17:45.400 --> 00:17:47.700
"Hey, these are the things that you need to fix.


00:17:47.700 --> 00:17:49.300
Here are the fixed versions.


00:17:49.300 --> 00:17:51.300
Try upgrading to at least this."


00:17:51.300 --> 00:17:54.100
- It doesn't mean that it's easy. - It goes back to that


00:17:54.100 --> 00:17:56.100
advisory database you talked about?


00:17:56.100 --> 00:17:58.100
It does go back to that advisory database.


00:17:58.100 --> 00:18:02.000
And it also can hook into osv.dev,


00:18:02.000 --> 00:18:05.800
which is kind of like this global aggregation


00:18:05.800 --> 00:18:11.080
of tons of different vulnerability databases. So for example, we have one for Python that


00:18:11.080 --> 00:18:18.760
I pointed out, but then like Rust has one, Debian has one, what is it? Rocky Linux, I think has one,


00:18:18.760 --> 00:18:23.080
like there's just a whole bunch of them. And you can kind of interface with this database using the


00:18:23.080 --> 00:18:31.480
same API. And it's kind of nice. So yeah. - So making this the security show, we just talked


00:18:31.480 --> 00:18:35.680
I talked to Mike Fiedler a little while ago about that as well, diving into it.


00:18:35.680 --> 00:18:39.000
We'll come back to the release process, but I do want to ask you about this.


00:18:39.000 --> 00:18:43.680
One of the challenges I see is I've got to depend upon a warning.


00:18:43.680 --> 00:18:49.960
Luckily it was for basically the requirements-dev side, not the true requirements.


00:18:49.960 --> 00:18:55.320
I'm going to use a bunch more tools to do Jupyter stuff on my data, but I'm really just


00:18:55.320 --> 00:18:59.920
running a website and there's a much smaller set of things on there.


00:18:59.920 --> 00:19:07.600
But there was a vulnerability report for something, some package that was in my requirements for


00:19:07.600 --> 00:19:10.600
the dev verge, the dev setup.


00:19:10.600 --> 00:19:15.800
However, when I tried to go update it, one other package that was the reason that was


00:19:15.800 --> 00:19:20.360
there, said, "No, it has to be less than something."


00:19:20.360 --> 00:19:23.720
And that something was less than the fix.


00:19:23.720 --> 00:19:26.240
And I'm like, "How do I square these two things?"


00:19:26.240 --> 00:19:31.440
I can pip install it, but then it keeps complaining that you're running the wrong version.


00:19:31.440 --> 00:19:32.440
No, I'm not.


00:19:32.440 --> 00:19:36.200
The other one has a remote CVE in it, a remote code execution in it.


00:19:36.200 --> 00:19:38.200
I'm like, I really don't want that.


00:19:38.200 --> 00:19:41.680
Not a server, so it's probably fine, but I really don't want that.


00:19:41.680 --> 00:19:44.160
I don't care if it's slightly more unstable.


00:19:44.160 --> 00:19:45.320
I want the new one.


00:19:45.320 --> 00:19:47.560
Give it to me.


00:19:47.560 --> 00:19:49.640
That's a bit of a challenge, I think.


00:19:49.640 --> 00:19:54.320
When you say, I've got 50 dependencies, and I've got to somehow square, I need to get


00:19:54.320 --> 00:19:55.480
a brand new one right away.


00:19:55.480 --> 00:19:56.760
What are your thoughts on that?


00:19:56.760 --> 00:19:59.560
Yeah, this is a super tough problem.


00:19:59.560 --> 00:20:04.600
And I think it's one that open source will be coming to reckon with even more now, right?


00:20:04.600 --> 00:20:09.480
Because we're kind of in a place now where there's a few really important libraries,


00:20:09.480 --> 00:20:15.480
which are kind of moving something that is very extensively and widely used


00:20:15.480 --> 00:20:16.760
to be not maintained anymore.


00:20:16.760 --> 00:20:18.760
For example, OpenSSL.


00:20:18.760 --> 00:20:24.760
OpenSSL 1 or 1.1.1, which is extremely widely used,


00:20:24.760 --> 00:20:27.320
is no longer maintained.


00:20:27.320 --> 00:20:29.760
There's going to be no more security patches for that.


00:20:29.760 --> 00:20:33.540
And it's going to be tough because my guess is


00:20:33.540 --> 00:20:36.280
that there's also just a lot of software that's not built


00:20:36.280 --> 00:20:41.240
for OpenSSL 3 being the OpenSSL of choice, right?


00:20:41.240 --> 00:20:43.800
Luckily Python is not in that situation,


00:20:43.800 --> 00:20:47.120
but it's certainly like a thing that other pieces


00:20:47.120 --> 00:20:48.920
of software might have to deal with.


00:20:48.920 --> 00:20:51.660
In terms of Python packaging,


00:20:52.600 --> 00:20:59.200
This is kind of why the guidance on don't specify an upper bound unless you know that


00:20:59.200 --> 00:21:01.920
that upper bound like makes sense.


00:21:01.920 --> 00:21:07.200
And like so like backwards incompatibility, like yeah, maybe you want to say, okay, if


00:21:07.200 --> 00:21:12.520
this is version 2.1 dot whatever, and it's SemVer, you can say, okay, anything less than


00:21:12.520 --> 00:21:15.320
three is probably fine.


00:21:15.320 --> 00:21:17.520
But even that, right, if that package goes unmaintained.


00:21:17.520 --> 00:21:20.800
>> Yeah, this went from two to three in its main version, right?


00:21:20.800 --> 00:21:21.800
It's major version.


00:21:21.800 --> 00:21:25.640
- Right, yeah, so this is a difficulty.


00:21:25.640 --> 00:21:26.760
- Yeah, there's a lot of packages


00:21:26.760 --> 00:21:28.080
that set hard upper bounds,


00:21:28.080 --> 00:21:30.800
and I just, I don't know why,


00:21:30.800 --> 00:21:34.760
because maybe it's gonna break it,


00:21:34.760 --> 00:21:36.200
but I feel like it's speculative.


00:21:36.200 --> 00:21:38.940
Like, ah, we should probably not let a major version run.


00:21:38.940 --> 00:21:41.800
But that leads into trouble, right?


00:21:41.800 --> 00:21:43.920
Like, even if you just wanna use some other library


00:21:43.920 --> 00:21:45.320
that says greater than or equal to three,


00:21:45.320 --> 00:21:46.440
and this one says less than three,


00:21:46.440 --> 00:21:47.760
you're like, great, now what do I do?


00:21:47.760 --> 00:21:48.920
- Yeah, I think the toughest thing


00:21:48.920 --> 00:21:55.640
that you can't go back and then like amend it. Yeah. That's the hardest part is because so I


00:21:55.640 --> 00:22:02.440
will speak very very highly of all of these anything that can make pip automatically get


00:22:02.440 --> 00:22:10.920
the right thing is just magical is so good and so people like that and I totally get why people are


00:22:10.920 --> 00:22:16.200
doing these upper bound sorts of things but yeah it does have the issues that you that you talked


00:22:16.200 --> 00:22:22.360
about but yeah there's something to say about how great the uh those bound checks are i wish there


00:22:22.360 --> 00:22:27.880
was a way that you could add something like some sort of guidance to pip to say after the fact like


00:22:27.880 --> 00:22:33.160
okay i said this was open but now i'm gonna go ahead and tell you that like this definitely


00:22:33.160 --> 00:22:37.240
doesn't work with this version maybe that's something that can get recommended but yeah


00:22:37.240 --> 00:22:39.800
it's just so nice when it does work out


00:22:43.560 --> 00:22:48.560
I can relate to Frank here who writes,


00:22:48.560 --> 00:22:53.560
"With 1.3 thousand, 1,300 dependencies in our project,"


00:22:53.560 --> 00:22:56.560
because of this, dependencies are hell at all times.


00:22:56.560 --> 00:22:59.560
I have on Talk Python Training, the course's website,


00:22:59.560 --> 00:23:03.560
I think there's 248 packages if you look at what's installed


00:23:03.560 --> 00:23:05.560
and then the dependencies.


00:23:05.560 --> 00:23:07.560
Then you try to throw in the data science-y stuff


00:23:07.560 --> 00:23:09.560
and it's just like, there's a 50/50 chance


00:23:09.560 --> 00:23:12.560
that I can actually install everything.


00:23:12.560 --> 00:23:14.680
It's like half the time something has got a less than,


00:23:14.680 --> 00:23:17.520
something's got a greater than, and I'm like, oh my gosh.


00:23:17.520 --> 00:23:18.440
As you upgrade, right?


00:23:18.440 --> 00:23:21.000
Like at any point in time, it's deterministic.


00:23:21.000 --> 00:23:24.360
But over the evolution of it, right?


00:23:24.360 --> 00:23:25.840
- Yeah, no, it's tough.


00:23:25.840 --> 00:23:27.680
It's tough when you start getting to that number.


00:23:27.680 --> 00:23:30.760
Like there's just so many intertangled things.


00:23:30.760 --> 00:23:32.720
- There are, and like the reason I bring this up now


00:23:32.720 --> 00:23:36.440
is it's a hassle when like I wanna use this library


00:23:36.440 --> 00:23:38.780
and that library, and somehow I've gotta like juggle things


00:23:38.780 --> 00:23:41.120
so they work, but it's concerning


00:23:41.120 --> 00:23:45.040
when you get a Dependabot alert that says there's a remote code execution,


00:23:45.040 --> 00:23:49.040
you're going to need to deal with it, and your dependencies won't let you upgrade.


00:23:49.040 --> 00:23:50.240
You know what I mean?


00:23:50.240 --> 00:23:52.080
That's why I bring this up.


00:23:52.080 --> 00:23:53.600
It's definitely concerning.


00:23:53.600 --> 00:23:56.480
Yeah, another thing that you can do, and this is...


00:23:56.480 --> 00:23:58.880
I feel like they don't talk about this as much with Dependabot,


00:23:58.880 --> 00:24:01.760
is that there are ways to mitigate vulnerabilities


00:24:01.760 --> 00:24:04.880
that doesn't necessarily have to come from upgrading.


00:24:04.880 --> 00:24:08.640
Like, I'm always going to say upgrading your dependency is the best way to go forward,


00:24:08.640 --> 00:24:14.720
because then you know that there's no chance of at least that vulnerability in particular being exploited.


00:24:14.720 --> 00:24:19.880
But if it's something like remote code execution, but it's this one component, right?


00:24:19.880 --> 00:24:22.360
As long as you're not using that component, then you're fine.


00:24:22.360 --> 00:24:28.360
Or if it's remote code execution, when you get some sort of input, whatever, right?


00:24:28.360 --> 00:24:34.600
That's that's malformed or whatever, and you're like, okay, well, that component is not exposed to the network.


00:24:34.600 --> 00:24:36.360
It's I only use it internally.


00:24:36.360 --> 00:24:38.360
So there is something to say.


00:24:38.360 --> 00:24:40.360
In the real extreme case, it's not even a server.


00:24:40.360 --> 00:24:42.360
It doesn't open a port, right?


00:24:42.360 --> 00:24:44.360
It's just a thing I run on my computer.


00:24:44.360 --> 00:24:46.360
It probably doesn't matter.


00:24:46.360 --> 00:24:48.360
Exactly.


00:24:48.360 --> 00:24:50.360
I'm the one typing into it, but if it's in your website,


00:24:50.360 --> 00:24:52.360
then all of a sudden it gets a little trickier, right?


00:24:52.360 --> 00:24:54.360
Then it gets dicier.


00:24:54.360 --> 00:24:56.360
Definitely.


00:24:56.360 --> 00:24:58.360
The stakes are higher when you attach the internet to anything.


00:24:58.360 --> 00:25:00.360
But when it's a local script, it's probably more your thing.


00:25:00.360 --> 00:25:02.360
Just look at your log file.


00:25:02.360 --> 00:25:04.360
Just tail your log file.


00:25:04.360 --> 00:25:06.760
Hack, hack, request, attempted hack, request.


00:25:06.760 --> 00:25:07.960
- WP login. - It's just nonstop.


00:25:07.960 --> 00:25:10.920
Yes, WP admin, all them things, yeah.


00:25:10.920 --> 00:25:14.760
Luckily it's WP something or something most of the time.


00:25:14.760 --> 00:25:17.880
- Yeah, you're safe against 90%, we're all good.


00:25:17.880 --> 00:25:20.040
As long as you don't return a 200 to any of those,


00:25:20.040 --> 00:25:21.800
like your traffic will remain low.


00:25:21.800 --> 00:25:24.440
- Yeah, absolutely.


00:25:24.440 --> 00:25:28.200
All right, so that's what you're doing,


00:25:28.200 --> 00:25:29.640
focusing on these kinds of things.


00:25:29.640 --> 00:25:30.840
That's really, really awesome.


00:25:30.840 --> 00:25:33.480
And thanks for giving us an even more detailed look


00:25:33.480 --> 00:25:35.480
than I expected into it.


00:25:35.480 --> 00:25:37.720
(laughing)


00:25:37.720 --> 00:25:38.820
Yeah.


00:25:38.820 --> 00:25:40.060
Let's talk about your,


00:25:40.060 --> 00:25:43.480
let's talk about the timely thing.


00:25:43.480 --> 00:25:44.720
I mean, security's always timely,


00:25:44.720 --> 00:25:47.780
but the CPython, let me see if I get this right,


00:25:47.780 --> 00:25:50.580
3.12 release coming up here on Monday.


00:25:50.580 --> 00:25:52.020
- Dang, he's got it.


00:25:52.020 --> 00:25:52.860
- Amazing.


00:25:52.860 --> 00:25:53.680
I got it, man.


00:25:53.680 --> 00:25:54.520
I'm ready.


00:25:54.520 --> 00:25:56.540
I'm ready for this new world.


00:25:56.540 --> 00:26:01.460
So there's a pep, and let's see who put this together.


00:26:01.460 --> 00:26:04.060
This is Barry Warsaw and Guido.


00:26:04.060 --> 00:26:06.220
And it is PEP 101.


00:26:06.220 --> 00:26:08.020
I love it.


00:26:08.020 --> 00:26:08.520
PEP 101.


00:26:08.520 --> 00:26:09.620
>> 101 you need, right?


00:26:09.620 --> 00:26:11.500
>> Yeah, what a perfect number.


00:26:11.500 --> 00:26:16.140
But the title is Doing Python Releases 101.


00:26:16.140 --> 00:26:17.740
That's kind of circular.


00:26:17.740 --> 00:26:18.700
I love it.


00:26:18.700 --> 00:26:21.060
And it just talks about all the steps.


00:26:21.060 --> 00:26:25.540
And it's kind of a manual of now you do this, now you do that.


00:26:25.540 --> 00:26:28.660
But it's just a really long doc.


00:26:28.660 --> 00:26:32.380
I love the stop, stop, stop, stop, stop.


00:26:32.380 --> 00:26:35.700
There's like, there's like a all caps all across.


00:26:35.700 --> 00:26:36.660
Stop, stop, stop, stop, stop.


00:26:36.660 --> 00:26:37.940
Did you do this right?


00:26:37.940 --> 00:26:38.780
Right?


00:26:38.780 --> 00:26:39.600
- Yep.


00:26:39.600 --> 00:26:40.980
That you can tell, you can always tell


00:26:40.980 --> 00:26:44.100
when there were problems in the past in a checklist, right?


00:26:44.100 --> 00:26:47.380
Like if there ever was something that happened incorrectly,


00:26:47.380 --> 00:26:48.540
it's very obvious.


00:26:48.540 --> 00:26:50.500
And so, yeah, the stop, stop, stop.


00:26:50.500 --> 00:26:54.380
I feel that that, I don't personally know why that's there,


00:26:54.380 --> 00:26:56.940
but I do laugh every time I see it, so.


00:26:58.100 --> 00:27:01.220
Yeah, let's see.


00:27:01.220 --> 00:27:04.100
Please note how PEP 101 replaces PEP 102.


00:27:04.100 --> 00:27:06.740
Time traveling was invented there.


00:27:06.740 --> 00:27:08.140
What is the--


00:27:08.140 --> 00:27:10.740
- Yeah, at the very top, I wanted to comment on that too.


00:27:10.740 --> 00:27:13.020
It said replaces PEP 102.


00:27:13.020 --> 00:27:16.100
And I wonder if it was more like a,


00:27:16.100 --> 00:27:20.180
oh, we should just use 101 sort of situation.


00:27:20.180 --> 00:27:22.460
- Well, I think this is doing micro releases.


00:27:22.460 --> 00:27:23.300
- Right.


00:27:23.300 --> 00:27:26.780
- Is this one maybe more like full, like the full deal?


00:27:26.780 --> 00:27:27.620
I don't know.


00:27:27.620 --> 00:27:30.380
I think security releases are, they're slightly different.


00:27:30.380 --> 00:27:33.100
We don't actually build binary installers


00:27:33.100 --> 00:27:34.540
for security releases.


00:27:34.540 --> 00:27:37.620
We only build source builds,


00:27:37.620 --> 00:27:39.860
like source tarballs for micro releases.


00:27:39.860 --> 00:27:43.780
And so maybe that was the distinction in 102.


00:27:43.780 --> 00:27:44.920
- Sure.


00:27:44.920 --> 00:27:45.760
Okay.


00:27:45.760 --> 00:27:49.140
So this has existed since 2001,


00:27:49.140 --> 00:27:53.160
but you gotta really dig into it.


00:27:53.160 --> 00:27:55.340
And you know, there's some interesting stuff there,


00:27:55.340 --> 00:27:57.960
but picture, a thousand words, all these things,


00:27:57.960 --> 00:28:00.500
you put together a really nice graphic here.


00:28:00.500 --> 00:28:04.060
And somehow you got this in like HTML, I'm impressed.


00:28:04.060 --> 00:28:05.580
- Yeah, that's embedded SVG.


00:28:05.580 --> 00:28:10.340
I always use draw.io for my diagrams.


00:28:10.340 --> 00:28:12.380
I take pride in my diagrams.


00:28:12.380 --> 00:28:13.920
- Yeah, looks good.


00:28:13.920 --> 00:28:17.260
All right, so there are 10 steps.


00:28:17.260 --> 00:28:19.300
Some of the steps have ABCs in them.


00:28:19.300 --> 00:28:24.520
And just for people who pull up this picture


00:28:24.520 --> 00:28:27.160
And obviously being a podcast, it's hard to see the picture


00:28:27.160 --> 00:28:29.160
if you're not watching the live stream.


00:28:29.160 --> 00:28:33.260
I will put a link to the article


00:28:33.260 --> 00:28:34.720
which has the picture in there.


00:28:34.720 --> 00:28:36.680
And if I remember right,


00:28:36.680 --> 00:28:38.240
I'll even put it as the chapter art.


00:28:38.240 --> 00:28:40.080
We'll see about that.


00:28:40.080 --> 00:28:41.400
But there's a legend in here.


00:28:41.400 --> 00:28:43.640
So you've got like different types of things.


00:28:43.640 --> 00:28:45.400
You've got human actors,


00:28:45.400 --> 00:28:48.720
which are golden release artifact,


00:28:48.720 --> 00:28:50.280
which is blue, a source of risk,


00:28:50.280 --> 00:28:54.000
which is where you're paying extra attention.


00:28:54.000 --> 00:28:55.560
and the start and end state.


00:28:55.560 --> 00:28:57.880
And so the colors mean stuff here


00:28:57.880 --> 00:28:59.080
and the legend at the bottom.


00:28:59.080 --> 00:29:01.880
But yeah, let's start with number one.


00:29:01.880 --> 00:29:03.600
What happens here?


00:29:03.600 --> 00:29:05.840
- Yeah, so starting with number one


00:29:05.840 --> 00:29:08.080
and I'm actually gonna increase the size of my screen


00:29:08.080 --> 00:29:11.760
as well because I'm gonna pull it up separately myself.


00:29:11.760 --> 00:29:12.600
- Yeah.


00:29:12.600 --> 00:29:13.440
- Feel free to cut this out.


00:29:13.440 --> 00:29:15.160
- There's a lot going on here.


00:29:15.160 --> 00:29:16.000
There's a lot going on here.


00:29:16.000 --> 00:29:19.080
You need some Command or Control + on it.


00:29:19.080 --> 00:29:19.960
- Yep.


00:29:19.960 --> 00:29:20.800
Okay, all right.


00:29:20.800 --> 00:29:27.100
So in the very beginning, what happens is essentially the release manager decides it's


00:29:27.100 --> 00:29:28.460
time to make a release.


00:29:28.460 --> 00:29:30.660
And Thomas Werther's right now.


00:29:30.660 --> 00:29:33.860
Yeah, like we're live recording this right now.


00:29:33.860 --> 00:29:36.900
And so we're deciding, okay, we're gonna make a release.


00:29:36.900 --> 00:29:42.300
And so something that happens even before this is, we kind of talk amongst all of the


00:29:42.300 --> 00:29:46.560
other, it says release managers in there, like Windows release manager, macOS release


00:29:46.560 --> 00:29:50.540
manager, they kind of flip between that language and experts.


00:29:50.540 --> 00:29:53.260
So like Windows expert, macOS expert.


00:29:53.260 --> 00:29:55.180
- Someone who understands this weird Windows things


00:29:55.180 --> 00:29:56.940
that can make a MSI installer.


00:29:56.940 --> 00:29:57.780
- Exactly.


00:29:57.780 --> 00:29:58.660
- What do you do on Mac?


00:29:58.660 --> 00:29:59.940
I don't even know how to build that.


00:29:59.940 --> 00:30:00.960
Right, that person.


00:30:00.960 --> 00:30:01.940
Yeah.


00:30:01.940 --> 00:30:02.780
- Yeah.


00:30:02.780 --> 00:30:03.700
Talk to them.


00:30:03.700 --> 00:30:07.180
Get their buy-in that indeed they're gonna be around


00:30:07.180 --> 00:30:08.340
when you decide to do this,


00:30:08.340 --> 00:30:10.980
because this is kind of like a big coordinated thing.


00:30:10.980 --> 00:30:13.680
Everyone has to be around to do their part.


00:30:13.680 --> 00:30:15.860
And then if that is the case,


00:30:15.860 --> 00:30:18.080
then the release branch gets frozen.


00:30:18.080 --> 00:30:20.880
So in this case, that release branch would be 312.


00:30:20.880 --> 00:30:27.880
And so that's done by essentially putting a block on all future pushes to the branch,


00:30:27.880 --> 00:30:31.280
like in GitHub, you use branch protection.


00:30:31.280 --> 00:30:36.080
And that's basically to make it so that no one can merge pull requests anymore,


00:30:36.080 --> 00:30:39.280
so that you have something that's stable that you can kind of work off of.


00:30:39.280 --> 00:30:42.380
And then after that, you'd move on to step two,


00:30:42.380 --> 00:30:47.280
which is the actual release manager will update their fork of the repo


00:30:47.280 --> 00:30:49.120
with whatever is on that branch.


00:30:49.120 --> 00:30:52.400
So like the 312 branch will get updated


00:30:52.400 --> 00:30:56.960
and then you'll pull that branch locally now on step three.


00:30:56.960 --> 00:30:59.800
So now you're on the actual release managers machine.


00:30:59.800 --> 00:31:02.520
And so like, I kind of have like gray boxes


00:31:02.520 --> 00:31:03.920
drawn kind of throughout.


00:31:03.920 --> 00:31:07.640
So those are kind of like security boundaries a little bit.


00:31:07.640 --> 00:31:12.640
The top most one is the GitHub like organization of Python.


00:31:12.640 --> 00:31:16.240
And then the middle, the tiny one that has the fork repo


00:31:16.240 --> 00:31:20.400
That's the GitHub user for the release manager in particular.


00:31:20.400 --> 00:31:22.680
And then the furthest left, the gigantic one,


00:31:22.680 --> 00:31:24.880
is the release manager's actual computer.


00:31:24.880 --> 00:31:27.460
It's not documented anywhere.


00:31:27.460 --> 00:31:29.360
It's just how I was thinking about it.


00:31:29.360 --> 00:31:33.200
But yeah, so then there's this thing called release tool.


00:31:33.200 --> 00:31:35.600
And so release tool is basically just a Python script.


00:31:35.600 --> 00:31:36.480
It's on GitHub.


00:31:36.480 --> 00:31:41.360
If you go to github.com/python/release-tool,


00:31:41.360 --> 00:31:44.560
it's basically just a script that runs


00:31:44.560 --> 00:31:48.800
and then does all of the stuff that's needed to build


00:31:48.800 --> 00:31:51.040
the source distribution and documentation


00:31:51.040 --> 00:31:52.960
of a new Python release.


00:31:52.960 --> 00:31:56.160
And so you run that, and as a result,


00:31:56.160 --> 00:31:58.980
you kind of get like a huge amount of code


00:31:58.980 --> 00:32:00.980
that needs to be committed.


00:32:00.980 --> 00:32:02.760
And so there's a whole bunch of different little tools


00:32:02.760 --> 00:32:04.760
that kind of get run in addition to that.


00:32:04.760 --> 00:32:09.120
So things like Blurb, Sphinx gets run as a part of that.


00:32:09.120 --> 00:32:13.440
Yeah, you need a whole lot of dependencies installed.


00:32:13.440 --> 00:32:16.760
So you like you need like late tech, you need a whole bunch of stuff installed for this


00:32:16.760 --> 00:32:18.760
to actually work.


00:32:18.760 --> 00:32:23.800
Do you make sure you've got like the right right compiler?


00:32:23.800 --> 00:32:26.440
Is there a lot of concern about that?


00:32:26.440 --> 00:32:32.280
Like is it clang or LLVM or GCC or, you know, I believe it's GCC.


00:32:32.280 --> 00:32:33.760
I believe it's GCC.


00:32:33.760 --> 00:32:35.720
You know, I didn't dig into that exact point.


00:32:35.720 --> 00:32:36.720
No, it's fine.


00:32:36.720 --> 00:32:37.720
It's fine.


00:32:37.720 --> 00:32:40.880
But I feel like that's another part that you like, that choice matters, right?


00:32:40.880 --> 00:32:43.840
Like you might get different outputs, you might discover bugs that weren't there.


00:32:43.840 --> 00:32:48.160
So you got to kind of get that gray box all set up as well.


00:32:48.160 --> 00:32:49.160
Right?


00:32:49.160 --> 00:32:50.160
Yeah, definitely.


00:32:50.160 --> 00:32:56.440
And so the fact that it's on someone's machine, I would say reproducibility is quite tough


00:32:56.440 --> 00:32:57.760
in those sorts of situations.


00:32:57.760 --> 00:32:58.760
Right?


00:32:58.760 --> 00:33:04.960
Like if, if, if someone were to build a release of Python, and then a day goes by, like, I


00:33:04.960 --> 00:33:10.260
guarantee you that the if you tried to do it again, with the exact same starting input,


00:33:10.260 --> 00:33:12.820
it would be potentially different, right?


00:33:12.820 --> 00:33:14.540
And so that's actually a problem


00:33:14.540 --> 00:33:17.060
from a security perspective, reproducibility,


00:33:17.060 --> 00:33:21.460
because it means that someone else can't verify


00:33:21.460 --> 00:33:24.900
that what you did is correct, right?


00:33:24.900 --> 00:33:26.300
- Right, like the hash might change


00:33:26.300 --> 00:33:27.840
or something like that, right?


00:33:27.840 --> 00:33:30.900
- Hashes might change, or if there's like somehow


00:33:30.900 --> 00:33:34.140
the time is getting embedded into a binary somewhere,


00:33:34.140 --> 00:33:36.220
like there's just a whole bunch of different ways


00:33:36.220 --> 00:33:39.500
that reproducibility could be different


00:33:39.500 --> 00:33:40.860
between two different runs.


00:33:40.860 --> 00:33:44.660
Yeah, and so then after the release tool happens,


00:33:44.660 --> 00:33:49.060
you basically get handed a couple of source tarballs


00:33:49.060 --> 00:33:50.860
that just have everything in them.


00:33:50.860 --> 00:33:52.820
And then you also get a bunch of,


00:33:52.820 --> 00:33:55.060
get like changes to the repository.


00:33:55.060 --> 00:33:58.180
So these are things like the change log has been generated


00:33:58.180 --> 00:34:00.200
from all of the blurb notes.


00:34:00.200 --> 00:34:04.180
And so what you do is then you take all of those changes


00:34:04.180 --> 00:34:05.960
and you create a big commit that says,


00:34:05.960 --> 00:34:10.700
this is the release of CPython 3.12.0.


00:34:10.700 --> 00:34:14.700
And then you tag it and you push that to the fork.


00:34:14.700 --> 00:34:17.060
You don't push that to the main repository yet.


00:34:17.060 --> 00:34:19.660
And so the reason you don't push that to the main repository,


00:34:19.660 --> 00:34:24.100
and this is actually something that this phenomena is an interesting one,


00:34:24.100 --> 00:34:28.900
especially because a lot of security build tooling doesn't


00:34:28.900 --> 00:34:32.800
take this workflow into account,


00:34:32.800 --> 00:34:39.400
which is you don't push the tag to the origin until the very end.


00:34:39.400 --> 00:34:46.100
A lot of security tooling like Salsa and all of these things will kind of...


00:34:46.100 --> 00:34:49.400
they won't assume because you can do it without tags,


00:34:49.400 --> 00:34:53.500
but they'll have features that are, "Oh, we'll capture the git tag


00:34:53.500 --> 00:35:00.700
in the output of this document that says that your build came from this repository,


00:35:00.700 --> 00:35:02.400
this setup tooling, whatever."


00:35:02.400 --> 00:35:06.480
But a lot of projects actually wait on the tag


00:35:06.480 --> 00:35:08.360
until the very end because they want things


00:35:08.360 --> 00:35:11.920
to be repeatable without causing confusion.


00:35:11.920 --> 00:35:13.120
So if something went wrong


00:35:13.120 --> 00:35:15.440
throughout this whole release process,


00:35:15.440 --> 00:35:18.000
you wouldn't want there to be a tag on the main repo


00:35:18.000 --> 00:35:20.040
that is now confusing people, right?


00:35:20.040 --> 00:35:20.880
Because those tags cause confusion.


00:35:20.880 --> 00:35:22.360
- Oh look, it's already here, I'm gonna get the code.


00:35:22.360 --> 00:35:25.480
You're like, actually, no, the Mac build wouldn't build,


00:35:25.480 --> 00:35:27.840
we're gonna fix that or whatever, right?


00:35:27.840 --> 00:35:28.920
- Right, exactly.


00:35:28.920 --> 00:35:32.020
And so this whole thing is like very,


00:35:32.020 --> 00:35:33.140
It's a common thing.


00:35:33.140 --> 00:35:35.460
So pip actually has this exact same workflow


00:35:35.460 --> 00:35:38.740
where they do everything in the release until the very end


00:35:38.740 --> 00:35:40.680
and then they push the tag to the repo


00:35:40.680 --> 00:35:42.980
because they know that if they push that tag


00:35:42.980 --> 00:35:45.540
and it needs to change, it's gonna cause confusion.


00:35:45.540 --> 00:35:50.180
So yeah, that kind of is like step five in there.


00:35:50.180 --> 00:35:51.180
It pushes that tag.


00:35:51.180 --> 00:35:55.220
And so that tag is highlighted red as a source of risk


00:35:55.220 --> 00:35:58.380
because that is a fork of CPython


00:35:58.380 --> 00:36:03.380
And tags, tags are not in themselves verifiable


00:36:03.380 --> 00:36:07.300
because anyone can push a tag.


00:36:07.300 --> 00:36:11.040
If you're just looking at just the name of the tag,


00:36:11.040 --> 00:36:13.540
anyone can write a tag if you have right access


00:36:13.540 --> 00:36:16.120
to a Git repository or a GitHub repository.


00:36:16.120 --> 00:36:20.740
And so if you push a tag and say someone has access


00:36:20.740 --> 00:36:23.580
to your account, someone could move that tag


00:36:23.580 --> 00:36:25.880
to a different commit, completely different commit.


00:36:25.880 --> 00:36:28.460
And if it were pulled in that time,


00:36:28.460 --> 00:36:30.920
and no one decided to like check something else,


00:36:30.920 --> 00:36:33.360
so like the commit hash, for example,


00:36:33.360 --> 00:36:34.840
you would be circumvent,


00:36:34.840 --> 00:36:37.960
like it would be able to inject code into the process, right?


00:36:37.960 --> 00:36:40.560
As far as we know, that has not happened.


00:36:40.560 --> 00:36:41.400
Yeah, that is bad.


00:36:41.400 --> 00:36:43.360
It is bad to inject arbitrary,


00:36:43.360 --> 00:36:46.640
someone else's arbitrary code into Python directly.


00:36:46.640 --> 00:36:48.720
And it's also, it's actually doubly bad


00:36:48.720 --> 00:36:51.800
because there's different degrees of bad in term,


00:36:51.800 --> 00:36:53.840
like in supply chain security.


00:36:53.840 --> 00:36:57.440
one degree of bad is like, if you're able to do bad stuff,


00:36:57.440 --> 00:36:59.800
but then people notice, right?


00:36:59.800 --> 00:37:02.360
Or like people can see what happened.


00:37:02.360 --> 00:37:05.120
And so this is kind of like degrees of bad of,


00:37:05.120 --> 00:37:07.240
you can inject code and then you can clean up


00:37:07.240 --> 00:37:09.440
after yourself afterwards, because you could--


00:37:09.440 --> 00:37:10.520
- Put the tag back.


00:37:10.520 --> 00:37:12.980
- Put the tag back, do you have write access, right?


00:37:12.980 --> 00:37:15.720
And so that sort of like put the tag back


00:37:15.720 --> 00:37:19.740
or being able to circumvent it in that way is not good.


00:37:19.740 --> 00:37:22.680
Yeah.


00:37:22.680 --> 00:37:29.640
give people ideas. These are not new ideas. So I feel bad talking about these. Yeah, another thing


00:37:29.640 --> 00:37:37.480
in this article is actually like tying every step of the release process back to a known attack that


00:37:37.480 --> 00:37:45.240
has succeeded against another project. So like solar winds was about build, like release artifact


00:37:45.240 --> 00:37:50.680
poisoning, essentially, right, you're like taking advantage of the fact that these release artifacts


00:37:50.680 --> 00:37:57.000
are being distributed and you know they're signed everything looks good but you've gotten code


00:37:57.000 --> 00:38:02.280
injected into the actual artifact itself and it didn't get noticed right and so like that sort of


00:38:02.280 --> 00:38:09.720
attack could happen against Python if if there's not mitigations against it right and so yeah and


00:38:09.720 --> 00:38:14.680
then the next step is six and so at this point this the release manager has source tarballs


00:38:14.680 --> 00:38:19.160
from the result of just running the release tool and so they're kind of just waiting


00:38:19.160 --> 00:38:23.720
they're sitting around waiting for the other experts to do their thing now.


00:38:23.720 --> 00:38:29.240
And this is where Windows and macOS installers are actually built.


00:38:29.240 --> 00:38:35.000
And so these aren't built for security releases, but for 3.12.0, these will be built.


00:38:35.000 --> 00:38:40.840
And they're two completely different sets of build processes.


00:38:40.840 --> 00:38:42.920
One of them happens in Azure Pipelines.


00:38:42.920 --> 00:38:45.880
So if you go to that release tool,


00:38:45.880 --> 00:38:51.160
there's actually like a Windows folder that just has 100 YAML files in it for all of the


00:38:51.160 --> 00:38:55.480
different Azure pipeline configurations. - Yeah. Azure pipelines a little bit like


00:38:55.480 --> 00:39:00.920
GitHub actions. People are familiar with that, but not Azure, right? Something roughly.


00:39:00.920 --> 00:39:05.320
- Yeah, yeah. And I think there was like a time where Azure pipelines and GitHub actions


00:39:05.320 --> 00:39:07.320
were like basically the same thing. - Yeah, yeah.


00:39:07.320 --> 00:39:14.200
- Like in the very beginning. Yeah. So Azure pipelines, there's a whole bunch of stuff that


00:39:14.200 --> 00:39:18.460
that happens there because there's Windows embeddable packages is something that gets


00:39:18.460 --> 00:39:23.960
uploaded to python.org. Windows installers also get uploaded to python.org. But that


00:39:23.960 --> 00:39:28.800
also there's like NuGet gets updated, the Windows Store gets updated there. So like


00:39:28.800 --> 00:39:33.500
there's a lot happening there. And there's actually a lot of things that happen that


00:39:33.500 --> 00:39:39.080
require the actual release manager, the Windows release manager to like approve them. So like


00:39:39.080 --> 00:39:44.680
are gated. These are things like signing keys that are, you know, as a part of the process,


00:39:44.680 --> 00:39:48.680
you have to like sign off to say like, yep, we want to give this job access to the signing


00:39:48.680 --> 00:39:50.880
key. So that's great.


00:39:50.880 --> 00:39:56.600
Do you know if WinGet is kind of like the newer package manager for Windows? Do


00:39:56.600 --> 00:39:59.720
you know if Python goes there as well these days?


00:39:59.720 --> 00:40:03.680
You know, I haven't used Windows in a really long time. So I don't know.


00:40:03.680 --> 00:40:05.720
- I do, but I only use it for playing games


00:40:05.720 --> 00:40:08.960
and simple Windows tests, so I don't know it.


00:40:08.960 --> 00:40:11.200
All right, but yeah, so NuGet is like


00:40:11.200 --> 00:40:13.160
one of these kind of package managers for Windows,


00:40:13.160 --> 00:40:14.560
and maybe WinGet.


00:40:14.560 --> 00:40:15.880
People in the audience, if anyone knows,


00:40:15.880 --> 00:40:17.360
they can let us know.


00:40:17.360 --> 00:40:18.480
- Yeah, definitely.


00:40:18.480 --> 00:40:20.240
I've not even heard of WinGet,


00:40:20.240 --> 00:40:22.880
so I feel really out of the loop right now.


00:40:22.880 --> 00:40:25.120
- It's only a couple years old, I believe.


00:40:25.120 --> 00:40:26.760
- Gotcha, gotcha.


00:40:26.760 --> 00:40:28.320
- And following on with that,


00:40:28.320 --> 00:40:29.240
those probably won't help you


00:40:29.240 --> 00:40:30.400
if you don't do a lot of Windows.


00:40:30.400 --> 00:40:34.000
Louis asks, "Does Python maintain Chocolaty?"


00:40:34.000 --> 00:40:35.980
Which is similar to Winget,


00:40:35.980 --> 00:40:39.240
but more independent than Winget.


00:40:39.240 --> 00:40:42.440
They tried Winget and it was buggy and wasn't great.


00:40:42.440 --> 00:40:43.840
Chocolaty is maybe a little older.


00:40:43.840 --> 00:40:44.680
I don't know.


00:40:44.680 --> 00:40:46.100
Same story probably, right?


00:40:46.100 --> 00:40:48.200
- Yeah, I also don't know, unfortunately.


00:40:48.200 --> 00:40:49.040
Windows is not my strong suit.


00:40:49.040 --> 00:40:50.520
- I mean, it has a tastier name.


00:40:50.520 --> 00:40:52.140
- I, yep.


00:40:52.140 --> 00:40:54.080
- Yeah, it's all good.


00:40:54.080 --> 00:40:54.900
- Definitely a tastier name.


00:40:54.900 --> 00:40:56.200
That's how I choose all my tooling,


00:40:56.200 --> 00:40:57.540
is how tasty is the name.


00:40:59.440 --> 00:41:04.200
- Yeah, and so then the counterpart to that


00:41:04.200 --> 00:41:07.280
is the macOS binary installers.


00:41:07.280 --> 00:41:10.240
And so those are, there's basically just another set


00:41:10.240 --> 00:41:14.420
of scripts that get run on the macOS release manager,


00:41:14.420 --> 00:41:18.600
like their machine, and it builds just everything


00:41:18.600 --> 00:41:19.880
having to do with macOS.


00:41:19.880 --> 00:41:23.760
It does notarization, it does, you know, making,


00:41:23.760 --> 00:41:26.040
I know not as much about macOS either,


00:41:26.040 --> 00:41:28.040
but I know that notarization happens.


00:41:28.040 --> 00:41:31.440
And actually I've talked to a few folks about this one too,


00:41:31.440 --> 00:41:34.880
because this one, if you notice is just one square


00:41:34.880 --> 00:41:35.760
and it's just red.


00:41:35.760 --> 00:41:40.760
And I was like, yeah, there's a lot more to dig into there.


00:41:40.760 --> 00:41:43.680
- Yeah, the macOS notarization stuff


00:41:43.680 --> 00:41:45.320
is a serious pain as well.


00:41:45.320 --> 00:41:48.600
It's a little bit like submitting something


00:41:48.600 --> 00:41:53.020
to the iPhone app store where it gets reviewed.


00:41:53.020 --> 00:41:55.120
Yeah.


00:41:55.120 --> 00:41:56.120
- Yeah.


00:41:56.120 --> 00:41:57.640
- I think once you have it already notified,


00:41:57.640 --> 00:41:58.640
you can publish updates.


00:41:58.640 --> 00:42:03.840
Because I was thinking as you were talking about that, how do you design or deal with


00:42:03.840 --> 00:42:04.840
the latency?


00:42:04.840 --> 00:42:09.080
I've submitted it and how long until someone picks it up and reviews it?


00:42:09.080 --> 00:42:10.080
I don't know.


00:42:10.080 --> 00:42:15.100
But I guess once it's approved for notarization, then it just goes through pretty quickly.


00:42:15.100 --> 00:42:18.760
- You just set a really long timeout on your CI job.


00:42:18.760 --> 00:42:19.760
- Exactly.


00:42:19.760 --> 00:42:21.080
- Timeout, seven weeks.


00:42:21.080 --> 00:42:23.720
- Yeah, give it a week at least.


00:42:23.720 --> 00:42:24.720
- Yeah.


00:42:24.720 --> 00:42:28.720
No, and so then after all of those things kind of happen,


00:42:28.720 --> 00:42:32.640
there's this stage in, you know, there's a stop, stop, stop line


00:42:32.640 --> 00:42:36.000
in the PEP 101 that just basically says for the release manager


00:42:36.000 --> 00:42:39.040
to wait for everyone to be done with their thing.


00:42:39.040 --> 00:42:41.920
And then once everyone's done with their thing and has uploaded everything to


00:42:41.920 --> 00:42:45.200
python.org, there's basically like this phase of


00:42:45.200 --> 00:42:48.320
testing everything. So you, you know, download everything, you make


00:42:48.320 --> 00:42:50.720
sure everything works and all the operating systems the way that's


00:42:50.720 --> 00:42:54.400
expected to. You don't want to like blow the horn and then realize the very


00:42:54.400 --> 00:42:59.760
last mile that there's something wrong. And so like lots of testing happens and then after the


00:42:59.760 --> 00:43:05.440
testing happens at that point then everything that will get uploaded to python.org or that


00:43:05.440 --> 00:43:12.080
has been uploaded to python.org gets signed by the release manager in particular with sigstore and gpg


00:43:12.080 --> 00:43:19.120
and then from there all of those signatures get published and that is the end of python.org all of


00:43:19.120 --> 00:43:21.240
all of the artifacts are published.


00:43:21.240 --> 00:43:24.680
And only then does the release manager, this is step 10,


00:43:24.680 --> 00:43:29.280
do a git push to the actual upstream CPython repo.


00:43:29.280 --> 00:43:32.200
And at that point, then the branch can be unblocked,


00:43:32.200 --> 00:43:34.920
all of these things, the release is done, everyone's happy,


00:43:34.920 --> 00:43:35.840
we can celebrate.


00:43:35.840 --> 00:43:40.840
Yeah, that's kind of the very high level view


00:43:40.840 --> 00:43:42.400
of what happens.


00:43:42.400 --> 00:43:43.280
- Amazing.


00:43:43.280 --> 00:43:46.800
Couple of thoughts here.


00:43:46.800 --> 00:43:51.800
First of all, the Windows Square is tangibly different


00:43:51.800 --> 00:43:54.680
than the macOS Square.


00:43:54.680 --> 00:43:58.160
The Windows Square says, "Send off some source code


00:43:58.160 --> 00:44:03.160
"to Azure Pipelines," a external, repeatable CI build system.


00:44:03.160 --> 00:44:06.880
Whereas the Mac line is like, "Build it."


00:44:06.880 --> 00:44:08.680
You know what I mean?


00:44:08.680 --> 00:44:10.060
That's actually pretty interesting,


00:44:10.060 --> 00:44:12.500
and I don't know that there's an Azure Pipeline


00:44:12.500 --> 00:44:14.440
for macOS, right?


00:44:14.440 --> 00:44:17.440
That's just the sort of the story of Mac and servers.


00:44:17.440 --> 00:44:20.680
And but just highlighting those differences, right?


00:44:20.680 --> 00:44:22.080
Like it's a different thing to say,


00:44:22.080 --> 00:44:24.280
I build on my machine with whatever I got


00:44:24.280 --> 00:44:27.840
versus I push to something like Azure Pipeline CI/CD


00:44:27.840 --> 00:44:29.680
and get some results back.


00:44:29.680 --> 00:44:31.960
- Yeah, both the source tarball builds


00:44:31.960 --> 00:44:35.520
and the macOS builds are all local, right?


00:44:35.520 --> 00:44:40.520
And they're not done with a repeatable like CI provider.


00:44:40.520 --> 00:44:43.480
I was actually able to get like


00:44:43.480 --> 00:44:46.240
the actual source tarballs to work on GitHub Actions.


00:44:46.240 --> 00:44:50.240
And so that's something that I've worked on


00:44:50.240 --> 00:44:52.400
and have provided that to release managers


00:44:52.400 --> 00:44:54.400
and we're talking about it right now.


00:44:54.400 --> 00:44:57.200
And macOS is actually, to my knowledge,


00:44:57.200 --> 00:45:00.840
is actually gonna be revamped a little bit


00:45:00.840 --> 00:45:03.000
because that tooling has been around for so long.


00:45:03.000 --> 00:45:05.520
I think that there's gonna be some work done on it.


00:45:05.520 --> 00:45:07.500
And so I haven't dug into it as deeply.


00:45:07.500 --> 00:45:10.440
I've kind of more just provided a bunch of context


00:45:10.440 --> 00:45:13.080
to the release managers about things that I wanna see.


00:45:13.080 --> 00:45:14.720
Like, if I were to do this myself,


00:45:14.720 --> 00:45:17.320
this is the other things I'm interested in.


00:45:17.320 --> 00:45:21.640
- Provided that you actually had access to a macOS system,


00:45:21.640 --> 00:45:23.360
I'm sure you could do it all from the CLI


00:45:23.360 --> 00:45:26.680
because, for example, for the Talk Python courses apps,


00:45:26.680 --> 00:45:29.280
we use Flutter and you just say Flutter run


00:45:29.280 --> 00:45:34.280
and it compiles that iOS or macOS version


00:45:34.280 --> 00:45:36.280
somehow through the command line


00:45:36.280 --> 00:45:38.400
and then like out comes a thing


00:45:38.400 --> 00:45:42.200
that is already deployed onto a simulator or something.


00:45:42.200 --> 00:45:44.160
So it could happen.


00:45:44.160 --> 00:45:46.900
I mean, there is some hosting,


00:45:46.900 --> 00:45:51.840
but it's kind of like, here's your Mac mini in the cloud.


00:45:51.840 --> 00:45:52.680
Go.


00:45:52.680 --> 00:45:54.000
- Yeah, I mean, there is a, what is it?


00:45:54.000 --> 00:45:56.220
GitHub Action supports macOS, so.


00:45:56.220 --> 00:45:57.060
- Does it?


00:45:57.060 --> 00:45:59.060
Okay, so yeah, so possibly, yeah.


00:45:59.060 --> 00:46:00.520
Maybe it could happen.


00:46:00.520 --> 00:46:01.360
I'm not saying it has to.


00:46:01.360 --> 00:46:03.500
I'm just, it was a kind of a striking difference


00:46:03.500 --> 00:46:05.280
that one is like a CI/CD process


00:46:05.280 --> 00:46:06.760
and one is local and manual.


00:46:06.760 --> 00:46:10.200
- Yeah, actually Windows is the most repeatable,


00:46:10.200 --> 00:46:15.000
most like actually isolated from any,


00:46:15.000 --> 00:46:17.640
from the, just the machine itself, right?


00:46:17.640 --> 00:46:19.000
The release manager themselves.


00:46:19.000 --> 00:46:20.480
So, yeah.


00:46:20.480 --> 00:46:22.400
- Yeah, that's pretty interesting.


00:46:22.400 --> 00:46:24.520
And then we have binaries and they get published


00:46:24.520 --> 00:46:26.240
and everybody is happy.


00:46:26.240 --> 00:46:27.960
We all go and install it.


00:46:27.960 --> 00:46:30.740
And it's been in testing for quite a while, right?


00:46:30.740 --> 00:46:32.800
Like we've had a bunch of betas.


00:46:32.800 --> 00:46:35.680
We had alphas, we have had three release candidates


00:46:35.680 --> 00:46:39.960
and on Monday we'll have a dot zero.


00:46:39.960 --> 00:46:40.960
It's exciting.


00:46:40.960 --> 00:46:41.960
It's really exciting.


00:46:41.960 --> 00:46:42.960
- It is exciting.


00:46:42.960 --> 00:46:43.960
It is exciting.


00:46:43.960 --> 00:46:48.920
The other question I would ask you is like, what is the time from like step one to step


00:46:48.920 --> 00:46:49.920
10?


00:46:49.920 --> 00:46:53.160
How much clock time has passed wall time?


00:46:53.160 --> 00:46:58.560
- I would say that it's on the scale of hours.


00:46:58.560 --> 00:47:00.920
It's not like a day.


00:47:00.920 --> 00:47:03.560
Which is kind of incredible, right?


00:47:03.560 --> 00:47:09.160
The fact that you get three volunteers together to do a bunch of all of this stuff.


00:47:09.160 --> 00:47:11.280
It only takes a couple hours.


00:47:11.280 --> 00:47:15.560
It obviously depends on how many problems you run into on the way, because if you get


00:47:15.560 --> 00:47:19.240
to the very end and then there's a problem that you find in testing, you just kind of


00:47:19.240 --> 00:47:20.240
start over.


00:47:20.240 --> 00:47:27.560
But yeah, if everything goes to plan, which has happened, I've coordinated security.


00:47:27.560 --> 00:47:32.880
Like there was a couple of security fixes that were in 3.11.5 that I coordinated.


00:47:32.880 --> 00:47:37.820
And yeah, I got to kind of witness the, okay, we've decided we're making a security release


00:47:37.820 --> 00:47:42.460
to the actual it's out there. We can now talk about the vulnerabilities. Yeah, that's


00:47:42.460 --> 00:47:49.900
on the scale. That's parsing thing. It was the what was it? There was an int part or


00:47:49.900 --> 00:47:54.220
was it in parsing? No, it was really long. And I don't know. That's a different one.


00:47:54.220 --> 00:48:03.820
No, it was. There was a TLS and this one sounds really scary. It's not as scary. It's a TLS


00:48:05.260 --> 00:48:14.620
bypass on the server side. So like if the client is supposed to be authenticated, for example,


00:48:14.620 --> 00:48:21.020
if you're using mtls, you can if you like send a handshake and then immediately close your socket,


00:48:21.020 --> 00:48:28.220
you can get lucky during like a brief period of time where the socket on the other side,


00:48:28.220 --> 00:48:34.060
like the server socket will say like, oh, it's closed. So it's fine, right? And the data that


00:48:34.060 --> 00:48:39.060
that whatever you sent over the wire will still be readable,


00:48:39.060 --> 00:48:42.300
but then the handshake hasn't actually like completed.


00:48:42.300 --> 00:48:45.220
And so that sounds like scary, right?


00:48:45.220 --> 00:48:50.220
But it's actually not as bad because so many protocols,


00:48:50.220 --> 00:48:51.820
well, for one, so many protocols


00:48:51.820 --> 00:48:54.580
don't even use client authentication at all.


00:48:54.580 --> 00:48:56.860
So that's one huge point.


00:48:56.860 --> 00:48:59.380
The other side of it is that all protocols


00:48:59.380 --> 00:49:03.740
that people do end up using like mutual TLS with


00:49:03.740 --> 00:49:09.380
are protocols that you have to send something back to--


00:49:09.380 --> 00:49:11.340
so like HTTP, for example.


00:49:11.340 --> 00:49:13.180
You have to send something back.


00:49:13.180 --> 00:49:15.100
And at that point, the socket is closed.


00:49:15.100 --> 00:49:18.500
And so it can't send the data back.


00:49:18.500 --> 00:49:21.260
So there's no data exfiltration.


00:49:21.260 --> 00:49:25.180
It's a pretty narrow scope of what's actually vulnerable.


00:49:25.180 --> 00:49:29.540
But yes, the fix for that vulnerability is in 3.11.5.


00:49:29.540 --> 00:49:31.660
And there's another one, too, but it's a little bit


00:49:31.660 --> 00:49:32.660
or minor?


00:49:32.660 --> 00:49:37.100
- Well, we'll start fresh with 3.12


00:49:37.100 --> 00:49:39.460
and hopefully you will not have to witness


00:49:39.460 --> 00:49:40.300
one of these releases.


00:49:40.300 --> 00:49:44.260
Honestly, given how large CPython is


00:49:44.260 --> 00:49:48.020
and how wide ranging its standard library attempts to be,


00:49:48.020 --> 00:49:51.460
it does not have many vulnerabilities.


00:49:51.460 --> 00:49:54.300
I mean, you go look at like a web browser upgrade.


00:49:54.300 --> 00:49:56.660
It's like, here's the 27,


00:49:56.660 --> 00:49:59.440
like remote code execution vulnerability,


00:49:59.440 --> 00:50:00.300
maybe not quite that many,


00:50:00.300 --> 00:50:04.380
But here's the 27 security fixes this month, you know?


00:50:04.380 --> 00:50:07.580
- Yeah, maybe it's a little more front of mind right now,


00:50:07.580 --> 00:50:10.380
now that like Chrome is on their fifth zero day of the week.


00:50:10.380 --> 00:50:14.380
But yeah, it's pretty tough week for Chrome right now


00:50:14.380 --> 00:50:16.900
and Firefox and the rest of us.


00:50:16.900 --> 00:50:18.840
- Yeah, yeah, for sure.


00:50:18.840 --> 00:50:23.580
Let's see another comment from Frank says,


00:50:23.580 --> 00:50:27.580
"SIGstore and GPG seem a bit at the end of the process,


00:50:27.580 --> 00:50:30.540
considering these are built locally in some cases,


00:50:30.540 --> 00:50:32.660
how does one guarantee that the science sources


00:50:32.660 --> 00:50:33.640
are still right?


00:50:33.640 --> 00:50:37.460
- Yeah, so this is kind of getting to the,


00:50:37.460 --> 00:50:40.620
like I agree with you, how does one track


00:50:40.620 --> 00:50:41.860
that they're still right?


00:50:41.860 --> 00:50:45.460
So they get uploaded to python.org.


00:50:45.460 --> 00:50:47.580
And at that point, they're kind of like


00:50:47.580 --> 00:50:51.060
in a holding pattern for testing.


00:50:51.060 --> 00:50:53.380
And so those binaries are there, they're on python.org,


00:50:53.380 --> 00:50:56.140
they've got, you know, the hashes have already been taken.


00:50:56.140 --> 00:50:59.500
then the testing happens.


00:50:59.500 --> 00:51:02.780
So like anything that happens between that and the Sixth-Door Signing,


00:51:02.780 --> 00:51:05.100
like yeah, at that point it's kind of protected.


00:51:05.100 --> 00:51:09.660
But yeah, there is this really big dwell time where you just have artifacts


00:51:09.660 --> 00:51:15.340
sitting on someone's machine, and they're going to get signed and sent out the door.


00:51:15.340 --> 00:51:18.540
And that's kind of like the due diligence of release managers.


00:51:18.540 --> 00:51:21.100
They need to make sure that those are the right artifacts,


00:51:21.100 --> 00:51:23.980
that they've been tested properly, that the ones that you tested locally


00:51:23.980 --> 00:51:26.700
the ones that are going to get ended up being signed.


00:51:26.700 --> 00:51:34.220
Yeah, and so this is something this is like a piece of the whole puzzle that gets mitigated


00:51:34.220 --> 00:51:39.820
by having those builds happen on external services as opposed to on someone's local machine.


00:51:39.820 --> 00:51:46.860
Because at that point, you're just giving this like, set of scripts, like, very, very narrow


00:51:46.860 --> 00:51:52.140
set of input, like, I want this exact git commit, and this version number to get built.


00:51:52.780 --> 00:51:57.740
and then out pops like a tarball that's already been signed and verified and everything. And


00:51:57.740 --> 00:52:04.140
then from there, you just put that on python.org, right? Like that, that is a lot less. There's a


00:52:04.140 --> 00:52:09.260
lot less of that risk where it's just on someone's machine. And how do how does one know that that is


00:52:09.260 --> 00:52:14.940
the exact thing that they built? It's not provable. Yeah.


00:52:14.940 --> 00:52:22.380
What about virtual machines for these gray boxes? I mean, obviously, the Azure one,


00:52:22.380 --> 00:52:23.460
That's its own thing.


00:52:23.460 --> 00:52:29.420
But have you considered a Docker or an official just


00:52:29.420 --> 00:52:35.660
Parallels VM and go like, here, take this, run that,


00:52:35.660 --> 00:52:38.180
you know what I mean?


00:52:38.180 --> 00:52:41.500
To make it a little less dependent on the person whose


00:52:41.500 --> 00:52:42.700
role it is that year.


00:52:42.700 --> 00:52:45.540
It definitely would help with the reproducibility side


00:52:45.540 --> 00:52:48.260
of things, because as we know, Docker is just


00:52:48.260 --> 00:52:51.460
the whole machine shipped in a box, right?


00:52:51.460 --> 00:52:57.220
So yeah, in theory, if you build the same thing again, in that exact same image, you would end up getting a pretty similar result.


00:52:57.220 --> 00:53:00.100
So it helps on that front, which which is good.


00:53:00.100 --> 00:53:05.500
I think the tough thing is, is that you don't, you still don't have control of the inputs.


00:53:05.500 --> 00:53:12.820
And the output, you also still don't have like this, like, it comes out of the Docker container, you get a tarball.


00:53:12.820 --> 00:53:18.540
There's still that time in between when the tarball is out of the container, and when it's actually on python.org,


00:53:18.900 --> 00:53:24.260
where it's on someone's machine that is not in a container.


00:53:24.260 --> 00:53:29.420
And containers also aren't the best in terms of like, you did mention virtual machines


00:53:29.420 --> 00:53:30.420
as well.


00:53:30.420 --> 00:53:38.940
But even that, like on a machine that is a high value target, you know, maybe it's worth


00:53:38.940 --> 00:53:39.940
it.


00:53:39.940 --> 00:53:40.940
Who knows?


00:53:40.940 --> 00:53:41.940
Yeah.


00:53:41.940 --> 00:53:42.940
Yeah.


00:53:42.940 --> 00:53:43.940
Who knows?


00:53:43.940 --> 00:53:44.940
All right.


00:53:44.940 --> 00:53:52.540
It's pretty interesting and it's happening Monday. So very exciting. And I'm looking


00:53:52.540 --> 00:53:57.740
forward to all the new work. I mean, are there new features in 3.12 that are you particularly


00:53:57.740 --> 00:54:02.220
excited about? >> You know, since being in this role,


00:54:02.220 --> 00:54:07.260
I actually haven't been paying attention to Python releases as much, Python features as much. I'm


00:54:07.260 --> 00:54:12.380
mostly excited about it getting faster. I mean, the generic, it's just faster. Like there's no


00:54:12.380 --> 00:54:14.980
no one on the planet that's not happy about that.


00:54:14.980 --> 00:54:18.260
What are the major features this release?


00:54:18.260 --> 00:54:21.780
- Yeah, so there's like some more broad F string things.


00:54:21.780 --> 00:54:24.380
So you used to be able to have a subset


00:54:24.380 --> 00:54:25.540
of the language in the F string,


00:54:25.540 --> 00:54:27.620
and now you can kind of like program in the F string,


00:54:27.620 --> 00:54:28.460
I believe.


00:54:28.460 --> 00:54:32.540
Type statement, better generic types.


00:54:32.540 --> 00:54:36.700
Yeah, there's like a simpler way to express generics


00:54:36.700 --> 00:54:38.180
in the type system.


00:54:38.180 --> 00:54:41.820
And then I'm with you, you know, honestly,


00:54:41.820 --> 00:54:44.220
Like f-strings being nicer, that's awesome.


00:54:44.220 --> 00:54:45.060
Thanks for that.


00:54:45.060 --> 00:54:48.860
But faster, faster, faster is good.


00:54:48.860 --> 00:54:50.720
This per interpreter GIL is kind of part


00:54:50.720 --> 00:54:52.520
of that faster CPython thing, right?


00:54:52.520 --> 00:54:53.620
Like it's hard to leverage,


00:54:53.620 --> 00:54:55.880
but if you could just say in your threads,


00:54:55.880 --> 00:54:58.740
new interpreter for this bit, right?


00:54:58.740 --> 00:55:03.220
All of a sudden you escape the gill


00:55:03.220 --> 00:55:05.880
for computational stuff, that'd be pretty interesting.


00:55:05.880 --> 00:55:09.540
But you know, also this is another interesting thing


00:55:09.540 --> 00:55:10.380
if you pull up this list.


00:55:10.380 --> 00:55:13.100
like the size of the scroll bar.


00:55:13.100 --> 00:55:14.060
I don't know.


00:55:14.060 --> 00:55:16.020
- We were talking about scary scroll bars earlier.


00:55:16.020 --> 00:55:16.860
Like this is--


00:55:16.860 --> 00:55:18.180
- I know.


00:55:18.180 --> 00:55:19.020
Let me see.


00:55:19.020 --> 00:55:20.900
I'll throw this into Omnivore.


00:55:20.900 --> 00:55:22.860
Are you a fan of Omnivore, this app?


00:55:22.860 --> 00:55:24.620
- Omnivore, never heard of it.


00:55:24.620 --> 00:55:25.900
What is it?


00:55:25.900 --> 00:55:27.620
- Omnivore.app.


00:55:27.620 --> 00:55:29.700
It's kind of a Instapaper pocket replacement.


00:55:29.700 --> 00:55:30.660
Oh, I'm already logged into it.


00:55:30.660 --> 00:55:31.780
Look at that.


00:55:31.780 --> 00:55:33.260
Super, super cool.


00:55:33.260 --> 00:55:35.840
So I go here and you say, add a link.


00:55:35.840 --> 00:55:37.940
Actually, I think it just went in there.


00:55:37.940 --> 00:55:38.780
Let's see.


00:55:39.740 --> 00:55:42.620
- 48 minutes just to read that what's new.


00:55:42.620 --> 00:55:43.980
That's what I was trying to pull up.


00:55:43.980 --> 00:55:45.220
(laughing)


00:55:45.220 --> 00:55:47.020
- It just, yeah, it calculates that for you.


00:55:47.020 --> 00:55:49.100
It's like, it's gonna take a while.


00:55:49.100 --> 00:55:53.180
- So just a sense of like, what is new in Python 3.12?


00:55:53.180 --> 00:55:56.020
That's a ton, right?


00:55:56.020 --> 00:55:58.780
- Yeah, a ton of stuff, like tons of fixes.


00:55:58.780 --> 00:56:01.080
Tons of fixes and improvements.


00:56:01.080 --> 00:56:05.420
- Mike, if you're out in the audience says,


00:56:05.420 --> 00:56:08.220
Python-M SQLite 3 is nifty.


00:56:08.220 --> 00:56:10.660
Mike, you're gonna have to tell me more about this.


00:56:10.660 --> 00:56:13.260
- Does that open up a database now?


00:56:13.260 --> 00:56:15.140
That would be lovely.


00:56:15.140 --> 00:56:17.260
- Yeah, that would be cool.


00:56:17.260 --> 00:56:19.340
Kind of like the HTTP server.


00:56:19.340 --> 00:56:20.260
- Yes.


00:56:20.260 --> 00:56:21.100
- Yeah.


00:56:21.100 --> 00:56:21.920
- Or the JSON tool.


00:56:21.920 --> 00:56:24.500
The JSON tool is the one I use the most.


00:56:24.500 --> 00:56:25.980
- What's that one do?


00:56:25.980 --> 00:56:27.580
- So you can like pipe JSON into it


00:56:27.580 --> 00:56:29.340
and it'll just make it pretty.


00:56:29.340 --> 00:56:32.060
It's pretty, it's questionable how useful it is,


00:56:32.060 --> 00:56:33.780
but it sure does make pretty JSON.


00:56:33.780 --> 00:56:37.300
- Yeah, nice. - Which I really appreciate.


00:56:37.300 --> 00:56:41.900
like two space indented JSON, that's perfect.


00:56:41.900 --> 00:56:43.260
- Indeed, all right.


00:56:43.260 --> 00:56:44.860
One more comment from the audience


00:56:44.860 --> 00:56:45.900
and then we'll maybe wrap it up.


00:56:45.900 --> 00:56:49.420
Karen, hey Karen, says, let me,


00:56:49.420 --> 00:56:52.380
she's clarifying above,


00:56:52.380 --> 00:56:58.460
like VM Docker for less changes and better reproducibility.


00:56:58.460 --> 00:57:04.100
VM Docker for less heterogeneity, reproducibility


00:57:04.100 --> 00:57:05.460
than the current situation,


00:57:05.460 --> 00:57:07.860
which is affected by a given user's environment.


00:57:07.860 --> 00:57:12.860
Yeah, like, what web browser did you install today?


00:57:12.860 --> 00:57:15.140
Or something completely unrelated or--


00:57:15.140 --> 00:57:17.420
- Or like you upgrade, if it's your personal machine


00:57:17.420 --> 00:57:20.880
and you're using tools, like if you upgrade those tools,


00:57:20.880 --> 00:57:24.260
it could pull some other system dependency, right?


00:57:24.260 --> 00:57:27.700
That ends up being relevant to the build of CPython.


00:57:27.700 --> 00:57:30.060
And yeah, it's just, there's just so much


00:57:30.060 --> 00:57:33.460
that could be different over the course of even a few days.


00:57:33.460 --> 00:57:34.940
- Yeah, yeah.


00:57:34.940 --> 00:57:38.100
Which is why it's interesting that the Windows one


00:57:38.100 --> 00:57:39.900
goes to Azure Pipelines,


00:57:39.900 --> 00:57:43.020
'cause it kind of puts that to the side, right?


00:57:43.020 --> 00:57:43.860
- Yeah.


00:57:43.860 --> 00:57:45.980
- All right, Seth.


00:57:45.980 --> 00:57:49.100
Well, this has been super, super interesting.


00:57:49.100 --> 00:57:51.940
And thanks for giving us a look into this world.


00:57:51.940 --> 00:57:54.640
So yeah, very excellent.


00:57:54.640 --> 00:57:57.620
And I guess, you know, final two questions.


00:57:57.620 --> 00:57:58.780
You can write some Python code.


00:57:58.780 --> 00:58:00.700
What editor are you using these days?


00:58:00.700 --> 00:58:02.900
- Oh, yeah, I'm using PyCharm.


00:58:02.900 --> 00:58:07.660
I love PyCharm, specifically, you know, the, I have the,


00:58:07.660 --> 00:58:08.540
what is it?


00:58:08.540 --> 00:58:10.980
I had the professional edition for a good long while,


00:58:10.980 --> 00:58:12.980
and then I let that subscription lapse


00:58:12.980 --> 00:58:14.180
and I need to just redo it.


00:58:14.180 --> 00:58:16.180
But, so I'm using the community edition right now,


00:58:16.180 --> 00:58:18.220
but yeah, I love PyCharm so much.


00:58:18.220 --> 00:58:19.940
So, really good editor.


00:58:19.940 --> 00:58:20.780
- Yeah, awesome.


00:58:20.780 --> 00:58:21.660
I'm there with you.


00:58:21.660 --> 00:58:24.140
And then notable PyPI package,


00:58:24.140 --> 00:58:26.780
something that's interesting to you.


00:58:26.780 --> 00:58:28.380
- I already talked about these.


00:58:28.380 --> 00:58:30.300
So pip audit, just use pip audit.


00:58:30.300 --> 00:58:33.400
There's so much work happening in here somewhere on it


00:58:33.400 --> 00:58:37.020
that it just makes sense for you to use it


00:58:37.020 --> 00:58:38.900
because there's just a ton of work happening.


00:58:38.900 --> 00:58:40.420
And if you just add it to your workflow,


00:58:40.420 --> 00:58:42.620
you'll just know that things are vulnerable


00:58:42.620 --> 00:58:43.580
or like what's vulnerable


00:58:43.580 --> 00:58:45.980
and like what versions you should update to.


00:58:45.980 --> 00:58:50.940
- Yeah, I already have some tooling that like some aliases


00:58:50.940 --> 00:58:52.140
that do three or four steps


00:58:52.140 --> 00:58:54.980
to actually update my dependencies and install them.


00:58:54.980 --> 00:58:56.300
Like I might as well just throw this


00:58:56.300 --> 00:58:59.060
as like another and, and pip on it.


00:58:59.060 --> 00:59:00.460
- Yeah, and you can actually,


00:59:00.460 --> 00:59:03.380
I think there's a way that you can tell pip audit


00:59:03.380 --> 00:59:08.380
to install packages, but then it will like say something


00:59:08.380 --> 00:59:10.220
if there is a vulnerability


00:59:10.220 --> 00:59:11.780
in whatever you're installing, right?


00:59:11.780 --> 00:59:13.580
So like you can even replace like pip install.


00:59:13.580 --> 00:59:16.580
- Instead of using PIP, use pip audit.


00:59:16.580 --> 00:59:18.020
- I think that that is a feature.


00:59:18.020 --> 00:59:20.020
- Yeah? - I think so.


00:59:20.020 --> 00:59:21.500
- It has a features thing, let me look at it.


00:59:21.500 --> 00:59:23.220
- Oh, let's see it.


00:59:23.220 --> 00:59:25.620
Oh, it's not gonna work, it's not the read me.


00:59:25.620 --> 00:59:26.500
(laughing)


00:59:26.500 --> 00:59:29.140
It's true, I got to go to the home page.


00:59:29.140 --> 00:59:31.700
>> No, got to go to the source.


00:59:31.700 --> 00:59:36.500
>> No, where's the GitHub? Let me go to the stars.


00:59:36.500 --> 00:59:40.700
All right, you know what? Maybe I don't want to click this thing.


00:59:40.700 --> 00:59:42.580
Features, there we go.


00:59:42.580 --> 00:59:45.180
Multiple emitting.


00:59:45.180 --> 00:59:48.580
We haven't talked about SBOMs,


00:59:48.580 --> 00:59:52.340
but seamlessly reuse your listing.


00:59:52.340 --> 00:59:54.060
Yeah, if it reuses the pip caches,


00:59:54.060 --> 00:59:55.980
Maybe, maybe, maybe.


00:59:55.980 --> 00:59:56.820
All right.


00:59:56.820 --> 01:00:00.140
- What is it?


01:00:00.140 --> 01:00:01.180
- I'll play with it and we'll see.


01:00:01.180 --> 01:00:02.020
People can check it out.


01:00:02.020 --> 01:00:04.780
- Citation needed, citation needed.


01:00:04.780 --> 01:00:07.540
- Exactly, citation needed, that's right.


01:00:07.540 --> 01:00:10.180
All right, well, yeah, people check out pip Audit.


01:00:10.180 --> 01:00:11.220
That looks excellent.


01:00:11.220 --> 01:00:14.380
And yeah, final call to action.


01:00:14.380 --> 01:00:16.020
People are interested in this.


01:00:16.020 --> 01:00:19.340
I mean, give a thought to it on Monday,


01:00:19.340 --> 01:00:20.700
theoretically, at least in the past,


01:00:20.700 --> 01:00:21.980
if you listen too far in the future,


01:00:21.980 --> 01:00:23.660
but you know, the next release.


01:00:23.660 --> 01:00:29.740
Yeah, no, I think the biggest so in terms of like, what can you personally do, because


01:00:29.740 --> 01:00:33.020
like, there's just I just talked about so much stuff that is just kind of happening


01:00:33.020 --> 01:00:34.020
in the background.


01:00:34.020 --> 01:00:37.060
But there's also stuff that like individual people can do.


01:00:37.060 --> 01:00:43.340
And the most impactful URL that you can visit for security, if you're an open source consumer


01:00:43.340 --> 01:00:47.220
or like a maintainer, like it doesn't matter, this is just gonna be impactful if you work


01:00:47.220 --> 01:00:53.220
in software is best.open ssf.org.


01:00:53.220 --> 01:00:58.300
So that is basically just like a web page and it just has a few URLs and you click into


01:00:58.300 --> 01:01:03.140
any of those URLs and it just gives you like a checklist of here's things to think about


01:01:03.140 --> 01:01:06.900
here's and then if you click into those checklist items it gives you it's kind of like this


01:01:06.900 --> 01:01:13.780
recursive nice like guiding force of like here's the things you could be doing right


01:01:13.780 --> 01:01:14.780
and right.


01:01:14.780 --> 01:01:19.620
>>Dylan One is a concise guide for developing more secure software in other words NPM best


01:01:19.620 --> 01:01:23.060
practices and so on. Yeah, excellent.


01:01:23.060 --> 01:01:27.140
Yeah, I'm hoping to put a like Python best practices guide there.


01:01:27.140 --> 01:01:28.580
But yeah, you absolutely should.


01:01:28.580 --> 01:01:32.580
By the end of the year that I'm here. So don't you worry. Look forward to that.


01:01:32.580 --> 01:01:37.860
Excellent. I'll be right there. We'll get it above on the on the list.


01:01:37.860 --> 01:01:42.300
Yeah, it'll it'll somehow not sort alphabetically and it'll be okay.


01:01:42.300 --> 01:01:47.220
Tip the scales a little bit. Exactly.


01:01:48.540 --> 01:01:50.460
Cool. Well, thank you for being here, Seth.


01:01:50.460 --> 01:01:52.540
Thank you. And thank you for all this hard work that you're doing.


01:01:52.540 --> 01:01:55.740
It's good to know that you're out there


01:01:55.740 --> 01:01:57.340
keeping an eye on all these things.


01:01:57.340 --> 01:01:58.900
Thank you so much for having me on the show.


01:01:58.900 --> 01:02:00.460
This has been lovely.


01:02:00.460 --> 01:02:03.060
Yeah, you bet. Catch you next time.


01:02:03.060 --> 01:02:03.340
Bye.


01:02:03.340 --> 01:02:13.340
[BLANK_AUDIO]

