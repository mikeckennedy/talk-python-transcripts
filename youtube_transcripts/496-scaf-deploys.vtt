WEBVTT

00:00:00.001 --> 00:00:03.620
Calvin, welcome to Talk Python to Me.

00:00:03.620 --> 00:00:05.960
It's great to finally have you on the show.

00:00:05.960 --> 00:00:07.420
What have you been doing all this time?

00:00:07.420 --> 00:00:08.480
I don't know.

00:00:08.480 --> 00:00:09.760
Not being on your show, I guess.

00:00:09.760 --> 00:00:13.560
I actually was super excited when you asked if I could be on here,

00:00:13.560 --> 00:00:14.840
because this has been like a life goal,

00:00:14.840 --> 00:00:17.880
at least a goal since Talk Python to Me has ever existed.

00:00:17.880 --> 00:00:19.560
I really appreciate that.

00:00:19.560 --> 00:00:20.160
That's very kind.

00:00:20.160 --> 00:00:22.280
Well, it's great to have you on here.

00:00:22.280 --> 00:00:25.840
And I am all about DevOps and deployment these days.

00:00:25.840 --> 00:00:31.840
I think it's another superpower that I think people can really have.

00:00:31.840 --> 00:00:33.380
You've got an idea.

00:00:33.380 --> 00:00:38.700
You want to deploy the dream as the song that we'll play later, we'll say.

00:00:38.700 --> 00:00:46.220
And if you're not familiar with this stuff, it's a huge roadblock.

00:00:46.220 --> 00:00:48.740
You're like, oh, I built this thing, but how do I get it up there?

00:00:48.740 --> 00:00:50.360
And how could I keep it running?

00:00:50.360 --> 00:00:51.260
Yeah.

00:00:51.260 --> 00:00:54.820
And so what we're going to talk about is a framework you all have created

00:00:54.820 --> 00:01:00.360
to make this much more automated and easy and packaged up, if you will.

00:01:00.360 --> 00:01:02.240
Yeah, I agree.

00:01:02.240 --> 00:01:07.720
Part of the developer experience, not just the deployment story,

00:01:07.720 --> 00:01:11.200
but how do I make a developer be productive from day one?

00:01:11.200 --> 00:01:14.960
I get super obsessed about the experience.

00:01:14.960 --> 00:01:16.140
Is it smooth?

00:01:16.140 --> 00:01:16.800
Is it easy?

00:01:16.800 --> 00:01:20.500
Can developers join your organization and be productive right away?

00:01:20.500 --> 00:01:24.400
That's important to me as an owner of a business who produces software.

00:01:24.800 --> 00:01:25.520
Mm-hmm.

00:01:25.520 --> 00:01:27.180
We'll start there.

00:01:27.180 --> 00:01:29.780
Who are you?

00:01:29.780 --> 00:01:30.480
What is your business?

00:01:30.480 --> 00:01:31.060
What do you do?

00:01:31.060 --> 00:01:32.500
Set the stage for everyone.

00:01:32.500 --> 00:01:33.240
All right.

00:01:33.240 --> 00:01:34.880
So my name is Calvin Hendryx-Parker.

00:01:34.880 --> 00:01:37.240
I am CTO and co-founder of Six Feet Up.

00:01:37.240 --> 00:01:42.940
We are a Python and AI for good software agency based out of the Midwest here in Indiana.

00:01:43.440 --> 00:01:47.040
But we have folks all across the country and a few folks across the globe.

00:01:47.040 --> 00:01:51.280
We help impactful tech leaders level up their game.

00:01:51.280 --> 00:01:57.020
If you've got an idea and you can see the future, part of our goal is to make that happen.

00:01:57.020 --> 00:02:02.520
We love tackling the super hard software problems.

00:02:02.520 --> 00:02:06.080
The harder, the better, and the more unique, and the more impactful, the better.

00:02:06.080 --> 00:02:10.740
Part of our goal has been to do 100 impactful projects by 2033.

00:02:11.140 --> 00:02:14.200
And those impactful projects are things that are making the world a better place.

00:02:14.200 --> 00:02:18.960
So some of our projects do actually impact climate or energy.

00:02:18.960 --> 00:02:23.320
We've done some stuff with NASA on space travel.

00:02:23.320 --> 00:02:28.300
So it's cool stuff like that that the people who work at Six Feet Up get super excited about.

00:02:28.580 --> 00:02:32.980
And part of what drives me to do what we do every day, for sure.

00:02:32.980 --> 00:02:33.740
Yeah.

00:02:33.740 --> 00:02:35.200
And to get to work on space travel.

00:02:35.200 --> 00:02:36.000
Oh, man.

00:02:36.000 --> 00:02:38.840
It's like, I'm getting up early today.

00:02:38.840 --> 00:02:40.220
It's literally rocket science.

00:02:40.220 --> 00:02:41.120
Literally rocket science.

00:02:41.120 --> 00:02:41.860
Yeah.

00:02:41.860 --> 00:02:42.640
How amazing.

00:02:42.640 --> 00:02:44.600
And you've been doing Python for a long time.

00:02:44.600 --> 00:02:47.640
You've been involved since the early days, right?

00:02:47.640 --> 00:02:48.000
Yeah.

00:02:48.000 --> 00:02:52.080
I first adopted or touched Python in literally the year 2000.

00:02:52.080 --> 00:02:53.140
I started working.

00:02:53.140 --> 00:02:53.340
Really?

00:02:53.340 --> 00:02:55.880
I was in a startup in the Bay Area.

00:02:56.680 --> 00:03:02.560
And the guy sitting next to me was like, check out this Python-based application server called Zope.

00:03:02.560 --> 00:03:05.620
And at that point in time in my life, I had just graduated college.

00:03:05.620 --> 00:03:09.860
And I think I understood the three words in between all the other words that he just said.

00:03:09.860 --> 00:03:12.580
And so that was a whole new world that got opened up to me.

00:03:12.580 --> 00:03:19.180
And so I started out my journey in Python really with Zope as kind of the first thing that got me in.

00:03:19.180 --> 00:03:25.800
But back in that day, like Zope and BitTorrent were kind of the killer apps for Python.

00:03:26.160 --> 00:03:28.820
If folks remember, there were like Zope tracks at PyCon.

00:03:28.820 --> 00:03:31.720
And keynotes were like around Zope.

00:03:31.720 --> 00:03:32.780
It was the thing.

00:03:32.780 --> 00:03:39.180
And I still attribute that community to really bringing me into Python and getting me engaged.

00:03:39.180 --> 00:03:45.320
It's some of the smartest people I've ever worked with who are part of that open source community who made that a thing.

00:03:45.320 --> 00:03:46.720
And I'm still friends with those people today.

00:03:46.720 --> 00:03:49.020
You know, people like Paul Everett and Trace Siever.

00:03:49.340 --> 00:03:53.560
Those folks were really part of my upbringing into the Python community.

00:03:53.560 --> 00:03:55.320
And I can't thank them enough.

00:03:55.320 --> 00:03:56.760
That's awesome.

00:03:56.760 --> 00:04:04.780
You know, there's a really interesting fact that was shown at least amongst survey respondents in the PSF JetBrains survey,

00:04:04.780 --> 00:04:16.780
speaking of Paul Everett, that I would say 40% of the people who are doing Python these days are two years or less into it.

00:04:16.780 --> 00:04:17.180
Wow.

00:04:17.180 --> 00:04:19.440
Which is an incredible statistic.

00:04:20.440 --> 00:04:23.400
I think 30% or so is this is their first year.

00:04:23.400 --> 00:04:25.680
And then, you know, the rest of the second year.

00:04:25.680 --> 00:04:29.760
So we're amongst the rare birds.

00:04:29.760 --> 00:04:31.200
But the reason I bring that up is...

00:04:31.200 --> 00:04:32.720
25 years later, we're still here doing it.

00:04:33.020 --> 00:04:33.420
Exactly.

00:04:33.420 --> 00:04:39.940
The reason I bring that up is, you know, I suspect people who have been at this for three or four years maybe don't know what Zope is.

00:04:39.940 --> 00:04:40.960
They probably heard the word.

00:04:40.960 --> 00:04:43.240
But they're like, yeah.

00:04:43.240 --> 00:04:45.540
Is that like a thing that Django does?

00:04:45.540 --> 00:04:48.220
Tell people what Zope is real quick.

00:04:48.220 --> 00:04:55.100
I mean, the application framework space back in the 2000s was not a crowded space.

00:04:55.100 --> 00:04:56.480
There weren't many options.

00:04:56.680 --> 00:05:02.720
And I think the beauty of what that Zope was an application framework, it had some interesting opinions.

00:05:02.720 --> 00:05:13.460
One of them being the ZODB, which I still do love to this day, which is an object graph database that enabled you to build applications quickly.

00:05:13.460 --> 00:05:17.080
And I think initially one of their goals was like through the web, even.

00:05:17.080 --> 00:05:24.900
Like if you remember Z classes, like you could build and rapid prototype through the web, you know, in your browser.

00:05:24.900 --> 00:05:26.400
I mean, this is the year 2000.

00:05:26.900 --> 00:05:30.020
And this is not last year, like where people were like, wow, cool.

00:05:30.020 --> 00:05:30.920
This is low code thing.

00:05:30.920 --> 00:05:33.480
Like this was that 25 years ago.

00:05:33.480 --> 00:05:34.580
This was ahead of its time.

00:05:34.580 --> 00:05:35.800
Way ahead of its time.

00:05:35.800 --> 00:05:38.540
Now, granted, I don't think that that was not the future.

00:05:38.540 --> 00:05:39.500
That shouldn't be the future.

00:05:39.500 --> 00:05:43.660
I'm actually hoping to give some conference talks this year about low code, no code.

00:05:43.660 --> 00:05:49.620
And my opinions on that, especially I should frame it in my context of Zope and Z classes.

00:05:49.620 --> 00:05:52.460
But maybe that's too much of an inside joke.

00:05:52.460 --> 00:05:55.980
I don't know if enough people would even understand what I'm talking about there.

00:05:55.980 --> 00:05:59.980
Because like you said, so many people are new to the community, which I think is awesome.

00:05:59.980 --> 00:06:02.760
I think that shows it's a vibrant, growing community.

00:06:02.760 --> 00:06:09.480
If you're in a community and you're wondering or worrying where the new next generation is going to come from, there's a problem.

00:06:09.480 --> 00:06:11.540
And I don't think that Python has that problem.

00:06:11.540 --> 00:06:15.640
Python has an incredible traction with new people.

00:06:16.340 --> 00:06:18.320
And I've always loved it because of the simplicity.

00:06:18.320 --> 00:06:22.900
I love it because the language is predictable in its patterns.

00:06:22.900 --> 00:06:30.180
It's not a cognitive overhead to remember all the various ways to call things in Python.

00:06:30.180 --> 00:06:31.520
Because typically they're pretty consistent.

00:06:31.520 --> 00:06:32.960
Yeah.

00:06:33.380 --> 00:06:34.420
But Python's slow.

00:06:34.420 --> 00:06:35.300
We can't use it for stuff.

00:06:35.300 --> 00:06:39.320
I do not believe that for a second.

00:06:39.320 --> 00:06:39.700
No.

00:06:39.700 --> 00:06:47.300
I think if you're doing maybe mathematical simulations or certain types of really, really intense low-level things, maybe.

00:06:47.300 --> 00:06:50.460
But as a general application framework, it flies.

00:06:50.460 --> 00:06:50.900
It's fine.

00:06:50.900 --> 00:06:51.420
Yeah.

00:06:51.760 --> 00:07:04.940
And that's the problem, too, is that if you go off right now and you ask your ChatGPT or your Claude about maybe what are some disadvantages of Python, it's going to
mention these kind of broad, old opinions about it.

00:07:04.940 --> 00:07:07.860
Because it only knows the average of all the knowledge has ever been on the Internet.

00:07:07.860 --> 00:07:11.400
And it's learned a bunch of trash talk as well.

00:07:11.400 --> 00:07:11.980
Exactly.

00:07:11.980 --> 00:07:13.860
And which is mostly inaccurate.

00:07:13.860 --> 00:07:19.060
But if you ask it to dig deeper, someday we'll be able to ask it and think a little more critically.

00:07:19.060 --> 00:07:20.920
You'll probably dig in and get the truth.

00:07:21.700 --> 00:07:21.860
Yeah.

00:07:21.860 --> 00:07:24.180
Bit of a side note.

00:07:24.180 --> 00:07:28.280
I recently, for a couple of things I needed, got the ChatGPT Pro.

00:07:28.280 --> 00:07:31.140
Not the paid version, but the Insane Pro version.

00:07:31.140 --> 00:07:31.940
Oh, the $200?

00:07:31.940 --> 00:07:32.860
Yeah.

00:07:32.860 --> 00:07:34.020
Like $200 a month.

00:07:34.020 --> 00:07:34.800
And I laughed at myself.

00:07:34.800 --> 00:07:37.020
Like, this is the stupidest thing I've ever done, but I need it.

00:07:37.020 --> 00:07:38.520
So I'm going to do it for a few days.

00:07:38.520 --> 00:07:39.220
Turn it off.

00:07:39.220 --> 00:07:40.340
It's incredible.

00:07:40.340 --> 00:07:41.100
I'm not turning it off.

00:07:41.100 --> 00:07:45.440
It's like my side buddy.

00:07:45.440 --> 00:07:46.400
I can ask anything.

00:07:46.400 --> 00:07:48.920
And it is so good.

00:07:48.920 --> 00:07:51.300
The future is here.

00:07:51.380 --> 00:07:52.980
It's just not evenly distributed, you know?

00:07:53.780 --> 00:08:02.780
It's not evenly distributed because it's hard for most folks to have the right mindset, I think, to approach to get that level of value out of it.

00:08:02.780 --> 00:08:05.560
I think you have to know how to talk to it.

00:08:05.560 --> 00:08:07.100
And I've said this before.

00:08:07.300 --> 00:08:11.240
It's the same problem with people who aren't good at using Google.

00:08:11.240 --> 00:08:12.600
Just plain old search.

00:08:12.600 --> 00:08:20.340
Like, you know, the people who have to say, let me Google that for you are the ones who understand how to, like, use a search engine, you know, well.

00:08:21.140 --> 00:08:25.700
That can be answered in an exact phrase if you just say the phrase.

00:08:25.700 --> 00:08:27.140
Just say the phrase.

00:08:27.140 --> 00:08:27.720
You know what I mean?

00:08:27.720 --> 00:08:27.900
Yeah.

00:08:27.900 --> 00:08:29.660
And it's also a mindset, right?

00:08:29.660 --> 00:08:38.760
Like, I started thinking, like, instead of this is a cost or something, like, this is, like, another employee that I can just give jobs.

00:08:38.760 --> 00:08:40.080
And five minutes later, I'll come back.

00:08:40.240 --> 00:08:43.060
It's done pretty thorough research.

00:08:43.060 --> 00:08:43.540
You know, it's.

00:08:43.540 --> 00:08:43.940
Yeah.

00:08:43.940 --> 00:08:47.660
Especially with the new scheduling feature where you can actually schedule tasks to happen.

00:08:47.660 --> 00:08:49.660
I'm getting kind of excited about it.

00:08:49.660 --> 00:08:50.700
Everyone's talking about agents.

00:08:50.700 --> 00:08:53.560
And I know this isn't the AI show we're here to talk about.

00:08:53.560 --> 00:08:57.040
But I think agents are interesting, but we're not there yet.

00:08:57.040 --> 00:09:02.480
They're about the level of maybe interns and what you would trust them to do for you.

00:09:02.480 --> 00:09:03.840
Yeah.

00:09:03.840 --> 00:09:04.940
I totally agree.

00:09:04.940 --> 00:09:10.220
I'm a little worried about what all this stuff is going to do to the industry in a broad sense.

00:09:10.440 --> 00:09:16.300
My main concern is I think it'll sort of carve out that gap between early dev and senior dev.

00:09:16.300 --> 00:09:18.920
And it's going to be harder for folks to cross that.

00:09:18.920 --> 00:09:20.020
Yeah.

00:09:20.020 --> 00:09:21.540
But it's also an incredible technology.

00:09:21.540 --> 00:09:25.200
And I think it's also silly to pretend it doesn't exist.

00:09:25.200 --> 00:09:26.880
So anyway, you're right.

00:09:26.880 --> 00:09:27.600
It's not the AI show.

00:09:27.600 --> 00:09:30.640
But, boy, is it on top of mind for a lot of us, right?

00:09:30.640 --> 00:09:31.180
Yeah.

00:09:31.180 --> 00:09:31.880
For sure.

00:09:31.880 --> 00:09:33.420
Yeah.

00:09:33.420 --> 00:09:33.520
Yeah.

00:09:33.520 --> 00:09:34.700
Okay.

00:09:34.700 --> 00:09:40.040
So let's talk Python deployment.

00:09:41.040 --> 00:09:42.180
Let's talk some pitfalls.

00:09:42.180 --> 00:09:43.960
Maybe a little bit of Docker.

00:09:43.960 --> 00:09:45.400
How's this?

00:09:45.400 --> 00:09:47.400
It's interesting.

00:09:47.400 --> 00:09:49.660
Why did you all attack this problem?

00:09:49.660 --> 00:09:56.260
And I guess setting the stages, where does this fit in your consulting story, right?

00:09:56.280 --> 00:10:03.600
You must need to deliver these applications often in a way that people can continue to keep them going on their own without you constantly going back.

00:10:03.600 --> 00:10:03.780
Yeah.

00:10:03.780 --> 00:10:05.100
There's some pip updates.

00:10:05.100 --> 00:10:06.180
So we'll take care of that for you.

00:10:06.180 --> 00:10:10.700
Well, and that definitely reaches into the longer tale of the whole story.

00:10:10.900 --> 00:10:26.760
But I think if you go back to the beginning of the story of deployment, a lot of us started out, or a lot of us older ones, more seasoned veteran developer folks, in a world
where if you wanted to deploy your web application, you threw some PHP into a web route.

00:10:27.140 --> 00:10:30.360
And as long as you had mod PHP installed, the stuff ran.

00:10:30.360 --> 00:10:36.140
Like, you didn't have to think about configuring ingress and egress routes.

00:10:36.140 --> 00:10:39.740
And it was, you know, databases just ran on the same server you were on.

00:10:39.740 --> 00:10:41.080
So you just ran it on localhost.

00:10:41.240 --> 00:10:44.500
Like, it's the world has changed when it comes to the deployment story.

00:10:44.500 --> 00:10:50.320
But it's because things have gotten more complex and sophisticated because they had to.

00:10:50.320 --> 00:10:54.780
Like, we had needs for more sophisticated authentication mechanism.

00:10:54.780 --> 00:10:57.240
We have needs for caching and delivery.

00:10:57.240 --> 00:10:59.400
We have needs for time series data.

00:10:59.400 --> 00:11:07.820
Like, because those opportunities opened up, more sophisticated software gets built, which means it's a little trickier to deploy.

00:11:08.940 --> 00:11:14.880
Well, looking back and, you know, with your perspective of all this experience as well, you know, something I've seen.

00:11:14.880 --> 00:11:20.760
Every time the technology gets easier to work with, you know, like that used to be 100 lines of code.

00:11:20.760 --> 00:11:21.560
Now it's three.

00:11:21.560 --> 00:11:23.340
Well, we're going to be out of job soon.

00:11:23.340 --> 00:11:27.140
A lot of people would say it's like, no, we're just going to solve bigger and more ambitious problems.

00:11:27.140 --> 00:11:30.620
And that's been the case for so long.

00:11:30.620 --> 00:11:34.020
And it's not that, well, things got easier, so we're not going to do it.

00:11:34.020 --> 00:11:38.000
No, every time it got easier, we were able to just think of bigger, more.

00:11:38.680 --> 00:11:40.000
Instead of, we don't need a team.

00:11:40.000 --> 00:11:41.740
One person can solve this amazing problem.

00:11:41.740 --> 00:11:48.300
But that means underneath that, there's this mountain, this iceberg of stuff going on, right?

00:11:48.300 --> 00:11:56.640
Well, and that's what I think that's where deployment has gotten, I think, hard in a lot of people's minds is because there is a mountain of knowledge.

00:11:56.640 --> 00:12:01.600
There's a giant shoulders that you're standing on that makes that happen.

00:12:02.080 --> 00:12:10.880
And my VP of engineering was complaining to me yesterday, like, why can't we just, how can we not easily put websites on the internet anymore?

00:12:10.880 --> 00:12:13.920
And it's not that we can't put websites on the internet anymore.

00:12:13.920 --> 00:12:15.520
They just do so much for us.

00:12:15.520 --> 00:12:21.140
Like, the complexity and the sophistication under the covers is what's causing a lot of this issue.

00:12:21.140 --> 00:12:31.640
And the person who wrote software is not always the person who deploys software because I think they've just got kind of different mindsets or different ways of
thinking about the problems.

00:12:31.640 --> 00:12:39.600
And it's rare you find people who are truly a full stack can do front end to the back end to the database to the network to all the layers that are in between.

00:12:39.600 --> 00:12:47.140
And it's nice that services like, you know, the cloud have come about where it simply greatly simplifies that deployment.

00:12:47.140 --> 00:12:49.720
I mean, that was part of our journey into containers.

00:12:49.720 --> 00:12:58.260
I was resistant to containers probably until 2020 when we did.

00:12:58.260 --> 00:13:01.280
In 2020, there was a change, obviously.

00:13:01.280 --> 00:13:05.500
Some things happened in the world, but we also built more time to be at home and think about stuff.

00:13:05.500 --> 00:13:05.940
Right.

00:13:06.660 --> 00:13:11.620
But we also had time to build some software to help us empower a little conference we were doing.

00:13:11.620 --> 00:13:14.320
We put on the Python web conference during the pandemic.

00:13:14.320 --> 00:13:15.600
We actually started the pre-pandemic.

00:13:15.600 --> 00:13:21.020
But during the pandemic, we took time to write some software to deploy a virtual event platform.

00:13:21.020 --> 00:13:34.240
And I think containers, at that point in time, I adopted containers and container orchestration because it allowed the developers to think more about developing and
less about the deploying part of a sophisticated application,

00:13:34.400 --> 00:13:40.980
like streaming web video, audio mixing, switching live chats and web sockets.

00:13:40.980 --> 00:13:47.560
I mean, there's a whole lot of moving parts in something where you're delivering a live video conference experience.

00:13:47.940 --> 00:14:00.300
And the containers were a nice, like, equalizing layer to allow us to say, I don't care where it goes to, whether it's in Docker Compose or Kubernetes or Docker Swarm.

00:14:00.300 --> 00:14:05.160
Or in our case, we used Amazon's Fargate because I just didn't want to deal with infrastructure.

00:14:05.160 --> 00:14:08.220
I just told Fargate, I got some tasks here, some containers.

00:14:08.220 --> 00:14:10.380
Make them live.

00:14:10.380 --> 00:14:11.500
Like, turn them on.

00:14:11.500 --> 00:14:12.400
Yeah.

00:14:13.600 --> 00:14:16.200
And it sounds like that's for devs as well.

00:14:16.200 --> 00:14:17.120
Yeah.

00:14:17.120 --> 00:14:18.180
And we do containers.

00:14:18.180 --> 00:14:24.140
Not just the infrastructure you're deploying to, but it sounds like you're smoothing the path for the whole team, right?

00:14:24.140 --> 00:14:24.920
Correct.

00:14:24.920 --> 00:14:28.900
That's an opinion I hold that containers are for development as well.

00:14:28.900 --> 00:14:31.020
Like, that developer experience.

00:14:31.020 --> 00:14:38.640
Some organizations I've seen, they may be deploying on the Kubernetes because there were operational opinions about deploying into containers.

00:14:38.960 --> 00:14:49.800
But the developers themselves haven't adopted that fully on their local workstation because it may feel hard until you've got that muscle built up for doing that
level of development.

00:14:49.800 --> 00:14:56.320
And that's originally, that's why SCAF came about, is to make that development experience just a breeze.

00:14:56.320 --> 00:15:04.200
Like, we, you know, we focused on how quickly can a developer be productive locally using containers and still have all your tools.

00:15:04.200 --> 00:15:16.200
Like, it shouldn't feel different than if you were developing with your local Django files on your local file system and you were just running a Postgres instance, you
know, out of Homebrew.

00:15:16.200 --> 00:15:21.340
Except it's better because now the versions will match what's running in production.

00:15:21.340 --> 00:15:40.380
And you can have five different projects running with five different versions of things because you want to make sure they match your expectations when they go to
launch and not be surprised when, you know, the version of Redis doesn't support some new operator because you were one minor version off in your local machine
compared to the sandbox and production machines.

00:15:40.620 --> 00:15:41.180
Yeah.

00:15:41.180 --> 00:15:55.500
I was not against containers, but I was resistant to use them myself because I felt like, well, here's another thing, another thing to understand, another thing
that's a layer between me and my code.

00:15:55.500 --> 00:15:59.300
And it's just, it could go wrong and I don't need it.

00:15:59.300 --> 00:16:00.360
And you know what?

00:16:00.360 --> 00:16:03.160
I'm, I'm a believer.

00:16:03.160 --> 00:16:08.300
It is so nice to be able to just say, here's three commands you can run.

00:16:08.300 --> 00:16:08.880
Exactly.

00:16:08.880 --> 00:16:10.160
It's always going to be exactly.

00:16:10.740 --> 00:16:19.120
And another thing that I've done is on my new, my new Macs and stuff, my dev machines, I don't put databases on there.

00:16:19.120 --> 00:16:19.520
Nope.

00:16:19.520 --> 00:16:20.060
No caching.

00:16:20.060 --> 00:16:28.460
I don't even necessarily install Python directly on, you know, as in go to python.org or Homebrew or something like that.

00:16:28.460 --> 00:16:37.740
It's, if I want a tool and, you know, instead of installing, say, MongoDB, I can just have a Docker command that runs MongoDB.

00:16:37.740 --> 00:16:39.020
That listens on the same port.

00:16:39.020 --> 00:16:39.160
Yep.

00:16:39.160 --> 00:16:39.680
Yep.

00:16:39.680 --> 00:16:41.080
And it's, it's always up to date.

00:16:41.080 --> 00:16:42.380
And if I don't like it, I get rid of it.

00:16:42.380 --> 00:16:46.420
If I want to change the version of it, I just change a flag somewhere in a file.

00:16:46.540 --> 00:16:49.120
It's, it's incredible.

00:16:49.120 --> 00:16:50.320
Well, that and UV.

00:16:50.320 --> 00:16:50.760
Yeah.

00:16:50.760 --> 00:16:59.780
Think back to the old, the old days and the old days for us, but probably the current state for a lot of people in certain organizations is you had a large getting started
document.

00:17:00.260 --> 00:17:02.160
That you would have to follow top to bottom.

00:17:02.160 --> 00:17:04.020
You know, make sure you get this version of that.

00:17:04.020 --> 00:17:05.280
Make sure you get that version of this.

00:17:05.280 --> 00:17:06.740
Make sure you put these files there.

00:17:06.740 --> 00:17:14.540
Make sure your database is running with these, these couple of extra options because we've enabled some, you know, maybe we've enabled GIS or some extension to the
database.

00:17:14.540 --> 00:17:17.680
And if you didn't get all those magic incantations, just right.

00:17:17.680 --> 00:17:23.600
And follow the document to the letter, you were having, you know, a long time to get started.

00:17:23.600 --> 00:17:24.880
Like it was a struggle.

00:17:24.880 --> 00:17:27.720
Whereas you just tell someone get pole.

00:17:28.780 --> 00:17:31.540
And then we'll tilt up in our case for scaf.

00:17:31.540 --> 00:17:34.320
We we've adopted the tilt management tool.

00:17:34.320 --> 00:17:38.860
They're running and they can start making, you know, contributing code within an hour.

00:17:38.860 --> 00:17:39.740
Yeah.

00:17:39.740 --> 00:17:40.260
That's my goal.

00:17:40.260 --> 00:17:46.780
My goal has always been fresh laptop out of the box on my desk and be able to contribute like a full request in an hour would be.

00:17:46.780 --> 00:17:47.440
Yeah.

00:17:47.440 --> 00:17:48.140
That's pretty excellent.

00:17:48.140 --> 00:17:49.240
Yeah.

00:17:49.240 --> 00:17:49.960
That's pretty excellent.

00:17:49.960 --> 00:17:58.740
So do you, when you guys are doing development, do you actually do development in containers or do you just use them?

00:17:58.740 --> 00:18:01.380
To support all of your, your stuff.

00:18:01.380 --> 00:18:02.780
No, everything's in containers.

00:18:02.780 --> 00:18:06.600
Uh, that's, that was like scaf primarily.

00:18:06.600 --> 00:18:08.840
I mean, some people will see scaf as a deployment tool.

00:18:08.840 --> 00:18:12.200
I see scaf as a developer experience tool and a deployment tool.

00:18:12.200 --> 00:18:18.620
I covered both, both ends of that spectrum because everything starts obviously with the developer and an idea and some building some software.

00:18:18.620 --> 00:18:27.600
Well, if they can't build the software easily or they can't collaborate with another contributor on that software, it slows things down.

00:18:27.900 --> 00:18:36.520
So part of what we, you know, that scaf tool is, is a, it's going to be able to give you the scaffolding to build out an initial project.

00:18:36.520 --> 00:18:38.780
Like starting from scratch, you have nothing on the file system.

00:18:38.780 --> 00:18:42.100
Scaf will build out those initial tools, but then scaf is a set of opinions.

00:18:42.660 --> 00:18:45.740
More importantly, because lots of scaffolding tools exist out there.

00:18:45.740 --> 00:18:50.800
I mean, it's current scaf is built on cookie cutter, but we're, you know, going to, we can move that.

00:18:50.800 --> 00:18:55.160
We can move those opinions as we change our opinions about the development world.

00:18:55.280 --> 00:19:04.260
So as we build a new project and, and, you know, let that get started, we now can develop locally on containers.

00:19:04.260 --> 00:19:08.120
Like we use kind for Kubernetes cluster locally, which is nice.

00:19:08.120 --> 00:19:14.380
It, you can, you think running Kubernetes might be overkill for a local development environment.

00:19:14.380 --> 00:19:20.480
But the nice part about that is like now the, the Kubernetes manifests, you know, layer nicely.

00:19:20.480 --> 00:19:23.640
You've got a local base layer, a local instance.

00:19:23.640 --> 00:19:26.720
You've got a sandbox instance or a development instance.

00:19:26.720 --> 00:19:32.980
You may launch into the cloud someplace, or you've got your, your production layers all right in there using customize.

00:19:32.980 --> 00:19:35.100
For example, nice.

00:19:35.100 --> 00:19:35.580
Yeah.

00:19:35.580 --> 00:19:44.340
Nice part about that is if my machine, it doesn't have enough horsepower or memory or disk space to run a specific project that where I need to, you know, jump in and help.

00:19:44.340 --> 00:19:45.920
I can just run that in the cloud.

00:19:45.920 --> 00:19:50.120
I don't, there's nothing saying I have to be running that locally on my own machine.

00:19:50.120 --> 00:19:55.100
All the tooling, all the file synchronization will work just as well.

00:19:55.100 --> 00:20:02.800
If it's running in a sidecar, like if I had a, you know, big white box, you know, Intel machine or, you know, machine sitting in my, under my desk.

00:20:02.800 --> 00:20:07.520
I could run that or I can just launch it into, you know, digital ocean or an AWS cloud.

00:20:07.520 --> 00:20:08.340
Doesn't matter.

00:20:08.340 --> 00:20:11.600
Yeah, absolutely.

00:20:11.600 --> 00:20:12.920
So let's dive in.

00:20:12.920 --> 00:20:14.580
Let's dive into Skaf.

00:20:14.580 --> 00:20:22.000
But before we do, have you seen, I talked about this in the last episode, this, this new AI computer thing that NVIDIA announced?

00:20:22.000 --> 00:20:23.380
I'm pretty excited about that, actually.

00:20:23.380 --> 00:20:24.400
I'm super excited.

00:20:24.400 --> 00:20:27.880
NVIDIA unveils a $3,000 desktop AI computer.

00:20:28.240 --> 00:20:31.460
And I think it's just, you kind of remote in and run containers on it as well.

00:20:31.460 --> 00:20:32.080
I'm pretty sure.

00:20:32.080 --> 00:20:34.100
Yeah.

00:20:34.100 --> 00:20:34.180
Yeah.

00:20:34.180 --> 00:20:40.480
That, that I was, I was excited because I felt like CES, this is obviously launched at CES by NVIDIA on stage.

00:20:40.480 --> 00:20:44.720
And I was excited to see CES have something that was interesting for developers.

00:20:44.720 --> 00:20:50.280
Again, I feel like CES had kind of gotten boring maybe over the last decade.

00:20:50.820 --> 00:20:51.740
And this was exciting.

00:20:51.740 --> 00:20:53.020
I think that.

00:20:53.020 --> 00:20:54.800
It's got to be all doorbells and TVs.

00:20:54.800 --> 00:20:55.140
Yeah.

00:20:55.140 --> 00:20:55.880
Right.

00:20:55.880 --> 00:20:56.580
Exactly.

00:20:56.580 --> 00:20:59.000
And I love home automation.

00:20:59.000 --> 00:20:59.700
Don't get me wrong.

00:20:59.700 --> 00:21:03.020
But there's only so much of that junk I could possibly be interested in.

00:21:03.020 --> 00:21:04.700
And this is something I'm very interested in.

00:21:04.700 --> 00:21:05.780
Exactly.

00:21:05.780 --> 00:21:11.200
Well, Jamie out in the audience says, totally all in on developing with containers.

00:21:11.200 --> 00:21:13.220
Very few tools installed on my own Mac locally.

00:21:13.220 --> 00:21:14.740
We're here with you.

00:21:14.740 --> 00:21:15.120
Awesome.

00:21:15.200 --> 00:21:15.280
Yeah.

00:21:15.280 --> 00:21:16.080
The important tools.

00:21:16.080 --> 00:21:18.000
Like you've got your ID, your VS Code.

00:21:18.000 --> 00:21:21.700
You've got your, you know, you've got your favorite Git visualization tool.

00:21:21.700 --> 00:21:25.880
Like, I mean, those, those are critical to your, your tool chain, your workflow, and they should work everywhere.

00:21:25.880 --> 00:21:29.020
They should work just as work alike on every project you're on.

00:21:29.020 --> 00:21:30.000
Yeah.

00:21:30.000 --> 00:21:32.240
I agree.

00:21:32.240 --> 00:21:39.300
I don't develop containers, but I work with, you know, local virtual environments and then like basically try to replicate exactly the same.

00:21:39.300 --> 00:21:43.920
But all the surrounding stuff, all the daemons and the servers and all that is all like.

00:21:44.480 --> 00:21:50.400
So we're at a slightly different stage of our container journey, I believe, but we're both far down the path, I think.

00:21:50.400 --> 00:21:52.360
Much further than we used to be.

00:21:52.360 --> 00:21:52.960
That's for sure.

00:21:52.960 --> 00:21:53.480
Oh, certainly.

00:21:53.480 --> 00:21:54.940
Much further than I used to be.

00:21:54.940 --> 00:21:56.420
All right.

00:21:56.420 --> 00:21:57.580
Here we are.

00:21:57.580 --> 00:21:59.060
Six feet up slash scaph on GitHub.

00:21:59.060 --> 00:21:59.740
Yep.

00:21:59.740 --> 00:22:07.160
Scaph provides developers and DevOps engineers with a complete blueprint for a new project using Kubernetes.

00:22:07.160 --> 00:22:14.100
We talked a lot about the motivation and so on, but you, let's start with the beginning.

00:22:14.100 --> 00:22:16.080
You said, I have an idea for a project.

00:22:16.080 --> 00:22:17.080
I want it well structured.

00:22:17.080 --> 00:22:25.440
So this is a little cookie cutter-ish in a sense that, but what it makes is more than just a Python project, right?

00:22:25.440 --> 00:22:26.580
Tell us what we got here.

00:22:27.700 --> 00:22:38.360
So this started out, if you've ever followed the cookie cutter project, there was a cookie cutter Django template out there made by PyDanny.

00:22:38.360 --> 00:22:40.320
It kind of kicked that off and started it.

00:22:40.620 --> 00:22:46.160
I liked a lot of his opinions, but I wanted more to it, or I wanted to change some of them.

00:22:46.160 --> 00:22:49.820
So that was the original, like, kind of kernel of where this started.

00:22:50.100 --> 00:22:58.240
And then we grew a lot more around the deployment story and some of the developer tools so that we could be on Kubernetes.

00:22:58.240 --> 00:23:01.360
We could standardize on Kubernetes as a container platform.

00:23:01.360 --> 00:23:08.540
So we could launch into any cloud, whether it's a managed Kubernetes or whether you're bare metal and are running, like, VMs and EC2.

00:23:08.540 --> 00:23:17.720
It doesn't matter because the nice part about Kubernetes is it gives you that agnostic interface to launch new containers.

00:23:17.720 --> 00:23:25.380
I think a lot of people see Kubernetes as complex and used for, like, container orchestration and scaling.

00:23:25.380 --> 00:23:32.540
But I see Kubernetes as a way, it's an interface, it's an API to allow us to deploy easily.

00:23:32.540 --> 00:23:34.840
So we wanted to focus on things like CICD.

00:23:34.840 --> 00:23:36.700
And could you make that simple?

00:23:36.700 --> 00:23:40.760
So SCAF includes opinions around Argo CD, for example.

00:23:40.760 --> 00:23:48.560
So when you deploy into Sandbox, it deploys the Argo CD operator, and then it sits and watches your repository for changes.

00:23:48.560 --> 00:23:53.400
So anytime you merge to the dev branch, for example, it will release to Sandbox.

00:23:53.400 --> 00:23:55.120
And then the QA team can go test.

00:23:55.120 --> 00:23:56.540
And you don't have to think about it.

00:23:56.540 --> 00:23:57.920
Like, you just make a PR.

00:23:57.920 --> 00:24:01.400
If it gets reviewed and accepted and merged, the release happens.

00:24:01.400 --> 00:24:02.880
Like, no one forgets to do the release.

00:24:02.880 --> 00:24:04.920
No one has to do manual steps to do the release.

00:24:05.800 --> 00:24:17.100
Long gone are the days of, you know, shelling into a box and doing a git pull or SVN up in a directory and then forgetting to restart some service to pick up those changes.

00:24:17.100 --> 00:24:19.540
Because humans, we're humans.

00:24:19.540 --> 00:24:25.740
We're terrible about repeatability and maintaining and being able to do maintenance type tasks like that.

00:24:25.740 --> 00:24:27.300
We're just not built for it.

00:24:27.300 --> 00:24:28.820
We're built for creative type thinking.

00:24:28.820 --> 00:24:33.800
So we should let the computers do the bits they're good at, which I feel like that's what some of these opinions are based around.

00:24:33.800 --> 00:24:35.880
And it's, can we automate those pieces away?

00:24:35.880 --> 00:24:36.640
Right.

00:24:36.640 --> 00:24:38.260
It's like a deployment checkbox.

00:24:38.260 --> 00:24:39.260
Oh, yeah.

00:24:39.260 --> 00:24:39.620
Checklist.

00:24:39.620 --> 00:24:40.640
And it's like, check, check, check.

00:24:40.640 --> 00:24:41.360
Have we installed this?

00:24:41.360 --> 00:24:42.900
Do you set this version exactly?

00:24:42.900 --> 00:24:43.380
Yeah.

00:24:43.380 --> 00:24:43.960
Yeah.

00:24:43.960 --> 00:24:44.580
Yeah.

00:24:44.580 --> 00:24:46.460
And some humans are good at checklists.

00:24:46.460 --> 00:24:48.460
Like, there's people who are, that is their thing.

00:24:48.460 --> 00:24:50.540
Like, you know, doctors and surgery.

00:24:50.540 --> 00:24:51.400
Don't take their checks from them.

00:24:51.400 --> 00:24:51.580
Right.

00:24:51.580 --> 00:24:53.180
They love their checklists.

00:24:53.180 --> 00:24:54.300
I'm glad they've got them.

00:24:54.300 --> 00:25:03.240
I feel like people who have gravitated towards software development are craftsmen, kind of artisans about a craft.

00:25:03.240 --> 00:25:07.580
And it's not so much about checking checkboxes as it is how do they creatively solve a problem?

00:25:07.580 --> 00:25:09.820
Because a lot of the problems they're solving haven't existed.

00:25:09.820 --> 00:25:11.940
If they existed already, they would be solved.

00:25:11.940 --> 00:25:13.840
And what would be the point of us writing any software?

00:25:14.600 --> 00:25:14.760
Yeah.

00:25:14.760 --> 00:25:15.760
That's why we have that.

00:25:15.760 --> 00:25:16.580
It works on my machine.

00:25:16.580 --> 00:25:16.760
Yeah.

00:25:16.760 --> 00:25:17.200
Totally.

00:25:17.200 --> 00:25:21.200
Because we don't check the boxes.

00:25:21.200 --> 00:25:25.260
And we're not amazing at making everything work the same.

00:25:25.260 --> 00:25:26.180
But, yeah.

00:25:26.180 --> 00:25:32.720
And this is my goal is getting rid of the works on my machine.

00:25:32.720 --> 00:25:34.740
Like, it should work everywhere exactly the same.

00:25:34.740 --> 00:25:37.820
And you should be able to use your own machine for development.

00:25:37.820 --> 00:25:45.020
Like, I've seen a lot of teams where they have this big central server that's called dev.

00:25:45.020 --> 00:25:48.980
And that's where they all shell into and work simultaneously on a single spot.

00:25:48.980 --> 00:25:54.940
And that just feels fraught with errors and terror to me.

00:25:54.940 --> 00:25:55.240
Yeah.

00:25:55.240 --> 00:25:59.240
You know what it feels like it screams to me is you might end up, it doesn't work on my machine.

00:25:59.240 --> 00:26:00.600
It only works on that machine.

00:26:00.600 --> 00:26:01.300
Exactly.

00:26:01.300 --> 00:26:02.100
Even worse.

00:26:02.100 --> 00:26:03.080
It only works on that machine.

00:26:03.080 --> 00:26:09.280
I once worked on a research project with a pretty big funding organization.

00:26:09.280 --> 00:26:14.020
And there was a bunch of different contractors, one of them out of Seattle.

00:26:14.020 --> 00:26:19.600
And we all had to build some pretty complex software team I was on.

00:26:19.600 --> 00:26:21.540
We built something that kind of coordinated all of them.

00:26:21.540 --> 00:26:22.160
And it was fine.

00:26:22.160 --> 00:26:23.820
It worked great.

00:26:23.820 --> 00:26:24.460
We were all happy.

00:26:24.460 --> 00:26:25.440
The other people all delivered.

00:26:25.440 --> 00:26:31.480
But there was this one team that had built something on a big, big Linux server.

00:26:31.480 --> 00:26:35.020
And a big, fat desktop thing.

00:26:35.020 --> 00:26:36.760
Why do I know the size of it?

00:26:36.760 --> 00:26:40.660
Because they had worked on it for nine months.

00:26:40.660 --> 00:26:43.000
And then they tried to get it to run on another computer.

00:26:43.000 --> 00:26:46.760
They literally could not get it to run on any other computer.

00:26:47.320 --> 00:26:52.620
And so they put it into the most fragile, or most careful shipping container they could.

00:26:52.620 --> 00:26:55.220
And they drove it from Seattle to San Diego.

00:26:55.220 --> 00:27:00.880
And they set it up in the corner because they literally couldn't get the software they wrote to run on any other system.

00:27:00.880 --> 00:27:02.540
Could you imagine?

00:27:02.540 --> 00:27:04.820
Like, what are you going to do in that next time around?

00:27:04.820 --> 00:27:05.660
What if it breaks?

00:27:05.660 --> 00:27:06.600
Right.

00:27:08.020 --> 00:27:08.380
Yeah.

00:27:08.380 --> 00:27:10.580
I'm working on a big central server.

00:27:10.580 --> 00:27:12.520
Maybe there's a way to, like, restore it and stuff.

00:27:12.520 --> 00:27:20.360
But you could craft your software into a corner on that big server where it's like, well, we're going to move to the cloud.

00:27:20.360 --> 00:27:21.880
Like, no, we're going to keep it on that thing.

00:27:21.880 --> 00:27:23.700
And it better just be enough, you know?

00:27:23.700 --> 00:27:24.320
Right.

00:27:24.320 --> 00:27:26.760
And how do you onboard someone new to help you?

00:27:26.760 --> 00:27:29.040
Like, you got to be like, well, be very, very careful.

00:27:29.040 --> 00:27:31.160
There's this only one server where it only runs.

00:27:31.160 --> 00:27:31.960
Oh, my goodness.

00:27:31.960 --> 00:27:35.600
Onboarding is such a challenge there.

00:27:35.600 --> 00:27:36.600
Yeah.

00:27:37.800 --> 00:27:40.720
You want to be on board developers, like, with confidence.

00:27:40.720 --> 00:27:43.940
And they can have the confidence to know that they can make mistakes.

00:27:43.940 --> 00:27:45.900
And they can burn things to the ground.

00:27:45.900 --> 00:27:52.420
And they can try stuff knowing that it's not going to affect, like, the production machine or even the sandbox machine.

00:27:52.420 --> 00:27:56.220
Like, they can experiment with, you know, a little bit of reckless abandon.

00:27:56.220 --> 00:27:56.980
Yeah.

00:27:56.980 --> 00:27:57.720
Because that's how you learn.

00:27:57.720 --> 00:27:58.780
Like, you break things.

00:27:58.780 --> 00:28:00.540
In my mind, you break things to learn.

00:28:00.540 --> 00:28:02.840
Like, there's a lot of learning that happens when you get to break things.

00:28:02.840 --> 00:28:05.940
And if you can break things confidently knowing that no big deal.

00:28:06.120 --> 00:28:10.140
I can just, you know, get pull or, you know, put a branch and delete that branch and start over.

00:28:10.140 --> 00:28:11.280
100%.

00:28:11.280 --> 00:28:16.320
And there's different layers at which people should embrace that to the maximum.

00:28:16.320 --> 00:28:20.920
They should embrace that in refactoring and reorganizing.

00:28:20.920 --> 00:28:21.320
Right?

00:28:21.420 --> 00:28:26.780
So, if I have Git and I have frequent check-ins, I should be able to go crazy.

00:28:26.780 --> 00:28:28.080
You shouldn't be like, oh, don't mess with that.

00:28:28.080 --> 00:28:31.660
You should be able to go crazy on your code and go, oh, my gosh, it's better.

00:28:31.660 --> 00:28:32.840
Or that was a horrible idea.

00:28:32.840 --> 00:28:33.620
Revert.

00:28:33.620 --> 00:28:34.620
Exactly.

00:28:34.620 --> 00:28:35.560
Get rid of that.

00:28:36.640 --> 00:28:38.740
And it should not be terror.

00:28:38.740 --> 00:28:40.640
It should be like, oh, let's give that a try.

00:28:40.640 --> 00:28:41.580
I bet that would be awesome.

00:28:41.580 --> 00:28:42.960
And if it's not, we're going to get out.

00:28:42.960 --> 00:28:49.280
Also, though, on the containers give you that for your infrastructure locally.

00:28:49.280 --> 00:28:49.680
Exactly.

00:28:50.160 --> 00:28:52.680
What if we ran on the newest version of Postgres?

00:28:52.680 --> 00:28:53.080
Yep.

00:28:53.080 --> 00:28:53.620
Let's try it.

00:28:53.620 --> 00:28:55.080
Is that amazing or is it a horrible idea?

00:28:55.080 --> 00:28:55.820
Let's try it.

00:28:55.820 --> 00:28:59.860
If you've got the one server that everyone's using, you're definitely, or even a QA server,

00:28:59.860 --> 00:29:03.420
you're like, we're not going to break everyone because there's 10 people who are going to lose

00:29:03.420 --> 00:29:04.860
their productivity if we screw this up.

00:29:04.860 --> 00:29:08.940
But I can change a number in a Docker file and rebuild and try it.

00:29:08.940 --> 00:29:10.680
And I've seen this in action.

00:29:10.680 --> 00:29:17.940
Like, in production, in action, with our own customer stuff, where a junior admin,

00:29:18.460 --> 00:29:22.580
system admin was doing some standard maintenance activity, you know, maybe they accidentally

00:29:22.580 --> 00:29:23.480
dropped the database.

00:29:23.480 --> 00:29:28.140
But if you have all the things lined up and all the infrastructure, you know, set up in

00:29:28.140 --> 00:29:31.940
this kind of optimal way, it's no big deal.

00:29:31.940 --> 00:29:33.760
It's like, no problem.

00:29:33.760 --> 00:29:36.880
Like, you go push, you go run the command that, like, restores the DB.

00:29:36.880 --> 00:29:40.040
Like, for example, one of our opinions in here is Cloud Native PG.

00:29:40.040 --> 00:29:41.300
So you have options.

00:29:41.300 --> 00:29:43.200
Like, we can use Cloud Native PG in the cluster.

00:29:43.200 --> 00:29:46.760
And that does things like point-in-time restores, recovery.

00:29:47.220 --> 00:29:48.440
You can be using RDS.

00:29:48.440 --> 00:29:51.240
Those opinions can happen afterwards.

00:29:51.240 --> 00:29:55.980
But given that the whole thing can be blown away and redeployed in a moment, in literally

00:29:55.980 --> 00:30:01.160
a moment's notice, gives you a lot of confidence in being able to bring something back from a

00:30:01.160 --> 00:30:01.940
destructive action.

00:30:01.940 --> 00:30:03.180
Yeah, absolutely.

00:30:03.180 --> 00:30:04.980
I think we're both so excited about this.

00:30:04.980 --> 00:30:06.580
We keep getting on tangents.

00:30:06.960 --> 00:30:09.540
I originally wanted to ask you kind of, how do I get started with this?

00:30:09.540 --> 00:30:10.800
Talk us through.

00:30:10.800 --> 00:30:12.100
Talk us through.

00:30:12.100 --> 00:30:14.680
Oh, you'd like to try it?

00:30:14.680 --> 00:30:20.540
Yeah, give people a sense of, like, if they don't, obviously, most people don't have this

00:30:20.540 --> 00:30:20.920
already.

00:30:20.920 --> 00:30:22.880
Like, what do they, they want a new project.

00:30:23.720 --> 00:30:27.220
They wanted to have this more forward-looking.

00:30:27.220 --> 00:30:27.720
Yep.

00:30:27.720 --> 00:30:32.180
So on that GitHub page, there's a one-liner.

00:30:32.180 --> 00:30:34.900
You can just copy-paste into your terminal.

00:30:34.900 --> 00:30:37.020
I think it's toward the, there it is right there.

00:30:37.020 --> 00:30:38.400
Yeah, there's a little girl.

00:30:38.400 --> 00:30:40.760
I applaud you for not having the dollar at the beginning.

00:30:40.760 --> 00:30:41.360
Thank you.

00:30:41.360 --> 00:30:43.920
I'm pragmatic.

00:30:43.920 --> 00:30:45.340
I'm pragmatic about this.

00:30:45.340 --> 00:30:45.520
Yeah.

00:30:45.520 --> 00:30:46.000
Yeah.

00:30:46.000 --> 00:30:50.020
So, and that one-liner will install a lot of the opinions.

00:30:50.020 --> 00:30:58.820
I've mentioned this before to some people that Scaf gives you all those kind of cool opinions,

00:30:58.820 --> 00:31:05.120
cool tools, like neat techniques that as a developer, like it takes like decades to refine

00:31:05.120 --> 00:31:07.500
and hone and kind of gain into your toolbox.

00:31:08.000 --> 00:31:09.960
Daft tries to give those to you like right away.

00:31:09.960 --> 00:31:15.380
Like, so it's, for example, it's going to install kubectl and kind and tilt and a couple other

00:31:15.380 --> 00:31:17.140
tools if they're not found on your system.

00:31:17.140 --> 00:31:22.100
And it'll use, if you've got homebrew installed, it'll just use homebrew out of the box to do

00:31:22.100 --> 00:31:22.340
that.

00:31:22.340 --> 00:31:24.720
And it puts it into your home directory.

00:31:24.720 --> 00:31:29.820
It doesn't, shouldn't require, you know, one of my goals is not to require a pseudo anywhere

00:31:29.820 --> 00:31:35.120
in this process, you know, there's no pseudo needed here for that curl command to run.

00:31:35.760 --> 00:31:42.400
And so it's, it's, it should be less impactful on your system than a lot of other tools, but

00:31:42.400 --> 00:31:44.440
it gives you a lot of power for what you are installing.

00:31:44.440 --> 00:31:45.420
So you run that one-liner.

00:31:45.840 --> 00:31:52.900
It will now give you in like your .local bin directory, a scaf CLI command that you'll

00:31:52.900 --> 00:31:56.720
build a run and you can just run scaf and then the name of the project you want to build.

00:31:56.720 --> 00:31:58.140
And it'll ask you some questions.

00:31:58.140 --> 00:32:01.780
So this is the kind of cookie cutter part at that point is that it's going to ask you,

00:32:01.780 --> 00:32:05.920
Hey, do you want to build a Django app with a Next.js front end?

00:32:06.080 --> 00:32:07.300
And do you want to use century?

00:32:07.300 --> 00:32:08.200
Do you want to have celery?

00:32:08.200 --> 00:32:10.380
You know, just some standard questions.

00:32:10.380 --> 00:32:12.140
You what, what mail provider are you going to use?

00:32:12.140 --> 00:32:17.200
So it gives you a, then on, on your file system, a new, in this case, a Django project.

00:32:17.200 --> 00:32:21.600
I'll talk about some of the future, you know, vision pieces of that, but that's what it gives

00:32:21.600 --> 00:32:22.000
you today.

00:32:22.000 --> 00:32:26.660
It also gives you, in addition to a standard Django project, because you can get a Django

00:32:26.660 --> 00:32:31.160
project just by running the Django start project, you know, a Django admin start project

00:32:31.160 --> 00:32:36.440
command, it would blow out a very simple version of a Django project, but this has more to it.

00:32:36.440 --> 00:32:41.340
There's some opinions about like users and sites and some other things, but not only that,

00:32:41.340 --> 00:32:44.020
there's going to be all the Kubernetes manifests for running locally.

00:32:44.020 --> 00:32:48.440
There's going to be Terraform in there for deploying into a sandbox cloud, like on Amazon,

00:32:48.440 --> 00:32:49.060
for example.

00:32:49.060 --> 00:32:56.260
So if you, if you chose Amazon as your target cloud, there's going to be all these kinds of

00:32:56.260 --> 00:33:00.900
other opinions in here, what database we're using, what, if we're using celery,

00:33:00.900 --> 00:33:02.200
we're going to use Redis.

00:33:02.200 --> 00:33:03.300
Actually, we should change that.

00:33:03.300 --> 00:33:08.120
We're changing from Redis over to Valkey at the moment as well.

00:33:08.120 --> 00:33:09.220
Valkey?

00:33:09.220 --> 00:33:10.280
What is this?

00:33:10.280 --> 00:33:13.600
So Valkey, V-A-L-K-E-Y.

00:33:13.600 --> 00:33:15.300
Close.

00:33:15.300 --> 00:33:18.580
Valkey, which is the Redis.

00:33:18.580 --> 00:33:19.300
Oh, Valkey.

00:33:19.300 --> 00:33:19.740
Okay.

00:33:19.740 --> 00:33:20.240
Okay.

00:33:20.240 --> 00:33:21.420
The Redis replacement.

00:33:21.420 --> 00:33:22.660
Yeah.

00:33:22.660 --> 00:33:23.280
Okay.

00:33:23.280 --> 00:33:24.540
Well, why this?

00:33:24.540 --> 00:33:28.120
Just because of licensing changes on the Redis side of things.

00:33:28.120 --> 00:33:33.500
I think that's another whole, we could do a whole other podcast on just open source licensing

00:33:33.500 --> 00:33:34.920
and interesting history.

00:33:34.920 --> 00:33:37.620
You know, the Elastic folks did this with Elastic Cache.

00:33:37.620 --> 00:33:42.080
I think the Redis folks kind of were following suit, but then you now you see.

00:33:42.080 --> 00:33:43.820
I think Mongo did maybe a little bit as well.

00:33:43.820 --> 00:33:48.320
Well, now you've seen the Elastic folks kind of go back on that, heading back toward the more

00:33:48.320 --> 00:33:50.300
open, open source licensing.

00:33:50.300 --> 00:33:51.720
We'll see.

00:33:51.720 --> 00:33:57.000
I'm sympathetic to, at least some of these, because they built these businesses and then the cloud

00:33:57.000 --> 00:33:58.980
folks are just like, awesome, we'll host that for you.

00:33:58.980 --> 00:33:59.180
Thanks.

00:33:59.180 --> 00:34:00.260
You know, like, wait a minute.

00:34:00.260 --> 00:34:02.140
We were hoping to kind of.

00:34:02.140 --> 00:34:02.420
Yeah.

00:34:02.420 --> 00:34:02.920
Some kind of.

00:34:02.920 --> 00:34:03.580
Be that.

00:34:03.580 --> 00:34:03.840
Yeah.

00:34:03.840 --> 00:34:04.440
Yeah.

00:34:04.440 --> 00:34:04.720
Yeah.

00:34:04.720 --> 00:34:04.960
Yeah.

00:34:04.960 --> 00:34:10.280
I can also totally understand, like, no, we just want this stuff unencumbered.

00:34:10.280 --> 00:34:10.520
Yeah.

00:34:10.520 --> 00:34:12.040
It's not that complicated.

00:34:12.040 --> 00:34:12.480
Probably.

00:34:12.480 --> 00:34:13.660
We could probably make this work.

00:34:13.660 --> 00:34:16.460
And we got together and teamed up and, okay, this is news to me.

00:34:16.460 --> 00:34:16.900
This is awesome.

00:34:16.900 --> 00:34:17.660
Yeah.

00:34:17.660 --> 00:34:23.740
No, it's, again, it's drop-in replacement for the most current version of Redis.

00:34:23.980 --> 00:34:28.000
I was actually just thinking about doing something with Redis, but I think I might just do a little

00:34:28.000 --> 00:34:30.940
Norse legend type of stuff.

00:34:30.940 --> 00:34:32.780
Try that out.

00:34:32.780 --> 00:34:37.400
Russ out there asks, Wagtail?

00:34:37.400 --> 00:34:38.600
Not yet.

00:34:39.100 --> 00:34:43.020
I don't believe we have a Wagtail template, but I'll talk about that in the roadmap.

00:34:43.020 --> 00:34:44.020
Yeah.

00:34:44.020 --> 00:34:45.380
That's coming.

00:34:45.380 --> 00:34:46.760
I guess it's worth.

00:34:46.760 --> 00:34:48.060
Sorry.

00:34:48.060 --> 00:34:52.040
I guess it's worth pointing out to people that this is sort of at its core, a Django.

00:34:52.040 --> 00:34:52.760
Currently.

00:34:52.760 --> 00:34:53.460
Philosophy, right?

00:34:53.460 --> 00:34:53.860
Currently.

00:34:53.860 --> 00:34:54.360
Okay.

00:34:54.360 --> 00:34:54.900
Okay.

00:34:54.900 --> 00:34:55.400
Currently.

00:34:55.400 --> 00:35:00.860
We have some other use cases that we want to be able to satisfy with SCAF as well.

00:35:01.040 --> 00:35:06.940
For example, instead of deploying into a cloud and you've got Argo CD watching for continuous

00:35:06.940 --> 00:35:07.820
deployment type stuff.

00:35:07.820 --> 00:35:12.800
What if you were deploying an appliance into someone's data center and there were different

00:35:12.800 --> 00:35:16.840
concerns around security and updates and adopting updates and how it got updated?

00:35:16.840 --> 00:35:18.900
We want to be able to support that use case.

00:35:18.900 --> 00:35:25.980
I would love to be able to support a fully serverless SCAF lite type environment where

00:35:25.980 --> 00:35:32.600
maybe we're using Lambdas and DynamoDB and API Gateway to deploy the backend in a totally

00:35:32.600 --> 00:35:33.320
serverless manner.

00:35:33.320 --> 00:35:35.180
SCAF should be able to support that too.

00:35:35.180 --> 00:35:36.360
It's not there yet.

00:35:36.360 --> 00:35:38.560
That's definitely, that's the roadmap piece for sure.

00:35:38.560 --> 00:35:39.020
Okay.

00:35:39.020 --> 00:35:43.780
There probably is some, I'm not totally up on it, but there's probably some open source

00:35:43.780 --> 00:35:51.740
Valkey equivalent Docker based Lambda type stuff as well that you might be able to say, we want

00:35:51.740 --> 00:35:54.480
to have a self-contained serverless as part of this.

00:35:54.480 --> 00:35:55.160
Yeah.

00:35:55.160 --> 00:35:59.820
For example, the SCAF challenge.

00:35:59.820 --> 00:36:05.380
So if you went to DjangoCon last year, 6PF ran a SCAF challenge where to see how fast you

00:36:05.380 --> 00:36:10.340
could basically run and get a running Django project on your machine in Kubernetes, running

00:36:10.340 --> 00:36:11.440
locally, ready to develop.

00:36:11.960 --> 00:36:18.860
The winner did it in 26 seconds from running SCAF to Django actually ready to respond to

00:36:18.860 --> 00:36:20.480
HTTP requests.

00:36:20.480 --> 00:36:21.340
Wow.

00:36:21.340 --> 00:36:29.380
That backend that tracked it was all done in Dynamo, Lambda, and API Gateway using the SAM

00:36:29.380 --> 00:36:29.780
framework.

00:36:29.780 --> 00:36:36.440
And so on Amazon, there's the serverless application framework that they've got called SAM, which

00:36:36.440 --> 00:36:37.920
is really nice because you can run it all locally.

00:36:38.100 --> 00:36:45.180
You just do SAM serve or whatever, SAM start, and it spins up containers locally.

00:36:45.180 --> 00:36:47.340
You spin up your Dynamo container locally.

00:36:47.340 --> 00:36:52.020
So I had the whole thing running on my own machine, much in the way that's why I like about SCAF

00:36:52.020 --> 00:36:53.120
is it all runs locally.

00:36:53.120 --> 00:36:56.500
It all is contained and I can play with it.

00:36:56.500 --> 00:36:57.280
I can destroy it.

00:36:57.280 --> 00:36:59.100
I can make mistakes.

00:36:59.380 --> 00:37:00.960
And then when I'm ready, I make a pull request.

00:37:00.960 --> 00:37:01.620
Yeah.

00:37:01.620 --> 00:37:09.340
One of the things that I'm always apprehensive about is building apps that have to have lots

00:37:09.340 --> 00:37:11.260
of cloud services constantly active.

00:37:11.260 --> 00:37:12.000
Right.

00:37:12.220 --> 00:37:18.320
And not just because I want to be able to say work in a coffee shop with poor internet

00:37:18.320 --> 00:37:21.620
connectivity or on an airplane or something like that.

00:37:21.620 --> 00:37:25.060
But also I feel like there's probably some leakage.

00:37:25.060 --> 00:37:29.560
I mean, I just heard an ad on some podcast about it for a company that whose job is to go and

00:37:29.560 --> 00:37:33.860
look at all the AWS or Azure stuff you're doing that you might've left running and it's costing

00:37:33.860 --> 00:37:37.340
you $10,000 a month because people just forgot about, you know, they'd be like, oh, let's try this.

00:37:37.340 --> 00:37:38.300
I think you should say that.

00:37:38.300 --> 00:37:39.380
We've had that.

00:37:39.380 --> 00:37:40.480
Oh, really?

00:37:40.480 --> 00:37:41.580
Tell us a story.

00:37:41.580 --> 00:37:42.140
Yeah.

00:37:42.140 --> 00:37:47.420
I mean, that's another reason, again, for parts we're adding into SCAF around like compliance

00:37:47.420 --> 00:37:48.280
and cost controls.

00:37:48.280 --> 00:37:55.000
I'm a big fan of an open source tool called Cloud Custodian, which is a event driven cloud

00:37:55.000 --> 00:37:56.740
compliance tool.

00:37:56.740 --> 00:38:02.900
So if you haven't checked it out, Cloud Custodian is a really cool, great tool for compliance,

00:38:02.900 --> 00:38:03.900
but also FinOps.

00:38:03.900 --> 00:38:07.960
Like, you know, making sure your dev instances aren't running 24 seven when they really only

00:38:07.960 --> 00:38:09.300
need to run probably eight hours a day.

00:38:09.300 --> 00:38:10.540
They don't need to run on weekends.

00:38:10.540 --> 00:38:12.280
Cloud Custodian can shut those things down.

00:38:12.280 --> 00:38:18.000
So that's something we're adding into SCAF right now is some minimum set of things like

00:38:18.000 --> 00:38:21.620
make sure any cloud resources to get deployed are properly tagged.

00:38:21.620 --> 00:38:24.340
You know, are they tagged with an environment like production or development?

00:38:24.340 --> 00:38:28.900
Are they tagged with a cost center or whatever your policies may be?

00:38:29.160 --> 00:38:34.480
But that will help you avoid those kind of instances where we had, for example, someone spun up a spot

00:38:34.480 --> 00:38:35.020
instance.

00:38:35.020 --> 00:38:40.740
Well, if you're not familiar with Amazon, you can request spot instances, which are kind of excess

00:38:40.740 --> 00:38:43.740
EC2 VMs that are hanging out.

00:38:43.740 --> 00:38:46.220
And if someone releases one, you can pick it up and use it cheaper.

00:38:46.220 --> 00:38:48.740
And they're typically meant to be used temporarily.

00:38:48.740 --> 00:38:51.880
But you request them and they come asynchronously to you.

00:38:51.960 --> 00:38:54.280
So you could go into your console and request one.

00:38:54.280 --> 00:38:56.520
And if it doesn't come right away, you're like, shoot, that didn't work.

00:38:56.520 --> 00:38:58.900
And you could take off, you know, go get a coffee and get lunch.

00:38:58.900 --> 00:39:02.760
And then totally forget you requested the spot instance for a giant GPU, whatever.

00:39:02.760 --> 00:39:03.860
That is ready.

00:39:04.240 --> 00:39:06.360
And then it'll show up later in the day.

00:39:06.360 --> 00:39:11.480
And if you don't go and turn it off, you'll pay for it for the month, which was $10,000

00:39:11.480 --> 00:39:14.040
for one of them once that happened to us.

00:39:14.040 --> 00:39:19.340
So putting in place the fact that if someone did spin up an instance like that, Cloud Custodian

00:39:19.340 --> 00:39:22.900
would be watching for it and would shut it down within a day if it didn't follow, you know,

00:39:22.900 --> 00:39:25.200
whatever your policy is for starting up new kinds of instances.

00:39:25.200 --> 00:39:28.060
That's really cool.

00:39:28.060 --> 00:39:30.700
We're learning about a lot of cool open source tools here.

00:39:30.700 --> 00:39:31.160
This is great.

00:39:31.440 --> 00:39:34.640
And that's why they're all packaged into SCAF because not everyone knows about all these

00:39:34.640 --> 00:39:35.000
things.

00:39:35.000 --> 00:39:40.020
So we're trying to take like our kind of cumulative six feet up journey of 25 years of being on

00:39:40.020 --> 00:39:43.920
the internet and deploying software and developing software and packaging those opinions into

00:39:43.920 --> 00:39:47.680
like one spot where it's kind of like someone took our brains, collective brains, and put

00:39:47.680 --> 00:39:48.680
them into a code repository.

00:39:48.680 --> 00:39:53.060
And now we can deploy and develop like we've been doing it for 25 years.

00:39:53.060 --> 00:39:56.120
Yeah, it's like, well, that was a really sharp edge.

00:39:56.120 --> 00:39:57.000
Let's see if we can.

00:40:00.600 --> 00:40:05.880
Somebody's like, guys, I'm sorry, but there's a big bill.

00:40:05.880 --> 00:40:07.140
There was a big bill.

00:40:07.140 --> 00:40:09.200
I'll give a shout out to Amazon.

00:40:09.200 --> 00:40:14.180
I contacted them and they did refund us for that accidental big bill.

00:40:14.180 --> 00:40:17.160
They're generally pretty good about it if you make that mistake once.

00:40:17.160 --> 00:40:19.040
Now you got to make sure you show them.

00:40:19.040 --> 00:40:22.140
You can demonstrate to them you've put in place things to not have it happen again.

00:40:22.140 --> 00:40:23.220
Okay.

00:40:23.220 --> 00:40:26.320
Because you might pay for it again.

00:40:26.400 --> 00:40:26.460
Yeah.

00:40:26.460 --> 00:40:29.280
I honestly work in the cloud is super scary in that regard.

00:40:29.280 --> 00:40:33.100
You know, when it's overly automated.

00:40:33.500 --> 00:40:41.180
So one of the things, speaking of deployments and all this that I do when I'm working on my Docker stuff is I'll set up a Docker compose file.

00:40:41.180 --> 00:40:42.640
That's kind of my Zen right now.

00:40:42.640 --> 00:40:43.040
Yeah.

00:40:43.360 --> 00:40:46.260
And in there you can set deployment limits.

00:40:46.260 --> 00:40:48.680
Like this container can only use so much CPU.

00:40:48.680 --> 00:40:53.760
More significantly for me usually it's like this container can only use one gig of RAM.

00:40:53.760 --> 00:40:55.100
Even though the server's got 16.

00:40:55.100 --> 00:40:56.880
Tell it it has one.

00:40:56.880 --> 00:41:03.160
And the reason that I think that's super useful is, you know, something goes crazy or starts using too much memory or something like that.

00:41:03.220 --> 00:41:06.960
You can say, oh, there's something going on here without it taking down everything else.

00:41:06.960 --> 00:41:09.520
And there's other things, especially databases.

00:41:09.520 --> 00:41:10.420
Yep.

00:41:10.420 --> 00:41:12.760
They're like, oh, I've got 16 gigs.

00:41:12.760 --> 00:41:16.280
I was just going to load everything into memory because that'll be more efficient.

00:41:16.280 --> 00:41:16.880
Like, no, no, no.

00:41:16.880 --> 00:41:18.480
You're sharing this with everyone.

00:41:18.480 --> 00:41:21.020
Could you just load the indexes into your two gigs?

00:41:21.020 --> 00:41:21.940
It'll be good, right?

00:41:21.940 --> 00:41:23.600
Is there stuff like that here?

00:41:23.600 --> 00:41:24.600
Yeah, exactly.

00:41:24.700 --> 00:41:27.660
And our opinions on that are in the Kubernetes world.

00:41:27.660 --> 00:41:30.460
You can be able to put in resource limits and priorities.

00:41:30.460 --> 00:41:33.040
This actually also literally happened to us.

00:41:33.040 --> 00:41:35.880
Again, all of our experience you get to benefit from.

00:41:35.880 --> 00:41:38.340
If you aren't careful with Kubernetes.

00:41:38.340 --> 00:41:42.520
I think every one of these should have a little, like, a little double dagger thing.

00:41:42.520 --> 00:41:43.100
You click on it.

00:41:43.100 --> 00:41:44.940
Here's the horror story why this is here.

00:41:44.940 --> 00:41:46.020
Here's the story why this is here.

00:41:46.020 --> 00:41:47.140
Here's the story why this is here.

00:41:47.140 --> 00:41:48.600
Because that's the truth.

00:41:48.600 --> 00:41:49.460
Okay.

00:41:49.460 --> 00:41:49.720
Yeah.

00:41:49.720 --> 00:41:54.680
If you don't use resource limits on Kubernetes, they will absolutely stomp on each other.

00:41:55.140 --> 00:41:56.700
Kubernetes is an amazing orchestrator.

00:41:56.700 --> 00:41:58.120
And it will do exactly what it's told.

00:41:58.120 --> 00:42:03.240
And if you've told it that this doesn't have limits, it will give it all the things all the time.

00:42:03.240 --> 00:42:11.120
And you can run into a situation, for example, if you're using Cloud Native PG, your database is in the cluster, which means it's orchestrated by the cluster.

00:42:11.120 --> 00:42:18.680
If you don't give it any limits and you are running multiples and you do a backup, the resources when you do a backup go up.

00:42:18.680 --> 00:42:20.640
Yes, 100%.

00:42:20.640 --> 00:42:20.820
Yeah.

00:42:20.820 --> 00:42:24.620
If you do, it basically, like, scans through all of the data.

00:42:24.620 --> 00:42:24.800
Yeah.

00:42:24.800 --> 00:42:25.580
All the things.

00:42:25.580 --> 00:42:26.880
Why is it using three gigs?

00:42:26.880 --> 00:42:27.900
It was using just one.

00:42:27.900 --> 00:42:29.840
Oh, because I asked for a full backup.

00:42:29.840 --> 00:42:34.660
Well, and I'll tell you what it'll do is it'll consume all the resources on one node.

00:42:34.660 --> 00:42:37.160
And then it'll fail over orchestrated.

00:42:37.160 --> 00:42:40.300
It'll fail over to the second node and then use all the resources on the second node.

00:42:40.300 --> 00:42:42.100
And then it'll corrupt your database and crash the whole thing.

00:42:42.740 --> 00:42:50.580
Now, if you put in the resource limits and the priorities, because what it should do is it should go off and be like, hmm, there's a lot of Django instances running that
probably don't need to be.

00:42:50.580 --> 00:42:51.680
I can kill those first.

00:42:51.680 --> 00:42:53.060
I can save resources.

00:42:53.060 --> 00:42:56.900
I can orchestrate smartly for you only if you smartly configure it.

00:42:56.900 --> 00:42:58.140
Right.

00:42:58.140 --> 00:42:58.540
All right.

00:42:58.540 --> 00:42:59.540
Here's my goal.

00:42:59.540 --> 00:43:00.880
It's not let this get out of control.

00:43:00.880 --> 00:43:02.480
Help me with that.

00:43:02.480 --> 00:43:03.960
Don't just feed it everything.

00:43:03.960 --> 00:43:04.880
Yeah.

00:43:04.960 --> 00:43:05.120
Yeah.

00:43:05.120 --> 00:43:05.700
It's interesting.

00:43:05.700 --> 00:43:08.480
A lot of these servers are like, we could do better if we could just take it.

00:43:08.480 --> 00:43:10.640
We could load up more and pre-cache more.

00:43:10.640 --> 00:43:12.460
But they don't work well together like that.

00:43:12.460 --> 00:43:13.380
Right.

00:43:13.380 --> 00:43:13.880
Yeah.

00:43:13.880 --> 00:43:16.420
I mean, they're greedy.

00:43:16.420 --> 00:43:20.140
They're going to try and take the resources they need to do the job they need to do.

00:43:20.140 --> 00:43:21.740
But they can be told to be less greedy.

00:43:21.740 --> 00:43:24.560
And Kubernetes is how we do that.

00:43:24.560 --> 00:43:25.220
Yeah.

00:43:25.220 --> 00:43:27.080
More importantly, they can be forced to be less greedy.

00:43:27.080 --> 00:43:28.480
You need to stay in line.

00:43:28.480 --> 00:43:30.780
Do what you got.

00:43:30.780 --> 00:43:31.740
You're going to not get any more.

00:43:31.740 --> 00:43:31.960
All right.

00:43:31.960 --> 00:43:33.940
Let's talk through the building blocks here.

00:43:34.020 --> 00:43:35.080
You mentioned a couple of them.

00:43:35.080 --> 00:43:40.960
But there's a big, long list of things that I think is going to be pretty interesting to people.

00:43:40.960 --> 00:43:41.740
Start with Django.

00:43:41.740 --> 00:43:42.340
Yeah.

00:43:42.340 --> 00:43:44.080
And then let's go down the building block.

00:43:44.080 --> 00:43:46.380
When I make an app like this, it has an opinion.

00:43:46.380 --> 00:43:47.840
It looks like as well.

00:43:47.840 --> 00:43:50.160
It's not just a vanilla Django app.

00:43:50.160 --> 00:43:50.820
Correct.

00:43:50.820 --> 00:43:51.400
Yeah.

00:43:51.400 --> 00:43:53.040
You could be doing asynchronous tasks.

00:43:53.040 --> 00:43:55.000
So that's why there's a Celery opinion in there.

00:43:55.000 --> 00:43:58.720
If you've got a project, you know you're going to have jobs in the background.

00:43:58.720 --> 00:43:59.620
Sure.

00:43:59.620 --> 00:44:01.480
Let's get Celery installed.

00:44:01.800 --> 00:44:07.020
If you're doing something with a fancy front end and you like React, our opinion is really to use Next.js.

00:44:07.020 --> 00:44:13.840
And if you install Next.js, you'll get the strawberry GraphQL stuff out of the box, which is kind of nice.

00:44:13.840 --> 00:44:17.300
And Apollo on the front end, if the Next.js is also chosen.

00:44:17.300 --> 00:44:25.520
So some GraphQL opinions have been made and the plumbing laid to make it just work, which is kind of hard sometimes.

00:44:25.520 --> 00:44:34.840
If you're diving into a new technology like React and GraphQL, it's nice to have some opinions and to have them pre-wired up for you.

00:44:34.940 --> 00:44:38.480
So you can just kind of follow the pattern that's already been laid for you.

00:44:38.480 --> 00:44:40.120
Okay.

00:44:40.120 --> 00:44:42.540
I told that Next.js is really, really popular.

00:44:42.540 --> 00:44:43.280
Yeah.

00:44:43.280 --> 00:44:43.920
Tell us about it.

00:44:43.920 --> 00:44:44.780
Tell us about it.

00:44:44.780 --> 00:44:44.820
Tell us about it.

00:44:44.820 --> 00:44:44.840
Tell us about it.

00:44:44.840 --> 00:44:45.440
What is Next.js?

00:44:45.440 --> 00:44:45.820
Yeah.

00:44:45.900 --> 00:44:50.060
I mean, Next.js is a set of opinions around React.

00:44:50.060 --> 00:44:57.760
Much in the way that, for example, like Zope and Plone were opinions around how to do a Python web framework.

00:44:57.760 --> 00:45:06.260
Next.js is kind of a packaging of some opinions about how I would deploy and write React applications and keep them up to date.

00:45:06.500 --> 00:45:13.260
For anyone who's done a React application, you can start with the standard React demo application.

00:45:13.260 --> 00:45:15.300
But from there, you start adding on it.

00:45:15.300 --> 00:45:22.900
Again, I'm definitely not the Node, TypeScript, JavaScript, front-end person.

00:45:22.900 --> 00:45:36.300
But dependency spaghetti mess will happen very quickly in this world or can happen very quickly in this world, which will lead you into a spot where it's really
difficult to upgrade your React application.

00:45:36.300 --> 00:45:38.240
To get all the dependencies upgraded.

00:45:38.240 --> 00:45:41.960
And there are security vulnerabilities and issues you need to be aware of and performance things.

00:45:41.960 --> 00:45:44.760
So you want to make sure you can stay on top of those versions.

00:45:44.760 --> 00:45:51.060
And Next.js is basically a set of guidelines and opinions that should help guide you down a more happy path.

00:45:51.060 --> 00:45:52.820
And that's why we chose it.

00:45:52.820 --> 00:46:02.960
Even the React folks tend to suggest using Next instead of just React on its own because you get those opinions and should have an easier time keeping things up to date.

00:46:02.960 --> 00:46:03.920
Yeah.

00:46:04.680 --> 00:46:07.340
I know the JS stuff feels like it's so complicated.

00:46:07.340 --> 00:46:10.540
But it's, again, because we're asking more and more.

00:46:10.540 --> 00:46:11.480
We're asking a lot.

00:46:11.480 --> 00:46:11.740
We're asking more and more.

00:46:11.740 --> 00:46:16.980
People have high expectations of the web applications that they interact with on a daily basis.

00:46:16.980 --> 00:46:20.060
It's just a fact of life.

00:46:20.060 --> 00:46:24.420
People have expectations about how things are going to behave and the experience they're going to get.

00:46:24.420 --> 00:46:24.880
Yeah.

00:46:24.880 --> 00:46:26.820
They're like, Gmail's cool.

00:46:26.820 --> 00:46:27.960
Google Maps is cool.

00:46:27.960 --> 00:46:28.920
Can ours do that?

00:46:29.320 --> 00:46:30.520
Hold on.

00:46:30.520 --> 00:46:30.540
Hold on.

00:46:30.540 --> 00:46:34.700
You realize this is a static website.

00:46:34.700 --> 00:46:36.560
You have a lot of time behind that.

00:46:36.560 --> 00:46:37.400
Yeah.

00:46:38.340 --> 00:46:42.240
And then if we keep kind of going down this list, I mean, we've standardized on Postgres.

00:46:42.240 --> 00:46:44.920
And that's historic.

00:46:44.920 --> 00:46:49.700
We probably 15 years ago used MySQL.

00:46:49.700 --> 00:46:50.620
Yeah.

00:46:50.620 --> 00:46:51.500
Yeah.

00:46:51.500 --> 00:46:55.940
That was back in the days of MySQL silently dropping data on you.

00:46:56.820 --> 00:46:58.340
But I don't think those...

00:46:58.340 --> 00:46:58.860
You got enough?

00:46:58.860 --> 00:47:00.100
I mean, you got enough of your data cap?

00:47:00.100 --> 00:47:01.040
It's like, there's a lot of it.

00:47:01.040 --> 00:47:02.120
It's exactly what it was.

00:47:02.120 --> 00:47:05.280
So we switched to Postgres and haven't looked back.

00:47:05.280 --> 00:47:08.140
And there's just a lot of exciting things happening there.

00:47:08.140 --> 00:47:10.340
So if you're not on Postgres, I highly recommend it.

00:47:10.340 --> 00:47:12.040
Good bet there.

00:47:12.040 --> 00:47:16.720
Because if you look at the surveys and stuff, like the majority of people are doing that,

00:47:16.720 --> 00:47:18.520
especially if they're doing relational databases.

00:47:18.520 --> 00:47:20.140
Like, it's Postgres.

00:47:20.140 --> 00:47:24.200
And then you better justify why you're not using Postgres, I think, these days.

00:47:24.200 --> 00:47:26.720
And then if you're going to run Postgres and you're going to run in Kubernetes,

00:47:26.720 --> 00:47:29.660
you're going to want to have some kind of an operator to manage it for you.

00:47:29.660 --> 00:47:31.560
Because you want to have high availability.

00:47:31.560 --> 00:47:33.160
You want to have data backups.

00:47:33.160 --> 00:47:35.000
And that's what CloudNativePG gives you.

00:47:35.000 --> 00:47:37.640
You can back up into S3 buckets.

00:47:37.640 --> 00:47:39.880
Or you can back up into, you name it.

00:47:39.880 --> 00:47:41.800
There's multiple kinds of targets that are supported.

00:47:41.800 --> 00:47:44.460
But it manages all that hard complexity for you.

00:47:44.460 --> 00:47:49.240
If you've ever set up Postgres replication and high availability on your own

00:47:49.240 --> 00:47:52.740
and had to deal with all the wall files and moving them around

00:47:52.740 --> 00:47:56.400
and backing them up, it's a sophisticated beast.

00:47:56.400 --> 00:47:58.900
A complicated, sophisticated beast.

00:47:58.900 --> 00:48:00.560
And no one wants to deal with that.

00:48:00.560 --> 00:48:02.080
And that's what CloudNativePG does for you.

00:48:02.080 --> 00:48:04.660
It gives you an UI and a way to configure it.

00:48:04.660 --> 00:48:05.400
And away you go.

00:48:05.400 --> 00:48:07.540
And then after that, we have Valkey.

00:48:07.540 --> 00:48:08.560
Yeah, Valkey.

00:48:08.560 --> 00:48:11.760
Which is our Redis drop-in replacement.

00:48:11.760 --> 00:48:14.460
If you're not using Redis in your Django apps, you should be.

00:48:14.920 --> 00:48:19.160
Even if nothing more than just the Django template cache, I would turn that on.

00:48:19.160 --> 00:48:22.780
We've been using MailHog for our email locally.

00:48:22.780 --> 00:48:24.800
So this is a local developer tool.

00:48:24.800 --> 00:48:29.220
Allows you to simulate email being sent off of your development instance

00:48:29.220 --> 00:48:30.860
without actually sending email anywhere.

00:48:31.380 --> 00:48:33.240
It's a little bit like mocking email.

00:48:33.240 --> 00:48:33.740
Yeah.

00:48:33.740 --> 00:48:34.640
Yeah, it's super nice.

00:48:34.640 --> 00:48:35.800
It runs an SMTP server.

00:48:35.800 --> 00:48:36.780
It gives you a web UI.

00:48:36.780 --> 00:48:40.560
It looks like real email.

00:48:40.560 --> 00:48:41.600
It gives you an inbox.

00:48:41.600 --> 00:48:44.040
So you can basically see what your end users are going to see.

00:48:44.040 --> 00:48:46.620
Argo is the CICD product.

00:48:46.620 --> 00:48:49.120
So that's open source GitOps.

00:48:49.120 --> 00:48:50.920
So it watches your repositories.

00:48:50.920 --> 00:48:52.920
It kind of tracks the status of the deployments.

00:48:54.220 --> 00:48:57.540
So you basically pick a prod branch or something like that

00:48:57.540 --> 00:48:59.920
and you push the prod, then magic happens.

00:48:59.920 --> 00:49:01.960
Yeah, Argo does the magic behind that.

00:49:01.960 --> 00:49:05.180
You can see that it also gives you a bit of insights into your cluster.

00:49:05.180 --> 00:49:08.780
What's running, what's being deployed, what state they're in.

00:49:08.780 --> 00:49:14.220
It handles all the blue-green rollout of new code,

00:49:14.220 --> 00:49:17.780
new pods, and new containers into your clusters.

00:49:17.780 --> 00:49:23.300
You probably can set up a QA cluster as well.

00:49:23.680 --> 00:49:23.860
Yep.

00:49:23.860 --> 00:49:26.160
Right, just pick a different branch and have it watch that, right?

00:49:26.160 --> 00:49:27.280
Well, that's what we do.

00:49:27.280 --> 00:49:33.860
So inside the SCAF-built skeleton you get on your file system,

00:49:33.860 --> 00:49:36.020
you're going to have a Kubernetes manifest directory

00:49:36.020 --> 00:49:38.560
that has a base set of manifests,

00:49:38.560 --> 00:49:42.060
which are this is what's needed to define the deployment

00:49:42.060 --> 00:49:44.420
and the services and all the bits.

00:49:44.420 --> 00:49:46.460
And then each environment, for example,

00:49:46.460 --> 00:49:48.700
like the sandbox environment has an Argo running

00:49:48.700 --> 00:49:50.200
that will be watching for sandbox changes

00:49:50.200 --> 00:49:53.100
and the production environment will be watching for production changes.

00:49:53.140 --> 00:49:56.240
Another thing we standardize on here that's not listed

00:49:56.240 --> 00:49:58.440
is things like sealed secrets.

00:49:58.440 --> 00:50:03.800
So you can check in your secrets to your Git repository for sandbox,

00:50:03.800 --> 00:50:04.400
for example,

00:50:04.400 --> 00:50:07.740
but the only machine on the planet that can decrypt them

00:50:07.740 --> 00:50:08.620
is the sandbox instance,

00:50:08.620 --> 00:50:11.520
because you actually use the sealed secrets operator

00:50:11.520 --> 00:50:12.820
to do the encryption.

00:50:13.200 --> 00:50:17.040
And the only way it can be decrypted is if those things are sitting in that cluster,

00:50:17.040 --> 00:50:19.120
in the sandbox cluster, or in the production cluster.

00:50:19.120 --> 00:50:23.940
So what's nice is the sandbox cluster cannot decrypt the production secrets.

00:50:23.940 --> 00:50:24.580
So you can have,

00:50:24.580 --> 00:50:27.900
obviously you want to have different secrets for production than you do for sandbox.

00:50:27.900 --> 00:50:29.740
So you can have least privilege.

00:50:29.740 --> 00:50:30.880
You know, developers have access,

00:50:30.880 --> 00:50:33.080
maybe more unfettered access to sandbox,

00:50:33.640 --> 00:50:35.940
but they may have more limited access on production.

00:50:35.940 --> 00:50:38.980
And tools like sealed secrets and customize

00:50:38.980 --> 00:50:41.160
and Kubernetes manifests and sealed secrets

00:50:41.160 --> 00:50:42.640
actually make all that work.

00:50:42.640 --> 00:50:44.120
Okay.

00:50:44.120 --> 00:50:45.120
Yeah.

00:50:45.120 --> 00:50:45.800
That's,

00:50:45.800 --> 00:50:47.280
that's news to me as well.

00:50:47.280 --> 00:50:47.740
This one.

00:50:47.740 --> 00:50:48.600
I love it.

00:50:49.740 --> 00:50:51.960
I do something similar with my things as well.

00:50:51.960 --> 00:50:55.080
Like I know a lot of people have huge environment,

00:50:55.080 --> 00:50:56.800
variable definitions of all their,

00:50:56.800 --> 00:50:57.280
I'm like,

00:50:57.280 --> 00:50:57.800
yeah,

00:50:57.800 --> 00:50:58.260
you just,

00:50:58.260 --> 00:51:01.440
you just need one value that unlocks the other,

00:51:01.440 --> 00:51:01.960
you know,

00:51:01.960 --> 00:51:04.240
highly encrypted stuff.

00:51:04.240 --> 00:51:05.520
Now for,

00:51:05.520 --> 00:51:08.260
for someone actually asked a question I'm getting ready to answer,

00:51:08.260 --> 00:51:11.040
which is about external secrets and services for those things,

00:51:11.040 --> 00:51:12.540
local development.

00:51:12.540 --> 00:51:17.820
We've have an opinion around using one password for all of our secrets

00:51:17.820 --> 00:51:18.640
management,

00:51:18.640 --> 00:51:22.260
whether it's like passwords for websites or API keys,

00:51:22.260 --> 00:51:23.500
or in this case,

00:51:23.500 --> 00:51:25.080
development environment,

00:51:25.080 --> 00:51:26.220
database passwords,

00:51:26.220 --> 00:51:27.240
development environment,

00:51:27.240 --> 00:51:28.140
you know,

00:51:28.140 --> 00:51:29.980
secrets like Django has a secret,

00:51:29.980 --> 00:51:31.480
Django secret in there,

00:51:31.480 --> 00:51:32.180
things like that.

00:51:32.180 --> 00:51:34.100
Those are actually in our case,

00:51:34.100 --> 00:51:35.140
environment variables.

00:51:35.140 --> 00:51:40.460
And we use the one password command line tool to only decrypt them ever in

00:51:40.460 --> 00:51:40.740
memory.

00:51:40.740 --> 00:51:45.600
So when you run like the Django start or like the,

00:51:45.600 --> 00:51:48.600
anytime you run the Kubernetes cluster,

00:51:48.600 --> 00:51:49.620
cluster locally in kind,

00:51:49.620 --> 00:51:55.760
it will feed those environment variables via the config map into your cluster

00:51:55.760 --> 00:51:58.680
so that it can access the database in the cluster locally.

00:51:58.680 --> 00:51:59.520
So even locally,

00:51:59.520 --> 00:52:03.300
you have a long random unknown password to you that is,

00:52:03.300 --> 00:52:04.780
but actually stored in one password.

00:52:04.900 --> 00:52:06.160
So if you want to go use your,

00:52:06.160 --> 00:52:06.780
you know,

00:52:06.780 --> 00:52:11.140
I use postico as a GUI for accessing my local Postgres,

00:52:11.140 --> 00:52:12.220
I can use that.

00:52:12.220 --> 00:52:16.960
I can actually feed it the data from one password and actually access my services.

00:52:16.960 --> 00:52:20.500
So locally using one password and environment variables and config maps.

00:52:20.620 --> 00:52:21.860
But when I'm going to sandbox,

00:52:21.860 --> 00:52:27.860
we just use sealed secrets on sandbox and production for mostly cross platform consistency.

00:52:28.200 --> 00:52:29.200
You could be using,

00:52:29.200 --> 00:52:29.200
you know,

00:52:29.200 --> 00:52:29.680
you could be using,

00:52:29.680 --> 00:52:30.280
you know,

00:52:30.280 --> 00:52:34.380
SSM parameter store on Amazon or secrets manager on Amazon,

00:52:34.380 --> 00:52:37.040
but then that won't work on Google or won't work on Azure.

00:52:37.360 --> 00:52:44.980
And so we just standardized around the sealed secrets for ease of deployment to any cluster in any platform anywhere.

00:52:44.980 --> 00:52:47.420
Yeah.

00:52:47.420 --> 00:52:48.260
The one password,

00:52:48.260 --> 00:52:52.760
new CLI stuff and SSH secret provider,

00:52:52.760 --> 00:52:53.740
whatever you call that thing.

00:52:53.740 --> 00:52:54.780
Yeah.

00:52:54.780 --> 00:52:55.880
It is super nice.

00:52:55.880 --> 00:52:56.760
Yeah.

00:52:56.760 --> 00:52:57.420
Yeah.

00:52:57.420 --> 00:53:01.480
If you've not turned on the SSH keys for your one password CLI,

00:53:01.480 --> 00:53:03.280
I have no secret keys,

00:53:03.280 --> 00:53:04.380
no G,

00:53:04.380 --> 00:53:05.520
no SSH keys,

00:53:05.520 --> 00:53:07.000
no API credentials.

00:53:07.000 --> 00:53:09.860
I have no secrets on my file system unencrypted.

00:53:09.860 --> 00:53:14.800
They're living in one password and one password proxies that access when needed.

00:53:14.800 --> 00:53:16.120
Yeah,

00:53:16.120 --> 00:53:16.820
that's pretty neat.

00:53:16.820 --> 00:53:18.860
I feel like I should maybe embrace that more.

00:53:18.860 --> 00:53:20.720
I embrace one password a lot,

00:53:20.720 --> 00:53:21.980
but there's,

00:53:21.980 --> 00:53:22.720
there's more.

00:53:22.720 --> 00:53:23.160
There's no,

00:53:23.160 --> 00:53:23.960
especially when you're working,

00:53:23.960 --> 00:53:27.760
you're working on multiple projects and multiple environments and you want to,

00:53:27.760 --> 00:53:27.900
again,

00:53:27.900 --> 00:53:29.780
have that least privilege access.

00:53:29.780 --> 00:53:32.140
You don't want to have a one key to rule them all.

00:53:32.140 --> 00:53:36.140
You want to have keys to get you access to sandbox keys that can get you access to production.

00:53:36.140 --> 00:53:39.020
And you want to be able to give only certain people access to those production keys.

00:53:39.020 --> 00:53:39.720
Yeah,

00:53:39.720 --> 00:53:40.260
that's really cool.

00:53:40.260 --> 00:53:40.260
Yeah.

00:53:40.260 --> 00:53:43.940
And we actually do that with,

00:53:43.940 --> 00:53:46.740
so we're a Microsoft 365 shop.

00:53:46.740 --> 00:53:48.880
We use Microsoft's Entra,

00:53:48.880 --> 00:53:49.560
like,

00:53:49.560 --> 00:53:50.920
directory service,

00:53:50.920 --> 00:53:53.240
which is their Azure Active Directory product.

00:53:53.240 --> 00:53:54.640
And we use security groups.

00:53:54.960 --> 00:53:57.700
And so based on what security groups or what projects you're working on,

00:53:57.700 --> 00:54:00.380
gives you access to only certain vaults inside of one password,

00:54:00.380 --> 00:54:03.480
gives you access to only certain accounts inside of Amazon.

00:54:03.480 --> 00:54:07.040
And those kinds of things are all wired up to our,

00:54:07.040 --> 00:54:08.660
our single sign on platform.

00:54:08.660 --> 00:54:10.400
Yeah,

00:54:10.400 --> 00:54:10.860
very nice.

00:54:10.860 --> 00:54:12.100
Traffic.

00:54:12.840 --> 00:54:14.780
Traffic is just an ingress controller.

00:54:14.780 --> 00:54:17.180
It's like a load balancer type thing.

00:54:17.180 --> 00:54:17.580
Yeah,

00:54:17.580 --> 00:54:19.240
it's a load balancer kind of cloud.

00:54:19.240 --> 00:54:26.180
If you rethought about a web server and it was cloud native and containers and understood clusters,

00:54:26.180 --> 00:54:27.160
like Kubernetes clusters,

00:54:27.160 --> 00:54:28.600
this is what traffic is.

00:54:29.720 --> 00:54:30.940
I see.

00:54:30.940 --> 00:54:34.440
So maybe a better analogy would be like Nginx or.

00:54:34.440 --> 00:54:34.800
Yeah.

00:54:34.800 --> 00:54:35.860
Yeah.

00:54:35.860 --> 00:54:36.020
I mean,

00:54:36.020 --> 00:54:37.080
I think we all grew up,

00:54:37.080 --> 00:54:41.700
we all grew up on Nginx and made it do all the crazy reverse proxy things.

00:54:41.700 --> 00:54:44.120
Like traffic is the born,

00:54:44.120 --> 00:54:47.240
born in the cloud native world version of that.

00:54:47.240 --> 00:54:52.780
Now Nginx has their own ingress controller as well that they've rewritten to be more cloud native.

00:54:52.780 --> 00:54:55.000
That's just what traffic is for us.

00:54:55.000 --> 00:54:56.580
Cert Manager,

00:54:56.580 --> 00:54:56.880
again,

00:54:56.960 --> 00:55:00.840
handling things like TLS certificates and renewals and you name it.

00:55:00.840 --> 00:55:01.440
Cert Manager,

00:55:01.440 --> 00:55:02.180
make sure that.

00:55:02.180 --> 00:55:06.380
How's that different than Let's Encrypt and CertBot and things like that?

00:55:06.380 --> 00:55:09.100
I mean,

00:55:09.100 --> 00:55:10.640
it's really similar in those cases.

00:55:10.640 --> 00:55:11.700
I think actually Cert Manager,

00:55:11.700 --> 00:55:13.660
I think it's using Let's Encrypt under the covers.

00:55:13.660 --> 00:55:15.720
I could be wrong on that one.

00:55:15.720 --> 00:55:18.640
Maybe more cluster focus because that could be a real challenge.

00:55:18.640 --> 00:55:18.820
Well,

00:55:18.820 --> 00:55:19.540
because a lot of,

00:55:19.540 --> 00:55:20.220
again,

00:55:20.220 --> 00:55:24.560
another beauty of Kubernetes that I don't think a lot of people talk about is the operators.

00:55:24.560 --> 00:55:25.800
These are like,

00:55:25.800 --> 00:55:26.200
you know,

00:55:26.240 --> 00:55:31.060
extensions or plugins to the Kubernetes cluster that give you superpowers to do things like,

00:55:31.060 --> 00:55:32.120
make sure the certs are always,

00:55:32.120 --> 00:55:32.500
you know,

00:55:32.500 --> 00:55:32.960
renewed.

00:55:32.960 --> 00:55:35.120
Make sure the latest code is always deployed.

00:55:35.120 --> 00:55:38.480
Make sure the database is highly available and backed up.

00:55:38.480 --> 00:55:39.000
Make sure,

00:55:39.000 --> 00:55:39.400
you know,

00:55:39.400 --> 00:55:42.380
that's what these operators do in the Kubernetes world.

00:55:42.380 --> 00:55:46.560
Is there like just plugins to your cluster that give you these extended capabilities?

00:55:47.800 --> 00:55:48.200
Okay.

00:55:48.200 --> 00:55:49.200
And that's what Cert Manager is.

00:55:49.200 --> 00:55:49.900
It's another one of those.

00:55:49.900 --> 00:55:51.060
So,

00:55:51.060 --> 00:55:53.080
and that handles the certificates and ingress routes.

00:55:53.080 --> 00:55:54.460
That's all like kind of traffic,

00:55:54.460 --> 00:55:55.660
Cert Manager certificates.

00:55:55.660 --> 00:55:56.220
It's all.

00:55:56.220 --> 00:55:57.100
Yeah,

00:55:57.100 --> 00:55:57.800
it's all together.

00:55:57.800 --> 00:55:58.400
All together.

00:55:58.400 --> 00:56:02.640
Won't give you the certificate unless it can prove that that certificate,

00:56:02.640 --> 00:56:05.260
that domain routes back to that thing.

00:56:05.400 --> 00:56:06.000
And yeah,

00:56:06.000 --> 00:56:06.280
it's,

00:56:06.280 --> 00:56:06.880
it's great,

00:56:06.880 --> 00:56:09.560
but it does get a little complicated in Docker already.

00:56:09.560 --> 00:56:12.760
And then I can imagine auto scaling clusters.

00:56:12.760 --> 00:56:13.360
Right.

00:56:13.360 --> 00:56:14.820
You want it all just to work.

00:56:16.500 --> 00:56:16.860
Yeah.

00:56:16.860 --> 00:56:18.140
You don't want the certificate expired.

00:56:18.140 --> 00:56:18.500
Warning.

00:56:18.500 --> 00:56:18.980
Danger.

00:56:18.980 --> 00:56:20.220
Do not proceed to this website.

00:56:20.220 --> 00:56:20.660
Oh no.

00:56:20.660 --> 00:56:22.560
All right.

00:56:22.560 --> 00:56:24.020
We got Prometheus in the house.

00:56:24.020 --> 00:56:24.620
Well,

00:56:24.620 --> 00:56:27.080
and Prometheus and Grafana are kind of together here.

00:56:27.080 --> 00:56:29.080
It's nice to have a observability,

00:56:29.080 --> 00:56:33.920
be able to see stats and trending data to be able to make decisions on how you're scaling

00:56:33.920 --> 00:56:34.900
or handling,

00:56:34.900 --> 00:56:35.420
you know,

00:56:35.420 --> 00:56:35.760
load.

00:56:35.760 --> 00:56:41.900
It's hard to predict sometimes what a service is going to do when you go deploy it to

00:56:41.900 --> 00:56:42.460
real users.

00:56:42.460 --> 00:56:43.080
Real,

00:56:43.080 --> 00:56:46.480
real users have an uncanny knack of pushing,

00:56:46.480 --> 00:56:47.420
pushing buttons and,

00:56:47.420 --> 00:56:51.280
and making things happen that produce lots of crazy edge cases.

00:56:51.280 --> 00:56:51.840
Right.

00:56:51.840 --> 00:56:52.520
This part was slow.

00:56:52.520 --> 00:56:53.700
So I just kept pushing the button.

00:56:53.700 --> 00:56:53.900
Like,

00:56:53.900 --> 00:56:54.340
right.

00:56:54.340 --> 00:56:54.580
Right.

00:56:54.580 --> 00:56:55.460
More load.

00:56:55.460 --> 00:56:57.420
It was already slow because it could nail it.

00:56:57.420 --> 00:56:57.960
And you,

00:56:57.960 --> 00:57:01.640
you'd prefer that you know about these problems before your develop,

00:57:01.640 --> 00:57:03.400
your users report them to you.

00:57:03.400 --> 00:57:05.260
So tools like Prometheus and,

00:57:05.260 --> 00:57:07.000
and Grafana and Loki.

00:57:07.000 --> 00:57:08.900
So Loki specifically is,

00:57:08.900 --> 00:57:10.840
is log aggregation.

00:57:10.840 --> 00:57:13.020
Prometheus is going to be a lot of metrics.

00:57:13.020 --> 00:57:15.300
And we combine those all into like Grafana dashboards.

00:57:16.220 --> 00:57:17.340
But the trick here is,

00:57:17.340 --> 00:57:17.660
you know,

00:57:17.660 --> 00:57:18.880
you want to be able to get all the data,

00:57:18.880 --> 00:57:21.160
but then you got to make something meaningful of the data.

00:57:21.160 --> 00:57:21.960
And so we try to,

00:57:21.960 --> 00:57:22.080
I,

00:57:22.080 --> 00:57:22.240
I,

00:57:22.240 --> 00:57:23.660
we try to put in some,

00:57:23.660 --> 00:57:24.120
you know,

00:57:24.120 --> 00:57:27.320
default dashboards that give you that.

00:57:27.320 --> 00:57:28.620
If I was stuck on an Island,

00:57:28.620 --> 00:57:30.580
what was the one screen of information?

00:57:30.580 --> 00:57:33.100
I might need to make a business decision about what's happening here.

00:57:33.100 --> 00:57:33.660
Yeah.

00:57:33.660 --> 00:57:34.020
Yeah.

00:57:34.020 --> 00:57:37.420
type view of things and not overload you with too much information,

00:57:37.420 --> 00:57:39.940
but you want to build a dive deeper and see,

00:57:39.940 --> 00:57:40.240
Oh,

00:57:40.240 --> 00:57:40.520
you know,

00:57:40.520 --> 00:57:42.180
when the database backup kicks in,

00:57:42.180 --> 00:57:44.740
the IO all of a sudden goes crazy.

00:57:44.740 --> 00:57:46.680
And that's why we're seeing a dip in here.

00:57:46.680 --> 00:57:47.860
And that's why there was a failover,

00:57:47.860 --> 00:57:51.040
like be able to trace back those things without data is impossible.

00:57:51.040 --> 00:57:52.280
And you only,

00:57:52.280 --> 00:57:52.580
again,

00:57:52.580 --> 00:57:57.120
because we're in a clustered world and there's lots of interdependencies and

00:57:57.120 --> 00:57:58.480
these things can scale out.

00:57:58.480 --> 00:57:59.220
You could have many,

00:57:59.220 --> 00:58:00.320
many nodes running these,

00:58:00.320 --> 00:58:00.920
these,

00:58:00.920 --> 00:58:01.780
these tools.

00:58:02.260 --> 00:58:04.540
you got to have some way of getting us.

00:58:04.540 --> 00:58:05.620
I hate to say it,

00:58:05.620 --> 00:58:06.780
a single pane of glass.

00:58:06.780 --> 00:58:07.580
I'll,

00:58:07.580 --> 00:58:07.800
I'll,

00:58:07.800 --> 00:58:08.520
I'll put that out there.

00:58:08.520 --> 00:58:08.920
I can,

00:58:08.920 --> 00:58:11.900
I can see my entire business in a single pane of glass.

00:58:11.900 --> 00:58:12.360
It is,

00:58:12.360 --> 00:58:13.980
it is humming smoothly.

00:58:13.980 --> 00:58:14.300
Yeah.

00:58:14.300 --> 00:58:15.520
I'm sure all the,

00:58:15.520 --> 00:58:15.820
all the,

00:58:15.820 --> 00:58:17.300
every marketing person is just,

00:58:17.300 --> 00:58:17.720
they'll just,

00:58:17.720 --> 00:58:18.900
they'll just cringe to like,

00:58:18.900 --> 00:58:19.260
Oh my God,

00:58:19.260 --> 00:58:19.780
he just said it.

00:58:19.780 --> 00:58:20.380
He just said it.

00:58:20.380 --> 00:58:21.520
Some people cringe and say,

00:58:21.520 --> 00:58:22.140
yes,

00:58:22.140 --> 00:58:24.960
they're speaking my language out there.

00:58:24.960 --> 00:58:28.900
Michael in the audience says the media cube Prometheus is all of the

00:58:28.900 --> 00:58:31.080
pre-configured dashboards for kids out of the box.

00:58:31.080 --> 00:58:31.840
Awesome stuff.

00:58:31.840 --> 00:58:32.320
Yeah.

00:58:32.320 --> 00:58:32.880
Yeah,

00:58:32.880 --> 00:58:32.960
yeah,

00:58:32.960 --> 00:58:33.160
yeah,

00:58:33.160 --> 00:58:33.420
definitely.

00:58:33.420 --> 00:58:33.600
I mean,

00:58:33.600 --> 00:58:33.780
there's,

00:58:33.780 --> 00:58:38.300
there's so many good example dashboards on your FANA that it is no

00:58:38.300 --> 00:58:40.120
reason not to be using this for observability.

00:58:40.120 --> 00:58:41.480
And this is like the table stakes.

00:58:41.480 --> 00:58:44.740
Like you better start here and you better just do it.

00:58:44.740 --> 00:58:45.020
And,

00:58:45.020 --> 00:58:46.920
but a lot of people deploying app and then they,

00:58:46.920 --> 00:58:47.600
they,

00:58:47.600 --> 00:58:47.820
they,

00:58:47.820 --> 00:58:48.160
I mean,

00:58:48.160 --> 00:58:51.120
how many times have you worked with another developer and you're,

00:58:51.120 --> 00:58:51.580
they were like,

00:58:51.580 --> 00:58:51.720
well,

00:58:51.720 --> 00:58:53.180
if something's wrong and I can't figure out why.

00:58:53.180 --> 00:58:54.340
And the first thing you tell them,

00:58:54.340 --> 00:58:55.020
I guarantee you,

00:58:55.020 --> 00:58:55.180
Michael,

00:58:55.180 --> 00:58:56.120
the first thing you tell them to do is,

00:58:56.120 --> 00:58:57.140
did you look in the logs?

00:58:57.140 --> 00:58:57.840
And they're like,

00:58:57.840 --> 00:58:58.100
no,

00:58:58.100 --> 00:58:59.020
I didn't look in the logs.

00:58:59.080 --> 00:58:59.280
I'm like,

00:58:59.280 --> 00:58:59.400
well,

00:58:59.400 --> 00:59:01.060
that's the first thing you do is go look at the logs.

00:59:01.060 --> 00:59:02.100
No,

00:59:02.100 --> 00:59:02.280
no.

00:59:02.280 --> 00:59:04.900
That's the second thing you tell them.

00:59:04.900 --> 00:59:06.260
What's the first thing is,

00:59:06.260 --> 00:59:07.740
do you have logging?

00:59:07.740 --> 00:59:09.920
True.

00:59:09.920 --> 00:59:10.280
Okay.

00:59:10.280 --> 00:59:10.760
Yes.

00:59:10.760 --> 00:59:12.200
I'm looking at them.

00:59:12.200 --> 00:59:13.060
Fair enough.

00:59:13.060 --> 00:59:14.400
I was about to ask you though,

00:59:14.400 --> 00:59:14.600
like,

00:59:14.600 --> 00:59:15.040
do you have,

00:59:15.040 --> 00:59:18.300
do you have logging set up in this and do you have like log guru or do you

00:59:18.300 --> 00:59:20.920
have log book or do you just do Python logging or what's the story?

00:59:20.920 --> 00:59:21.500
Yeah.

00:59:21.500 --> 00:59:21.840
So I mean,

00:59:21.840 --> 00:59:22.060
we're,

00:59:22.060 --> 00:59:22.980
we're using containers.

00:59:22.980 --> 00:59:24.960
So things should be set up to,

00:59:24.960 --> 00:59:28.380
to log as we would expect them in Kubernetes.

00:59:28.380 --> 00:59:30.020
So kind of like the,

00:59:30.020 --> 00:59:32.700
if you've ever looked at the 12 factor app,

00:59:32.700 --> 00:59:33.540
you know,

00:59:33.540 --> 00:59:36.200
there there's opinions about how logging should happen.

00:59:36.200 --> 00:59:40.160
That's what we adhere to is like the logging should end up in a natural

00:59:40.160 --> 00:59:43.320
spot where it's easy for us to aggregate with tools like Prometheus and

00:59:43.320 --> 00:59:46.080
Grafana and actually then action and do something with them.

00:59:46.760 --> 00:59:50.540
So we typically have another SSH into other machines to see,

00:59:50.540 --> 00:59:50.660
well,

00:59:50.660 --> 00:59:51.480
what's this thing doing?

00:59:51.480 --> 00:59:52.200
What's that doing?

00:59:52.200 --> 00:59:52.420
Yeah.

00:59:52.420 --> 00:59:56.180
And that's one thing I want to have no SSH into these clusters.

00:59:56.180 --> 00:59:57.140
Actually,

00:59:57.140 --> 01:00:01.680
one of our deployment opinions here is using things like Talos Linux for our

01:00:01.680 --> 01:00:03.080
communities deployments.

01:00:03.080 --> 01:00:06.260
Talos does not have a SSH shell enabled.

01:00:06.260 --> 01:00:07.720
Talos Linux has,

01:00:07.720 --> 01:00:08.680
you know,

01:00:08.680 --> 01:00:10.660
the ability to launch Kubernetes clusters.

01:00:10.660 --> 01:00:12.400
So you can use cube CTL to manage your,

01:00:12.400 --> 01:00:13.140
your Kubernetes,

01:00:13.140 --> 01:00:16.760
but then you have a Talos CTL to manage Talos.

01:00:16.760 --> 01:00:18.760
And there's no reason to shell into a box.

01:00:18.760 --> 01:00:23.460
It's just another security surface that you can now get rid of.

01:00:23.460 --> 01:00:24.220
Yeah.

01:00:24.220 --> 01:00:25.720
Very interesting.

01:00:25.720 --> 01:00:30.800
There's a couple of these single purpose Linux distributions out there that are

01:00:30.800 --> 01:00:31.180
really,

01:00:31.180 --> 01:00:31.640
really cool.

01:00:32.020 --> 01:00:33.300
we've evaluated quite a few,

01:00:33.300 --> 01:00:34.540
and this is the one we picked.

01:00:34.540 --> 01:00:35.980
I liked its opinions.

01:00:35.980 --> 01:00:36.900
I liked its approach.

01:00:36.900 --> 01:00:38.560
I liked the community that's behind it.

01:00:38.560 --> 01:00:41.440
One thing when you're picking a lot of these software tools is you need to look

01:00:41.440 --> 01:00:42.000
at the communities.

01:00:42.000 --> 01:00:43.480
You need to see how active they are.

01:00:43.480 --> 01:00:44.620
You need to understand,

01:00:44.620 --> 01:00:46.260
is this going to be a viable project,

01:00:46.260 --> 01:00:46.620
you know,

01:00:46.620 --> 01:00:47.660
five years from now?

01:00:47.660 --> 01:00:51.180
Cause these are opinions you'll pick now and you'll have to live with for

01:00:51.180 --> 01:00:52.060
potentially a long time.

01:00:52.060 --> 01:00:52.900
That's a great,

01:00:52.900 --> 01:00:54.200
great point.

01:00:54.200 --> 01:00:57.620
Is this going to be your hobby project that you're going to keep it running for

01:00:57.620 --> 01:00:58.180
everyone else?

01:00:58.180 --> 01:01:00.020
Or is this thing got a life of its own?

01:01:00.020 --> 01:01:00.240
Cause,

01:01:00.240 --> 01:01:01.940
cause I don't need another hobby.

01:01:02.460 --> 01:01:02.600
Yeah,

01:01:02.600 --> 01:01:02.980
exactly.

01:01:02.980 --> 01:01:04.900
And we want this to be for real.

01:01:04.900 --> 01:01:05.860
Yeah.

01:01:05.860 --> 01:01:09.080
Let's do one more shout out of all the building blocks here.

01:01:09.080 --> 01:01:09.660
Century,

01:01:09.660 --> 01:01:10.400
you know,

01:01:10.400 --> 01:01:12.060
long time sponsor and friend of the show.

01:01:12.060 --> 01:01:12.540
Yeah.

01:01:12.540 --> 01:01:13.840
So the,

01:01:13.840 --> 01:01:14.320
again,

01:01:14.320 --> 01:01:16.860
observability tools like this,

01:01:16.860 --> 01:01:20.680
and especially when it comes to like tools like century or even data dog and

01:01:20.680 --> 01:01:21.120
new relic,

01:01:21.120 --> 01:01:23.940
we just happened to pick century because I like,

01:01:23.940 --> 01:01:24.160
again,

01:01:24.160 --> 01:01:24.840
like the community.

01:01:24.840 --> 01:01:27.520
I like the people who are behind that tool.

01:01:28.140 --> 01:01:32.980
I can't tell you how much time a tool like century has saved us when trying to

01:01:32.980 --> 01:01:34.960
diagnose and debug performance issues.

01:01:34.960 --> 01:01:37.340
I know it has lots and lots of features it can do,

01:01:37.340 --> 01:01:40.040
but when you're looking at a stack and you've got a,

01:01:40.040 --> 01:01:40.300
you know,

01:01:40.300 --> 01:01:41.200
in plus one,

01:01:41.200 --> 01:01:41.600
you know,

01:01:41.600 --> 01:01:45.400
performance issue going on with your database queries and it's integrations with

01:01:45.400 --> 01:01:48.440
Django is integrations with a Redis and the Postgres,

01:01:48.660 --> 01:01:51.880
just make tracking down that kind of stuff so much easier.

01:01:51.880 --> 01:01:52.840
We,

01:01:52.840 --> 01:01:53.440
again,

01:01:53.440 --> 01:01:55.140
I'll go back to that 2020,

01:01:55.140 --> 01:01:59.720
2021 when we launched loud swarm as a virtual event platform space,

01:01:59.720 --> 01:02:06.600
being able to deliver the schedule to a react application quickly as it's

01:02:06.600 --> 01:02:09.680
changing throughout the day was actually a big performance challenge.

01:02:09.680 --> 01:02:12.560
And century highlighted exactly where the problems were.

01:02:12.740 --> 01:02:17.280
And then we just implemented a simple Redis cache that took us from 90 second

01:02:17.280 --> 01:02:19.520
generation of the schedule down to like milliseconds.

01:02:19.520 --> 01:02:22.800
And that was because we were able to pinpoint the issue really,

01:02:22.800 --> 01:02:24.040
really carefully and really,

01:02:24.040 --> 01:02:24.880
really close to a century.

01:02:24.880 --> 01:02:25.760
It just,

01:02:25.760 --> 01:02:29.620
it bubbles up your problems and now you just go pick off the low hanging fruit.

01:02:29.620 --> 01:02:30.400
Yeah,

01:02:30.400 --> 01:02:30.860
that's awesome.

01:02:30.860 --> 01:02:35.560
I've also used it for air monitoring stuff and it's,

01:02:35.560 --> 01:02:36.160
I'm more than one.

01:02:36.160 --> 01:02:37.580
I know I say this on the show for some of the ads,

01:02:37.580 --> 01:02:38.580
but more than once,

01:02:38.580 --> 01:02:39.300
and this is not an ad,

01:02:39.300 --> 01:02:43.920
but I've certainly gotten an error and it's got all the variables,

01:02:43.920 --> 01:02:45.280
not just the stack trace,

01:02:45.280 --> 01:02:48.500
but actually the variables of what user ran in the problems and all sorts of

01:02:48.500 --> 01:02:48.720
stuff.

01:02:48.720 --> 01:02:50.520
And I reached out to multiple people said,

01:02:50.520 --> 01:02:51.620
I see you ran this problem.

01:02:51.620 --> 01:02:52.260
I'm really sorry.

01:02:52.260 --> 01:02:53.440
I fixed it.

01:02:53.440 --> 01:02:54.540
Give it another try.

01:02:54.540 --> 01:02:57.580
And I'm sure that's a creepy experience in the one way,

01:02:57.580 --> 01:02:59.160
but also geez,

01:02:59.160 --> 01:03:01.400
that doesn't happen very often,

01:03:01.400 --> 01:03:01.900
but you know,

01:03:01.900 --> 01:03:02.080
like,

01:03:02.080 --> 01:03:02.260
well,

01:03:02.260 --> 01:03:03.380
I fixed it and I know who it is.

01:03:03.380 --> 01:03:04.440
I might as well tell them like,

01:03:04.440 --> 01:03:04.580
Hey,

01:03:04.580 --> 01:03:04.860
sorry,

01:03:04.860 --> 01:03:05.380
you hit this.

01:03:05.380 --> 01:03:05.620
Yeah.

01:03:05.620 --> 01:03:09.120
One tool we've not mentioned here that is not in this list.

01:03:09.240 --> 01:03:11.940
I think is super important to our scap stack is tilt.

01:03:11.940 --> 01:03:17.920
That is the local Kubernetes management tool of choice that we have picked.

01:03:17.920 --> 01:03:21.080
And if you've not played with tilt,

01:03:21.080 --> 01:03:24.240
we've gone through different tools along the way.

01:03:24.240 --> 01:03:27.440
There was one called a scaffold and a camera.

01:03:27.440 --> 01:03:28.540
The other ones we try,

01:03:28.540 --> 01:03:32.920
there's numerous ones out there who basically sit in this space and try and solve

01:03:32.920 --> 01:03:33.440
this problem.

01:03:33.440 --> 01:03:34.460
But the,

01:03:34.460 --> 01:03:34.560
the,

01:03:34.560 --> 01:03:39.460
the feet killer feature for tilt was two way sync between your cluster and your

01:03:39.460 --> 01:03:40.060
local machine.

01:03:40.060 --> 01:03:40.620
So again,

01:03:40.620 --> 01:03:42.480
if you're running locally and using kind,

01:03:42.480 --> 01:03:46.080
you probably don't notice anything because tilt is watching your file system,

01:03:46.080 --> 01:03:49.000
synchronizing your files into the Kubernetes cluster for you to work.

01:03:49.100 --> 01:03:51.220
but it also does the reverse.

01:03:51.220 --> 01:03:57.520
One of the key bits I wanted was when you do a compilation of your requirements for,

01:03:57.520 --> 01:03:58.280
you know,

01:03:58.280 --> 01:03:58.840
your project,

01:03:58.840 --> 01:04:01.060
you're running Django and you've got a whole set of requirements.

01:04:01.620 --> 01:04:05.700
If you get in some trickier things like around the data science world,

01:04:05.700 --> 01:04:10.080
there may be things that compile differently on macOS than on Linux than on Windows,

01:04:10.080 --> 01:04:14.240
because they use some slightly different dependencies that can be tricky when you're

01:04:14.240 --> 01:04:15.820
working in a container world.

01:04:15.820 --> 01:04:18.560
So you want to make sure you're doing your pip-tools compile.

01:04:18.560 --> 01:04:19.740
Well,

01:04:19.740 --> 01:04:20.260
via UV,

01:04:20.260 --> 01:04:22.820
but your pip-tools compile in the container,

01:04:22.820 --> 01:04:25.960
in the target environment of where this is going to be deployed and built,

01:04:25.960 --> 01:04:27.460
because you'll get different results.

01:04:27.460 --> 01:04:29.840
if you ran that pip-tools compile on your Mac,

01:04:29.840 --> 01:04:32.560
as opposed into the Linux VM or Linux container.

01:04:32.560 --> 01:04:33.100
that's true.

01:04:33.100 --> 01:04:35.700
So platform specific wheels.

01:04:35.700 --> 01:04:35.920
Yeah.

01:04:35.920 --> 01:04:36.480
Yeah.

01:04:36.480 --> 01:04:41.440
So that tools like tilt makes sure that I can run my thing in the container and the result

01:04:41.440 --> 01:04:43.480
of it synchronizes back to my file system.

01:04:43.480 --> 01:04:44.920
And then I checked that into the repository.

01:04:44.920 --> 01:04:45.820
That was,

01:04:45.820 --> 01:04:46.860
that was a key bit there.

01:04:46.860 --> 01:04:47.380
And it's,

01:04:47.380 --> 01:04:47.700
and again,

01:04:47.700 --> 01:04:49.020
it has a lot of other cool things.

01:04:49.020 --> 01:04:49.980
Nice UI.

01:04:49.980 --> 01:04:50.660
Like when you,

01:04:50.660 --> 01:04:53.580
if you fire up scaf at the very end of it,

01:04:53.580 --> 01:04:54.340
it'll tell you,

01:04:54.340 --> 01:04:54.920
congratulations,

01:04:54.920 --> 01:04:57.240
you've got a new project on your file system.

01:04:57.780 --> 01:04:59.640
a CD into your project and just type tilt up.

01:04:59.640 --> 01:05:02.060
You type tilt up and you hit space bar.

01:05:02.060 --> 01:05:02.660
I think it is.

01:05:02.660 --> 01:05:07.380
And it launches a web browser with all the status of all the containers that are running locally.

01:05:07.380 --> 01:05:08.940
You can see all the logging.

01:05:08.940 --> 01:05:14.000
You can tilt watches for changes to your local file system for the code.

01:05:14.000 --> 01:05:16.060
Tilt watches for changes to the Docker files.

01:05:16.060 --> 01:05:19.100
If you change the Docker file out from underneath tilt,

01:05:19.100 --> 01:05:20.020
like while you're developing,

01:05:20.020 --> 01:05:24.840
say you're adding a new layer or a new dependency or something that's needed in Docker and not in your Python,

01:05:24.840 --> 01:05:26.920
tilt will rebuild the container.

01:05:26.920 --> 01:05:28.140
immediately for you.

01:05:28.140 --> 01:05:29.300
Like without you having to do anything,

01:05:29.300 --> 01:05:29.740
like you just,

01:05:29.740 --> 01:05:30.520
you just kind of,

01:05:30.520 --> 01:05:32.880
you just code along and tilt keeps up.

01:05:32.880 --> 01:05:33.820
Wow.

01:05:33.820 --> 01:05:34.660
That's awesome.

01:05:34.660 --> 01:05:36.380
Yeah.

01:05:36.380 --> 01:05:39.340
It's a little bit like setting your unit test to run on every save.

01:05:39.340 --> 01:05:39.860
Exactly.

01:05:39.860 --> 01:05:40.740
It is.

01:05:40.740 --> 01:05:41.980
And it's fast.

01:05:41.980 --> 01:05:43.740
Sometimes you can barely even notice.

01:05:43.740 --> 01:05:44.540
Like if you're,

01:05:44.540 --> 01:05:47.400
if you're working in a very late layer in the build,

01:05:47.400 --> 01:05:49.180
those builds can happen really,

01:05:49.180 --> 01:05:50.740
really quickly because most of the stuff's cached.

01:05:50.740 --> 01:05:52.560
There's no other set of opinions.

01:05:53.460 --> 01:06:00.280
We've really tried to finally tune all the caching in the Docker files and all the layers so that these images build fast.

01:06:00.280 --> 01:06:01.180
They build slim.

01:06:01.180 --> 01:06:02.520
They use caches.

01:06:03.060 --> 01:06:03.880
So if you've got,

01:06:03.880 --> 01:06:05.440
if you're running locally,

01:06:05.440 --> 01:06:07.400
it's going to cache things locally in your file system.

01:06:07.400 --> 01:06:09.180
If you blow things away and start over again,

01:06:09.180 --> 01:06:11.200
it doesn't take forever to download all the stuff.

01:06:11.200 --> 01:06:12.760
It should be pulling from your local cache.

01:06:12.760 --> 01:06:13.900
Yeah.

01:06:14.580 --> 01:06:18.540
That's a big shift when you're doing container type stuff.

01:06:18.540 --> 01:06:18.740
Oh,

01:06:18.740 --> 01:06:18.980
man.

01:06:18.980 --> 01:06:19.640
Cause you,

01:06:19.640 --> 01:06:20.980
some folks may have a,

01:06:20.980 --> 01:06:21.320
a,

01:06:21.320 --> 01:06:25.120
a not great experience with containers because of the size of some of these things.

01:06:25.120 --> 01:06:27.020
And because they're not effectively using caching,

01:06:27.020 --> 01:06:28.440
this is a game changer.

01:06:28.440 --> 01:06:28.820
Right.

01:06:28.820 --> 01:06:29.940
A hundred percent.

01:06:29.940 --> 01:06:34.400
And just maybe potentially just reordering or splitting up commands can make.

01:06:34.400 --> 01:06:35.100
Oh yeah.

01:06:35.100 --> 01:06:35.800
10,

01:06:35.800 --> 01:06:37.080
10 X difference in speed.

01:06:37.080 --> 01:06:38.400
Well,

01:06:38.400 --> 01:06:41.500
and you were the one who convinced me to switch over to UV,

01:06:41.500 --> 01:06:42.360
uh,

01:06:42.360 --> 01:06:44.200
inside their container bills as well.

01:06:44.200 --> 01:06:46.220
And that absolutely sped things up.

01:06:46.220 --> 01:06:47.080
Speed is a feature.

01:06:47.080 --> 01:06:48.020
I know you had that,

01:06:48.020 --> 01:06:48.380
uh,

01:06:48.380 --> 01:06:51.020
interview with Charlie and that was one of the things that came out of that,

01:06:51.020 --> 01:06:51.280
uh,

01:06:51.280 --> 01:06:52.980
stuck in my head is speed is a feature.

01:06:52.980 --> 01:06:55.060
And I take that everywhere with me.

01:06:55.060 --> 01:06:55.760
Yeah,

01:06:55.760 --> 01:06:56.140
that's awesome.

01:06:56.140 --> 01:06:56.340
It,

01:06:56.340 --> 01:06:57.900
it's,

01:06:57.900 --> 01:06:58.440
it's a cheap,

01:06:58.440 --> 01:06:59.580
T code for sure.

01:06:59.580 --> 01:06:59.860
It's like,

01:06:59.860 --> 01:07:00.040
Oh,

01:07:00.040 --> 01:07:00.880
we could just be 10 times.

01:07:00.880 --> 01:07:01.860
Let's try that.

01:07:01.860 --> 01:07:02.340
It's awesome.

01:07:02.340 --> 01:07:02.760
And then,

01:07:02.760 --> 01:07:02.980
yeah,

01:07:02.980 --> 01:07:08.000
you can love layer on more caching on top of that and make it even more ridiculous.

01:07:08.000 --> 01:07:08.600
Totally.

01:07:08.600 --> 01:07:08.860
All right.

01:07:08.860 --> 01:07:11.100
I think that's probably it for the time to talk through this.

01:07:11.100 --> 01:07:12.340
What a cool project you got here.

01:07:12.340 --> 01:07:13.280
Let's,

01:07:13.280 --> 01:07:17.040
let's close it out with a roadmap.

01:07:17.040 --> 01:07:19.700
So we've got a lot of things coming.

01:07:19.700 --> 01:07:20.380
Uh,

01:07:20.380 --> 01:07:23.680
one of the big ones is a big shift from using cookie cutter,

01:07:23.680 --> 01:07:25.940
which I've mentioned already to using copier,

01:07:25.940 --> 01:07:26.500
uh,

01:07:26.500 --> 01:07:28.060
as our underlying templating,

01:07:28.060 --> 01:07:28.680
uh,

01:07:28.680 --> 01:07:29.180
product.

01:07:30.060 --> 01:07:31.220
the big copier is.

01:07:31.220 --> 01:07:31.460
Yeah.

01:07:31.460 --> 01:07:31.720
Yeah.

01:07:31.720 --> 01:07:34.900
So copiers like cookie cutter actually should drop in replacement for cookie cutter.

01:07:34.900 --> 01:07:36.680
You can use your cookie cutter templates.

01:07:36.680 --> 01:07:38.120
You've already built with copier,

01:07:38.120 --> 01:07:40.120
but now you can actually,

01:07:40.120 --> 01:07:41.000
uh,

01:07:41.000 --> 01:07:43.060
modularize them and upgrade them.

01:07:43.060 --> 01:07:44.620
So a lot of problem.

01:07:44.620 --> 01:07:47.280
One of the problems with cookie cutter was it was kind of one and done.

01:07:47.280 --> 01:07:49.940
Like you blew out your template onto the file system.

01:07:49.940 --> 01:07:50.920
You've got your code.

01:07:50.920 --> 01:07:52.840
That's the last time you would touch cookie cutter.

01:07:53.680 --> 01:07:55.480
but if new opinions come around,

01:07:55.480 --> 01:07:57.960
which we're constantly adding new opinions to scaf,

01:07:57.960 --> 01:07:58.580
uh,

01:07:58.580 --> 01:08:00.360
about how we do dev and how we do deployment,

01:08:00.360 --> 01:08:04.940
you would want those to roll back into old projects that had been built with that same tool.

01:08:04.940 --> 01:08:11.960
Copier enables this copier now allows us to rerun against an existing project and adopt new,

01:08:11.960 --> 01:08:15.000
new opinions that have been made from the source template.

01:08:15.520 --> 01:08:17.520
And that's another change we're making is we're actually,

01:08:17.520 --> 01:08:18.080
um,

01:08:18.080 --> 01:08:21.780
allowing scaf to have multiple template types.

01:08:21.780 --> 01:08:26.280
So right now the scaf kind of runs in a full stack Django app mode.

01:08:26.280 --> 01:08:28.780
We're going to have the scaf light version,

01:08:28.780 --> 01:08:29.800
which is maybe serverless.

01:08:29.800 --> 01:08:31.220
We're going to have the appliance mode,

01:08:31.220 --> 01:08:33.720
which would enable not using Argo CD,

01:08:33.720 --> 01:08:34.220
for example,

01:08:34.220 --> 01:08:35.400
but different ways of updating.

01:08:35.400 --> 01:08:38.460
We'll have opinions that are not Django,

01:08:38.460 --> 01:08:38.980
uh,

01:08:38.980 --> 01:08:39.320
necessarily.

01:08:39.320 --> 01:08:41.440
They may be more data pipeline,

01:08:41.440 --> 01:08:42.120
um,

01:08:42.120 --> 01:08:43.240
versions of your apps.

01:08:43.240 --> 01:08:44.880
And so those will be templates that can be updated.

01:08:45.180 --> 01:08:45.620
And,

01:08:45.620 --> 01:08:47.900
and redeployed and kept up to date with copier.

01:08:47.900 --> 01:08:49.620
That's cool.

01:08:49.620 --> 01:08:50.060
Yeah.

01:08:50.060 --> 01:08:51.080
I can see a whole idea,

01:08:51.080 --> 01:08:55.720
a whole concept of this for ML workloads and data science workflows.

01:08:55.720 --> 01:08:57.760
And we don't actually need a web app.

01:08:57.760 --> 01:08:58.260
Exactly.

01:08:58.260 --> 01:09:01.200
What we need is data ingestion and detail.

01:09:01.200 --> 01:09:04.280
And we want results,

01:09:04.280 --> 01:09:06.840
either notebook or just something in a database on the other end of them.

01:09:06.840 --> 01:09:07.480
Yeah.

01:09:07.480 --> 01:09:08.940
Yeah.

01:09:08.940 --> 01:09:09.300
That's a big,

01:09:09.300 --> 01:09:09.820
that's a big deal.

01:09:09.820 --> 01:09:12.520
And that's another thing that is included in scaf opinions is the,

01:09:12.520 --> 01:09:13.120
um,

01:09:13.120 --> 01:09:14.560
CI pipelines,

01:09:14.620 --> 01:09:15.520
a GitHub actions,

01:09:15.520 --> 01:09:16.380
a bit bucket,

01:09:16.380 --> 01:09:17.040
you know,

01:09:17.040 --> 01:09:20.080
workflows or whatever their CI thing is called.

01:09:20.080 --> 01:09:21.500
Um,

01:09:21.500 --> 01:09:22.300
cause those are important.

01:09:22.300 --> 01:09:23.000
I seem to be there.

01:09:23.000 --> 01:09:24.160
Those need to be there day one.

01:09:24.160 --> 01:09:27.560
Cause they're so hard to tack on later or you just get busy and you don't

01:09:27.560 --> 01:09:28.700
tack them on when you should have.

01:09:28.700 --> 01:09:29.740
Yeah.

01:09:29.740 --> 01:09:30.660
It's,

01:09:30.660 --> 01:09:31.780
it's good to have all these,

01:09:31.780 --> 01:09:32.180
um,

01:09:32.580 --> 01:09:37.920
all this experience and all these rounded off rough edges put together in one box for

01:09:37.920 --> 01:09:38.040
you.

01:09:38.040 --> 01:09:38.560
It's very cool.

01:09:38.560 --> 01:09:39.840
All right.

01:09:39.840 --> 01:09:39.980
Well,

01:09:39.980 --> 01:09:41.480
we're certainly out of time,

01:09:41.480 --> 01:09:42.220
Calvin.

01:09:42.220 --> 01:09:43.480
So how about,

01:09:43.480 --> 01:09:45.940
but we'll get two things to close this out.

01:09:45.940 --> 01:09:47.220
Unlike normal.

01:09:47.660 --> 01:09:49.940
So let's close it out with a final call to action.

01:09:49.940 --> 01:09:51.200
People are interested in scaf.

01:09:51.200 --> 01:09:52.140
Yeah.

01:09:52.140 --> 01:09:52.600
They,

01:09:52.600 --> 01:09:52.920
they,

01:09:52.920 --> 01:09:53.820
they should definitely go.

01:09:53.820 --> 01:09:54.620
They start it.

01:09:54.620 --> 01:09:55.100
Yep.

01:09:55.100 --> 01:09:55.540
Go to start.

01:09:55.540 --> 01:09:56.180
I got to log in.

01:09:56.180 --> 01:09:56.520
Apparently.

01:09:56.520 --> 01:09:56.980
Yeah.

01:09:56.980 --> 01:09:57.580
Go hang out.

01:09:57.580 --> 01:09:57.880
Go,

01:09:57.880 --> 01:09:58.460
go to the,

01:09:58.460 --> 01:09:58.720
uh,

01:09:58.720 --> 01:09:58.920
six,

01:09:58.920 --> 01:09:59.480
uh,

01:09:59.480 --> 01:10:01.100
slash scaf GitHub repository.

01:10:01.620 --> 01:10:02.980
It's a one liner to install.

01:10:02.980 --> 01:10:05.000
I would love to hear your feedback,

01:10:05.000 --> 01:10:05.580
you know,

01:10:05.580 --> 01:10:07.700
any feature requests,

01:10:07.700 --> 01:10:08.360
um,

01:10:08.360 --> 01:10:08.780
you know,

01:10:08.780 --> 01:10:09.700
any bugs you find,

01:10:09.700 --> 01:10:10.320
uh,

01:10:10.320 --> 01:10:14.020
we've worked really hard on ironing out a lot of those issues over the last year,

01:10:14.020 --> 01:10:16.960
as we kind of pushed toward Django con last year.

01:10:16.960 --> 01:10:17.860
Uh,

01:10:17.860 --> 01:10:18.960
it's,

01:10:18.960 --> 01:10:19.420
it's,

01:10:19.420 --> 01:10:24.420
it's amazing and mind blowing to see how fast you can get a Django project up and

01:10:24.420 --> 01:10:27.220
running on your own machine with Kubernetes in the,

01:10:27.220 --> 01:10:27.840
in the mix.

01:10:27.840 --> 01:10:31.360
And maybe people need a little background information.

01:10:31.360 --> 01:10:32.420
Like they're like,

01:10:32.420 --> 01:10:33.380
I've heard of Kubernetes.

01:10:33.380 --> 01:10:35.920
What do I do with it?

01:10:35.920 --> 01:10:37.820
Like you got good resources for them to.

01:10:37.820 --> 01:10:38.660
Oh,

01:10:38.660 --> 01:10:39.280
uh,

01:10:39.280 --> 01:10:39.460
on,

01:10:39.460 --> 01:10:40.200
on YouTube,

01:10:40.200 --> 01:10:41.960
there's an excellent YouTuber.

01:10:41.960 --> 01:10:42.660
Uh,

01:10:42.660 --> 01:10:43.320
I can't remember.

01:10:43.320 --> 01:10:44.020
Her name's Nana.

01:10:44.020 --> 01:10:46.280
So if you just search Nana and Kubernetes,

01:10:46.280 --> 01:10:49.620
she does an incredible job of,

01:10:49.620 --> 01:10:50.080
uh,

01:10:50.080 --> 01:10:53.300
explaining Kubernetes to everybody.

01:10:53.300 --> 01:10:54.600
Yeah.

01:10:54.600 --> 01:10:56.440
I believe it's Nana codes.

01:10:56.440 --> 01:10:56.880
No.

01:10:56.880 --> 01:10:57.160
Yeah.

01:10:57.160 --> 01:10:57.620
Yeah.

01:10:57.620 --> 01:10:59.500
She's awesome.

01:10:59.500 --> 01:11:00.300
She's really good.

01:11:00.300 --> 01:11:00.460
Yeah.

01:11:00.460 --> 01:11:01.000
She's really good.

01:11:01.000 --> 01:11:02.280
Uh,

01:11:02.280 --> 01:11:05.320
great way of explaining these kinds of deeper technology things.

01:11:05.320 --> 01:11:05.840
That's I,

01:11:05.840 --> 01:11:07.380
that's literally where I went when I was like,

01:11:07.380 --> 01:11:08.580
I need to know more about Kubernetes.

01:11:08.580 --> 01:11:09.760
I went and watched her videos.

01:11:09.760 --> 01:11:10.280
Um,

01:11:10.280 --> 01:11:11.120
I've met her in person.

01:11:11.120 --> 01:11:14.640
She's actually an AWS hero and she was at a reinvent a couple of years ago.

01:11:14.640 --> 01:11:15.860
And just again,

01:11:15.860 --> 01:11:16.820
superhuman being,

01:11:16.820 --> 01:11:17.800
uh,

01:11:17.800 --> 01:11:19.620
doing this for love of technology.

01:11:19.620 --> 01:11:21.640
Yeah.

01:11:21.640 --> 01:11:22.040
Actually,

01:11:22.040 --> 01:11:23.240
I can give a shout out also to,

01:11:23.240 --> 01:11:23.620
uh,

01:11:23.620 --> 01:11:24.600
one of the people in the chat.

01:11:24.600 --> 01:11:25.000
Uh,

01:11:25.000 --> 01:11:25.980
Michael 11 is,

01:11:25.980 --> 01:11:26.340
uh,

01:11:26.340 --> 01:11:28.620
also a prolific YouTuber on,

01:11:28.620 --> 01:11:28.920
uh,

01:11:28.920 --> 01:11:29.240
Kubernetes.

01:11:30.240 --> 01:11:30.580
Oh,

01:11:30.580 --> 01:11:30.980
no kidding.

01:11:30.980 --> 01:11:31.280
Okay.

01:11:31.280 --> 01:11:32.280
I'll put a link to his,

01:11:32.280 --> 01:11:33.600
his channel as well.

01:11:33.600 --> 01:11:35.120
Awesome.

01:11:35.120 --> 01:11:35.480
All right.

01:11:35.480 --> 01:11:35.720
Well,

01:11:35.720 --> 01:11:36.620
Calvin,

01:11:36.620 --> 01:11:37.720
thank you for being here.

01:11:37.720 --> 01:11:38.860
It's been awesome.

01:11:38.860 --> 01:11:42.600
I can't tell you how excited I was about the opportunity.

01:11:43.060 --> 01:11:43.440
Yeah.

01:11:43.440 --> 01:11:44.360
It's been super fun.

01:11:44.360 --> 01:11:45.620
And I was excited as well.

01:11:45.620 --> 01:11:46.620
So much.

01:11:46.620 --> 01:11:47.000
So,

01:11:47.000 --> 01:11:50.740
so much so that I've made a theme song for this episode.

01:11:50.740 --> 01:11:53.720
I'm not going to play it on the YouTube live stream version.

01:11:53.720 --> 01:11:55.760
It's just the logistics of that are a little bit challenging,

01:11:55.760 --> 01:12:00.600
but I'll put a link in the YouTube description in a day or two.

01:12:00.980 --> 01:12:03.280
And when the show comes out,

01:12:03.280 --> 01:12:04.380
it's going to be at the end.

01:12:04.380 --> 01:12:07.080
So if you're listening to the MP3 version of podcast player,

01:12:07.080 --> 01:12:09.160
be sure to listen to the end.

01:12:09.160 --> 01:12:09.880
There's going to be a,

01:12:09.880 --> 01:12:10.320
yeah.

01:12:10.320 --> 01:12:12.460
So here's the thing.

01:12:12.460 --> 01:12:14.640
If you like Lincoln park and that style of music,

01:12:14.640 --> 01:12:15.320
you're going to love it.

01:12:15.320 --> 01:12:16.460
If you hate Lincoln park,

01:12:16.460 --> 01:12:18.880
maybe call it a show.

01:12:18.880 --> 01:12:19.960
Anyway,

01:12:19.960 --> 01:12:21.080
it's going to be super fun.

01:12:21.080 --> 01:12:21.740
We'll,

01:12:21.740 --> 01:12:21.880
we'll,

01:12:21.880 --> 01:12:22.240
we'll put,

01:12:22.240 --> 01:12:24.200
let's deploy or deploy the dream at the end.

01:12:24.200 --> 01:12:26.420
It'll be a great theme song to round things out.

01:12:26.580 --> 01:12:27.320
And with that,

01:12:27.320 --> 01:12:28.040
Calvin,

01:12:28.040 --> 01:12:28.740
thanks for being on the show.

01:12:28.740 --> 01:12:29.320
Awesome.

01:12:29.320 --> 01:12:29.660
Thanks,

01:12:29.660 --> 01:12:29.920
Michael.

01:12:29.920 --> 01:12:30.500
Yeah.

01:12:30.500 --> 01:12:30.760
Bye.

01:12:30.760 --> 01:12:33.340
Thank you.

