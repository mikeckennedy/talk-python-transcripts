WEBVTT

00:00:00.000 --> 00:00:04.000
Hey, YouTube. Hey, Bob.


00:00:04.000 --> 00:00:06.000
>> Hey, Mike. How are you doing?


00:00:06.000 --> 00:00:08.000
>> I'm fantastic. Awesome to have you here on the channel.


00:00:08.000 --> 00:00:10.000
And in just a moment on Talk Python.


00:00:10.000 --> 00:00:12.000
So shall we kick this thing off?


00:00:12.000 --> 00:00:14.000
>> Yeah. Thanks for having me.


00:00:14.000 --> 00:00:16.000
I'm glad to be back.


00:00:16.000 --> 00:00:18.000
>> Yeah. Glad to have you back.


00:00:18.000 --> 00:00:22.000
Let's just prefix this with thank you for those who are watching live.


00:00:22.000 --> 00:00:24.000
If you've got comments, questions, please put them in the live chat.


00:00:24.000 --> 00:00:26.000
We'll try to make them part of the show.


00:00:26.000 --> 00:00:28.000
If you're watching later, I really appreciate you being here as well.


00:00:28.000 --> 00:00:30.160
If you're watching later, I really appreciate you being here as well.


00:00:30.160 --> 00:00:33.040
But you know, we don't have time travel, so no going back for questions there.


00:00:33.040 --> 00:00:34.040
All right, Bob, you ready?


00:00:34.040 --> 00:00:35.720
Yeah, let's do it.


00:00:35.720 --> 00:00:38.760
Bob, welcome back to Talk Python to Me.


00:00:38.760 --> 00:00:41.560
Thanks for having me back.


00:00:41.560 --> 00:00:42.720
I'm excited to be here.


00:00:42.720 --> 00:00:45.160
Yeah, it's really good to have you back.


00:00:45.160 --> 00:00:46.680
You've been on a couple of times.


00:00:46.680 --> 00:00:54.360
We started, I believe our first discussion on the show way back when was around 100 days of code.


00:00:54.760 --> 00:00:57.000
We went on quite the 100 days of code journey,


00:00:57.000 --> 00:01:00.680
writing a couple of really, really long courses


00:01:00.680 --> 00:01:03.680
that were well-received, but it took a long,


00:01:03.680 --> 00:01:06.360
like nine months for us to write, which was amazing.


00:01:06.360 --> 00:01:07.600
And we're back together.


00:01:07.600 --> 00:01:08.960
It's great to catch up.


00:01:08.960 --> 00:01:09.800
- Yeah, indeed.


00:01:09.800 --> 00:01:12.560
Yeah, that goes way back to 100 days of Python


00:01:12.560 --> 00:01:14.680
and two courses that came from it.


00:01:14.680 --> 00:01:15.520
- Yeah.


00:01:15.520 --> 00:01:17.240
- Later, I think we also did a Django episode.


00:01:17.240 --> 00:01:18.120
Yeah.


00:01:18.120 --> 00:01:18.960
- That's right.


00:01:18.960 --> 00:01:20.320
We did do a Django episode as well.


00:01:20.320 --> 00:01:22.240
Good stuff.


00:01:22.240 --> 00:01:27.240
So this time we're back to talk about code quality,


00:01:27.240 --> 00:01:30.640
writing clean code, what are some of the tools


00:01:30.640 --> 00:01:32.560
and also what are some of the techniques,


00:01:32.560 --> 00:01:34.440
maybe even mindset people are using


00:01:34.440 --> 00:01:38.040
to help them write clean code, better code,


00:01:38.040 --> 00:01:40.280
both for yourself to make yourself happy


00:01:40.280 --> 00:01:42.120
and as well to be a better teammate


00:01:42.120 --> 00:01:44.640
if you're working in a team, right?


00:01:44.640 --> 00:01:47.560
- Yeah, no, this topic really excites me.


00:01:47.560 --> 00:01:49.540
It's in my everyday work


00:01:49.540 --> 00:01:51.560
and I think there's a lot to gain from it.


00:01:51.560 --> 00:01:54.040
So yeah, excited to share today.


00:01:54.040 --> 00:01:54.880
- I am too.


00:01:54.880 --> 00:01:57.160
It's something I really, really care a lot about.


00:01:57.160 --> 00:02:01.360
It's one of those topics that I think is long lived,


00:02:01.360 --> 00:02:04.600
which is rare in software development, right?


00:02:04.600 --> 00:02:07.760
It's not the latest JavaScript framework


00:02:07.760 --> 00:02:11.420
or something that's gonna last for a year or two.


00:02:11.420 --> 00:02:13.800
These ideas are the kind of ideas that just,


00:02:13.800 --> 00:02:15.120
no matter what you're doing,


00:02:15.120 --> 00:02:17.200
even if you don't do Python, if you do something else,


00:02:17.200 --> 00:02:19.880
it's very likely that these are solid foundations.


00:02:19.880 --> 00:02:22.000
Some of the ideas will be specifically for Python,


00:02:22.000 --> 00:02:23.880
but many of them not.


00:02:23.880 --> 00:02:25.520
- Yeah, timeless stuff.


00:02:25.520 --> 00:02:26.880
- Yeah, those are the good ones


00:02:26.880 --> 00:02:29.000
that are worth putting your time into learning.


00:02:29.000 --> 00:02:31.040
Now, before we jump into that topic,


00:02:31.040 --> 00:02:32.640
which is gonna be good,


00:02:32.640 --> 00:02:35.320
maybe just tell people what tripped you.


00:02:35.320 --> 00:02:38.400
- These days, so I left Oracle a while back.


00:02:38.400 --> 00:02:40.480
I think we spoke about that in 2020.


00:02:40.480 --> 00:02:42.960
So I've been working on PyBytes full-time


00:02:42.960 --> 00:02:44.360
for almost three years.


00:02:44.360 --> 00:02:45.240
- Congratulations.


00:02:45.240 --> 00:02:47.600
I know you and I spoke about this beforehand


00:02:47.600 --> 00:02:50.520
and it was a really a big step for you.


00:02:50.520 --> 00:02:51.440
- It was.


00:02:51.440 --> 00:02:53.540
- Something you were absolutely looking forward to,


00:02:53.540 --> 00:02:58.440
but just walking away from a good paying job, that's scary.


00:02:58.440 --> 00:03:00.240
So congratulations.


00:03:00.240 --> 00:03:01.080
- Yeah, thanks.


00:03:01.080 --> 00:03:03.560
Yeah, and this is also around the time


00:03:03.560 --> 00:03:06.940
that as PyBytes we pivoted to doing coaching.


00:03:06.940 --> 00:03:08.720
So helping people one-on-one,


00:03:08.720 --> 00:03:12.280
we created our PyBites Developer Mindset Program,


00:03:12.280 --> 00:03:15.200
12-week coaching program, and that really took off.


00:03:15.200 --> 00:03:17.320
And we have worked now with 100 plus people


00:03:17.320 --> 00:03:20.720
And it's what I'm super excited about every day


00:03:20.720 --> 00:03:23.600
when I wake up, because helping people,


00:03:23.600 --> 00:03:25.920
overcoming the tutorial paralysis,


00:03:25.920 --> 00:03:27.560
embracing imposter syndrome,


00:03:27.560 --> 00:03:29.840
helping them shipping two projects end to end


00:03:29.840 --> 00:03:31.980
is just the best thing ever.


00:03:31.980 --> 00:03:35.240
- Yeah, to see people grow and become more confident


00:03:35.240 --> 00:03:36.120
and get better.


00:03:36.120 --> 00:03:39.040
And yeah, it's really, it's excellent work, isn't it?


00:03:39.040 --> 00:03:40.960
- Yeah, it's really fulfilling.


00:03:40.960 --> 00:03:42.440
- Yeah.


00:03:42.440 --> 00:03:43.640
So congratulations.


00:03:43.640 --> 00:03:45.460
It's awesome to hear that you're doing that now


00:03:45.460 --> 00:03:47.260
and you can put all of your energy,


00:03:47.260 --> 00:03:49.500
not just your side hustle energy


00:03:49.500 --> 00:03:50.680
into these types of things,


00:03:50.680 --> 00:03:53.340
which I can tell you, it feels real good.


00:03:53.340 --> 00:03:54.940
- You know how it is, right?


00:03:54.940 --> 00:03:55.780
- I do, I do.


00:03:55.780 --> 00:03:57.420
I've been in it for a while.


00:03:57.420 --> 00:03:58.260
Very fortunate.


00:03:58.260 --> 00:04:01.260
Okay, so let's start this.


00:04:01.260 --> 00:04:05.940
I was gonna start this off with looking at your article,


00:04:05.940 --> 00:04:07.340
but before we do,


00:04:07.340 --> 00:04:09.580
Toon Army Captain has a really great way


00:04:09.580 --> 00:04:12.180
to sort of kick off this topic, I believe.


00:04:12.180 --> 00:04:15.740
Clean code has less or fewer WTFs per line.


00:04:15.740 --> 00:04:16.900
How about that?


00:04:16.900 --> 00:04:17.740
- Nice.


00:04:17.740 --> 00:04:21.460
- So yeah, I think that's gonna be a theme here.


00:04:21.460 --> 00:04:23.160
Let's go ahead and jump into it.


00:04:23.160 --> 00:04:25.220
I reached out to you and said,


00:04:25.220 --> 00:04:28.100
"Hey, let's get together and talk about this."


00:04:28.100 --> 00:04:31.360
Because I knew that you were passionate about these things.


00:04:31.360 --> 00:04:34.940
But then you also put together a blog post here


00:04:34.940 --> 00:04:38.380
called "Tips for Clean Code in Python."


00:04:38.380 --> 00:04:39.500
I thought, "Okay, that's interesting."


00:04:39.500 --> 00:04:40.660
Let me start flipping through here.


00:04:40.660 --> 00:04:42.740
and there's just a bunch of nice ideas


00:04:42.740 --> 00:04:45.060
that resonate with me.


00:04:45.060 --> 00:04:47.540
So what I thought we could do is maybe you could set


00:04:47.540 --> 00:04:49.620
the stage, like what the heck is clean code?


00:04:49.620 --> 00:04:51.460
Toon Army did do a pretty good job


00:04:51.460 --> 00:04:53.380
of kind of giving us the colloquial term,


00:04:53.380 --> 00:04:55.500
but maybe something a little more safe,


00:04:55.500 --> 00:04:58.380
or conformal we could go with.


00:04:58.380 --> 00:05:00.980
Set the stage for what is clean code?


00:05:00.980 --> 00:05:01.800
Why does it matter?


00:05:01.800 --> 00:05:03.660
And then we could dive into some of the stuff


00:05:03.660 --> 00:05:05.780
you put into your article,


00:05:05.780 --> 00:05:08.620
and then also you and I both threw some ideas in


00:05:08.620 --> 00:05:10.620
after, like to kind of expand it as well.


00:05:10.620 --> 00:05:14.140
So let's start with what is this clean code thing?


00:05:14.140 --> 00:05:15.920
- Yeah, to set off the stage.


00:05:15.920 --> 00:05:18.560
So clean code is really when you write code


00:05:18.560 --> 00:05:21.700
that's easier to maintain, easier to test,


00:05:21.700 --> 00:05:24.900
easier to update, because as we all know,


00:05:24.900 --> 00:05:28.260
a project usually starts simple,


00:05:28.260 --> 00:05:30.780
but over time it grows, new requirements comes in,


00:05:30.780 --> 00:05:32.960
you constantly have to change things.


00:05:32.960 --> 00:05:36.660
And yeah, the cleanness of your code


00:05:36.660 --> 00:05:43.500
will definitely determine how easy you can move a project forward, how you can make changes.


00:05:43.500 --> 00:05:49.980
And of course, it's also a contribution to your team to make it a more pleasant experience


00:05:49.980 --> 00:05:52.740
and decrease the amount of WTFs.


00:05:52.740 --> 00:05:56.580
Yeah, you don't want to have fewer, the better.


00:05:56.580 --> 00:06:00.220
Although maybe you'll even want to, just for a good war story at a conference five years


00:06:00.220 --> 00:06:02.740
from now, but you don't want too many of those.


00:06:02.740 --> 00:06:07.740
- Yeah, I think, yeah, to me, it's appreciating the fact


00:06:07.740 --> 00:06:10.420
that if you do a good job,


00:06:10.420 --> 00:06:13.460
what you're building will live a long time, right?


00:06:13.460 --> 00:06:17.180
It will possibly be still the main focus


00:06:17.180 --> 00:06:19.260
in five years from now.


00:06:19.260 --> 00:06:21.820
And you don't always know what that's gonna be, right?


00:06:21.820 --> 00:06:24.300
It could be, oh, here's a little side project.


00:06:24.300 --> 00:06:27.060
It's just gonna pull in some data and like, you know,


00:06:27.060 --> 00:06:29.780
you show it to somebody at work and like, you know what?


00:06:29.780 --> 00:06:30.620
That's great, ship it.


00:06:30.620 --> 00:06:31.820
Like, whoa, whoa, whoa, whoa, ship it.


00:06:31.820 --> 00:06:33.340
No, no, I just threw it together.


00:06:33.340 --> 00:06:36.500
It's good, let's go, we're in a hurry.


00:06:36.500 --> 00:06:39.460
And then that just starts to build and layer on


00:06:39.460 --> 00:06:41.720
like a sediment that just makes it harder


00:06:41.720 --> 00:06:43.420
and less fun to work with.


00:06:43.420 --> 00:06:45.960
And so as you just think about,


00:06:45.960 --> 00:06:49.300
this thing is small now, but as it grows,


00:06:49.300 --> 00:06:51.860
what are both the practices


00:06:51.860 --> 00:06:54.700
and maybe technological programming things


00:06:54.700 --> 00:06:57.540
to bring and put in place so that as it grows,


00:06:57.540 --> 00:07:00.340
you don't start to just really come to a screeching halt


00:07:00.340 --> 00:07:04.440
to make changes, tests start to fail randomly


00:07:04.440 --> 00:07:06.100
as you just touch it in various places,


00:07:06.100 --> 00:07:07.500
things like that, right?


00:07:07.500 --> 00:07:11.900
- Yeah, it was also kind of my introduction


00:07:11.900 --> 00:07:15.660
to Python in 2012, so almost 11 years ago


00:07:15.660 --> 00:07:19.540
when I made this automation framework at work.


00:07:19.540 --> 00:07:22.700
And I was a big fan of Perl back then.


00:07:22.700 --> 00:07:25.860
I guess that goes back to my Unix shell scripting


00:07:25.860 --> 00:07:29.300
initial programming exploration.


00:07:29.300 --> 00:07:31.380
And it was not maintainable at all, right?


00:07:31.380 --> 00:07:34.380
There were no classes in Perl and it was just a mess.


00:07:34.380 --> 00:07:37.260
Also, of course, because I didn't know Perl maybe very well.


00:07:37.260 --> 00:07:40.540
But then I discovered Python and I could refactor it,


00:07:40.540 --> 00:07:42.020
make it more modular.


00:07:42.020 --> 00:07:46.200
And that project was then just a joy to work with.


00:07:46.200 --> 00:07:48.620
And maybe that says a lot about Python as well,


00:07:48.620 --> 00:07:52.180
that it does inherently things well,


00:07:52.180 --> 00:07:54.620
because if you type import this in the REPL


00:07:54.620 --> 00:07:56.460
and you get the scent of Python,


00:07:56.460 --> 00:07:58.800
a lot of these statements sound so simple,


00:07:58.800 --> 00:08:00.240
that they're actually so profound


00:08:00.240 --> 00:08:05.240
and they actually tell you a lot about writing clean code


00:08:05.240 --> 00:08:06.220
in a sense.


00:08:06.220 --> 00:08:08.440
So anyway, but I agree.


00:08:08.440 --> 00:08:10.360
- They also talk a lot about the community


00:08:10.360 --> 00:08:12.820
that cares enough that, you know,


00:08:12.820 --> 00:08:16.160
you have these sorts of commands in the language itself


00:08:16.160 --> 00:08:20.140
that remind you to think about writing clean code.


00:08:20.140 --> 00:08:23.780
And going way back to the late 80s,


00:08:23.780 --> 00:08:25.520
Guido when he came up with it,


00:08:25.520 --> 00:08:28.320
really broke with tradition to use white space


00:08:28.320 --> 00:08:30.880
for the code structure.


00:08:30.880 --> 00:08:34.120
And I think it's a little bit less so now,


00:08:34.120 --> 00:08:37.760
but back then that was very much to encourage people


00:08:37.760 --> 00:08:41.300
to write code in a way that was very readable.


00:08:41.300 --> 00:08:43.280
Whereas, I say less so than now,


00:08:43.280 --> 00:08:44.980
because you've got a lot of IDEs and stuff


00:08:44.980 --> 00:08:45.820
where you can push a button,


00:08:45.820 --> 00:08:46.840
and it'll auto format it,


00:08:46.840 --> 00:08:48.060
and you've got things like black.


00:08:48.060 --> 00:08:49.800
And if you had curly braces,


00:08:49.800 --> 00:08:52.840
it could still be quickly put into a pretty shape now.


00:08:52.840 --> 00:08:53.840
But in the early days,


00:08:53.840 --> 00:08:57.040
that was a really important concept of it.


00:08:57.040 --> 00:08:58.640
These days we're spoiled, right?


00:08:58.640 --> 00:09:00.920
Having black out of formatting and all that.


00:09:00.920 --> 00:09:03.020
We started, that was not the case.


00:09:03.020 --> 00:09:05.360
How, how did you react to the white space?


00:09:05.360 --> 00:09:09.520
I think, I just really didn't like it.


00:09:09.520 --> 00:09:10.560
I thought this is just weird.


00:09:10.560 --> 00:09:11.120
Like, okay.


00:09:11.120 --> 00:09:15.640
Everything else about this language seems pretty nice, but this is weird stuff.


00:09:15.640 --> 00:09:18.280
And then I started using editors that understood it.


00:09:18.280 --> 00:09:20.840
It's like, okay, well I just hit, you know, colon and enter.


00:09:20.840 --> 00:09:23.080
And it, it kind of does it for me automatically.


00:09:23.080 --> 00:09:23.720
And sure.


00:09:23.720 --> 00:09:25.080
There's three spaces, four spaces.


00:09:25.080 --> 00:09:28.320
but if I have backspace, then it goes back forward.


00:09:28.320 --> 00:09:30.560
It kind of treats the structure.


00:09:30.560 --> 00:09:32.720
It knows, the tools know the structure


00:09:32.720 --> 00:09:33.720
and it makes it really nice.


00:09:33.720 --> 00:09:35.800
And at the time, this is long ago,


00:09:35.800 --> 00:09:40.480
I was doing C#, which is an okay language, it's pretty good.


00:09:40.480 --> 00:09:45.480
But it has all the symbols and formulas


00:09:45.480 --> 00:09:49.220
and all the angle brackets


00:09:49.220 --> 00:09:51.120
and all the stuff that you would do, right?


00:09:51.120 --> 00:09:53.660
It's not quite C++, but it's pretty close.


00:09:53.660 --> 00:09:55.800
And when I came to Python, I was like,


00:09:55.800 --> 00:09:58.140
"Gosh, it's just weird that a lot of that stuff's not here."


00:09:58.140 --> 00:09:59.620
And it seemed kind of out of place.


00:09:59.620 --> 00:10:01.700
But then when I went back, I realized,


00:10:01.700 --> 00:10:03.180
"Wait, these languages are lying to me.


00:10:03.180 --> 00:10:05.100
They're saying I need all these symbols


00:10:05.100 --> 00:10:07.820
to make it hold together, and you just don't."


00:10:07.820 --> 00:10:10.300
And it's so much nicer to look at code


00:10:10.300 --> 00:10:13.740
that is not laden with these support structures.


00:10:13.740 --> 00:10:15.660
So a bit of a diversion, but yeah,


00:10:15.660 --> 00:10:19.580
I reacted weirdly to it.


00:10:19.580 --> 00:10:22.300
But after about a week, I'm like, "But it's better."


00:10:22.300 --> 00:10:24.500
It really is, even though I'm still weirded out by it,


00:10:24.500 --> 00:10:25.340
it's better.


00:10:25.340 --> 00:10:26.900
And then, you know, pretty quickly I'm like,


00:10:26.900 --> 00:10:28.640
yeah, this is sweet, I'm going with this.


00:10:28.640 --> 00:10:30.100
- Yeah, same here.


00:10:30.100 --> 00:10:32.900
- Yeah, indeed.


00:10:32.900 --> 00:10:35.140
All right, well, let's start,


00:10:35.140 --> 00:10:37.300
I guess start at the top with your article.


00:10:37.300 --> 00:10:41.220
What inspired you, by the way, to write it right now?


00:10:41.220 --> 00:10:42.860
'Cause it's pretty recent, isn't it?


00:10:42.860 --> 00:10:43.740
- Yeah, that's a good question.


00:10:43.740 --> 00:10:48.460
It's not the first time I've been writing content


00:10:48.460 --> 00:10:51.500
about clean code and stuff.


00:10:51.500 --> 00:10:55.100
In 2016, I actually did a formal certification


00:10:55.100 --> 00:11:00.100
building maintainable software from the SIG group,


00:11:00.100 --> 00:11:03.000
software improvement group.


00:11:03.000 --> 00:11:04.740
They have formal certifications.


00:11:04.740 --> 00:11:07.860
And yeah, it's a passion of mine, clean code.


00:11:07.860 --> 00:11:11.180
It's also coming back a lot in the coaching


00:11:11.180 --> 00:11:12.860
I do day to day helping people.


00:11:12.860 --> 00:11:16.280
So it's not the first content piece,


00:11:16.280 --> 00:11:18.740
But I think this one kind of summarizes


00:11:18.740 --> 00:11:21.520
in a bit more of a concise way.


00:11:21.520 --> 00:11:24.200
And of course there's way much more to it,


00:11:24.200 --> 00:11:27.600
but I think the 10 points here get you pretty far.


00:11:27.600 --> 00:11:30.520
Those are pretty important.


00:11:30.520 --> 00:11:32.640
- Yeah, they sure are.


00:11:32.640 --> 00:11:36.920
So let's start with one that you already kind of


00:11:36.920 --> 00:11:39.120
laid this out, like so many of these techniques,


00:11:39.120 --> 00:11:41.800
they are like, they sound so simple.


00:11:41.800 --> 00:11:43.200
And like, yeah, sure.


00:11:43.200 --> 00:11:46.200
Obviously, Michael, I wouldn't write off.


00:11:46.200 --> 00:11:49.920
I wouldn't write a 1000 line function.


00:11:49.920 --> 00:11:52.520
And you're like, but it's already 700.


00:11:52.520 --> 00:11:54.000
What is how, how did this happen?


00:11:54.000 --> 00:11:54.840
Right?


00:11:54.840 --> 00:11:55.660
How do we get here?


00:11:55.660 --> 00:11:58.280
And the first one solidly falls into that realm


00:11:58.280 --> 00:12:01.320
which is smaller units, smaller functions,


00:12:01.320 --> 00:12:03.680
smaller classes, smaller modules,


00:12:03.680 --> 00:12:05.900
single responsibility principle, all that, right?


00:12:05.900 --> 00:12:07.220
Tell us about this.


00:12:07.220 --> 00:12:12.220
- Yeah. So indeed a function or a unit of code


00:12:12.220 --> 00:12:14.000
should ideally do one thing.


00:12:15.480 --> 00:12:17.440
And just a side note, right?


00:12:17.440 --> 00:12:19.560
That's usually not how we start.


00:12:19.560 --> 00:12:22.760
Sometimes I do want to make this side note


00:12:22.760 --> 00:12:25.520
that when we are figuring out a design,


00:12:25.520 --> 00:12:28.120
it can definitely happen that you have very large units


00:12:28.120 --> 00:12:30.280
because you're basically trying to figure out


00:12:30.280 --> 00:12:31.640
what you're building, right?


00:12:31.640 --> 00:12:33.300
And that's where refactoring comes in,


00:12:33.300 --> 00:12:36.080
but we'll talk about that a bit later.


00:12:36.080 --> 00:12:39.200
But yeah, I give a very simple example in this article,


00:12:39.200 --> 00:12:42.400
right, where a function parses a CSV file,


00:12:42.400 --> 00:12:45.200
builds up a result list and also prints it out, right?


00:12:45.200 --> 00:12:47.640
So now this function is doing three things.


00:12:47.640 --> 00:12:50.760
And it probably works and it's fine,


00:12:50.760 --> 00:12:55.040
but you cannot really easily reuse something


00:12:55.040 --> 00:12:56.800
that's doing three things, right?


00:12:56.800 --> 00:12:58.440
So if you wanna plug in this function now


00:12:58.440 --> 00:13:01.840
into something else, there's a lot of things happening


00:13:01.840 --> 00:13:04.040
that probably doesn't make it a candidate to reuse


00:13:04.040 --> 00:13:06.560
in its current shape or form.


00:13:06.560 --> 00:13:09.720
It's also harder to test because now you have to test


00:13:09.720 --> 00:13:11.140
parsing and printing.


00:13:11.140 --> 00:13:13.480
And this is kind of a silly example,


00:13:13.480 --> 00:13:18.060
but just think about another thing you have in your code


00:13:18.060 --> 00:13:19.200
that's doing multiple things.


00:13:19.200 --> 00:13:21.160
It will just be harder to test


00:13:21.160 --> 00:13:22.600
because there's a lot more going on.


00:13:22.600 --> 00:13:24.160
And yeah, as you said, right,


00:13:24.160 --> 00:13:29.160
these things sound very intuitive and easy to grasp.


00:13:29.160 --> 00:13:32.120
Yet, when we look at code bases, right,


00:13:32.120 --> 00:13:33.800
this happens all the time.


00:13:33.800 --> 00:13:36.540
And yeah, so if something's harder to test,


00:13:36.540 --> 00:13:40.360
it's harder to guarantee that it works.


00:13:40.360 --> 00:13:43.140
If it's hard to extend, then when requirements change,


00:13:43.140 --> 00:13:45.640
So it'll be harder to update.


00:13:45.640 --> 00:13:47.720
- Yeah, it's harder to maintain.


00:13:47.720 --> 00:13:51.400
It's harder to reason about the more things that it's doing,


00:13:51.400 --> 00:13:54.120
the more state that it might be changing.


00:13:54.120 --> 00:13:56.200
It's harder to onboard new people.


00:13:56.200 --> 00:13:59.760
It's just the whole spectrum, right?


00:13:59.760 --> 00:14:04.320
And it's write functions that are 10 lines long,


00:14:04.320 --> 00:14:05.760
not a hundred lines long.


00:14:05.760 --> 00:14:07.240
Now, I don't know how,


00:14:07.240 --> 00:14:08.660
I like to hear your thoughts on this,


00:14:08.660 --> 00:14:10.960
but my feeling about all of this stuff is


00:14:11.920 --> 00:14:14.760
as a general rule, this is what you should do.


00:14:14.760 --> 00:14:16.880
There will be situations where you might,


00:14:16.880 --> 00:14:20.280
you know, this is just, I can't think of something better


00:14:20.280 --> 00:14:24.320
or it's way over the top to try to like adhere


00:14:24.320 --> 00:14:27.160
to all of these rules within this small context.


00:14:27.160 --> 00:14:30.040
I could tell you like on the Talk Python training website,


00:14:30.040 --> 00:14:35.040
there's a couple of places where it's like 75, 80, 90 lines


00:14:35.040 --> 00:14:37.040
of code for a single function.


00:14:37.040 --> 00:14:39.600
I was like, this is just so bad.


00:14:39.600 --> 00:14:41.880
I just, I wish it wasn't like this,


00:14:41.880 --> 00:14:45.480
But it's just weirdly unique.


00:14:45.480 --> 00:14:49.320
But there's 19,000 other lines of code


00:14:49.320 --> 00:14:53.320
that are all three lines, five lines type of thing.


00:14:53.320 --> 00:14:57.200
So for me at least, this isn't a 100%


00:14:57.200 --> 00:14:58.100
or you're doing it wrong.


00:14:58.100 --> 00:15:03.100
It's a 98% or 95% of the time, you should be doing this.


00:15:03.100 --> 00:15:04.320
And maybe some weird case.


00:15:04.320 --> 00:15:08.440
And how do you feel about that in general on these topics?


00:15:08.440 --> 00:15:09.560
- Yeah, as I said before,


00:15:09.560 --> 00:15:13.120
sometimes you just don't get the design right from the start.


00:15:13.120 --> 00:15:16.600
So inevitably, you're going to write some longer classes


00:15:16.600 --> 00:15:18.400
or functions.


00:15:18.400 --> 00:15:22.120
But then when you break them out in smaller units,


00:15:22.120 --> 00:15:25.000
the other thing I have to say about that is it


00:15:25.000 --> 00:15:27.120
gives you an opportunity to better document.


00:15:27.120 --> 00:15:31.360
Because in this example, if you break this long function that's


00:15:31.360 --> 00:15:34.120
doing three things out into three separate functions,


00:15:34.120 --> 00:15:38.180
parse CSV, build up list, bad name,


00:15:38.180 --> 00:15:41.100
but you get the point and print results.


00:15:41.100 --> 00:15:43.300
Then all of a sudden we have three units now


00:15:43.300 --> 00:15:45.500
and every unit has a name.


00:15:45.500 --> 00:15:48.880
Hence when you go back after a year and look at that code,


00:15:48.880 --> 00:15:51.060
which always happens and you always wonder,


00:15:51.060 --> 00:15:52.520
what the heck was I thinking?


00:15:52.520 --> 00:15:56.400
Now you at a glance,


00:15:56.400 --> 00:15:58.180
just by looking at the function numbers,


00:15:58.180 --> 00:16:00.240
you have just already a better idea.


00:16:00.240 --> 00:16:03.540
These functions you can give doc strings as well.


00:16:03.540 --> 00:16:06.620
So at a glance, you have just a much easier time


00:16:06.620 --> 00:16:08.500
figuring out what this was about.


00:16:08.500 --> 00:16:14.340
- First piece here, which I didn't expect,


00:16:14.340 --> 00:16:18.620
but what are my rules?


00:16:18.620 --> 00:16:20.220
You know, and I see in this article,


00:16:20.220 --> 00:16:22.300
you referenced Martin Fowler's refactoring book.


00:16:22.300 --> 00:16:24.300
And one of the most important things that came out of that


00:16:24.300 --> 00:16:25.540
is not all the refactorings,


00:16:25.540 --> 00:16:29.140
but this idea of code smells, right?


00:16:29.140 --> 00:16:32.900
And maybe tell people real quick about code smells.


00:16:32.900 --> 00:16:34.780
- Yeah, that's a funny name, right?


00:16:34.780 --> 00:16:36.920
- It is. - A code that is smelling


00:16:36.920 --> 00:16:41.000
and it's an analogy they came up with.


00:16:41.000 --> 00:16:42.740
But yeah, basically it's code


00:16:42.740 --> 00:16:45.900
that's not following these best practices


00:16:45.900 --> 00:16:49.860
and it's just not maintainable,


00:16:49.860 --> 00:16:50.760
not easy to extend,


00:16:50.760 --> 00:16:53.040
going back to these principles we mentioned.


00:16:53.040 --> 00:16:56.980
So yeah, not following these guidelines,


00:16:56.980 --> 00:16:58.780
that code can be smelly,


00:16:58.780 --> 00:17:00.180
but it can be as code smell.


00:17:00.180 --> 00:17:02.580
Yeah.


00:17:02.580 --> 00:17:05.180
- Well, the idea is like, it's not actually not working.


00:17:05.180 --> 00:17:06.660
It's just not nice.


00:17:06.660 --> 00:17:08.740
You know, you kind of turn your nose up at it


00:17:08.740 --> 00:17:11.420
when you see it, but you can't say it's broken


00:17:11.420 --> 00:17:12.900
'cause it is working.


00:17:12.900 --> 00:17:15.540
But it smells a little bit off, right?


00:17:15.540 --> 00:17:20.260
It's not quite broken code, but it's sour, I don't know.


00:17:20.260 --> 00:17:21.620
And so the reason I bring this up


00:17:21.620 --> 00:17:24.660
is one of my rules of thumb here that I love,


00:17:24.660 --> 00:17:25.820
and I think you're kind of hinting that


00:17:25.820 --> 00:17:27.300
with this little shout out that you gave me


00:17:27.300 --> 00:17:28.340
in this article is,


00:17:29.940 --> 00:17:33.060
When we come across these code smells, often,


00:17:33.060 --> 00:17:35.500
especially when you're earlier in your career,


00:17:35.500 --> 00:17:39.460
often the reaction or the first thought is,


00:17:39.460 --> 00:17:41.060
you know, this part is not nice.


00:17:41.060 --> 00:17:42.300
This part is complicated.


00:17:42.300 --> 00:17:44.380
This part is hard to maintain or hard to understand.


00:17:44.380 --> 00:17:46.220
So I need to put a nice comment.


00:17:46.220 --> 00:17:48.300
I've been told, "Comment your code, don't be a jerk,


00:17:48.300 --> 00:17:49.140
comment it."


00:17:49.140 --> 00:17:50.860
So I'm gonna put a big comment that describes


00:17:50.860 --> 00:17:53.420
why it's really bad and all that.


00:17:53.420 --> 00:17:57.500
And in the code smells sort of world,


00:17:57.500 --> 00:18:01.060
these code comments can be seen as deodorant for the smell.


00:18:01.060 --> 00:18:03.900
Like it doesn't remove the smell, but it kind of obscures,


00:18:03.900 --> 00:18:07.060
like it's not as bad if you saw the comment saying


00:18:07.060 --> 00:18:09.740
why the code that follows is bad,


00:18:09.740 --> 00:18:13.980
but maybe you could just make it not need a comment.


00:18:13.980 --> 00:18:15.980
And a lot of times, like you just said,


00:18:15.980 --> 00:18:19.060
that's well, these five lines of code need an explanation


00:18:19.060 --> 00:18:20.620
because they're mixed in with all this.


00:18:20.620 --> 00:18:23.060
But if they had a function that had a name


00:18:23.060 --> 00:18:26.080
whose name was basically the comment,


00:18:26.080 --> 00:18:27.220
well, then you don't need a comment


00:18:27.220 --> 00:18:30.740
the name is the comment and it's now small and understandable, right? Like there's a lot of these


00:18:30.740 --> 00:18:36.020
little iterative things that go on. Exactly, yeah, that's a great point. And it's very easy


00:18:36.020 --> 00:18:41.460
to make that refactoring, just turn the comment into a function and we have created another unit


00:18:41.460 --> 00:18:46.820
we can extend, we can test, etc. So yeah, it's interesting because there are kind of mixed


00:18:46.820 --> 00:18:51.620
feelings about commands. Some people say, "Ferocious, command your code." But mostly in


00:18:51.620 --> 00:18:57.220
in the literature I'm reading that commands are actually not that good and sometimes even


00:18:57.220 --> 00:19:01.300
labeled as a code smell in the sense that your code should be kind of intuitive.


00:19:01.300 --> 00:19:04.740
And yeah, if you cannot express it. - I think it's going back to that,


00:19:04.740 --> 00:19:08.420
like half of the time when people are actually putting those comments,


00:19:08.420 --> 00:19:13.620
it's because there's something kind of messy and they're trying to help you get over that mess or


00:19:13.620 --> 00:19:16.980
deal with that mess rather than just fixing the mess, you know?


00:19:16.980 --> 00:19:20.100
- Yeah, it might be an indication of a bad design, right?


00:19:20.100 --> 00:19:21.460
- Yes, exactly. - So you might even have


00:19:21.460 --> 00:19:26.340
to go back to the drawing board. Yeah. But that said, I definitely see a place for comments where


00:19:26.340 --> 00:19:33.140
sometimes you just want to remind yourself and of course your team members not what the code is,


00:19:33.140 --> 00:19:38.340
they can read the code obviously, but why you took that decision and there might just be


00:19:38.340 --> 00:19:45.060
some extra context that you need to give. Yeah, yeah, absolutely. And it's also different than


00:19:45.060 --> 00:19:47.540
and doc strings potentially, right?


00:19:47.540 --> 00:19:50.260
Which is kind of a form of a comment,


00:19:50.260 --> 00:19:52.700
but it's meant to talk about the API


00:19:52.700 --> 00:19:54.220
and not cover up some weird thing


00:19:54.220 --> 00:19:55.500
you had to do in the middle.


00:19:55.500 --> 00:19:57.580
- Exactly, yeah, doc strings are basically


00:19:57.580 --> 00:19:59.820
your API documentation.


00:19:59.820 --> 00:20:01.940
- Yeah, exactly.


00:20:01.940 --> 00:20:04.980
All right, well, good stuff.


00:20:04.980 --> 00:20:07.220
I mean, even GitHub Copilot and those things


00:20:07.220 --> 00:20:09.180
are starting to use these comments as a way to say,


00:20:09.180 --> 00:20:10.740
well, I'll just make a function


00:20:10.740 --> 00:20:13.320
that kind of is named what the comment is.


00:20:13.320 --> 00:20:14.320
>> Yeah.


00:20:14.320 --> 00:20:23.360
>> Even our robot overlords are going to help us by taking these comments and removing them,


00:20:23.360 --> 00:20:24.360
putting the functions there.


00:20:24.360 --> 00:20:25.360
>> Help us.


00:20:25.360 --> 00:20:26.360
>> Another thing I--


00:20:26.360 --> 00:20:27.360
>> Never replace us, right?


00:20:27.360 --> 00:20:28.360
>> Yeah, hopefully.


00:20:28.360 --> 00:20:30.520
Fingers crossed.


00:20:30.520 --> 00:20:36.560
So another thing related to this, strongly related to this, because the more things you


00:20:36.560 --> 00:20:39.200
have that are smaller units, you're probably still going to have about the same amount


00:20:39.200 --> 00:20:40.200
of codes.


00:20:40.200 --> 00:20:42.380
more functions, more classes, more modules,


00:20:42.380 --> 00:20:43.420
files and so on.


00:20:43.420 --> 00:20:47.640
What gets tricky can be naming them, right?


00:20:47.640 --> 00:20:50.940
So choosing good names also, I think probably


00:20:50.940 --> 00:20:53.780
is a message in here that people need to think about.


00:20:53.780 --> 00:20:55.300
What are your thoughts on that?


00:20:55.300 --> 00:20:56.260
- Yeah, it's funny.


00:20:56.260 --> 00:20:58.940
Again, another thing that sounds very intuitive,


00:20:58.940 --> 00:21:01.180
but it wasn't there saying like there are two


00:21:01.180 --> 00:21:03.540
or three complex problems in science.


00:21:03.540 --> 00:21:07.780
One other one I can remember in naming things.


00:21:07.780 --> 00:21:10.500
- Yeah, there's two problems that are hard


00:21:10.500 --> 00:21:13.340
in computer science, naming things,


00:21:13.340 --> 00:21:16.260
cache invalidation and off by one errors.


00:21:16.260 --> 00:21:17.100
- Thank you.


00:21:17.100 --> 00:21:17.940
Yeah, yeah.


00:21:17.940 --> 00:21:19.260
So naming is up there, right?


00:21:19.260 --> 00:21:20.660
- It is, that's right.


00:21:20.660 --> 00:21:23.780
- And I think it goes back again


00:21:23.780 --> 00:21:27.140
to knowing your design and what you're building.


00:21:27.140 --> 00:21:29.260
And sometimes you don't really have that figured out.


00:21:29.260 --> 00:21:31.140
Hence naming becomes more difficult.


00:21:31.140 --> 00:21:33.940
But I think that's an experience thing.


00:21:33.940 --> 00:21:38.180
you get better at it, the more code you write.


00:21:38.180 --> 00:21:42.940
Yeah, maybe we can touch on the magic numbers there.


00:21:42.940 --> 00:21:43.780
- Yeah, absolutely.


00:21:43.780 --> 00:21:45.580
That's the next one is magic numbers.


00:21:45.580 --> 00:21:48.060
And magic, the number part I think is,


00:21:48.060 --> 00:21:50.500
could be expanded a little bit broader even,


00:21:50.500 --> 00:21:53.380
you know, magic static values, right?


00:21:53.380 --> 00:21:57.980
But if you see 360, you know, think just in the code,


00:21:57.980 --> 00:22:02.460
like, well, is that a, like a degrees?


00:22:02.460 --> 00:22:03.300
- Right. - What is that?


00:22:03.300 --> 00:22:05.540
Probably degrees, but it might not be, I don't know.


00:22:05.540 --> 00:22:07.980
So yeah, magic numbers, that's your next recommendation.


00:22:07.980 --> 00:22:09.880
I'm presuming to avoid them.


00:22:09.880 --> 00:22:14.620
- Yes, so when you see some sort of random integer


00:22:14.620 --> 00:22:17.600
in the code, which might be an intuitive one,


00:22:17.600 --> 00:22:21.200
like 365 number of days in a year,


00:22:21.200 --> 00:22:24.200
which we might kind of guess,


00:22:24.200 --> 00:22:27.340
but yeah, any guessing in code is not good.


00:22:27.340 --> 00:22:32.300
So it's very easy to then replace that 365 integer


00:22:32.300 --> 00:22:37.020
with a number on the score of days in a year


00:22:37.020 --> 00:22:40.520
or something like that, something that expresses meaning.


00:22:40.520 --> 00:22:42.980
Yeah, and again, this is kind of an obvious example,


00:22:42.980 --> 00:22:46.540
but if you have some magic five or six or 87 in there,


00:22:46.540 --> 00:22:49.300
the reader of this code probably doesn't know


00:22:49.300 --> 00:22:50.320
what that means, right?


00:22:50.320 --> 00:22:54.180
So if you have a constant uppercase with underscores


00:22:54.180 --> 00:22:56.700
as per PEP 8, defined at the top of your module,


00:22:56.700 --> 00:22:59.700
I usually put them in the top of the module.


00:23:00.880 --> 00:23:03.780
And then in the code, you see like max underscore,


00:23:03.780 --> 00:23:05.720
blah, blah, blah, a real name.


00:23:05.720 --> 00:23:08.740
And then immediately it makes sense, right?


00:23:08.740 --> 00:23:11.740
And it's also a nice way of grouping


00:23:11.740 --> 00:23:13.440
those variables in one place.


00:23:13.440 --> 00:23:15.320
I said top of the module, but if you have many,


00:23:15.320 --> 00:23:17.460
you could also have a constants.py


00:23:17.460 --> 00:23:20.380
in your package to group them.


00:23:20.380 --> 00:23:23.940
You can also use enums to group various constants together


00:23:23.940 --> 00:23:27.960
if they logically pertain to the same group.


00:23:27.960 --> 00:23:30.860
- Yeah, enums are a really good recommendation.


00:23:30.860 --> 00:23:33.060
- Yeah, enums are a great recommendation


00:23:33.060 --> 00:23:35.260
because instead of saying, well, the default Sunday,


00:23:35.260 --> 00:23:36.580
so we're just gonna put Sunday here,


00:23:36.580 --> 00:23:38.780
like, oh, why Sunday here?


00:23:38.780 --> 00:23:39.820
This is weird.


00:23:39.820 --> 00:23:41.580
Or you say the function can take a string


00:23:41.580 --> 00:23:44.260
when really it can only take seven strings,


00:23:44.260 --> 00:23:46.140
seven particular values of string.


00:23:46.140 --> 00:23:51.580
You could really clearly communicate that with enums,


00:23:51.580 --> 00:23:53.440
which is quite nice.


00:23:53.440 --> 00:23:59.620
- Yeah, and the use of constants, that's really a win.


00:23:59.620 --> 00:24:04.120
So I'm 100% on board with you on constants.


00:24:04.120 --> 00:24:07.960
All caps, maybe snake case, otherwise,


00:24:07.960 --> 00:24:10.440
underscores, separate them.


00:24:10.440 --> 00:24:13.040
But I have tooling that I work with all the time


00:24:13.040 --> 00:24:16.120
that'll say, oh no, you misnamed this variable.


00:24:16.120 --> 00:24:18.240
Python, you know they want you to use lowercase variables,


00:24:18.240 --> 00:24:19.240
not uppercase variables.


00:24:19.240 --> 00:24:21.600
I'm like, but for constants, they say to use uppercase.


00:24:21.600 --> 00:24:22.480
Why don't you know this?


00:24:22.480 --> 00:24:23.800
It drives me crazy.


00:24:23.800 --> 00:24:26.020
So I was thinking about sort of expanding


00:24:26.020 --> 00:24:27.920
on this a little bit.


00:24:27.920 --> 00:24:32.440
Are you familiar with this, the typing.final?


00:24:32.440 --> 00:24:33.280
When was this added in Create?


00:24:33.280 --> 00:24:35.820
- I recently discovered this, yes.


00:24:35.820 --> 00:24:37.240
Super nice.


00:24:37.240 --> 00:24:40.160
- So it's also, the idea is that it comes along


00:24:40.160 --> 00:24:43.960
and is meant to be used in this scenario


00:24:43.960 --> 00:24:47.360
in addition to what we've already discussed.


00:24:47.360 --> 00:24:50.280
So the example in the Python docs says


00:24:50.280 --> 00:24:53.300
there's a max size, capital max, capital size.


00:24:53.300 --> 00:24:55.960
Instead of just saying it's 9,000,


00:24:55.960 --> 00:25:02.200
you say it's colon final 9000. Now, that means nothing to


00:25:02.200 --> 00:25:06.280
Python. It means nothing. But it means something to type checkers,


00:25:06.280 --> 00:25:12.040
right? So if you have, like my pie or something, and somebody


00:25:12.040 --> 00:25:15.600
tries to change the value of it later, it's going to come at


00:25:15.600 --> 00:25:19.660
least as a linting type of error, if not a full on runtime


00:25:19.660 --> 00:25:22.600
error. So this is something people could leverage to go a


00:25:22.600 --> 00:25:23.600
a little bit further.


00:25:23.600 --> 00:25:29.100
That's super nice type hinting.


00:25:29.100 --> 00:25:34.260
Like as you well paraphrased, it's meaningless to Python.


00:25:34.260 --> 00:25:38.920
But if you now run your checker and at C somewhere in your code


00:25:38.920 --> 00:25:41.220
that you try to overwrite that variable, which


00:25:41.220 --> 00:25:42.300
is perfectly fine, right?


00:25:42.300 --> 00:25:44.580
Because Python doesn't enforce--


00:25:44.580 --> 00:25:46.980
doesn't say anything if you now would assign a new value


00:25:46.980 --> 00:25:47.740
to max size.


00:25:47.740 --> 00:25:48.660
But--


00:25:48.660 --> 00:25:49.500
There is no context.


00:25:49.500 --> 00:25:50.380
--my Python makes up on that final.


00:25:50.380 --> 00:25:51.860
Hey, it was final.


00:25:51.860 --> 00:25:54.500
Shouldn't overwrite that, so super powerful.


00:25:54.500 --> 00:25:56.620
I should use this more.


00:25:56.620 --> 00:26:01.660
>> Yeah. You can say final or I would think preferably final of int.


00:26:01.660 --> 00:26:05.480
So you say what type it actually is in addition to that.


00:26:05.480 --> 00:26:08.860
Now related to this is,


00:26:08.860 --> 00:26:10.780
it's not exactly a magic number,


00:26:10.780 --> 00:26:16.380
but I often find magic numbers appearing in this situation.


00:26:16.380 --> 00:26:18.540
That has to do with,


00:26:18.540 --> 00:26:25.180
I want this thing to have maybe a default value or a value that says clearly communicates.


00:26:25.180 --> 00:26:30.220
I haven't set a value for it, but I want it to be like in this case a number. It still needs to be


00:26:30.220 --> 00:26:35.820
an int. Well, what integer are you going to put there? Zero? Well, zero valid value. Do you want


00:26:35.820 --> 00:26:41.660
it to be falsy? Could it be negative? Which negative values? Then you see weird tests like


00:26:41.660 --> 00:26:46.460
if it's less than zero, like why is it testing that? Well, that means it's not set. Okay,


00:26:46.460 --> 00:26:52.620
That's weird. So another idea that I think comes in that's pretty interesting is the sentinel


00:26:52.620 --> 00:26:59.820
pattern where you come up with a particular number and sort of store that and say this


00:26:59.820 --> 00:27:07.100
number or value something you say if it is this that means it's unset or it's just a weird case


00:27:07.100 --> 00:27:11.180
or it's it's kind of like setting it to none but if that's not going to be a case you can use


00:27:12.620 --> 00:27:15.260
Sometimes none is that thing, right?


00:27:15.260 --> 00:27:17.060
But not always.


00:27:17.060 --> 00:27:17.900
Are you familiar with this?


00:27:17.900 --> 00:27:19.500
Do you do anything like this?


00:27:19.500 --> 00:27:20.940
- I have not really used it.


00:27:20.940 --> 00:27:24.500
So I had to read up on it.


00:27:24.500 --> 00:27:27.580
I think I use none quite a bit,


00:27:27.580 --> 00:27:30.540
but I think the, I mean, that's at least better


00:27:30.540 --> 00:27:34.540
maybe than minus one as defined example at the time.


00:27:34.540 --> 00:27:39.380
But I think this even wins by being more explicit even,


00:27:39.380 --> 00:27:42.060
right, by having an object than to test against.


00:27:42.060 --> 00:27:47.060
- Yeah, so one example of a standard library is


00:27:47.060 --> 00:27:52.100
the config parser has a underscore unset


00:27:52.100 --> 00:27:55.240
as a global variable and that's its sentinel value.


00:27:55.240 --> 00:27:58.460
BZ2 has the underscore sentinel


00:27:58.460 --> 00:28:03.460
to just call out the pattern directly there and so on.


00:28:03.460 --> 00:28:07.500
My favorite one out of this actually is a variation


00:28:07.500 --> 00:28:11.860
is this null object pattern.


00:28:11.860 --> 00:28:16.660
So, null, 'cause it comes earlier in the life cycle


00:28:16.660 --> 00:28:18.340
of languages where null, not none,


00:28:18.340 --> 00:28:22.260
but where a lot of times if you see,


00:28:22.260 --> 00:28:25.300
if this value is none, then we can do a thing,


00:28:25.300 --> 00:28:27.900
otherwise we can do, actually work with it, right?


00:28:27.900 --> 00:28:30.820
And you'll see these tests all over.


00:28:30.820 --> 00:28:36.340
And so this pattern is come up with a sentinel value


00:28:36.340 --> 00:28:41.340
that is not none, but kind of behaves in a no-op way.


00:28:41.340 --> 00:28:45.340
So you could give it a value of a person who is a sentinel


00:28:45.340 --> 00:28:47.340
and it just, if you try to get his name,


00:28:47.340 --> 00:28:48.460
it's just gonna return, I don't know,


00:28:48.460 --> 00:28:50.820
nothing or something like that.


00:28:50.820 --> 00:28:53.460
So you can, if it makes sense in that situation,


00:28:53.460 --> 00:28:56.180
you can remove a lot of these, if thing is none,


00:28:56.180 --> 00:28:58.720
do something else, do something else,


00:28:58.720 --> 00:29:01.280
just globally, which is really nice.


00:29:01.280 --> 00:29:04.860
- So you don't have to do this non-check here.


00:29:04.860 --> 00:29:07.500
So are you saving an if else?


00:29:07.500 --> 00:29:10.180
- Yeah, you're saving cyclomatic complexity.


00:29:10.180 --> 00:29:16.420
saving like branching at the cost of maybe allocating more stuff or or having it possibly


00:29:16.420 --> 00:29:20.980
have this value that doesn't really mean it has a value you know so you got to trade it off and


00:29:20.980 --> 00:29:26.020
figure out what it makes. That's interesting because I think I do the is not quite a bit so


00:29:26.020 --> 00:29:32.340
yeah I do too because sometimes it's kind of hard to deal with that or you don't control it a lot of


00:29:32.340 --> 00:29:37.860
times kind of going back to when I was talking before about the 95 case and I told you about


00:29:37.860 --> 00:29:42.500
this really gnarly bit of code, that's because I'm consuming two other APIs that I have no control


00:29:42.500 --> 00:29:48.100
over and they're junky. They're real junky. So, you know, I've kind of got to like fit it together


00:29:48.100 --> 00:29:52.980
and you don't get a pick whether they use the null object pattern or not. You just got to make it


00:29:52.980 --> 00:29:59.940
work, right? Yeah, that's a good point. Yeah, indeed. All right, so those are all kind of under


00:29:59.940 --> 00:30:04.500
the magic number category, I would say, even though technically some of them are not, like I said,


00:30:04.500 --> 00:30:07.380
but not numbers.


00:30:07.380 --> 00:30:09.620
Next up, this one, honestly, I'll tell you,


00:30:09.620 --> 00:30:12.720
you asked me about my first experiences with Python long ago.


00:30:12.720 --> 00:30:15.540
And this one weirded me out a little bit,


00:30:15.540 --> 00:30:18.540
because it's something I had spent a long time in C, C++,


00:30:18.540 --> 00:30:22.060
C#, trying to just remove and weed out.


00:30:22.060 --> 00:30:23.500
And that's global scope.


00:30:23.500 --> 00:30:26.500
Tell us about this and maybe why to watch out for it.


00:30:26.500 --> 00:30:31.780
Yeah, so if we leave something in global scope,


00:30:31.780 --> 00:30:33.900
for example, we have a global variable,


00:30:33.900 --> 00:30:38.940
and we're pulling that into a function with a global keyword,


00:30:38.940 --> 00:30:40.540
and we're making changes to it.


00:30:40.540 --> 00:30:43.180
Now this function has side effects.


00:30:43.180 --> 00:30:46.940
So you have the stuff that's going in the function,


00:30:46.940 --> 00:30:50.980
but it's also mutating some external object.


00:30:50.980 --> 00:30:52.780
And when you write it, you probably


00:30:52.780 --> 00:30:56.180
are very aware of it because you're doing it,


00:30:56.180 --> 00:30:58.780
but you're going back, and all of a sudden, this


00:30:58.780 --> 00:30:59.540
might bite you.


00:30:59.540 --> 00:31:01.540
It will surprise you.


00:31:01.540 --> 00:31:03.340
Side effects overall are bad.


00:31:03.340 --> 00:31:06.300
And the global scope has that potential


00:31:06.300 --> 00:31:07.740
because it's global scope.


00:31:07.740 --> 00:31:11.780
It's not local scope to some class or function.


00:31:11.780 --> 00:31:16.780
Yeah, basically that it can lead to surprises


00:31:16.780 --> 00:31:18.620
and we don't want surprises in code.


00:31:18.620 --> 00:31:22.740
- Yeah, and it's not an argument you pass to a function.


00:31:22.740 --> 00:31:24.660
It's not a return value from a function.


00:31:24.660 --> 00:31:26.500
You might not even know that that is in play


00:31:26.500 --> 00:31:27.820
as you interact with part of your code,


00:31:27.820 --> 00:31:28.820
but somewhere out there,


00:31:28.820 --> 00:31:32.700
something deep down is reaching up and seeing that value.


00:31:32.700 --> 00:31:36.780
One of the areas where this comes back, where I think maybe


00:31:36.780 --> 00:31:39.540
things might have been different if the people were


00:31:39.540 --> 00:31:42.260
able to see the future 30 years in advance, which I'm not


00:31:42.260 --> 00:31:44.100
expecting they should be able to,


00:31:44.100 --> 00:31:46.380
would be the global interpreter lock itself


00:31:46.380 --> 00:31:49.620
with its global description right there.


00:31:49.620 --> 00:31:53.980
It's first G. Eric Snow did a lot of work


00:31:53.980 --> 00:32:00.860
to try to create a per sub-interpreter lock.


00:32:00.860 --> 00:32:03.820
So it's still a global lock, but global for that sub-interpreter


00:32:03.820 --> 00:32:05.540
and try to share those within processes.


00:32:05.540 --> 00:32:09.100
And I recall I talked about just reworking


00:32:09.100 --> 00:32:11.980
hundreds or thousands of global variables


00:32:11.980 --> 00:32:14.100
so that they were no longer globally shared,


00:32:14.100 --> 00:32:15.460
but were more local.


00:32:15.460 --> 00:32:18.940
And it's this kind of stuff that can grow and really


00:32:18.940 --> 00:32:23.380
makes it hard to go forward and make changes.


00:32:23.380 --> 00:32:24.420
Yeah, interesting.


00:32:24.420 --> 00:32:27.100
I think you have had an episode on the GIL


00:32:27.100 --> 00:32:30.300
and the refactoring, right?


00:32:30.300 --> 00:32:32.380
- Yes, a couple.


00:32:32.380 --> 00:32:36.380
I have not had Sam Gross on for his true Gill-less Python


00:32:36.380 --> 00:32:40.460
work, but he's welcome anytime he wants to come, of course.


00:32:40.460 --> 00:32:41.380
All right, let me see.


00:32:41.380 --> 00:32:43.660
I want to make sure I don't skip anything on my list.


00:32:43.660 --> 00:32:47.580
So let me just throw this out here for you.


00:32:47.580 --> 00:32:51.100
So Global Scope says, look,


00:32:51.100 --> 00:32:53.020
you should avoid having global variables.


00:32:53.020 --> 00:32:54.420
Sometimes you'll need global variables,


00:32:54.420 --> 00:32:56.520
but they shouldn't be the default.


00:32:56.520 --> 00:32:59.460
Is there a way you can pass this down to the thing


00:32:59.460 --> 00:33:02.460
that needs it, not just make it global and shared.


00:33:02.460 --> 00:33:06.380
So minimize what is global, I guess, is one of the things.


00:33:06.380 --> 00:33:11.800
When I first thought of that, well,


00:33:11.800 --> 00:33:16.280
so Python is full of just a bunch of modules and functions


00:33:16.280 --> 00:33:17.620
and the shared state is gonna end up


00:33:17.620 --> 00:33:19.300
in these global variables, and that seems really,


00:33:19.300 --> 00:33:23.580
oh my gosh, but if you look at languages like Java,


00:33:23.580 --> 00:33:27.920
C#, C++, you end up with a lot of static classes.


00:33:29.260 --> 00:33:31.660
just because there's a class namespace


00:33:31.660 --> 00:33:34.060
between your global variable and not,


00:33:34.060 --> 00:33:36.060
they're the same thing.


00:33:36.060 --> 00:33:40.780
And so modules and module-level variables are very...


00:33:40.780 --> 00:33:42.620
I mean, there's something that you don't want to have too many of,


00:33:42.620 --> 00:33:47.500
but they're not as out of whack with the rest of programming


00:33:47.500 --> 00:33:50.060
as I think maybe people might initially see them are.


00:33:50.060 --> 00:33:53.020
There's no real difference between a static class


00:33:53.020 --> 00:33:56.860
and a function and a global variable and a module.


00:33:58.140 --> 00:34:00.340
because they are scoped to that module, right?


00:34:00.340 --> 00:34:02.420
So unless you bring in that module,


00:34:02.420 --> 00:34:04.620
you don't have access to it, you mean?


00:34:04.620 --> 00:34:05.460
- Yeah, exactly.


00:34:05.460 --> 00:34:08.420
And if you have a class and it has one value


00:34:08.420 --> 00:34:10.460
and you have a module has one value,


00:34:10.460 --> 00:34:13.860
it's really semantics on whether they're different.


00:34:13.860 --> 00:34:16.020
So I don't feel like putting them in,


00:34:16.020 --> 00:34:17.900
some languages, maybe things that I go,


00:34:17.900 --> 00:34:19.420
well, we don't have that because we have classes


00:34:19.420 --> 00:34:20.940
and we put stuff in class.


00:34:20.940 --> 00:34:22.700
If they're static classes, so the same thing.


00:34:22.700 --> 00:34:24.980
- Yeah, sometimes what confuses people though


00:34:24.980 --> 00:34:32.660
is having a static method or just a plain function outside of the class. And I've been


00:34:32.660 --> 00:34:40.820
a long-time proponent of just a function, but I did see a Raymond Hettinger talk where he showed


00:34:40.820 --> 00:34:46.180
that if you do now, if you have the static method, so you bring basically the function in the class


00:34:46.180 --> 00:34:54.260
without it handling the instance, it does show it as part of your API. So if you now do a dur on an


00:34:54.260 --> 00:34:57.560
an instance of that class, that static method shows up,


00:34:57.560 --> 00:34:59.940
which I found kind of interesting.


00:34:59.940 --> 00:35:01.460
- That is interesting, yeah.


00:35:01.460 --> 00:35:03.580
I think there's a lot of places where people think,


00:35:03.580 --> 00:35:06.340
I need a static class or something,


00:35:06.340 --> 00:35:08.120
where it could just be a module with functions


00:35:08.120 --> 00:35:09.880
and maybe a global variable or two.


00:35:09.880 --> 00:35:13.820
But if you do have classes, and I guess,


00:35:13.820 --> 00:35:15.500
and you're trying to look what's part of this class,


00:35:15.500 --> 00:35:18.220
then making that, go ahead and bringing that into the class,


00:35:18.220 --> 00:35:20.060
that totally makes sense to me, I can see that.


00:35:20.060 --> 00:35:22.420
I didn't see that, but that makes sense.


00:35:22.420 --> 00:35:23.420
- As a form of grouping.


00:35:23.420 --> 00:35:26.320
But yeah, I'm with you with modules and functions,


00:35:26.320 --> 00:35:28.040
you can get very far.


00:35:28.040 --> 00:35:32.580
- I would say more people err on trying to build up stuff


00:35:32.580 --> 00:35:34.720
into a bunch of classes because they've seen that


00:35:34.720 --> 00:35:37.080
in other languages they're coming from,


00:35:37.080 --> 00:35:39.760
then they don't quite group it right.


00:35:39.760 --> 00:35:43.400
You know, like it's more of not idiomatic code,


00:35:43.400 --> 00:35:45.000
which I guess we're gonna get to as well


00:35:45.000 --> 00:35:46.340
as some of the other stuff.


00:35:46.340 --> 00:35:48.560
So one of the things that we kicked off


00:35:48.560 --> 00:35:49.920
this conversation with is,


00:35:49.920 --> 00:35:53.520
Well, you said we were spoiled.


00:35:53.520 --> 00:35:54.680
I take offense to that.


00:35:54.680 --> 00:35:55.520
I take offense.


00:35:55.520 --> 00:35:57.000
I think it's absolutely fair.


00:35:57.000 --> 00:35:59.960
We are so spoiled with the tools we have these days.


00:35:59.960 --> 00:36:02.920
I remember pre-internet, it was hard programming.


00:36:02.920 --> 00:36:05.600
So pre-web anyway.


00:36:05.600 --> 00:36:08.880
So linters, tools that automatically fix things.


00:36:08.880 --> 00:36:10.720
That's what's next.


00:36:10.720 --> 00:36:11.560
Tell us about those.


00:36:11.560 --> 00:36:15.360
- Yeah, this is really a no-brainer in the times we live.


00:36:15.360 --> 00:36:18.280
And actually, yeah, we're spoiled


00:36:18.280 --> 00:36:22.540
because there was a time I was just manually fixing stuff like eight was giving back.


00:36:22.540 --> 00:36:24.760
Until we got a form.


00:36:24.760 --> 00:36:27.960
There was a time when we would argue about how it should be fixed.


00:36:27.960 --> 00:36:31.220
And we would, this was like a conversation and we'd be like, no, no, no.


00:36:31.220 --> 00:36:33.320
We put the commas here and we spaced it like this.


00:36:33.320 --> 00:36:36.480
It's like, this really how we should spend our day.


00:36:36.480 --> 00:36:41.640
And it was time for somebody to step in and give them, give us some


00:36:41.640 --> 00:36:46.780
defaults because I asked the question on Twitter the other day, like single or


00:36:46.780 --> 00:36:52.260
double quotes and there are like 50 commands and there's really, yeah, people are really


00:36:52.260 --> 00:36:59.740
torn about what the default style should be. But yeah, Flake 8 to be compliant with PEP 8,


00:36:59.740 --> 00:37:06.700
which every Python developer should be. Black for auto-formatting. Mypy to do the type checks,


00:37:06.700 --> 00:37:14.540
right? As we said before, Python doesn't enforce it, so you need a tool for that. Mypy hence.


00:37:14.540 --> 00:37:18.420
And then there's also, Flake 8, for example,


00:37:18.420 --> 00:37:22.460
has a lot of plugins we might go into next.


00:37:22.460 --> 00:37:24.220
But first I want to highlight, you


00:37:24.220 --> 00:37:26.900
want to automate as much as possible.


00:37:26.900 --> 00:37:29.060
And a pre-commit tool is just awesome.


00:37:29.060 --> 00:37:33.820
It's called pre-commit.


00:37:33.820 --> 00:37:37.340
So it's a tool that runs before you try to make a commit.


00:37:37.340 --> 00:37:42.100
So it's a great enforcer locally to not commit


00:37:42.100 --> 00:37:46.140
any code that's not formatted or that has style violations in it.


00:37:46.140 --> 00:37:49.020
Very easy to use, very easy to set up.


00:37:49.020 --> 00:37:51.500
It might take a little bit of work fixing.


00:37:51.500 --> 00:37:56.300
I mean, black auto formatting is automatic, but maybe you need to fix some flake errors.


00:37:56.300 --> 00:38:02.460
But I see that as a little bit of work or a little price to pay with every commit


00:38:02.460 --> 00:38:05.780
to avoid a lot of technical debt over time.


00:38:05.780 --> 00:38:11.020
One of the challenges I see for a lot of these things and linters and testing,


00:38:11.020 --> 00:38:13.560
they're both in this category,


00:38:13.560 --> 00:38:16.280
is different people on the team


00:38:16.280 --> 00:38:18.640
who all work in the same code base


00:38:18.640 --> 00:38:21.240
have very different levels of commitment


00:38:21.240 --> 00:38:25.400
to say writing or running unit tests


00:38:25.400 --> 00:38:29.900
or formatting your code so that it all looks nice and clean


00:38:29.900 --> 00:38:31.500
before they check it in, right?


00:38:31.500 --> 00:38:34.720
I mean, I've had experiences where like,


00:38:34.720 --> 00:38:36.040
oh, the build is broken again.


00:38:36.040 --> 00:38:37.400
It's like, well, why is the build broken again?


00:38:37.400 --> 00:38:39.440
Well, someone checked it in.


00:38:39.440 --> 00:38:40.280
Why didn't they notice?


00:38:40.280 --> 00:38:42.280
because they don't run any of the tools.


00:38:42.280 --> 00:38:43.840
Why do they run the tools?


00:38:43.840 --> 00:38:45.840
Because they don't really want to run the tools.


00:38:45.840 --> 00:38:46.840
Like, OK.


00:38:46.840 --> 00:38:48.480
But we're all in this together.


00:38:48.480 --> 00:38:51.680
Let's see what-- and tools like the pre-commit stuff


00:38:51.680 --> 00:38:54.400
just mean it's just automatic.


00:38:54.400 --> 00:38:56.640
There's not a person to be blamed for saying, well,


00:38:56.640 --> 00:38:57.640
why didn't you run it?


00:38:57.640 --> 00:38:59.840
Or that person makes me run this tool.


00:38:59.840 --> 00:39:02.480
Or there's none of that weird friction.


00:39:02.480 --> 00:39:05.080
It's just like the software said,


00:39:05.080 --> 00:39:07.040
this is what we agreed on, and it's not ready.


00:39:07.040 --> 00:39:10.080
you've got to go format this line


00:39:10.080 --> 00:39:12.920
or it often will just do that itself, right?


00:39:12.920 --> 00:39:15.640
- Yep.


00:39:15.640 --> 00:39:16.480
What's the saying?


00:39:16.480 --> 00:39:18.660
If it's not automated, it is broken.


00:39:18.660 --> 00:39:19.920
(both laughing)


00:39:19.920 --> 00:39:21.080
- That's insane.


00:39:21.080 --> 00:39:24.200
- This is as simple as putting the YAML in place.


00:39:24.200 --> 00:39:25.560
I mean, that's a one-time thing


00:39:25.560 --> 00:39:27.560
and that's committed to a version control.


00:39:27.560 --> 00:39:30.600
So your collaborator, teammate pulls that in,


00:39:30.600 --> 00:39:32.760
you do a pre-commit install,


00:39:32.760 --> 00:39:35.600
it installs the hook locally in your .git folder


00:39:35.600 --> 00:39:36.500
and you're good to go.


00:39:36.500 --> 00:39:38.880
Now all this stuff is enforced.


00:39:38.880 --> 00:39:40.440
You can also do that with get up actions,


00:39:40.440 --> 00:39:43.640
but I think the more you do locally


00:39:43.640 --> 00:39:46.680
at the individual developer level, the better.


00:39:46.680 --> 00:39:49.000
- Right, you could do both, right?


00:39:49.000 --> 00:39:50.200
- Oh yeah.


00:39:50.200 --> 00:39:54.940
- Ideally, none of the malformed code gets checked in


00:39:54.940 --> 00:39:57.360
and then fixed, and then it shows up as a git diff


00:39:57.360 --> 00:39:58.500
and things like that.


00:39:58.500 --> 00:40:03.520
So you could have it on the server just as a safety net,


00:40:03.520 --> 00:40:04.760
who knows how that got checked in,


00:40:04.760 --> 00:40:07.860
but also have as a pre-commit for most cases.


00:40:07.860 --> 00:40:09.000
- Yeah, exactly.


00:40:09.000 --> 00:40:11.800
- All right, let's see next up.


00:40:11.800 --> 00:40:15.220
Narrow exception blocks.


00:40:15.220 --> 00:40:21.300
- Yeah, this is something I see quite a lot


00:40:21.300 --> 00:40:22.840
when I'm reviewing code,


00:40:22.840 --> 00:40:25.680
is these long blocks between the try and accept.


00:40:25.680 --> 00:40:30.140
So 20, 30 lines and my code review command


00:40:30.140 --> 00:40:31.460
is always the same.


00:40:31.460 --> 00:40:34.760
Are all these lines of code susceptible to this exception?


00:40:34.760 --> 00:40:37.120
And of course, often they're not, right?


00:40:37.120 --> 00:40:40.340
So narrow your exception blocks,


00:40:40.340 --> 00:40:42.840
meaning put only code in the try except


00:40:42.840 --> 00:40:46.640
that can actually raise that exception.


00:40:46.640 --> 00:40:51.720
- I think it's good advice.


00:40:51.720 --> 00:40:55.600
I think it doesn't have to be just one try except block


00:40:55.600 --> 00:40:57.100
either for one huge function.


00:40:57.100 --> 00:41:00.720
You could have try except do some stuff,


00:41:00.720 --> 00:41:02.720
try something else if you really need to,


00:41:02.720 --> 00:41:06.260
you can't disambiguate them by exception type.


00:41:06.260 --> 00:41:08.920
But also worth pointing out, I suppose,


00:41:08.920 --> 00:41:13.320
is the except star stuff, which is,


00:41:13.320 --> 00:41:16.060
it's not gonna be Python.


00:41:16.060 --> 00:41:18.840
- Oh, that's new, yeah.


00:41:18.840 --> 00:41:21.120
- Yeah, that's new, and I don't know how to search for it


00:41:21.120 --> 00:41:25.480
'cause it seems like the star, well, whatever,


00:41:25.480 --> 00:41:27.240
I can just describe, but it's really interesting


00:41:27.240 --> 00:41:29.480
because you can catch multiple exceptions.


00:41:29.480 --> 00:41:32.380
And maybe this actually changes the advice a tiny bit.


00:41:32.380 --> 00:41:34.640
You can catch multiple exceptions


00:41:34.640 --> 00:41:35.940
for something going wrong.


00:41:35.940 --> 00:41:39.000
So if you were doing,


00:41:39.000 --> 00:41:40.800
probably only around async, but not just.


00:41:40.800 --> 00:41:42.120
So you could say,


00:41:42.120 --> 00:41:45.480
I'm gonna try to talk to the database and this API.


00:41:45.480 --> 00:41:46.840
And if they both break,


00:41:46.840 --> 00:41:50.120
you know, the accept star will let you catch both


00:41:50.120 --> 00:41:52.520
at two separate executions,


00:41:52.520 --> 00:41:54.680
the database exception and the API exception,


00:41:54.680 --> 00:41:55.840
potentially, right?


00:41:55.840 --> 00:41:57.200
- Right, interesting.


00:41:57.200 --> 00:42:00.080
- Yeah, I think that's new, brand new in 3.11.


00:42:00.080 --> 00:42:02.040
- Yeah, that's a 3.11 thing.


00:42:02.040 --> 00:42:04.920
So it'll be a while till we see that really coming along.


00:42:04.920 --> 00:42:07.700
But one of the places that might be relevant


00:42:07.700 --> 00:42:09.640
is there's cool libraries like Tenacity,


00:42:09.640 --> 00:42:11.560
which say, I wanna call this function,


00:42:11.560 --> 00:42:14.000
and if it fails, just wait and call it again.


00:42:14.000 --> 00:42:16.320
And then try again, and maybe back off


00:42:16.320 --> 00:42:17.760
until too much time has passed,


00:42:17.760 --> 00:42:19.240
or give it a certain number of attempts.


00:42:19.240 --> 00:42:23.160
But if it failed, but it failed differently three times,


00:42:23.160 --> 00:42:24.000
you might wanna know, well,


00:42:24.000 --> 00:42:25.400
what are all the ways in which it failed,


00:42:25.400 --> 00:42:27.400
not just the last or the first, right?


00:42:27.400 --> 00:42:29.200
And with Accept*, you could actually catch


00:42:29.200 --> 00:42:30.640
all of those errors,


00:42:30.640 --> 00:42:32.800
say from like a retry block or something.


00:42:32.800 --> 00:42:34.880
So, I don't know. - Yeah, interesting.


00:42:34.880 --> 00:42:38.360
- It doesn't make this cleaner or simpler to go with,


00:42:38.360 --> 00:42:40.960
it only complicates it, but still the idea


00:42:40.960 --> 00:42:44.640
of like smaller code blocks, I think, good advice there.


00:42:44.640 --> 00:42:46.360
- Yeah, and always name your exceptions, right?


00:42:46.360 --> 00:42:48.680
So sometimes I see try Accept colon,


00:42:48.680 --> 00:42:51.520
and then we're like, what's exception?


00:42:51.520 --> 00:42:54.080
Because that will just catch anything, right?


00:42:54.080 --> 00:42:56.520
So always be explicit in the exception.


00:42:56.520 --> 00:42:58.360
- I think you understand how this works.


00:42:58.360 --> 00:42:59.600
When you put that in there,


00:42:59.600 --> 00:43:01.440
there's no more errors in the code.


00:43:01.440 --> 00:43:02.360
It just keeps running.


00:43:02.360 --> 00:43:03.720
It used to crash.


00:43:03.720 --> 00:43:07.640
And if I put except colon and just keep going,


00:43:07.640 --> 00:43:09.560
way more reliable.


00:43:09.560 --> 00:43:10.400
- Yeah.


00:43:10.400 --> 00:43:13.160
What's the saying in the Zen of Python?


00:43:13.160 --> 00:43:15.360
Errors should not pass silently.


00:43:15.360 --> 00:43:16.200
- Yes, exactly.


00:43:16.200 --> 00:43:17.840
- And explicit is better than implicit.


00:43:17.840 --> 00:43:19.880
- Yeah, I've seen some of this code.


00:43:19.880 --> 00:43:24.880
It's not always bad, but it's usually not good.


00:43:24.880 --> 00:43:30.760
So yeah, couch the exceptions by specific type,


00:43:30.760 --> 00:43:33.960
handle different ones potentially differently and so on.


00:43:33.960 --> 00:43:36.800
And maybe that kind of leads us into number six here,


00:43:36.800 --> 00:43:39.040
more broadly, that's one of the Pythonic


00:43:39.040 --> 00:43:41.000
or idiomatic things of Python, right?


00:43:41.000 --> 00:43:42.880
But there's a whole bunch more.


00:43:42.880 --> 00:43:44.480
That's your next tip.


00:43:44.480 --> 00:43:47.000
- Yeah, this can of course be a whole series of articles


00:43:47.000 --> 00:43:52.760
because there's so much what can be considered idiomatic or not.


00:43:52.760 --> 00:43:57.860
But yeah, there's sometimes you see people reinventing the wheel,


00:43:57.860 --> 00:44:00.800
and they can perfectly well use the standard library.


00:44:00.800 --> 00:44:04.880
There's also a very rich set of built-ins, right?


00:44:04.880 --> 00:44:08.240
Like all any-- and those built-ins.


00:44:08.240 --> 00:44:12.020
But then also style-wise, there's this concept


00:44:12.020 --> 00:44:20.020
of leaping, checking before you leap versus just do something


00:44:20.020 --> 00:44:23.660
and ask for forgiveness rather than permission.


00:44:23.660 --> 00:44:27.660
So for example, code that overly checks if a file exists


00:44:27.660 --> 00:44:29.300
or can be opened.


00:44:29.300 --> 00:44:32.260
So all these conditionals.


00:44:32.260 --> 00:44:34.740
What's often considered more Pythonic


00:44:34.740 --> 00:44:37.380
is to just try open a file, try to do something,


00:44:37.380 --> 00:44:39.740
and then catch the exception.


00:44:39.740 --> 00:44:41.080
So that's why it's called,


00:44:41.080 --> 00:44:45.540
it's easier to ask for forgiveness than permission.


00:44:45.540 --> 00:44:47.020
- Yeah, yes, exactly.


00:44:47.020 --> 00:44:51.620
As opposed to like a C language or something


00:44:51.620 --> 00:44:53.500
where you do six or seven checks


00:44:53.500 --> 00:44:56.020
to make sure everything is set up just right.


00:44:56.020 --> 00:44:57.220
And then, you know,


00:44:57.220 --> 00:45:00.700
I'm gonna check that the file is not just the,


00:45:00.700 --> 00:45:05.360
and that it has a null terminating character.


00:45:05.360 --> 00:45:08.820
Now I'm gonna check that I have access to the files.


00:45:08.820 --> 00:45:11.340
You know, if you go and read a lot of C code,


00:45:11.340 --> 00:45:13.540
there's like check, check, check, check, check, check,


00:45:13.540 --> 00:45:14.460
do the thing.


00:45:14.460 --> 00:45:17.700
And usually that's 'cause there's a page fault


00:45:17.700 --> 00:45:18.860
and the program just goes, whoof,


00:45:18.860 --> 00:45:20.940
and just goes away if you touch it wrong.


00:45:20.940 --> 00:45:23.140
Whereas Python almost always, not always,


00:45:23.140 --> 00:45:25.220
but almost always the result is,


00:45:25.220 --> 00:45:27.380
here's an exception you can catch and handle


00:45:27.380 --> 00:45:29.180
and it tells you what went wrong


00:45:29.180 --> 00:45:30.820
instead of trying to think of all the checks


00:45:30.820 --> 00:45:32.900
'cause there's probably a check you forgot.


00:45:32.900 --> 00:45:34.620
Just give it a shot, right?


00:45:34.620 --> 00:45:35.460
- Right.


00:45:35.460 --> 00:45:38.400
And it's also, it's kind of the positive mindset.


00:45:38.400 --> 00:45:40.120
Like usually it works.


00:45:40.120 --> 00:45:42.680
And if it doesn't work, we deal with the consequences.


00:45:42.680 --> 00:45:44.080
Whereas if you do all these if checks,


00:45:44.080 --> 00:45:48.160
that's code that always runs and might not be necessary.


00:45:48.160 --> 00:45:49.860
So it might even be faster, right?


00:45:49.860 --> 00:45:52.100
- For sure.


00:45:52.100 --> 00:45:53.560
So more of the ideas that came to mind


00:45:53.560 --> 00:45:56.360
when I was reading your idiomatic code section was just


00:45:56.360 --> 00:45:59.880
one use that you did mention this a little bit


00:45:59.880 --> 00:46:02.400
about reinforce it is you said, use a standard library.


00:46:02.400 --> 00:46:04.680
And one of the things I learned from working with you


00:46:04.680 --> 00:46:06.440
is there, you know, sort of,


00:46:06.440 --> 00:46:08.520
I would try to pull another library,


00:46:08.520 --> 00:46:10.520
other things from PyPI or something.


00:46:10.520 --> 00:46:11.920
You're like, look, this is built in, right?


00:46:11.920 --> 00:46:13.400
Just, you know what?


00:46:13.400 --> 00:46:14.960
You're right, that is built in.


00:46:14.960 --> 00:46:16.080
That seems pretty handy, right?


00:46:16.080 --> 00:46:18.640
Like for example, Counter, you know,


00:46:18.640 --> 00:46:20.080
that's definitely one that I use all the time


00:46:20.080 --> 00:46:20.920
because of you.


00:46:20.920 --> 00:46:23.760
Yeah, exactly.


00:46:23.760 --> 00:46:27.000
So embracing what's there,


00:46:27.000 --> 00:46:29.160
instead of maybe getting another library


00:46:29.160 --> 00:46:31.320
or just trying to write that algorithm yourself,


00:46:31.320 --> 00:46:32.840
'cause who knew it existed?


00:46:32.840 --> 00:46:34.800
'Cause I didn't study the standard library enough.


00:46:34.800 --> 00:46:37.080
I just came from C and this is how we do it in C.


00:46:37.080 --> 00:46:38.320
So I'm gonna try to do that here, right?


00:46:38.320 --> 00:46:41.440
Like the enigmatic steps that you can take


00:46:41.440 --> 00:46:45.360
are really good there, but also lambdas


00:46:45.360 --> 00:46:49.060
versus regular functions for like little inline things.


00:46:49.060 --> 00:46:53.680
You mentioned some of the ones that take generators


00:46:53.680 --> 00:46:55.880
for like all and any and these other tests.


00:46:55.880 --> 00:46:58.960
And there's just a lot of cool little language features


00:46:58.960 --> 00:47:01.880
that you'll be glad to use. - Decorators.


00:47:01.880 --> 00:47:03.440
- Yeah, yeah, decorators definitely I would put


00:47:03.440 --> 00:47:05.480
in that space as well.


00:47:05.480 --> 00:47:06.840
- And the with statement,


00:47:06.840 --> 00:47:10.840
context managers to automatically clean up resources.


00:47:10.840 --> 00:47:12.080
Pretty important feature.


00:47:12.080 --> 00:47:16.920
- Another one that is near and dear to my heart,


00:47:16.920 --> 00:47:19.440
your number seven on this list.


00:47:19.440 --> 00:47:22.720
Near to dear because I have suffered badly


00:47:22.720 --> 00:47:25.200
the consequences of choosing wrongly.


00:47:25.200 --> 00:47:26.560
Choose the right data structures.


00:47:26.560 --> 00:47:27.920
Tell us about that.


00:47:27.920 --> 00:47:31.200
- Yeah, this is very important for performance, right?


00:47:31.200 --> 00:47:34.320
So where you kind of need to understand


00:47:34.320 --> 00:47:35.640
just the fundamentals here, right?


00:47:35.640 --> 00:47:38.560
Like list versus sets and dictionaries


00:47:38.560 --> 00:47:40.040
and how to perform.


00:47:40.040 --> 00:47:41.880
For example, if you're very big collection


00:47:41.880 --> 00:47:46.000
of a million items and you would leave that as a list,


00:47:46.000 --> 00:47:47.820
yet you want to do searches or lookups,


00:47:47.820 --> 00:47:51.160
then how this works is they traverse them item by item,


00:47:51.160 --> 00:47:52.000
right?


00:47:52.000 --> 00:47:54.020
Where if you'd make that a set,


00:47:54.020 --> 00:47:57.640
it's now in big O notation, O1,


00:47:57.640 --> 00:47:59.440
because there's hashing going on.


00:47:59.440 --> 00:48:02.100
So it can immediately find the value


00:48:02.100 --> 00:48:04.980
because they're hashed, right?


00:48:04.980 --> 00:48:08.900
So that's a small, well, a pretty fundamental example


00:48:08.900 --> 00:48:11.180
because we work with lists and sets


00:48:11.180 --> 00:48:12.700
and dictionaries all the time,


00:48:12.700 --> 00:48:16.000
but those are very important to know.


00:48:16.000 --> 00:48:17.740
- They are.


00:48:17.740 --> 00:48:20.500
The dictionary in the set one


00:48:20.500 --> 00:48:22.540
just can't emphasize that enough.


00:48:22.540 --> 00:48:25.340
I mean, obviously we use dictionaries so much,


00:48:25.340 --> 00:48:27.020
but if you've got a list,


00:48:27.020 --> 00:48:29.620
but you think you might need to look up stuff in that list


00:48:29.620 --> 00:48:32.300
based on, say if it's a list of objects,


00:48:32.300 --> 00:48:34.740
some field of that object.


00:48:34.740 --> 00:48:36.200
If you were to make that a dictionary,


00:48:36.200 --> 00:48:37.340
make the key the field,


00:48:37.340 --> 00:48:42.340
and it's not a little bit faster.


00:48:42.340 --> 00:48:45.140
It's unbelievably faster.


00:48:45.140 --> 00:48:48.060
My mind just never ceases to be amazed.


00:48:48.060 --> 00:48:49.260
Like, you know what?


00:48:49.260 --> 00:48:51.820
It really, it went through a million items that fast,


00:48:51.820 --> 00:48:53.660
like instantly, right?


00:48:53.660 --> 00:48:55.580
It's so different.


00:48:55.580 --> 00:48:57.020
Or if you see people writing code,


00:48:57.020 --> 00:48:58.860
here's some more of the idiomatic stuff is,


00:48:58.860 --> 00:49:00.020
I'm looping over a thing,


00:49:00.020 --> 00:49:02.300
I want to build up this list of them,


00:49:02.300 --> 00:49:03.220
but I want duplicates.


00:49:03.220 --> 00:49:04.940
You might see it, if this thing is not,


00:49:04.940 --> 00:49:06.700
you know, look in the list for it,


00:49:06.700 --> 00:49:09.380
then you can add it, like just don't do that.


00:49:09.380 --> 00:49:11.180
Just make a set and just jam it in there


00:49:11.180 --> 00:49:13.380
and it'll reject duplicates, right?


00:49:13.380 --> 00:49:16.740
Like there's a lot of things where this ties back


00:49:16.740 --> 00:49:18.720
to your idiomatic one as well.


00:49:18.720 --> 00:49:21.460
- Yeah, another one I highlight there are decks, right?


00:49:21.460 --> 00:49:23.340
So when you do inserts and deletes


00:49:23.340 --> 00:49:31.020
both ends of a sequence. That's also generally slow with a list for the same reason, because


00:49:31.020 --> 00:49:39.580
as the search example is that it needs to remap values massively, and a deck is designed to


00:49:39.580 --> 00:49:46.540
do that fast on both ends. So anytime I need to, if it's a big collection and I need to insert stuff


00:49:46.540 --> 00:49:51.740
on at the start, then a deck from the collections module is a better choice.


00:49:53.100 --> 00:49:57.260
Yeah, absolutely. Another thing I guess, giving a little quick shout out here is the default dict


00:49:57.260 --> 00:50:03.580
is really nice too. Oh yeah. For removing tests and checks and initialize just.


00:50:03.580 --> 00:50:08.940
Because you don't have to check if a key is in the dictionary, you can just assume it's there.


00:50:08.940 --> 00:50:14.300
And then that yeah, that leads, you can ditch a whole bunch of if statements.


00:50:14.300 --> 00:50:17.740
Yep, exactly. It's the job of the dictionary, not your job now.


00:50:18.540 --> 00:50:20.460
Yeah, nice.


00:50:20.460 --> 00:50:21.580
All right, let me see.


00:50:21.580 --> 00:50:23.780
Do I have any others that I want to squeeze in here?


00:50:23.780 --> 00:50:28.580
OK, so here's one that I wanted to sneak in before we


00:50:28.580 --> 00:50:30.940
get further beyond this.


00:50:30.940 --> 00:50:33.380
And where's that?


00:50:33.380 --> 00:50:34.700
This one?


00:50:34.700 --> 00:50:36.660
No.


00:50:36.660 --> 00:50:37.740
I don't think I pulled up.


00:50:37.740 --> 00:50:48.140
Let me-- I'm not sure why I don't have it pulled up yet.


00:50:48.140 --> 00:50:55.500
is to use guarding clauses. And so often what I'll see, especially


00:50:55.500 --> 00:50:57.980
when people are new is look writing code that looks like


00:50:57.980 --> 00:51:02.460
this. It's like, it looks to me like a saw the lumberjack would


00:51:02.460 --> 00:51:05.580
use or something. There's like, zip, zip, zip out, and then back


00:51:05.580 --> 00:51:09.180
and then out and then back. And you're like, Whoa, you know,


00:51:09.180 --> 00:51:12.980
it's usually like it starts in the middle of the editor window


00:51:12.980 --> 00:51:16.900
and it goes to the right. You're like, this is, you know, it's,


00:51:16.940 --> 00:51:20.180
It's usually if some case and then if some other case,


00:51:20.180 --> 00:51:22.740
maybe do a little step, then if another case.


00:51:22.740 --> 00:51:27.740
And it's like assuming that it's got to build up


00:51:27.740 --> 00:51:31.940
a bunch of these steps before it can sort of go down


00:51:31.940 --> 00:51:32.780
the happy path.


00:51:32.780 --> 00:51:35.220
So it's gonna check everything that could possibly go wrong


00:51:35.220 --> 00:51:37.380
before it tries to do that.


00:51:37.380 --> 00:51:39.660
And I don't know how you feel about guarding clauses.


00:51:39.660 --> 00:51:41.500
I love guarding clauses. - I love it.


00:51:41.500 --> 00:51:42.340
- Yeah, you do?


00:51:42.340 --> 00:51:44.680
So tell people about this sort of alternative.


00:51:44.680 --> 00:51:46.780
It's so simple, but it makes such a difference.


00:51:46.780 --> 00:51:47.380
Yeah.


00:51:47.380 --> 00:51:49.420
It goes back to the Zen of Python again.


00:51:49.420 --> 00:51:51.380
Um, flat is better than nested.


00:51:51.380 --> 00:51:57.500
So nested deeply nested code is just inherently, it's more complex.


00:51:57.500 --> 00:52:00.400
Hence harder to, to maintain.


00:52:00.400 --> 00:52:03.980
Um, yeah, it's, it's called the, arrow arrow shape.


00:52:03.980 --> 00:52:07.920
I learned from this article that it's also called the staircase, which is nice.


00:52:07.920 --> 00:52:11.500
Um, but yeah, you can, if you look up our arrow shape,


00:52:11.500 --> 00:52:12.840
that explains more about it.


00:52:13.280 --> 00:52:17.480
But yeah, it's just more complex because, yeah, it's, again,


00:52:17.480 --> 00:52:19.120
that cyclomatic complexity, right,


00:52:19.120 --> 00:52:22.800
the amount of paths you have through your code.


00:52:22.800 --> 00:52:25.360
And if you, in this case, reverse all these statements


00:52:25.360 --> 00:52:28.840
and early return, the code is now way flatter.


00:52:28.840 --> 00:52:32.640
It's easier to read and less complex.


00:52:32.640 --> 00:52:35.520
So this code looks really reasonable.


00:52:35.520 --> 00:52:39.800
And yeah, the other is just very hard to follow.


00:52:39.800 --> 00:52:40.640
You don't even know.


00:52:40.640 --> 00:52:42.920
And there's all these weird interplays of, like, well,


00:52:42.920 --> 00:52:47.240
if this is true but that's false and could you actually get into that if case whereas


00:52:47.240 --> 00:52:52.520
these guarding clauses just say if this is wrong bail out of this function if this


00:52:52.520 --> 00:52:58.280
game over yeah like return false or don't do the thing or whatever and then eventually once you've


00:52:58.280 --> 00:53:03.800
hit all those with very little indentation then you have the thing you wanted to get to and that


00:53:03.800 --> 00:53:09.240
it also kind of makes them a little bit unrelated to each other unlike the super nested style


00:53:09.960 --> 00:53:12.600
- Yeah, I guess, yeah, the cyclomatic complexity, right?


00:53:12.600 --> 00:53:16.200
The amount of combinations you can have with this is less,


00:53:16.200 --> 00:53:20.400
hence it's less complex, hence it's easier to maintain.


00:53:20.400 --> 00:53:23.200
And readability here is way better.


00:53:23.200 --> 00:53:24.480
- Yeah, I totally agree.


00:53:24.480 --> 00:53:27.720
So when you see things like flat is better than nested


00:53:27.720 --> 00:53:30.120
in the Zen of Python, you're like, cool,


00:53:30.120 --> 00:53:32.600
but I got to test some stuff, so it's getting nested.


00:53:32.600 --> 00:53:34.680
Right, like it's, I just,


00:53:34.680 --> 00:53:37.760
there's nothing in that statement that it tells you,


00:53:37.760 --> 00:53:41.400
what are the mechanics that you consider to avoid that?


00:53:41.400 --> 00:53:42.800
Right, it's just, well, it's complicated.


00:53:42.800 --> 00:53:44.240
I'm sorry, it's gonna be nested, right?


00:53:44.240 --> 00:53:46.280
It would be better if it weren't, but it is.


00:53:46.280 --> 00:53:47.800
Well, not actually, like guarding clauses


00:53:47.800 --> 00:53:50.960
almost always will lessen it,


00:53:50.960 --> 00:53:53.240
if not really, really decrease it.


00:53:53.240 --> 00:53:54.280
- Yeah, that's a good point.


00:53:54.280 --> 00:53:58.260
Like the Zen tells you the what, but not necessarily the how.


00:53:58.260 --> 00:54:01.640
And the guard clauses, this is a particular technique.


00:54:01.640 --> 00:54:05.080
Another one in refactoring is the extract method refactoring.


00:54:05.080 --> 00:54:06.820
And that's where we pull out a bunch of code


00:54:06.820 --> 00:54:10.020
into a new function, which also often leads


00:54:10.020 --> 00:54:12.120
to less nested code.


00:54:12.120 --> 00:54:12.960
- Indeed.


00:54:12.960 --> 00:54:14.520
Is that your next one, refactoring?


00:54:14.520 --> 00:54:16.360
- Could be.


00:54:16.360 --> 00:54:17.540
(both laughing)


00:54:17.540 --> 00:54:19.420
- I think that was a bonus.


00:54:19.420 --> 00:54:20.260
- That's right.


00:54:20.260 --> 00:54:21.420
It was a bonus here at the end.


00:54:21.420 --> 00:54:22.300
Absolutely.


00:54:22.300 --> 00:54:23.900
So that's where you can give a shout out


00:54:23.900 --> 00:54:25.100
to the refactoring book,


00:54:25.100 --> 00:54:28.920
which also had those code smells in them.


00:54:28.920 --> 00:54:30.860
- Totally, yeah.


00:54:30.860 --> 00:54:32.240
- Do you still recommend people read that?


00:54:32.240 --> 00:54:35.980
I mean, I read it with bated breath in 1999


00:54:35.980 --> 00:54:37.080
or whenever that thing came out,


00:54:37.080 --> 00:54:38.920
it was really an important book.


00:54:38.920 --> 00:54:41.000
And I'm like, this has changed everything.


00:54:41.000 --> 00:54:43.680
But you know, that's 2025 years ago,


00:54:43.680 --> 00:54:46.320
something like that, when it actually came out.


00:54:46.320 --> 00:54:48.300
- Yeah, that's a good point.


00:54:48.300 --> 00:54:50.520
I think the tooling has improved,


00:54:50.520 --> 00:54:52.000
but still I think conceptually,


00:54:52.000 --> 00:54:53.600
this is still an important book.


00:54:53.600 --> 00:54:57.200
I was reading parts of it again.


00:54:57.200 --> 00:55:01.440
Honestly, I do like the first edition a bit better sometimes


00:55:01.440 --> 00:55:05.360
because it uses Java, where it just uses JavaScript


00:55:05.360 --> 00:55:13.760
And I don't know the quality, but I think I would, I might actually prefer the Java or the JavaScript to be honest.


00:55:13.760 --> 00:55:16.120
But it's very fundamental stuff.


00:55:16.120 --> 00:55:20.560
And, yeah, it still has, it's also nice.


00:55:20.560 --> 00:55:23.360
That's a catalog, so you don't have to read it end to end.


00:55:23.360 --> 00:55:27.520
You can just zoom into parts that are relevant for you at that moment.


00:55:27.520 --> 00:55:30.040
So yeah, it's a collection of things.


00:55:30.040 --> 00:55:31.160
Yeah.


00:55:31.160 --> 00:55:31.520
Yeah.


00:55:31.520 --> 00:55:32.400
Okay.


00:55:32.400 --> 00:55:33.400
Very interesting.


00:55:33.680 --> 00:55:39.520
So I guess another one, I don't remember if it was directly in your article.


00:55:39.520 --> 00:55:40.160
I don't think so.


00:55:40.160 --> 00:55:45.000
It was just sort of implied throughout was, you know, embrace refactoring.


00:55:45.000 --> 00:55:51.000
You opened the, with alluding to this at the beginning of this conversation is I


00:55:51.000 --> 00:55:56.520
see a lot of people who get stuck thinking about, I've got to get this right.


00:55:56.520 --> 00:55:58.880
I know if I start wrong, I'm going to hate it.


00:55:58.880 --> 00:56:00.640
It's going to be hard to work on.


00:56:00.640 --> 00:56:02.180
It's going to be so bad.


00:56:02.180 --> 00:56:06.740
And so I got to sit here and think for like two weeks to get started on this project.


00:56:06.740 --> 00:56:07.740
So I get it right.


00:56:07.740 --> 00:56:09.900
You know what you could also do?


00:56:09.900 --> 00:56:12.620
Just pick one way that seems right at the time.


00:56:12.620 --> 00:56:13.620
Spend a week on it.


00:56:13.620 --> 00:56:17.100
If it's not working, it'll refactor to the other or even throw it away and go the other


00:56:17.100 --> 00:56:18.100
option.


00:56:18.100 --> 00:56:19.100
Right?


00:56:19.100 --> 00:56:20.860
Like there's a lot of people kind of stuck.


00:56:20.860 --> 00:56:26.020
And I think embracing the idea of refactoring, maybe not in the traditional by hand effect


00:56:26.020 --> 00:56:28.300
of Martin Fowler's original book,


00:56:28.300 --> 00:56:33.220
but we have tools that do a lot of this automatically


00:56:33.220 --> 00:56:35.780
or almost automatically, right-click and ask it to.


00:56:35.780 --> 00:56:38.660
So what are your thoughts?


00:56:38.660 --> 00:56:42.100
I definitely think people should at least catch the zen


00:56:42.100 --> 00:56:44.480
of it, if not go through the book


00:56:44.480 --> 00:56:46.380
'cause the tools will take care of it.


00:56:46.380 --> 00:56:50.660
- Yeah, you still wanna know the concepts here,


00:56:50.660 --> 00:56:52.860
the different techniques as I already highlighted,


00:56:52.860 --> 00:56:54.840
the extract method, for example,


00:56:55.860 --> 00:56:59.220
grouping constants into enums we have mentioned before.


00:56:59.220 --> 00:57:01.980
So a lot of actually what we've spoken about so far


00:57:01.980 --> 00:57:05.980
can be found in this book as well.


00:57:05.980 --> 00:57:10.120
And I think overall the goal of refactoring


00:57:10.120 --> 00:57:14.380
is to keep that technical depth in check.


00:57:14.380 --> 00:57:18.660
So avoid software rot, they also say.


00:57:18.660 --> 00:57:22.860
And yeah, as you start to add more code


00:57:22.860 --> 00:57:27.380
and cover more scenarios and the always changing


00:57:27.380 --> 00:57:29.600
requirements inevitably what happens.


00:57:29.600 --> 00:57:33.820
- You just learn, you thought it was one thing,


00:57:33.820 --> 00:57:35.220
but as you got further into it, you're like,


00:57:35.220 --> 00:57:36.700
you know, that part is actually,


00:57:36.700 --> 00:57:37.740
that's where the problem is.


00:57:37.740 --> 00:57:39.820
I didn't think so, but now I know,


00:57:39.820 --> 00:57:41.380
'cause that's where it's hard, right?


00:57:41.380 --> 00:57:43.300
- Which you only learn as you go, right?


00:57:43.300 --> 00:57:44.140
Yeah, that's a good point.


00:57:44.140 --> 00:57:45.620
- But the people who are stuck,


00:57:45.620 --> 00:57:47.180
I don't think they internalize that,


00:57:47.180 --> 00:57:49.660
like the only way to know where you're gonna get stuck


00:57:49.660 --> 00:57:51.940
further down the road is to go down the road.


00:57:51.940 --> 00:57:54.980
You can't think about it very well.


00:57:54.980 --> 00:57:58.720
There are a couple of interesting comments here.


00:57:58.720 --> 00:58:00.020
With respect to guarding clauses,


00:58:00.020 --> 00:58:03.280
Alvaro says, you could go and put search statements


00:58:03.280 --> 00:58:04.980
at the beginning of functions to indicate


00:58:04.980 --> 00:58:07.980
some of the assumptions that could be disabled in production


00:58:07.980 --> 00:58:11.060
and give nice errors on pytest.


00:58:11.060 --> 00:58:14.380
So pytest, rather.


00:58:14.380 --> 00:58:16.180
Yeah, possible.


00:58:16.180 --> 00:58:17.620
What do you think, Bob?


00:58:17.620 --> 00:58:19.260
Yeah, asserts are great.


00:58:19.260 --> 00:58:22.460
But yeah, I'm happy that you highlight the caveat


00:58:22.460 --> 00:58:26.500
that they can be disabled, so you cannot always rely on them.


00:58:26.500 --> 00:58:30.380
But yeah, I definitely see a place for asserts.


00:58:30.380 --> 00:58:32.860
And of course, you use them in pytest all the time


00:58:32.860 --> 00:58:37.100
to assert different ways your function performs.


00:58:37.100 --> 00:58:37.780
Yeah.


00:58:37.780 --> 00:58:38.340
Yeah, yeah.


00:58:38.340 --> 00:58:41.420
So I use most my asserts in pytest.


00:58:41.420 --> 00:58:42.140
Yeah.


00:58:42.140 --> 00:58:46.100
But I can definitely see a place for this scenario


00:58:46.100 --> 00:58:48.580
that Alvaro highlights.


00:58:48.580 --> 00:58:51.820
And then Brendan at Lottie has a very realistic problem


00:58:51.820 --> 00:58:54.640
that people run into is, I worked a lot of places


00:58:54.640 --> 00:58:57.820
where they don't give you the time to do the refactoring


00:58:57.820 --> 00:58:58.740
and make things better.


00:58:58.740 --> 00:59:04.020
And so it just builds up until it becomes not ideal,


00:59:04.020 --> 00:59:08.300
as his second comment here implies.


00:59:08.300 --> 00:59:08.800
So--


00:59:08.800 --> 00:59:09.700
>>That's a good point.


00:59:09.700 --> 00:59:10.900
>>That is a real problem.


00:59:10.900 --> 00:59:12.780
And I'll tell you how I solved it.


00:59:12.780 --> 00:59:14.420
Bob, maybe we're getting short on time,


00:59:14.420 --> 00:59:17.580
but you can tell me real quick how you solved it.


00:59:17.580 --> 00:59:23.040
For me, when my managers and folks would say,


00:59:23.040 --> 00:59:24.280
Michael, what is your estimate


00:59:24.280 --> 00:59:25.880
for how long this is gonna take?


00:59:25.880 --> 00:59:28.300
If I thought it was gonna take five hours,


00:59:28.300 --> 00:59:31.040
but maybe I would need to do an hour or two of refactoring,


00:59:31.040 --> 00:59:33.060
this feature took seven hours.


00:59:33.060 --> 00:59:35.720
Like, you want it done, it's gonna take seven hours.


00:59:35.720 --> 00:59:37.840
Because if I'm gonna do it, I'm gonna do it right,


00:59:37.840 --> 00:59:39.800
'cause I'm gonna have to work on it afterwards,


00:59:39.800 --> 00:59:42.220
and I know it's just gonna get worse if I...


00:59:42.220 --> 00:59:43.840
So I wouldn't exactly lie to them,


00:59:43.840 --> 00:59:47.040
but I would, I would include the time to make it right.


00:59:47.040 --> 00:59:48.940
Not just make it work.


00:59:48.940 --> 00:59:51.580
As maybe even double it, right.


00:59:51.580 --> 00:59:55.960
Because, there's the initial version and there's the testing, there's the


00:59:55.960 --> 00:59:59.340
documentation, there are, bug fixes there.


00:59:59.340 --> 01:00:03.840
Inevitably our requirement changes, in the sprint meetings.


01:00:03.840 --> 01:00:09.620
So it might, five hours might just be that initial draft almost, but


01:00:09.620 --> 01:00:10.960
maybe it should then be 10 hours.


01:00:10.960 --> 01:00:11.320
Yeah.


01:00:11.320 --> 01:00:11.680
Yeah.


01:00:11.680 --> 01:00:12.240
Perhaps.


01:00:12.600 --> 01:00:19.000
But whatever it is, clean code should be part of the deliverable, in my opinion.


01:00:19.000 --> 01:00:21.000
And it should be part of the estimate.


01:00:21.000 --> 01:00:23.000
>> I was going to say, estimate times three plus two weeks.


01:00:23.000 --> 01:00:24.500
That's a nice one.


01:00:24.500 --> 01:00:25.600
>> Exactly.


01:00:25.600 --> 01:00:27.000
That is a good one.


01:00:27.000 --> 01:00:27.700
Very good.


01:00:27.700 --> 01:00:28.400
All right.


01:00:28.400 --> 01:00:30.900
Well, we're getting short on time here.


01:00:30.900 --> 01:00:34.700
Let me do some -- I want to do some of this kind of different bomb,


01:00:34.700 --> 01:00:41.500
because I think this is actually -- let me share everything here.


01:00:41.500 --> 01:00:45.460
I think that this is something people are going to have to start thinking about as well


01:00:45.460 --> 01:00:47.420
as maybe an option here.


01:00:47.420 --> 01:00:59.820
So what about asking AI assistants, things like Google Copilot or Chat GP?


01:00:59.820 --> 01:01:03.420
I think there might be some cases where people say, "Here's my code.


01:01:03.420 --> 01:01:04.860
Hey, thing, could you make it better?"


01:01:04.860 --> 01:01:08.780
So for example, let's do this to close out the show, okay, Bob?


01:01:08.780 --> 01:01:12.460
How can we write clean code in Python?


01:01:12.460 --> 01:01:14.140
I'm gonna ask chat GP.


01:01:14.140 --> 01:01:19.140
We have already covered this.


01:01:19.140 --> 01:01:22.100
- Are we sharing?


01:01:22.100 --> 01:01:23.100
All right.


01:01:23.100 --> 01:01:24.060
- Oh, hold on.


01:01:24.060 --> 01:01:24.900
I thought so.


01:01:24.900 --> 01:01:25.820
I did, I forgot to add a stream.


01:01:25.820 --> 01:01:27.960
So I'm gonna ask chat GP here.


01:01:27.960 --> 01:01:30.620
And what else does it say?


01:01:30.620 --> 01:01:32.520
So I gave it all of your tips and I said,


01:01:32.520 --> 01:01:33.420
we already discussed that.


01:01:33.420 --> 01:01:34.900
What else can we do?


01:01:34.900 --> 01:01:37.160
- Is it based in the article as well?


01:01:37.160 --> 01:01:38.140
- No, I didn't give it the article.


01:01:38.140 --> 01:01:40.480
just the headings.


01:01:40.480 --> 01:01:42.220
So it says you can document your code,


01:01:42.220 --> 01:01:43.900
keep it simple, which it didn't understand,


01:01:43.900 --> 01:01:45.080
follow PEP 8.


01:01:45.080 --> 01:01:48.140
This is an interesting one.


01:01:48.140 --> 01:01:49.620
Exceptions are for error handling.


01:01:49.620 --> 01:01:51.620
So anyway, I just thought it might be kind of fun


01:01:51.620 --> 01:01:53.660
to think about, you know,


01:01:53.660 --> 01:01:56.780
could we ask these things to help us and improve our code?


01:01:56.780 --> 01:01:59.060
I don't know if you played with any of this, but it.


01:01:59.060 --> 01:02:02.140
- I have not yet.


01:02:02.140 --> 01:02:03.780
That's Julian's department.


01:02:03.780 --> 01:02:07.740
He's geeking out over the tool, but I'm...


01:02:07.740 --> 01:02:10.200
I have it on my, high on my list to try it out


01:02:10.200 --> 01:02:15.200
because it's really mind blowing what this tool is doing.


01:02:15.200 --> 01:02:16.160
Yeah.


01:02:16.160 --> 01:02:17.000
- It is.


01:02:17.000 --> 01:02:21.480
I, you know, I had a program that I wrote


01:02:21.480 --> 01:02:24.280
and just see if I can go to,


01:02:24.280 --> 01:02:28.920
I'll just grab some random gist here on GitHub.


01:02:28.920 --> 01:02:29.760
Let's see.


01:02:29.760 --> 01:02:35.480
Here we go.


01:02:35.480 --> 01:02:36.300
We'll grab this one.


01:02:36.300 --> 01:02:41.580
So you can take these things, this random code,


01:02:41.580 --> 01:02:48.780
and say things like, here's a Python program.


01:02:48.780 --> 01:02:54.020
How can I make it more readable?


01:02:54.020 --> 01:02:56.380
And you can give it this long thing.


01:02:56.380 --> 01:02:59.500
And it'll say, look, there are no doc strings.


01:02:59.500 --> 01:03:01.660
There's some places where you had meaningful variables


01:03:01.660 --> 01:03:03.340
are missing.


01:03:03.340 --> 01:03:05.620
You could have grouped the imports better.


01:03:05.620 --> 01:03:09.180
could add more type hints, and then it rewrites it.


01:03:09.180 --> 01:03:13.540
So for example, this is my code to integrate with turnstile.


01:03:13.540 --> 01:03:16.860
And so you see it putting type hints and stuff as it goes.


01:03:16.860 --> 01:03:17.900
Typing there, yeah.


01:03:17.900 --> 01:03:18.900
Yeah, yeah, yeah.


01:03:18.900 --> 01:03:20.140
So anyway, I don't know.


01:03:20.140 --> 01:03:24.020
I feel like this is-- as much as looking back 25 years


01:03:24.020 --> 01:03:27.140
and seeing refactoring go, that's seminal,


01:03:27.140 --> 01:03:30.380
maybe this kind of stuff is going


01:03:30.380 --> 01:03:35.500
to have to be something that we take into consideration


01:03:35.500 --> 01:03:37.180
going forward.


01:03:37.180 --> 01:03:39.460
- Yeah, wow, pretty impressive.


01:03:39.460 --> 01:03:40.740
- Yeah, we will see, we will see.


01:03:40.740 --> 01:03:44.860
So anyway, that was fun, but let's close it out.


01:03:44.860 --> 01:03:47.380
- Yeah.


01:03:47.380 --> 01:03:48.340
- Excellent work.


01:03:48.340 --> 01:03:51.140
I mean, I feel like we only just touched the surface, right?


01:03:51.140 --> 01:03:52.820
This could go on and on.


01:03:52.820 --> 01:03:55.060
JF out in the audience asked about unit testing


01:03:55.060 --> 01:03:57.780
and we barely touched on that.


01:03:57.780 --> 01:04:01.100
So, but there's a bunch of more areas,


01:04:01.100 --> 01:04:05.180
but I think we're out of time.


01:04:05.180 --> 01:04:06.020
- Yeah, I mean, it's a whole field.


01:04:06.020 --> 01:04:08.500
- This stuff is coming up in your world, I can see.


01:04:08.500 --> 01:04:11.580
- Thousand page or books have been written about this.


01:04:11.580 --> 01:04:12.620
It's a whole field.


01:04:12.620 --> 01:04:17.040
So yeah, we mentioned a couple of important things, I think.


01:04:17.040 --> 01:04:19.900
- Yeah, we sure did.


01:04:19.900 --> 01:04:22.460
Well, it's certainly a lot of things that people can take


01:04:22.460 --> 01:04:23.820
and they do sound simple, like,


01:04:23.820 --> 01:04:27.340
well, write smaller programs and give them good names


01:04:27.340 --> 01:04:29.060
or write smaller parts of your program


01:04:29.060 --> 01:04:29.880
and give it good names.


01:04:29.880 --> 01:04:33.540
But that it's like a never ending journey to do that right


01:04:33.540 --> 01:04:35.340
and to keep on it, right?


01:04:35.340 --> 01:04:36.180
So I think-


01:04:36.180 --> 01:04:38.260
- There's a lot of nuance as well, right?


01:04:38.260 --> 01:04:40.260
- There is, absolutely.


01:04:40.260 --> 01:04:44.220
All right, well, quick two final questions


01:04:44.220 --> 01:04:45.780
before you get out of here.


01:04:45.780 --> 01:04:48.520
You're gonna write some clean Python code.


01:04:48.520 --> 01:04:51.280
What editor would you use these days?


01:04:51.280 --> 01:04:57.420
- Well, the coaches, the team almost had me on VS Code


01:04:57.420 --> 01:05:00.540
which is an amazing idea,


01:05:00.540 --> 01:05:04.580
But it was not as super fast, of course.


01:05:04.580 --> 01:05:07.780
But for me, for my workflow, it was not as fast as Vim.


01:05:07.780 --> 01:05:11.100
So I stuck with Vim, and I do everything.


01:05:11.100 --> 01:05:13.700
It's just the setup, right, with all the plugins


01:05:13.700 --> 01:05:17.540
and shortcuts, and it makes me fast.


01:05:17.540 --> 01:05:19.180
And it's very hard to change.


01:05:19.180 --> 01:05:21.660
- Yeah, it's one of those things where,


01:05:21.660 --> 01:05:23.220
you know, you could change to something potentially,


01:05:23.220 --> 01:05:26.660
but how long are you gonna be in a degraded state


01:05:26.660 --> 01:05:30.380
of working before you gain enough experience?


01:05:30.380 --> 01:05:31.920
And will it actually be that much better?


01:05:31.920 --> 01:05:33.700
You know, there's a lot to it, right?


01:05:33.700 --> 01:05:36.380
- And once the tool introduces a mouse


01:05:36.380 --> 01:05:38.800
and I have the other option of only using a keyboard


01:05:38.800 --> 01:05:40.980
then it's still the keyword.


01:05:40.980 --> 01:05:42.440
- Yeah, for sure.


01:05:42.440 --> 01:05:45.700
Okay, and the notable PyPI package come across lately?


01:05:45.700 --> 01:05:49.460
- Yeah, this is such a hard question.


01:05:49.460 --> 01:05:52.460
I think I've mentioned requests in the past.


01:05:52.460 --> 01:05:55.300
These days there's HTTPX


01:05:55.300 --> 01:05:59.320
because we're using a lot of code to consume APIs


01:05:59.320 --> 01:06:01.440
and now you can do that synchronously.


01:06:01.440 --> 01:06:05.400
But now maybe the shout is really for Sebastian Ramirez,


01:06:05.400 --> 01:06:07.360
SQL model, FastAPI, Typer.


01:06:07.360 --> 01:06:13.440
Apart from amazing tools, the documentation,


01:06:13.440 --> 01:06:14.400
it's so pleasant.


01:06:14.400 --> 01:06:17.920
I keep going back and because I teach those tools as well,


01:06:17.920 --> 01:06:19.320
right, to other developers,


01:06:19.320 --> 01:06:22.360
I can just teach them from the documentation.


01:06:22.360 --> 01:06:25.360
It's really good with solid code samples.


01:06:25.360 --> 01:06:29.200
So yeah, FastAPI, I guess it is then.


01:06:29.200 --> 01:06:32.160
- Right on, and all those things you named there,


01:06:32.160 --> 01:06:35.000
an important piece in the mix are Python types and Pydantic.


01:06:35.000 --> 01:06:36.480
So. - Yeah, exactly.


01:06:36.480 --> 01:06:41.080
Exactly, that really took the type hints to the next level.


01:06:41.080 --> 01:06:42.760
- It did. - Yeah.


01:06:42.760 --> 01:06:44.120
- It definitely did.


01:06:44.120 --> 01:06:46.280
All right, well, final call to action.


01:06:46.280 --> 01:06:48.640
People are interested in this.


01:06:48.640 --> 01:06:50.300
Maybe they're interested in getting to know


01:06:50.300 --> 01:06:52.280
some of your coaching stuff better as well.


01:06:52.280 --> 01:06:53.480
What are you telling them?


01:06:53.480 --> 01:06:57.720
- Yeah, go to pybit.es, our website.


01:06:57.720 --> 01:07:00.200
check out our PDM program.


01:07:00.200 --> 01:07:04.480
And yeah, for anything you can also join the PyBot Slack,


01:07:04.480 --> 01:07:07.160
hit me up there with any questions or comments


01:07:07.160 --> 01:07:09.120
on PyBob, @pybob there.


01:07:09.120 --> 01:07:11.480
And I think that's it.


01:07:11.480 --> 01:07:12.520
- Hi Bob.


01:07:12.520 --> 01:07:13.360
- Yeah.


01:07:13.360 --> 01:07:14.520
- That's a good name, I like it.


01:07:14.520 --> 01:07:15.680
- So my handle.


01:07:15.680 --> 01:07:16.520
- Yeah, perfect.


01:07:16.520 --> 01:07:20.520
So people can go check it out there.


01:07:20.520 --> 01:07:23.440
And you've got the cool aspects


01:07:23.440 --> 01:07:27.000
of the Spanish domain suffix.


01:07:27.000 --> 01:07:32.000
So pybit.es, you can actually have just the word.


01:07:32.000 --> 01:07:33.220
That's very cool.


01:07:33.220 --> 01:07:34.620
- Yeah.


01:07:34.620 --> 01:07:35.460
- Excellent.


01:07:35.460 --> 01:07:36.900
All right, well, thank you for being on the show.


01:07:36.900 --> 01:07:37.820
Thanks for writing the article


01:07:37.820 --> 01:07:39.220
and good to catch up with you as always.


01:07:39.220 --> 01:07:40.060
- Yeah, thanks for having me.


01:07:40.060 --> 01:07:41.260
This was so much fun.


01:07:41.260 --> 01:07:42.860
I was happy to share.


01:07:42.860 --> 01:07:43.680
- You bet.

