WEBVTT

00:00:00.000 --> 00:00:02.000
>> Hello, YouTube.


00:00:02.000 --> 00:00:03.000
Hello, Effect.


00:00:03.000 --> 00:00:04.000
How are you doing?


00:00:04.000 --> 00:00:05.000
>> Hey, I'm good.


00:00:05.000 --> 00:00:06.000
How are you today?


00:00:06.000 --> 00:00:08.000
>> I'm doing really well.


00:00:08.000 --> 00:00:11.000
I'm excited to have you back on the podcast.


00:00:11.000 --> 00:00:17.000
And before we jump into it, I see we already have some chat out there in the audience.


00:00:17.000 --> 00:00:18.000
So thank you for throwing these in.


00:00:18.000 --> 00:00:20.000
Some of these questions are going to be great.


00:00:20.000 --> 00:00:22.000
I'll ask them as we go and when it makes sense.


00:00:22.000 --> 00:00:28.000
But if you're out there watching live, please put your comments into the live chat so we can make them part of the show.


00:00:28.000 --> 00:00:32.400
part of the show. And if you're watching later, thanks for coming by. And with that, let's kick


00:00:32.400 --> 00:00:37.520
it off. Ophek, welcome to Talk Python To Me. >> Thank you. Good to be here.


00:00:37.520 --> 00:00:41.360
>> It's been a long time. At least a week since you've been on the show.


00:00:41.360 --> 00:00:47.280
>> Yep. Just about a week. >> Welcome back. In that appearance,


00:00:47.280 --> 00:00:51.520
it was a big panel of many of us talking about Python packaging.


00:00:51.520 --> 00:00:55.200
>> Yeah. >> And you're the author of Hatch and


00:00:55.200 --> 00:00:58.640
and Hatchling and a really interesting take


00:00:58.640 --> 00:01:00.520
on that tooling story.


00:01:00.520 --> 00:01:01.800
So I thought it'd be fun to go ahead


00:01:01.800 --> 00:01:05.960
and just dive into that in particular for this episode


00:01:05.960 --> 00:01:07.040
and get your thoughts on it.


00:01:07.040 --> 00:01:09.640
So I'm looking forward to talking about Hatch.


00:01:09.640 --> 00:01:11.240
- Yeah, sounds fun.


00:01:11.240 --> 00:01:12.720
- Yeah, it will be fun.


00:01:12.720 --> 00:01:14.600
Before we get into it though,


00:01:14.600 --> 00:01:16.960
a lot of people maybe don't know you out there.


00:01:16.960 --> 00:01:19.320
What's your background?


00:01:19.320 --> 00:01:21.120
How did you get into programming in Python?


00:01:21.120 --> 00:01:22.200
Those sorts of things.


00:01:22.200 --> 00:01:23.080
Let us know.


00:01:23.080 --> 00:01:32.280
Yeah, so I guess originally, this was like maybe 15 years ago now, I was just automating


00:01:32.280 --> 00:01:35.700
stuff that I was doing every day.


00:01:35.700 --> 00:01:41.040
So for me personally, I have a condition that makes me kind of weak, so all I can use is


00:01:41.040 --> 00:01:44.400
like a mouse, therefore I type pretty slow.


00:01:44.400 --> 00:01:52.600
So I was automating sentences, templating for like sending emails.


00:01:52.600 --> 00:01:57.800
like the traditional developer mindset. If you're doing anything more than once or twice,


00:01:57.800 --> 00:02:04.520
just write a script for it. So I had like dozens or maybe even 100 scripts just to automate like


00:02:04.520 --> 00:02:08.840
boring stuff. Kind of like the book, which I've never read the book, I would make the boring


00:02:08.840 --> 00:02:13.240
stuff. But I imagine it's what I was doing. That's how I originally got into Python.


00:02:13.240 --> 00:02:18.520
Excellent. You were doing the traditional developer thing. Why spend 20 minutes doing


00:02:18.520 --> 00:02:20.860
when you can spend two weeks automating it.


00:02:20.860 --> 00:02:21.820
(laughing)


00:02:21.820 --> 00:02:22.660
Just kidding.


00:02:22.660 --> 00:02:26.680
Like, honestly, I really think that that's a huge value.


00:02:26.680 --> 00:02:29.820
There's so many people out there,


00:02:29.820 --> 00:02:32.320
probably many people even listen to this podcast


00:02:32.320 --> 00:02:36.640
where they don't consider themselves developers,


00:02:36.640 --> 00:02:40.500
but there's like little things that could be automated


00:02:40.500 --> 00:02:42.160
that are super annoying.


00:02:42.160 --> 00:02:45.960
You don't look forward to it, right?


00:02:45.960 --> 00:02:48.080
Just a little bit of programming skill


00:02:48.080 --> 00:02:51.160
will let you really blaze through those things.


00:02:51.160 --> 00:02:53.520
Plus it also gets you further into Python


00:02:53.520 --> 00:02:55.920
where maybe one day you're releasing tools


00:02:55.920 --> 00:02:58.160
to manage everyone else's Python projects.


00:02:58.160 --> 00:03:00.120
- Yep, for sure.


00:03:00.120 --> 00:03:02.720
- You don't know where it's gonna go, right?


00:03:02.720 --> 00:03:06.080
- Yep, and yeah, now I work at Datadog


00:03:06.080 --> 00:03:09.480
working on agent interventions.


00:03:09.480 --> 00:03:13.520
So it's like the thing that you physically install


00:03:13.520 --> 00:03:16.440
on your server host, it ships out of the box


00:03:16.440 --> 00:03:19.340
with like almost 200 integrations,


00:03:19.340 --> 00:03:23.820
like connecting to databases like Postgres


00:03:23.820 --> 00:03:26.600
or monitoring like Windows APIs


00:03:26.600 --> 00:03:30.200
or hypervisors like vSphere,


00:03:30.200 --> 00:03:33.600
pretty much whatever our customers want to monitor.


00:03:33.600 --> 00:03:37.440
It's our job to like find a way to connect to it


00:03:37.440 --> 00:03:39.200
and provide useful data.


00:03:39.200 --> 00:03:44.200
So I love to research into every product


00:03:44.200 --> 00:03:45.600
that we integrate with.


00:03:45.600 --> 00:03:49.160
Sometimes the documentation is kind of sparse.


00:03:49.160 --> 00:03:52.200
So it's lots of investigative work.


00:03:52.200 --> 00:03:53.960
- Yeah, I can imagine.


00:03:53.960 --> 00:03:54.840
That sounds really fun.


00:03:54.840 --> 00:03:56.880
And I can see that as a follow-on


00:03:56.880 --> 00:04:00.040
from the way you got started as well, right?


00:04:00.040 --> 00:04:02.360
Automating a bunch of tasks is not that different


00:04:02.360 --> 00:04:04.220
from kind of automating integration


00:04:04.220 --> 00:04:08.680
with a hundred different apps and performance counters


00:04:08.680 --> 00:04:11.680
and laws and different things, right?


00:04:11.680 --> 00:04:13.840
- Yeah, yeah, definitely.


00:04:13.840 --> 00:04:14.680
- Cool.


00:04:14.680 --> 00:04:17.080
Is that part of the application performance monitoring


00:04:17.080 --> 00:04:17.920
type thing?


00:04:17.920 --> 00:04:19.040
Are there--


00:04:19.040 --> 00:04:20.120
- We do that as well.


00:04:20.120 --> 00:04:21.760
That's not my team, but yeah.


00:04:21.760 --> 00:04:24.260
That's probably what we do.


00:04:24.260 --> 00:04:25.200
- Yeah, excellent.


00:04:25.200 --> 00:04:30.140
All right, well, let's go ahead and dive in.


00:04:30.140 --> 00:04:32.440
- Sure.


00:04:32.440 --> 00:04:34.500
- So as I said, if people wanna check it out,


00:04:34.500 --> 00:04:38.200
you are on the Python packaging discussion.


00:04:38.200 --> 00:04:41.400
And over there was a broad conversation


00:04:41.400 --> 00:04:43.200
with a bunch of core developers


00:04:43.200 --> 00:04:47.120
and other interested folks, building tools like HAT and so on,


00:04:47.120 --> 00:04:50.160
about where are we with packaging?


00:04:50.160 --> 00:04:58.520
Because a little while ago, I remember packaging mostly felt like pip instead of tools,


00:04:58.520 --> 00:05:01.600
maybe distutil, something like that.


00:05:01.600 --> 00:05:08.440
And then it kind of got unlocked, this separation of like the build backends and stuff.


00:05:08.440 --> 00:05:10.280
And then many people started creating things.


00:05:10.280 --> 00:05:15.280
We had pip env, we have poetry, we have PDM.


00:05:15.280 --> 00:05:17.240
There's a bunch of different ones


00:05:17.240 --> 00:05:20.060
and hatches amongst them, right?


00:05:20.060 --> 00:05:21.480
- Yeah, yeah.


00:05:21.480 --> 00:05:24.960
- Yeah, so let's set the stage by just talking about,


00:05:24.960 --> 00:05:27.880
first of all, what do we mean


00:05:27.880 --> 00:05:30.600
when we're talking about Python packaging?


00:05:30.600 --> 00:05:32.000
And I'll ask you for you, right?


00:05:32.000 --> 00:05:34.400
Like it might mean something different for me


00:05:34.400 --> 00:05:36.360
than it might mean for you


00:05:36.360 --> 00:05:38.460
and it might be different for someone else as well.


00:05:38.460 --> 00:05:41.780
But let's just start with, you know, when we talk packaging,


00:05:41.780 --> 00:05:43.560
is that getting libraries to devs?


00:05:43.560 --> 00:05:46.980
Is that developers deploying their apps to servers?


00:05:46.980 --> 00:05:50.580
Or is that me sending an executable end product


00:05:50.580 --> 00:05:51.580
to a desktop?


00:05:51.580 --> 00:05:53.540
Like, what does it mean?


00:05:53.540 --> 00:05:55.660
- Yeah, that's a good question.


00:05:55.660 --> 00:05:59.260
I would say all of those are packaging.


00:05:59.260 --> 00:06:04.260
Historically though, we've mostly put our efforts


00:06:04.260 --> 00:06:08.020
toward the first one, which is basically like a developer


00:06:08.020 --> 00:06:11.140
making a library and making that really simple


00:06:11.140 --> 00:06:15.500
for other developers to use that library.


00:06:15.500 --> 00:06:19.380
And so in the form of wheels being hosted on PyPI


00:06:19.380 --> 00:06:22.340
in particular, that's what we put our efforts on,


00:06:22.340 --> 00:06:25.060
which I think either way you look at it


00:06:25.060 --> 00:06:29.180
was the right choice to focus on in the beginning.


00:06:29.180 --> 00:06:32.420
'Cause like either way, like from either first principles


00:06:32.420 --> 00:06:35.140
or even hindsight, looking back,


00:06:35.140 --> 00:06:38.600
you can't build a community without packages


00:06:38.600 --> 00:06:42.360
and being able to get packages and distribute packages.


00:06:42.360 --> 00:06:45.020
So I think that was the right choice.


00:06:45.020 --> 00:06:49.000
And I think now we're trying to satisfy other use cases,


00:06:49.000 --> 00:06:54.340
notably applications, I guess.


00:06:54.340 --> 00:06:58.080
- Yeah, I mean, we even have an XKCD for it, right?


00:06:58.080 --> 00:06:59.360
- True.


00:06:59.360 --> 00:07:00.900
- And I don't know how many people know this.


00:07:00.900 --> 00:07:02.260
If you're in the Python REPL,


00:07:02.260 --> 00:07:05.020
you can type import anti-gravity


00:07:05.020 --> 00:07:08.100
And actually, it does something.


00:07:08.100 --> 00:07:11.020
So the old XKCD is there's a person flying


00:07:11.020 --> 00:07:12.700
and the person on the ground looks at us,


00:07:12.700 --> 00:07:13.660
"How are you flying?"


00:07:13.660 --> 00:07:16.500
"Python, just learned it last night.


00:07:16.500 --> 00:07:17.980
Everything's so simple.


00:07:17.980 --> 00:07:20.780
Hello world is just print, hello world."


00:07:20.780 --> 00:07:22.380
The person on the ground says, "I don't know,


00:07:22.380 --> 00:07:25.100
dynamic typing, white space."


00:07:25.100 --> 00:07:28.220
"Come on, join us, programming's fun again."


00:07:28.220 --> 00:07:29.400
"Okay, but how are you flying?"


00:07:29.400 --> 00:07:31.740
"I just typed import anti-gravity."


00:07:31.740 --> 00:07:32.580
Right?


00:07:32.580 --> 00:07:34.900
And it's a great joke,


00:07:34.900 --> 00:07:39.180
But honestly, that is one of the superpowers of Python


00:07:39.180 --> 00:07:43.540
is that, how many things do we have right now?


00:07:43.540 --> 00:07:44.460
How many packages?


00:07:44.460 --> 00:07:49.300
436,000 packages, like insane.


00:07:49.300 --> 00:07:50.820
It's just insane.


00:07:50.820 --> 00:07:53.420
- Yeah, no, it's a massive community


00:07:53.420 --> 00:07:58.100
and really all kinds of domains from doing,


00:07:58.100 --> 00:08:00.220
as we talked about automating scripts,


00:08:00.220 --> 00:08:11.100
in different tasks to doing like computing for whether, you know, biomedical stuff, you


00:08:11.100 --> 00:08:18.260
know, even embedded devices now with like a micro Python, stuff like that. So it's, yeah,


00:08:18.260 --> 00:08:21.300
users of Python do everything pretty much.


00:08:21.300 --> 00:08:27.140
Yeah. I think in the near term, we're going to be talking about front end web as well


00:08:27.140 --> 00:08:28.140
with


00:08:28.140 --> 00:08:29.140
Yes.


00:08:29.140 --> 00:08:32.380
And PyScript showed the possibilities,


00:08:32.380 --> 00:08:37.020
but I recently had a show on PyScript intersection


00:08:37.020 --> 00:08:39.860
with MicroPython, and that starts to be like,


00:08:39.860 --> 00:08:42.540
well, here's a couple hundred K download,


00:08:42.540 --> 00:08:43.860
and now you got Python in the front end.


00:08:43.860 --> 00:08:45.300
What do you think about it now?


00:08:45.300 --> 00:08:47.500
But of course, that has its own packaging


00:08:47.500 --> 00:08:50.540
and distribution story that we're gonna have


00:08:50.540 --> 00:08:51.420
to think about as well.


00:08:51.420 --> 00:08:53.980
Like, well, kind of like Node modules,


00:08:53.980 --> 00:08:55.260
now what do you do with packages


00:08:55.260 --> 00:08:56.580
that gotta run on the front end?


00:08:56.580 --> 00:08:58.540
This is getting weird.


00:08:58.540 --> 00:09:01.500
- Yeah, and that kind of goes to, you know,


00:09:01.500 --> 00:09:04.660
talking about like how hard it is to do packaging


00:09:04.660 --> 00:09:08.420
when you have, you know, dozens of use cases


00:09:08.420 --> 00:09:10.340
that we have to satisfy.


00:09:10.340 --> 00:09:13.800
And with us being mostly just volunteers


00:09:13.800 --> 00:09:15.980
in our free time trying to do everything.


00:09:15.980 --> 00:09:20.060
So yeah, it's fun and also challenging.


00:09:20.060 --> 00:09:20.900
Yeah.


00:09:20.900 --> 00:09:21.980
- Yeah, absolutely.


00:09:21.980 --> 00:09:25.100
Another area, another thing we could consider


00:09:25.100 --> 00:09:26.700
could be Conda, right?


00:09:26.700 --> 00:09:28.620
actually, I got that below over here.


00:09:28.620 --> 00:09:29.740
Could be Conda, right?


00:09:29.740 --> 00:09:33.740
This is a completely different take on pip and wheels.


00:09:33.740 --> 00:09:37.100
- Yeah, yeah, Conda is pretty cool.


00:09:37.100 --> 00:09:40.020
I think Conda, if I have my history right,


00:09:40.020 --> 00:09:44.700
it came about because there really was no packaging story


00:09:44.700 --> 00:09:47.140
some time ago.


00:09:47.140 --> 00:09:51.180
So Conda, I think was made by Peter Yang,


00:09:51.180 --> 00:09:53.180
if I remember correctly.


00:09:53.180 --> 00:09:56.060
And he has a whole company now around it,


00:09:56.060 --> 00:09:58.060
supporting Conda.


00:09:58.060 --> 00:10:01.340
And yeah, it just makes it easy to install


00:10:01.340 --> 00:10:02.940
very complex stuff.


00:10:02.940 --> 00:10:05.100
So if your package depends on--


00:10:05.100 --> 00:10:09.860
yeah, you can put in Fortran and Rust and all kinds of stuff,


00:10:09.860 --> 00:10:12.220
and it just magically builds it, and you


00:10:12.220 --> 00:10:15.580
can install it pretty easily.


00:10:15.580 --> 00:10:17.380
Yeah, it's pretty impressive.


00:10:17.380 --> 00:10:18.580
>>It is pretty impressive.


00:10:18.580 --> 00:10:22.700
And with wheels now, it's closer, what we do with pip.


00:10:22.700 --> 00:10:26.500
It used to be setup.py would run


00:10:26.500 --> 00:10:28.180
and whatever it needed to do, it would do.


00:10:28.180 --> 00:10:30.680
But often that would require, well, compile this.


00:10:30.680 --> 00:10:33.540
Usually it was C back then,


00:10:33.540 --> 00:10:36.300
but for the scientific libraries,


00:10:36.300 --> 00:10:38.820
it says, well, compile this thing with Fortran


00:10:38.820 --> 00:10:41.820
and then compile this thing with Scala.


00:10:41.820 --> 00:10:43.920
You're like, I have neither of those things set up


00:10:43.920 --> 00:10:45.660
as dev tools on my environment.


00:10:45.660 --> 00:10:47.380
I'm a science student.


00:10:47.380 --> 00:10:49.060
What am I doing here?


00:10:49.060 --> 00:10:49.900
Right?


00:10:49.900 --> 00:10:51.980
And so that was the angle they were solving.


00:10:51.980 --> 00:10:57.140
And I think pip and Conda are coming a little bit closer


00:10:57.140 --> 00:10:57.660
together.


00:10:57.660 --> 00:10:59.620
I think they're not necessarily converging,


00:10:59.620 --> 00:11:03.020
but they're more similar now than they used to be.


00:11:03.020 --> 00:11:03.820
>>Yeah, definitely.


00:11:03.820 --> 00:11:05.020
That is true.


00:11:05.020 --> 00:11:06.900
And yeah, there is talk on--


00:11:06.900 --> 00:11:08.480
I don't know how many people are aware,


00:11:08.480 --> 00:11:12.180
but the Python forums has a subsection


00:11:12.180 --> 00:11:14.140
on discourse for packaging.


00:11:14.140 --> 00:11:15.740
So yeah, right now there's actually


00:11:15.740 --> 00:11:20.460
talks from people at Conda trying


00:11:20.460 --> 00:11:25.460
to decide how we can kind of provide a more unified experience.


00:11:25.460 --> 00:11:32.260
Because right now, Conda has their own repo, like for all their packages, and PyPI is its


00:11:32.260 --> 00:11:34.620
own thing outside of Conda.


00:11:34.620 --> 00:11:40.660
So yeah, there's talk about possibly making that like, like interoperable.


00:11:40.660 --> 00:11:41.660
Oh, yeah.


00:11:41.660 --> 00:11:45.700
Okay, that'd be really interesting.


00:11:45.700 --> 00:11:49.700
Let's see, there was a question out here from Copa.


00:11:49.700 --> 00:11:52.940
It says, "In this realm, what do you think about Docker


00:11:52.940 --> 00:11:55.460
as a way of shipping things?"


00:11:55.460 --> 00:11:58.420
You know, a lot of times we'll get checkout,


00:11:58.420 --> 00:12:01.900
get clone, some code on a server,


00:12:01.900 --> 00:12:03.100
maybe some production branch,


00:12:03.100 --> 00:12:05.940
and then go through these steps, right?


00:12:05.940 --> 00:12:07.700
Pip install requirements


00:12:07.700 --> 00:12:11.620
or the hatch run type of initialization.


00:12:11.620 --> 00:12:14.940
Or you just get that done in a Docker container


00:12:14.940 --> 00:12:15.980
and you just hand that out.


00:12:15.980 --> 00:12:18.860
What are your thoughts on Docker as part of this?


00:12:18.860 --> 00:12:22.340
- Yeah, Docker definitely has its use cases.


00:12:22.340 --> 00:12:26.420
Like I guess in lieu of the black file,


00:12:26.420 --> 00:12:28.140
you can kind of use Docker


00:12:28.140 --> 00:12:31.320
as a reproducible environment.


00:12:31.320 --> 00:12:34.940
But I still think there's a place


00:12:34.940 --> 00:12:38.340
for a way to actually build applications


00:12:38.340 --> 00:12:43.100
and outside of Docker, outside of containers


00:12:43.100 --> 00:12:44.940
in a reproducible fashion.


00:12:44.940 --> 00:12:46.500
I think that's still necessary.


00:12:46.500 --> 00:12:49.380
- I do as well.


00:12:49.380 --> 00:12:50.680
So Docker really,


00:12:50.680 --> 00:12:55.780
it addresses some of the types of packaging


00:12:55.780 --> 00:12:57.340
that we discussed really, really well.


00:12:57.340 --> 00:13:01.660
For example, I need to get my running code onto a server,


00:13:01.660 --> 00:13:04.180
but Docker is less good.


00:13:04.180 --> 00:13:05.700
It's not completely irrelevant,


00:13:05.700 --> 00:13:10.100
but it's less good at giving a developer a library, right?


00:13:10.100 --> 00:13:12.820
If the people that make HTTPX


00:13:12.820 --> 00:13:15.680
and the people that make FastAPI,


00:13:15.680 --> 00:13:19.360
they're not gonna build a combo Docker, right?


00:13:19.360 --> 00:13:21.760
There's still a place where you've just gotta get the things


00:13:21.760 --> 00:13:23.780
and that's like a base level closer


00:13:23.780 --> 00:13:25.560
to where a hatch might be working.


00:13:25.560 --> 00:13:29.860
And also Docker is not fantastic at sending to an end user.


00:13:29.860 --> 00:13:32.420
If I wanna build an app that a non-technical,


00:13:32.420 --> 00:13:35.100
non-developer person can use,


00:13:35.100 --> 00:13:37.140
Docker is the opposite of what they want.


00:13:37.140 --> 00:13:38.900
- Yeah, true.


00:13:38.900 --> 00:13:41.660
I will say there's another use case,


00:13:41.660 --> 00:13:46.340
which is like if your machine is like messed up somehow


00:13:46.340 --> 00:13:49.160
and some library package isn't working,


00:13:49.160 --> 00:13:52.420
I've had this happen with my coworkers on their Macs,


00:13:52.420 --> 00:13:55.460
it is nice to be able to just go into the container


00:13:55.460 --> 00:13:56.740
and start fresh.


00:13:56.740 --> 00:13:58.980
So I've had that happen a few times.


00:13:58.980 --> 00:14:01.820
- Yeah, it is isolated in quite a good way


00:14:01.820 --> 00:14:04.780
and that's pretty excellent.


00:14:04.780 --> 00:14:09.140
So on that packaging panel that we were on,


00:14:10.020 --> 00:14:13.740
There was a really interesting focus for a little bit


00:14:13.740 --> 00:14:18.740
talking about, well, what is responsible for what?


00:14:18.740 --> 00:14:24.660
So right now, for example, I might use Pip


00:14:24.660 --> 00:14:28.980
as a way to add tools to Python to a Python project,


00:14:28.980 --> 00:14:31.180
but I'll have to already have Python there.


00:14:31.180 --> 00:14:34.980
And in other communities,


00:14:34.980 --> 00:14:38.060
and even a little bit like Conda in this as well,


00:14:38.060 --> 00:14:40.180
there's tools that will say,


00:14:40.180 --> 00:14:42.060
what you do is use a tool kind of like pip,


00:14:42.060 --> 00:14:43.540
but it gets you the runtime.


00:14:43.540 --> 00:14:46.300
It would get you a version of Python you asked for


00:14:46.300 --> 00:14:47.660
plus the libraries.


00:14:47.660 --> 00:14:52.220
You know, I think Rust up was one of the things


00:14:52.220 --> 00:14:55.260
that was brought up there, right?


00:14:55.260 --> 00:14:58.860
So for people who don't know Rust up,


00:14:58.860 --> 00:15:03.180
it's an installer for basically setting up


00:15:03.180 --> 00:15:04.940
a Rust environment for doing Rust.


00:15:04.940 --> 00:15:08.580
So pip up, Python up, I don't know.


00:15:08.580 --> 00:15:10.260
I don't know what we would call it.


00:15:10.260 --> 00:15:12.460
But do you want to just maybe give your thoughts on that?


00:15:12.460 --> 00:15:14.700
'Cause I think you had some comments on that.


00:15:14.700 --> 00:15:18.520
Like inside out, outside in, if you could start fresh,


00:15:18.520 --> 00:15:21.300
where were the tools, how would that work?


00:15:21.300 --> 00:15:24.500
- Yeah, I think if we were to start fresh,


00:15:24.500 --> 00:15:28.500
I think the way Rust does it is like now the gold standard.


00:15:28.500 --> 00:15:33.260
It's probably the best way to do it, which is how,


00:15:33.260 --> 00:15:36.420
As you mentioned, Conda, that's a similar thing,


00:15:36.420 --> 00:15:38.500
where you have a tool that you download,


00:15:38.500 --> 00:15:41.860
and that one tool is in charge of managing


00:15:41.860 --> 00:15:46.480
the various Python or programming language versions.


00:15:46.480 --> 00:15:48.720
So if I were to start fresh,


00:15:48.720 --> 00:15:50.780
you would have a tool like Catch


00:15:50.780 --> 00:15:54.980
that you would download as an MSI or EXE


00:15:54.980 --> 00:15:58.740
or some kind of installer, similar to Ruststep.


00:15:58.740 --> 00:16:03.740
And then that tool would manage the various Python versions


00:16:03.740 --> 00:16:06.900
and environments and packaging.


00:16:06.900 --> 00:16:10.720
So for Rustup, when you download this,


00:16:10.720 --> 00:16:13.720
it gives you Rustup, which manages Rust,


00:16:13.720 --> 00:16:17.220
but then it gives you Cargo, which is a separate command,


00:16:17.220 --> 00:16:19.300
and that's their package manager.


00:16:19.300 --> 00:16:20.700
- Right. - But in both cases,


00:16:20.700 --> 00:16:22.580
they live outside of Python.


00:16:22.580 --> 00:16:23.420
Yeah. - Interesting.


00:16:23.420 --> 00:16:26.980
Yeah, Cargo is to Rust as pip is to Python, right?


00:16:26.980 --> 00:16:30.020
that, yeah. - Right, right.


00:16:30.020 --> 00:16:33.940
- Okay, so I think that's pretty helpful


00:16:33.940 --> 00:16:35.740
because one of the problems is,


00:16:35.740 --> 00:16:38.300
well, you need to pip install this thing.


00:16:38.300 --> 00:16:40.640
Oh, do you have the wrong version of Python?


00:16:40.640 --> 00:16:44.740
Well, you gotta, you know, there's a lot of steps back


00:16:44.740 --> 00:16:46.780
and there's no immediately obvious command


00:16:46.780 --> 00:16:50.400
other than completely from scratch install a new Python.


00:16:50.400 --> 00:16:52.660
- Yeah. - There's other,


00:16:52.660 --> 00:16:53.860
there's tools that manage that, right?


00:16:53.860 --> 00:16:58.860
like pyenv can work, although I've had trouble with it.


00:16:58.860 --> 00:17:00.500
- Yeah, I've had issues with that.


00:17:00.500 --> 00:17:04.040
Yeah, I think it would be less error-prone


00:17:04.040 --> 00:17:05.820
in this hypothetical way,


00:17:05.820 --> 00:17:10.820
where the tool doesn't mess with your shell


00:17:10.820 --> 00:17:12.700
in a global manner.


00:17:12.700 --> 00:17:15.780
It just has its own paths to Python


00:17:15.780 --> 00:17:19.060
and just does everything by itself.


00:17:19.060 --> 00:17:19.900
- That's interesting.


00:17:19.900 --> 00:17:23.140
And that starts to maybe make it easier to solve the,


00:17:23.140 --> 00:17:26.520
I want to ship you an executable binary,


00:17:26.520 --> 00:17:28.880
is if the tool were in charge of,


00:17:28.880 --> 00:17:30.520
I create this working directory


00:17:30.520 --> 00:17:32.780
where part of the things I've installed


00:17:32.780 --> 00:17:36.600
is all of Python and all the packages you've asked me for,


00:17:36.600 --> 00:17:39.640
I can see how that pretty quickly becomes something


00:17:39.640 --> 00:17:42.040
I'll bundle that up and hand it to somebody


00:17:42.040 --> 00:17:43.740
and give them an entry point.


00:17:43.740 --> 00:17:48.640
- Yeah, definitely I could help that situation.


00:17:48.640 --> 00:17:52.680
I think there's not really a standard way


00:17:52.680 --> 00:17:56.740
to build an AXE from like a Python package.


00:17:56.740 --> 00:18:01.740
There are a few tools like PyOxidizer is one newer option.


00:18:01.740 --> 00:18:07.680
PyInstaller, CXFreeze, I think was the thing


00:18:07.680 --> 00:18:08.920
that I've used before.


00:18:08.920 --> 00:18:10.640
So there's a few options.


00:18:10.640 --> 00:18:11.800
- Yeah, I've used Py2App


00:18:11.800 --> 00:18:13.920
and that's actually worked really well.


00:18:13.920 --> 00:18:16.680
I've used PyInstaller and it's worked mostly well


00:18:16.680 --> 00:18:18.460
except for I've had weird situations


00:18:18.460 --> 00:18:20.480
where on Windows it's great,


00:18:20.480 --> 00:18:23.200
but on Mac, it has a dangling terminal


00:18:23.200 --> 00:18:24.980
in addition to the GUI.


00:18:24.980 --> 00:18:26.920
I'm like, what are we supposed to do that?


00:18:26.920 --> 00:18:27.760
How do we make it go away?


00:18:27.760 --> 00:18:29.440
Like, you know, here's the command.


00:18:29.440 --> 00:18:30.520
Like, no, it's not going away.


00:18:30.520 --> 00:18:32.160
I don't know why.


00:18:32.160 --> 00:18:35.000
And if there was a more official


00:18:35.000 --> 00:18:37.800
sort of core dev organized way,


00:18:37.800 --> 00:18:39.640
that would make me super happy.


00:18:39.640 --> 00:18:40.480
- Yeah.


00:18:40.480 --> 00:18:45.080
Yeah, I'm not so much like for official or unofficial.


00:18:45.080 --> 00:18:48.280
Like my view is like, if it works, it works.


00:18:48.280 --> 00:18:50.080
So as long as it's satisfying,


00:18:50.080 --> 00:18:53.400
You know, in all these cases, that's what I would push for.


00:18:53.400 --> 00:18:57.040
So I think right now, based on what I've used personally,


00:18:57.040 --> 00:18:59.840
I think PyOxidizer would be the best choice


00:18:59.840 --> 00:19:03.960
for distributing standalone apps.


00:19:03.960 --> 00:19:05.100
- Interesting, okay.


00:19:05.100 --> 00:19:07.000
All right, cool.


00:19:07.000 --> 00:19:11.320
Well, let's move on and start talking about Hatch.


00:19:11.320 --> 00:19:15.960
So first off, why'd you build it, right?


00:19:15.960 --> 00:19:17.120
We had Pip.


00:19:19.180 --> 00:19:20.180
- Why do we need Hatch?


00:19:20.180 --> 00:19:23.060
And I don't know exactly the timeframe of when it came out.


00:19:23.060 --> 00:19:25.900
So maybe we had other things like poetry or,


00:19:25.900 --> 00:19:29.060
why'd you go and create this?


00:19:29.060 --> 00:19:34.820
- So Hatch, I did, it was kind of an older project


00:19:34.820 --> 00:19:39.820
back in the end of 2016 or early 2017.


00:19:39.820 --> 00:19:45.780
I wasn't pleased with like the tooling in Python.


00:19:45.780 --> 00:19:49.180
I think very similar to the author of poetry.


00:19:49.180 --> 00:19:51.780
That's kind of why he made poetry.


00:19:51.780 --> 00:19:55.820
So I wanted something that kind of matched my mental model


00:19:55.820 --> 00:19:59.620
of how development would go with building packages


00:19:59.620 --> 00:20:04.540
and managing environments automatically, stuff like that.


00:20:04.540 --> 00:20:08.340
When I made it, though, there weren't very many standards


00:20:08.340 --> 00:20:12.060
for packaging, and everything was kind of in limbo


00:20:12.060 --> 00:20:15.260
at that point, which kind of discouraged me


00:20:15.260 --> 00:20:19.020
from continuing, because then I was like, OK, in six months


00:20:19.020 --> 00:20:21.460
or a year or two, I'm going to have


00:20:21.460 --> 00:20:24.100
to rewrite to follow standards.


00:20:24.100 --> 00:20:27.540
So I kind of just stopped development for a few years


00:20:27.540 --> 00:20:30.260
until everything was standardized.


00:20:30.260 --> 00:20:34.340
And then I rewrote it about a year and a half ago


00:20:34.340 --> 00:20:37.500
with this new version and new docs.


00:20:37.500 --> 00:20:40.020
So that's kind of the history of it.


00:20:40.020 --> 00:20:44.420
Yeah, I saw that there's a hash.toml and a pyproject.toml,


00:20:44.420 --> 00:20:46.680
and you can use either of them.


00:20:46.680 --> 00:20:48.420
Was your hatch.toml the original,


00:20:48.420 --> 00:20:50.580
and then pyproject.toml gained traction,


00:20:50.580 --> 00:20:51.820
and you're like, all right, well,


00:20:51.820 --> 00:20:53.420
we'll integrate with that as well?


00:20:53.420 --> 00:20:57.860
- No, hatch came, hatch.toml came with the rewrite.


00:20:57.860 --> 00:20:59.660
It's mostly for environments.


00:20:59.660 --> 00:21:02.820
Sometimes when you define lots of environments,


00:21:02.820 --> 00:21:04.820
it's very verbose.


00:21:04.820 --> 00:21:07.720
Like at my workplace, I saw a top,


00:21:07.720 --> 00:21:10.620
like over a thousand lines.


00:21:10.620 --> 00:21:14.420
So putting that in PyProject wouldn't be very nice.


00:21:14.420 --> 00:21:16.340
So that's why I have a second file.


00:21:16.340 --> 00:21:17.420
So I still use it.


00:21:17.420 --> 00:21:18.860
- Yeah, yeah, it makes sense.


00:21:18.860 --> 00:21:20.300
Just like maybe you don't want to write


00:21:20.300 --> 00:21:22.400
your entire application in an app.py,


00:21:22.400 --> 00:21:25.300
but maybe have multiple files, yeah, something like that.


00:21:25.300 --> 00:21:27.660
All right, well, out in the audience,


00:21:27.660 --> 00:21:29.360
we've got some kind words.


00:21:29.360 --> 00:21:32.140
Like, "I switched to Hatch and pip-tools from Poetry


00:21:32.140 --> 00:21:32.980
"and love it."


00:21:32.980 --> 00:21:34.660
That's pretty awesome. - Nice.


00:21:34.660 --> 00:21:36.120
- Yeah.


00:21:36.120 --> 00:21:38.380
And then probably before I forget,


00:21:38.380 --> 00:21:41.580
because it was right at the top of the conversation.


00:21:41.580 --> 00:21:46.340
Marwan asks, is there a time estimate


00:21:46.340 --> 00:21:52.460
for when a hatch might support things like lock files?


00:21:52.460 --> 00:21:54.540
That's a good question.


00:21:54.540 --> 00:22:00.340
So my goal is by PyCon to write the plugin


00:22:00.340 --> 00:22:04.140
interface for locking.


00:22:04.140 --> 00:22:09.100
So the first version, we use pip-tools, actually.


00:22:09.100 --> 00:22:12.620
That would be the first plugin for lock files.


00:22:12.620 --> 00:22:17.260
But I won't be writing an actual lock file spec.


00:22:17.260 --> 00:22:20.900
I'll just be using an existing tool.


00:22:20.900 --> 00:22:25.420
The new hypothetical lock file is kind of blocked on Brett


00:22:25.420 --> 00:22:29.060
because he has most context.


00:22:29.060 --> 00:22:32.500
So yeah, I'm waiting on Brett, basically.


00:22:32.500 --> 00:22:33.420
Got it.


00:22:33.420 --> 00:22:34.780
That being Brett Cannon.


00:22:34.780 --> 00:22:36.180
- Yes, yeah.


00:22:36.180 --> 00:22:38.640
- Python developer extraordinaire, we all know.


00:22:38.640 --> 00:22:42.420
Okay, very cool.


00:22:42.420 --> 00:22:44.040
Other thing before we dive into it here,


00:22:44.040 --> 00:22:48.200
I see that you have some rough action going there.


00:22:48.200 --> 00:22:50.620
I just had Charlie on the show,


00:22:50.620 --> 00:22:53.420
not too long ago to talk about rough.


00:22:53.420 --> 00:22:54.660
It's pretty impressive.


00:22:54.660 --> 00:22:55.860
When did you adopt that?


00:22:55.860 --> 00:22:58.940
- I was an early adopter.


00:22:58.940 --> 00:23:02.980
I guess a few months ago now, yeah.


00:23:02.980 --> 00:23:05.160
- Yeah, what's your experience?


00:23:05.160 --> 00:23:06.200
- It's fantastic.


00:23:06.200 --> 00:23:11.520
It's kind of like a meme to say it now, but it's true.


00:23:11.520 --> 00:23:14.720
Like it's so fast, it's almost like you wonder


00:23:14.720 --> 00:23:16.280
if it's doing anything.


00:23:16.280 --> 00:23:17.960
- Yeah, that was my first thought.


00:23:17.960 --> 00:23:19.200
When I ran it, I'm like, wait a minute,


00:23:19.200 --> 00:23:20.800
maybe I didn't give it any files or something.


00:23:20.800 --> 00:23:22.780
'Cause I ran it on Talk Python Training,


00:23:22.780 --> 00:23:26.800
which is like 20,000 lines of Python code.


00:23:26.800 --> 00:23:29.000
And it just, it's like, bam, like that.


00:23:29.000 --> 00:23:30.600
I'm like, maybe it didn't take that


00:23:30.600 --> 00:23:32.680
because that seems like that should take a moment


00:23:32.680 --> 00:23:34.680
>> Yeah, it's very great.


00:23:34.680 --> 00:23:35.680
>> Okay.


00:23:35.680 --> 00:23:38.680
>> Yeah, all in one location,


00:23:38.680 --> 00:23:43.680
and it supports so many options as well, which is nice.


00:23:43.680 --> 00:23:45.680
>> Yeah, indeed. Cool, cool.


00:23:45.680 --> 00:23:47.680
All right.


00:23:47.680 --> 00:23:51.680
Well, let's start with a high-level overview.


00:23:51.680 --> 00:23:55.680
And then what I want to do is I want to walk through creating a project with this,


00:23:55.680 --> 00:24:01.680
and I've got questions and thoughts as I experience Hatch for the first time,


00:24:01.680 --> 00:24:04.240
for the first time, but for somewhat of a newbie


00:24:04.240 --> 00:24:04.960
perspective.


00:24:04.960 --> 00:24:06.120
So I think we'll do that.


00:24:06.120 --> 00:24:10.360
But let's start with the high-level features.


00:24:10.360 --> 00:24:11.040
>>Aaron: OK.


00:24:11.040 --> 00:24:11.600
>>Victor: Yeah.


00:24:11.600 --> 00:24:14.160
>>Aaron: So I guess the first--


00:24:14.160 --> 00:24:16.720
I'll just go point by point.


00:24:16.720 --> 00:24:18.400
So the build system--


00:24:18.400 --> 00:24:20.480
so the Hatch project is, I guess,


00:24:20.480 --> 00:24:23.920
conceptually two different projects.


00:24:23.920 --> 00:24:26.800
Hatch itself is the command line.


00:24:26.800 --> 00:24:31.280
So doing publishing and environment management,


00:24:31.280 --> 00:24:33.480
versioning, stuff like that.


00:24:33.480 --> 00:24:36.660
Then Hatchling is the build system,


00:24:36.660 --> 00:24:40.540
similar to a Flit or SetupTools.


00:24:40.540 --> 00:24:42.340
So that's where the build system is.


00:24:42.340 --> 00:24:47.740
- You can use it independently, right?


00:24:47.740 --> 00:24:50.400
You don't have to be doing anything with Hatch


00:24:50.400 --> 00:24:51.840
to use Hatchling.


00:24:51.840 --> 00:24:56.680
Basically, it will replace setup.py, right?


00:24:56.680 --> 00:25:00.400
Yeah, you can replace the .py with the pyproject.toml.


00:25:00.400 --> 00:25:01.040
Yeah.


00:25:01.040 --> 00:25:05.000
And most people do use Hatchling and not use Hatch.


00:25:05.000 --> 00:25:09.080
So yeah, Hatchling is much more popular than Hatch itself.


00:25:09.080 --> 00:25:09.560
Yeah.


00:25:09.560 --> 00:25:09.880
Right.


00:25:09.880 --> 00:25:10.400
OK.


00:25:10.400 --> 00:25:16.920
So for a config, it's a bit more simple than a set of tools.


00:25:16.920 --> 00:25:24.040
The default logic makes more sense for new users,


00:25:24.040 --> 00:25:25.200
especially.


00:25:25.200 --> 00:25:29.520
it's hard to mess up packaging with Hatchling.


00:25:29.520 --> 00:25:30.360
Yeah.


00:25:30.360 --> 00:25:32.200
- Yeah, excellent.


00:25:32.200 --> 00:25:34.880
So I could have just some random Python project


00:25:34.880 --> 00:25:37.200
that I've put together with a pyproject.toml


00:25:37.200 --> 00:25:40.400
I wrote by hand and I just put Hatchling


00:25:40.400 --> 00:25:43.280
in as the build subsystem to make the wheels


00:25:43.280 --> 00:25:45.100
and whatnot, right?


00:25:45.100 --> 00:25:47.960
- Yeah, and one benefit of Hatchling,


00:25:47.960 --> 00:25:51.560
I hatched two, basically everything is a plugin.


00:25:51.560 --> 00:25:54.620
So you can have like a build hook that does


00:25:54.620 --> 00:25:59.460
like mypyC, which we have, you can have a metadata hook


00:25:59.460 --> 00:26:04.020
where you insert like project URLs


00:26:04.020 --> 00:26:07.060
from some arbitrary location,


00:26:07.060 --> 00:26:10.800
pretty much everything you can plug into and modify.


00:26:10.800 --> 00:26:13.400
- Yeah, excellent.


00:26:13.400 --> 00:26:16.600
All right, and then a robust environment management.


00:26:16.600 --> 00:26:23.100
- Yeah, so for this, this you can think of as TOCs or NOCs.


00:26:23.100 --> 00:26:34.300
similar in spirit to that. The difference is NOX and TOX kind of treat environments


00:26:34.300 --> 00:26:40.940
as applications where an environment is tied to a command and you run an environment. Whereas


00:26:40.940 --> 00:26:47.540
in Hatch, you have environments that you define and then within that, you have scripts that


00:26:47.540 --> 00:26:55.460
you can run. So you can have a style environment that might be able to rent with one script


00:26:55.460 --> 00:27:02.900
or run the formatter to change the code with another script. An environment itself isn't


00:27:02.900 --> 00:27:07.220
actually like an app. You can run arbitrary commands.


00:27:07.220 --> 00:27:13.060
Got it. Right. Like I could run hatch test or something


00:27:13.060 --> 00:27:16.580
like that, yeah? And passing flags, yeah.


00:27:16.580 --> 00:27:21.580
- Okay, and then often people published packages to PyPI.


00:27:21.580 --> 00:27:26.100
They've done this with Twine or some tool like that.


00:27:26.100 --> 00:27:29.140
And Hatch has that capability as well, right?


00:27:29.140 --> 00:27:33.980
- Right, yeah, to PyPI or some private,


00:27:33.980 --> 00:27:37.780
corporate owned index, yeah.


00:27:37.780 --> 00:27:40.540
- I think those are probably getting to be more popular


00:27:40.540 --> 00:27:44.600
than they used to be with all the supply chain silliness.


00:27:46.460 --> 00:27:47.700
- Yeah, that's true.


00:27:47.700 --> 00:27:48.920
- Yeah, yeah.


00:27:48.920 --> 00:27:51.840
Do you have any visibility into how people are using it,


00:27:51.840 --> 00:27:53.540
whether it's public or private or?


00:27:53.540 --> 00:27:57.380
- As far as Hatch?


00:27:57.380 --> 00:28:00.180
- Yeah, well, how they're using Hatch to publish.


00:28:00.180 --> 00:28:02.060
Do you have any visibility whether they're publishing


00:28:02.060 --> 00:28:04.800
to PyPI or to some kind of private index?


00:28:04.800 --> 00:28:09.700
- Based on the issues I have open like future requests,


00:28:09.700 --> 00:28:13.860
most are talking about private indices, actually.


00:28:13.860 --> 00:28:14.860
- Interesting.


00:28:14.860 --> 00:28:18.100
It's probably those are the ones where the edge cases live.


00:28:18.100 --> 00:28:18.940
- True.


00:28:18.940 --> 00:28:20.340
- Standard one place is dialed in.


00:28:20.340 --> 00:28:24.660
And what if mine's on using Active Directory


00:28:24.660 --> 00:28:26.360
for authentication as I publish it?


00:28:26.360 --> 00:28:27.200
It's doing what?


00:28:27.200 --> 00:28:32.860
- Yeah, I know Artifactory is quite popular as well.


00:28:32.860 --> 00:28:35.100
- Yeah, yeah, that absolutely is.


00:28:35.100 --> 00:28:36.360
Another thing that was interesting


00:28:36.360 --> 00:28:38.820
is you have the ability to do version management.


00:28:38.820 --> 00:28:39.980
As we'll see in just a minute,


00:28:39.980 --> 00:28:43.020
you can say like, what version is my package?


00:28:43.020 --> 00:28:46.960
increment the build, do a major version increment,


00:28:46.960 --> 00:28:48.960
or put it into a release candidate mode?


00:28:48.960 --> 00:28:53.260
- Yeah, and this is Plugged Pool as well.


00:28:53.260 --> 00:28:55.420
So there's one plugin that's popular


00:28:55.420 --> 00:28:58.640
that wraps Setup Tools SCM,


00:28:58.640 --> 00:29:03.540
which doesn't actually depend on Setup Tools anymore.


00:29:03.540 --> 00:29:06.260
It's just in name, it's still called that.


00:29:06.260 --> 00:29:09.020
So that pulls your version from Git,


00:29:09.020 --> 00:29:12.400
or Mercurial, or Subversion,


00:29:12.400 --> 00:29:15.480
And you can source the versions that way as well.


00:29:15.480 --> 00:29:17.960
- Interesting.


00:29:17.960 --> 00:29:18.780
I really like that.


00:29:18.780 --> 00:29:20.640
I think that's a neat aspect.


00:29:20.640 --> 00:29:25.640
And then configurable project generation,


00:29:25.640 --> 00:29:27.140
we're seeing defaults.


00:29:27.140 --> 00:29:30.880
- Yeah, I don't have too many options with this yet,


00:29:30.880 --> 00:29:34.960
but you can make it a flat layout


00:29:34.960 --> 00:29:36.640
or like a source directory.


00:29:36.640 --> 00:29:40.900
There's an option to add tests,


00:29:40.900 --> 00:29:45.300
which puts more stuff in your pyproject.toml,


00:29:45.300 --> 00:29:51.020
you can add a CLI, which has a very simple template


00:29:51.020 --> 00:29:54.140
for GitHub Actions.


00:29:54.140 --> 00:29:59.860
And then there's a flag for a CLI that will give you a click


00:29:59.860 --> 00:30:03.660
and set up a command line for your package.


00:30:03.660 --> 00:30:06.140
I don't know how directly related this is to anything


00:30:06.140 --> 00:30:09.900
that Hatch does, but the usage of the pyproject.toml


00:30:09.900 --> 00:30:11.860
and then building it as a package,


00:30:11.860 --> 00:30:13.940
something you could install.


00:30:13.940 --> 00:30:18.540
Gives you a really nice way to create a global CLI, right?


00:30:18.540 --> 00:30:20.940
Which is the entry points in the pyproject.toml.


00:30:20.940 --> 00:30:24.180
- Yep, yep, that's what that CLI flag does.


00:30:24.180 --> 00:30:25.420
Yeah, it's very nice.


00:30:25.420 --> 00:30:26.320
- Okay, yeah.


00:30:26.320 --> 00:30:29.540
Then also you say it's two to three times faster


00:30:29.540 --> 00:30:30.620
than equivalent tools.


00:30:30.620 --> 00:30:32.180
That's great.


00:30:32.180 --> 00:30:36.180
- Yeah, it's really just one trick.


00:30:36.180 --> 00:30:40.480
It's just, I make the code not as readable


00:30:40.480 --> 00:30:42.680
by using lazy imports everywhere.


00:30:42.680 --> 00:30:46.520
I just put lazy imports and that's why it's faster.


00:30:46.520 --> 00:30:47.360
- Okay.


00:30:47.360 --> 00:30:49.960
Yeah, because there's a lot of execution paths


00:30:49.960 --> 00:30:52.360
that only use some of the imports in effect, right?


00:30:52.360 --> 00:30:53.280
- Yeah.


00:30:53.280 --> 00:30:54.120
- Cool.


00:30:54.120 --> 00:30:56.840
Let's see.


00:30:56.840 --> 00:30:59.360
Going back to the scripts, Jonathan points out,


00:30:59.360 --> 00:31:01.520
"I love the custom scripts within Hatch.


00:31:01.520 --> 00:31:03.520
"It makes creating build pipelines way easier


00:31:03.520 --> 00:31:05.980
"and moves most of the logic within the Hatch configure


00:31:05.980 --> 00:31:07.940
rather than spreading them around multiple files,


00:31:07.940 --> 00:31:08.940
which is, that's pretty cool.


00:31:08.940 --> 00:31:09.780
- Nice.


00:31:09.780 --> 00:31:13.780
Yeah, that's what I do as well.


00:31:13.780 --> 00:31:15.380
- Yeah, cool.


00:31:15.380 --> 00:31:18.580
- I even use Hatch for non-Python projects,


00:31:18.580 --> 00:31:21.780
just for the scripting ability, yeah.


00:31:21.780 --> 00:31:23.060
- Yeah, cool.


00:31:23.060 --> 00:31:25.940
Well, I mean, Python traditionally had been used


00:31:25.940 --> 00:31:28.060
for a lot of the, you know, called it glue code, right?


00:31:28.060 --> 00:31:30.340
A lot of, well, I really wanna do these other things


00:31:30.340 --> 00:31:31.900
with these other systems and scripts,


00:31:31.900 --> 00:31:33.900
but let me kind of orchestrate that in Python,


00:31:33.900 --> 00:31:35.540
and that sounds a bit...


00:31:35.540 --> 00:31:38.060
A bit like that.


00:31:38.060 --> 00:31:39.140
- Yeah.


00:31:39.140 --> 00:31:41.580
- Let's do a little walkthrough, I think.


00:31:41.580 --> 00:31:42.900
I think that'll be fun.


00:31:42.900 --> 00:31:43.740
- Sure.


00:31:43.740 --> 00:31:47.280
- First of all, I think this is just MK docs,


00:31:47.280 --> 00:31:49.420
but thank you for pointing it out


00:31:49.420 --> 00:31:52.820
that your documentation and your website here


00:31:52.820 --> 00:31:54.040
have hotkeys.


00:31:54.040 --> 00:31:56.180
- Yeah, yeah.


00:31:56.180 --> 00:32:00.460
Yeah, this is MK docs with the material theme,


00:32:00.460 --> 00:32:02.220
which is very nice.


00:32:02.220 --> 00:32:04.140
- Yeah, so it turns out if I just press a dot,


00:32:04.140 --> 00:32:05.260
it goes to the next page.


00:32:05.260 --> 00:32:11.040
if I comment it goes to the previous page and yeah it's actually it's really


00:32:11.040 --> 00:32:16.280
nice it is really nice and before we leave this front page one other thing to


00:32:16.280 --> 00:32:20.920
note to go back to the top just because I'm very happy with it the logo was


00:32:20.920 --> 00:32:28.540
actually generated by Dolly the AI okay yeah fantastic yeah generate logo and


00:32:28.540 --> 00:32:32.620
And then I had a brother of a friend from work


00:32:32.620 --> 00:32:34.540
I like actually touch it up.


00:32:34.540 --> 00:32:35.740
So, yeah.


00:32:35.740 --> 00:32:37.860
- It's a really cool logo.


00:32:37.860 --> 00:32:38.700
I like it.


00:32:38.700 --> 00:32:41.760
I didn't catch on that it was made by Dolly,


00:32:41.760 --> 00:32:43.460
but now I see that.


00:32:43.460 --> 00:32:45.320
I've been doing a lot with Mid Journey


00:32:45.320 --> 00:32:47.720
and I think these AI tools are,


00:32:47.720 --> 00:32:48.980
I think they're a little bit fraught


00:32:48.980 --> 00:32:51.660
with maybe a few moral issues about like,


00:32:51.660 --> 00:32:53.700
well, did you really train it on stuff


00:32:53.700 --> 00:32:55.100
that you were allowed to train on?


00:32:55.100 --> 00:32:57.340
But putting that aside, if they exist,


00:32:57.340 --> 00:32:59.220
Assuming just they exist, they're really neat,


00:32:59.220 --> 00:33:02.180
and there's really amazing stuff you can do with them.


00:33:02.180 --> 00:33:03.020
- Yeah.


00:33:03.020 --> 00:33:04.100
- Yeah, cool.


00:33:04.100 --> 00:33:07.940
I guess maybe a quick sidebar there is


00:33:07.940 --> 00:33:10.100
if you were a project maintainer out there


00:33:10.100 --> 00:33:12.660
and you don't really have a logo,


00:33:12.660 --> 00:33:14.500
drop in on DALI or MidJourney


00:33:14.500 --> 00:33:16.740
and spend half an hour and you probably will.


00:33:16.740 --> 00:33:20.780
But I just think there are so many people


00:33:20.780 --> 00:33:22.100
that build web apps out there


00:33:22.100 --> 00:33:24.060
that don't put hotkeys into them,


00:33:24.060 --> 00:33:26.140
and it is not that hard,


00:33:26.140 --> 00:33:27.820
and it is such a nice experience,


00:33:27.820 --> 00:33:29.180
and it brings you so much closer


00:33:29.180 --> 00:33:30.860
to a native app type of experience.


00:33:30.860 --> 00:33:34.100
Please, put some hotkeys out there for us.


00:33:34.100 --> 00:33:36.160
All right, so pressing dot takes us to the first one.


00:33:36.160 --> 00:33:40.640
So installing Hatch, obviously you can pip install it.


00:33:40.640 --> 00:33:43.820
However, you offer some interesting other areas


00:33:43.820 --> 00:33:44.900
I wanna talk about.


00:33:44.900 --> 00:33:46.860
First of all, my favorite, pipx.


00:33:46.860 --> 00:33:48.380
I love pipx.


00:33:48.380 --> 00:33:52.380
If you've got a tool that you don't directly import


00:33:52.380 --> 00:33:56.100
into your code that does stuff against your Python apps,


00:33:56.100 --> 00:33:58.940
Boy, PipX is almost always a good choice.


00:33:58.940 --> 00:34:00.380
What do you think?


00:34:00.380 --> 00:34:02.100
- Oh yeah, PipX is awesome.


00:34:02.100 --> 00:34:03.500
Yeah.


00:34:03.500 --> 00:34:08.500
Yeah, it just allows you to provide isolated apps,


00:34:08.500 --> 00:34:13.100
for command line apps.


00:34:13.100 --> 00:34:14.580
It manages everything


00:34:14.580 --> 00:34:16.940
and you don't even have to think about it.


00:34:16.940 --> 00:34:18.860
- Yeah, it just creates its own little environment


00:34:18.860 --> 00:34:22.020
and you can say upgrade all my installed CLI tools.


00:34:22.020 --> 00:34:23.860
It's like package manager,


00:34:23.860 --> 00:34:26.540
if the thing that it's managing is built with Python.


00:34:26.540 --> 00:34:27.380
It's great.


00:34:27.380 --> 00:34:29.420
I had chat on the creator of PIVX a while ago.


00:34:29.420 --> 00:34:30.620
So people, if they want to hear more about it,


00:34:30.620 --> 00:34:31.740
they can listen to that show.


00:34:31.740 --> 00:34:32.740
Homebrew, good.


00:34:32.740 --> 00:34:35.740
Conda brew, Mac ports is interesting.


00:34:35.740 --> 00:34:38.220
But the one that stood out to me was Mamba.


00:34:38.220 --> 00:34:39.820
I'm like, wait, what's Mamba?


00:34:39.820 --> 00:34:42.260
- Yeah, I think it's a,


00:34:42.260 --> 00:34:45.740
so, so there's a few-


00:34:45.740 --> 00:34:48.140
- I hadn't heard of that, but yeah.


00:34:48.140 --> 00:34:49.780
- Yeah, I don't use Conda that much,


00:34:49.780 --> 00:34:51.060
but as far as I know,


00:34:51.060 --> 00:34:57.820
there's a few different distributions of conda. So there's anaconda, which gives you like


00:34:57.820 --> 00:35:05.500
a over a gigabyte installed, like massive scientific computing. There's mini conda,


00:35:05.500 --> 00:35:12.660
and mini conda gives you just the bare minimum conda CLI with like package management. And


00:35:12.660 --> 00:35:18.100
that's what most people use, I think. But now there's mamba, which is like mini conda,


00:35:18.100 --> 00:35:24.100
But it pulls from a conda forge by default and conda forge


00:35:24.100 --> 00:35:30.540
It's sort of like our pipe. Yeah where anybody can contribute their own packages


00:35:30.540 --> 00:35:33.060
So I think that's the main difference


00:35:33.060 --> 00:35:36.860
Yeah, it is faster and it was rewritten


00:35:36.860 --> 00:35:41.260
That's what mama is. It's a re-implementation of conda


00:35:41.260 --> 00:35:46.300
the conda package manager and C++ doing parallel downloading and


00:35:47.100 --> 00:35:49.940
other bits of that, which is interesting.


00:35:49.940 --> 00:35:50.780
Cool.


00:35:50.780 --> 00:35:53.020
Well, I don't use either all that much,


00:35:53.020 --> 00:35:55.620
but it's still kind of cool to see there.


00:35:55.620 --> 00:35:58.460
So you could Mamba install Hatch


00:35:58.460 --> 00:36:00.820
if that was your workflow as well, right?


00:36:00.820 --> 00:36:01.660
- Yeah.


00:36:01.660 --> 00:36:05.200
- Okay, so installing it pretty easy.


00:36:05.200 --> 00:36:06.380
If you were to do it,


00:36:06.380 --> 00:36:08.140
if somebody gave you a blank machine


00:36:08.140 --> 00:36:11.180
and said, "Set this up to use Hatch," what would you do?


00:36:11.180 --> 00:36:15.540
- For now, I would do PipX.


00:36:15.540 --> 00:36:16.460
- Yeah. - Yeah.


00:36:16.460 --> 00:36:17.300
- Okay.


00:36:17.300 --> 00:36:19.660
- In future, like we talked about in the beginning,


00:36:19.660 --> 00:36:23.080
I plan to have like an actual executable


00:36:23.080 --> 00:36:26.240
that does the work, like Python does.


00:36:26.240 --> 00:36:28.980
But until then, then probably PIPX, yeah.


00:36:28.980 --> 00:36:32.660
- Okay, so maybe then it would be Homebrew and Winget


00:36:32.660 --> 00:36:36.620
and things like the higher level OS ones, okay.


00:36:36.620 --> 00:36:39.380
All right, so the way we get started,


00:36:39.380 --> 00:36:41.480
if we just say Hatch new,


00:36:41.480 --> 00:36:42.760
and I thought one of the things


00:36:42.760 --> 00:36:44.940
I don't normally do here on the podcast,


00:36:44.940 --> 00:36:45.780
but I think it might be fun,


00:36:45.780 --> 00:36:48.020
is just to kind of go through these steps here


00:36:48.020 --> 00:36:53.220
to see what it's like to get a sense,


00:36:53.220 --> 00:36:54.700
because then I can ask questions.


00:36:54.700 --> 00:36:57.900
So I'll say, hatch new calc.


00:36:57.900 --> 00:36:59.140
I'll call my little app calc.


00:36:59.140 --> 00:37:03.100
And tell us about what we get when we run that.


00:37:03.100 --> 00:37:07.100
Sure, so it makes your package as you named it


00:37:07.100 --> 00:37:10.900
with about.py and in it.py.


00:37:10.900 --> 00:37:13.060
The in it.py obviously makes it--


00:37:13.060 --> 00:37:16.280
turns that directory into a Python package.


00:37:16.280 --> 00:37:20.180
The about.py stores the version by default,


00:37:20.180 --> 00:37:22.860
and that's where it reads it by default.


00:37:22.860 --> 00:37:25.940
It gives you, oh yeah, go ahead.


00:37:25.940 --> 00:37:26.760
- Well, I was just gonna say,


00:37:26.760 --> 00:37:29.140
one of the things I can type now is hatch version,


00:37:29.140 --> 00:37:30.300
and it gives me,


00:37:30.300 --> 00:37:34.340
it gives me, basically pulls out the version


00:37:34.340 --> 00:37:36.900
of about.py, right?


00:37:36.900 --> 00:37:37.820
- Yep.


00:37:37.820 --> 00:37:41.240
Yeah, and you can, if you do the same command again,


00:37:41.240 --> 00:37:45.740
but pass in R like minor, then it can bump it as well.


00:37:45.740 --> 00:37:49.880
- Okay, yeah, so the old version is what it says,


00:37:49.880 --> 00:37:53.220
is 001, new version is 010.


00:37:53.220 --> 00:37:55.920
Can I say build and get 11, something like that?


00:37:55.920 --> 00:37:58.840
No, what would I type to change the last one?


00:37:58.840 --> 00:38:01.000
- RC, do RC.


00:38:01.000 --> 00:38:02.720
- Yeah, okay.


00:38:02.720 --> 00:38:07.000
- Yeah, it's documented to allow arguments as well.


00:38:07.000 --> 00:38:08.080
- Got it, make sure.


00:38:08.080 --> 00:38:11.360
So yeah, then it also gives you a test directory


00:38:11.360 --> 00:38:14.240
that doesn't have any predefined tests,


00:38:14.240 --> 00:38:15.860
but you can add tests to it.


00:38:15.860 --> 00:38:20.580
And then the most important part is the pyproject.toml,


00:38:20.580 --> 00:38:23.660
which has your metadata and your other config.


00:38:23.660 --> 00:38:26.080
- Right.


00:38:26.080 --> 00:38:29.600
So it's got the build system set to be Hatchling,


00:38:29.600 --> 00:38:31.120
and then it's got all the project settings,


00:38:31.120 --> 00:38:32.920
like who is the author,


00:38:32.920 --> 00:38:37.920
what are the requirements, and all that stuff, right?


00:38:37.960 --> 00:38:40.560
- Yep, and from the authored,


00:38:40.560 --> 00:38:42.920
it would have gotten that from Git.


00:38:42.920 --> 00:38:44.360
The default comes from Git,


00:38:44.360 --> 00:38:47.320
so that's why it has the right stuff for you.


00:38:47.320 --> 00:38:49.500
And then down here is testing,


00:38:49.500 --> 00:38:53.460
so some cover stuff and environments.


00:38:53.460 --> 00:38:55.800
- When I type patch new,


00:38:55.800 --> 00:38:57.920
could I have made it ask me those questions


00:38:57.920 --> 00:38:59.280
like who are you and stuff?


00:38:59.280 --> 00:39:01.000
- There is an interactive mode, yeah.


00:39:01.000 --> 00:39:02.520
- Okay, yeah.


00:39:02.520 --> 00:39:07.440
Yeah, so you also, as part of this pyproject.toml,


00:39:07.440 --> 00:39:09.240
you create some of these commands.


00:39:09.240 --> 00:39:11.320
These are the scripts you were talking about a little bit,


00:39:11.320 --> 00:39:12.160
right? - Yeah.


00:39:12.160 --> 00:39:14.800
- Like you've got the test and other options you can run.


00:39:14.800 --> 00:39:19.800
- Yeah, so this default example down there


00:39:19.800 --> 00:39:23.160
has environment, which is just default,


00:39:23.160 --> 00:39:24.680
which is a little bit special.


00:39:24.680 --> 00:39:26.920
It just means you'll have to add a prefix


00:39:26.920 --> 00:39:28.240
on the command line.


00:39:28.240 --> 00:39:30.120
And so there's two scripts by default,


00:39:30.120 --> 00:39:34.480
a cov, so you could do like a hatch run cov,


00:39:34.480 --> 00:39:37.320
and it would run pytest with coverage.


00:39:37.320 --> 00:39:39.960
And then another command is no-cov.


00:39:39.960 --> 00:39:45.920
- Yeah, I can do hatch test, hatch run test.


00:39:45.920 --> 00:39:46.760
That a thing?


00:39:46.760 --> 00:39:47.840
- There is no test command.


00:39:47.840 --> 00:39:49.100
You could do pytest.


00:39:49.100 --> 00:39:51.760
- Okay.


00:39:51.760 --> 00:39:54.020
- So if you do hatch run pytest, you could, yeah.


00:39:54.020 --> 00:39:56.800
- Okay.


00:39:56.800 --> 00:39:57.640
Yeah, excellent.


00:39:57.640 --> 00:39:58.460
That's really cool.


00:39:58.460 --> 00:40:04.120
Yeah, so it basically creates the structure for you.


00:40:04.120 --> 00:40:06.960
And the workflow that we just discussed


00:40:06.960 --> 00:40:11.660
would be if I've got a folder and I want to start from absolute scratch,


00:40:11.660 --> 00:40:17.220
I want to create the entire directory structure through a hatch.


00:40:17.220 --> 00:40:20.980
But there's also a way I can go to an existing one


00:40:20.980 --> 00:40:24.860
and convert it to hatch or upgrade it to hatch, right?


00:40:24.860 --> 00:40:34.540
>> Yes. Me and other contributors have done it so much that most of the edge cases are gone.


00:40:34.540 --> 00:40:40.740
So it can take pretty much any setup.py and turn it


00:40:40.740 --> 00:40:45.420
into a Hatch PyProject.toml.


00:40:45.420 --> 00:40:46.820
It's pretty good now.


00:40:46.820 --> 00:40:51.060
OK, and because it doesn't actually


00:40:51.060 --> 00:40:56.100
need Hatch the CLI, the environment tool to do that,


00:40:56.100 --> 00:41:00.980
to run and build, you could just use that to get your PyProject.toml


00:41:00.980 --> 00:41:04.340
out and use Hatchling as a build engine, right?


00:41:04.340 --> 00:41:05.760
but still just keep going.


00:41:05.760 --> 00:41:07.200
Yeah. - Yeah, exactly.


00:41:07.200 --> 00:41:09.040
- Okay, so people are sitting out there like,


00:41:09.040 --> 00:41:11.400
I really should be using pyproject.toml,


00:41:11.400 --> 00:41:15.340
but you know, inertia, I don't really wanna do it.


00:41:15.340 --> 00:41:19.180
Like, hatch new init might do it, right?


00:41:19.180 --> 00:41:20.920
- Yeah, yeah, that's not true.


00:41:20.920 --> 00:41:24.880
Before you time out, if you do which Python,


00:41:24.880 --> 00:41:29.040
maybe I can just illustrate something.


00:41:29.040 --> 00:41:30.520
- Hold on, I edited that one, there you go.


00:41:30.520 --> 00:41:33.080
- Okay, and if you do hatch run,


00:41:33.080 --> 00:41:36.740
which Python three, it will show you that it's actually


00:41:36.740 --> 00:41:39.300
in a managed virtual environment.


00:41:39.300 --> 00:41:40.340
- Yeah, okay.


00:41:40.340 --> 00:41:44.220
So it's created a virtual environment over in,


00:41:44.220 --> 00:41:46.400
at least for me, library application support,


00:41:46.400 --> 00:41:49.300
hatch environments and so on, based on the project name.


00:41:49.300 --> 00:41:52.140
And then it has some big long deal on that.


00:41:52.140 --> 00:41:53.340
- It does, yeah.


00:41:53.340 --> 00:41:55.220
- Yeah, so. - It's just a checksum.


00:41:55.220 --> 00:41:57.580
- Okay, what is that checksum based on?


00:41:57.580 --> 00:41:59.620
The reason I ask is, what do I change


00:41:59.620 --> 00:42:01.020
to make this no longer work?


00:42:01.020 --> 00:42:01.520
What--


00:42:01.520 --> 00:42:03.640
[LAUGHTER]


00:42:03.640 --> 00:42:07.360
So I do that because it's possible that somewhere else


00:42:07.360 --> 00:42:10.740
on your machine, you might have another project, maybe


00:42:10.740 --> 00:42:13.920
a fork of Kalki with the same name.


00:42:13.920 --> 00:42:14.920
So I have to add a hash.


00:42:14.920 --> 00:42:18.040
It's a very popular library, so it's likely.


00:42:18.040 --> 00:42:19.760
So that's why I do that, yeah.


00:42:19.760 --> 00:42:20.720
I see, OK.


00:42:20.720 --> 00:42:23.160
That's like a hash of the path to where the project is.


00:42:23.160 --> 00:42:23.800
Right, exactly.


00:42:23.800 --> 00:42:25.760
OK.


00:42:25.760 --> 00:42:29.240
So a lot of projects, a lot of management tools


00:42:29.240 --> 00:42:31.800
work this way, Conda works this way, for example,


00:42:31.800 --> 00:42:34.160
where there's some other place


00:42:34.160 --> 00:42:36.280
where the virtual environments live.


00:42:36.280 --> 00:42:38.680
Is there a way, you know, another workflow


00:42:38.680 --> 00:42:41.520
that's pretty common is to have the virtual environment


00:42:41.520 --> 00:42:44.240
in a VNV folder at the root of the project.


00:42:44.240 --> 00:42:46.920
Is there a way when I create my project to say,


00:42:46.920 --> 00:42:49.920
I want a local ENV?


00:42:49.920 --> 00:42:53.760
- Not at project creation time,


00:42:53.760 --> 00:42:56.800
but there is a way in either HatchConfig


00:42:56.800 --> 00:42:58.800
or in pyproject.toml.


00:42:58.800 --> 00:43:00.440
they're able to change that.


00:43:00.440 --> 00:43:01.280
Yeah.


00:43:01.280 --> 00:43:03.360
And that was just documented on the site.


00:43:03.360 --> 00:43:04.200
Yeah.


00:43:04.200 --> 00:43:05.160
- Yeah. Okay.


00:43:05.160 --> 00:43:09.240
And so, yeah, the hatch config is one of the things


00:43:09.240 --> 00:43:10.880
I would do.


00:43:10.880 --> 00:43:13.360
There's a lot of cool, like CLI tools where you can ask it


00:43:13.360 --> 00:43:16.680
to like, show me the details of whatever it is.


00:43:16.680 --> 00:43:20.520
So what would I put say into the config to say,


00:43:20.520 --> 00:43:25.520
create my VE and V locally and call it what?


00:43:25.520 --> 00:43:27.360
Is it this dirs-vee-e-e?


00:43:27.360 --> 00:43:28.840
- Yeah, there's an env.


00:43:28.840 --> 00:43:29.680
- Yeah, env.


00:43:29.680 --> 00:43:30.880
What would I put in there?


00:43:30.880 --> 00:43:36.200
- You would have a subtable for virtual


00:43:36.200 --> 00:43:40.880
and then have the path be just .vend basically.


00:43:40.880 --> 00:43:42.680
- Right, okay, so like a ./,


00:43:42.680 --> 00:43:44.600
whatever you want to call it locally.


00:43:44.600 --> 00:43:45.440
- Yeah.


00:43:45.440 --> 00:43:51.400
- Is this, I guess I could do hatch find config


00:43:51.400 --> 00:43:53.880
or config find, I guess.


00:43:53.880 --> 00:43:55.080
- Config find. - Config find.


00:43:55.080 --> 00:43:58.480
- Right, and that will, so this is a global,


00:43:58.480 --> 00:44:01.900
like how do my projects get started using Hatch


00:44:01.900 --> 00:44:04.760
from my machine, not a per project deal, right?


00:44:04.760 --> 00:44:05.600
- Yeah.


00:44:05.600 --> 00:44:07.480
- That's cool.


00:44:07.480 --> 00:44:10.960
So kind of like get config, once I set up my machine,


00:44:10.960 --> 00:44:14.080
if I say, well, I like my virtual environments like this,


00:44:14.080 --> 00:44:17.200
then I'll be okay, right?


00:44:17.200 --> 00:44:20.840
- Yeah, it makes it easier to distribute tooling,


00:44:20.840 --> 00:44:24.240
like for if you're managing like some corporate environment


00:44:24.240 --> 00:44:26.740
where you're using Hatch for everything,


00:44:26.740 --> 00:44:31.200
then it's nice to have a config that you can modify


00:44:31.200 --> 00:44:32.920
just as a machine level,


00:44:32.920 --> 00:44:35.520
then every project will do the same behavior.


00:44:35.520 --> 00:44:38.760
- Just as a team to say, look, we always want tests.


00:44:38.760 --> 00:44:40.600
We always want this other thing that we call it,


00:44:40.600 --> 00:44:43.220
that we always want this default library.


00:44:43.220 --> 00:44:46.000
Sorry, we want this default license, right?


00:44:46.000 --> 00:44:49.160
We don't want MIT, we want, you know,


00:44:49.160 --> 00:44:51.900
corp.inc or whatever license that we use.


00:44:51.900 --> 00:44:57.820
- So a quick question from ZL out there, I think is relevant.


00:44:57.820 --> 00:45:01.020
Is this useful for application development, not libraries?


00:45:01.020 --> 00:45:03.580
- I would say it is.


00:45:03.580 --> 00:45:07.580
- Like a Flask app or a FastAPI app, like would this be relevant?


00:45:07.580 --> 00:45:09.100
- Yeah.


00:45:09.100 --> 00:45:14.540
So especially with the environment management, that's kind of what


00:45:14.540 --> 00:45:16.780
applications we use anyway.


00:45:16.780 --> 00:45:20.260
The missing feature, of course, like the other person asked,


00:45:20.260 --> 00:45:22.860
is the lock files.


00:45:22.860 --> 00:45:25.220
For any app, you're going to want


00:45:25.220 --> 00:45:27.780
to be able to reproducibly build the app.


00:45:27.780 --> 00:45:31.540
So right now, there's not a way built in,


00:45:31.540 --> 00:45:34.300
other than using an environment with like pip-tools


00:45:34.300 --> 00:45:35.860
or something.


00:45:35.860 --> 00:45:38.900
So I'm going to add that plugin interface soon.


00:45:38.900 --> 00:45:40.340
Yeah.


00:45:40.340 --> 00:45:40.900
Interesting.


00:45:40.900 --> 00:45:43.460
Does pip-tools work with pyproject.toml?


00:45:43.460 --> 00:45:43.980
Do you know?


00:45:43.980 --> 00:45:44.580
It does now.


00:45:44.580 --> 00:45:45.500
Yeah, it does.


00:45:45.500 --> 00:45:46.300
OK.


00:45:46.300 --> 00:45:51.180
Yeah, I've only used it with requirements.in and then generate the requirements.txt, but


00:45:51.180 --> 00:45:59.420
interesting. Yeah, they added that last summer, I think. Yeah. I'm so behind the times on this.


00:45:59.420 --> 00:46:04.540
You know, these workflows, I'm sort of joking, but also not. These workflows, you kind of get


00:46:04.540 --> 00:46:08.220
into like, well, here's how I build these apps. Here's how I manage my requirements. And then you


00:46:08.220 --> 00:46:12.060
just, you know, tunnel. I think a lot of people just go, okay, well, that's working for me. I'm


00:46:12.060 --> 00:46:14.140
I'm doing that, you know?


00:46:14.140 --> 00:46:15.580
- Yeah, me too, me too.


00:46:15.580 --> 00:46:16.580
- Yeah, yeah.


00:46:16.580 --> 00:46:20.060
And then so if I want to,


00:46:20.060 --> 00:46:24.240
so for example, when I asked which Python,


00:46:24.240 --> 00:46:26.860
it said the one from Homebrew you've installed, Sili,


00:46:26.860 --> 00:46:29.040
of course, that's your global Python.


00:46:29.040 --> 00:46:32.500
If I want to activate a virtual environment,


00:46:32.500 --> 00:46:34.740
if I want to get into like this application mode,


00:46:34.740 --> 00:46:37.140
I would do a Hatch Shell, right?


00:46:37.140 --> 00:46:37.960
- Yes.


00:46:37.960 --> 00:46:41.260
- And because I have an awesome, oh my posh,


00:46:41.260 --> 00:46:43.980
you can see my prompt here is now taking on the calc


00:46:43.980 --> 00:46:47.100
E3.11.2 environment as part of my prompt.


00:46:47.100 --> 00:46:50.400
So, yeah, that's the one.


00:46:50.400 --> 00:46:52.700
So it's working now if I ask just straight up,


00:46:52.700 --> 00:46:56.780
which Python, a virtual environment one, right?


00:46:56.780 --> 00:46:57.600
- Yeah.


00:46:57.600 --> 00:46:59.820
- And I can do pip list and so on,


00:46:59.820 --> 00:47:03.900
but there's also ways I think I recall in Hatch


00:47:03.900 --> 00:47:06.740
to like show me my dependencies and get a list of.


00:47:06.740 --> 00:47:08.540
So how do I?


00:47:08.540 --> 00:47:11.740
- Patch, dep, show.


00:47:11.740 --> 00:47:13.140
- Dep, show.


00:47:13.140 --> 00:47:14.220
- Yeah.


00:47:14.220 --> 00:47:15.060
- Is it show, dep?


00:47:15.060 --> 00:47:16.140
- Table.


00:47:16.140 --> 00:47:16.980
- Table.


00:47:16.980 --> 00:47:18.300
- So three different options, yeah.


00:47:18.300 --> 00:47:19.140
- Yeah, okay.


00:47:19.140 --> 00:47:20.820
- That's your environment.


00:47:20.820 --> 00:47:23.180
- Yeah, so these, I only have right now two dependencies,


00:47:23.180 --> 00:47:25.380
pytest and pytest-cov.


00:47:25.380 --> 00:47:26.220
- Yeah.


00:47:26.220 --> 00:47:29.960
- Or I could do requirement.


00:47:29.960 --> 00:47:33.620
- Yep, and that would spit out the--


00:47:33.620 --> 00:47:34.940
- Same as the table, right?


00:47:34.940 --> 00:47:35.940
Just plain text.


00:47:35.940 --> 00:47:37.900
- Yeah, just like requirements.txt.


00:47:37.900 --> 00:47:39.260
- Yeah. - Got it, okay.


00:47:39.260 --> 00:47:41.180
Yeah, excellent.


00:47:41.180 --> 00:47:43.820
What do you recommend?


00:47:43.820 --> 00:47:46.400
So there's the hatch run commands,


00:47:46.400 --> 00:47:47.340
which will use the environment,


00:47:47.340 --> 00:47:49.840
or you could just go into the shell and run it.


00:47:49.840 --> 00:47:54.840
Or if I'm sneaky and I put my virtual environment in there,


00:47:54.840 --> 00:47:58.240
I might have something that automatically detects


00:47:58.240 --> 00:47:59.600
that environment and picks it up.


00:47:59.600 --> 00:48:01.540
So for example, PyCharm might go,


00:48:01.540 --> 00:48:03.540
you know what, I see a VE in V folder,


00:48:03.540 --> 00:48:05.720
we'll use that and just grab it


00:48:05.720 --> 00:48:09.160
not care about hatch directly.


00:48:09.160 --> 00:48:13.260
That's actually one of the reasons I was asking about putting it locally is it's kind of a


00:48:13.260 --> 00:48:20.800
hassle to find that thing and tell your editor, "Go find it over here," whereas it automatically


00:48:20.800 --> 00:48:23.360
finds the top level of project variants.


00:48:23.360 --> 00:48:24.360
Yeah, definitely.


00:48:24.360 --> 00:48:32.200
Yeah, so you can do, as we talked about, setting in the current directory like a .vnv.


00:48:32.200 --> 00:48:37.200
And yeah, Python, VS Code, they'll pick it up


00:48:37.200 --> 00:48:39.640
'cause it is just a virtual environment at the end of the day.


00:48:39.640 --> 00:48:41.240
Nothing too special.


00:48:41.240 --> 00:48:42.520
- Got it.


00:48:42.520 --> 00:48:44.160
- Yeah, it'll work out in the box.


00:48:44.160 --> 00:48:45.960
- Yeah, and Colette's out there in the audience


00:48:45.960 --> 00:48:47.040
has got us covered.


00:48:47.040 --> 00:48:51.000
Piptools command is pipcompile rebuild output file


00:48:51.000 --> 00:48:55.160
such and such pyproject.txt from pyproject.toml.


00:48:55.160 --> 00:48:56.000
Yeah, cool.


00:48:56.000 --> 00:48:56.920
- Nice.


00:48:56.920 --> 00:48:59.360
- Yeah, and variations on that, I suspect.


00:49:01.880 --> 00:49:05.140
So one thing that I was thinking about this,


00:49:05.140 --> 00:49:07.120
that I expected Hatch to do, and maybe it does,


00:49:07.120 --> 00:49:09.580
and maybe it doesn't, I just don't know,


00:49:09.580 --> 00:49:12.520
is suppose I want to use requests for Kalki.


00:49:12.520 --> 00:49:14.960
Like Kalki can't run locally.


00:49:14.960 --> 00:49:17.240
It needs its calculator API service


00:49:17.240 --> 00:49:18.120
that it's going to connect to.


00:49:18.120 --> 00:49:20.920
So it needs a request or HTTPS or something.


00:49:20.920 --> 00:49:21.760
- Yeah.


00:49:21.760 --> 00:49:24.160
- How would I, is there a way with Hatch to say,


00:49:24.160 --> 00:49:26.520
I have a new requirement, set that up,


00:49:26.520 --> 00:49:29.520
put it in the PyProject Toml, install it?


00:49:29.520 --> 00:49:34.480
And that's going to come with the Lockfile plugin.


00:49:34.480 --> 00:49:38.680
I figured it wouldn't make sense to add those commands


00:49:38.680 --> 00:49:41.560
until I knew how locking would work.


00:49:41.560 --> 00:49:45.560
Because adding and removing always


00:49:45.560 --> 00:49:47.400
hits the locking logic.


00:49:47.400 --> 00:49:49.520
And since there wasn't locking, it


00:49:49.520 --> 00:49:52.800
didn't make sense to me to add those commands.


00:49:52.800 --> 00:49:54.760
So it's going to come soon.


00:49:54.760 --> 00:49:58.560
So right now, you would just modify your pyproject.toml


00:49:58.560 --> 00:50:00.320
until those are added.


00:50:00.320 --> 00:50:03.080
- And then I think there's a way where


00:50:03.080 --> 00:50:05.400
Hatch looked at your PyProject Toml


00:50:05.400 --> 00:50:08.640
and said, okay, you're gonna need these dependencies,


00:50:08.640 --> 00:50:09.800
right, when you run it?


00:50:09.800 --> 00:50:14.280
- In what sense?


00:50:14.280 --> 00:50:16.680
- I thought it installed the dependencies


00:50:16.680 --> 00:50:19.640
in PyProject Toml, even if it won't edit it.


00:50:19.640 --> 00:50:21.680
Like if I put something in there and I try to run it,


00:50:21.680 --> 00:50:23.320
it'll say I need this.


00:50:23.320 --> 00:50:25.920
- Yeah, it'll sync it automatically, yeah.


00:50:25.920 --> 00:50:28.480
- Oh, what command do I use to do that one?


00:50:28.480 --> 00:50:31.980
either a run command or the shell command.


00:50:31.980 --> 00:50:33.440
- Right, I see.


00:50:33.440 --> 00:50:35.160
Oh, even the shell will do it, huh?


00:50:35.160 --> 00:50:36.000
- Yeah.


00:50:36.000 --> 00:50:36.840
Yeah, so if you do,


00:50:36.840 --> 00:50:41.640
if you do hatch run pip list, for example.


00:50:41.640 --> 00:50:44.720
- Yeah.


00:50:44.720 --> 00:50:46.760
- Okay, now in pyproject.toml,


00:50:46.760 --> 00:50:50.680
add like requests, maybe to the dependency.


00:50:50.680 --> 00:50:55.760
- Yeah, yeah, yeah.


00:50:55.760 --> 00:50:57.760
Um


00:50:57.760 --> 00:51:03.120
Right again, yeah


00:51:03.120 --> 00:51:05.200
There you go. I see you


00:51:05.200 --> 00:51:10.000
Yeah, right now I have requests and like friends requests. Yeah. Yeah. Yeah


00:51:10.000 --> 00:51:12.720
Okay, that's pretty cool


00:51:12.720 --> 00:51:19.440
Nice and then i'm looking forward to the lock stuff because I absolutely love pip-tools. I think it is a glorious


00:51:19.440 --> 00:51:24.000
Way I used for a while I used um


00:51:24.000 --> 00:51:27.480
I'm like, you know, could you just package this up?


00:51:27.480 --> 00:51:30.400
And so now I just started periodically,


00:51:30.400 --> 00:51:31.440
I just go, okay, I'm gonna use pip-tools


00:51:31.440 --> 00:51:33.440
and just ask, how has the world changed?


00:51:33.440 --> 00:51:36.720
And then update my stuff in a more sane way.


00:51:36.720 --> 00:51:42.120
- Yeah, yeah, it was a bit noisy for us too.


00:51:42.120 --> 00:51:46.120
At work, we have like a custom dependency update logic


00:51:46.120 --> 00:51:48.120
that we can use to update our stuff.


00:51:48.120 --> 00:51:50.720
And so we're like, okay, I'm gonna use pip-tools


00:51:50.720 --> 00:51:52.720
and just ask, how has the world changed?


00:51:52.720 --> 00:51:55.560
dependency update logic as well.


00:51:55.560 --> 00:51:57.440
I think there is an open feature request


00:51:57.440 --> 00:51:59.960
for a dependent bot to chunk the updates,


00:51:59.960 --> 00:52:01.840
but I don't know if it has happened.


00:52:01.840 --> 00:52:04.640
- Yeah, I think I've seen one of those for a couple years


00:52:04.640 --> 00:52:07.400
and there was like a hundred plus one, me too, me too.


00:52:07.400 --> 00:52:09.300
Like I got to review these things.


00:52:09.300 --> 00:52:12.440
I don't know if it's there.


00:52:12.440 --> 00:52:14.000
It's not there on my projects.


00:52:14.000 --> 00:52:18.720
It's still, I'll get 20, I'll do a pip compile update


00:52:18.720 --> 00:52:20.760
and I'll push that and I'll get like 20 messages.


00:52:20.760 --> 00:52:21.920
These are no longer required.


00:52:21.920 --> 00:52:23.120
I'm like, okay, thanks.


00:52:23.120 --> 00:52:25.280
(laughing)


00:52:25.280 --> 00:52:26.360
Could you just batch them?


00:52:26.360 --> 00:52:27.200
You know, anyway.


00:52:27.200 --> 00:52:28.280
- Yeah.


00:52:28.280 --> 00:52:31.120
- Okay, so, so calc is coming along here.


00:52:31.120 --> 00:52:32.880
Let's just imagine that it does good stuff.


00:52:32.880 --> 00:52:34.280
I haven't even written any code for it,


00:52:34.280 --> 00:52:36.160
but it depends upon requests.


00:52:36.160 --> 00:52:37.080
So that's a start.


00:52:37.080 --> 00:52:42.800
The next step, going kind of forking


00:52:42.800 --> 00:52:45.360
on the various possible definitions


00:52:45.360 --> 00:52:46.480
of what packaging is,


00:52:46.480 --> 00:52:48.120
a next step for this thing might be,


00:52:48.120 --> 00:52:51.420
I want to put it onto PyPI or create a wheel I can share.


00:52:51.420 --> 00:52:53.740
So Hatch also supports that, right?


00:52:53.740 --> 00:52:59.580
- Yeah, so first you have to create the artifacts.


00:52:59.580 --> 00:53:01.900
So you would do Hatch build,


00:53:01.900 --> 00:53:04.300
and that would build by default


00:53:04.300 --> 00:53:07.420
both the source distribution and the wheel.


00:53:07.420 --> 00:53:08.580
Yeah. - Okay.


00:53:08.580 --> 00:53:12.060
- So now in your current directory,


00:53:12.060 --> 00:53:13.620
just like the other tools,


00:53:13.620 --> 00:53:15.180
there's gonna be a dist,


00:53:15.180 --> 00:53:16.940
d-i-s-t,


00:53:16.940 --> 00:53:20.620
that now has those.


00:53:20.620 --> 00:53:23.180
And if you run a hatch publish,


00:53:23.180 --> 00:53:26.700
that would put it on PyPI by default.


00:53:26.700 --> 00:53:30.900
And it would prompt you for your username.


00:53:30.900 --> 00:53:32.420
- I'm not entering that.


00:53:32.420 --> 00:53:34.380
I don't wanna own Kalki on PyPI.


00:53:34.380 --> 00:53:35.220
No, just kidding.


00:53:35.220 --> 00:53:36.860
But yeah, I don't think I have it configured,


00:53:36.860 --> 00:53:37.820
so it wouldn't really do anything.


00:53:37.820 --> 00:53:41.140
But it would, it would go and put it on PyPI, right?


00:53:41.140 --> 00:53:42.460
- Yeah, yeah. - Potentially.


00:53:42.460 --> 00:53:45.460
Yeah, and that's pretty straightforward.


00:53:45.460 --> 00:53:47.420
You also point out in the docs that


00:53:49.900 --> 00:53:55.140
CI build wheel and things like TOCs,


00:53:55.140 --> 00:53:57.540
you could be the build-- just Hatchling could be the build


00:53:57.540 --> 00:53:59.540
system for that, right?


00:53:59.540 --> 00:54:02.860
Yeah, every-- yeah, because Hatch--


00:54:02.860 --> 00:54:04.340
Hatch does a lot.


00:54:04.340 --> 00:54:06.660
So you can use parts.


00:54:06.660 --> 00:54:09.540
Say you wanted to only use environment management


00:54:09.540 --> 00:54:13.060
to replace TOCs or NOCs, you could do that.


00:54:13.060 --> 00:54:18.220
If you wanted to only use Hatchling with CI build wheel


00:54:18.220 --> 00:54:20.300
or other tools, you could do that.


00:54:20.300 --> 00:54:23.900
If you wanted to only use the version management,


00:54:23.900 --> 00:54:24.740
you could do that.


00:54:24.740 --> 00:54:27.380
It's kind of choose whatever you want.


00:54:27.380 --> 00:54:29.360
Yeah, you're not locked in.


00:54:29.360 --> 00:54:30.200
- Yeah.


00:54:30.200 --> 00:54:32.700
Yeah, so the last thing I could do is publish,


00:54:32.700 --> 00:54:34.580
but I'm not really gonna go.


00:54:34.580 --> 00:54:36.900
- Yeah, yeah.


00:54:36.900 --> 00:54:41.260
- There's also a way to set in the config file.


00:54:41.260 --> 00:54:43.420
You said that if I set into the config file


00:54:43.420 --> 00:54:47.100
under the publish index, disable true,


00:54:47.100 --> 00:54:48.660
where you can make it confirm


00:54:48.660 --> 00:54:51.180
rather than just straight up publishing it, right?


00:54:51.180 --> 00:54:52.940
- Yeah, that was a feature request.


00:54:52.940 --> 00:54:54.860
Yep, so. - Yeah, cool.


00:54:54.860 --> 00:54:58.900
Another thing that I've always stumbled on


00:54:58.900 --> 00:55:00.580
when I do this, at least with Twine,


00:55:00.580 --> 00:55:04.100
is I'll have some project, I've done this,


00:55:04.100 --> 00:55:06.740
I've published a version, later I'll come back to it,


00:55:06.740 --> 00:55:08.820
I'll make some changes, I'll increment the version.


00:55:08.820 --> 00:55:10.120
I used to have to do that manually,


00:55:10.120 --> 00:55:13.380
but now I can just do a hatched version


00:55:14.700 --> 00:55:19.700
And then, you know, then like, I could build one again.


00:55:19.700 --> 00:55:22.020
- Minor. - Minor, yeah.


00:55:22.020 --> 00:55:22.860
- There we go.


00:55:22.860 --> 00:55:24.180
It'll automatically change it.


00:55:24.180 --> 00:55:25.940
And that changes the code, which is great.


00:55:25.940 --> 00:55:29.540
So now if I do a hatch build, which is really nice,


00:55:29.540 --> 00:55:31.020
it'll create a new one.


00:55:31.020 --> 00:55:32.660
But if I look in my project,


00:55:32.660 --> 00:55:34.500
I've got the old one and the new one,


00:55:34.500 --> 00:55:36.420
and you can't republish the old one, I don't think.


00:55:36.420 --> 00:55:38.580
So what happens if I just say publish now,


00:55:38.580 --> 00:55:42.100
and I've already got 0.1.0 out there?


00:55:42.100 --> 00:55:47.100
- Yeah, so you can do hatch build dash C for clean,


00:55:47.100 --> 00:55:50.660
and it should clean it first.


00:55:50.660 --> 00:55:54.580
- Okay, that's cool, because then I can just say


00:55:54.580 --> 00:55:56.780
hatch publish and not worry about conflicts.


00:55:56.780 --> 00:56:01.780
- Yeah, also anything that exists already on PyPI,


00:56:01.780 --> 00:56:05.340
it will ignore, it'll put a warning,


00:56:05.340 --> 00:56:07.860
but it won't fail the command.


00:56:07.860 --> 00:56:10.700
I think time by default does fail.


00:56:10.700 --> 00:56:11.540
- I think it does as well. - And you have to pass


00:56:11.540 --> 00:56:13.940
a blank, so I do the inverse,


00:56:13.940 --> 00:56:15.980
because that was frustrating to me too.


00:56:15.980 --> 00:56:18.660
So I do the opposite, yeah.


00:56:18.660 --> 00:56:20.300
- Perfect, I love it.


00:56:20.300 --> 00:56:23.420
Okay, yeah, that's a really cool aspect.


00:56:23.420 --> 00:56:28.940
And so, yeah, that was, I guess, walking through that.


00:56:28.940 --> 00:56:34.100
I think it was neat to just kind of explore it together,


00:56:34.100 --> 00:56:36.540
so thanks for talking me through that.


00:56:36.540 --> 00:56:39.460
- Yeah, yeah, and yeah,


00:56:39.460 --> 00:56:42.280
The past month I've been pretty busy at work,


00:56:42.280 --> 00:56:45.800
but I'm going to pick up development again next week


00:56:45.800 --> 00:56:47.200
for Hatch.


00:56:47.200 --> 00:56:52.400
There's a bunch of open feature requests I have to crank out.


00:56:52.400 --> 00:56:54.600
Yeah, that's a pretty popular project on GitHub


00:56:54.600 --> 00:56:56.320
with 3.7 thousand stars.


00:56:56.320 --> 00:57:00.200
So I suspect there's some user feedback.


00:57:00.200 --> 00:57:01.640
Yep.


00:57:01.640 --> 00:57:02.560
Yep.


00:57:02.560 --> 00:57:04.880
So I guess the main next features


00:57:04.880 --> 00:57:09.800
are the lock file plugin mechanism.


00:57:09.800 --> 00:57:14.560
And also people are asking about workspaces,


00:57:14.560 --> 00:57:18.120
which is basically like, kind of like editable installs,


00:57:18.120 --> 00:57:20.080
but more built in and fundamental.


00:57:20.080 --> 00:57:25.860
So I'm gonna add that, especially useful for monorepos.


00:57:25.860 --> 00:57:28.540
- Oh, right, okay.


00:57:28.540 --> 00:57:34.320
You don't necessarily wanna hatch build all of Google


00:57:34.320 --> 00:57:35.520
or whatever, right?


00:57:35.520 --> 00:57:37.960
- Right, right, right.


00:57:37.960 --> 00:57:41.120
- So a workspace is like a view into the monorepo.


00:57:41.120 --> 00:57:43.720
I said, I know there's like 500 projects here


00:57:43.720 --> 00:57:44.800
and they all have their things,


00:57:44.800 --> 00:57:48.680
but I want the web app and the data layer.


00:57:48.680 --> 00:57:49.600
That's it.


00:57:49.600 --> 00:57:51.160
Something like that. - Right, exactly, yeah.


00:57:51.160 --> 00:57:52.500
- Okay.


00:57:52.500 --> 00:57:54.280
That sounds useful.


00:57:54.280 --> 00:57:59.280
- Yeah, and I'm modeling it after cargo workspaces and Rust.


00:57:59.280 --> 00:58:02.160
I worked with that recently


00:58:02.160 --> 00:58:05.560
And I think they have pretty good config


00:58:05.560 --> 00:58:10.280
and a model of how local development works.


00:58:10.280 --> 00:58:11.680
>> Okay, yeah, that sounds really good.


00:58:11.680 --> 00:58:13.920
>> Yeah, if you want a preview of what Hatch will look like,


00:58:13.920 --> 00:58:16.720
it's basically cargo workspaces.


00:58:16.720 --> 00:58:21.080
>> Nice. Jonathan out there says,


00:58:21.080 --> 00:58:23.720
that sounds like music to his ears,


00:58:23.720 --> 00:58:25.520
definitely waiting on the workspaces feature


00:58:25.520 --> 00:58:27.600
for our monorepo work.


00:58:27.600 --> 00:58:29.720
>> Nice.


00:58:29.720 --> 00:58:32.620
And then also Ryan is asking you,


00:58:32.620 --> 00:58:36.240
any chance there could be a package build target?


00:58:36.240 --> 00:58:39.760
I'm using Packs via Talks currently.


00:58:39.760 --> 00:58:41.020
- Yes, that's possible.


00:58:41.020 --> 00:58:43.640
One thing that's great about plugins


00:58:43.640 --> 00:58:46.840
is I don't have to do every feature.


00:58:46.840 --> 00:58:48.200
Anybody can do that.


00:58:48.200 --> 00:58:52.640
So we do have a few to the docs and go to the top,


00:58:52.640 --> 00:58:53.800
plugins,


00:58:53.800 --> 00:58:58.680
plugins,


00:58:58.680 --> 00:59:00.160
builder.


00:59:00.160 --> 00:59:02.160
>> Oh, builder, yeah.


00:59:02.160 --> 00:59:04.720
>> And then reference.


00:59:04.720 --> 00:59:05.280
Yep.


00:59:05.280 --> 00:59:07.360
And then, yeah, so known third party.


00:59:07.360 --> 00:59:11.800
So here's some examples of third party builder plugins.


00:59:11.800 --> 00:59:14.200
So the build command that you ran,


00:59:14.200 --> 00:59:19.000
it has an option to output a target, a named target,


00:59:19.000 --> 00:59:21.640
other than we will run sdist.


00:59:21.640 --> 00:59:23.760
So you can write an arbitrary builder


00:59:23.760 --> 00:59:25.880
and build those targets.


00:59:25.880 --> 00:59:26.920
So yeah.


00:59:26.920 --> 00:59:30.360
- Okay, it's probably not super hard to do, I'm guessing,


00:59:30.360 --> 00:59:32.560
to just like basically bundle up the commands


00:59:32.560 --> 00:59:33.960
to build the pecs.


00:59:33.960 --> 00:59:35.600
- Yeah, and just implement the interface,


00:59:35.600 --> 00:59:37.240
and that's all you gotta do.


00:59:37.240 --> 00:59:38.800
- Yeah, okay, yeah, excellent.


00:59:38.800 --> 00:59:40.960
Good to hear.


00:59:40.960 --> 00:59:45.960
So I vote for the lock file management,


00:59:45.960 --> 00:59:47.960
the dependency management.


00:59:47.960 --> 00:59:51.360
I'm excited to hear that that's coming.


00:59:51.360 --> 00:59:52.840
- Yep, that's coming next.


00:59:54.960 --> 00:59:58.160
Are you thinking of building on something like pip-tools


00:59:58.160 --> 00:59:59.360
or doing your own?


00:59:59.360 --> 01:00:07.560
I wouldn't feel confident doing my own


01:00:07.560 --> 01:00:12.440
without feedback from other folks that


01:00:12.440 --> 01:00:15.480
have been in this for longer, like Brett Cannon.


01:00:15.480 --> 01:00:21.400
I think he wrote the first black file pip attempt last year.


01:00:21.400 --> 01:00:24.200
For various reasons, it kind of got rejected.


01:00:24.200 --> 01:00:27.800
But I think his next attempt will happen.


01:00:27.800 --> 01:00:29.480
I just don't know when.


01:00:29.480 --> 01:00:30.640
All right.


01:00:30.640 --> 01:00:31.560
Excellent, excellent.


01:00:31.560 --> 01:00:35.000
There's also a suggestion of a Cython builder would be cool.


01:00:35.000 --> 01:00:36.920
Maybe a mypyC.


01:00:36.920 --> 01:00:37.480
I don't know.


01:00:37.480 --> 01:00:38.200
There's a lot of--


01:00:38.200 --> 01:00:39.480
That one exists, actually.


01:00:39.480 --> 01:00:40.760
Oh, the mypyC one does?


01:00:40.760 --> 01:00:41.260
OK.


01:00:41.260 --> 01:00:45.240
Yeah, go back to the plugins.


01:00:45.240 --> 01:00:46.480
I know the docs are a lot.


01:00:46.480 --> 01:00:46.980
Sorry.


01:00:46.980 --> 01:00:50.040
Back one, build hook.


01:00:50.040 --> 01:00:52.320
And then reference.


01:00:52.320 --> 01:00:56.600
And it's listed under third-party Hatchling.py.


01:00:56.600 --> 01:00:58.840
I'm maintaining that one, actually.


01:00:58.840 --> 01:01:00.120
>>Okay, nice.


01:01:00.120 --> 01:01:04.920
>>Actually, I have black builds with that now.


01:01:04.920 --> 01:01:05.880
>>Nice.


01:01:05.880 --> 01:01:06.440
>>Yeah.


01:01:06.440 --> 01:01:10.600
>>What about the Jupyter Builder?


01:01:10.600 --> 01:01:12.960
What does that do?


01:01:12.960 --> 01:01:19.960
>>So recently, Jupyter switched their entire extension


01:01:19.960 --> 01:01:23.560
ecosystem to Hatchling, actually.


01:01:23.560 --> 01:01:28.560
So now the standard way to do Jupyter stuff is with Hatchling.


01:01:28.560 --> 01:01:31.840
And that's the plugin that everything happens with.


01:01:31.840 --> 01:01:32.340
>>Nice.


01:01:32.340 --> 01:01:33.600
OK, cool.


01:01:33.600 --> 01:01:36.120
Probably makes you feel good to see major projects


01:01:36.120 --> 01:01:38.800
like that using your tools.


01:01:38.800 --> 01:01:40.320
>>Yeah, yeah.


01:01:40.320 --> 01:01:43.400
I'm happy that people are finding value in it.


01:01:43.400 --> 01:01:47.880
And every time someone says, oh, it's so easy to use,


01:01:47.880 --> 01:01:49.440
yeah, it makes me happy.


01:01:49.440 --> 01:01:51.040
Yeah, indeed.


01:01:51.040 --> 01:01:55.040
I like stuff that I can do a lot, but it's very simple.


01:01:55.040 --> 01:01:57.480
That's my purpose.


01:01:57.480 --> 01:02:01.480
Yeah, I think I might play with the global config


01:02:01.480 --> 01:02:03.960
to see how close I can make it match my current workflow


01:02:03.960 --> 01:02:06.200
and make it kind of coexist what I'm doing.


01:02:06.200 --> 01:02:08.240
So that'd be fun.


01:02:08.240 --> 01:02:09.600
Awesome.


01:02:09.600 --> 01:02:12.780
All right, well, I think we're about out of time.


01:02:12.780 --> 01:02:15.000
Anything else you want to throw out there while we're


01:02:15.000 --> 01:02:16.360
talking about the project?


01:02:16.360 --> 01:02:25.360
>>No, just if anybody wants to contribute,


01:02:25.360 --> 01:02:27.400
there's lots of open issues.


01:02:27.400 --> 01:02:31.400
I have had lots of really nice contributors.


01:02:31.400 --> 01:02:34.880
They almost finished adding type printing everywhere.


01:02:34.880 --> 01:02:37.960
Like in the beginning, I had zero type printing.


01:02:37.960 --> 01:02:40.520
And then a bunch of contributors helped out with that.


01:02:40.520 --> 01:02:44.520
And now it's almost fully my part.


01:02:44.520 --> 01:02:46.080
>>Yeah, that's awesome.


01:02:46.080 --> 01:02:47.080
- Yeah.


01:02:47.080 --> 01:02:49.160
- Cool, yeah, I saw you had 40 contributors,


01:02:49.160 --> 01:02:50.720
so that's really cool.


01:02:50.720 --> 01:02:51.940
- Yeah.


01:02:51.940 --> 01:02:53.840
- Maybe one other quick comment


01:02:53.840 --> 01:02:56.760
that I'd like to ask you about here is,


01:02:56.760 --> 01:03:00.280
I see the domain this is on is hatch.pypa,


01:03:00.280 --> 01:03:02.440
it's in Python Packaging Authority, .io.


01:03:02.440 --> 01:03:07.900
How'd it end up on pypa.io versus,


01:03:07.900 --> 01:03:12.520
yeah, hatch.dev or whatever?


01:03:12.520 --> 01:03:17.520
Yeah, so this is just the standard domain for all the packages.


01:03:17.520 --> 01:03:24.520
So if you type in pip right in a hatch and get rid of the latest part, it'll go right to the pip docs.


01:03:24.520 --> 01:03:26.520
Right, right, right.


01:03:26.520 --> 01:03:27.520
So when it was adopted...


01:03:27.520 --> 01:03:30.520
Tell us more about how did it become sort of official?


01:03:30.520 --> 01:03:38.520
Oh yeah, so I announced hatch 1.0, like the rewrite that happened last year sometime.


01:03:38.520 --> 01:03:46.000
And then the same day, maybe the next day, I forget who, but somebody in the Discord


01:03:46.000 --> 01:03:48.840
was asking if I wanted to join the PyPA.


01:03:48.840 --> 01:03:51.600
And I was like, "Well, sure.


01:03:51.600 --> 01:03:52.600
That makes sense."


01:03:52.600 --> 01:03:58.240
So then there was a vote on the mailing list, and it was unanimous that they agreed.


01:03:58.240 --> 01:04:05.560
And then after, I think, seven or ten days, then we transferred the repo, and it was hosted


01:04:05.560 --> 01:04:07.560
on the new domain.


01:04:07.560 --> 01:04:10.220
- Right, okay, oh yeah, and it's also


01:04:10.220 --> 01:04:12.460
under the GitHub organization of PyPA, that's right.


01:04:12.460 --> 01:04:14.540
- Yep. - Yeah, cool.


01:04:14.540 --> 01:04:19.540
Excellent, all right, well, really nice project.


01:04:19.540 --> 01:04:22.060
Congrats on all the uptake and--


01:04:22.060 --> 01:04:23.380
- Thanks. - Yeah, it looks like


01:04:23.380 --> 01:04:24.700
people are enjoying it.


01:04:24.700 --> 01:04:27.880
So two quick questions before you get out of here.


01:04:27.880 --> 01:04:29.860
I didn't get to ask you this on the panel


01:04:29.860 --> 01:04:31.140
because one, we're over time,


01:04:31.140 --> 01:04:32.260
and two, there was a bunch of people


01:04:32.260 --> 01:04:35.020
in order just another 10 minute debate.


01:04:35.020 --> 01:04:38.460
But if, first of all, notable PyPI package,


01:04:38.460 --> 01:04:39.620
something that you've come across,


01:04:39.620 --> 01:04:42.820
this is super cool, people should know about package X.


01:04:42.820 --> 01:04:43.920
Anything come to mind?


01:04:43.920 --> 01:04:47.580
- I guess it's a bit cliche


01:04:47.580 --> 01:04:49.980
'cause right now it's actually pretty popular,


01:04:49.980 --> 01:04:54.300
but I would still evangelize Textool.


01:04:54.300 --> 01:04:59.300
Textool is like a new application for building T-Rise,


01:04:59.300 --> 01:05:03.440
which is like Textool, like user interfaces.


01:05:03.440 --> 01:05:07.100
And I've actually been doing a project at work


01:05:07.100 --> 01:05:10.280
that uses this and it's very nice.


01:05:10.280 --> 01:05:11.580
It's pretty awesome.


01:05:11.580 --> 01:05:15.240
- It's kind of nuts what this thing does.


01:05:15.240 --> 01:05:16.080
- Yeah.


01:05:16.080 --> 01:05:19.540
- This is like the higher order UI framework


01:05:19.540 --> 01:05:21.440
built on rich by Wilma Guggenheim and team.


01:05:21.440 --> 01:05:25.060
And you get like fly out docking panels


01:05:25.060 --> 01:05:27.880
and scrolling in.


01:05:27.880 --> 01:05:29.900
Yeah, it's like,


01:05:29.900 --> 01:05:32.200
kind of like if the web could be in a terminal.


01:05:32.200 --> 01:05:33.920
(laughs)


01:05:33.920 --> 01:05:34.760
- True. - I like that.


01:05:34.760 --> 01:05:35.660
- It's true.


01:05:35.660 --> 01:05:39.520
I plan to actually use this for Hatch when I have time.


01:05:39.520 --> 01:05:44.520
On the creation, the interactive creation of a new project,


01:05:44.520 --> 01:05:48.200
on the left-hand side, you would have like inputs,


01:05:48.200 --> 01:05:50.880
and then it would render the PyProject.toml


01:05:50.880 --> 01:05:53.240
on the right-hand side and markdown.


01:05:53.240 --> 01:05:54.960
- Okay, oh, that's super cool.


01:05:54.960 --> 01:05:56.200
- In a few months, yeah.


01:05:56.200 --> 01:05:57.280
- Yeah, fun.


01:05:57.280 --> 01:06:00.440
And then if you're gonna work on Hatch,


01:06:00.440 --> 01:06:02.520
What editor are you using these days?


01:06:02.520 --> 01:06:05.200
- PyCharm.


01:06:05.200 --> 01:06:09.680
PyCharm for large projects.


01:06:09.680 --> 01:06:14.100
When I'm doing like one-off scripts, then VS Code.


01:06:14.100 --> 01:06:15.520
- Yeah. - Okay, cool.


01:06:15.520 --> 01:06:20.320
This may be a question I gotta start asking people.


01:06:20.320 --> 01:06:21.820
I don't know.


01:06:21.820 --> 01:06:25.400
PyCharm is, and all the JetBrains IDs, I believe,


01:06:25.400 --> 01:06:29.160
are starting to promote a, what they call the new UI,


01:06:29.160 --> 01:06:32.700
which I think is much more like VS Code.


01:06:32.700 --> 01:06:39.300
Are you the old school style or are you the new UI style?


01:06:39.300 --> 01:06:41.240
- I've not seen that yet actually.


01:06:41.240 --> 01:06:42.680
- There's a gear in the upper right.


01:06:42.680 --> 01:06:44.520
If you click on it, it'll say new UI.


01:06:44.520 --> 01:06:45.880
To me, I'm old school.


01:06:45.880 --> 01:06:47.040
I love the old one.


01:06:47.040 --> 01:06:49.840
I mean, I'm using PyCharm, not VS Code for a reason.


01:06:49.840 --> 01:06:51.840
So I don't want it to look more like VS Code


01:06:51.840 --> 01:06:53.280
for my style, right?


01:06:53.280 --> 01:06:55.160
But I know other people prefer the opposite.


01:06:55.160 --> 01:06:56.000
- Yeah.


01:06:56.000 --> 01:06:58.400
I wouldn't mind using VS Code.


01:06:58.400 --> 01:07:01.600
There's one missing feature that is like a blocker,


01:07:01.600 --> 01:07:04.120
where I just won't use VS Code full time,


01:07:04.120 --> 01:07:09.440
which is it can't yet do vertical tabs.


01:07:09.440 --> 01:07:11.720
There's an open feature for years.


01:07:11.720 --> 01:07:15.360
And I guess technically, there's some kind of challenge


01:07:15.360 --> 01:07:16.240
to implementing that.


01:07:16.240 --> 01:07:19.840
So right now, if you have like 100 tabs,


01:07:19.840 --> 01:07:21.320
it doesn't look very nice.


01:07:21.320 --> 01:07:22.200
It's all horizontal.


01:07:22.200 --> 01:07:23.600
>>Aaron: It's just a bunch of X's.


01:07:23.600 --> 01:07:24.280
[LAUGHS]


01:07:24.280 --> 01:07:24.800
>>Zuko: Yeah.


01:07:24.800 --> 01:07:25.960
>>Aaron: I can't select them.


01:07:25.960 --> 01:07:27.200
I just closed them.


01:07:27.200 --> 01:07:27.560
>>Zuko: Yeah.


01:07:27.560 --> 01:07:28.200
>>Aaron: Yeah, I got it.


01:07:28.200 --> 01:07:29.960
Okay, very cool.


01:07:29.960 --> 01:07:33.640
All right, well, congrats with Hatch


01:07:33.640 --> 01:07:36.080
and thanks for coming on the show.


01:07:36.080 --> 01:07:37.520
- Yeah, thank you very much.


01:07:37.520 --> 01:07:38.400
Nice talking to you.


01:07:38.400 --> 01:07:39.680
- Yeah, you too, bye-bye.


01:07:39.680 --> 01:07:40.680
- All right, bye-bye.

