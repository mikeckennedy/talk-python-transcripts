WEBVTT

00:00:00.000 --> 00:00:04.040
- Hey, Timo.


00:00:04.040 --> 00:00:04.980
- Hello, Michael.


00:00:04.980 --> 00:00:07.800
- Hey, it's great to be here with you.


00:00:07.800 --> 00:00:10.380
I'm super excited to talk about Async Python.


00:00:10.380 --> 00:00:12.680
- Yeah, same.


00:00:12.680 --> 00:00:13.580
Good to be here.


00:00:13.580 --> 00:00:16.720
- Yeah, it's great to have you here.


00:00:16.720 --> 00:00:19.520
You know, we've spoken a little bit through GitHub.


00:00:19.520 --> 00:00:22.000
I think it's odd, but also kind of awesome


00:00:22.000 --> 00:00:24.040
how many connections are made


00:00:24.040 --> 00:00:25.480
through places like that, right?


00:00:25.480 --> 00:00:26.820
Like we've never met in person,


00:00:26.820 --> 00:00:29.920
but we previously chatted about some Async things


00:00:29.920 --> 00:00:31.020
on GitHub?


00:00:31.020 --> 00:00:34.180
- Yeah, it's always nice to kind of


00:00:34.180 --> 00:00:35.820
see the same people again,


00:00:35.820 --> 00:00:38.460
which you met like online in a call or something.


00:00:38.460 --> 00:00:39.540
- Yeah.


00:00:39.540 --> 00:00:42.460
Yeah, that's why I really enjoy going to conferences


00:00:42.460 --> 00:00:44.140
'cause you're like, "Oh yeah, you're the person


00:00:44.140 --> 00:00:45.780
"I've been talking to for six months."


00:00:45.780 --> 00:00:46.940
- Yeah, absolutely.


00:00:46.940 --> 00:00:48.100
- Yeah, cool.


00:00:48.100 --> 00:00:50.500
Well, I'm super excited to talk about


00:00:50.500 --> 00:00:54.340
all the awesome async Python things that you've curated.


00:00:54.340 --> 00:00:57.340
Before that though, let's just get into your background.


00:00:57.340 --> 00:00:58.180
What's your story?


00:00:58.180 --> 00:01:00.340
in the programming of Python?


00:01:00.340 --> 00:01:02.360
- Yeah, so I started programming,


00:01:02.360 --> 00:01:04.660
I think when I was around 10 years old,


00:01:04.660 --> 00:01:07.560
at the time I was exploring at an offline computer


00:01:07.560 --> 00:01:10.980
from my parents, which didn't have a lot of like things


00:01:10.980 --> 00:01:12.820
on it, but there were a few applications.


00:01:12.820 --> 00:01:16.780
And one of those were, I think it's called FrontPage,


00:01:16.780 --> 00:01:18.940
like Microsoft FrontPage and Publisher.


00:01:18.940 --> 00:01:22.060
- Yes, it was like Microsoft Word for creating websites.


00:01:22.060 --> 00:01:22.900
It was insane.


00:01:22.900 --> 00:01:24.300
- Exactly, yeah, exactly.


00:01:24.300 --> 00:01:26.580
So I was like playing around with this and just,


00:01:26.580 --> 00:01:28.140
you know, exploring whatever was there


00:01:28.140 --> 00:01:29.940
because I didn't have any internet.


00:01:29.940 --> 00:01:32.460
And yeah, that's how I got interested


00:01:32.460 --> 00:01:34.900
in like how things are built in a computer.


00:01:34.900 --> 00:01:37.420
And at some point I got internet,


00:01:37.420 --> 00:01:39.500
I kind of browsed around to see


00:01:39.500 --> 00:01:42.060
like how these websites really look like.


00:01:42.060 --> 00:01:44.980
And yeah, that's how I got into PHP,


00:01:44.980 --> 00:01:47.020
the HTML and did some website stuff.


00:01:47.020 --> 00:01:48.940
And then after-


00:01:48.940 --> 00:01:50.700
- Open a website in front page,


00:01:50.700 --> 00:01:52.460
couldn't you like point it at a URL and say,


00:01:52.460 --> 00:01:54.460
open this and it would pull down the HTML


00:01:54.460 --> 00:01:55.580
like into the editor?


00:01:55.580 --> 00:01:56.420
I think I remember-


00:01:56.420 --> 00:01:57.460
- I don't even remember.


00:01:57.460 --> 00:01:59.860
What a weird, what a weird piece of software that was.


00:01:59.860 --> 00:02:00.840
Yeah.


00:02:00.840 --> 00:02:04.700
I'm just thinking back of like the early web was a weird time.


00:02:04.700 --> 00:02:05.760
Yeah.


00:02:05.760 --> 00:02:10.620
I think I, I more use publisher than I use front page because it was more


00:02:10.620 --> 00:02:12.060
complex for me at the time.


00:02:12.060 --> 00:02:14.760
And I didn't really have any documentation or tutorials.


00:02:14.760 --> 00:02:19.540
So I, yeah, it was more like fiddling around and getting something


00:02:19.540 --> 00:02:21.180
to work and something to happen.


00:02:21.180 --> 00:02:22.380
Cool.


00:02:22.380 --> 00:02:23.620
So you found your way to PHP.


00:02:23.620 --> 00:02:24.860
Yeah.


00:02:24.860 --> 00:02:29.020
Then I went to PHP, did some very basic websites like guest


00:02:29.020 --> 00:02:32.900
books and these kind of things with PHP, but nothing really


00:02:32.900 --> 00:02:37.100
big. And then after mandatory school years here in


00:02:37.100 --> 00:02:40.140
Switzerland, I started an apprenticeship at Roche.


00:02:40.140 --> 00:02:41.580
It's a pharmaceutical company.


00:02:41.580 --> 00:02:45.100
So if you if you've done any PCR tests lately, you probably


00:02:45.100 --> 00:02:47.860
have done that on an instrument of them.


00:02:47.860 --> 00:02:51.540
And there I was in a team where we did hardware simulation


00:02:51.540 --> 00:02:54.660
testing for software, which is running on these instruments.


00:02:54.660 --> 00:02:58.340
And all these, like the testing framework


00:02:58.340 --> 00:03:01.380
around the simulation was in Python.


00:03:01.380 --> 00:03:04.020
And that's basically how I started in Python.


00:03:04.020 --> 00:03:07.180
Yes, it's mostly like testing code


00:03:07.180 --> 00:03:12.100
and providing frameworks in Python for testing.


00:03:12.100 --> 00:03:12.940
- Yeah.


00:03:12.940 --> 00:03:14.140
- Yes.


00:03:14.140 --> 00:03:15.420
Those may need.


00:03:15.420 --> 00:03:18.100
- That's cool.


00:03:18.100 --> 00:03:21.380
That's a neat way where you can connect your code


00:03:21.380 --> 00:03:23.380
to physical things, you know, testing.


00:03:23.380 --> 00:03:24.860
>> Yeah, it's super nice.


00:03:24.860 --> 00:03:25.900
>> I have a white man stuff.


00:03:25.900 --> 00:03:28.940
>> Yeah. The simulation at the time,


00:03:28.940 --> 00:03:31.180
it also had some 3D visualization.


00:03:31.180 --> 00:03:33.620
So you could see motors moving around and


00:03:33.620 --> 00:03:37.620
kind of see pipettes colliding and these things,


00:03:37.620 --> 00:03:40.260
which was pretty awesome for me at the time


00:03:40.260 --> 00:03:42.780
because it was my first job basically.


00:03:42.780 --> 00:03:45.660
Yeah, it was super cool.


00:03:45.660 --> 00:03:47.660
We also built with Python like


00:03:47.660 --> 00:03:50.580
a distributed testing framework or testing system,


00:03:50.580 --> 00:03:53.180
kind of like you would have in Jenkins these days


00:03:53.180 --> 00:03:56.860
or any other CI system.


00:03:56.860 --> 00:04:00.300
- Yeah, they probably don't have


00:04:00.300 --> 00:04:02.780
as easy integration to actual hardware.


00:04:02.780 --> 00:04:05.540
Now when I pushed to this branch,


00:04:05.540 --> 00:04:07.140
I wanted to fire up that robot.


00:04:07.140 --> 00:04:08.460
Oh, okay.


00:04:08.460 --> 00:04:09.500
- Yeah, exactly.


00:04:09.500 --> 00:04:13.180
And also like a huge problem is like error case testing.


00:04:13.180 --> 00:04:15.820
Like you can't just break a needle in an instrument


00:04:15.820 --> 00:04:18.100
while you're running something


00:04:18.100 --> 00:04:19.700
because either you get hurt


00:04:19.700 --> 00:04:22.200
or it just costs you $1,000


00:04:22.200 --> 00:04:23.920
just for breaking something for testing.


00:04:23.920 --> 00:04:27.100
So you need some kind of stimulation to actually do that.


00:04:27.100 --> 00:04:29.280
- Yeah, very fun.


00:04:29.280 --> 00:04:30.200
How about now?


00:04:30.200 --> 00:04:32.200
What are you up to now?


00:04:32.200 --> 00:04:35.360
- Yeah, I recently started a new job at GitLab.


00:04:35.360 --> 00:04:38.840
I'm a senior backend engineer there in the configure group.


00:04:38.840 --> 00:04:42.280
And what we're doing is we provide Kubernetes integration


00:04:42.280 --> 00:04:45.640
for GitLab, GitLab projects and groups,


00:04:45.640 --> 00:04:46.840
these kinds of things,


00:04:46.840 --> 00:04:50.080
and also are responsible for the infrastructure as code


00:04:50.080 --> 00:04:54.920
features like the Terraform state backend


00:04:54.920 --> 00:04:56.680
and the Terraform provider,


00:04:56.680 --> 00:04:59.760
which also I've been maintaining for a year now


00:04:59.760 --> 00:05:02.640
as just like an outside contributor.


00:05:02.640 --> 00:05:04.640
And yeah, but this is mostly Go.


00:05:04.640 --> 00:05:09.760
Maybe you know Ruby is a big player in GitLab.


00:05:09.760 --> 00:05:12.240
So the entire GitLab repo


00:05:12.240 --> 00:05:14.500
is mainly a Ruby on Rails application.


00:05:14.500 --> 00:05:16.000
So no more Python there.


00:05:16.000 --> 00:05:17.000
Yeah.


00:05:17.000 --> 00:05:18.000
>> Yeah.


00:05:18.000 --> 00:05:21.000
Give us the elevator pitch on GitLab.


00:05:21.000 --> 00:05:27.000
You know, is it I should use GitLab instead of GitHub or something else?


00:05:27.000 --> 00:05:30.000
What's the value proposition for GitLab?


00:05:30.000 --> 00:05:32.000
>> Yeah, I think it's a good question.


00:05:32.000 --> 00:05:37.000
What you see here also on the screen is that it's called the One DevOps platform,


00:05:37.000 --> 00:05:41.000
so it provides much more feature, I think, than GitHub in terms of, like,


00:05:41.000 --> 00:05:44.920
in terms of like from planning to production, then monitoring an application,


00:05:44.920 --> 00:05:49.080
get like all these insights which you cannot really do on GitHub.


00:05:49.080 --> 00:05:56.040
So you have all, you basically have features for all the DevOps lifecycle stages.


00:05:56.040 --> 00:06:01.640
Here for example you see the Verify where you have a very powerful pipeline integration.


00:06:01.640 --> 00:06:03.640
Yeah.


00:06:06.200 --> 00:06:08.740
- Yeah, I think the open source world


00:06:08.740 --> 00:06:10.740
is happening on GitHub,


00:06:10.740 --> 00:06:13.740
but a lot of enterprises are using GitLab these days


00:06:13.740 --> 00:06:16.780
for developing their applications.


00:06:16.780 --> 00:06:20.080
- Yeah, okay, cool.


00:06:20.080 --> 00:06:22.120
Yeah, it's definitely an important piece


00:06:22.120 --> 00:06:24.080
of the puzzle out there.


00:06:24.080 --> 00:06:27.120
And how long have you been at GitLab?


00:06:27.120 --> 00:06:27.960
- Just one month.


00:06:27.960 --> 00:06:31.960
Actually, today marks my one month being at GitLab.


00:06:31.960 --> 00:06:33.380
So pretty recent.


00:06:33.380 --> 00:06:34.380
- Wow, so you're probably,


00:06:34.380 --> 00:06:38.020
Yeah, you're probably just starting to get comfortable with how stuff works and how you


00:06:38.020 --> 00:06:39.020
deploy it.


00:06:39.020 --> 00:06:40.020
Exactly.


00:06:40.020 --> 00:06:43.060
It was a lot of onboarding, but I've been contributing before, so not everything was


00:06:43.060 --> 00:06:45.140
new and I've been using GitLab as a user.


00:06:45.140 --> 00:06:49.540
So yeah, it wasn't that tough, I would say.


00:06:49.540 --> 00:06:50.540
Cool.


00:06:50.540 --> 00:06:51.540
All right.


00:06:51.540 --> 00:06:55.460
Well, let's go ahead and jump into your project.


00:06:55.460 --> 00:06:58.580
Sure.


00:06:58.580 --> 00:07:03.380
It's one of these awesome lists, and it's about one of my favorite aspects of Python


00:07:03.380 --> 00:07:10.180
because it async.io, async.innovate, they let you write such neat software that really takes


00:07:10.180 --> 00:07:16.740
advantage of latency and when other parts of the system are busy, you can just keep on going without


00:07:16.740 --> 00:07:22.740
rethinking how your code works all that much. So I'm a super fan of async.innovate in Python


00:07:22.740 --> 00:07:26.820
and all the languages that use it, I suppose, because I just like the idea. But, you know,


00:07:26.820 --> 00:07:31.220
tell us about your project and maybe first start with like what the heck is an awesome list anyway?


00:07:32.180 --> 00:07:39.140
Yeah, so an awesome list is just a curated list of projects or whatever the awesome list is about.


00:07:39.140 --> 00:07:45.620
It could be recipes or whatever. And it's just trying to collect awesome pieces of that thing,


00:07:45.620 --> 00:07:50.820
in this case, async.io, which are async.io packages or projects. And you basically showcase


00:07:50.820 --> 00:07:57.460
them to the readers. And they could, you know, take inspiration for the next project stack,


00:07:57.460 --> 00:08:02.180
or can just explore like what's out there and what people feel that is awesome.


00:08:02.180 --> 00:08:12.420
And yeah, I mean, I'm not an expert in all of these by far. So I'm more like a librarian of


00:08:12.420 --> 00:08:19.220
the of the list and rely on people contributing actually their awesome projects or ideas or


00:08:19.220 --> 00:08:22.660
whatever. And yeah, it's... Yeah.


00:08:23.860 --> 00:08:26.940
Yeah, neither of us, just as a disclaimer up front,


00:08:26.940 --> 00:08:29.980
neither of us are maintainers of all these projects,


00:08:29.980 --> 00:08:31.420
or we're not super experts.


00:08:31.420 --> 00:08:33.860
It's more of a survey of all the cool things.


00:08:33.860 --> 00:08:36.180
And I do think that's one of the really cool powers


00:08:36.180 --> 00:08:38.580
of the Awesome Lists.


00:08:38.580 --> 00:08:41.380
I remember the first time I found Awesome Python,


00:08:41.380 --> 00:08:43.020
I was like, wow, look at all these things


00:08:43.020 --> 00:08:44.820
I didn't even know existed, right?


00:08:44.820 --> 00:08:49.220
It's not necessarily that you use the Awesome List


00:08:49.220 --> 00:08:51.100
to make a decision about what you use,


00:08:51.100 --> 00:08:54.300
but it's like a good starting point for research,


00:08:54.300 --> 00:08:55.660
depending on whatever area.


00:08:55.660 --> 00:08:58.060
Like you've broken your list into stuff about databases


00:08:58.060 --> 00:09:00.220
and about networking and about web frameworks,


00:09:00.220 --> 00:09:03.180
and as we'll see, and you go to that section,


00:09:03.180 --> 00:09:04.060
you're interested in, you're like,


00:09:04.060 --> 00:09:06.300
"Oh, here's my 10 research projects


00:09:06.300 --> 00:09:07.420
"to figure out what I wanna do."


00:09:07.420 --> 00:09:09.100
- Yeah, exactly.


00:09:09.100 --> 00:09:11.260
I think it's also nice to just,


00:09:11.260 --> 00:09:12.700
once in a while browse through it


00:09:12.700 --> 00:09:15.980
and see like where the ecosystem is at


00:09:15.980 --> 00:09:18.540
and like what new things have been popping up.


00:09:18.540 --> 00:09:20.300
So yeah, it's interesting.


00:09:20.300 --> 00:09:26.140
So another thing I think maybe is worth touching on, I get the sense, although I'm not 100%


00:09:26.140 --> 00:09:34.300
sure because I'm asking you now, that these things that get put there, it's not an exhaustive


00:09:34.300 --> 00:09:35.340
list.


00:09:35.340 --> 00:09:42.240
It's more of things that the community thinks reaches some threshold for interestingness.


00:09:42.240 --> 00:09:47.340
So under the PRs, I see you got a new one an hour ago.


00:09:47.340 --> 00:09:52.340
to the PRs, you have a please vote before these are accepted


00:09:52.340 --> 00:09:56.180
because like what it means to accept a PR


00:09:56.180 --> 00:09:58.140
is really to add a line to a readme.


00:09:58.140 --> 00:10:00.660
It's not like a super, oh boy,


00:10:00.660 --> 00:10:02.860
how does this affect our overall performance?


00:10:02.860 --> 00:10:04.900
Like there's not a lot of considerations in that regard,


00:10:04.900 --> 00:10:06.380
but the question is sort of,


00:10:06.380 --> 00:10:09.380
let's talk about whether it belongs on the list, right?


00:10:09.380 --> 00:10:11.140
How do things make it on your list?


00:10:11.140 --> 00:10:13.240
- It's a very good question.


00:10:13.240 --> 00:10:16.300
And I've never been really strict about these rules


00:10:16.300 --> 00:10:18.320
and maybe I should be, I don't know.


00:10:18.320 --> 00:10:23.280
But I usually put this please vote label on pull requests


00:10:23.280 --> 00:10:26.920
just to see if people are interested in this.


00:10:26.920 --> 00:10:31.000
And usually I also check things like the stars,


00:10:31.000 --> 00:10:32.580
when was the last contributions?


00:10:32.580 --> 00:10:34.760
Like how many contributors are there?


00:10:34.760 --> 00:10:37.240
Because if we put something here on the list


00:10:37.240 --> 00:10:38.560
and then people start using it


00:10:38.560 --> 00:10:41.320
and we burn out some maintainers of a library


00:10:41.320 --> 00:10:44.400
which just wanted to do, you know, publish something.


00:10:44.400 --> 00:10:45.240
- Yeah.


00:10:45.240 --> 00:10:47.640
that would be a good idea, right?


00:10:47.640 --> 00:10:49.320
- Right, and on the other end of the spectrum,


00:10:49.320 --> 00:10:52.360
you've got, maybe there are people who publish something


00:10:52.360 --> 00:10:53.200
just for the heck of it,


00:10:53.200 --> 00:10:56.840
but there's one person they've touched it two years ago,


00:10:56.840 --> 00:11:00.720
and it's not necessarily something you wanna recommend


00:11:00.720 --> 00:11:02.880
if there's five stars and no one using it,


00:11:02.880 --> 00:11:06.040
and is it really gonna be good enough?


00:11:06.040 --> 00:11:06.920
Okay, cool.


00:11:06.920 --> 00:11:11.200
So I'm guessing it's open for people to go and do more PRs


00:11:11.200 --> 00:11:13.200
and suggest more things if they listen to the show


00:11:13.200 --> 00:11:16.560
and they're like, but you forgot about this awesome thing.


00:11:16.560 --> 00:11:18.040
- Yeah, yeah.


00:11:18.040 --> 00:11:21.400
If people are listening and have something awesome,


00:11:21.400 --> 00:11:23.280
please create a pull request.


00:11:23.280 --> 00:11:27.020
Always great to have some additions.


00:11:27.020 --> 00:11:28.080
- Yeah, cool.


00:11:28.080 --> 00:11:30.320
All right, well, let's go through it.


00:11:30.320 --> 00:11:32.800
So I think we'll just take it section by section


00:11:32.800 --> 00:11:34.520
or topic by topic.


00:11:34.520 --> 00:11:36.520
And I know you pulled out a couple of things


00:11:36.520 --> 00:11:37.520
that are interesting to you.


00:11:37.520 --> 00:11:40.400
I grabbed a couple as well, and we'll just touch on them.


00:11:40.400 --> 00:11:44.020
kind of work on that awareness and cover the broad spectrum


00:11:44.020 --> 00:11:45.760
of what's available.


00:11:45.760 --> 00:11:49.540
So we'll take it, I guess, the top section


00:11:49.540 --> 00:11:51.840
that you have here, probably the most important section,


00:11:51.840 --> 00:11:56.320
I would say, is web frameworks, right?


00:11:56.320 --> 00:11:58.680
Let me actually put this back real quick.


00:11:58.680 --> 00:12:03.200
So yeah, so for the web frameworks,


00:12:03.200 --> 00:12:04.500
there's some interesting ones.


00:12:04.500 --> 00:12:05.960
First of all, it's kind of notable,


00:12:05.960 --> 00:12:07.960
the ones that are not there yet.


00:12:07.960 --> 00:12:10.300
Maybe, actually, maybe there's some PRs that should be.


00:12:10.300 --> 00:12:12.580
making their way there.


00:12:12.580 --> 00:12:15.420
The really traditional web frameworks


00:12:15.420 --> 00:12:17.580
that people think about are not there.


00:12:17.580 --> 00:12:21.340
We don't see Flask directly, although through Court


00:12:21.340 --> 00:12:24.380
it's there, which is kind of its full async implementation.


00:12:24.380 --> 00:12:25.740
Django is not listed.


00:12:25.740 --> 00:12:33.180
Bottle, Pyramid, a bunch of these older ones.


00:12:33.180 --> 00:12:36.180
But the really hot new ones are here.


00:12:36.180 --> 00:12:40.180
We've got FastAPI and Sanic and some of the others


00:12:40.180 --> 00:12:44.420
- I guess people are just probably more excited about those


00:12:44.420 --> 00:12:47.180
and then, you know, they're kind of hyped and add those


00:12:47.180 --> 00:12:49.300
and that's probably why they end up here


00:12:49.300 --> 00:12:53.420
and not having like Pyramid or the other ones.


00:12:53.420 --> 00:12:56.780
- Yeah, well, Pyramid doesn't have a async version,


00:12:56.780 --> 00:12:58.940
but you know, it's interesting that Django does.


00:12:58.940 --> 00:13:01.820
And I think maybe somebody should do a PR for Django


00:13:01.820 --> 00:13:03.680
now that it actually properly supports


00:13:03.680 --> 00:13:05.080
all the way to the database layer.


00:13:05.080 --> 00:13:06.940
But you know, until recently it didn't.


00:13:06.940 --> 00:13:08.260
And what's notable, I think,


00:13:08.260 --> 00:13:11.460
about all of these frameworks that are here on the web one,


00:13:11.460 --> 00:13:14.620
and pretty much for many others as well,


00:13:14.620 --> 00:13:18.500
is not just they have a capability to do async,


00:13:18.500 --> 00:13:22.680
but they were kind of born to be async, right?


00:13:22.680 --> 00:13:26.700
- Yeah, yeah, you're right.


00:13:26.700 --> 00:13:28.820
And I think also some of them, I mean,


00:13:28.820 --> 00:13:32.300
they're not all on the same level, I would say.


00:13:32.300 --> 00:13:34.340
Like we have Starlet,


00:13:34.340 --> 00:13:38.300
which may be like a very lightweight framework


00:13:38.300 --> 00:13:42.180
that others kind of build on top like FastAPI,


00:13:42.180 --> 00:13:45.060
which, you know, Starlette may be more comparable to Quart


00:13:45.060 --> 00:13:47.580
than Quart is to FastAPI, right?


00:13:47.580 --> 00:13:49.620
So we have these kind of different layers


00:13:49.620 --> 00:13:52.700
where people could build upon and yeah,


00:13:52.700 --> 00:13:53.900
so it's some variety.


00:13:53.900 --> 00:13:58.140
- Yeah, yeah, and you've got a couple of WebSocket style


00:13:58.140 --> 00:13:59.080
ones in here as well.


00:13:59.080 --> 00:14:00.780
They're maybe not full frameworks,


00:14:00.780 --> 00:14:02.920
but they work in that regard.


00:14:04.020 --> 00:14:07.180
- Yeah, so, you know, notable to me here, certainly,


00:14:07.180 --> 00:14:12.180
I mean, FastAPI is definitely taking the world by storm.


00:14:12.180 --> 00:14:14.460
It only came out a couple years ago


00:14:14.460 --> 00:14:16.980
and it's already got 50,000 GitHub stars


00:14:16.980 --> 00:14:20.080
and that's close to what Flask and Django have.


00:14:20.080 --> 00:14:22.780
It's certainly a popular one.


00:14:22.780 --> 00:14:28.340
Yeah, have you got any chance to play with FastAPI?


00:14:28.340 --> 00:14:30.180
- I do, yeah, or I did.


00:14:30.180 --> 00:14:34.120
At my last job, we built some applications


00:14:34.120 --> 00:14:35.860
on top of FastAPI.


00:14:35.860 --> 00:14:40.120
And we also, at Roche, we open sourced one,


00:14:40.120 --> 00:14:41.940
which is kind of nice.


00:14:41.940 --> 00:14:44.820
I always like the FastAPI experience overall.


00:14:44.820 --> 00:14:47.620
Like, you know, the documentation is super nice.


00:14:47.620 --> 00:14:49.300
I think Sebastian did a great job


00:14:49.300 --> 00:14:51.300
in also taking the extra mile


00:14:51.300 --> 00:14:54.900
to explain more general concepts in FastAPI,


00:14:54.900 --> 00:14:58.900
like introduction into AsyncIO and these kinds of things,


00:14:58.900 --> 00:15:02.060
which the others do not have, they don't need to,


00:15:02.060 --> 00:15:05.900
but it's just that you can see that they really care


00:15:05.900 --> 00:15:07.980
about the community and the users of FastAPI


00:15:07.980 --> 00:15:12.100
to make it very easy to put something into production.


00:15:12.100 --> 00:15:14.660
- It definitely stands out in that regard for sure.


00:15:14.660 --> 00:15:17.520
So FastAPI is notable.


00:15:17.520 --> 00:15:21.380
I also think another one worth giving a shout out to


00:15:21.380 --> 00:15:22.700
is Starlet.


00:15:22.700 --> 00:15:25.260
Now Starlette is not as popular, right?


00:15:25.260 --> 00:15:27.780
Having 7,000 get up stars.


00:15:27.780 --> 00:15:30.780
Not that this is like a popularity contest,


00:15:30.780 --> 00:15:32.100
but it gives you a sense of like


00:15:32.100 --> 00:15:34.240
how many people are using it, right?


00:15:34.240 --> 00:15:37.880
And so Starlette is its own web framework,


00:15:37.880 --> 00:15:41.380
but it is also something that can be used


00:15:41.380 --> 00:15:43.860
for the building blocks of other web frameworks,


00:15:43.860 --> 00:15:46.020
which I think is unusual for, you know,


00:15:46.020 --> 00:15:49.060
Flask isn't like, well, take us apart and just use us.


00:15:49.060 --> 00:15:51.140
Don't actually use Flask or, you know,


00:15:51.140 --> 00:15:53.800
but FastAPI itself actually is built on Starlet.


00:15:53.800 --> 00:15:56.660
So much of what people love about FastAPI,


00:15:56.660 --> 00:15:58.240
they actually love it about Starlet.


00:15:58.240 --> 00:16:00.100
It's just kind of like a pass-through.


00:16:00.100 --> 00:16:02.700
- Yeah, I think for a lot of things,


00:16:02.700 --> 00:16:06.620
FastAPI is just a pass-through to Starlet.


00:16:06.620 --> 00:16:08.660
And that's what I meant before with,


00:16:08.660 --> 00:16:10.480
that a lot of people are like comparing


00:16:10.480 --> 00:16:14.740
or see these blog posts like FastAPI versus Flask


00:16:14.740 --> 00:16:16.220
or Quark and these kinds of things.


00:16:16.220 --> 00:16:18.460
But it's an unfair comparison


00:16:18.460 --> 00:16:20.780
because they're like Starlette and Quark,


00:16:20.780 --> 00:16:23.580
I think they're meant to be extended into something


00:16:23.580 --> 00:16:25.660
like going from the micro framework


00:16:25.660 --> 00:16:30.180
to your like, yeah, bad application afterwards.


00:16:30.180 --> 00:16:34.460
And I think you will have either start using FastAPI


00:16:34.460 --> 00:16:37.720
if you need all these features, then you know,


00:16:37.720 --> 00:16:40.180
it depends on the use case, I guess.


00:16:40.180 --> 00:16:42.460
- Right, right, right.


00:16:42.460 --> 00:16:44.280
Very cool to learn about that one.


00:16:44.280 --> 00:16:47.500
Also Sanic, I hadn't really been tracking Sanic


00:16:47.500 --> 00:16:49.180
until recent, I had been,


00:16:49.180 --> 00:16:51.660
and then kind of didn't pay too much attention,


00:16:51.660 --> 00:16:54.580
but this is a pretty popular framework, 16,000 stars.


00:16:54.580 --> 00:16:58.060
- Yeah, it's kind of got its own philosophy.


00:16:58.060 --> 00:17:01.140
It's a little bit like Starlette actually, that style.


00:17:01.140 --> 00:17:02.460
- Okay, I've never used it.


00:17:02.460 --> 00:17:06.180
I've seen it around, but I never really looked into it.


00:17:06.180 --> 00:17:08.620
So what is it that it has a different style?


00:17:08.620 --> 00:17:10.240
What do you mean?


00:17:10.240 --> 00:17:12.380
- Well, so many of the web frameworks,


00:17:12.380 --> 00:17:13.200
that's a great question.


00:17:13.200 --> 00:17:15.040
So many of the web frameworks these days are like,


00:17:15.040 --> 00:17:16.780
we're a brand new web framework.


00:17:16.780 --> 00:17:19.960
We look just like Flask, except, you know,


00:17:19.960 --> 00:17:23.220
we're just like Flask, but we're API oriented.


00:17:23.220 --> 00:17:24.820
and we come with auto documentation.


00:17:24.820 --> 00:17:26.020
We're just like Flask,


00:17:26.020 --> 00:17:28.660
but we do this other slightly different thing.


00:17:28.660 --> 00:17:30.460
You know, they're all like,


00:17:30.460 --> 00:17:34.300
you create an app and then you say app.get or app.route


00:17:34.300 --> 00:17:37.260
on your, and you kind of build up out of a blueprint


00:17:37.260 --> 00:17:40.300
or API router style of like separator, right?


00:17:40.300 --> 00:17:42.900
This, there's so many of these new web frameworks


00:17:42.900 --> 00:17:47.180
that are highly inspired by Flask,


00:17:47.180 --> 00:17:50.660
but they don't carry over the same runtime.


00:17:50.660 --> 00:17:54.460
they carry over kind of the shell API concepts, right?


00:17:54.460 --> 00:17:56.580
And Sanic is not so much like that.


00:17:56.580 --> 00:17:59.100
So if you go and check out Sanic,


00:17:59.100 --> 00:18:00.700
say like a good getting started,


00:18:00.700 --> 00:18:03.340
let's see if I can pull up an example.


00:18:03.340 --> 00:18:04.880
I have a huge button that says get started.


00:18:04.880 --> 00:18:06.180
Maybe I should click that.


00:18:06.180 --> 00:18:12.680
So you look at this in order,


00:18:12.680 --> 00:18:15.220
I'm not really seeing a great little example


00:18:15.220 --> 00:18:16.540
to pull just yet.


00:18:16.540 --> 00:18:19.720
But if you look at the way that it works


00:18:19.720 --> 00:18:22.040
is you just create functions.


00:18:22.040 --> 00:18:25.240
Oh, here's, they're using this app.gets.


00:18:25.240 --> 00:18:27.120
So I saw some, I believe, that were,


00:18:27.120 --> 00:18:30.040
you just say, here's a function, here's its URL,


00:18:30.040 --> 00:18:31.640
go and call it, right?


00:18:31.640 --> 00:18:34.480
Where it's a little more, assemble it back together.


00:18:34.480 --> 00:18:39.480
But yeah, anyway, it's an interesting web framework as well.


00:18:39.480 --> 00:18:42.000
A little bit different.


00:18:42.000 --> 00:18:45.200
And it's, I think it's really nice


00:18:45.200 --> 00:18:47.160
that there's all these people


00:18:47.160 --> 00:18:48.740
attempting different perspectives


00:18:48.740 --> 00:18:50.620
on solving the same problem.


00:18:50.620 --> 00:18:52.320
- Yeah, I think it's cool.


00:18:52.320 --> 00:18:54.100
And probably depending on the use case,


00:18:54.100 --> 00:18:55.380
one suits you better than the other.


00:18:55.380 --> 00:19:00.040
I mean, it's not the fact that it's always the best choice.


00:19:00.040 --> 00:19:02.060
Maybe work with the other for your use case


00:19:02.060 --> 00:19:04.620
because you want something very minimalistic


00:19:04.620 --> 00:19:07.440
or something you can extend in your own ways.


00:19:07.440 --> 00:19:11.580
- Yeah, and some of these like Sanic just added


00:19:11.580 --> 00:19:15.380
this ability to have background workers that are managed.


00:19:15.380 --> 00:19:18.380
So you don't have to go all the way to like a celery worker


00:19:18.380 --> 00:19:22.020
type of infrastructure, just the web framework will manage it.


00:19:22.020 --> 00:19:24.900
And I believe Starlette also has that.


00:19:24.900 --> 00:19:26.220
- Yeah.


00:19:26.220 --> 00:19:28.500
- I guess one more thing to give a shout out to


00:19:28.500 --> 00:19:32.620
is the stuff from the ENCODE folks.


00:19:32.620 --> 00:19:35.020
There's a lot of those appearing here.


00:19:35.020 --> 00:19:39.420
So they've got Starlet, they've got HTTPX and uvicorn.


00:19:39.420 --> 00:19:40.260
Right?


00:19:40.260 --> 00:19:41.220
Once you get one of these frameworks,


00:19:41.220 --> 00:19:43.260
you got to run it, right?


00:19:43.260 --> 00:19:44.100
- Yeah.


00:19:44.100 --> 00:19:46.740
And probably it's one of the most popular


00:19:46.740 --> 00:19:49.140
for production, I think.


00:19:49.140 --> 00:19:50.940
At least that's what we've been using.


00:19:50.940 --> 00:19:51.980
We've been super happy.


00:19:51.980 --> 00:19:55.020
I mean, it works great.


00:19:55.020 --> 00:19:57.180
It's super fast if you use it with uv loop.


00:19:57.180 --> 00:20:00.260
- Yup, uv loop.


00:20:00.260 --> 00:20:02.980
UV loop will make an appearance a little bit later as well.


00:20:02.980 --> 00:20:07.260
But yeah, I've been using uv record for production also.


00:20:07.260 --> 00:20:08.100
Loving it.


00:20:08.100 --> 00:20:08.940
Okay.


00:20:08.940 --> 00:20:12.620
And I guess also one thing I'll put into the show notes here


00:20:12.620 --> 00:20:16.500
is I can't remember which framework had this


00:20:16.500 --> 00:20:19.560
that I pulled it up, it might've been Sanic or Starlet,


00:20:19.560 --> 00:20:22.480
one of those two, but they created a filter


00:20:22.480 --> 00:20:24.960
across the tech and power web framework benchmarks


00:20:24.960 --> 00:20:28.740
that just highlight the Python ones, right?


00:20:28.740 --> 00:20:32.480
'Cause there's how many, 290 frameworks in this.


00:20:32.480 --> 00:20:34.060
And you're like, I don't really care


00:20:34.060 --> 00:20:38.140
what this obscure rust, super lightweight thing does


00:20:38.140 --> 00:20:40.560
because it's not a full web framework


00:20:40.560 --> 00:20:42.060
and I will never use it and so on.


00:20:42.060 --> 00:20:43.560
So it's kind of interesting to compare


00:20:43.560 --> 00:20:48.560
just the like raw basic ones or whatever.


00:20:48.560 --> 00:20:53.680
But if people are, it doesn't necessarily matter too much,


00:20:53.680 --> 00:20:54.800
but if you kind of want to get a sense


00:20:54.800 --> 00:20:57.720
of what performance looks like across all of these,


00:20:57.720 --> 00:20:59.220
you know, here's, I'll put a link


00:20:59.220 --> 00:21:01.560
to the Tekken Power Benchmarks.


00:21:01.560 --> 00:21:04.520
I don't know, what do you think about these things?


00:21:04.520 --> 00:21:05.880
Does this influence you to see,


00:21:05.880 --> 00:21:09.480
oh, Sanic is above FastAPI or do you not?


00:21:09.480 --> 00:21:12.160
- Yeah, I mean, it's nice to see those comparison


00:21:12.160 --> 00:21:15.940
and kind of see how the theory of optimization


00:21:15.940 --> 00:21:18.400
in these frameworks kind of translate to practice.


00:21:18.400 --> 00:21:21.380
But in the real world, I would say that


00:21:21.380 --> 00:21:23.100
it doesn't really matter too much


00:21:23.100 --> 00:21:24.920
because it's probably your business logic


00:21:24.920 --> 00:21:26.660
which is slowing you down.


00:21:26.660 --> 00:21:28.700
And these kinds of things or latency


00:21:28.700 --> 00:21:32.620
to your database or whatever, and not the framework itself.


00:21:32.620 --> 00:21:37.420
So I would take those with a grain of salt.


00:21:37.420 --> 00:21:40.060
- Yeah, it's kind of like asking,


00:21:40.060 --> 00:21:43.220
well, if I have a tight loop and I increment a number,


00:21:43.220 --> 00:21:44.060
how fast can I do that?


00:21:44.060 --> 00:21:46.140
I was like, okay, well, sure.


00:21:46.140 --> 00:21:47.700
C++ is super fast for that,


00:21:47.700 --> 00:21:49.100
but that's not what real software does.


00:21:49.100 --> 00:21:51.940
Real software interacts with all these things.


00:21:51.940 --> 00:21:54.700
And like that difference you think is so huge


00:21:54.700 --> 00:21:58.700
is like a little marginal bit over the real work.


00:21:58.700 --> 00:22:01.080
- Yeah, and I would also say that most of the people


00:22:01.080 --> 00:22:03.080
don't actually need that speed, right?


00:22:03.080 --> 00:22:04.820
Because if you may need it,


00:22:04.820 --> 00:22:07.740
you may also choose another language or, you know,


00:22:07.740 --> 00:22:09.820
if this really is a thing for you,


00:22:09.820 --> 00:22:13.420
then yeah, I don't know if this micro-optimization


00:22:13.420 --> 00:22:17.100
between Sanic and FastAPI really brings you much benefit.


00:22:17.100 --> 00:22:19.980
- I would certainly say pick the API that makes you happy.


00:22:19.980 --> 00:22:23.140
The programming API and the framework that makes you happy


00:22:23.140 --> 00:22:24.020
and just go with that.


00:22:24.020 --> 00:22:26.020
Yeah, good advice.


00:22:26.020 --> 00:22:27.340
All right, let's see.


00:22:27.340 --> 00:22:28.460
Are we on to our next section?


00:22:28.460 --> 00:22:29.960
We are, message queues.


00:22:29.960 --> 00:22:35.460
- Yeah, I haven't been a big user of any of these.


00:22:35.460 --> 00:22:39.820
I've been using the MQP one a while ago,


00:22:39.820 --> 00:22:42.420
so I don't really know where it's at these days.


00:22:42.420 --> 00:22:46.020
- Message queues are interesting.


00:22:46.020 --> 00:22:50.300
They're a way to add crazy scalability


00:22:50.300 --> 00:22:52.260
if you've got a lot of stuff that takes a while,


00:22:52.260 --> 00:22:54.300
but you don't need the answer right away.


00:22:54.300 --> 00:22:56.940
They're pretty interesting,


00:22:56.940 --> 00:22:59.780
but I just haven't needed them much myself either.


00:22:59.780 --> 00:23:04.780
I did not too long ago,


00:23:04.780 --> 00:23:09.780
speak with Min, Reg, and Kelly about ZeroMQ in Python.


00:23:09.780 --> 00:23:14.840
And apparently they're doing a lot of cool stuff


00:23:14.840 --> 00:23:19.560
for powering Jupyter with ZeroMQ.


00:23:19.560 --> 00:23:23.560
So pretty, it's way more interesting


00:23:23.560 --> 00:23:28.120
than I initially kind of in my mind gave it credit for,


00:23:28.120 --> 00:23:31.480
but yeah, it's a cool project.


00:23:31.480 --> 00:23:34.040
- So they're hosting Jupyter or what do they do?


00:23:34.040 --> 00:23:36.040
- They're using it for something


00:23:36.040 --> 00:23:39.560
for like the client server communication, I thought,


00:23:39.560 --> 00:23:41.500
but it's been, that's what I think I remember,


00:23:41.500 --> 00:23:43.200
but it's been like quite a long while


00:23:43.200 --> 00:23:44.960
since I talked to them about it.


00:23:44.960 --> 00:23:51.520
But yeah, we've got the AMQP one.


00:23:51.520 --> 00:23:53.080
That's the one you talked about, right?


00:23:53.080 --> 00:23:54.320
- Yes, it's the one you would use


00:23:54.320 --> 00:23:56.400
if you use RabbitMQ, for example.


00:23:56.400 --> 00:23:59.480
These are using the AMQP protocol


00:23:59.480 --> 00:24:02.640
and then that's where you can use this library in particular.


00:24:02.640 --> 00:24:04.560
- Oh, yeah. - Right?


00:24:04.560 --> 00:24:08.000
You have the Pi ZMQ, that's the zero MQ


00:24:08.000 --> 00:24:09.640
one I was talking about.


00:24:09.640 --> 00:24:12.160
And then, you know, some others,


00:24:12.160 --> 00:24:15.300
one for like Apache Kafka, for example.


00:24:15.300 --> 00:24:17.160
But again, anytime you're talking,


00:24:17.160 --> 00:24:18.960
these are usually separate processes,


00:24:18.960 --> 00:24:20.720
sometimes on separate machines,


00:24:20.720 --> 00:24:22.480
you're doing network comms.


00:24:22.480 --> 00:24:26.480
Like if you have the word, I'm talking over a network,


00:24:26.480 --> 00:24:29.960
then async and await, I mean, asyncio,


00:24:29.960 --> 00:24:31.920
like what does the IO stand for, right?


00:24:31.920 --> 00:24:35.880
- Yeah, and I think point being also here is that


00:24:35.880 --> 00:24:38.720
you have async I/O libraries


00:24:38.720 --> 00:24:41.120
for pretty much all message queues out there these days.


00:24:41.120 --> 00:24:44.760
I mean, every time I looked and looked for a library,


00:24:44.760 --> 00:24:47.680
it was, something was out there and you could use.


00:24:47.680 --> 00:24:50.480
- Cool.


00:24:50.480 --> 00:24:53.620
All right, let's move on to the next one,


00:24:53.620 --> 00:24:57.680
which is the database stuff.


00:24:57.680 --> 00:25:01.440
So I think this is another area where you spend,


00:25:01.440 --> 00:25:03.440
especially in the web apps,


00:25:03.440 --> 00:25:04.900
you're spending a lot of time waiting.


00:25:04.900 --> 00:25:08.520
So thinking about your asynchronous database driver


00:25:08.520 --> 00:25:09.820
is super important, right?


00:25:09.820 --> 00:25:12.500
- Yeah, absolutely.


00:25:12.500 --> 00:25:15.100
And I think it's not too long ago


00:25:15.100 --> 00:25:17.660
when there wasn't really good support


00:25:17.660 --> 00:25:20.620
for asyncio and databases.


00:25:20.620 --> 00:25:24.060
So it's great to see that a lot of projects


00:25:24.060 --> 00:25:25.580
are now supporting it.


00:25:25.580 --> 00:25:28.300
And yeah, also you mentioned Django,


00:25:28.300 --> 00:25:30.500
which has it all the way to the end,


00:25:30.500 --> 00:25:32.340
I'm not a Django user, so I don't really know,


00:25:32.340 --> 00:25:34.640
but I also guess that's a huge deal.


00:25:34.640 --> 00:25:37.660
- I think, yeah, I mean, that was the main blocker,


00:25:37.660 --> 00:25:40.860
I believe, is the Django ORM didn't have an async interface.


00:25:40.860 --> 00:25:42.820
And I think it was 4.1, again,


00:25:42.820 --> 00:25:45.060
not doing a ton of Django myself either,


00:25:45.060 --> 00:25:47.740
but I think Django 4.1, which just came out,


00:25:47.740 --> 00:25:51.220
kind of completed the whole cycle and added that.


00:25:51.220 --> 00:25:52.060
- Very cool.


00:25:52.060 --> 00:25:56.100
- Yeah, so what database drivers stand out


00:25:56.100 --> 00:25:57.140
on this list for you?


00:25:58.060 --> 00:26:01.600
- Well, I think async-pg is a very popular one


00:26:01.600 --> 00:26:03.500
if you use Postgres.


00:26:03.500 --> 00:26:07.620
I've been using it and usually you don't really see much


00:26:07.620 --> 00:26:11.460
about them actually, because you may use SQLAlchemy


00:26:11.460 --> 00:26:12.780
on top of these drivers.


00:26:12.780 --> 00:26:17.460
So I think as the end user, you may not have seen them,


00:26:17.460 --> 00:26:18.820
but you may have used them.


00:26:18.820 --> 00:26:22.620
- The only way you might see them is you put


00:26:22.620 --> 00:26:24.940
the async connection string in the SQLAlchemy


00:26:24.940 --> 00:26:27.020
and it complains that it doesn't have this package.


00:26:27.020 --> 00:26:28.260
I guess I got to install that.


00:26:28.260 --> 00:26:29.500
Here we go, right?


00:26:29.500 --> 00:26:30.340
- Yeah, exactly.


00:26:30.340 --> 00:26:32.860
- Yeah, yeah.


00:26:32.860 --> 00:26:34.540
So certainly the async-pg one,


00:26:34.540 --> 00:26:36.080
I think is pretty interesting.


00:26:36.080 --> 00:26:39.740
This one is from the Edge TV folks, right?


00:26:39.740 --> 00:26:42.060
From, is that Magic, I believe?


00:26:42.060 --> 00:26:47.020
Yeah, Magic Stack, like Yuri and crew over there.


00:26:47.020 --> 00:26:50.620
So the same people that do uv loop, right?


00:26:50.620 --> 00:26:53.520
He did a lot of the original async I/O work


00:26:53.520 --> 00:26:54.980
in Python itself, I believe.


00:26:55.860 --> 00:26:58.300
- Yeah, I think there's also a nice, interesting


00:26:58.300 --> 00:27:02.460
Talk Python to Me episode with Yuri, I think it was on.


00:27:02.460 --> 00:27:05.240
- Yeah, I think I spoke to him in the,


00:27:05.240 --> 00:27:08.980
about a year ago as well, and that was a great chat, yeah.


00:27:08.980 --> 00:27:13.380
Let's see, what else stands out to me here?


00:27:13.380 --> 00:27:15.860
So motor, if you're doing MongoDB,


00:27:15.860 --> 00:27:18.300
then motor is often the building block,


00:27:18.300 --> 00:27:21.520
much like async-pg would be the building block


00:27:21.520 --> 00:27:23.660
for SQL alchemies async,


00:27:23.660 --> 00:27:25.420
then motor is the building block


00:27:25.420 --> 00:27:29.100
for a lot of the Python MongoDB async libraries.


00:27:29.100 --> 00:27:34.860
- Yeah, I also noticed that for Redis.


00:27:34.860 --> 00:27:37.420
Yeah, did the Redis one, which is--


00:27:37.420 --> 00:27:38.540
- Which one is that?


00:27:38.540 --> 00:27:40.100
The Redis Pi?


00:27:40.100 --> 00:27:40.940
- Yeah, exactly.


00:27:40.940 --> 00:27:43.700
So I noticed a week ago or something


00:27:43.700 --> 00:27:46.620
that this I/O Redis was included


00:27:46.620 --> 00:27:50.520
into the official Redis Pi library.


00:27:50.520 --> 00:27:51.540
I don't know when that happened,


00:27:51.540 --> 00:27:52.660
may have been a while ago,


00:27:52.660 --> 00:27:57.180
but I still think it's nice to have another separate package,


00:27:57.180 --> 00:28:00.100
but the same package you have the sync API for,


00:28:00.100 --> 00:28:03.980
and you can use similar APIs so that you don't have to


00:28:03.980 --> 00:28:06.620
rethink everything if you want to switch to async.


00:28:06.620 --> 00:28:09.340
It just makes it easier to migrate if you want to.


00:28:09.340 --> 00:28:12.620
Also move back for some reason.


00:28:12.620 --> 00:28:16.620
>> Yeah. I agree.


00:28:16.620 --> 00:28:18.100
Some of these have both APIs.


00:28:18.100 --> 00:28:20.740
Like for example, SQLAlchemy,


00:28:20.740 --> 00:28:24.940
You can create an async setup connection string engine


00:28:24.940 --> 00:28:27.780
sequence, or you can do a synchronous one.


00:28:27.780 --> 00:28:30.820
And depending on what you're doing,


00:28:30.820 --> 00:28:33.380
you might-- like this utility doesn't want to be async,


00:28:33.380 --> 00:28:36.140
so we're just going to go and use the sync API.


00:28:36.140 --> 00:28:38.660
But your web app or API might want the async version.


00:28:38.660 --> 00:28:45.300
Let's see, a couple more notables here.


00:28:45.300 --> 00:28:48.500
The Piccolo one I think is pretty interesting,


00:28:48.500 --> 00:28:53.000
because I really think the query syntax for this one


00:28:53.000 --> 00:28:55.900
is quite expressive.


00:28:55.900 --> 00:28:57.040
Have you played with Piccolo?


00:28:57.040 --> 00:29:01.140
I have not, but I still admire its query style.


00:29:01.140 --> 00:29:03.280
- I recently checked it out though.


00:29:03.280 --> 00:29:04.940
And I also had the same impression


00:29:04.940 --> 00:29:07.100
that the query syntax is super nice


00:29:07.100 --> 00:29:09.980
because compared to others like Prisma,


00:29:09.980 --> 00:29:14.540
I also looked at lately and while they have type safety


00:29:14.540 --> 00:29:19.540
with like type six, it's that, you know,


00:29:19.540 --> 00:29:22.180
here you actually have the Python symbols


00:29:22.180 --> 00:29:24.860
or variables you can use,


00:29:24.860 --> 00:29:27.680
which is I think a little bit nicer than having strings,


00:29:27.680 --> 00:29:29.680
even though they can be auto completed.


00:29:29.680 --> 00:29:32.620
- Yeah, yeah.


00:29:32.620 --> 00:29:34.300
And you get, and when you do refactoring,


00:29:34.300 --> 00:29:37.580
like it understands what's going on.


00:29:37.580 --> 00:29:39.340
So just for people listening,


00:29:39.340 --> 00:29:41.160
for example, to do a select statement,


00:29:41.160 --> 00:29:43.340
I would say a weight because it's async,


00:29:43.340 --> 00:29:45.100
Band would be the class.


00:29:45.100 --> 00:29:48.860
You say band.select, then band.type.name,


00:29:48.860 --> 00:29:53.220
and then .where band.popularity greater than 100.


00:29:53.220 --> 00:29:58.220
A lot of these ORMs and ODMs have like janky syntax


00:29:58.220 --> 00:30:00.940
to push operations into it.


00:30:00.940 --> 00:30:03.060
So for example, in Mongo engine,


00:30:03.060 --> 00:30:08.060
you would say popularity_gt equals 100.


00:30:08.060 --> 00:30:12.860
So popularity greater than 100, but you're saying equals.


00:30:12.860 --> 00:30:15.060
You don't want equals, you want the greater than symbol.


00:30:15.060 --> 00:30:19.300
This is like exactly the same meaning in SQL


00:30:19.300 --> 00:30:22.460
as it is in Python, which I just really like that.


00:30:22.460 --> 00:30:25.500
- Yeah, and it's also super cool if you're entering


00:30:25.500 --> 00:30:27.620
a code base and you see these kinds of things


00:30:27.620 --> 00:30:30.780
because even if you don't know Piccolo,


00:30:30.780 --> 00:30:32.820
you would understand what's going on,


00:30:32.820 --> 00:30:36.160
which I think is a good aspect of a nice API.


00:30:36.160 --> 00:30:38.220
- It is.


00:30:38.220 --> 00:30:40.780
So Brandon, now the audience has a question, says,


00:30:40.780 --> 00:30:45.100
So we can use asyncpg in place of psycopg two.


00:30:45.100 --> 00:30:51.100
I don't, I haven't done enough with this, but what are your thoughts?


00:30:51.100 --> 00:30:52.140
Do you have any ideas?


00:30:52.140 --> 00:30:54.100
Um, I'm quickly checking.


00:30:54.100 --> 00:30:57.380
I I'm not sure if the latter one really is a sink.


00:30:57.380 --> 00:31:04.140
Yeah, I think the deal is the, the, the latter one, psycopg two is not a sink.


00:31:04.140 --> 00:31:04.820
Yes.


00:31:04.820 --> 00:31:09.240
And so that's what say SQLAlchemy would use if you had created a synchronous


00:31:09.240 --> 00:31:12.080
but if you want to do the async version,


00:31:12.080 --> 00:31:14.720
then you would have to use the asyncpg foundation


00:31:14.720 --> 00:31:15.720
for it basically.


00:31:15.720 --> 00:31:16.840
I think that's my understanding,


00:31:16.840 --> 00:31:20.200
but I do more MongoDB than Postgres.


00:31:20.200 --> 00:31:23.640
- I think so too, but I wouldn't really know


00:31:23.640 --> 00:31:27.640
because I've always lately been using async only.


00:31:27.640 --> 00:31:29.440
- Yeah, exactly.


00:31:29.440 --> 00:31:31.520
- It's not the only thing you would have to change, right?


00:31:31.520 --> 00:31:33.040
You would also have to adapt your code


00:31:33.040 --> 00:31:34.800
and put the weights here and there


00:31:34.800 --> 00:31:36.120
and make your code async.


00:31:36.120 --> 00:31:38.520
You can't just replace the query string


00:31:38.520 --> 00:31:40.440
and then expect it to work.


00:31:40.440 --> 00:31:42.560
- Yeah.


00:31:42.560 --> 00:31:43.400
All right.


00:31:43.400 --> 00:31:45.860
So one other one here that I think is probably noteworthy


00:31:45.860 --> 00:31:47.700
to put in the database drivers,


00:31:47.700 --> 00:31:51.280
and I'd like to hear your thoughts on this as well,


00:31:51.280 --> 00:31:53.660
is the AIO SQLite.


00:31:53.660 --> 00:31:56.720
- Yeah.


00:31:56.720 --> 00:31:57.560
- Right?


00:31:57.560 --> 00:32:00.120
And it's on one hand interesting


00:32:00.120 --> 00:32:02.720
because SQLite doesn't really do much concurrency.


00:32:02.720 --> 00:32:04.020
So you're like, well, that's silly.


00:32:04.020 --> 00:32:07.000
Like why would I ever want to use AIOs,


00:32:07.000 --> 00:32:10.160
like the asyncio with it, if it doesn't really do that.


00:32:10.160 --> 00:32:13.600
But if you're writing a web API or website


00:32:13.600 --> 00:32:16.220
or something that uses SQLAlchemy,


00:32:16.220 --> 00:32:19.760
and you wanna on dev use SQLite just for like a simple test


00:32:19.760 --> 00:32:23.140
and you wanna use Postgres in production,


00:32:23.140 --> 00:32:23.980
well, guess what?


00:32:23.980 --> 00:32:27.280
Your async code will fail to run on SQLAlchemy


00:32:27.280 --> 00:32:30.160
unless you have AIO SQLite as the foundation


00:32:30.160 --> 00:32:31.080
like we just talked about.


00:32:31.080 --> 00:32:34.940
So it kind of allows you to still test your code


00:32:34.940 --> 00:32:38.700
and run it even though you wouldn't necessarily


00:32:38.700 --> 00:32:40.260
directly use it?


00:32:40.260 --> 00:32:42.340
- Yeah, I think we've always been using


00:32:42.340 --> 00:32:45.300
AO SQLite for testing purposes.


00:32:45.300 --> 00:32:47.980
It's super nice because you can use in-memory databases


00:32:47.980 --> 00:32:50.620
and don't need to worry about the setup too much.


00:32:50.620 --> 00:32:52.780
And it just works basically.


00:32:52.780 --> 00:32:53.820
I need to be careful though.


00:32:53.820 --> 00:32:55.180
- SQLite's really nice.


00:32:55.180 --> 00:32:56.020
Yeah.


00:32:56.020 --> 00:33:00.540
'Cause it's not exactly a match, right?


00:33:00.540 --> 00:33:01.380
- Exactly.


00:33:01.380 --> 00:33:03.140
So we had the case where it didn't,


00:33:03.140 --> 00:33:06.620
It worked in testing and in CI and then broke in production


00:33:06.620 --> 00:33:10.020
because we haven't been using or testing against Postgres.


00:33:10.020 --> 00:33:15.520
- All right, let's move on to the networking section.


00:33:15.520 --> 00:33:20.020
All right, so what stands out?


00:33:20.020 --> 00:33:21.060
There's not that many of this one.


00:33:21.060 --> 00:33:24.940
This is not overwhelming like the database thing, right?


00:33:24.940 --> 00:33:29.540
- Yeah, I think probably a lot of people know is HTTPS,


00:33:29.540 --> 00:33:32.820
which is a super nice requests like package


00:33:32.820 --> 00:33:36.180
for making HTTP calls.


00:33:36.180 --> 00:33:40.340
It has a similar API and the good thing


00:33:40.340 --> 00:33:42.460
or what I really like is that you can use it


00:33:42.460 --> 00:33:46.720
in sync and async and the API looks pretty much the same.


00:33:46.720 --> 00:33:51.100
So if you wanna switch from sync to async,


00:33:51.100 --> 00:33:53.240
I think it's a delight to use it.


00:33:53.240 --> 00:33:56.340
Yeah.


00:33:56.340 --> 00:33:59.260
- Yeah, you can just say httpx.get


00:33:59.260 --> 00:34:01.900
just like you can with requests, which is great.


00:34:01.900 --> 00:34:03.900
And then if you want the async version,


00:34:03.900 --> 00:34:05.620
do they have an async example?


00:34:05.620 --> 00:34:06.860
It's super easy to click.


00:34:06.860 --> 00:34:10.100
I think you just create like an async client


00:34:10.100 --> 00:34:12.060
and then call the same functions on it.


00:34:12.060 --> 00:34:12.900
Yeah.


00:34:12.900 --> 00:34:13.780
- Yeah, exactly.


00:34:13.780 --> 00:34:14.620
- Yeah.


00:34:14.620 --> 00:34:15.660
Here you go, let's see.


00:34:15.660 --> 00:34:17.860
Exactly.


00:34:17.860 --> 00:34:20.820
Much like requests where you create like a client,


00:34:20.820 --> 00:34:23.780
you just say, or a client session, I guess it's called.


00:34:23.780 --> 00:34:27.420
Say, create an async client, then you,


00:34:27.420 --> 00:34:28.980
okay, await the client.get.


00:34:28.980 --> 00:34:31.860
Yeah, it's always interesting.


00:34:31.860 --> 00:34:36.860
it's to me how libraries decide to add on async and an,


00:34:36.860 --> 00:34:39.380
I mean, rephrase that, a synchronous


00:34:39.380 --> 00:34:43.140
and a non-synchronous version,


00:34:43.140 --> 00:34:45.940
like they're both variants into the same library, right?


00:34:45.940 --> 00:34:48.660
Do you see people doing that successfully?


00:34:48.660 --> 00:34:50.660
Like, do you see any patterns that you really like


00:34:50.660 --> 00:34:51.560
when they do that?


00:34:51.560 --> 00:34:57.140
- I think I actually like how HTTPS is implemented


00:34:57.140 --> 00:34:58.100
in that regards.


00:34:58.100 --> 00:34:59.700
I didn't dig much in the code base,


00:34:59.700 --> 00:35:04.700
but like you have the same like protocols for the API


00:35:04.700 --> 00:35:08.700
so that you can reuse them easily


00:35:08.700 --> 00:35:10.500
and kind of interchange that,


00:35:10.500 --> 00:35:12.600
I think the transport layer in this case.


00:35:12.600 --> 00:35:14.740
Yeah, it's super nice.


00:35:14.740 --> 00:35:18.180
But for my own libraries, it always bothered me too,


00:35:18.180 --> 00:35:22.380
that there is no really nice API to provide both


00:35:22.380 --> 00:35:25.380
in like the same function.


00:35:25.380 --> 00:35:27.900
Like you couldn't reuse the function name


00:35:27.900 --> 00:35:30.040
an async version or the method name, right?


00:35:30.040 --> 00:35:32.080
You need to have another class with it.


00:35:32.080 --> 00:35:32.920
- Right.


00:35:32.920 --> 00:35:35.740
- But I guess that's just how it is.


00:35:35.740 --> 00:35:37.240
- Right.


00:35:37.240 --> 00:35:38.520
Well, I think if, you know,


00:35:38.520 --> 00:35:40.720
I think a lot of these probably grow up,


00:35:40.720 --> 00:35:43.960
they come into existence to be one or the other,


00:35:43.960 --> 00:35:44.840
and then they're like, all right,


00:35:44.840 --> 00:35:46.800
well, we kind of want to have both, so how do we add it?


00:35:46.800 --> 00:35:49.240
And if, personally, if I was going to start


00:35:49.240 --> 00:35:50.800
from the very beginning,


00:35:50.800 --> 00:35:52.680
I would like to see what they're doing


00:35:52.680 --> 00:35:56.640
just for the synchronous version of HTTPX,


00:35:56.640 --> 00:36:01.640
where you just say httpx.get.


00:36:01.640 --> 00:36:04.960
But instead of saying import HTTPX,


00:36:04.960 --> 00:36:09.960
you'd have to say from like HTTPX synchronous,


00:36:09.960 --> 00:36:15.240
import HTTPX or from HTTPX async, import HTTPX.


00:36:15.240 --> 00:36:17.520
And then it's just exactly the same API,


00:36:17.520 --> 00:36:19.720
but you have to await everything versus not await.


00:36:19.720 --> 00:36:20.560
I don't know.


00:36:20.560 --> 00:36:21.380
I think there's like,


00:36:21.380 --> 00:36:24.840
if you said that we'll control it at the import level,


00:36:24.840 --> 00:36:27.280
And then what you get is either all awaitable


00:36:27.280 --> 00:36:29.400
or it's all blocking.


00:36:29.400 --> 00:36:30.240
I don't know.


00:36:30.240 --> 00:36:32.040
- Yeah, it's a nice pattern.


00:36:32.040 --> 00:36:33.240
It would be a nice pattern.


00:36:33.240 --> 00:36:34.080
- Yeah.


00:36:34.080 --> 00:36:36.440
- By the way, could you await this get?


00:36:36.440 --> 00:36:37.280
Not really.


00:36:37.280 --> 00:36:39.080
Or is there like a, you always need a client


00:36:39.080 --> 00:36:41.720
if you wanna have async support?


00:36:41.720 --> 00:36:44.720
- I'm pretty sure for HTTPS, you have to create the client


00:36:44.720 --> 00:36:46.360
and then you have to create an async client


00:36:46.360 --> 00:36:47.360
then you can await it.


00:36:47.360 --> 00:36:48.720
- Okay.


00:36:48.720 --> 00:36:50.160
- I've also seen other APIs.


00:36:50.160 --> 00:36:52.640
You have get, then you have like a get_async,


00:36:52.640 --> 00:36:54.820
but I kind of don't like that,


00:36:54.820 --> 00:36:57.080
since you could just do one import statement,


00:36:57.080 --> 00:37:02.240
and fix it, so I don't know.


00:37:02.240 --> 00:37:04.800
But it's really, as I'm going through all these examples


00:37:04.800 --> 00:37:06.200
that you've curated, I'm thinking like,


00:37:06.200 --> 00:37:08.600
okay, some of these have both APIs,


00:37:08.600 --> 00:37:11.700
and how are they making that clear to people, right?


00:37:11.700 --> 00:37:15.160
Yeah.


00:37:15.160 --> 00:37:20.680
All right, what else is noteworthy on that list?


00:37:20.680 --> 00:37:23.660
I think maybe we could just super quick touch on it.


00:37:23.660 --> 00:37:26.220
You've got an async SSH library,


00:37:26.220 --> 00:37:27.760
like literally that's the name.


00:37:27.760 --> 00:37:29.780
- Yeah, I haven't used that one.


00:37:29.780 --> 00:37:31.660
- And a ping, right?


00:37:31.660 --> 00:37:32.500
I haven't either.


00:37:32.500 --> 00:37:36.560
- I think it's nice to have like here at least


00:37:36.560 --> 00:37:40.300
to have some, well, if you wanna do a ping,


00:37:40.300 --> 00:37:42.540
like it may not be obvious what to use.


00:37:42.540 --> 00:37:45.420
So I think it's a good one


00:37:45.420 --> 00:37:47.300
or at least people consider it a good one.


00:37:47.300 --> 00:37:49.220
So I think it's nice adding those to the list.


00:37:49.220 --> 00:37:51.780
So there are a few like niche libraries on the list,


00:37:51.780 --> 00:37:54.140
which wouldn't make a huge,


00:37:54.140 --> 00:37:57.620
like they wouldn't get many votes probably if you do this


00:37:57.620 --> 00:37:58.460
because--


00:37:58.460 --> 00:37:59.740
- They're not broadly useful.


00:37:59.740 --> 00:38:03.060
You're like, oh my goodness, I've been building a DNS system


00:38:03.060 --> 00:38:05.180
and I'm so glad I found AIO DNS.


00:38:05.180 --> 00:38:06.980
But actually some of the frameworks,


00:38:06.980 --> 00:38:11.900
like I believe HTTPS uses that under the covers,


00:38:11.900 --> 00:38:12.740
pretty sure.


00:38:12.740 --> 00:38:15.540
Something I played with recently was like using AIO DNS


00:38:15.540 --> 00:38:17.340
under the covers to make its work


00:38:17.340 --> 00:38:18.700
a little more asynchronous.


00:38:18.700 --> 00:38:20.500
- Yeah, it would make sense, yeah.


00:38:20.500 --> 00:38:23.700
- Yeah, excellent.


00:38:23.700 --> 00:38:25.660
All right, let's move on here.


00:38:25.660 --> 00:38:32.140
Testing, I think, is what I meant to talk about.


00:38:32.140 --> 00:38:33.740
All right, so yeah, yeah.


00:38:33.740 --> 00:38:36.740
Tell us about the testing story.


00:38:36.740 --> 00:38:40.260
- Yeah, so I mean, here of the ones we see on the screen,


00:38:40.260 --> 00:38:44.420
there's IOMock, there's AsyncTest, pytest, AsyncIO,


00:38:44.420 --> 00:38:47.420
A-Responses and AIIO-Responses.


00:38:47.420 --> 00:38:51.420
and I've been only using pytest async I/O to be honest.


00:38:51.420 --> 00:38:57.500
It basically gives you a decorator to mark


00:38:57.500 --> 00:39:02.500
your async pytest or your tests as async,


00:39:02.500 --> 00:39:04.860
so that they run in an event loop.


00:39:04.860 --> 00:39:07.660
There's also now a mode you can set


00:39:07.660 --> 00:39:10.140
in the configuration where you don't need that marker.


00:39:10.140 --> 00:39:13.100
If you have a test, you would say async def


00:39:13.100 --> 00:39:17.180
test_sum_asyncIocode, and then


00:39:17.180 --> 00:39:20.720
your normal test code and you would decorate this function


00:39:20.720 --> 00:39:24.300
with a pytest mark async IDA decorator.


00:39:24.300 --> 00:39:27.860
But yeah, I think not necessary these days,


00:39:27.860 --> 00:39:31.620
you could configure it to have it in auto mode


00:39:31.620 --> 00:39:34.860
where it basically just detects always it's a coroutine,


00:39:34.860 --> 00:39:36.740
I scheduled it on the event loop.


00:39:36.740 --> 00:39:39.500
Yeah, it's super simple.


00:39:39.500 --> 00:39:40.940
- That makes a lot of sense.


00:39:40.940 --> 00:39:41.780
- Yeah.


00:39:41.780 --> 00:39:45.780
- Yeah, and this is not about trying to say,


00:39:45.780 --> 00:39:48.600
well, I've got a bunch of async test functions.


00:39:48.600 --> 00:39:50.420
So let's try to run them all in parallel,


00:39:50.420 --> 00:39:53.060
like X test or X dist or any of those types of things.


00:39:53.060 --> 00:39:57.220
It's just, I have some function I wanna call


00:39:57.220 --> 00:39:58.940
and test its result, it's async.


00:39:58.940 --> 00:40:00.340
So I have to await it.


00:40:00.340 --> 00:40:02.860
In order to await it, the test function itself


00:40:02.860 --> 00:40:05.380
must be async and then how do I run it, right?


00:40:05.380 --> 00:40:06.220
Now what?


00:40:06.220 --> 00:40:09.740
- Yeah, I think the other way would be kind of cumbersome


00:40:09.740 --> 00:40:11.500
to create an event loop every time


00:40:11.500 --> 00:40:14.020
and then schedule your core routine in there


00:40:14.020 --> 00:40:17.060
and pytest async I/O just does that for you.


00:40:17.060 --> 00:40:19.180
- Sure, you could do it,


00:40:19.180 --> 00:40:21.820
but it would make the code not look normal.


00:40:21.820 --> 00:40:23.500
It'd be like all these weird things you have to do


00:40:23.500 --> 00:40:25.940
to like async to sync FI.


00:40:25.940 --> 00:40:28.780
And we'll see some frameworks that might even do something


00:40:28.780 --> 00:40:30.300
in that regard for you, but.


00:40:30.300 --> 00:40:31.300
- Yeah.


00:40:31.300 --> 00:40:32.820
- Yeah, I really, this is really nice.


00:40:32.820 --> 00:40:35.920
It just seems like if you're testing code that is async,


00:40:35.920 --> 00:40:39.740
clearly this is something like this is what you want.


00:40:39.740 --> 00:40:43.340
Yeah, let's see.


00:40:43.340 --> 00:40:46.500
Also mocking, I hadn't really thought about mocking


00:40:46.500 --> 00:40:48.300
async methods, but I guess you need some--


00:40:48.300 --> 00:40:52.220
- Yeah, I've done this, but I haven't used this IOMock.


00:40:52.220 --> 00:40:55.340
So there is, I think even in unit test mock,


00:40:55.340 --> 00:41:00.340
there's an async mock, like a class which you can use.


00:41:00.340 --> 00:41:04.020
So I'm not really sure why you would need this.


00:41:04.020 --> 00:41:06.420
- So, you know, this has changed six years ago.


00:41:06.420 --> 00:41:09.900
I wonder if the asynchronous mocking capabilities


00:41:09.900 --> 00:41:13.300
were not in the framework itself when this got created


00:41:13.300 --> 00:41:15.260
and then probably like, you know what,


00:41:15.260 --> 00:41:17.100
we should just be able to test our own stuff.


00:41:17.100 --> 00:41:18.160
So let's fix that.


00:41:18.160 --> 00:41:20.340
Yeah, I'm guessing.


00:41:20.340 --> 00:41:21.180
Okay.


00:41:21.180 --> 00:41:24.640
Yeah, pretty nice.


00:41:24.640 --> 00:41:29.660
You mentioned uv loop before in one of the sections.


00:41:29.660 --> 00:41:32.300
This is maybe the only section that has a single item in it,


00:41:32.300 --> 00:41:34.460
but it's a big one.


00:41:34.460 --> 00:41:36.060
UV loop, right?


00:41:36.060 --> 00:41:36.900
- Yes.


00:41:36.900 --> 00:41:37.900
- For alternate loops?


00:41:37.900 --> 00:41:39.980
- Yeah, exactly.


00:41:39.980 --> 00:41:41.660
So you could use, if you run async.io,


00:41:41.660 --> 00:41:45.660
you can just use the one which is in like CPython,


00:41:45.660 --> 00:41:47.140
and you can just use that.


00:41:47.140 --> 00:41:50.340
But there is other implementation like this uv loop,


00:41:50.340 --> 00:41:51.780
which is based on libuv,


00:41:51.780 --> 00:41:54.180
which is another event loop in C.


00:41:54.180 --> 00:41:56.820
And it's just this super fast


00:41:56.820 --> 00:41:59.660
compared to the built-in implementation.


00:41:59.660 --> 00:42:04.700
Yeah, I think it's great for production use cases.


00:42:04.700 --> 00:42:07.520
- It's so nice because in order to use it,


00:42:07.520 --> 00:42:11.540
a lot of times if it's just literally installed


00:42:11.540 --> 00:42:13.320
in the environment, things will use it.


00:42:13.320 --> 00:42:16.160
Like I believe UVA Corn will use it if it finds it


00:42:16.160 --> 00:42:17.320
and some other things.


00:42:17.320 --> 00:42:19.080
You don't even have to say, please use it.


00:42:19.080 --> 00:42:21.320
It's just like, oh, it's available, let's go.


00:42:21.320 --> 00:42:24.420
The, and if for some reason you need to explicitly use it,


00:42:24.420 --> 00:42:27.480
like in your code, you just say uv loop,


00:42:27.480 --> 00:42:29.920
you say asyncio.setEventLoopPolicy


00:42:29.920 --> 00:42:32.760
and you pass over the UVA loop policy class


00:42:32.760 --> 00:42:35.400
and now the rest of your program just uses that.


00:42:35.400 --> 00:42:36.280
It's really nice.


00:42:36.280 --> 00:42:41.420
- Yeah, I don't think you have any other like--


00:42:41.420 --> 00:42:42.260
- Yeah, go ahead.


00:42:42.260 --> 00:42:43.660
- Or other implementations actually.


00:42:43.660 --> 00:42:47.820
- Yeah, I don't either, but it's really nice.


00:42:47.820 --> 00:42:51.420
And it basically bundles up, as you said, libuv.


00:42:51.420 --> 00:42:52.980
They've got some nice performance graphs.


00:42:52.980 --> 00:42:56.260
It says uv loop makes asyncio two to four times faster.


00:42:56.260 --> 00:42:58.300
And who wouldn't want that for free, right?


00:42:58.300 --> 00:43:00.340
- Sorry?


00:43:00.340 --> 00:43:04.140
- Who wouldn't want your asyncio code


00:43:04.140 --> 00:43:06.700
to just go two to four times faster with no effort?


00:43:06.700 --> 00:43:09.380
- Yeah, as you said, it's super easy to install and use.


00:43:09.380 --> 00:43:11.780
So there's no really downside.


00:43:11.780 --> 00:43:17.060
- Yeah, so Mario has a totally reasonable question


00:43:17.060 --> 00:43:19.140
and the audience, why wouldn't you be able


00:43:19.140 --> 00:43:21.700
to just be the standard AC guy implementation then?


00:43:21.700 --> 00:43:23.300
What's the catch?


00:43:23.300 --> 00:43:25.380
- Well, I don't know what the catch is,


00:43:25.380 --> 00:43:29.700
but I could assume that it's easier to change


00:43:29.700 --> 00:43:33.060
outside of the CPython development cycle.


00:43:33.060 --> 00:43:37.420
And yeah, probably that's one of the reasons.


00:43:37.420 --> 00:43:38.260
I don't know.


00:43:38.260 --> 00:43:39.080
- That's a good idea.


00:43:39.080 --> 00:43:48.000
So do you want Python itself to take on libvv as a C dependency?


00:43:48.000 --> 00:43:53.720
And then third, when I played with uv loop originally, it's been a few years, it didn't


00:43:53.720 --> 00:43:55.480
work at all on Windows.


00:43:55.480 --> 00:44:01.240
Its implementation of libvv was a-- for whatever reason, it just wouldn't install on Windows.


00:44:01.240 --> 00:44:05.360
And that, obviously, is a breaking change or a stopper.


00:44:05.360 --> 00:44:07.320
So maybe even if it works on Windows,


00:44:07.320 --> 00:44:11.360
maybe there's like some obscure place where Python runs,


00:44:11.360 --> 00:44:13.680
but libvv won't, you know,


00:44:13.680 --> 00:44:17.000
think of like some small device,


00:44:17.000 --> 00:44:19.200
like a Raspberry Pi or whatever, I don't know.


00:44:19.200 --> 00:44:22.040
- Yeah, and I think we're coming down to the discussion


00:44:22.040 --> 00:44:24.000
we had before about the benchmarking again,


00:44:24.000 --> 00:44:27.200
that maybe not everyone actually wants this speed


00:44:27.200 --> 00:44:29.040
or needs this speed.


00:44:29.040 --> 00:44:32.660
Maybe it's just for like very optimized production use cases


00:44:32.660 --> 00:44:35.320
and you actually need this four times faster.


00:44:35.320 --> 00:44:36.520
And for all the other use cases,


00:44:36.520 --> 00:44:38.360
maybe it's your code that is slow anyway.


00:44:38.360 --> 00:44:41.520
So you don't really care too much.


00:44:41.520 --> 00:44:44.560
- Yeah, there was a discussion about a few years ago


00:44:44.560 --> 00:44:48.580
about why is requests not just built into Python, right?


00:44:48.580 --> 00:44:51.680
They're like, well, there's URL stuff in there,


00:44:51.680 --> 00:44:54.640
but it's way less obvious how to use it


00:44:54.640 --> 00:44:57.660
compared to just request.get, done.


00:44:57.660 --> 00:45:03.120
And response.json, when you get your response back


00:45:03.120 --> 00:45:03.960
and whatnot.


00:45:03.960 --> 00:45:07.780
And they debated that at the Core Dev Summit.


00:45:07.780 --> 00:45:12.720
And they decided if we put requests into CPython,


00:45:12.720 --> 00:45:14.200
kind of like you were saying,


00:45:14.200 --> 00:45:16.400
it'll actually slow the progress


00:45:16.400 --> 00:45:18.960
and the evolution of requests itself.


00:45:18.960 --> 00:45:21.440
And they wanted to keep this nice library,


00:45:21.440 --> 00:45:23.760
its own thing that could go at its own pace.


00:45:23.760 --> 00:45:24.580
- Yeah, it makes sense.


00:45:24.580 --> 00:45:28.160
I think there, I also heard that the security there,


00:45:28.160 --> 00:45:32.040
it's easier to patch the library in like on PyPI


00:45:32.040 --> 00:45:34.160
and make people one update


00:45:34.160 --> 00:45:37.160
and shipping a hotfix release or whatever of Python


00:45:37.160 --> 00:45:39.320
to fix those security issues.


00:45:39.320 --> 00:45:40.840
- Yeah, absolutely.


00:45:40.840 --> 00:45:42.720
And Brandon just says,


00:45:42.720 --> 00:45:44.920
I just learned that FastAPI starlet


00:45:44.920 --> 00:45:46.600
use uv loop by default.


00:45:46.600 --> 00:45:48.640
Yeah, that's one of the things I was thinking of.


00:45:48.640 --> 00:45:50.600
If it's installed in the virtual environment


00:45:50.600 --> 00:45:53.720
and has access to it, it'll just take it and go.


00:45:53.720 --> 00:45:55.940
No need to make any changes there.


00:45:55.940 --> 00:45:56.780
All right, awesome.


00:45:56.780 --> 00:46:00.320
So that's just the one thing in the alternate loop section,


00:46:00.320 --> 00:46:02.320
but quite neat indeed.


00:46:02.320 --> 00:46:07.500
Ben, there's gotta be a miscellaneous, right?


00:46:07.500 --> 00:46:10.120
There's gotta be a utils, there's gotta be a helpers.


00:46:10.120 --> 00:46:11.520
There's gotta be something that's just like,


00:46:11.520 --> 00:46:13.620
well, what the heck is this?


00:46:13.620 --> 00:46:16.200
Tell us about the grab bag at the end here.


00:46:16.200 --> 00:46:20.040
- Yeah, there's a few here, which I find very interesting.


00:46:20.040 --> 00:46:22.280
The first one here is IO-Chan,


00:46:22.280 --> 00:46:27.360
which adds a CSP style concurrency features.


00:46:27.360 --> 00:46:29.640
So if you've done some Go programming,


00:46:29.640 --> 00:46:32.400
you came across channels, I would say.


00:46:32.400 --> 00:46:35.280
And this I/O chan brings these kind of patterns


00:46:35.280 --> 00:46:37.200
into Async I/O.


00:46:37.200 --> 00:46:42.040
So basically what you will have is you can create a channel


00:46:42.040 --> 00:46:44.760
and then you can have multiple core teams


00:46:44.760 --> 00:46:47.960
like a producer and a consumer listening


00:46:47.960 --> 00:46:49.960
and writing to this channel.


00:46:49.960 --> 00:46:51.840
And you can have it buffered or not.


00:46:51.840 --> 00:46:53.600
And these kinds of things,


00:46:53.600 --> 00:46:55.400
you can select on multiple channels


00:46:55.400 --> 00:46:58.080
and react on incoming data, these kinds of things.


00:46:58.080 --> 00:47:01.000
So it's just another way to communicate


00:47:01.000 --> 00:47:04.320
between your coroutines than what you would probably do


00:47:04.320 --> 00:47:06.140
with the built-in mechanisms.


00:47:06.140 --> 00:47:07.440
- Sure.


00:47:07.440 --> 00:47:09.520
And a lot of those patterns are incredibly hard


00:47:09.520 --> 00:47:12.720
to get just right with the event signaling


00:47:12.720 --> 00:47:14.800
and all those things.


00:47:14.800 --> 00:47:18.360
And so if you can just hook it in, then it's good to go.


00:47:18.360 --> 00:47:20.400
- Yeah, you could probably make this work


00:47:20.400 --> 00:47:23.360
with queues and events and all these,


00:47:23.360 --> 00:47:25.600
but it's nice to have the abstraction.


00:47:26.800 --> 00:47:28.040
- Yeah, of course. - Right, exactly.


00:47:28.040 --> 00:47:29.600
- GSP primitives.


00:47:29.600 --> 00:47:32.880
- Yeah, it's sort of equivalent to saying,


00:47:32.880 --> 00:47:35.880
well, you've got a HTTP server built into Python itself,


00:47:35.880 --> 00:47:37.480
like why do you need Flask?


00:47:37.480 --> 00:47:39.160
And it's like, no, no, no, no.


00:47:39.160 --> 00:47:41.160
No, we don't wanna do this.


00:47:41.160 --> 00:47:42.640
Other notable ones here,


00:47:42.640 --> 00:47:46.400
like one that stood out to me is AIO cache,


00:47:46.400 --> 00:47:50.200
which is pretty straightforward.


00:47:50.200 --> 00:47:51.400
It's like just a cache, right?


00:47:51.400 --> 00:47:56.400
Add, get, set, even has a cool increment and so on.


00:47:56.640 --> 00:48:00.620
but it's asyncio and it talks to Redis memcache,


00:48:00.620 --> 00:48:02.360
Redis memcache, message pack,


00:48:02.360 --> 00:48:06.160
a bunch of different capabilities it has, right?


00:48:06.160 --> 00:48:08.320
- Yeah, it looks super cool.


00:48:08.320 --> 00:48:11.400
I haven't used it, but yeah,


00:48:11.400 --> 00:48:14.040
it's nice that you can just switch out the backends


00:48:14.040 --> 00:48:15.440
and use something else.


00:48:15.440 --> 00:48:17.960
Also the API looks very straightforward


00:48:17.960 --> 00:48:20.240
with like just .set, .get.


00:48:20.240 --> 00:48:22.760
- Exactly.


00:48:22.760 --> 00:48:25.000
It's pretty straightforward to, you know,


00:48:25.000 --> 00:48:28.720
a wait, a cache.get or a wait, a cache.set.


00:48:28.720 --> 00:48:32.280
Yeah, it seems like a real nice, real nice API.


00:48:32.280 --> 00:48:36.040
- And also the decorators will look interesting


00:48:36.040 --> 00:48:41.040
so that you can cache our coroutines probably.


00:48:41.040 --> 00:48:43.120
- Yeah, exactly.


00:48:43.120 --> 00:48:45.360
That's just, I didn't really catch that before you.


00:48:45.360 --> 00:48:49.800
Right, so people are probably familiar with the func tools.


00:48:49.800 --> 00:48:53.200
- LRU cache.


00:48:53.200 --> 00:48:54.400
- LTS cache.


00:48:54.400 --> 00:48:55.400
the LRU cache.


00:48:55.400 --> 00:48:57.920
Yes, I'm like, oh, there's a, it's not a T.


00:48:57.920 --> 00:48:59.920
LRU cache, thank you.


00:48:59.920 --> 00:49:01.840
But this is that idea, but instead of saying,


00:49:01.840 --> 00:49:03.640
well, where you cache that is in memory,


00:49:03.640 --> 00:49:06.000
as you just say, cache equals Redis,


00:49:06.000 --> 00:49:07.120
which is like, wait a minute.


00:49:07.120 --> 00:49:08.940
Okay, that's cool.


00:49:08.940 --> 00:49:09.940
That's really cool.


00:49:09.940 --> 00:49:11.800
- Yeah, it's cool.


00:49:11.800 --> 00:49:15.080
Just make sure the latency is lower


00:49:15.080 --> 00:49:16.920
than actually your execution time.


00:49:16.920 --> 00:49:19.120
But yeah, it looks very nice.


00:49:19.120 --> 00:49:21.000
- That's a really good point.


00:49:21.000 --> 00:49:22.640
Like if you call this a bunch of times


00:49:22.640 --> 00:49:25.640
the Redis is far away, like it actually might just be slower.


00:49:25.640 --> 00:49:29.140
But the CPU will be nice and low, so you'll be fine.


00:49:29.140 --> 00:49:32.440
- Yes. - Now, this is a cool project.


00:49:32.440 --> 00:49:35.140
Another one that I really like, I think,


00:49:35.140 --> 00:49:39.640
adds some important capabilities is AIO files.


00:49:39.640 --> 00:49:41.640
Tell us about that one.


00:49:41.640 --> 00:49:45.640
Yeah, it basically provides you file API support


00:49:45.640 --> 00:49:49.640
like you have with normal like open and these kind of functions


00:49:49.640 --> 00:49:53.400
and do it async with async.io.


00:49:53.400 --> 00:49:55.680
But I'm not sure if I read it here,


00:49:55.680 --> 00:49:58.680
but I think on some platforms like Linux,


00:49:58.680 --> 00:50:02.040
it's hard to actually implement this correctly


00:50:02.040 --> 00:50:03.300
with like ePoll and stuff.


00:50:03.300 --> 00:50:04.880
I don't know if you know more about this,


00:50:04.880 --> 00:50:09.160
but I heard that it's not really a big benefit actually


00:50:09.160 --> 00:50:11.000
to run it async.


00:50:11.000 --> 00:50:14.440
- Yeah, I don't know either.


00:50:14.440 --> 00:50:18.040
What it claims here is it doesn't try,


00:50:18.040 --> 00:50:20.240
I don't think it tries to do fancy work


00:50:20.240 --> 00:50:24.280
with truly hooking into asynchronous stuff in the file.


00:50:24.280 --> 00:50:26.320
So it just says, it's just gonna run it


00:50:26.320 --> 00:50:28.020
on a background thread, basically.


00:50:28.020 --> 00:50:29.960
- Oh yeah.


00:50:29.960 --> 00:50:32.000
- So it probably creates like a worker thread


00:50:32.000 --> 00:50:33.200
and whenever you ask to read it,


00:50:33.200 --> 00:50:35.400
just in the back, it goes open.


00:50:35.400 --> 00:50:37.960
And then when you say await read,


00:50:37.960 --> 00:50:40.420
it just on that thread, it maybe sets an event


00:50:40.420 --> 00:50:41.520
and then does a read or something,


00:50:41.520 --> 00:50:43.520
I don't know, a little bit of like juggling


00:50:43.520 --> 00:50:47.060
background threads, but yeah.


00:50:47.060 --> 00:50:50.540
So in a sense, it may make it actually tiny bit slower,


00:50:50.540 --> 00:50:54.540
but if you're doing an API and the API has got to read


00:50:54.540 --> 00:50:56.500
or write a big file, that could be a problem.


00:50:56.500 --> 00:50:58.460
The other one is, you know, we'll see this


00:50:58.460 --> 00:51:01.160
in a couple of things we're discussing in this section.


00:51:01.160 --> 00:51:07.260
File, sometimes it might be slash user slash whatever,


00:51:07.260 --> 00:51:13.020
but it could be, you know, backslash, backslash,


00:51:13.020 --> 00:51:15.860
network server, backslash, network drive, right?


00:51:15.860 --> 00:51:22.900
It could be very, very slow where all of a sudden, you know, unlocking that access is


00:51:22.900 --> 00:51:23.900
a huge deal.


00:51:23.900 --> 00:51:24.900
Yeah.


00:51:24.900 --> 00:51:25.900
Yeah.


00:51:25.900 --> 00:51:26.900
Does this actually support this?


00:51:26.900 --> 00:51:27.900
This library?


00:51:27.900 --> 00:51:28.900
So could you...


00:51:28.900 --> 00:51:29.900
Talking to your files?


00:51:29.900 --> 00:51:33.900
Oh, if you have it mounted as a drive, you mean.


00:51:33.900 --> 00:51:34.900
Okay.


00:51:34.900 --> 00:51:35.900
Yeah, exactly.


00:51:35.900 --> 00:51:36.900
Yeah.


00:51:36.900 --> 00:51:38.980
Like what the thing you're talking to might actually be far away.


00:51:38.980 --> 00:51:39.980
Yeah.


00:51:39.980 --> 00:51:40.980
Yeah, exactly.


00:51:40.980 --> 00:51:41.980
Yeah.


00:51:41.980 --> 00:51:42.980
Yeah.


00:51:42.980 --> 00:51:45.660
does say handling local disk files,


00:51:45.660 --> 00:51:49.700
but I bet if you mapped it in your OS, it wouldn't know.


00:51:49.700 --> 00:51:51.780
>> Yeah, probably it will work.


00:51:51.780 --> 00:51:53.440
What I also like here,


00:51:53.440 --> 00:51:56.780
there's also an I/O path.


00:51:56.780 --> 00:52:01.540
>> Yes. That one actually looks maybe even cooler.


00:52:01.540 --> 00:52:04.740
>> I think a lot of people are using Pathlib these days,


00:52:04.740 --> 00:52:10.460
and I/O path basically gives you an async path type,


00:52:10.460 --> 00:52:14.360
which you can just wrap around your strings or path objects,


00:52:14.360 --> 00:52:16.320
and you get the same methods,


00:52:16.320 --> 00:52:18.240
but you can evade them basically.


00:52:18.240 --> 00:52:22.120
You can have your path.open, path.exists,


00:52:22.120 --> 00:52:26.140
you need to use an evade, and this is for you.


00:52:26.140 --> 00:52:28.120
I don't know here how it's implemented,


00:52:28.120 --> 00:52:32.920
if it's also using background threads or if it doesn't match it.


00:52:32.920 --> 00:52:37.000
>> It actually hook into the true I/O completion ports


00:52:37.000 --> 00:52:38.920
and all that business.


00:52:39.000 --> 00:52:41.240
- Yeah, so this is really cool.


00:52:41.240 --> 00:52:44.360
So you could create, we all know about path from Pathlib,


00:52:44.360 --> 00:52:45.800
it's super neat.


00:52:45.800 --> 00:52:48.460
And you can ask it questions like, does it exist?


00:52:48.460 --> 00:52:53.460
Or create this directory, or is it a directory?


00:52:53.460 --> 00:52:57.880
Or you can actually say read bytes, write bytes, read text.


00:52:57.880 --> 00:52:59.220
There's a lot of things that you would do


00:52:59.220 --> 00:53:00.760
with a context manager that become


00:53:00.760 --> 00:53:02.720
just one liners with Pathlib.


00:53:02.720 --> 00:53:05.480
And this async path lets you make all those asynchronous,


00:53:05.480 --> 00:53:08.800
like await path that exists, await write bytes, and so on.


00:53:08.800 --> 00:53:11.420
- And the cool thing is there really,


00:53:11.420 --> 00:53:14.100
I think try to be a drop-in replacement for Pathlib


00:53:14.100 --> 00:53:16.100
in the asyncio world.


00:53:16.100 --> 00:53:19.020
So if you've been having a code base


00:53:19.020 --> 00:53:21.460
or have been using Pathlib in an async code base,


00:53:21.460 --> 00:53:23.020
it's super easy to just switch


00:53:23.020 --> 00:53:25.940
to an async version of Pathlib.


00:53:25.940 --> 00:53:30.100
- Oh, excellent.


00:53:30.100 --> 00:53:32.320
It says the implementation here, let's see.


00:53:32.320 --> 00:53:35.820
Does it tell us?


00:53:35.820 --> 00:53:38.100
It inherits from PurePath, which is cool.


00:53:38.100 --> 00:53:44.940
So you could use it as an argument to some of the pieces


00:53:44.940 --> 00:53:48.580
that will take path objects directly.


00:53:48.580 --> 00:53:52.540
It takes advantage of libAIO for asyncIO on Linux,


00:53:52.540 --> 00:53:55.420
which is probably where you care most about performance,


00:53:55.420 --> 00:53:58.780
because that's where your server is, right?


00:53:58.780 --> 00:53:59.820
>> Yeah.


00:53:59.820 --> 00:54:02.380
>> So we're talking about libAIO, but yeah.


00:54:06.100 --> 00:54:09.580
That's probably some sort of native type thing going on there.


00:54:09.580 --> 00:54:15.500
Like Linux native asynchronous IO access library.


00:54:15.500 --> 00:54:16.820
Yeah, that's okay.


00:54:16.820 --> 00:54:19.300
So maybe this is not just a little bit better.


00:54:19.300 --> 00:54:20.700
Yeah, maybe it's not just a little bit better


00:54:20.700 --> 00:54:23.860
than AO files because, well, you can work with path objects,


00:54:23.860 --> 00:54:27.220
but it has like an OS level implementation as well.


00:54:27.220 --> 00:54:28.220
That's pretty great.


00:54:28.220 --> 00:54:30.700
All right, I'm using it.


00:54:30.700 --> 00:54:32.900
Looks good.


00:54:32.900 --> 00:54:33.400
Yeah.


00:54:33.400 --> 00:54:38.500
That looks like those are all the ones that jumped out at me.


00:54:38.500 --> 00:54:41.780
Those two that you called out there, the cache and the files,


00:54:41.780 --> 00:54:44.820
and the path history, I guess.


00:54:44.820 --> 00:54:47.180
Anything else worth mentioning real quick?


00:54:47.180 --> 00:54:49.620
No, I don't think so.


00:54:49.620 --> 00:54:53.780
I mean, the misc one is just a miscellaneous package in the miscellaneous packages,


00:54:53.780 --> 00:54:54.420
I would say.


00:54:54.420 --> 00:54:55.940
So, yeah, I'm going to sell it.


00:54:55.940 --> 00:54:57.460
I just think maybe it's in there.


00:54:57.460 --> 00:55:01.460
It's like the meta miscellaneous,


00:55:01.460 --> 00:55:04.300
or miscellaneous squared or something like that.


00:55:04.300 --> 00:55:07.380
That's right, there's a bunch of random helper things


00:55:07.380 --> 00:55:08.220
in there, that's cool.


00:55:08.220 --> 00:55:09.040
Then you have some stuff,


00:55:09.040 --> 00:55:10.300
let me just go to quickly flip through it.


00:55:10.300 --> 00:55:11.620
Like there's some stuff on writing,


00:55:11.620 --> 00:55:13.060
like tutorials and articles,


00:55:13.060 --> 00:55:18.060
and then some video talks about AsyncIO in there, right?


00:55:18.060 --> 00:55:20.420
- Yes, yeah, I think there are good ones.


00:55:20.420 --> 00:55:24.740
I think a lot of them are actually from David Beasley.


00:55:24.740 --> 00:55:25.580
I'm not sure.


00:55:25.580 --> 00:55:27.100
- Yeah, David Beasley has done some cool stuff


00:55:27.100 --> 00:55:31.500
with kind of recreating Async.io live in the early days.


00:55:31.500 --> 00:55:32.340
Yeah.


00:55:32.340 --> 00:55:33.160
- Yeah.


00:55:33.160 --> 00:55:34.720
- And then Yuri, who we spoke about.


00:55:34.720 --> 00:55:38.900
- Yeah, if you really wanna know like how you can think


00:55:38.900 --> 00:55:41.140
about like a mental model of Async.io,


00:55:41.140 --> 00:55:44.720
I think these are very good talks.


00:55:44.720 --> 00:55:47.780
I should better understand.


00:55:47.780 --> 00:55:49.060
- Absolutely.


00:55:49.060 --> 00:55:51.020
Cool, I don't know about this guy though.


00:55:51.020 --> 00:55:54.660
All right, then the last thing you closed it out with


00:55:54.660 --> 00:55:59.500
is alternative implementations to AsyncIO,


00:55:59.500 --> 00:56:02.980
not just like a tool you can use within AsyncIO,


00:56:02.980 --> 00:56:04.660
but there's Curio and Trio


00:56:04.660 --> 00:56:07.220
are like probably the big two there, right?


00:56:07.220 --> 00:56:08.420
- Yeah, I think Curio,


00:56:08.420 --> 00:56:10.100
I think it's from David Beasley as well,


00:56:10.100 --> 00:56:13.060
but I don't think it's maintained really.


00:56:13.060 --> 00:56:14.940
But I think it's been a nice experiment


00:56:14.940 --> 00:56:16.460
and at the time I looked at it,


00:56:16.460 --> 00:56:18.700
it was kind of minimal in the implementation.


00:56:18.700 --> 00:56:20.100
So you could kind of digest


00:56:20.100 --> 00:56:23.740
and see how something would be done like AsyncIO.


00:56:23.740 --> 00:56:26.420
- Mm-hmm, okay, yeah.


00:56:26.420 --> 00:56:29.700
- There's Trio, which I think is still out there.


00:56:29.700 --> 00:56:33.340
And that's also why Any.io exists probably,


00:56:33.340 --> 00:56:36.580
because it kind of, you can use Any.io as a front end


00:56:36.580 --> 00:56:40.680
for Trio or Async.io and add some more high level features


00:56:40.680 --> 00:56:42.500
on top of Async.io.


00:56:42.500 --> 00:56:44.860
- Yeah, I recently had Alex from Any.io,


00:56:44.860 --> 00:56:46.140
creator of Any.io on there.


00:56:46.140 --> 00:56:49.380
And just real quick shout out for some of the things


00:56:49.380 --> 00:56:51.860
I thought was cool over there,


00:56:51.860 --> 00:56:53.580
is it could run on top of Async.io


00:56:53.580 --> 00:56:55.300
or trio, which is cool.


00:56:55.300 --> 00:56:58.180
It also has some really interesting aspects


00:56:58.180 --> 00:57:01.460
for like converting threads


00:57:01.460 --> 00:57:06.260
into converting regular functions


00:57:06.260 --> 00:57:10.340
into a weightable things by running them on other threads.


00:57:10.340 --> 00:57:11.860
And it can either do that on a thread


00:57:11.860 --> 00:57:13.700
or it can even do that on a sub process.


00:57:13.700 --> 00:57:17.020
So you can like go and say,


00:57:17.020 --> 00:57:20.580
a weight run process and then you get its value back, right?


00:57:20.580 --> 00:57:24.080
or you could do that with multi-processing,


00:57:24.080 --> 00:57:28.060
or even create a asynchronous for loop


00:57:28.060 --> 00:57:32.340
over the output stream, like standard out of some process.


00:57:32.340 --> 00:57:37.420
- Yeah, I could have used this a few times in the past.


00:57:37.420 --> 00:57:38.620
- Yes, I know.


00:57:38.620 --> 00:57:40.700
This is really, really neat to be able to do that.


00:57:40.700 --> 00:57:42.860
The other thing is the synchronization primitives


00:57:42.860 --> 00:57:44.720
like events and semaphores.


00:57:44.720 --> 00:57:49.780
He says, I haven't tried it out really,


00:57:49.780 --> 00:57:52.120
but they're supposed to be a little bit less likely


00:57:52.120 --> 00:57:54.280
to get deadlocks or race conditions


00:57:54.280 --> 00:57:56.960
because they're not re-entrant basically.


00:57:56.960 --> 00:57:58.000
- Okay, nice.


00:57:58.000 --> 00:58:00.120
- Yeah, so there's a bunch of cool little helper


00:58:00.120 --> 00:58:01.840
type things in the IO there.


00:58:01.840 --> 00:58:08.520
Well, that's pretty much it I think for the list.


00:58:08.520 --> 00:58:11.760
That was a lot, but a lot of good stuff.


00:58:11.760 --> 00:58:13.680
A lot of awesome stuff, wouldn't you say?


00:58:13.680 --> 00:58:16.960
- Yeah, and I'm sure there's more awesome stuff out there


00:58:16.960 --> 00:58:20.040
like the Escolite one we've covered.


00:58:20.040 --> 00:58:23.760
You added one five minutes before the talk started.


00:58:23.760 --> 00:58:26.040
- 'Cause I was going through, I was like,


00:58:26.040 --> 00:58:27.840
oh yeah, this one, I was looking at motor,


00:58:27.840 --> 00:58:29.480
I'm like, oh, well, the stuff built on motor,


00:58:29.480 --> 00:58:31.120
there's some good ones there, let's throw those in


00:58:31.120 --> 00:58:33.840
and people can vote for them if they want.


00:58:33.840 --> 00:58:36.280
I'm sure that people listening,


00:58:36.280 --> 00:58:37.840
if they maintain one of these libraries,


00:58:37.840 --> 00:58:39.600
if they're big fans and use one a lot


00:58:39.600 --> 00:58:42.920
that's not on the list, go make a PR, right?


00:58:42.920 --> 00:58:44.680
- Absolutely, yeah.


00:58:44.680 --> 00:58:47.060
I also plan to add some more automation


00:58:47.060 --> 00:58:50.560
so that we can, for example, check for dead links.


00:58:50.560 --> 00:58:53.000
It would also be nice to kind of catch outdated libraries


00:58:53.000 --> 00:58:56.640
like the 20, like the IO mock that we've seen before.


00:58:56.640 --> 00:58:57.480
- Yes, exactly.


00:58:57.480 --> 00:58:59.320
Like, you know, if it hasn't been touched in six years,


00:58:59.320 --> 00:59:01.360
it probably isn't needed anymore, right?


00:59:01.360 --> 00:59:02.200
- Exactly.


00:59:02.200 --> 00:59:03.840
Yeah.


00:59:03.840 --> 00:59:05.800
- Cool.


00:59:05.800 --> 00:59:08.360
Yeah, awesome.


00:59:08.360 --> 00:59:09.720
I mean, this is a great resource


00:59:09.720 --> 00:59:12.120
and I sort of shouted out the popularity


00:59:12.120 --> 00:59:13.320
of some of these projects to give us sense.


00:59:13.320 --> 00:59:16.560
like your list has got 3.7 thousand stars.


00:59:16.560 --> 00:59:18.800
Like that's pretty awesome.


00:59:18.800 --> 00:59:21.200
That's a lot of people who got value from it.


00:59:21.200 --> 00:59:22.040
- It is.


00:59:22.040 --> 00:59:24.040
And I can only recommend to look at these lists,


00:59:24.040 --> 00:59:25.600
you know, whatever list it is,


00:59:25.600 --> 00:59:27.120
there are gems in there


00:59:27.120 --> 00:59:29.920
and it's kind of nice to discover them.


00:59:29.920 --> 00:59:30.960
- Yeah, absolutely.


00:59:30.960 --> 00:59:34.160
Really quick out in the audience,


00:59:34.160 --> 00:59:38.360
Numatos logic says starlet,


00:59:38.360 --> 00:59:41.240
I'm sorry, starlight is an async framework


00:59:41.240 --> 00:59:44.200
built on top of Starlit in Pydantic,


00:59:44.200 --> 00:59:46.160
which is a good candidate.


00:59:46.160 --> 00:59:47.980
I didn't actually give a shout out to it,


00:59:47.980 --> 00:59:50.240
but I thought, oh, no, it's not on there.


00:59:50.240 --> 00:59:54.040
Okay, well, PRs are accepted and reviewed.


00:59:54.040 --> 00:59:55.440
Starlette, there you go.


00:59:55.440 --> 00:59:58.460
Cool, all right.


00:59:58.460 --> 01:00:02.760
Well, Timo, this is really excellent,


01:00:02.760 --> 01:00:04.600
excellent project here,


01:00:04.600 --> 01:00:05.920
and a ton of people are getting value from it,


01:00:05.920 --> 01:00:08.040
so thanks for putting it together.


01:00:08.040 --> 01:00:09.200
- Yeah, thanks to all the people


01:00:09.200 --> 01:00:11.380
who suggested the awesome stuff.


01:00:11.380 --> 01:00:13.900
So I'm, as I said, merely the maintainer of the list.


01:00:13.900 --> 01:00:18.360
So keep them coming and we'll make it even better.


01:00:18.360 --> 01:00:19.280
- Excellent.


01:00:19.280 --> 01:00:22.180
All right, before we get out of here, final two questions.


01:00:22.180 --> 01:00:25.860
I feel like you could just randomly pick one from your list


01:00:25.860 --> 01:00:28.460
but the notable PyPI project,


01:00:28.460 --> 01:00:30.140
you wanna give a shout out to?


01:00:30.140 --> 01:00:31.740
- I think it's not even on there,


01:00:31.740 --> 01:00:34.260
but it will be Tenacity.


01:00:34.260 --> 01:00:36.060
- Oh yeah, Tenacity is good.


01:00:36.060 --> 01:00:38.940
- Yeah, it's a library for retrying stuff


01:00:38.940 --> 01:00:42.580
And I even, I think it has async.


01:00:42.580 --> 01:00:44.580
I'm pretty sure it has async support.


01:00:44.580 --> 01:00:49.340
But it makes it super nice if you have like network calls.


01:00:49.340 --> 01:00:50.900
- Async retries, there you go.


01:00:50.900 --> 01:00:54.580
- Yeah, so it's even the same decorator,


01:00:54.580 --> 01:00:56.300
which is cool from an API perspective.


01:00:56.300 --> 01:00:58.380
I don't even think you have to import something else,


01:00:58.380 --> 01:00:59.740
like something differently.


01:00:59.740 --> 01:01:00.580
- So, right.


01:01:00.580 --> 01:01:02.180
- Because you can actually inspect the function,


01:01:02.180 --> 01:01:04.980
which is being decorated and you can decide what to run.


01:01:04.980 --> 01:01:08.900
So yeah, pretty cool.


01:01:08.900 --> 01:01:11.740
I suggest you use it if you want to retry something


01:01:11.740 --> 01:01:14.740
or have unstable endpoints or whatever.


01:01:14.740 --> 01:01:18.480
Yeah, I love the features to be proud.


01:01:18.480 --> 01:01:22.160
- This is a great library.


01:01:22.160 --> 01:01:24.500
If you're consuming someone else's API


01:01:24.500 --> 01:01:28.900
and that thing is flaky, what are you supposed to do?


01:01:28.900 --> 01:01:30.920
You've got to call it potentially,


01:01:30.920 --> 01:01:33.640
but you can't count it always working.


01:01:33.640 --> 01:01:38.780
I've run into that problem on a lot of my projects as well.


01:01:38.780 --> 01:01:41.360
And I've either done something like Tenacity


01:01:41.360 --> 01:01:42.200
where you just say,


01:01:42.200 --> 01:01:45.020
retry it with some kind of exponential back off,


01:01:45.020 --> 01:01:48.540
or I'll go through and cache it in my database


01:01:48.540 --> 01:01:50.580
and say, I'm gonna try it.


01:01:50.580 --> 01:01:52.780
If it fails, I'm gonna go get it from the database


01:01:52.780 --> 01:01:54.660
and go, it might be a little bit stale,


01:01:54.660 --> 01:01:56.820
but at least this way,


01:01:56.820 --> 01:01:59.020
if it's up to kind of stable, like a currency lookup,


01:01:59.020 --> 01:02:04.020
like, okay, an hour ago, the dollar to Swiss francs,


01:02:04.020 --> 01:02:06.900
the lookup was this, and it might not be perfect,


01:02:06.900 --> 01:02:10.340
but it's better than just going 500 server error.


01:02:10.340 --> 01:02:13.780
- Yeah, and I don't know how many like while loops


01:02:13.780 --> 01:02:16.980
I've written in my life to kind of check a timeout


01:02:16.980 --> 01:02:19.460
and retry and sleep and these kinds of things.


01:02:19.460 --> 01:02:23.020
And it's hard to get this right because, you know,


01:02:23.020 --> 01:02:26.340
you wanna catch termination of the program


01:02:26.340 --> 01:02:27.580
and cancel these things.


01:02:27.580 --> 01:02:29.940
So it's nice to have a library for all these.


01:02:29.940 --> 01:02:30.780
- Yeah, cool.


01:02:30.780 --> 01:02:31.940
And the fact that they support async


01:02:31.940 --> 01:02:34.500
is like perfectly blends in.


01:02:34.500 --> 01:02:35.340
Yeah, and then--


01:02:35.340 --> 01:02:37.100
- I could use it as well.


01:02:37.100 --> 01:02:39.580
- Yeah, yeah, actually it would belong there now.


01:02:39.580 --> 01:02:42.180
All right, and then the other question is,


01:02:42.180 --> 01:02:43.540
if you can write some Python code,


01:02:43.540 --> 01:02:45.380
what editor are you using these days?


01:02:45.380 --> 01:02:49.020
- These days VS Code, it's important though


01:02:49.020 --> 01:02:50.340
that it has been key bindings.


01:02:50.340 --> 01:02:52.420
I've been a user for quite some time,


01:02:52.420 --> 01:02:55.820
so I certainly need that.


01:02:55.820 --> 01:02:59.980
Yeah, but VS Code is my editor to go these days.


01:02:59.980 --> 01:03:01.540
- Awesome.


01:03:01.540 --> 01:03:03.300
All right, final call to action.


01:03:03.300 --> 01:03:06.300
people are interested in your awesome list.


01:03:06.300 --> 01:03:07.940
What do you tell them?


01:03:07.940 --> 01:03:11.460
- Please contribute your awesome ideas, make it PR.


01:03:11.460 --> 01:03:13.900
Also, if you have ideas around automation,


01:03:13.900 --> 01:03:18.700
please send them our way, create a pull request or--


01:03:18.700 --> 01:03:20.640
- Yeah, that's a good idea.


01:03:20.640 --> 01:03:23.340
As a maintainer, that's a very welcome thing, right?


01:03:23.340 --> 01:03:26.940
Find things you don't have to maintain, I'm sure.


01:03:26.940 --> 01:03:28.700
- Absolutely, yeah.


01:03:28.700 --> 01:03:29.540
- Awesome.


01:03:29.540 --> 01:03:31.020
All right, well, thanks so much for being here.


01:03:31.020 --> 01:03:32.980
Thanks everyone for listening.


01:03:32.980 --> 01:03:33.980
Yep, bye.


01:03:33.980 --> 01:03:34.500
>> Bye.


01:03:34.500 --> 01:03:44.500
[BLANK_AUDIO]

