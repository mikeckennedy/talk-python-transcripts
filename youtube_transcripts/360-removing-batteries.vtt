WEBVTT

00:00:00.000 --> 00:00:03.440
- Hello, YouTube. Hello, Brett. Hello, Christian.


00:00:03.440 --> 00:00:04.440
- Hey, Michael.


00:00:04.440 --> 00:00:05.440
- Hey.


00:00:05.440 --> 00:00:06.960
- Hey. Thanks for being here.


00:00:06.960 --> 00:00:08.240
Looking forward to this podcast.


00:00:08.240 --> 00:00:09.760
So yeah, let's just kick it off.


00:00:09.760 --> 00:00:11.000
Those of you out in the audience,


00:00:11.000 --> 00:00:12.360
please put out some questions for us


00:00:12.360 --> 00:00:14.040
if you have thoughts and feedback.


00:00:14.040 --> 00:00:18.560
Brett, Christian, welcome to Talk Python To Me.


00:00:18.560 --> 00:00:20.580
- Thanks for having us.


00:00:20.580 --> 00:00:23.080
- Yeah, thank you for signing up for me.


00:00:23.080 --> 00:00:25.360
- Yeah, Christian, it's great to have you here.


00:00:25.360 --> 00:00:26.200
That's super.


00:00:26.200 --> 00:00:28.600
And Brett, I think you may have been on before.


00:00:29.760 --> 00:00:32.380
Memory recollects, yes, I have been on it.


00:00:32.380 --> 00:00:33.220
I have been on--


00:00:33.220 --> 00:00:34.680
- I love having you on.


00:00:34.680 --> 00:00:36.140
It's always fun to talk about stuff.


00:00:36.140 --> 00:00:39.940
And it always seems like somehow we touch on WebAssembly.


00:00:39.940 --> 00:00:42.660
I think one of the very last conferences I went to


00:00:42.660 --> 00:00:46.240
was PyCon and we recorded like on the expo floor


00:00:46.240 --> 00:00:47.260
talking about WebAssembly.


00:00:47.260 --> 00:00:49.100
So maybe we'll find a way to get back to that.


00:00:49.100 --> 00:00:51.660
- I do remember that conversation very distinctly actually.


00:00:51.660 --> 00:00:52.740
- Yeah, that was fun.


00:00:52.740 --> 00:00:53.780
- Yeah.


00:00:53.780 --> 00:00:55.860
- All right, well, even though you've been on a lot,


00:00:55.860 --> 00:00:58.180
maybe just real quick, tell people about yourself.


00:00:58.180 --> 00:01:01.040
You've been Python core deving for a long time


00:01:01.040 --> 00:01:03.660
and something to do with VS Code and Python as well.


00:01:03.660 --> 00:01:05.160
So tell people about that.


00:01:05.160 --> 00:01:06.000
- This stuff.


00:01:06.000 --> 00:01:09.140
Yeah, just keep it short and sweet.


00:01:09.140 --> 00:01:11.740
I am the dev manager for the Python experience


00:01:11.740 --> 00:01:13.680
and VS Code at Microsoft.


00:01:13.680 --> 00:01:16.640
I've been a Python core developer for 19 years


00:01:16.640 --> 00:01:18.560
and I've been a member of the Python steering council


00:01:18.560 --> 00:01:23.560
since its inception back three and some odd months ago,


00:01:23.560 --> 00:01:27.840
I think, I don't even keep track of when that started.


00:01:27.840 --> 00:01:28.680
- Yes.


00:01:28.680 --> 00:01:30.280
- And that's me.


00:01:30.280 --> 00:01:31.120
- Awesome.


00:01:31.120 --> 00:01:33.720
Christian, how about you tell people about yourself?


00:01:33.720 --> 00:01:34.560
- Hi, I'm Chris.


00:01:34.560 --> 00:01:38.120
So I work for Red Hat, you may have seen that.


00:01:38.120 --> 00:01:38.960
So-


00:01:38.960 --> 00:01:40.600
- You have a Red Hat and you work for Red Hat.


00:01:40.600 --> 00:01:41.420
That's awesome.


00:01:41.420 --> 00:01:43.520
- Yeah, at Red Fedora, by the way.


00:01:43.520 --> 00:01:45.040
So I work for Red Hat


00:01:45.040 --> 00:01:47.200
and security engineering department.


00:01:47.200 --> 00:01:50.240
I work on something that could be easiest described


00:01:50.240 --> 00:01:54.680
as a open source implementation of Active Directory.


00:01:54.680 --> 00:01:57.360
I'm currently working on just containerizing


00:01:57.360 --> 00:02:00.960
all the things and getting that up to the internet.


00:02:00.960 --> 00:02:02.260
So that's a fun one.


00:02:02.260 --> 00:02:05.040
As part of my security work,


00:02:05.040 --> 00:02:07.640
I also do security for CPython.


00:02:07.640 --> 00:02:09.680
So I take care of some of the models


00:02:09.680 --> 00:02:13.600
and I'm part of the security response team.


00:02:13.600 --> 00:02:17.880
Been in Codeveloper for, I think 14 years,


00:02:17.880 --> 00:02:20.120
give or take, probably.


00:02:20.120 --> 00:02:21.360
Long time, eventually.


00:02:21.360 --> 00:02:23.280
So I started doing Python like 20 years ago.


00:02:23.280 --> 00:02:24.240
That was fun.


00:02:24.240 --> 00:02:25.080
- Awesome.


00:02:26.160 --> 00:02:29.360
- Yeah, anything else you wanna know about me?


00:02:29.360 --> 00:02:31.360
- No, I would just like to say thank you


00:02:31.360 --> 00:02:33.920
on behalf of everyone for keeping our machines


00:02:33.920 --> 00:02:36.840
from getting rooted, 'cause we're running Python web apps,


00:02:36.840 --> 00:02:37.940
that's pretty awesome.


00:02:37.940 --> 00:02:40.960
- You're welcome.


00:02:40.960 --> 00:02:44.080
- Seriously though, how often are there


00:02:44.080 --> 00:02:46.760
meaningful security problems in CPython?


00:02:46.760 --> 00:02:49.600
I know that one of the big talking points


00:02:49.600 --> 00:02:52.680
about moving away from Python 2 was like,


00:02:52.680 --> 00:02:54.540
well, if you don't come along for the ride,


00:02:54.540 --> 00:02:56.540
you're not gonna get security updates.


00:02:56.540 --> 00:03:00.420
But how often is that a big problem really?


00:03:00.420 --> 00:03:06.340
How often are there problems where a CV is filing


00:03:06.340 --> 00:03:08.220
and like, oh, we gotta jump on this and quickly.


00:03:08.220 --> 00:03:11.960
- So the last version of Python that came out


00:03:11.960 --> 00:03:13.980
before we had the emergency release for the bugfix.


00:03:13.980 --> 00:03:18.980
So the 3.10.2 I think, had like 11 or 13 CVs,


00:03:18.980 --> 00:03:22.580
although only one that directly affected


00:03:22.580 --> 00:03:24.020
was in the Python code.


00:03:24.020 --> 00:03:26.380
So we also ship a bunch of extensions,


00:03:26.380 --> 00:03:29.580
like we ship a library to parse XML,


00:03:29.580 --> 00:03:32.500
but had like six or eight ZVEs.


00:03:32.500 --> 00:03:35.180
We had a Zlib fix, we had something else.


00:03:35.180 --> 00:03:38.500
So it's not just Python core that's affected,


00:03:38.500 --> 00:03:42.320
but since we bundle and ship several libraries


00:03:42.320 --> 00:03:43.740
with CPython, you know,


00:03:43.740 --> 00:03:46.340
especially Windows and the Mac installers,


00:03:46.340 --> 00:03:48.140
you may be also affected.


00:03:48.140 --> 00:03:49.260
If you have Linux distros,


00:03:49.260 --> 00:03:52.580
they typically have their libraries de-bundled


00:03:52.580 --> 00:03:55.940
and use system libraries and they update them


00:03:55.940 --> 00:03:58.420
out of bounds, but yeah.


00:03:58.420 --> 00:04:00.780
- Okay, well that's actually more than I realized


00:04:00.780 --> 00:04:03.900
to be honest, that's, you don't hear too often


00:04:03.900 --> 00:04:06.300
about it being a big public problem,


00:04:06.300 --> 00:04:08.700
like, you know, log4j or something like that.


00:04:08.700 --> 00:04:13.540
- Yeah, I'd say typically the CVEs we end up dealing with


00:04:13.540 --> 00:04:15.060
is the bundling that Christian mentioned, right?


00:04:15.060 --> 00:04:16.620
Like, Christian does a lot of work to make sure


00:04:16.620 --> 00:04:18.860
we're constantly compatible with the newest versions


00:04:18.860 --> 00:04:20.380
of OpenSSL.


00:04:20.380 --> 00:04:23.180
So for instance, on 2.7, had you not moved over,


00:04:23.180 --> 00:04:26.100
you're gonna have to do the work to be able to use OpenSSL.


00:04:26.100 --> 00:04:28.960
I think 3 is the newest one coming out.


00:04:28.960 --> 00:04:31.660
So that's the real kind of concern,


00:04:31.660 --> 00:04:36.020
unless we screwed up as core devs and we have a nasty CVE,


00:04:36.020 --> 00:04:37.300
it's usually something we depend on


00:04:37.300 --> 00:04:39.060
that typically triggers this kind of thing.


00:04:39.060 --> 00:04:40.340
- I see, interesting.


00:04:40.340 --> 00:04:41.180
Yeah, yeah.


00:04:41.180 --> 00:04:46.060
Well, speaking of the standard library and stuff,


00:04:46.060 --> 00:04:51.060
Let's start out by talking about Python just on GitHub


00:04:51.060 --> 00:04:54.520
because I think maybe the time of yours releases


00:04:54.520 --> 00:04:56.920
it might be already a week old,


00:04:56.920 --> 00:04:59.640
but Brett, you were one of the big proponents


00:04:59.640 --> 00:05:03.240
of moving CPython and the Python organization


00:05:03.240 --> 00:05:04.880
over to GitHub, right?


00:05:04.880 --> 00:05:06.900
- Yeah, I drove that move.


00:05:06.900 --> 00:05:08.680
- Thank you, that's awesome.


00:05:08.680 --> 00:05:10.180
It's so nice to be over there,


00:05:10.180 --> 00:05:13.600
but one of the challenges has been that bug.python.org


00:05:13.600 --> 00:05:15.440
has kind of been its own island,


00:05:15.440 --> 00:05:18.040
especially since this move, right?


00:05:18.040 --> 00:05:23.040
- Yeah, so when I helped move us off of material to get


00:05:23.040 --> 00:05:28.800
and thus move us to GitHub for pull requests and stuff,


00:05:28.800 --> 00:05:30.720
I basically had to choose my battles.


00:05:30.720 --> 00:05:32.920
And the battle I chose was changing


00:05:32.920 --> 00:05:36.680
our version control system and no longer self-hosting


00:05:36.680 --> 00:05:38.560
our version control system.


00:05:38.560 --> 00:05:41.880
I was not up mentally to the challenge


00:05:41.880 --> 00:05:45.880
of also trying to move the development team


00:05:45.880 --> 00:05:48.100
over to a new issue tracker as well.


00:05:48.100 --> 00:05:51.060
So I purposely punted on that problem


00:05:51.060 --> 00:05:53.960
and tackled the one I thought I was capable of handling


00:05:53.960 --> 00:05:55.840
and dealing with, and that's why we ended up


00:05:55.840 --> 00:05:59.160
with this somewhat split personality problem


00:05:59.160 --> 00:06:01.280
of Python being a GitHub for pull requests


00:06:01.280 --> 00:06:03.960
and for code hosting, but not for issue tracking.


00:06:03.960 --> 00:06:09.640
- Well, Kito said yesterday, I believe it was yesterday,


00:06:09.640 --> 00:06:11.520
maybe the day before yesterday on Twitter,


00:06:11.520 --> 00:06:13.320
that, hey, it's happening, the bugs,


00:06:13.320 --> 00:06:15.080
Python.org's migrating over,


00:06:15.080 --> 00:06:17.680
and then it got delayed until April 1st.


00:06:17.680 --> 00:06:19.940
So hopefully that happens really soon.


00:06:19.940 --> 00:06:22.560
But what was really surprising to me was just


00:06:22.560 --> 00:06:25.120
how long that migration is, right?


00:06:25.120 --> 00:06:28.160
It's not like a copy the files over,


00:06:28.160 --> 00:06:30.280
get init, get commit,


00:06:30.280 --> 00:06:33.220
or the equivalent of the, for the issues.


00:06:33.220 --> 00:06:36.520
It's days to migrate all the issues.


00:06:36.520 --> 00:06:38.680
- Yeah, so there's tricky parts to this.


00:06:38.680 --> 00:06:42.560
I mean, one is we're getting internal help from GitHub,


00:06:42.560 --> 00:06:47.380
but obviously it's not common to move issue trackers


00:06:47.380 --> 00:06:49.780
into GitHub per se, like a lot of projects,


00:06:49.780 --> 00:06:52.460
I think just start on GitHub and have for like a decade.


00:06:52.460 --> 00:06:56.180
So the idea of moving over is kind of a new thing.


00:06:56.180 --> 00:06:58.460
And on top of it, not very many projects


00:06:58.460 --> 00:07:01.540
have the volume of issues historically


00:07:01.540 --> 00:07:02.700
to move over that we have, right?


00:07:02.700 --> 00:07:07.700
Like we have like 7,000 open issues, I think alone.


00:07:08.020 --> 00:07:13.660
So the volume there also causes an extra overload.


00:07:13.660 --> 00:07:17.060
And because GitHub, as I said, they have some internal tooling for this,


00:07:17.060 --> 00:07:19.740
but it's not like something that they work on month over month.


00:07:19.740 --> 00:07:23.260
It's there and we're using it, but it's not optimized


00:07:23.260 --> 00:07:25.660
because it's just not a typical business concern,


00:07:25.660 --> 00:07:27.260
which totally makes sense.


00:07:27.260 --> 00:07:30.140
How often do you have a project of our size and age


00:07:30.140 --> 00:07:32.380
wanting to migrate over like this?


00:07:32.380 --> 00:07:34.020
Yeah, I think just--


00:07:34.020 --> 00:07:35.140
Yeah, go ahead, Christian.


00:07:35.140 --> 00:07:36.140
Just pull up the numbers.


00:07:36.140 --> 00:07:42.540
So we have almost 59,000 bugs in total on the bug tracker.


00:07:42.540 --> 00:07:44.420
And almost 8,000 open.


00:07:44.420 --> 00:07:45.980
Yeah, 7,700.


00:07:45.980 --> 00:07:47.340
Yeah.


00:07:47.340 --> 00:07:55.060
And trying to translate over as much metadata as possible is computationally expensive,


00:07:55.060 --> 00:07:56.060
right?


00:07:56.060 --> 00:07:59.220
Because what we have to do is we have to generate a dump and the dump has a different data model,


00:07:59.220 --> 00:08:00.220
right?


00:08:00.220 --> 00:08:01.620
And it's a different data model on top of it.


00:08:01.620 --> 00:08:02.620
Correct.


00:08:02.620 --> 00:08:04.660
For instance, one of the reasons this took so long


00:08:04.660 --> 00:08:09.540
was we had to first decide we wanted to do this,


00:08:09.540 --> 00:08:11.580
convince people that we should do it,


00:08:11.580 --> 00:08:14.180
find someone, it was at some Maladi initially,


00:08:14.180 --> 00:08:16.820
to come in and kind of figure out how to map things


00:08:16.820 --> 00:08:17.720
and get things working.


00:08:17.720 --> 00:08:21.300
And then earlier this year, we had Wukash step in


00:08:21.300 --> 00:08:24.440
and help out as well as the developer in residence


00:08:24.440 --> 00:08:26.620
to help push this over the finish line.


00:08:26.620 --> 00:08:28.980
And on top of all that, having to process all that data,


00:08:28.980 --> 00:08:30.220
export it to the right format,


00:08:30.220 --> 00:08:33.060
and then have GitHub's tools pull it in


00:08:33.060 --> 00:08:35.960
and not cause a strain on their system


00:08:35.960 --> 00:08:38.460
because this is a lot of data to suddenly dump in


00:08:38.460 --> 00:08:41.580
and have to replicate across their entire cluster.


00:08:41.580 --> 00:08:44.200
So there's a reason why it takes so long.


00:08:44.200 --> 00:08:46.780
And we also don't want to have it happen during,


00:08:46.780 --> 00:08:48.140
'cause we're probably going to be running


00:08:48.140 --> 00:08:49.820
at a low process priority,


00:08:49.820 --> 00:08:52.420
which also means we want to do it


00:08:52.420 --> 00:08:56.600
on a Friday in the afternoon so that it's over the weekend


00:08:56.600 --> 00:08:58.380
and not when GitHub gets hit the hardest.


00:08:58.380 --> 00:09:00.180
So there's a lot of coordination going on.


00:09:00.180 --> 00:09:03.660
And as we all know, GitHub had some stability issues


00:09:03.660 --> 00:09:05.160
the other week, and so they just said,


00:09:05.160 --> 00:09:07.700
can we just wait till a little later


00:09:07.700 --> 00:09:09.820
to make sure that it's all good and solid


00:09:09.820 --> 00:09:11.140
and everything looks good.


00:09:11.140 --> 00:09:13.300
So the plan is April 1st.


00:09:13.300 --> 00:09:14.860
- Excellent, very exciting.


00:09:14.860 --> 00:09:15.700
- Yeah, and we also have--


00:09:15.700 --> 00:09:17.260
- Yeah, go ahead, Christian, what do you think about this?


00:09:17.260 --> 00:09:19.860
- A good track count actually break GitHub.


00:09:19.860 --> 00:09:23.980
I'm not sure if anybody attended the live stream.


00:09:23.980 --> 00:09:27.620
Pablo's changed the master branch to main branch


00:09:27.620 --> 00:09:31.300
we renamed the default branch, but yeah, we broke it up


00:09:31.300 --> 00:09:33.580
and it took a while to recover from that too.


00:09:33.580 --> 00:09:36.180
So since our repos are so gigantic,


00:09:36.180 --> 00:09:41.180
so we started with ZVS, then moved to SVN subversion,


00:09:41.180 --> 00:09:45.100
then went, broke all this stuff to Mercurial


00:09:45.100 --> 00:09:49.340
and then to Git and I'm not sure how many revisions


00:09:49.340 --> 00:09:52.860
we have in the tip, but it's gigantic.


00:09:52.860 --> 00:09:56.340
- Yeah, so to be, just to be ultra clear here,


00:09:56.340 --> 00:09:58.500
Thanks to GitHub for working with us directly.


00:09:58.500 --> 00:10:01.460
And actually they donated money to help us make this all happen.


00:10:01.460 --> 00:10:03.700
So they've been really great partners in all this.


00:10:03.700 --> 00:10:06.020
Thanks to Etsio for getting this started.


00:10:06.020 --> 00:10:08.100
Marietta for the initial pep, by the way,


00:10:08.100 --> 00:10:09.580
and even starting this conversation.


00:10:09.580 --> 00:10:12.780
And for Rukosh to stepping in and helping get it finished.


00:10:12.780 --> 00:10:14.100
Yeah, definitely a team effort.


00:10:14.100 --> 00:10:16.540
A lot of people involved, and thanks to all of them.


00:10:16.540 --> 00:10:18.660
So Tushar out in the audience is joking,


00:10:18.660 --> 00:10:20.940
is this why GitHub has been crashing the whole week?


00:10:20.940 --> 00:10:23.180
But Christian, you were joking, like maybe,


00:10:23.180 --> 00:10:24.940
did you guys actually cause problems?


00:10:24.940 --> 00:10:27.660
Not that I know of specifically, but I also,


00:10:27.660 --> 00:10:30.340
yeah, not that I know of.


00:10:30.340 --> 00:10:31.460
- Yeah, okay.


00:10:31.460 --> 00:10:32.300
- I hope not.


00:10:32.300 --> 00:10:34.300
I apologize to the world if we did somehow.


00:10:34.300 --> 00:10:36.540
- Well, it wouldn't be the first time.


00:10:36.540 --> 00:10:39.620
There's been other outages and other crazy things.


00:10:39.620 --> 00:10:41.180
- Yeah, and unfortunately at our size,


00:10:41.180 --> 00:10:42.380
we would not be the first time.


00:10:42.380 --> 00:10:43.500
- Yeah, for sure.


00:10:43.500 --> 00:10:48.500
I think there was a huge DDoS attack not too long ago.


00:10:48.500 --> 00:10:50.140
Anyway, also came out in the audience asks,


00:10:50.140 --> 00:10:51.740
assuming there are usernames and email addresses


00:10:51.740 --> 00:10:52.620
on the original issue.


00:10:52.620 --> 00:10:56.860
So like, what was, how much did you all care


00:10:56.860 --> 00:10:59.180
about having fidelity across those?


00:10:59.180 --> 00:11:01.020
And you know, this could have been an opportunity


00:11:01.020 --> 00:11:02.820
to just say, you know what's awesome?


00:11:02.820 --> 00:11:06.820
Command A, archive in your inbox to just kind of catch up


00:11:06.820 --> 00:11:08.620
and be okay, like you could have just dropped in.


00:11:08.620 --> 00:11:09.540
So we're just gonna start over.


00:11:09.540 --> 00:11:11.220
If it's important, it'll find its way here.


00:11:11.220 --> 00:11:13.900
If it's not, then it wasn't.


00:11:13.900 --> 00:11:16.440
- Yeah, I mean, there has been talk about this.


00:11:16.440 --> 00:11:20.420
There's varying opinions on how important


00:11:20.420 --> 00:11:21.780
the digital archives are.


00:11:21.780 --> 00:11:24.080
Like, do we need to move all the closed issues over?


00:11:24.080 --> 00:11:25.120
Should we only move open?


00:11:25.120 --> 00:11:26.520
Like we actually discussed this


00:11:26.520 --> 00:11:29.200
when we were looking at potentially up to a week


00:11:29.200 --> 00:11:31.780
to do the migration versus the two or three days


00:11:31.780 --> 00:11:33.240
it's actually gonna take now.


00:11:33.240 --> 00:11:36.060
But everyone has different opinions


00:11:36.060 --> 00:11:39.040
of how important the history is.


00:11:39.040 --> 00:11:40.520
To specifically answer the question though


00:11:40.520 --> 00:11:42.220
from the audience about usernames,


00:11:42.220 --> 00:11:44.380
as long as you have your GitHub username


00:11:44.380 --> 00:11:47.360
attached to your bugs.python.org account,


00:11:47.360 --> 00:11:49.480
that should map over.


00:11:49.480 --> 00:11:50.320
- And you've gotten to-- - I don't think--


00:11:50.320 --> 00:11:51.480
- I think we're-- - You're supposed to get it


00:11:51.480 --> 00:11:52.320
in there?


00:11:52.320 --> 00:11:56.240
- Yeah, I don't remember if we map email to email,


00:11:56.240 --> 00:11:58.140
there might be some privacy issues.


00:11:58.140 --> 00:12:00.200
I can't remember where that all landed.


00:12:00.200 --> 00:12:02.920
Like lawyers were consulted and I was out of the loop


00:12:02.920 --> 00:12:05.960
on those, but I believe if you at least have specified


00:12:05.960 --> 00:12:07.920
your GitHub username on bugs.python.org,


00:12:07.920 --> 00:12:09.440
we will be able to do the map.


00:12:09.440 --> 00:12:11.160
- Yeah, fantastic.


00:12:11.160 --> 00:12:12.920
All right, well, thank you both for the update on that.


00:12:12.920 --> 00:12:15.240
It's not exactly why we're here, but it's so timely


00:12:15.240 --> 00:12:18.240
and I think you're both involved in it and stuff like that.


00:12:18.240 --> 00:12:20.200
So quite cool to see it coming along.


00:12:20.200 --> 00:12:24.280
I personally really think that it's fantastic


00:12:24.280 --> 00:12:26.460
that CPython is on GitHub.


00:12:26.460 --> 00:12:30.160
I know it's not that different if it was, say,


00:12:30.160 --> 00:12:34.520
self-hosted Git or GitLab or even Mercurial or SVN,


00:12:34.520 --> 00:12:36.040
but there's just something about it.


00:12:36.040 --> 00:12:39.480
It seems more open to contributors,


00:12:39.480 --> 00:12:41.200
given just sort of the status of GitHub,


00:12:41.200 --> 00:12:42.600
where a lot of people seem to hang out


00:12:42.600 --> 00:12:45.920
and the whole PR flow and those kinds of things.


00:12:45.920 --> 00:12:48.040
- That was part of the motivation.


00:12:48.040 --> 00:12:49.600
Somewhat ironically, we actually had to teach


00:12:49.600 --> 00:12:52.000
a bunch of core devs how to use GitHub


00:12:52.000 --> 00:12:52.840
as part of the migration.


00:12:52.840 --> 00:12:54.980
'Cause I mean, to be fair,


00:12:54.980 --> 00:12:57.160
some decent chunk of the core devs


00:12:57.160 --> 00:12:58.520
don't contribute to other open source.


00:12:58.520 --> 00:13:00.440
I mean, Python alone is a big enough of a project


00:13:00.440 --> 00:13:02.440
that it absorbs a large chunk of your time.


00:13:02.440 --> 00:13:04.980
So they just didn't have to know


00:13:04.980 --> 00:13:07.120
how to do any other open source development


00:13:07.120 --> 00:13:09.760
for a different project other than however Python did it.


00:13:09.760 --> 00:13:10.800
And if we weren't on GitHub,


00:13:10.800 --> 00:13:12.400
they just didn't have a need to.


00:13:12.400 --> 00:13:17.000
So, plus we also did the move a while ago.


00:13:17.000 --> 00:13:20.080
So I think it's coming close to a decade at this point.


00:13:20.080 --> 00:13:21.800
So it was also a different time.


00:13:21.800 --> 00:13:23.480
- Indeed, indeed.


00:13:23.480 --> 00:13:27.320
All right, so let's start by maybe talking about,


00:13:27.320 --> 00:13:28.720
speaking of different times,


00:13:28.720 --> 00:13:31.880
let's start and talk about the standard library


00:13:31.880 --> 00:13:33.640
from, maybe you guys could approach it


00:13:33.640 --> 00:13:36.800
from a historical perspective to start.


00:13:36.800 --> 00:13:39.920
'Cause we're gonna focus on stuff that's in there


00:13:39.920 --> 00:13:42.040
that maybe should be removed


00:13:42.040 --> 00:13:43.720
in the benefits of taking it out and stuff,


00:13:43.720 --> 00:13:46.780
but when it got put in, it seemed like a good idea.


00:13:46.780 --> 00:13:51.180
So when I think about Python, one of the key phrases I hear,


00:13:51.180 --> 00:13:52.300
I don't know its origin,


00:13:52.300 --> 00:13:54.420
but the batteries included story, right?


00:13:54.420 --> 00:13:55.900
Python comes with batteries included


00:13:55.900 --> 00:13:58.940
and then it's frameworks did like Django and so on.


00:13:58.940 --> 00:14:01.180
And it's a huge selling point, right?


00:14:01.180 --> 00:14:05.300
This is a language that has a bunch of support built in.


00:14:05.300 --> 00:14:06.140
Right?


00:14:06.140 --> 00:14:10.500
- Yeah, so the rough history, for those who don't know,


00:14:10.500 --> 00:14:14.140
Python went public February of 1991, right?


00:14:14.140 --> 00:14:19.140
So 32 years ago, it's predates Linux, right?


00:14:19.140 --> 00:14:21.260
Like it's really crazy when you look at the history


00:14:21.260 --> 00:14:24.420
of when projects came out, how long Python's been around.


00:14:24.420 --> 00:14:26.660
But the other thing to think about is


00:14:26.660 --> 00:14:30.820
who was on the internet or the worldwide web even in 1991?


00:14:30.820 --> 00:14:37.020
Like who even had like internet or even a modem back then?


00:14:37.020 --> 00:14:42.380
And so what that led to was people contributing things


00:14:42.380 --> 00:14:44.580
to Python that Guido would look at and go,


00:14:44.580 --> 00:14:45.800
"Oh yeah, that's useful."


00:14:45.800 --> 00:14:48.200
And then just pull it in and put it in the standard library.


00:14:48.200 --> 00:14:49.760
And it grew and grew and grew.


00:14:49.760 --> 00:14:51.400
And then at some point in the nineties,


00:14:51.400 --> 00:14:54.540
like there was a website called the Vaults of Parnassus,


00:14:54.540 --> 00:14:57.200
which had animated gifts of wall sconces


00:14:57.200 --> 00:14:59.080
with little candles with the flickering, whatever,


00:14:59.080 --> 00:15:02.080
like totally bit like you can imagine what this is like.


00:15:02.080 --> 00:15:04.680
This is back in GeoCity stage, right?


00:15:04.680 --> 00:15:06.120
And that's where you went to get your code.


00:15:06.120 --> 00:15:08.920
And all it was was zip files of Python code.


00:15:08.920 --> 00:15:11.440
There's no concept of wheels or conda packages


00:15:11.440 --> 00:15:13.120
or anything like this,


00:15:13.120 --> 00:15:15.520
they were literally just zip files of code


00:15:15.520 --> 00:15:18.960
that you just unpacked and just copied over the directory


00:15:18.960 --> 00:15:20.320
that contained the other Python code


00:15:20.320 --> 00:15:22.420
and you just vendored everything.


00:15:22.420 --> 00:15:24.840
There was nothing else.


00:15:24.840 --> 00:15:25.680
And so--


00:15:25.680 --> 00:15:26.900
- And stuff moving stuff around the internet


00:15:26.900 --> 00:15:28.160
was slow as well back then.


00:15:28.160 --> 00:15:30.120
I mean, a lot of people were on dial up.


00:15:30.120 --> 00:15:30.960
- Yeah.


00:15:30.960 --> 00:15:31.800
- Internet made it--


00:15:31.800 --> 00:15:33.400
- You were blazing fast with your 56K modem


00:15:33.400 --> 00:15:36.000
if you were lucky enough to have that, right?


00:15:36.000 --> 00:15:39.960
So that meant that it was really hard


00:15:39.960 --> 00:15:43.360
to find high quality code out there, right?


00:15:43.360 --> 00:15:46.240
And getting done and put up and all that.


00:15:46.240 --> 00:15:48.400
So things just kept getting added


00:15:48.400 --> 00:15:49.480
and added to the standard library


00:15:49.480 --> 00:15:50.620
and it kept getting bigger and bigger


00:15:50.620 --> 00:15:51.960
and continued to be useful.


00:15:51.960 --> 00:15:55.280
And it was just a different time, right?


00:15:55.280 --> 00:15:58.720
Like hell, not even everyone in the United


00:15:58.720 --> 00:16:00.800
even had a web browser, right?


00:16:00.800 --> 00:16:02.560
Like I remember when I first found the net.


00:16:02.560 --> 00:16:05.920
- Didn't Mosaic come out in '93?


00:16:05.920 --> 00:16:07.360
- Yeah, and actually one of the very first


00:16:07.360 --> 00:16:09.360
graphical web browsers was Grail


00:16:09.360 --> 00:16:11.720
written by Guido in Python, right?


00:16:11.720 --> 00:16:13.360
Like if you go look up the history, right?


00:16:13.360 --> 00:16:14.920
It was like, I think Guido missed


00:16:14.920 --> 00:16:16.400
being the first graphical browser


00:16:16.400 --> 00:16:18.920
for like months or something crazy.


00:16:18.920 --> 00:16:22.780
There's a weird history in Python in terms of early web.


00:16:22.780 --> 00:16:24.760
But what this all led to, right?


00:16:24.760 --> 00:16:26.020
Like, and I remember by the way,


00:16:26.020 --> 00:16:27.200
when I first got on the internet,


00:16:27.200 --> 00:16:29.440
it was Usenet and Gopher.


00:16:29.440 --> 00:16:30.720
It wasn't even the World Wide Web, right?


00:16:30.720 --> 00:16:32.720
That was still AOL days back then,


00:16:32.720 --> 00:16:35.720
for those of you can date yourself based on that knowledge.


00:16:35.720 --> 00:16:38.520
It was a different time.


00:16:38.520 --> 00:16:43.160
It was a bit of a sidebar, like things were so basic back then. But at the same time,


00:16:43.160 --> 00:16:49.000
there was so much like imagination for what could be. Because so much of it was unmaterialized.


00:16:49.000 --> 00:16:50.760
And you're like, I can see where this is gonna go.


00:16:50.760 --> 00:16:57.880
Yeah, I intend was even much more expensive in Germany. So I know that until, so I was lucky


00:16:57.880 --> 00:17:04.520
away to university in 2000. But before when I was living with my parents, I had to pay the internet


00:17:04.520 --> 00:17:13.480
by the minute. So, local calls were not free in Germany. You had to pay for them. And I know that


00:17:13.480 --> 00:17:23.000
like end of '99, I was lucky. I paid like several hundreds a month to have like a free,


00:17:23.000 --> 00:17:28.680
like a persistent internet connection, really persistent. But I used the only phone line we had,


00:17:28.680 --> 00:17:35.240
but I didn't have to pay by the minute, but I paid in bulk. It's super expensive. That's why


00:17:35.240 --> 00:17:41.480
lots of people... I started actually using mailboxes, so I'll dial in mailboxes.


00:17:41.480 --> 00:17:46.920
They're like this weird concept that you were sending messages, you push the message, and


00:17:46.920 --> 00:17:52.440
later in life, the mailboxes will call other mailboxes. They do this Unix to Unix copy to


00:17:52.440 --> 00:17:56.920
copy the messages around, and next day you would receive the message from a friend who was living


00:17:57.640 --> 00:17:59.720
like in a different city.


00:17:59.720 --> 00:18:00.920
- Yeah, I remember that was amazing.


00:18:00.920 --> 00:18:03.560
Like all the back ends, we just kind of sync up


00:18:03.560 --> 00:18:06.280
and it was like sort of this distributed,


00:18:06.280 --> 00:18:08.520
like the PBS world and some of the other stuff.


00:18:08.520 --> 00:18:10.000
Yeah, incredible.


00:18:10.000 --> 00:18:12.040
- So, it made a lot of sense back in the days


00:18:12.040 --> 00:18:16.760
to have all the useful bits and pieces in Python.


00:18:16.760 --> 00:18:19.120
So that's why the library was so big.


00:18:19.120 --> 00:18:22.800
And so we have just Python code, it was easy,


00:18:22.800 --> 00:18:26.700
but we also have like lots of C code and C extension.


00:18:26.700 --> 00:18:29.460
And these were really complicated to compile and build.


00:18:29.460 --> 00:18:32.940
So you had to make files and figure out which compilers


00:18:32.940 --> 00:18:34.100
and libraries you need.


00:18:34.100 --> 00:18:39.100
And building things for Windows was super painful


00:18:39.100 --> 00:18:42.740
for the Windows people that they had to get


00:18:42.740 --> 00:18:45.020
the right compiler version.


00:18:45.020 --> 00:18:48.700
- They had to figure out their VC Vars bat setup.


00:18:48.700 --> 00:18:51.500
- Yeah, and each Python version had like its requirements


00:18:51.500 --> 00:18:54.000
for different like Visual Studio versions.


00:18:56.340 --> 00:18:59.020
- Yeah, so I think that's, you know,


00:18:59.020 --> 00:19:00.320
people get a sense of the time, right?


00:19:00.320 --> 00:19:05.060
Like at that time, it was amazing for Python to say,


00:19:05.060 --> 00:19:07.660
as much as we can get into the standard library,


00:19:07.660 --> 00:19:09.160
it's gonna be a benefit to people


00:19:09.160 --> 00:19:11.280
because if you need to parse CSS,


00:19:11.280 --> 00:19:16.700
color codes, hex color codes, and it's built in,


00:19:16.700 --> 00:19:18.060
that's a bonus, right?


00:19:18.060 --> 00:19:23.220
There's not the idea of pip and fast internet


00:19:23.220 --> 00:19:25.260
and all those things, right?


00:19:25.260 --> 00:19:26.400
or even distutils, right?


00:19:26.400 --> 00:19:27.360
Like as Christian was saying,


00:19:27.360 --> 00:19:29.300
compilation was hard enough as it is.


00:19:29.300 --> 00:19:31.020
So getting something in the standard library


00:19:31.020 --> 00:19:35.400
ported over to C code for performance was a huge deal.


00:19:35.400 --> 00:19:37.220
So it's not even just distribution,


00:19:37.220 --> 00:19:40.120
it was literally just creating these things.


00:19:40.120 --> 00:19:41.420
It was difficult.


00:19:41.420 --> 00:19:42.260
- Sure.


00:19:42.260 --> 00:19:44.020
- So it just shows it how far we've come, right?


00:19:44.020 --> 00:19:46.580
That these were even problems that we used to have.


00:19:46.580 --> 00:19:49.180
- Yeah, it's pretty interesting.


00:19:49.180 --> 00:19:54.180
Do you think if Python were designed today from scratch,


00:19:55.180 --> 00:19:57.500
you know, this is the kind of the language you want.


00:19:57.500 --> 00:20:01.000
It would be packaged in the same way that it is now.


00:20:01.000 --> 00:20:04.160
Like, would it have a large standard library?


00:20:04.160 --> 00:20:08.100
- No, but that would be controversial.


00:20:08.100 --> 00:20:11.380
- I agree with Brett, yeah.


00:20:11.380 --> 00:20:13.660
- Yeah, well, we're just, why we're friends


00:20:13.660 --> 00:20:16.460
and why we wrote this pet that we're gonna be talking about.


00:20:16.460 --> 00:20:17.460
- Exactly. - Oh, we are friends.


00:20:17.460 --> 00:20:18.300
Thank you.


00:20:18.300 --> 00:20:20.420
- Oh, we went to a movie together,


00:20:20.420 --> 00:20:22.240
one of the PyCons of Portland, man.


00:20:22.240 --> 00:20:25.600
Yeah, and we are friends on Nintendo Network.


00:20:25.600 --> 00:20:27.000
- Yeah, it's on Switch, yes.


00:20:27.000 --> 00:20:32.720
Yeah, but no, so I don't think so.


00:20:32.720 --> 00:20:34.440
Like if you look at more recent languages


00:20:34.440 --> 00:20:36.000
like Rust and Go and stuff,


00:20:36.000 --> 00:20:38.480
they have a much more targeted standard library.


00:20:38.480 --> 00:20:40.440
They're able to lean on the community


00:20:40.440 --> 00:20:41.960
and people seem fine with it.


00:20:41.960 --> 00:20:44.280
And I think that's a key thing is


00:20:44.280 --> 00:20:48.320
we get to learn the less,


00:20:48.320 --> 00:20:49.760
people have gotten to learn lessons from us,


00:20:49.760 --> 00:20:50.680
but we also can learn,


00:20:50.680 --> 00:20:52.520
we would have been able if we started now


00:20:52.520 --> 00:20:53.860
telling lessons from other people.


00:20:53.860 --> 00:20:57.100
I think that'd be one of them is targeted center library


00:20:57.100 --> 00:20:59.780
that is very tight and very targeted,


00:20:59.780 --> 00:21:01.620
very for it, very stable,


00:21:01.620 --> 00:21:03.800
and that's much easier to maintain


00:21:03.800 --> 00:21:05.440
would probably be the good way to go.


00:21:05.440 --> 00:21:07.840
'Cause it makes getting yourself up and going a lot easier


00:21:07.840 --> 00:21:09.480
versus, oh, this isn't useful


00:21:09.480 --> 00:21:10.840
until I have this huge standard library,


00:21:10.840 --> 00:21:13.300
which as a burgeoning project


00:21:13.300 --> 00:21:14.560
would have been really difficult


00:21:14.560 --> 00:21:17.880
because you had to build a lot of code to make that happen.


00:21:17.880 --> 00:21:19.240
- Right.


00:21:19.240 --> 00:21:23.660
- Absolutely, I do value having it there though,


00:21:23.660 --> 00:21:24.500
at the same time.


00:21:24.500 --> 00:21:26.420
I understand why it would be smaller.


00:21:26.420 --> 00:21:29.140
I just think there'd be some use cases


00:21:29.140 --> 00:21:32.080
that it would be less of an obvious choice to use Python.


00:21:32.080 --> 00:21:34.220
Like for example, if I just wanna script something


00:21:34.220 --> 00:21:37.840
on my computer, knowing that it has Python,


00:21:37.840 --> 00:21:39.900
means it has all these libraries,


00:21:39.900 --> 00:21:41.540
where as opposed to,


00:21:41.540 --> 00:21:44.240
if you've gotta start installing dependencies


00:21:44.240 --> 00:21:47.140
just to get your like sort of automation scripts to run,


00:21:47.140 --> 00:21:50.460
like there's this bootstrapping stuff that has to happen.


00:21:50.460 --> 00:21:52.460
- Yeah, from a philosophical perspective,


00:21:52.460 --> 00:21:54.260
we actually don't have a definition


00:21:54.260 --> 00:21:57.020
of what the standard library is, right?


00:21:57.020 --> 00:21:59.760
There is no pep, there is no guidance


00:21:59.760 --> 00:22:02.240
over what the standard library is now meant for,


00:22:02.240 --> 00:22:04.140
what it should or shouldn't have.


00:22:04.140 --> 00:22:05.240
It simply doesn't exist.


00:22:05.240 --> 00:22:09.260
It's always been previously based on Guido's opinion,


00:22:09.260 --> 00:22:11.380
somewhat, and then now that's the steering council,


00:22:11.380 --> 00:22:14.940
it's somewhat based on just kind of consensus


00:22:14.940 --> 00:22:18.120
on the dev team and that's kind of what the steering council


00:22:18.120 --> 00:22:21.640
will approve more or less, but there is no guidance, right?


00:22:21.640 --> 00:22:24.020
Like, should we make it so that, as you said,


00:22:24.020 --> 00:22:28.640
that simple automation script for managing your computer,


00:22:28.640 --> 00:22:31.580
should that be have enough in the standard library


00:22:31.580 --> 00:22:32.840
to make that happen?


00:22:32.840 --> 00:22:37.100
Should we be able to have a simple HTTP server?


00:22:37.100 --> 00:22:37.940
- Right.


00:22:37.940 --> 00:22:38.780
- I don't know.


00:22:38.780 --> 00:22:41.420
Should we have Tkinter?


00:22:42.580 --> 00:22:44.580
Right, where's the line?


00:22:44.580 --> 00:22:47.800
And we don't have an answer right now.


00:22:47.800 --> 00:22:50.300
There is a discussion going on right now,


00:22:50.300 --> 00:22:52.860
actually over on Python Dev,


00:22:52.860 --> 00:22:54.100
discussing this kind of thing,


00:22:54.100 --> 00:22:57.900
because there was a proposal to potentially rip out URLLib.


00:22:57.900 --> 00:23:00.260
I think it was partially done by Victor Sinner


00:23:00.260 --> 00:23:02.560
to kind of not get a rise out of people,


00:23:02.560 --> 00:23:04.660
but to kind of spark a conversation.


00:23:04.660 --> 00:23:05.500
- Right. - And some people


00:23:05.500 --> 00:23:08.560
were going like, okay, URLLib was written back in the day


00:23:08.560 --> 00:23:13.440
when OSs did not necessarily ship with the network stack,


00:23:13.440 --> 00:23:14.280
right?


00:23:14.280 --> 00:23:15.880
And when we could plug into.


00:23:15.880 --> 00:23:18.280
Would it be better to actually rely on the OS, right?


00:23:18.280 --> 00:23:20.340
Do we really have to have all of that code in there


00:23:20.340 --> 00:23:22.880
just to parse things and figure things out


00:23:22.880 --> 00:23:24.200
to make the right HTTP requests


00:23:24.200 --> 00:23:26.760
versus just going to macOS or going to Windows


00:23:26.760 --> 00:23:30.680
or using curl on Linux or any Unix platform really,


00:23:30.680 --> 00:23:32.800
and just have it handle the request?


00:23:32.800 --> 00:23:35.240
I don't know.


00:23:35.240 --> 00:23:36.920
But I mean, this is the kind of question


00:23:36.920 --> 00:23:41.320
we're getting into now and we'll probably get to,


00:23:41.320 --> 00:23:43.280
I mean, we can talk about it later.


00:23:43.280 --> 00:23:45.760
I have one of my infamous Brett's grand plan things


00:23:45.760 --> 00:23:47.280
around the standard library,


00:23:47.280 --> 00:23:49.200
and this all ties into actually finally


00:23:49.200 --> 00:23:51.680
into making that decision of


00:23:51.680 --> 00:23:53.600
what do we want the standard library to be?


00:23:53.600 --> 00:23:55.760
So we have better guidance for ourselves


00:23:55.760 --> 00:23:57.400
as to where it should go,


00:23:57.400 --> 00:23:58.640
and that's what should or should not be


00:23:58.640 --> 00:23:59.480
in the standard library.


00:23:59.480 --> 00:24:01.080
Now, not to spook people,


00:24:01.080 --> 00:24:03.240
I don't know if this means we never deprecate anything


00:24:03.240 --> 00:24:05.520
that doesn't follow this policy that's in there now,


00:24:05.520 --> 00:24:07.620
But I would like to, at least as a core dev,


00:24:07.620 --> 00:24:10.980
know what we want it to be for today,


00:24:10.980 --> 00:24:16.080
compared to the cheap shipment model of useful Python


00:24:16.080 --> 00:24:18.540
code on the internet, pre-internet.


00:24:18.540 --> 00:24:19.620
Right.


00:24:19.620 --> 00:24:23.300
So and Michael, you asked me about security bugs.


00:24:23.300 --> 00:24:28.380
And so Victor's proposal, Victor's threat on Python dev


00:24:28.380 --> 00:24:31.060
sparked by a discussion I had with Victor


00:24:31.060 --> 00:24:34.340
on our internal communication channels,


00:24:34.340 --> 00:24:40.820
where I pointed out that your lips actually a place where we have lots of security bugs.


00:24:40.820 --> 00:24:48.320
And even in very trivial things like to insert like parsing like in URL, so something like


00:24:48.320 --> 00:24:53.760
splitting up the protocol, the host, the path name, the suffix, this is not trivial.


00:24:53.760 --> 00:25:01.520
And the way how our internal like parser works, it's written for a more forgiving and more


00:25:01.520 --> 00:25:06.240
open world, but people also use the routines, the like,


00:25:06.240 --> 00:25:11.360
URL open, URL parse to verify and validate


00:25:11.360 --> 00:25:17.280
potential hostile requests that sometimes fails because we are too


00:25:17.280 --> 00:25:23.040
open, we are too nice. So this was one of the other reasons for the discussion


00:25:23.040 --> 00:25:28.000
of Spark and it's also a bit related to WebAssembly, but I think we can


00:25:28.000 --> 00:25:30.320
I'll postpone that for later, but there


00:25:30.320 --> 00:25:33.100
was an interesting interaction with how WebAssembly


00:25:33.100 --> 00:25:35.600
or WebAssembly runtimes environments work


00:25:35.600 --> 00:25:39.040
and what's going to work with your lib.


00:25:39.040 --> 00:25:40.740
Yeah, and the WebAssembly discussion


00:25:40.740 --> 00:25:43.560
also comes back to what Brett was talking about for sure


00:25:43.560 --> 00:25:48.360
just a minute ago, so defining what is the standard library.


00:25:48.360 --> 00:25:52.720
So I do want to come back as well to that later.


00:25:52.720 --> 00:25:56.360
But let's talk about your PEP.


00:25:56.360 --> 00:25:59.600
Which one of you wants to introduce PEP 594,


00:25:59.600 --> 00:26:02.560
removing dead batteries from the Python standard library?


00:26:02.560 --> 00:26:04.800
- Well, Christian is the original author.


00:26:04.800 --> 00:26:06.840
I just PMed it to the finish line.


00:26:06.840 --> 00:26:08.680
So I'll let Christian.


00:26:08.680 --> 00:26:11.280
- Yeah, I ran out of steam and breast just pushed it,


00:26:11.280 --> 00:26:14.480
pushed it, helped me to push it over the finish line.


00:26:14.480 --> 00:26:18.320
- Yeah, so what's the idea here?


00:26:18.320 --> 00:26:24.720
- The idea here is to remove things that are,


00:26:24.720 --> 00:26:28.800
in our personal opinion, and maybe with some reasoning,


00:26:28.800 --> 00:26:32.480
no longer super required in the modern world.


00:26:32.480 --> 00:26:36.960
So there are especially some parts


00:26:36.960 --> 00:26:40.920
that cost us lots of time and energy.


00:26:40.920 --> 00:26:44.600
The most relevant library for that is NNTPlib,


00:26:44.600 --> 00:26:49.400
so the library to interact with new servers.


00:26:49.400 --> 00:26:51.200
We've got your--


00:26:51.200 --> 00:26:52.320
>>Like Usenet?


00:26:52.320 --> 00:26:53.480
>>Usenet, yeah.


00:26:53.480 --> 00:26:54.200
Usenet.


00:26:54.200 --> 00:26:59.480
So since we don't have a server implementation of NNTP,


00:26:59.480 --> 00:27:02.960
so the use standard, only the client libraries,


00:27:02.960 --> 00:27:08.440
and we need to use actual new servers for testing.


00:27:08.440 --> 00:27:11.800
So we need to connect to some servers and do some testing.


00:27:11.800 --> 00:27:14.200
These servers are no longer stable.


00:27:14.200 --> 00:27:19.360
So we used to use libraries like sites like Gmain a lot


00:27:19.360 --> 00:27:23.320
or one French new server that was stable.


00:27:23.320 --> 00:27:27.160
but sometimes they don't work like we expect it to work.


00:27:27.160 --> 00:27:30.660
They're sometimes just not available, or the network connection fails,


00:27:30.660 --> 00:27:33.460
or we get issues with TLS connections.


00:27:33.460 --> 00:27:38.200
And these issues we're having blocked our whole CI chain.


00:27:38.200 --> 00:27:43.340
So when you do pull requests, you run your tests against Windows


00:27:43.340 --> 00:27:49.940
and Linux on x86-64 and on also macOS.


00:27:49.940 --> 00:27:52.880
So like think for platforms.


00:27:52.880 --> 00:27:57.840
But once your PolarOS is merged, it also kicks off the whole buildbot farm.


00:27:57.840 --> 00:28:04.200
There are like 20, 30, 40 different platforms that run the tests post-commit.


00:28:04.200 --> 00:28:14.360
And any time one of the NNTP servers had a hiccup, we had like false alarms and like indicating problems somewhere,


00:28:14.360 --> 00:28:20.280
which were not problems with the code or with the test, but rather with the infrastructure that was failing.


00:28:20.280 --> 00:28:25.080
And it was one of the motivations why I wanted to remove NTP lib.


00:28:25.080 --> 00:28:29.720
Sure. And how often are people depending on that these days?


00:28:29.720 --> 00:28:35.480
One, two, who's maintaining it? There's a really interesting list you all have of like,


00:28:35.480 --> 00:28:39.800
these are the things we want to consider to remove. There is somebody who understands and


00:28:39.800 --> 00:28:43.160
maintains it now. A lot of them have a no for that, right?


00:28:43.880 --> 00:28:48.880
- Yep, yeah, I mean, that's another aspect of this, right?


00:28:48.880 --> 00:28:52.600
It was things that were failing our test suite


00:28:52.600 --> 00:28:54.100
because the thing we had to rely on


00:28:54.100 --> 00:28:57.160
just wasn't stable enough or available.


00:28:57.160 --> 00:29:01.160
But our other parts were just simply,


00:29:01.160 --> 00:29:04.280
no one wanted to step forward and say,


00:29:04.280 --> 00:29:06.680
I will make sure that this keeps working


00:29:06.680 --> 00:29:08.320
in modern versions of Python


00:29:08.320 --> 00:29:10.400
and compiler errors are dealt with


00:29:10.400 --> 00:29:13.080
and I will deal with any feature requests


00:29:13.080 --> 00:29:15.080
and bug reports and all that, right?


00:29:15.080 --> 00:29:18.080
'Cause the standard library before this pep


00:29:18.080 --> 00:29:21.760
had numerically more modules


00:29:21.760 --> 00:29:24.320
than there are countries in the world, right?


00:29:24.320 --> 00:29:26.200
Like the standard library is that vast.


00:29:26.200 --> 00:29:27.620
And I think, I don't even remember


00:29:27.620 --> 00:29:31.040
if I even delved into sub modules of packages.


00:29:31.040 --> 00:29:32.280
Like I think literally the top level


00:29:32.280 --> 00:29:34.160
in the space is that big.


00:29:34.160 --> 00:29:38.540
So there is a aspect here of maintainability


00:29:38.540 --> 00:29:41.400
of just simply there are only so many core devs


00:29:41.400 --> 00:29:45.360
to handle the influx, hence why we have 1,600 pull requests


00:29:45.360 --> 00:29:46.860
that are currently open.


00:29:46.860 --> 00:29:49.700
And at some point, you just have to stop and go like,


00:29:49.700 --> 00:29:53.700
"Okay, who's benefiting from us carrying this forward


00:29:53.700 --> 00:29:56.840
and how much of a detriment is it to the project


00:29:56.840 --> 00:29:58.140
to keep it going?"


00:29:58.140 --> 00:30:01.040
And some of these things, yeah, it was just a question of,


00:30:01.040 --> 00:30:04.480
"All right, is this useful enough to the world


00:30:04.480 --> 00:30:06.680
for us to put the effort into maintaining it


00:30:06.680 --> 00:30:08.060
and having to make a call on some of them?"


00:30:08.060 --> 00:30:09.580
And sometimes no one stepped forward


00:30:09.580 --> 00:30:11.920
and sometimes some people very much step forward and say,


00:30:11.920 --> 00:30:13.920
"I totally rely on this."


00:30:13.920 --> 00:30:15.080
And then it became a question, it's like,


00:30:15.080 --> 00:30:18.960
"Okay, is it just you that needs it,


00:30:18.960 --> 00:30:22.060
or is it a large or decent enough sized chunk


00:30:22.060 --> 00:30:23.980
of the community that still needed it,


00:30:23.980 --> 00:30:25.260
that it warranted keeping it around


00:30:25.260 --> 00:30:26.100
and continue to support it?"


00:30:26.100 --> 00:30:29.600
Because I did a number crunch the other day


00:30:29.600 --> 00:30:34.660
of certain subdirectories in the Git repo.


00:30:34.660 --> 00:30:37.860
And if you look at just straight code


00:30:37.860 --> 00:30:40.980
between the standard library and the interpreter,


00:30:40.980 --> 00:30:44.020
60% of that is standard library.


00:30:44.020 --> 00:30:46.820
- Wow. - Yeah.


00:30:46.820 --> 00:30:50.620
- How much does it influence your feeling


00:30:50.620 --> 00:30:52.380
and opinion about something,


00:30:52.380 --> 00:30:55.060
whether it has some C component


00:30:55.060 --> 00:30:57.220
or if it's just pure Python?


00:30:57.220 --> 00:30:59.820
Is it easier to keep a pure Python thing around


00:30:59.820 --> 00:31:02.500
that just is sort of higher level,


00:31:02.500 --> 00:31:04.660
doesn't require as much nuance


00:31:04.660 --> 00:31:06.420
or does it not really matter?


00:31:06.420 --> 00:31:07.700
at least for this pep,


00:31:07.700 --> 00:31:10.260
I don't think we really took that view specifically.


00:31:10.260 --> 00:31:14.560
It's the management is more just a side effect almost,


00:31:14.560 --> 00:31:18.140
but this was mainly about as the title puts it,


00:31:18.140 --> 00:31:18.980
dead batteries.


00:31:18.980 --> 00:31:20.980
So when Christian brought this list up initially,


00:31:20.980 --> 00:31:25.220
it was, I don't think these are useful in modern times,


00:31:25.220 --> 00:31:27.460
less than, oh, well, this is also written


00:31:27.460 --> 00:31:29.780
in extension modules, which makes it harder to maintain


00:31:29.780 --> 00:31:32.980
because you can't just ask an average Python developer


00:31:32.980 --> 00:31:34.040
to come in and help maintain it.


00:31:34.040 --> 00:31:36.340
you had to ask someone who knows Python


00:31:36.340 --> 00:31:39.580
and C extension modules to come in and help maintain it.


00:31:39.580 --> 00:31:41.180
That was never the motivation directly.


00:31:41.180 --> 00:31:44.480
- Okay, yeah, but knowing cross-platform networking code


00:31:44.480 --> 00:31:46.800
in C is technically, I would say,


00:31:46.800 --> 00:31:48.660
harder than knowing standard Python.


00:31:48.660 --> 00:31:49.500
- Oh yeah.


00:31:49.500 --> 00:31:52.900
- Yeah, all right, let's first talk about the status.


00:31:52.900 --> 00:31:55.480
So accepted, right, so this is happening.


00:31:55.480 --> 00:32:00.900
- Yeah, the first PR to document the modules being removed


00:32:00.900 --> 00:32:03.340
got committed last week.


00:32:03.340 --> 00:32:06.980
And I now, now you all get to see the curtain pulled behind


00:32:06.980 --> 00:32:08.060
how Python is developed.


00:32:08.060 --> 00:32:10.300
I'm going to publicly ask Christian to review my PR


00:32:10.300 --> 00:32:12.800
to deprecate AIFC.


00:32:12.800 --> 00:32:14.060
I know he's busy, so.


00:32:14.060 --> 00:32:17.780
But the first PR to actually,


00:32:17.780 --> 00:32:21.060
maybe he reviewed it before the podcast, I don't know.


00:32:21.060 --> 00:32:23.860
But the first PR to actually deprecate AIFC,


00:32:23.860 --> 00:32:26.400
the first module in alphabetical order is now up.


00:32:26.400 --> 00:32:30.860
So I'll just be cranking through them until beta.


00:32:30.860 --> 00:32:34.920
I feel like I saw in the release notes here.


00:32:34.920 --> 00:32:42.300
That the Python 310 four was out.


00:32:42.300 --> 00:32:44.580
And this has deprecated various modules.


00:32:44.580 --> 00:32:47.340
According to this pep, is that right?


00:32:47.340 --> 00:32:50.460
Yeah, so the steering Council made the


00:32:50.460 --> 00:32:53.980
decision that it was useful enough to.


00:32:53.980 --> 00:32:56.940
Backport the documentation.


00:32:56.940 --> 00:32:59.500
Deprecation so Python 311.


00:32:59.500 --> 00:33:02.780
on 3.11 obviously, because that's going to raise a deprecation warning.


00:33:02.780 --> 00:33:08.620
But 3.10 and 3.9 also document that these modules are deprecated,


00:33:08.620 --> 00:33:13.460
because we didn't want people coming in in a company where they're on 3.9


00:33:13.460 --> 00:33:16.900
at the moment, start using these modules and then be surprised


00:33:16.900 --> 00:33:20.580
in two years time or what have you, when they upgrade to 3.11 or later


00:33:20.580 --> 00:33:23.340
and suddenly, oh, this thing I've been using is suddenly deprecated.


00:33:23.340 --> 00:33:25.660
Well, this went back farther than 3.10, huh?


00:33:25.660 --> 00:33:28.380
Mm hmm. Because 3.9 is still accepting bug fixes.


00:33:29.140 --> 00:33:29.640
Got it.


00:33:29.640 --> 00:33:30.140
Got it.


00:33:30.140 --> 00:33:30.420
Got it.


00:33:30.420 --> 00:33:31.220
So that's what that means.


00:33:31.220 --> 00:33:32.300
It's purely documentation.


00:33:32.300 --> 00:33:34.100
The code is not changed at all.


00:33:34.100 --> 00:33:38.000
It is literally just-- if you go to the module index


00:33:38.000 --> 00:33:41.220
or any of these modules, it will just have a big deprecated term


00:33:41.220 --> 00:33:42.660
on it.


00:33:42.660 --> 00:33:45.580
Quick bit of nomenclature, real-time follow-up.


00:33:45.580 --> 00:33:50.060
Mr. Hypermagnetic says, what is pure Python if not CPython?


00:33:50.060 --> 00:33:52.260
Christian, you want to sort of disambiguate


00:33:52.260 --> 00:33:55.300
a CPython from Python that has C?


00:33:55.300 --> 00:33:57.620
So in Python, we--


00:33:57.620 --> 00:34:01.160
Python channel library, we have models that don't have like


00:34:01.160 --> 00:34:06.000
dedicated C model that just written in Python code. There


00:34:06.000 --> 00:34:10.800
are other models that have a mandatory back end in C, like if


00:34:10.800 --> 00:34:14.800
you look at the SSL model, which I maintain, so the binding still


00:34:14.800 --> 00:34:19.200
must have written in C and the public facing as our model is


00:34:19.200 --> 00:34:24.040
FSA and adds on top of the C back end. And this we would


00:34:24.040 --> 00:34:31.800
consider as a non-Pure Python package because it requires C code. There are also other models.


00:34:31.800 --> 00:34:35.160
We had a lot of the data structures like list and so on, right?


00:34:35.160 --> 00:34:39.640
Yes, all the core data types are written in C.


00:34:39.640 --> 00:34:40.120
Yeah.


00:34:40.120 --> 00:34:44.360
But they're present always. So we'd be just talking about like


00:34:44.360 --> 00:34:46.280
things you would import and use.


00:34:46.280 --> 00:34:47.800
Got it. I see. Yeah.


00:34:47.800 --> 00:34:52.840
Yeah. Then we have accelerated modules as well, like date time where they're implemented twice,


00:34:52.840 --> 00:34:55.320
once in pure Python and once in C.


00:34:55.320 --> 00:34:58.080
So like PyPy will use the pure Python version


00:34:58.080 --> 00:35:00.000
or any platforms that can't compile the C code


00:35:00.000 --> 00:35:01.400
for whatever reason.


00:35:01.400 --> 00:35:05.440
And then there's the full C version for performance.


00:35:05.440 --> 00:35:08.400
So pure Python basically just means the entire chunk of code


00:35:08.400 --> 00:35:11.240
for that module that you import is written only in Python code.


00:35:11.240 --> 00:35:13.160
There's no C code involved directly.


00:35:13.160 --> 00:35:17.760
Obviously what you import can transiently cause that.


00:35:17.760 --> 00:35:18.960
- For sure.


00:35:18.960 --> 00:35:19.960
So Chris, what's the idea?


00:35:19.960 --> 00:35:21.480
Are we just going to,


00:35:21.480 --> 00:35:25.400
When 3.11 comes out, all the modules are just yanked?


00:35:25.400 --> 00:35:26.680
>>At 3.30.


00:35:26.680 --> 00:35:28.600
So at 3.11, they will--


00:35:28.600 --> 00:35:29.560
>>What's the plan here?


00:35:29.560 --> 00:35:33.240
It's not so immediate or so abrupt, is it?


00:35:33.240 --> 00:35:36.080
>>No, it's going to take a couple of years.


00:35:36.080 --> 00:35:44.080
So 3.11, you'll get the deprecation warnings,


00:35:44.080 --> 00:35:45.640
which I think that's a plan, Brad,


00:35:45.640 --> 00:35:48.600
to just emit a deprecation warning.


00:35:48.600 --> 00:35:51.880
So if you would import a model and have the warnings model


00:35:51.880 --> 00:35:54.120
enabled to show you deprecation warnings,


00:35:54.120 --> 00:35:56.400
then you would get a warning pop up.


00:35:56.400 --> 00:36:00.060
Even in your CI, turn the deprecation warnings


00:36:00.060 --> 00:36:03.600
into a deprecation exception, so into a hard failure.


00:36:03.600 --> 00:36:06.000
And then your CI would fail and inform you


00:36:06.000 --> 00:36:08.920
that you're importing something deprecated.


00:36:08.920 --> 00:36:11.960
And this will continue in 3.12.


00:36:11.960 --> 00:36:16.520
And 3.13, the models are gone.


00:36:16.520 --> 00:36:17.200
Right, OK.


00:36:17.200 --> 00:36:21.480
So that's over basically a more or less two year period


00:36:21.480 --> 00:36:24.160
because 3.11 is pretty imminent, right?


00:36:24.160 --> 00:36:25.880
- Yeah, October.


00:36:25.880 --> 00:36:30.880
So 3.13 would be October, 2024.


00:36:30.880 --> 00:36:33.040
- Yeah, sounds far off now.


00:36:33.040 --> 00:36:34.440
I'm sure it's not in practice.


00:36:34.440 --> 00:36:35.760
- No.


00:36:35.760 --> 00:36:38.320
Yeah, and to be clear, if for some reason


00:36:38.320 --> 00:36:41.160
the community really spoke up very vocally


00:36:41.160 --> 00:36:42.680
across a large swath of people,


00:36:42.680 --> 00:36:44.860
we might consider postponing.


00:36:44.860 --> 00:36:46.720
I don't think there's anything here we would not yank,


00:36:46.720 --> 00:36:49.120
but if people need for some reason more time to move,


00:36:49.120 --> 00:36:50.580
we might consider holding off,


00:36:50.580 --> 00:36:54.000
but we're fairly confident that most of these aren't,


00:36:54.000 --> 00:36:55.080
and already, honestly,


00:36:55.080 --> 00:36:56.320
the ones that people really care about


00:36:56.320 --> 00:36:58.920
are already getting copied and put onto PyPI.


00:36:58.920 --> 00:37:01.900
So people can totally still get the original code.


00:37:01.900 --> 00:37:03.580
And to be very clear,


00:37:03.580 --> 00:37:06.280
you're already using code from Python,


00:37:06.280 --> 00:37:09.360
which means you're already using the Python license,


00:37:09.360 --> 00:37:10.740
the PSF license for this code.


00:37:10.740 --> 00:37:14.480
So copy and pasting this code is totally fine,


00:37:14.480 --> 00:37:16.560
and we encourage it if you need this code, right?


00:37:16.560 --> 00:37:20.100
Because it's deprecated, it's not going to be changing.


00:37:20.100 --> 00:37:24.760
Unless it flat out breaks because of some change in Python that requires an update,


00:37:24.760 --> 00:37:27.660
this code is more or less after this deprecation lands,


00:37:27.660 --> 00:37:29.080
that code is not getting touched,


00:37:29.080 --> 00:37:31.520
which means you could totally copy what's in


00:37:31.520 --> 00:37:34.000
there just prior to the deprecation or what's in 3.10 honestly,


00:37:34.000 --> 00:37:36.800
because once again, these modules aren't really being updated.


00:37:36.800 --> 00:37:38.280
>> These are the ones that are being basically


00:37:38.280 --> 00:37:40.160
ignored and just dragging along anyway, right?


00:37:40.160 --> 00:37:43.160
>> Exactly. You could totally go and copy the code over into


00:37:43.160 --> 00:37:46.640
your own code base, paste it in,


00:37:46.640 --> 00:37:48.680
save it under the exact same name,


00:37:48.680 --> 00:37:50.680
and it should more or less keep working the same way.


00:37:50.680 --> 00:37:52.760
You don't have to maintain it.


00:37:52.760 --> 00:37:55.280
>> Yeah. There are two paths for people who are like,


00:37:55.280 --> 00:37:59.840
"No, I really need AIFC audio file parsing or whatever that is."


00:37:59.840 --> 00:38:01.080
>> Yeah.


00:38:01.080 --> 00:38:05.160
>> One, somebody might decide it's really important and they


00:38:05.160 --> 00:38:08.560
want the CPython version as a pip installable thing that you can


00:38:08.560 --> 00:38:12.360
then add back into Python with a dependency.


00:38:12.360 --> 00:38:14.080
That could be a possibility.


00:38:14.080 --> 00:38:16.240
Or as you just described, you'd vendor it,


00:38:16.240 --> 00:38:18.280
which means just copy the file and you just


00:38:18.280 --> 00:38:20.760
have a copy of the source code internally


00:38:20.760 --> 00:38:22.280
and it's just part of your app now.


00:38:22.280 --> 00:38:24.240
>>Yep, exactly.


00:38:24.240 --> 00:38:27.240
>>Oh, and IFC has an interesting back story.


00:38:27.240 --> 00:38:31.440
So when I posted my first draft of the PEP,


00:38:31.440 --> 00:38:34.480
I got contacted by a lead technical director


00:38:34.480 --> 00:38:37.760
from DreamWorks Animation Studios.


00:38:37.760 --> 00:38:41.200
Because they wanted to keep the model in CPython.


00:38:41.200 --> 00:38:48.920
So Python is heavily used in the movie industry.


00:38:48.920 --> 00:38:51.920
So if you see any blockbuster, it's


00:38:51.920 --> 00:38:54.960
probably powered by Python internally.


00:38:54.960 --> 00:38:59.400
Even so far, that Python just won a special prize


00:38:59.400 --> 00:39:05.360
for the animation awards, the Annie's, what they're called.


00:39:05.360 --> 00:39:05.960
>>That's right.


00:39:05.960 --> 00:39:07.560
And Guido got that award, right?


00:39:07.560 --> 00:39:09.520
Basically the--


00:39:09.520 --> 00:39:11.600
Gui got the physical award, and some core devs,


00:39:11.600 --> 00:39:15.880
including Christian, got requested certificates.


00:39:15.880 --> 00:39:18.280
And I believe Christian's going to get it.


00:39:18.280 --> 00:39:19.240
>> Oh, that's fantastic.


00:39:19.240 --> 00:39:21.800
>> Yeah, the UIworks award, that's


00:39:21.800 --> 00:39:27.480
the second guy who invented Mickey Mouse, for example.


00:39:27.480 --> 00:39:33.200
So UIworks and Walt Disney invented Mickey Mouse together.


00:39:33.200 --> 00:39:35.160
>> Fantastic.


00:39:35.160 --> 00:39:37.720
That's a cool honor, and probably an unexpected one


00:39:37.720 --> 00:39:38.980
from working on Python?


00:39:38.980 --> 00:39:43.280
- Yeah, I mean, Christian and I have been doing this


00:39:43.280 --> 00:39:46.080
long enough that, I mean, I think I've mentioned this


00:39:46.080 --> 00:39:47.800
on the podcast, when I first got involved


00:39:47.800 --> 00:39:50.140
in as a core dev of Python, I still had to explain


00:39:50.140 --> 00:39:51.980
to people what Python even was, right?


00:39:51.980 --> 00:39:53.960
Or if I was lucky enough, they knew what it was,


00:39:53.960 --> 00:39:55.120
they just would go, is that the language


00:39:55.120 --> 00:39:56.520
where white space matters, right?


00:39:56.520 --> 00:39:58.800
- Yeah, is that the one that's weird?


00:39:58.800 --> 00:40:01.240
- Yeah, so it was a totally different time.


00:40:01.240 --> 00:40:06.240
And now we're being used to help power helicopters


00:40:06.240 --> 00:40:12.040
helicopters that help plan flight paths for helicopters on Mars and having the video of


00:40:12.040 --> 00:40:18.040
the lander that made that helicopter take off and processing images of black holes and


00:40:18.040 --> 00:40:19.040
gravitational waves.


00:40:19.040 --> 00:40:20.040
>> I just had a...


00:40:20.040 --> 00:40:23.960
>> Your JWST episode that I haven't gotten to listen to.


00:40:23.960 --> 00:40:24.960
Yeah, it's nuts.


00:40:24.960 --> 00:40:28.480
So, no, I never thought any of this would ever happen.


00:40:28.480 --> 00:40:34.160
So yeah, having Blockbuster movies have their entire, like, management pipeline for their


00:40:34.160 --> 00:40:37.040
assets written in Python.


00:40:37.040 --> 00:40:39.620
It's always mind boggling where Python is and what it's


00:40:39.620 --> 00:40:40.120
powering.


00:40:40.120 --> 00:40:41.000
I mean--


00:40:41.000 --> 00:40:41.960
That's cool.


00:40:41.960 --> 00:40:45.320
It's not just all your cat videos and photos


00:40:45.320 --> 00:40:46.360
on Instagram anymore.


00:40:46.360 --> 00:40:48.320
Or videos on YouTube.


00:40:48.320 --> 00:40:51.360
Yeah, it's both amazing and par for the course.


00:40:51.360 --> 00:40:51.960
Yeah.


00:40:51.960 --> 00:40:54.200
And I can't believe I just said, it's not just Instagram


00:40:54.200 --> 00:40:55.400
and YouTube anymore.


00:40:55.400 --> 00:40:58.040
We've also been there long enough that people


00:40:58.040 --> 00:41:00.440
realize we power huge websites.


00:41:00.440 --> 00:41:01.640
Yeah, absolutely.


00:41:01.640 --> 00:41:03.080
Lots of stuff in the world.


00:41:03.080 --> 00:41:05.160
You know, it's a YouTube constantly.


00:41:05.160 --> 00:41:06.920
Yeah, YouTube was originally written in Python.


00:41:06.920 --> 00:41:09.480
I think it's still lots of parts of YouTube


00:41:09.480 --> 00:41:11.080
are powered by Python.


00:41:11.080 --> 00:41:12.080
From my understanding.


00:41:12.080 --> 00:41:14.480
- Last time I spoke with someone there, it was, yeah.


00:41:14.480 --> 00:41:16.080
- Yep.


00:41:16.080 --> 00:41:18.000
- Sydney out in the audience has an interesting question.


00:41:18.000 --> 00:41:20.120
Like, so there's a list of things that are deprecated here.


00:41:20.120 --> 00:41:22.840
Some that were threatened, but kept.


00:41:22.840 --> 00:41:24.000
You know, they were on the list


00:41:24.000 --> 00:41:26.080
and then they were just like, "Ah, maybe not."


00:41:26.080 --> 00:41:27.680
Sydney asks, "Might there be


00:41:27.680 --> 00:41:29.440
further removals in the future?"


00:41:29.440 --> 00:41:32.160
- Maybe.


00:41:32.160 --> 00:41:34.520
So here's the deal.


00:41:34.520 --> 00:41:37.280
This PEP was done because Christian,


00:41:37.280 --> 00:41:39.800
I personally think rightfully so,


00:41:39.800 --> 00:41:42.200
thought we needed to do a bit of house cleaning


00:41:42.200 --> 00:41:43.720
and get rid of some stuff that was just kind of


00:41:43.720 --> 00:41:47.200
just sitting there rotting in the corner and not being loved.


00:41:47.200 --> 00:41:51.920
Some things got kept because to keep the controversy low,


00:41:51.920 --> 00:41:53.360
Christian was very conservative with the list.


00:41:53.360 --> 00:41:54.560
And basically if anyone stepped forward and saying,


00:41:54.560 --> 00:41:55.680
no, no, please don't take that out,


00:41:55.680 --> 00:41:58.160
that was a core dev, it more or less just got left.


00:41:58.160 --> 00:42:00.320
Very few things are on this list that people still


00:42:00.320 --> 00:42:02.120
pushed back and said, we're removing it


00:42:02.120 --> 00:42:03.880
even if Core Dev wanted to keep it.


00:42:03.880 --> 00:42:09.120
That being said, as I said earlier in this podcast,


00:42:09.120 --> 00:42:12.960
right, like Brett's crazy grand plan here


00:42:12.960 --> 00:42:15.820
is, was to help Christian get this PEP done,


00:42:15.820 --> 00:42:18.080
get initial clean done.


00:42:18.080 --> 00:42:20.760
I've started a conversation over on Python Committers


00:42:20.760 --> 00:42:23.240
about how to maintain the standard library, right?


00:42:23.240 --> 00:42:24.840
Like what does it take to add a module


00:42:24.840 --> 00:42:25.960
and to remove a module?


00:42:25.960 --> 00:42:28.720
Because that's actually not very clearly stated either.


00:42:28.720 --> 00:42:31.800
It's been very just kind of open, right?


00:42:31.800 --> 00:42:35.560
- My perspective from the outside of what defines


00:42:35.560 --> 00:42:38.960
the standard module is just, it's right only,


00:42:38.960 --> 00:42:42.140
like stuff only gets added and it's defined to be


00:42:42.140 --> 00:42:43.800
what's in the shipping version of Python, right?


00:42:43.800 --> 00:42:46.300
I mean, that's kind of an implicit definition.


00:42:46.300 --> 00:42:48.640
- Right, but how do you get something in there?


00:42:48.640 --> 00:42:52.160
Right, like, did you know that Graphlib was added


00:42:52.160 --> 00:42:55.440
by a couple of core devs just 'cause they thought


00:42:55.440 --> 00:42:56.600
it was a good idea?


00:42:56.600 --> 00:42:57.440
- Yeah.


00:42:57.440 --> 00:42:59.940
No one asked the string counts or anything.


00:42:59.940 --> 00:43:02.440
That's how it's been historically maintained.


00:43:02.440 --> 00:43:04.940
It's very much just an open thing.


00:43:04.940 --> 00:43:08.440
And there's a proposal to make it a bit more structured


00:43:08.440 --> 00:43:12.440
and you could argue more rigid depending on your view of this whole process.


00:43:12.440 --> 00:43:14.440
- More modern, maybe. - Maybe.


00:43:14.440 --> 00:43:16.940
By suggesting that you need a PEP to add something


00:43:16.940 --> 00:43:20.940
because it's a shared cost to all the core devs that we have to maintain it.


00:43:20.940 --> 00:43:24.940
You'll notice I have a slight theme here of maintenance cost.


00:43:24.940 --> 00:43:26.940
>>Victor: I have a puppy for you.


00:43:26.940 --> 00:43:28.940
[LAUGHTER]


00:43:28.940 --> 00:43:30.640
>>Grayson: One that's fluffier, one that I'm


00:43:30.640 --> 00:43:31.940
going to have to pay vet bills for.


00:43:31.940 --> 00:43:32.940
>>Victor: A boy.


00:43:32.940 --> 00:43:34.020
>>Victor: He might ruin your carpet,


00:43:34.020 --> 00:43:35.540
but it's also cute, so you'll like it.


00:43:35.540 --> 00:43:36.220
>>Grayson: Yeah.


00:43:36.220 --> 00:43:36.860
I've got a cat.


00:43:36.860 --> 00:43:38.500
I'm good.


00:43:38.500 --> 00:43:40.900
So if you don't know this, it's not the joke.


00:43:40.900 --> 00:43:44.220
So I've just watched Brad's keynote from PyCon


00:43:44.220 --> 00:43:45.940
like three or four years ago.


00:43:45.940 --> 00:43:47.980
>>Victor: Yeah, I think 2019 maybe.


00:43:47.980 --> 00:43:51.020
>>Grayson: It was the first one in Cleveland,


00:43:51.020 --> 00:43:53.140
whichever one that one is.


00:43:53.140 --> 00:43:54.380
>>Victor: 2018, I think.


00:43:54.380 --> 00:43:55.380
I think it's 18.


00:43:55.380 --> 00:43:56.220
- Yeah.


00:43:56.220 --> 00:44:00.860
- Anyway, once that's settled,


00:44:00.860 --> 00:44:03.140
my hope is once again,


00:44:03.140 --> 00:44:03.980
come up with a policy


00:44:03.980 --> 00:44:05.380
of what that means for the standard library.


00:44:05.380 --> 00:44:06.460
Once we have that policy,


00:44:06.460 --> 00:44:07.820
there will probably be a discussion


00:44:07.820 --> 00:44:10.220
about what does that mean for the current standard library?


00:44:10.220 --> 00:44:11.820
Do we leave it as is?


00:44:11.820 --> 00:44:14.140
Do we maybe slowly transition over or not?


00:44:14.140 --> 00:44:14.980
I don't know.


00:44:14.980 --> 00:44:16.340
Some people like Lukasz, for instance,


00:44:16.340 --> 00:44:18.420
have advocated never removing anything


00:44:18.420 --> 00:44:20.740
from the standard library ever again.


00:44:20.740 --> 00:44:22.620
And literally just saying, this is deprecated,


00:44:22.620 --> 00:44:24.620
We will never touch it or update it.


00:44:24.620 --> 00:44:27.780
It's dead, but it's sitting here so we don't break the code.


00:44:27.780 --> 00:44:31.820
Other people are way more, let's strip it to its bones.


00:44:31.820 --> 00:44:33.980
And if you need this stuff, we'll


00:44:33.980 --> 00:44:36.180
make it as a separate package or something.


00:44:36.180 --> 00:44:38.180
Some people have talked about keeping it as is,


00:44:38.180 --> 00:44:40.180
but separating the development process.


00:44:40.180 --> 00:44:42.180
So it's actually an externally maintained thing,


00:44:42.180 --> 00:44:44.420
and it has its own release process, and schedule,


00:44:44.420 --> 00:44:46.380
and all that.


00:44:46.380 --> 00:44:47.780
The answer is, I don't know.


00:44:47.780 --> 00:44:50.380
But this is not the first time I've deprecated modules


00:44:50.380 --> 00:44:51.260
and had them removed.


00:44:51.260 --> 00:44:54.180
I was also in a competition with Fred Drake


00:44:54.180 --> 00:44:55.500
back in the two to three transition


00:44:55.500 --> 00:44:57.980
to see who could remove the most number of lines of code


00:44:57.980 --> 00:45:01.520
in Python and I won thanks to removing the compiler package.


00:45:01.520 --> 00:45:05.220
So I have been around long enough to say,


00:45:05.220 --> 00:45:07.580
probably, I just don't know when.


00:45:07.580 --> 00:45:09.680
Just 'cause I will never say never


00:45:09.680 --> 00:45:12.160
when it comes to a project that's 32 years old.


00:45:12.160 --> 00:45:15.740
But there are no specific plans right now


00:45:15.740 --> 00:45:17.300
outside of this PEP of deprecating


00:45:17.300 --> 00:45:19.620
or removing anything else from the standard library.


00:45:19.620 --> 00:45:22.940
So if that's the question concretely, no plans.


00:45:22.940 --> 00:45:25.420
But philosophically, I am not willing to say--


00:45:25.420 --> 00:45:26.580
- Never say never, yeah.


00:45:26.580 --> 00:45:31.580
So one of the things that stands out,


00:45:31.580 --> 00:45:33.020
let's talk about the modules real quick.


00:45:33.020 --> 00:45:34.900
Then I wanna kind of talk a broader thing


00:45:34.900 --> 00:45:38.420
'cause I think it's gonna lead us down a path.


00:45:38.420 --> 00:45:40.580
So maybe just give us a quick overview


00:45:40.580 --> 00:45:44.780
of the highlights, let's say, of things being removed.


00:45:44.780 --> 00:45:47.060
I talked about this table here


00:45:47.060 --> 00:45:50.040
"under the deprecated modules heading on the pep


00:45:50.040 --> 00:45:53.620
"and it has a module name, when it's deprecated."


00:45:53.620 --> 00:45:56.340
Some of them are like deprecated in 3.6,


00:45:56.340 --> 00:45:59.020
when it's to be removed, when it was added,


00:45:59.020 --> 00:46:00.380
whether as a maintainer.


00:46:00.380 --> 00:46:04.080
And interestingly, I thought this was cool.


00:46:04.080 --> 00:46:08.180
There's an alternative that's new or better maintained


00:46:08.180 --> 00:46:10.140
that you could just use, right?


00:46:10.140 --> 00:46:12.340
- Yes.


00:46:12.340 --> 00:46:16.220
So yeah, I mean, and if you look at the table,


00:46:16.220 --> 00:46:18.560
You'll know some of the stuff's actually been somewhat


00:46:18.560 --> 00:46:22.420
documented as deprecated all the way back to Python 2.0


00:46:22.420 --> 00:46:23.620
or 3, right?


00:46:23.620 --> 00:46:25.760
Like you also have to understand some of the stuff


00:46:25.760 --> 00:46:27.740
got documented as don't use anymore.


00:46:27.740 --> 00:46:29.900
A long time ago, we just didn't take the code out.


00:46:29.900 --> 00:46:32.260
And this is more of a push to actually finally remove


00:46:32.260 --> 00:46:33.180
the code in the documentation.


00:46:33.180 --> 00:46:34.300
- I see.


00:46:34.300 --> 00:46:36.860
- But yeah, so we have AIFC,


00:46:36.860 --> 00:46:39.820
which I believe is the audio format.


00:46:39.820 --> 00:46:40.660
- Correct.


00:46:40.660 --> 00:46:43.300
- We have AsyncChad and AsyncCore,


00:46:43.300 --> 00:46:48.060
which were very early async server things


00:46:48.060 --> 00:46:50.300
in the standard library that you shouldn't use,


00:46:50.300 --> 00:46:52.060
obviously, 'cause it's on this list.


00:46:52.060 --> 00:46:54.020
- Yeah, and alternative is async.io,


00:46:54.020 --> 00:46:56.580
which was added in 3.4 and is active.


00:46:56.580 --> 00:46:58.380
- Yeah, it's actually asynchronous.


00:46:58.380 --> 00:47:00.380
- I think the async check,


00:47:00.380 --> 00:47:03.820
I think core were added for Zope back in the day.


00:47:03.820 --> 00:47:06.780
I know that the Zope server used to use


00:47:06.780 --> 00:47:08.380
async core async check a lot.


00:47:10.060 --> 00:47:13.980
I mean, I don't even remember what the hell Audio Op is.


00:47:13.980 --> 00:47:19.380
Audio Op is low level conversion and math operations


00:47:19.380 --> 00:47:25.660
used by IFC Wave and some of the other sound models.


00:47:25.660 --> 00:47:30.900
So this just provides math primitives in C.


00:47:30.900 --> 00:47:32.660
>>CGI is literally what it sounds like.


00:47:32.660 --> 00:47:35.100
It's helpers to write CGI scripts.


00:47:35.100 --> 00:47:38.380
>>That sounded like one of the bigger, harder


00:47:38.380 --> 00:47:39.780
to work with ones.


00:47:39.780 --> 00:47:43.120
Like there's no maintainer that was designed at a different time.


00:47:43.120 --> 00:47:47.820
Yeah, and the funny thing though is a lot of packages


00:47:47.820 --> 00:47:51.220
still use bits of it because there's weird little helpers in there.


00:47:51.220 --> 00:47:54.320
But if you also go look in what the helpers are doing,


00:47:54.320 --> 00:47:56.920
most of them are either a one-liner


00:47:56.920 --> 00:48:00.520
or they delegate to something else, somewhere else in the standard library at this point.


00:48:00.520 --> 00:48:05.520
And they have horrible APIs now because they very much expect it to be CGI.


00:48:05.520 --> 00:48:08.520
So they're reading from environment variables and files


00:48:08.520 --> 00:48:11.520
to get the things to process versus passing them as an argument.


00:48:11.520 --> 00:48:13.520
From STD in and STD out.


00:48:13.520 --> 00:48:17.240
So pretty much hot code STD in and STD out.


00:48:17.240 --> 00:48:19.520
Yeah, so there was actual pushback on CGI,


00:48:19.520 --> 00:48:22.780
but I think when we pointed out, like, this just delegates to here,


00:48:22.780 --> 00:48:25.280
or this is literally a one-liner that I can paste in


00:48:25.280 --> 00:48:28.280
when you're in the discussion of what it does,


00:48:28.280 --> 00:48:31.280
like just copy and paste this regex, literally.


00:48:31.780 --> 00:48:33.780
And or just whatever.


00:48:33.780 --> 00:48:35.780
Most people, I think, were OK with it.


00:48:35.780 --> 00:48:37.780
This is actually, I think, one of the first modules


00:48:37.780 --> 00:48:39.780
to get put up on PyPI a couple weeks ago.


00:48:39.780 --> 00:48:43.780
CGI TV is tracebacks, pretty tracebacks in your CGI code.


00:48:43.780 --> 00:48:45.780
I mean, if you don't have CGI code, you can use tracebacks.


00:48:45.780 --> 00:48:47.780
>> One goes, the other comes with it.


00:48:47.780 --> 00:48:50.780
>> Yeah, chunk, I think, is literally just chunking data.


00:48:50.780 --> 00:48:52.780
It's literally just breaking up into chunks.


00:48:52.780 --> 00:48:54.780
>> A little bit like inner tools.


00:48:54.780 --> 00:48:56.780
>> Yeah, I think so, if I remember correctly.


00:48:56.780 --> 00:49:01.780
- I would like to see a format to distribute files


00:49:01.780 --> 00:49:04.580
like used by mailboxes or so, if I remember correctly.


00:49:04.580 --> 00:49:05.420
Yeah.


00:49:05.420 --> 00:49:06.240
- Yeah.


00:49:06.240 --> 00:49:08.340
I will let Christian talk about Crypt.


00:49:08.340 --> 00:49:12.020
- Yeah, Crypt is a binding to the ellipses.


00:49:12.020 --> 00:49:14.780
Crypt function is used to password hashing,


00:49:14.780 --> 00:49:17.580
a way around.


00:49:17.580 --> 00:49:22.780
The problem with that is that the only guaranteed


00:49:22.780 --> 00:49:24.940
algorithm available is horrible.


00:49:24.940 --> 00:49:28.020
And if you need some of the better ones,


00:49:28.020 --> 00:49:29.820
they're probably not available in your web C.


00:49:29.820 --> 00:49:33.460
So there's like optional algorithms for password hashing


00:49:33.460 --> 00:49:35.420
and even there are problematic.


00:49:35.420 --> 00:49:37.460
So use one of these replacement ones.


00:49:37.460 --> 00:49:39.740
So yeah, they're much better.


00:49:39.740 --> 00:49:41.860
- Yeah, like Encrypt or PassLib or anything else


00:49:41.860 --> 00:49:44.180
that's doing it right.


00:49:44.180 --> 00:49:45.020
- Yeah, that's correct.


00:49:45.020 --> 00:49:49.020
- Yeah, and the image shatter is just a very limited


00:49:49.020 --> 00:49:54.020
approach to detect if you have a PNG, GIF, JPEG, whatever,


00:49:54.180 --> 00:49:57.380
based on the first couple of bytes of a file.


00:49:57.380 --> 00:50:01.740
It's just the same with audio headers, sound headers.


00:50:01.740 --> 00:50:03.480
They just detect file formats,


00:50:03.480 --> 00:50:07.240
but they only support a very limited setup file formats.


00:50:07.240 --> 00:50:09.780
And there are better libraries that are more efficient


00:50:09.780 --> 00:50:13.340
and support much more different file formats.


00:50:13.340 --> 00:50:18.220
- Yeah, so after image headers, MSI lib,


00:50:18.220 --> 00:50:20.840
which helps with Windows MSI installers.


00:50:20.840 --> 00:50:24.020
Okay, why do we have this in standard library?


00:50:24.020 --> 00:50:25.340
kind of question.


00:50:25.340 --> 00:50:27.680
I think we did originally to help write


00:50:27.680 --> 00:50:30.300
the installer for Windows and use it anymore.


00:50:30.300 --> 00:50:31.740
So it's not a big deal.


00:50:31.740 --> 00:50:35.980
We already talked about NNTPlib, NIST.


00:50:35.980 --> 00:50:38.460
Who still uses NIST?


00:50:38.460 --> 00:50:40.020
>> Sun Yellow Pages.


00:50:40.020 --> 00:50:41.140
>> Yeah, exactly.


00:50:41.140 --> 00:50:46.540
Do people even know what Sun is anymore?


00:50:46.540 --> 00:50:47.860
Getting to that point in our lives.


00:50:47.860 --> 00:50:49.740
>> I think it's a synonym for Oracle.


00:50:49.740 --> 00:50:51.980
>> Yeah, exactly.


00:50:51.980 --> 00:50:54.900
OSS Audio Dev is just a wrapper and an audio library.


00:50:54.900 --> 00:50:58.980
Once again, does that really belong in the standard library?


00:50:58.980 --> 00:51:02.220
Yeah, it was used by Linux before they had AltSAR,


00:51:02.220 --> 00:51:05.780
before they had PulseAudio and Pipewire.


00:51:05.780 --> 00:51:08.820
So this is from the early 2000s.


00:51:08.820 --> 00:51:14.420
The Pipes library more or less got replaced by a subprocess,


00:51:14.420 --> 00:51:16.780
so it's literally just Unix pipes.


00:51:16.780 --> 00:51:20.260
SMTPD, I don't think we need to be able to run a server


00:51:20.260 --> 00:51:22.420
to send email in Python to standard library.


00:51:22.420 --> 00:51:23.780
So that's why that's there.


00:51:23.780 --> 00:51:27.420
>> Yeah, and there's a PyPI alternatives.


00:51:27.420 --> 00:51:30.060
>> Yeah, send header,


00:51:30.060 --> 00:51:31.860
because you already talked about,


00:51:31.860 --> 00:51:36.860
SPWD is the binding to the etc shadow file.


00:51:36.860 --> 00:51:39.820
So that's the place where Linux actually keeps


00:51:39.820 --> 00:51:44.300
the passwords for users, but that's the wrong approach.


00:51:44.300 --> 00:51:45.980
So if you want to log in a user,


00:51:45.980 --> 00:51:47.340
you don't check the password,


00:51:47.340 --> 00:51:51.820
You ask the PAM stack if the user's allowed to log into a service.


00:51:51.820 --> 00:51:54.020
And yeah.


00:51:54.020 --> 00:51:59.820
SunAU is another audio format from Sun.


00:51:59.820 --> 00:52:04.340
So Telnet lib, yeah, Telnet server.


00:52:04.340 --> 00:52:08.500
This was specifically to be a server, not a client of Telnet?


00:52:08.500 --> 00:52:11.900
It's our client library.


00:52:11.900 --> 00:52:13.180
Sorry, the client library.


00:52:13.180 --> 00:52:16.500
So I don't think you have a server, but actually I would have to open the code,


00:52:16.500 --> 00:52:17.400
to read the code.


00:52:17.400 --> 00:52:21.400
UU, that was used by UUCP.


00:52:21.400 --> 00:52:22.900
So Unix to Unix copy,


00:52:22.900 --> 00:52:27.900
that's the chunking format to transfer binary data.


00:52:27.900 --> 00:52:32.020
And XCRLib, another Sun library,


00:52:32.020 --> 00:52:36.460
that is the binary format used by NFS.


00:52:36.460 --> 00:52:38.420
And remote procedure calls.


00:52:38.420 --> 00:52:41.140
If you have like Sun remote procedure calls


00:52:41.140 --> 00:52:43.900
for network fault servers.


00:52:44.980 --> 00:52:47.020
from 1992, indeed.


00:52:47.020 --> 00:52:50.960
There's an interesting high frequency


00:52:50.960 --> 00:52:52.400
of sun being mentioned here.


00:52:52.400 --> 00:52:55.520
- Yeah, I mean, Python used to run cleanly


00:52:55.520 --> 00:52:57.120
on Solaris right out of the box.


00:52:57.120 --> 00:52:59.280
- Yeah.


00:52:59.280 --> 00:53:01.400
- And Sun developed lots of internet standards


00:53:01.400 --> 00:53:03.440
we still use these days.


00:53:03.440 --> 00:53:05.160
- Sure, for sure.


00:53:05.160 --> 00:53:06.920
- So hopefully all the listeners were shocked


00:53:06.920 --> 00:53:08.920
and had no clue any of these modules existed


00:53:08.920 --> 00:53:10.720
and hence why we're getting rid of them.


00:53:10.720 --> 00:53:11.720
(laughing)


00:53:11.720 --> 00:53:13.520
- Where's the threatened list?


00:53:13.520 --> 00:53:14.840
It's down here somewhere.


00:53:14.840 --> 00:53:16.040
- The modules to keep.


00:53:16.040 --> 00:53:21.280
So we've got color sys, file input, get opt,


00:53:21.280 --> 00:53:23.240
opt pars and wave.


00:53:23.240 --> 00:53:26.080
Those are the ones that avoided being cut.


00:53:26.080 --> 00:53:32.920
- Color sys, to be frank is just basic math.


00:53:32.920 --> 00:53:35.520
It's nothing special, but the core dev said,


00:53:35.520 --> 00:53:37.800
I'll use it, I'll keep it around, I'll maintain it.


00:53:37.800 --> 00:53:38.640
I'll be okay.


00:53:38.640 --> 00:53:44.200
I don't remember about file input.


00:53:44.200 --> 00:53:45.840
I think someone just said I use it.


00:53:45.840 --> 00:53:47.780
GetOpt and OptParse were once again,


00:53:47.780 --> 00:53:51.200
is it worth getting rid of versus AugParse?


00:53:51.200 --> 00:53:53.880
And is it widely used enough?


00:53:53.880 --> 00:53:56.780
And it was just one of these--


00:53:56.780 --> 00:53:58.740
there's just too much code out there right now


00:53:58.740 --> 00:54:00.240
to warrant ripping it out.


00:54:00.240 --> 00:54:02.320
So we just said it's easier to keep.


00:54:02.320 --> 00:54:06.000
And Wave plays WAV sound files.


00:54:06.000 --> 00:54:10.360
And basically, it's used by education.


00:54:10.360 --> 00:54:13.440
It's a quick and cheap tool to show kids computers


00:54:13.440 --> 00:54:15.480
can do fancy stuff like make noise.


00:54:15.480 --> 00:54:16.320
- Oh yeah.


00:54:16.320 --> 00:54:17.720
Yeah, that's actually really nice


00:54:17.720 --> 00:54:19.720
if you've got your turtle moving along,


00:54:19.720 --> 00:54:21.960
it could laugh when it gets to the end


00:54:21.960 --> 00:54:23.800
of its little thing or whatever, right?


00:54:23.800 --> 00:54:25.040
- Yeah.


00:54:25.040 --> 00:54:26.920
But I mean, that's another good point, Michael.


00:54:26.920 --> 00:54:27.760
Like, oh, turtle.


00:54:27.760 --> 00:54:30.600
Well, that relies on a shipping Tkinter,


00:54:30.600 --> 00:54:32.640
which requires a shipping Tickle TK,


00:54:32.640 --> 00:54:35.680
and it's just like, where do you draw the line?


00:54:35.680 --> 00:54:36.520
Yeah, I mean.


00:54:36.520 --> 00:54:38.360
- But it's turtles all the way down, you know that.


00:54:38.360 --> 00:54:39.600
(laughing)


00:54:39.600 --> 00:54:42.000
- Hey, and as someone who learned turtle back


00:54:42.000 --> 00:54:45.320
on an Apple IIe with a good old green and black screen.


00:54:45.320 --> 00:54:47.840
Like I totally get it, but these are the questions


00:54:47.840 --> 00:54:49.200
we're starting to ask ourselves, right?


00:54:49.200 --> 00:54:51.240
Like, where's the line?


00:54:51.240 --> 00:54:52.920
- Yeah, indeed.


00:54:52.920 --> 00:54:54.120
All right, before we run out of time,


00:54:54.120 --> 00:54:57.680
let's have a broader philosophical conversation


00:54:57.680 --> 00:54:58.520
on all this stuff.


00:54:58.520 --> 00:55:00.780
You said you have a big plan.


00:55:00.780 --> 00:55:04.520
You know, one of the things that I think


00:55:04.520 --> 00:55:06.480
is interesting about Python is where it runs


00:55:06.480 --> 00:55:07.480
in all these different places.


00:55:07.480 --> 00:55:10.560
I mean, you've got Mac, Windows, Linux,


00:55:10.560 --> 00:55:13.880
but you also got Raspberry Pis, you've got helicopters,


00:55:13.880 --> 00:55:16.960
you've got robots, and then you even have, you know,


00:55:16.960 --> 00:55:20.640
Circuit, CircuitPython and MicroPython,


00:55:20.640 --> 00:55:22.920
where it's like really, really small.


00:55:22.920 --> 00:55:25.320
And I do think it would be interesting to say,


00:55:25.320 --> 00:55:29.600
here is a subset, a portion of Python


00:55:29.600 --> 00:55:32.640
and a portion of maybe even the language syntax


00:55:32.640 --> 00:55:34.920
that if you program to this,


00:55:34.920 --> 00:55:38.480
you're guaranteed to be able to run it everywhere.


00:55:38.480 --> 00:55:40.400
Right, is there a way to agree?


00:55:40.400 --> 00:55:41.800
Maybe that compiles to WebAssembly


00:55:41.800 --> 00:55:44.760
and runs in the front end on a browser, who knows?


00:55:44.760 --> 00:55:48.920
- So for any of you who read my blog,


00:55:48.920 --> 00:55:51.480
you'll know I've been doing a long running blog post series


00:55:51.480 --> 00:55:53.960
on the syntactic sugar of Python.


00:55:53.960 --> 00:55:55.560
And part of the reason I've been doing that


00:55:55.560 --> 00:55:57.840
is I've been, and you'll find out more


00:55:57.840 --> 00:56:00.680
when I write the concluding post about this,


00:56:00.680 --> 00:56:02.400
but basically I've been trying to figure out


00:56:02.400 --> 00:56:04.920
what I've mentally been calling the minimum viable Python.


00:56:04.920 --> 00:56:08.680
What is the core set of Python constructs


00:56:08.680 --> 00:56:11.520
that must exist to basically reconstitute


00:56:11.520 --> 00:56:14.040
all the other parts of Python in its syntax.


00:56:14.040 --> 00:56:17.680
And kind of, if we were to start from scratch almost,


00:56:17.680 --> 00:56:19.520
what would that look like?


00:56:19.520 --> 00:56:20.960
Now that's interesting from a language level,


00:56:20.960 --> 00:56:23.040
but from a standard library level,


00:56:23.040 --> 00:56:26.060
that comes into play only in terms of support, right?


00:56:26.060 --> 00:56:28.240
Like we dropped this feature, would that break things?


00:56:28.240 --> 00:56:29.280
Right?


00:56:29.280 --> 00:56:30.880
- Right, well, for example,


00:56:30.880 --> 00:56:34.680
does Tkinter need to be


00:56:34.680 --> 00:56:37.280
in the WebAssembly front end version?


00:56:37.280 --> 00:56:38.280
Probably not, right?


00:56:38.280 --> 00:56:43.280
- I guess not, but maybe, probably not.


00:56:43.280 --> 00:56:46.680
- Yeah, I mean, that's the tricky question, right?


00:56:46.680 --> 00:56:48.480
It's always one of these things of


00:56:48.480 --> 00:56:50.440
who are you optimizing for?


00:56:50.440 --> 00:56:51.880
Who's the target audience?


00:56:51.880 --> 00:56:53.500
How do you define that, right?


00:56:53.500 --> 00:56:57.260
Like other than stuff that we have to have


00:56:57.260 --> 00:56:59.680
just to make CPython run,


00:56:59.680 --> 00:57:03.160
nothing technically has to be in there, right?


00:57:03.160 --> 00:57:04.920
Some have said, oh, we should have enough


00:57:04.920 --> 00:57:07.080
to at least bootstrap in pip.


00:57:07.080 --> 00:57:10.320
So if you can at least get pip or some installer in,


00:57:10.320 --> 00:57:14.000
you can then at least get yourself going


00:57:14.000 --> 00:57:16.120
and start installing dependencies.


00:57:16.120 --> 00:57:16.960
- Yeah, absolutely.


00:57:16.960 --> 00:57:17.780
- But as you mentioned earlier,


00:57:17.780 --> 00:57:19.040
like it's nice to be able to also write


00:57:19.040 --> 00:57:20.480
that little automation script


00:57:20.480 --> 00:57:21.960
that helps maintain your system


00:57:21.960 --> 00:57:22.920
and not have to pull anything


00:57:22.920 --> 00:57:24.060
and have to create a virtual environment


00:57:24.060 --> 00:57:25.560
for every little script you ever write.


00:57:25.560 --> 00:57:29.480
- When I install, yeah, when I saw Python on Linux


00:57:29.480 --> 00:57:30.900
on just like a bare server,


00:57:30.900 --> 00:57:35.560
I can apt install Python three,


00:57:35.560 --> 00:57:36.560
but maybe that's not enough.


00:57:36.560 --> 00:57:41.560
maybe I need to also install sometimes Python 3-VENV


00:57:41.560 --> 00:57:44.660
or it's like broken up into bits, right?


00:57:44.660 --> 00:57:47.480
- The Debian question is a very hot topic


00:57:47.480 --> 00:57:48.840
with Christian in the room.


00:57:48.840 --> 00:57:50.240
(laughing)


00:57:50.240 --> 00:57:53.860
But I personally argue against Debian's policy on that


00:57:53.860 --> 00:57:57.840
and say VIM would be considered core part, right?


00:57:57.840 --> 00:57:58.840
- I think it's core as well.


00:57:58.840 --> 00:58:01.840
And I wasn't so much picking on VIM as just like,


00:58:01.840 --> 00:58:05.580
there are environments where it comes in pieces.


00:58:05.580 --> 00:58:07.580
to some degree, like that.


00:58:07.580 --> 00:58:09.580
>>Christian, what are you going to say about this?


00:58:09.580 --> 00:58:16.580
>>So this is a -- okay, I need to find the right words to not


00:58:16.580 --> 00:58:18.580
get into trouble again.


00:58:18.580 --> 00:58:24.580
Or to get into -- last time I was a bit uncareful, somebody


00:58:24.580 --> 00:58:28.580
accused me to wage a crusade against Debian.


00:58:28.580 --> 00:58:32.580
>>It's a philosophical disagreement.


00:58:32.580 --> 00:58:41.140
Disagreement. So Debian has policies to split packages in smaller parts so they can have a


00:58:41.140 --> 00:58:49.460
minimal installation and they also don't like the way how we have like virtual amphibian provided


00:58:49.460 --> 00:58:55.620
because it's actually duplicating code. We have like a zip file of binary wields with


00:58:55.620 --> 00:59:02.500
compressed setup tools and pip which contains vendor packages but Debian wants to use their


00:59:02.500 --> 00:59:05.420
their own distribution provided version of pip.


00:59:05.420 --> 00:59:07.340
So this is a conflict.


00:59:07.340 --> 00:59:12.340
And like we from the parts of the core developers,


00:59:12.340 --> 00:59:17.100
we think that the usability is more important here.


00:59:17.100 --> 00:59:21.700
So we want users to be able to use standard documentation


00:59:21.700 --> 00:59:26.580
and instructions to use Python install extensions.


00:59:26.580 --> 00:59:27.780
This is more important for us.


00:59:27.780 --> 00:59:32.580
And this is a debate which had multiple session


00:59:32.580 --> 00:59:37.420
between Debian engineers and the steering council.


00:59:37.420 --> 00:59:40.740
There was several heated discussions.


00:59:40.740 --> 00:59:45.780
And yeah, there are just different philosophical


00:59:45.780 --> 00:59:47.100
intentions.


00:59:47.100 --> 00:59:49.980
>>So I mean, the key point is there


00:59:49.980 --> 00:59:54.740
are a lot of questions about if you start to slice and dice


00:59:54.740 --> 00:59:56.620
the standard library into parts that you can install


00:59:56.620 --> 00:59:59.420
in groupings, for instance,


00:59:59.420 --> 01:00:00.660
is that truly part of the standard library


01:00:00.660 --> 01:00:02.740
or is that just an optional install on PyPI


01:00:02.740 --> 01:00:04.980
that the core dev team just happens to maintain, right?


01:00:04.980 --> 01:00:06.500
'Cause you can no longer rely on it.


01:00:06.500 --> 01:00:07.860
- Yeah, I mean, if you went down that path,


01:00:07.860 --> 01:00:11.540
it would almost be a little bit like the Anaconda story,


01:00:11.540 --> 01:00:13.500
right, like here's the essence of what I got,


01:00:13.500 --> 01:00:16.860
but if I install what I normally install, I get more,


01:00:16.860 --> 01:00:19.860
you know, there'd be like a minimum install


01:00:19.860 --> 01:00:23.100
and like a fuller install, which I think,


01:00:24.020 --> 01:00:25.720
I don't know how I feel about that.


01:00:25.720 --> 01:00:26.720
But for some parts--


01:00:26.720 --> 01:00:27.720
>> Well, it--


01:00:27.720 --> 01:00:29.260
>> -- on the front end, I don't have to write JavaScript.


01:00:29.260 --> 01:00:30.900
I feel pretty good about it, I'm starting to think.


01:00:30.900 --> 01:00:31.900
I don't know.


01:00:31.900 --> 01:00:35.100
>> Well, for some part, it makes kind of sense.


01:00:35.100 --> 01:00:36.860
So let's go back to Tkinter.


01:00:36.860 --> 01:00:44.220
So Tkinter depends on TclTk, which depends on your graphical user interface.


01:00:44.220 --> 01:00:45.620
So x11.


01:00:45.620 --> 01:00:50.620
And if Python would always require Tcl/Tk,


01:00:50.620 --> 01:00:54.580
then you would have to install,


01:00:54.580 --> 01:00:57.420
I guess like 100 megabytes of libraries


01:00:57.420 --> 01:01:00.220
on every container image that has Python


01:01:00.220 --> 01:01:03.980
because the whole X11 stack is very big.


01:01:03.980 --> 01:01:08.140
So you get your whole like graphical user interface libraries


01:01:08.140 --> 01:01:11.820
down to the actual graphical server


01:01:11.820 --> 01:01:15.220
that renders all the output.


01:01:15.220 --> 01:01:19.520
So it makes sense that most Linux distros split up


01:01:19.520 --> 01:01:22.340
to counter and ship that optional package.


01:01:22.340 --> 01:01:27.340
But some distros go a bit further and split off packages


01:01:27.340 --> 01:01:32.100
that we consider to be core core packages.


01:01:32.100 --> 01:01:34.420
So the inner core,


01:01:34.420 --> 01:01:36.220
that should be always available and working--


01:01:36.220 --> 01:01:39.620
- Like intime and tuples and stuff like that.


01:01:39.620 --> 01:01:42.540
- Stuff that has no third party dependencies basically.


01:01:42.540 --> 01:01:43.380
- Okay.


01:01:43.380 --> 01:01:50.900
Okay, interesting.


01:01:50.900 --> 01:01:51.900
What about WebAssembly?


01:01:51.900 --> 01:01:55.980
You guys started actually building for WebAssembly, didn't you?


01:01:55.980 --> 01:01:56.980
I feel like--


01:01:56.980 --> 01:01:57.980
>> Yes.


01:01:57.980 --> 01:02:04.460
>> Steve Dower pointed out that I don't remember the way to look it up super easy, but that


01:02:04.460 --> 01:02:11.500
that there's sort of a proper core dev version of WebAssembly


01:02:11.500 --> 01:02:14.060
CPython now.


01:02:14.060 --> 01:02:17.140
It's REPL_EASEN_HSME.


01:02:17.140 --> 01:02:21.540
I just posted in the chat with the chat window.


01:02:21.540 --> 01:02:24.600
Yeah, basically what happened was that the core dev sprints


01:02:24.600 --> 01:02:27.340
back in October, I started to look


01:02:27.340 --> 01:02:31.580
at seeing what it would take to compile CPython to WebAssembly.


01:02:31.580 --> 01:02:35.620
And I was lamenting in our build channel on our Core Dev Discord


01:02:35.620 --> 01:02:39.540
server that, all right, the build setup


01:02:39.540 --> 01:02:41.940
was kind of old and creaky.


01:02:41.940 --> 01:02:45.100
And I needed some help to figure out what to do.


01:02:45.100 --> 01:02:48.340
And then Christian, working for Linux distribution,


01:02:48.340 --> 01:02:50.220
knows how all this stuff works.


01:02:50.220 --> 01:02:52.740
And so he started answering my questions.


01:02:52.740 --> 01:02:54.180
And I did some initial cleanup.


01:02:54.180 --> 01:02:56.340
And then Christian really got into it


01:02:56.340 --> 01:02:58.220
and just totally really started to clean up


01:02:58.220 --> 01:03:01.300
our entire build process in terms of modules and such.


01:03:01.300 --> 01:03:05.940
because there's a setup file in the repo


01:03:05.940 --> 01:03:09.780
where you can specify what modules you do or don't want built in to Python,


01:03:09.780 --> 01:03:13.780
both compiled at all into a .so or DLL,


01:03:13.780 --> 01:03:18.060
compiled into statically into the binary, or just completely left out.


01:03:18.060 --> 01:03:22.060
And Christian went through with some help with Erland, I think, actually.


01:03:22.060 --> 01:03:26.460
- Yeah, Erland. - And cleaned up a bunch of the whole structure


01:03:26.460 --> 01:03:29.300
so that we were using more of PKG, config,


01:03:29.300 --> 01:03:31.300
and just made it a bit more modern.


01:03:31.300 --> 01:03:33.720
And while he was doing that,


01:03:33.720 --> 01:03:37.640
Christian would bring up stuff about cross compilation,


01:03:37.640 --> 01:03:39.960
because that's another thing we do, is you do a cross build.


01:03:39.960 --> 01:03:43.800
You can build, I mean, you can totally build on your Mac right now, Michael,


01:03:43.800 --> 01:03:47.300
for x86, 64-bit, even though you're running an M1.


01:03:47.300 --> 01:03:48.800
Oh, interesting. Okay.


01:03:48.800 --> 01:03:50.800
- So it's just flags to the compiler. - That's pretty wild, yeah.


01:03:50.800 --> 01:03:54.040
But the way you get WebAssembly building that way


01:03:54.040 --> 01:03:56.640
is you just specify, typically in scripting,


01:03:56.640 --> 01:03:59.720
as a C compiler, which basically is Clang.


01:03:59.720 --> 01:04:01.320
And you just specify it.


01:04:01.320 --> 01:04:03.480
And basically under the hood, it's more or less just specifying


01:04:03.480 --> 01:04:05.960
the right flags and everything to just make Clang


01:04:05.960 --> 01:04:07.960
build for a different CPU target.


01:04:07.960 --> 01:04:10.560
And then Christian was starting to talk about, like,


01:04:10.560 --> 01:04:12.560
"Oh, well, for cross builds, can we do this and that?"


01:04:12.560 --> 01:04:14.560
And I kept saying, "No, it won't work for WebAssembly


01:04:14.560 --> 01:04:16.560
because of this, and it won't work for WebAssembly because of that."


01:04:16.560 --> 01:04:18.560
And then Christian just looked into it and was like,


01:04:18.560 --> 01:04:20.560
"Oh, I'll use this as a motivator." And then Christian just ran with it.


01:04:20.560 --> 01:04:22.560
And Christian figured out all the problems


01:04:22.560 --> 01:04:25.040
and just got really into it. And it's been patching


01:04:26.280 --> 01:04:31.000
CPython's main over and over to the point that as of


01:04:31.000 --> 01:04:33.560
I don't know, less than a month ago.


01:04:33.560 --> 01:04:38.360
So for two weeks now we can run the entire test suite without any faders.


01:04:38.360 --> 01:04:40.360
On WebAssembly?


01:04:40.360 --> 01:04:43.320
Yep, on inside Node.js.


01:04:43.320 --> 01:04:46.760
So you compile the...


01:04:46.760 --> 01:04:51.160
So, we said a bit earlier, so when you


01:04:51.160 --> 01:04:55.960
build Python for WebAssembly, you have to not only tag WebAssembly


01:04:55.960 --> 01:04:58.120
but also the runtime.


01:04:58.120 --> 01:05:00.840
So these things are called triplets,


01:05:00.840 --> 01:05:02.840
so platform triplets.


01:05:02.840 --> 01:05:08.340
You have which CPU you target, which vendor and operating system,


01:05:08.340 --> 01:05:11.280
and additional flags like glibc.


01:05:11.280 --> 01:05:18.620
And the default target is a Wedum32 mscripten,


01:05:18.620 --> 01:05:21.280
so you do compile to WebAssembly,


01:05:21.280 --> 01:05:24.120
CPU instruction for 32-bits,


01:05:24.120 --> 01:05:26.600
And Emscripten is the runtime platform.


01:05:26.600 --> 01:05:31.320
And Emscripten can target multiple different platforms.


01:05:31.320 --> 01:05:33.880
So this is Emscripten for the browser,


01:05:33.880 --> 01:05:37.960
but you can also compile it that it uses Node.js backends


01:05:37.960 --> 01:05:40.480
and Node.js file system access.


01:05:40.480 --> 01:05:41.320
So we can actually--


01:05:41.320 --> 01:05:44.440
I have more permissions and more capabilities, right?


01:05:44.440 --> 01:05:47.920
You can run threads, you can run sockets in a limited way,


01:05:47.920 --> 01:05:50.000
and you can access the file system.


01:05:50.000 --> 01:05:55.000
And so it was a process of running the test suite,


01:05:55.000 --> 01:05:56.680
figuring out why it's crashing.


01:05:56.680 --> 01:05:57.960
So we had in the beginning,


01:05:57.960 --> 01:06:02.040
like this completely like really crushing the runtime.


01:06:02.040 --> 01:06:03.680
So not just itself,


01:06:03.680 --> 01:06:07.720
but there's like a virtual kernel layer


01:06:07.720 --> 01:06:11.440
written in JavaScript that provides sys calls


01:06:11.440 --> 01:06:14.720
written in JavaScript to the WebAssembly model.


01:06:14.720 --> 01:06:16.720
It's a bit weird.


01:06:16.720 --> 01:06:20.520
So I was writing kernel-like code in JavaScript


01:06:20.520 --> 01:06:23.780
and the unit test code for that in C.


01:06:23.780 --> 01:06:26.840
So it's actually--


01:06:26.840 --> 01:06:31.560
- Yeah, so this a repl.ethanhs.me,


01:06:31.560 --> 01:06:33.120
which I'll put in the show notes,


01:06:33.120 --> 01:06:38.120
it's got my in scripting version of Python 3.11


01:06:38.120 --> 01:06:42.260
and I can do F string stuff


01:06:42.260 --> 01:06:45.000
and the thing that's right here in the browser.


01:06:45.000 --> 01:06:46.720
It hasn't been updated in a while.


01:06:46.720 --> 01:06:49.320
It's a bit old.


01:06:49.320 --> 01:06:51.680
It's like six weeks old.


01:06:51.680 --> 01:06:54.720
That's old for the web, I guess.


01:06:54.720 --> 01:07:01.240
Well, I mean, we have a cron job running on Ethan's GitHub repo


01:07:01.240 --> 01:07:06.440
for this that runs nightly against Python,


01:07:06.440 --> 01:07:09.760
CPython itself to make sure it continues to compile.


01:07:09.760 --> 01:07:12.640
We need to get a build bot coin.


01:07:12.640 --> 01:07:15.900
Microsoft has agreed to fund one via Azure.


01:07:15.900 --> 01:07:18.360
And just, we have to get it to a,


01:07:18.360 --> 01:07:20.320
I haven't talked to Christian about it yet,


01:07:20.320 --> 01:07:22.720
but we'll figure out getting a build bot going.


01:07:22.720 --> 01:07:24.400
And then where I,


01:07:24.400 --> 01:07:28.280
the part of one of Brett's crazy grand plans


01:07:28.280 --> 01:07:30.440
around Python WebAssembly,


01:07:30.440 --> 01:07:32.780
is we're defining an official platform support


01:07:32.780 --> 01:07:36.040
for CPython right now for in PEP 11.


01:07:36.040 --> 01:07:38.560
And my hope is we're going to get it


01:07:38.560 --> 01:07:41.440
so that Christian and I are listed as the maintainers


01:07:41.440 --> 01:07:42.980
of the WebAssembly support in CPython,


01:07:42.980 --> 01:07:45.980
and we'll get it listed as an official tier two,


01:07:45.980 --> 01:07:48.160
what we're calling a tier two supported platform,


01:07:48.160 --> 01:07:50.360
which basically means it's backed by two core devs,


01:07:50.360 --> 01:07:52.080
at least, and a build bot.


01:07:52.080 --> 01:07:53.520
But the idea of tier one is something


01:07:53.520 --> 01:07:54.760
the entire core team supports


01:07:54.760 --> 01:07:57.840
and is based on continuous integration.


01:07:57.840 --> 01:07:59.640
But one of the funny things-- - That's really exciting.


01:07:59.640 --> 01:08:00.880
- Yeah, well, one of the actually nice things


01:08:00.880 --> 01:08:02.360
about WebAssembly is we could theoretically


01:08:02.360 --> 01:08:03.520
even get that to a tier one,


01:08:03.520 --> 01:08:08.000
because WebAssembly is an abstracted assembly language,


01:08:08.000 --> 01:08:09.360
but it's not CPU dependent.


01:08:09.360 --> 01:08:12.460
So we could actually compile it on GitHub Actions


01:08:12.460 --> 01:08:16.200
and test on that just as equally as Mac, Windows, or Linux,


01:08:16.200 --> 01:08:18.800
and have it still be fully tested and work on CI.


01:08:18.800 --> 01:08:21.600
And you can take this idea really far.


01:08:21.600 --> 01:08:24.700
Suddenly, we could start having executable code examples


01:08:24.700 --> 01:08:26.700
in the documentation for Python.


01:08:26.700 --> 01:08:28.700
We've got a runtime now.


01:08:28.700 --> 01:08:31.260
You don't have to worry about security or compute costs


01:08:31.260 --> 01:08:33.580
because you have yourself in it.


01:08:33.580 --> 01:08:35.580
It's your compute.


01:08:35.580 --> 01:08:38.420
Selfishly for me at work, when this works,


01:08:38.420 --> 01:08:41.100
I can start talking about shipping the node version of this


01:08:41.100 --> 01:08:43.900
with the Python extension for VS Code or as its own extension.


01:08:43.900 --> 01:08:47.000
So like you have Python installed, install this other extension


01:08:47.000 --> 01:08:49.200
that's going to come with Python compiled to WebAssembly,


01:08:49.200 --> 01:08:50.440
and you'll just have it.


01:08:50.440 --> 01:08:53.380
Or VS Code.dev browser version.


01:08:53.380 --> 01:08:56.740
We could potentially start shipping that with VS Code.dev


01:08:56.740 --> 01:08:59.080
and have the Python extension pull that in.


01:08:59.080 --> 01:09:01.340
And now you'll even have a runtime in the browser


01:09:01.340 --> 01:09:04.320
that ties into what I think is a nice editor.


01:09:04.320 --> 01:09:06.960
So there's a lot of possibilities here


01:09:06.960 --> 01:09:08.960
that we really hope to get going with.


01:09:08.960 --> 01:09:10.960
And then when you start talking about Wazzy,


01:09:10.960 --> 01:09:12.960
then you start to get to Edge Compute.


01:09:12.960 --> 01:09:14.960
Christian just got that working


01:09:14.960 --> 01:09:16.960
literally, I think, last week.


01:09:16.960 --> 01:09:18.960
I don't know where it stands yet.


01:09:18.960 --> 01:09:20.960
- Working again. So the first version


01:09:20.960 --> 01:09:22.960
was hacking


01:09:22.960 --> 01:09:24.960
and patching lots of things out.


01:09:24.960 --> 01:09:26.960
- Oh, yeah. - And the new version


01:09:26.960 --> 01:09:28.960
a week ago was using


01:09:28.960 --> 01:09:30.960
a library from a


01:09:30.960 --> 01:09:32.960
company that's also working on Python support


01:09:32.960 --> 01:09:34.960
and they have dubs


01:09:34.960 --> 01:09:40.240
and hacks. Single-source labs, right? Single-source labs, yep. So Wazzy is even more


01:09:40.240 --> 01:09:46.520
restricted and limited compared to Wazzy and MScript then. So you don't have any


01:09:46.520 --> 01:09:51.880
support for threading, but you can't compile Python without at least the


01:09:51.880 --> 01:09:57.040
threading library headers and they just had like workarounds for that too. So you


01:09:57.040 --> 01:10:01.680
can't spawn thread. So if you try to start a thread, you just fail.


01:10:01.680 --> 01:10:06.020
but at least you have enough of the C API available to compile Python.


01:10:06.020 --> 01:10:07.020
Right.


01:10:07.020 --> 01:10:08.020
Little bits and pieces.


01:10:08.020 --> 01:10:09.020
Right.


01:10:09.020 --> 01:10:10.900
And that's super exciting.


01:10:10.900 --> 01:10:11.900
Yeah.


01:10:11.900 --> 01:10:15.060
Just to be clear on that, it's not a completely new effort.


01:10:15.060 --> 01:10:21.180
There's actually a productive version of Python for rep assembly in the browser called Pyodite.


01:10:21.180 --> 01:10:22.180
Yeah.


01:10:22.180 --> 01:10:26.220
And which is also now used by JupyterLite.


01:10:26.220 --> 01:10:31.560
So Jupyter Lite is Jupyter Notebooks on top of Pyodite.


01:10:31.560 --> 01:10:35.700
- And that's working really well. - Yeah, Jupyter Lite is looking really interesting.


01:10:35.700 --> 01:10:39.400
Yeah, and we actually met with the Pyodite team,


01:10:39.400 --> 01:10:44.000
and more or less what we came to an agreement,


01:10:44.000 --> 01:10:45.680
seems a little weird to phrase it this way,


01:10:45.680 --> 01:10:49.580
but basically an agreement where we will keep trying to make it


01:10:49.580 --> 01:10:54.020
so that the main branch in CPython can compile cleanly to WebAssembly,


01:10:54.020 --> 01:10:59.620
And that frees them to focus on a JavaScript API to tie into it


01:10:59.620 --> 01:11:04.020
and on getting the scientific stack compiled over to WebAssembly.


01:11:04.020 --> 01:11:07.700
You've got to compile like Matplotlib and stuff because it's got C in it.


01:11:07.700 --> 01:11:08.900
So you've got to compile it over there.


01:11:08.900 --> 01:11:11.460
Or I don't know, some of those like NumPy definitely does.


01:11:11.460 --> 01:11:14.180
Exactly, because traditionally, they had to do all the patches


01:11:14.180 --> 01:11:16.820
and all the work, every Python release to get it working.


01:11:16.820 --> 01:11:19.860
And Christian and I are just in a better position to be able to keep that up and going.


01:11:19.860 --> 01:11:21.940
So we just said, let us handle that part.


01:11:21.940 --> 01:11:23.300
You don't have to worry about patching anymore.


01:11:23.300 --> 01:11:26.740
and you can focus on the stuff that's more unique to WebAssembly


01:11:26.740 --> 01:11:30.040
and what you're able to be good at over there.


01:11:30.040 --> 01:11:32.340
So that's where we're divvying up the workload here,


01:11:32.340 --> 01:11:33.880
is we're just going to keep main working,


01:11:33.880 --> 01:11:35.880
and then they get to stop worrying about that


01:11:35.880 --> 01:11:37.880
once they start worrying about Python 3.11.


01:11:37.880 --> 01:11:41.020
Yeah, so one of the first things that Ethan and I did


01:11:41.020 --> 01:11:46.960
just we took the patches that were developed by PyLite developers


01:11:46.960 --> 01:11:49.760
and adjusted them and made them compatible


01:11:49.760 --> 01:11:52.840
so we can actually merge them and have them in the upstream code.


01:11:52.840 --> 01:11:56.640
So lots of their patches was just replacing things,


01:11:56.640 --> 01:11:58.720
but not in a way that would work


01:11:58.720 --> 01:12:01.720
if you would build the same source code for standard Python.


01:12:01.720 --> 01:12:04.920
So they just hacking around and getting things working,


01:12:04.920 --> 01:12:06.640
which is totally okay for their approach,


01:12:06.640 --> 01:12:09.640
but we couldn't just take their pull requests


01:12:09.640 --> 01:12:10.800
and their-- - Right, they had a much


01:12:10.800 --> 01:12:13.120
narrower-- - So we had to make them


01:12:13.120 --> 01:12:16.160
in a way that would work for standard Python


01:12:16.160 --> 01:12:17.640
and WebAssembly Python.


01:12:17.640 --> 01:12:18.480
- Yeah. - Yeah.


01:12:18.480 --> 01:12:22.280
- Fantastic, well, two things spring to mind for me


01:12:22.280 --> 01:12:23.920
when I hear this one is,


01:12:23.920 --> 01:12:26.640
does this mean I could write electron apps


01:12:26.640 --> 01:12:29.480
and just have the slightest shim


01:12:29.480 --> 01:12:33.720
that then just lets me run like a backend in Python,


01:12:33.720 --> 01:12:37.600
you know, the sort of Node.js side of that in Python,


01:12:37.600 --> 01:12:38.880
which would be awesome.


01:12:38.880 --> 01:12:42.160
- It should because electron chips with Node.


01:12:42.160 --> 01:12:43.000
So as long as you're back to Node runtime.


01:12:43.000 --> 01:12:43.820
- Right, exactly.


01:12:43.820 --> 01:12:44.660
You just get the Node version.


01:12:44.660 --> 01:12:46.000
Yeah, and you just get it on top of there.


01:12:46.000 --> 01:12:48.040
And then instead of writing all your,


01:12:48.040 --> 01:12:50.440
your sort of core logic of your app.


01:12:50.440 --> 01:12:53.080
You'll have to shim out back to JavaScript appropriately


01:12:53.080 --> 01:12:54.680
and have those APIs, which you might want


01:12:54.680 --> 01:12:55.880
Pyrodite for potentially.


01:12:55.880 --> 01:12:59.200
But yeah, basically, yes, that door is open.


01:12:59.200 --> 01:13:00.080
Yeah, that's cool.


01:13:00.080 --> 01:13:02.960
I don't know Electron.js well enough to say,


01:13:02.960 --> 01:13:04.460
oh, I could totally just go do that.


01:13:04.460 --> 01:13:08.720
But I see that as a possibility that would be awesome.


01:13:08.720 --> 01:13:11.160
So what we don't have and probably won't add


01:13:11.160 --> 01:13:14.920
in the near future is any kind of bindings to JavaScript.


01:13:14.920 --> 01:13:18.600
So you can run Python in a web browser


01:13:18.600 --> 01:13:23.200
as like an isolated process or worker,


01:13:23.200 --> 01:13:24.960
but communication back and forth


01:13:24.960 --> 01:13:28.000
between like the outside world in the Node.js


01:13:28.000 --> 01:13:29.600
or router world and Python,


01:13:29.600 --> 01:13:32.800
that's provided by Pyodide, but we don't have that.


01:13:32.800 --> 01:13:33.760
- Right, right, right, right.


01:13:33.760 --> 01:13:36.200
Yeah, it's totally fine. - So there's a very fun


01:13:36.200 --> 01:13:38.240
and great talk by Katie Bell.


01:13:38.240 --> 01:13:42.220
She also helped us to kickstart the port.


01:13:42.220 --> 01:13:47.220
She gave a talk at PyCon AU a couple of months ago.


01:13:47.640 --> 01:13:50.100
It was like 10 minutes introduction,


01:13:50.100 --> 01:13:53.380
two minutes compiling Python to WebAssembly


01:13:53.380 --> 01:13:57.540
and 28 minutes get STD in working.


01:13:57.540 --> 01:14:00.100
So just STD in, STD out working


01:14:00.100 --> 01:14:01.940
took like half an hour of our talk


01:14:01.940 --> 01:14:05.740
because that's surprisingly, surprisingly hard


01:14:05.740 --> 01:14:07.440
with WebAssembly.


01:14:07.440 --> 01:14:10.300
- We kind of made the decision that at least for now


01:14:10.300 --> 01:14:14.900
we are not interested in trying to develop that FFI


01:14:14.900 --> 01:14:16.020
back and forth with JavaScript


01:14:16.020 --> 01:14:18.940
and having that opinionated API.


01:14:18.940 --> 01:14:20.820
And that's, as I said, kind of the agreement


01:14:20.820 --> 01:14:22.140
we've come up with PyData right now


01:14:22.140 --> 01:14:24.340
is they already have an API.


01:14:24.340 --> 01:14:26.580
We're gonna lean on them to provide that for now at least.


01:14:26.580 --> 01:14:28.220
And probably will continuously.


01:14:28.220 --> 01:14:31.300
I don't really necessarily see us changing this.


01:14:31.300 --> 01:14:33.740
And we'll just provide the lower level functionality


01:14:33.740 --> 01:14:35.040
of just the runtime.


01:14:35.040 --> 01:14:36.920
- Right, yeah.


01:14:36.920 --> 01:14:38.020
But if you all build that,


01:14:38.020 --> 01:14:40.360
it's a great foundation for other people to run with.


01:14:40.360 --> 01:14:41.200
- Exactly.


01:14:41.200 --> 01:14:42.900
- Yeah, and then the other one,


01:14:42.900 --> 01:14:45.300
but first of all, is this the talk


01:14:45.300 --> 01:14:46.780
that you're talking about?


01:14:46.780 --> 01:14:47.940
- Yes, that's the one.


01:14:47.940 --> 01:14:51.540
- Okay, I'll put that in the show notes.


01:14:51.540 --> 01:14:52.880
The other one is,


01:14:52.880 --> 01:14:56.780
sorry URL.


01:14:56.780 --> 01:15:03.420
Is this a Blazor project from the C#.net team?


01:15:03.420 --> 01:15:04.260
- Yep.


01:15:04.260 --> 01:15:09.140
- This is .net, the .net runtime


01:15:09.140 --> 01:15:12.220
as a front end framework running in the browser,


01:15:12.220 --> 01:15:13.340
which is pretty awesome.


01:15:13.340 --> 01:15:16.340
And it seems like there's just so many parallels


01:15:16.340 --> 01:15:19.860
that could be brought to the Python world


01:15:19.860 --> 01:15:21.900
that like you don't have to do Angular,


01:15:21.900 --> 01:15:24.660
you can just do PyBlazer.


01:15:24.660 --> 01:15:26.220
I mean, that's not the name.


01:15:26.220 --> 01:15:27.300
You know what I'm saying?


01:15:27.300 --> 01:15:29.740
Like it's closer to possible.


01:15:29.740 --> 01:15:31.820
And I think this is actually something


01:15:31.820 --> 01:15:33.180
that would be really neat.


01:15:33.180 --> 01:15:35.260
- Yes, the trick here,


01:15:35.260 --> 01:15:38.780
and I think Blazer does the same thing right now as well,


01:15:38.780 --> 01:15:39.700
is from my understanding,


01:15:39.700 --> 01:15:43.640
Blazor has a WebAssembly compiled .NET runtime


01:15:43.640 --> 01:15:45.260
that gets loaded into the client.


01:15:45.260 --> 01:15:46.100
- Yeah.


01:15:46.100 --> 01:15:47.380
- And then that's how it does the execution,


01:15:47.380 --> 01:15:50.280
if I understand how Blazor works correctly.


01:15:50.280 --> 01:15:53.540
And so you could do a theoretical same thing with Python.


01:15:53.540 --> 01:15:57.520
Now, obviously there is size issues to consider here, right?


01:15:57.520 --> 01:15:58.980
Like this is not something you necessarily


01:15:58.980 --> 01:16:00.840
on a really slow connection somewhere


01:16:00.840 --> 01:16:02.160
would want to actually pull down,


01:16:02.160 --> 01:16:04.200
'cause I think the runtime,


01:16:04.200 --> 01:16:06.960
is it five megs now, Christian, or is it three?


01:16:08.100 --> 01:16:11.760
So the uncompressed WASM is like six megabytes,


01:16:11.760 --> 01:16:13.640
gets down to like four,


01:16:13.640 --> 01:16:16.240
and then you have the big bundle of the data file


01:16:16.240 --> 01:16:20.220
that contains the Python compiled files.


01:16:20.220 --> 01:16:22.100
It's another five or six MB.


01:16:22.100 --> 01:16:26.480
It's big, but actually it's smaller.


01:16:26.480 --> 01:16:28.720
Okay, three MB.


01:16:28.720 --> 01:16:30.960
Can you scroll up a bit?


01:16:30.960 --> 01:16:34.560
The .data file, it's the standard library.


01:16:34.560 --> 01:16:35.960
- Did I hear all that?


01:16:35.960 --> 01:16:41.560
And then group tab, and it's Python data and Python


01:16:41.560 --> 01:16:42.060
weapon.


01:16:42.060 --> 01:16:44.880
So yeah, so--


01:16:44.880 --> 01:16:52.880
Yeah, so it's 3 megs for the standard library,


01:16:52.880 --> 01:16:55.760
212 kilobytes for the wrapper.


01:16:55.760 --> 01:16:57.680
And you've already cached the Wasm.


01:16:57.680 --> 01:16:58.400
So it's probably--


01:16:58.400 --> 01:16:59.040
Yeah, I got it.


01:16:59.040 --> 01:16:59.960
Like 6 MB.


01:16:59.960 --> 01:17:02.720
So we can probably make it a bit smaller.


01:17:02.720 --> 01:17:07.000
So currently, that comes like with elementary


01:17:07.000 --> 01:17:10.940
and decimal model and all the hashing libraries


01:17:10.940 --> 01:17:12.600
compiled in.


01:17:12.600 --> 01:17:16.300
So we currently create one gigantic binary.


01:17:16.300 --> 01:17:20.080
There are ways to have side models like shared libraries


01:17:20.080 --> 01:17:23.160
with Wasm, it's a bit more complicated to get that right.


01:17:23.160 --> 01:17:27.340
And also it increases the size of the main binary,


01:17:27.340 --> 01:17:28.440
the main model a bit.


01:17:31.000 --> 01:17:33.000
I didn't go into that yet.


01:17:33.000 --> 01:17:36.500
That's something I will look into maybe in the future.


01:17:36.500 --> 01:17:38.500
But as you were talking about earlier, Michael,


01:17:38.500 --> 01:17:41.240
about slicing and dicing the standard library,


01:17:41.240 --> 01:17:44.200
if you're shipping the runtime, you can also shrink that down


01:17:44.200 --> 01:17:47.080
by just dropping all the parts of the standard library you don't need.


01:17:47.080 --> 01:17:49.840
So if you run like module finder or some other script


01:17:49.840 --> 01:17:51.220
that's going to go through the standard library


01:17:51.220 --> 01:17:53.080
to figure out what you do and don't need,


01:17:53.080 --> 01:17:57.360
you could actually just compile your own version of CPython for WebAssembly


01:17:57.360 --> 01:17:59.560
only with the standard library that you want.


01:17:59.560 --> 01:18:01.280
- Interesting, you get it really small, right?


01:18:01.280 --> 01:18:03.800
So which of these three, PythonJS, PythonData,


01:18:03.800 --> 01:18:07.600
and Python.Wasm is the, has c, a val.c in it?


01:18:07.600 --> 01:18:09.120
- Wasm. - The Wasm one.


01:18:09.120 --> 01:18:10.200
Okay, so that's two megs


01:18:10.200 --> 01:18:12.760
and then plus the standard library bits, right?


01:18:12.760 --> 01:18:14.840
- Yeah, so it's a little over five megs


01:18:14.840 --> 01:18:16.400
in total for everything.


01:18:16.400 --> 01:18:17.540
- Yeah. - Which isn't huge,


01:18:17.540 --> 01:18:21.440
like an intranet project that you might need,


01:18:21.440 --> 01:18:23.880
or totally fine for Electron.


01:18:23.880 --> 01:18:26.280
- It would be totally fine for a single page app.


01:18:26.280 --> 01:18:27.720
It'd be fine for Gmail.


01:18:27.720 --> 01:18:28.880
- Yeah, so you're gonna leave up


01:18:28.880 --> 01:18:30.840
- It's been running constantly and not changed, yeah.


01:18:30.840 --> 01:18:33.800
It's within the realm of probably what Facebook's


01:18:33.800 --> 01:18:36.280
already downloading onto your machine right now anyway.


01:18:36.280 --> 01:18:38.280
- Just run an ad blocker, you'll do less.


01:18:38.280 --> 01:18:41.240
(laughing)


01:18:41.240 --> 01:18:42.960
All right, I think we are well over time,


01:18:42.960 --> 01:18:46.280
but you guys, it's always great to talk to you.


01:18:46.280 --> 01:18:50.200
Yeah, good work.


01:18:50.200 --> 01:18:53.620
I dream of PyBlazer happening,


01:18:53.620 --> 01:18:56.800
and I also saw a nice, interesting comment


01:18:56.800 --> 01:18:57.640
that triggered a thought.


01:18:57.640 --> 01:19:00.960
Progressive web apps are not really a thing


01:19:00.960 --> 01:19:02.320
we can do in Python very well,


01:19:02.320 --> 01:19:05.780
because for a progressive web app,


01:19:05.780 --> 01:19:08.760
it's really gotta be all offline in some meaningful way.


01:19:08.760 --> 01:19:13.620
But if you could bring Python.Wasm down,


01:19:13.620 --> 01:19:14.500
maybe use local DB,


01:19:14.500 --> 01:19:16.380
there might be some really interesting ways


01:19:16.380 --> 01:19:19.480
that progressive web apps become way more interesting


01:19:19.480 --> 01:19:22.120
to us as Python web developers.


01:19:22.120 --> 01:19:23.400
- Okay, now I have to confess,


01:19:23.400 --> 01:19:25.460
I have no clue what a progressive web app is.


01:19:25.460 --> 01:19:28.260
I don't know anything about intellectual web development.


01:19:28.260 --> 01:19:31.380
So I got Python working on the browser,


01:19:31.380 --> 01:19:33.060
but I don't know how browsers work.


01:19:33.060 --> 01:19:33.880
- Awesome.


01:19:33.880 --> 01:19:36.140
- I will give one last tease though, Michael.


01:19:36.140 --> 01:19:37.460
I had two motivations for getting


01:19:37.460 --> 01:19:39.420
into this whole WebAssembly thing.


01:19:39.420 --> 01:19:42.500
Browser, mobile.


01:19:42.500 --> 01:19:46.220
'Cause every phone has a WebAssembly runtime,


01:19:46.220 --> 01:19:47.540
thanks to all of them shipping with the browser.


01:19:47.540 --> 01:19:49.260
- Yeah, yeah, yeah, yeah.


01:19:49.260 --> 01:19:51.700
Okay, now I'm also very interested.


01:19:51.700 --> 01:19:53.700
I would rather have a mobile option


01:19:53.700 --> 01:19:56.460
than a offline, than a front-end web option.


01:19:56.460 --> 01:19:58.160
So there we have it.


01:19:58.160 --> 01:20:01.140
Although these may well go together, honestly.


01:20:01.140 --> 01:20:02.340
Yeah, all right.


01:20:02.340 --> 01:20:04.780
Well, thank you both for your hard work on this PEP.


01:20:04.780 --> 01:20:08.100
And then it's super interesting to see how it kind of ties back


01:20:08.100 --> 01:20:11.820
into this more focused runtimes and more places.


01:20:11.820 --> 01:20:12.660
- Yeah.


01:20:12.660 --> 01:20:14.100
- Yeah.


01:20:14.100 --> 01:20:15.360
All right, before you get out of here, really quick,


01:20:15.360 --> 01:20:16.960
last question I'm gonna ask you.


01:20:16.960 --> 01:20:19.100
I'll just keep to one,


01:20:19.100 --> 01:20:21.620
since I kind of know the answers for the other,


01:20:21.620 --> 01:20:22.460
I'm pretty sure.


01:20:22.460 --> 01:20:25.260
Anyway, notable PyPI package you want to give a shout out to


01:20:25.260 --> 01:20:27.060
before we dip.


01:20:27.060 --> 01:20:29.060
- Oh man.


01:20:29.060 --> 01:20:33.540
- There's one that runs WebAssembly,


01:20:33.540 --> 01:20:35.580
like something you can have like Python


01:20:35.580 --> 01:20:38.500
that'll basically interoperate with any WebAssembly one.


01:20:38.500 --> 01:20:40.660
I can't remember quite what that was called though.


01:20:40.660 --> 01:20:43.580
- I think WasmTime has one.


01:20:43.580 --> 01:20:45.020
- Yeah, okay.


01:20:45.020 --> 01:20:46.540
- There's a couple.


01:20:46.540 --> 01:20:48.740
There's a couple of people who've posted stuff to PyPI


01:20:48.740 --> 01:20:51.300
that you load WebAssembly code and actually run them.


01:20:51.300 --> 01:20:53.700
And I think Wasm Time might be one of them.


01:20:53.700 --> 01:20:58.620
Wasm Time is a WebAssembly runtime run by the Bytecode


01:20:58.620 --> 01:21:01.740
Alliance, and it's usually the most cutting edge of all of


01:21:01.740 --> 01:21:02.240
them.


01:21:02.240 --> 01:21:04.580
So if anyone wants to play with this and looking for a runtime,


01:21:04.580 --> 01:21:06.140
Wasm Time is probably a good one.


01:21:06.140 --> 01:21:07.500
But yeah, it looks like they also have a--


01:21:07.500 --> 01:21:08.820
>>I thought they had a Wasm Time.


01:21:08.820 --> 01:21:11.980
>>We have the Python plugin, yeah.


01:21:11.980 --> 01:21:14.540
>>And you can ask Christian what his favorite editor is.


01:21:14.540 --> 01:21:15.700
>>Yeah.


01:21:15.700 --> 01:21:19.460
>>The right one, the good one.


01:21:19.460 --> 01:21:20.140
>>Yeah, go ahead.


01:21:20.140 --> 01:21:20.980
- I use a couple.


01:21:20.980 --> 01:21:24.180
To,


01:21:24.180 --> 01:21:29.420
I use a bunch of them, I use VS Code to use them.


01:21:29.420 --> 01:21:31.140
So depending on my needs.


01:21:31.140 --> 01:21:32.700
- Yeah, you've got a whole survey,


01:21:32.700 --> 01:21:34.940
the whole spectrum there, that's awesome.


01:21:34.940 --> 01:21:36.580
Cool, and then a notable package


01:21:36.580 --> 01:21:39.380
you wanna give a quick shout out to before we get here?


01:21:39.380 --> 01:21:43.620
- It's already late, I don't know.


01:21:43.620 --> 01:21:45.220
The Python Standard Library.


01:21:47.420 --> 01:21:50.940
The lack of certain things in the standard library,


01:21:50.940 --> 01:21:53.180
it's like an anti-module.


01:21:53.180 --> 01:21:55.900
The fact that you guys are taking them out, right?


01:21:55.900 --> 01:21:58.020
- Oh, the anti-gravity model is also fun.


01:21:58.020 --> 01:21:58.860
- Oh yeah, sure, all right.


01:21:58.860 --> 01:22:00.860
Anti-gravity, pip install, anti-gravity.


01:22:00.860 --> 01:22:01.980
Now--


01:22:01.980 --> 01:22:03.220
- Maybe it's in the standard library.


01:22:03.220 --> 01:22:06.660
- I'm gonna give you all up here on the WebAssembly one.


01:22:06.660 --> 01:22:09.500
- That would not work.


01:22:09.500 --> 01:22:10.340
(laughs)


01:22:10.340 --> 01:22:12.300
- Let's go, no module anti-gravity.


01:22:12.300 --> 01:22:13.740
- Because that requires the browser model,


01:22:13.740 --> 01:22:16.540
which requires the subprocess.


01:22:16.540 --> 01:22:17.900
So you can't run any processes.


01:22:17.900 --> 01:22:18.780
So it's--


01:22:18.780 --> 01:22:20.260
>>I know, I'm just teasing.


01:22:20.260 --> 01:22:23.220
I tried to-- for people to see, I tried to import anti-gravity


01:22:23.220 --> 01:22:25.100
inside the WASM REPL.


01:22:25.100 --> 01:22:26.540
It didn't do it.


01:22:26.540 --> 01:22:27.260
>>Not yet.


01:22:27.260 --> 01:22:28.020
>>Not yet, not yet.


01:22:28.020 --> 01:22:28.820
>>I wonder if Pyre.


01:22:28.820 --> 01:22:30.140
Do I can do it?


01:22:30.140 --> 01:22:30.780
>>I don't know.


01:22:30.780 --> 01:22:31.380
Maybe.


01:22:31.380 --> 01:22:32.060
Maybe you can.


01:22:32.060 --> 01:22:32.660
Should.


01:22:32.660 --> 01:22:33.540
They all should.


01:22:33.540 --> 01:22:34.340
All right, you guys.


01:22:34.340 --> 01:22:36.460
Thank you so much for being here.


01:22:36.460 --> 01:22:38.900
I'm excited to see this progressing.


01:22:38.900 --> 01:22:41.300
I see it leading to good places.


01:22:41.300 --> 01:22:42.620
>>Thanks for having us, Michael.


01:22:42.620 --> 01:22:43.340
>>Yep.


01:22:43.340 --> 01:22:44.380
You bet.


01:22:44.380 --> 01:22:45.460
Bye.


01:22:45.460 --> 01:22:46.140
>>Bye-bye.


01:22:46.140 --> 01:22:46.980
See ya.


01:22:46.980 --> 01:22:56.980
[BLANK_AUDIO]

