WEBVTT

00:00:00.920 --> 00:00:03.740
>> Hey Internet, hey everyone.


00:00:03.740 --> 00:00:07.180
>> Hi, Michael, how are you?


00:00:07.180 --> 00:00:09.660
>> Hey, it's so good to have you here.


00:00:09.660 --> 00:00:12.040
Thank you everyone watching live on YouTube.


00:00:12.040 --> 00:00:16.300
If you got comments, thoughts, feedback, please put it into the live comments.


00:00:16.300 --> 00:00:17.760
We'll try to make it part of the show.


00:00:17.760 --> 00:00:19.960
And with that, let's kick off the podcast.


00:00:19.960 --> 00:00:26.800
Brett, Jay, Tanya, Emily, Paul, and Gina welcome all of you to Talk by Theta Mi.


00:00:26.800 --> 00:00:28.320
>> Thanks, Michael.


00:00:28.320 --> 00:00:29.400
- Hey everyone.


00:00:29.400 --> 00:00:30.360
- Hey.


00:00:30.360 --> 00:00:31.200
- Hello.


00:00:31.200 --> 00:00:32.160
- Hey.


00:00:32.160 --> 00:00:33.480
It's really great to have you here.


00:00:33.480 --> 00:00:38.240
I'm super excited to have a conversation


00:00:38.240 --> 00:00:42.040
around the whole community of Python survey results.


00:00:42.040 --> 00:00:44.320
You know, thank you to the PSF and JetBrains


00:00:44.320 --> 00:00:45.520
for putting the survey together.


00:00:45.520 --> 00:00:47.240
Thank you all for being here.


00:00:47.240 --> 00:00:49.120
And I wanna invite a bunch of you


00:00:49.120 --> 00:00:51.560
so that we could have a bunch of different perspectives


00:00:51.560 --> 00:00:53.840
and thoughts and ideas on where we are.


00:00:53.840 --> 00:00:56.080
So that's gonna be so much fun,


00:00:56.080 --> 00:00:59.500
But let's do a quick round of introductions.


00:00:59.500 --> 00:01:02.680
Brett, open source contributor extraordinaire.


00:01:02.680 --> 00:01:06.920
- So my name is Brett Cannon.


00:01:06.920 --> 00:01:10.540
I'm in charge of the Python experience for VS Code.


00:01:10.540 --> 00:01:14.180
I'm also a core developer for 19 years now,


00:01:14.180 --> 00:01:16.500
a member of the Python steering council since its founding.


00:01:16.500 --> 00:01:19.900
And I'm calling from Vancouver on the unceded territory


00:01:19.900 --> 00:01:22.980
of the Squamish Musqueam and Tsleil-Waututh First Nations.


00:01:22.980 --> 00:01:25.900
- All right, great to have you here.


00:01:25.900 --> 00:01:28.240
Thanks for all the Python things you've done.


00:01:28.240 --> 00:01:29.080
Jay.


00:01:29.080 --> 00:01:33.360
- Yeah, I'm Jay Miller.


00:01:33.360 --> 00:01:35.480
I'm a senior cloud advocate at Microsoft.


00:01:35.480 --> 00:01:40.000
I work with our Python advocates and yeah,


00:01:40.000 --> 00:01:43.580
it's my job to keep Brett looking so amazing.


00:01:43.580 --> 00:01:48.440
At least talk about the amazing stuff he's done.


00:01:48.440 --> 00:01:50.440
- That's right, spread the word.


00:01:50.440 --> 00:01:52.560
Tanya.


00:01:52.560 --> 00:01:54.240
- Hey everyone, my name is Tanya.


00:01:54.240 --> 00:01:57.880
I'm currently a Python developer advocate at DeepGram


00:01:57.880 --> 00:02:01.040
while we were an AI speech to text company.


00:02:01.040 --> 00:02:04.380
So before I got into Python, I was a professional athlete.


00:02:04.380 --> 00:02:06.400
So I'm like a pro athlete, turned,


00:02:06.400 --> 00:02:07.680
worked in sales for a little bit


00:02:07.680 --> 00:02:08.900
and then got into tech after.


00:02:08.900 --> 00:02:10.120
But thanks for having me today.


00:02:10.120 --> 00:02:11.440
It's good to be here.


00:02:11.440 --> 00:02:12.280
- It's great to have you.


00:02:12.280 --> 00:02:13.880
And I love your story 'cause it shows


00:02:13.880 --> 00:02:17.400
you don't have to just grow up doing code from a young age


00:02:17.400 --> 00:02:18.280
to be really great at this


00:02:18.280 --> 00:02:20.580
and how fun it must've been to be a pro athlete.


00:02:20.580 --> 00:02:21.420
So cool.


00:02:21.420 --> 00:02:22.720
- Thank you.


00:02:22.720 --> 00:02:23.560
- Yeah.


00:02:23.560 --> 00:02:25.960
Emily, great to have you here.


00:02:25.960 --> 00:02:26.880
- Yeah, absolutely.


00:02:26.880 --> 00:02:27.720
Hi, I'm Emily.


00:02:27.720 --> 00:02:29.840
I am the Director of Engineering


00:02:29.840 --> 00:02:32.880
at a software consultancy called CuddleSoft.


00:02:32.880 --> 00:02:35.160
I'm also a CPython core developer


00:02:35.160 --> 00:02:39.540
and the recovering PyCon US Chair from the last three years.


00:02:39.540 --> 00:02:42.380
- Yeah, great work.


00:02:42.380 --> 00:02:43.840
It sounded like people I talked to


00:02:43.840 --> 00:02:47.160
had a wonderful time there, so good job on PyCon.


00:02:47.160 --> 00:02:50.320
Paul, nice to have you back.


00:02:50.320 --> 00:02:51.360
- Hi, everybody.


00:02:51.360 --> 00:02:53.320
I'm Paul Everett, a developer advocate


00:02:53.320 --> 00:03:03.320
JetBrains, a teller of semi-true stories of Python history, and really happy to be with the six of


00:03:03.320 --> 00:03:09.640
you. This is a cool panel. >> Yeah, I'm happy to have you here. It is a cool panel. Gina, you were


00:03:09.640 --> 00:03:15.320
not too long ago on Python Bytes, as was Tanya as well, but it's great to have you over here on


00:03:15.320 --> 00:03:21.000
Talk Python. >> Yeah, thank you for having me. Yeah, so my name is Gina Hueske. I'm the creator


00:03:21.000 --> 00:03:23.360
and maintainer of something called Octoprint,


00:03:23.360 --> 00:03:25.920
which is the snappy web interface for user 3D printer


00:03:25.920 --> 00:03:27.960
and which is written in Python,


00:03:27.960 --> 00:03:29.040
which is why I'm here, I guess.


00:03:29.040 --> 00:03:29.940
So, hi.


00:03:29.940 --> 00:03:32.240
- Hi.


00:03:32.240 --> 00:03:34.520
And people who are not watching,


00:03:34.520 --> 00:03:37.080
I think you've got just the coolest office setup.


00:03:37.080 --> 00:03:39.360
You've got your laser cutter and 3D printer


00:03:39.360 --> 00:03:42.200
and stuff that you've created with your makerspace


00:03:42.200 --> 00:03:45.120
to set up a really nice camera AV setup.


00:03:45.120 --> 00:03:46.800
So it's fantastic.


00:03:46.800 --> 00:03:48.680
- And a three-headed monkey.


00:03:48.680 --> 00:03:50.640
- And a three-headed monkey, of course.


00:03:50.640 --> 00:03:51.480
Right behind me.


00:03:51.480 --> 00:03:52.760
(laughing)


00:03:52.760 --> 00:03:53.600
- I love it.


00:03:53.600 --> 00:03:55.840
All right, well,


00:03:55.840 --> 00:03:59.880
Paul, do you wanna maybe say a few things


00:03:59.880 --> 00:04:04.600
about the relationship of the PSF and JetBrains


00:04:04.600 --> 00:04:06.600
and sort of a little bit of background on the survey


00:04:06.600 --> 00:04:09.040
to just maybe introduce it first real quick


00:04:09.040 --> 00:04:11.200
since JetBrains was part of it.


00:04:11.200 --> 00:04:13.060
If I go and look at the results here,


00:04:13.060 --> 00:04:17.240
when we get to them, it's at jetbrains.com,


00:04:17.240 --> 00:04:20.200
but it's not really a JetBrains survey, is it?


00:04:20.200 --> 00:04:21.940
- No, not at all.


00:04:21.940 --> 00:04:24.780
It's interesting when I was doing the prep for this,


00:04:24.780 --> 00:04:27.380
I was like, how far back does this go?


00:04:27.380 --> 00:04:30.340
Damn, this thing goes back to 2016.


00:04:30.340 --> 00:04:31.660
Wow.


00:04:31.660 --> 00:04:34.500
Which is interesting to see some changes over time.


00:04:34.500 --> 00:04:38.580
But this was kind of a brainchild back then


00:04:38.580 --> 00:04:41.700
of we got a need, Python has a need, let's do it together.


00:04:41.700 --> 00:04:45.020
But then it kind of turned into PSF steering the ship


00:04:45.020 --> 00:04:47.740
and JetBrains just doing what it was told


00:04:47.740 --> 00:04:50.980
for conducting the survey, doing a little bit


00:04:50.980 --> 00:04:55.020
of throwing smart brains at it from our research folks


00:04:55.020 --> 00:04:58.380
to do statistical validity, trying to add new questions


00:04:58.380 --> 00:05:01.020
but preserve old ones so that we could see trends over time.


00:05:01.020 --> 00:05:04.840
So this is now the PSF survey.


00:05:04.840 --> 00:05:07.020
And I think that's a great resource


00:05:07.020 --> 00:05:09.540
'cause we all have these questions, right?


00:05:09.540 --> 00:05:11.060
- Yeah, yeah, we absolutely do.


00:05:11.060 --> 00:05:13.900
And one of the things I remember when I was reading


00:05:13.900 --> 00:05:17.720
about it is it wasn't conducted on the JetBrains site.


00:05:17.720 --> 00:05:19.760
This was on python.org, right?


00:05:19.760 --> 00:05:25.120
- Yeah, it's hard because it can feel like,


00:05:25.120 --> 00:05:27.220
well, it becomes a selection bias


00:05:27.220 --> 00:05:28.920
because it's affiliated with JetBrains.


00:05:28.920 --> 00:05:31.200
And so over the years, we've really tried to turn this


00:05:31.200 --> 00:05:33.620
into kind of a contribution to the community


00:05:33.620 --> 00:05:38.000
and let the PSF kind of dictate what it wants to see


00:05:38.000 --> 00:05:40.440
and how things should be organized and conducted.


00:05:40.440 --> 00:05:42.260
- Yeah, yeah.


00:05:42.260 --> 00:05:44.220
Brett or Emily, anything you wanna add to that


00:05:44.220 --> 00:05:46.320
since you're a little bit on the inside?


00:05:47.680 --> 00:05:49.840
- No, I mean, Paul nailed it on the head.


00:05:49.840 --> 00:05:52.860
It's a great partnership between the PSF and JetBrains.


00:05:52.860 --> 00:05:55.400
Like, as I said, it's mainly questions coming


00:05:55.400 --> 00:05:57.080
from the PSF and the JetBrains.


00:05:57.080 --> 00:06:00.180
Folk happen to help do it, make the spiffy website


00:06:00.180 --> 00:06:03.480
with the awesome cookie policy pop up in the corner.


00:06:03.480 --> 00:06:05.520
I still think you all have the best one in the industry.


00:06:05.520 --> 00:06:06.760
- Yes, you could type in it.


00:06:06.760 --> 00:06:08.000
It's a console, right?


00:06:08.000 --> 00:06:09.600
- Yeah, that's pretty cool.


00:06:09.600 --> 00:06:11.800
But yeah, like we can talk about it later,


00:06:11.800 --> 00:06:13.840
but like the development residents questions, for instance,


00:06:13.840 --> 00:06:15.340
all came straight from Lukasz.


00:06:15.340 --> 00:06:17.300
and they specifically asked Lukasz


00:06:17.300 --> 00:06:18.620
to come up with those and such.


00:06:18.620 --> 00:06:20.640
So it's great collaboration.


00:06:20.640 --> 00:06:22.820
- Yeah, absolutely.


00:06:22.820 --> 00:06:25.700
Cool.


00:06:25.700 --> 00:06:28.820
All right, I'm gonna pull this up here


00:06:28.820 --> 00:06:31.880
and for folks who want to check it out,


00:06:31.880 --> 00:06:34.180
obviously there's not gonna be probably


00:06:34.180 --> 00:06:35.540
that many links in the show notes,


00:06:35.540 --> 00:06:38.140
but there's the one, the one important one,


00:06:38.140 --> 00:06:43.020
which is the Python developer survey 2021 results.


00:06:43.020 --> 00:06:45.840
So one thing to keep in mind as we talk about this


00:06:45.840 --> 00:06:50.380
is it's a bit of a historical look a little bit.


00:06:50.380 --> 00:06:54.580
So this was conducted in the fall of 2021


00:06:54.580 --> 00:06:56.660
and here we are in the summer of 2022.


00:06:56.660 --> 00:06:58.820
So, you know, for example,


00:06:58.820 --> 00:07:00.900
there's questions about Python 3.10, right?


00:07:00.900 --> 00:07:03.740
I'm sure the adoption is higher of that now than it was.


00:07:03.740 --> 00:07:04.860
What is that?


00:07:04.860 --> 00:07:06.660
Eight months, seven months ago, something like that.


00:07:06.660 --> 00:07:08.860
So keep that in mind.


00:07:08.860 --> 00:07:09.700
And


00:07:09.700 --> 00:07:15.380
So yeah, what do we want to say?


00:07:15.380 --> 00:07:17.980
It actually links back to the previous results as well,


00:07:17.980 --> 00:07:18.900
which is really good.


00:07:18.900 --> 00:07:20.660
It went through a bunch of different areas.


00:07:20.660 --> 00:07:22.020
And so I think the first--


00:07:22.020 --> 00:07:23.780
we're just going to go through it in order


00:07:23.780 --> 00:07:27.740
and maybe skip some that are not maybe too detailed or something.


00:07:27.740 --> 00:07:33.060
But the first one is, are you a Python developer?


00:07:33.060 --> 00:07:38.540
Or are you a developer that also happens to use Python?


00:07:38.540 --> 00:07:42.220
And for the people who took the survey,


00:07:42.220 --> 00:07:44.180
granted they are going to python.org to see this


00:07:44.180 --> 00:07:46.960
or they were encouraged on Twitter from Python people


00:07:46.960 --> 00:07:48.940
to go take the survey.


00:07:48.940 --> 00:07:52.100
And it's 84% of the people are using Python


00:07:52.100 --> 00:07:54.220
as their main language.


00:07:54.220 --> 00:07:57.020
I personally think that's pretty high.


00:07:57.020 --> 00:08:01.540
I think that's a pretty positive number here.


00:08:01.540 --> 00:08:02.620
What do you all think?


00:08:02.620 --> 00:08:06.660
- I'd be curious what the bias is.


00:08:06.660 --> 00:08:07.660
Like I wonder what would happen


00:08:07.660 --> 00:08:09.660
if this made it in front of Hacker News


00:08:09.660 --> 00:08:11.580
and what this number would then be.


00:08:11.580 --> 00:08:15.140
'Cause for instance, I know plenty of people


00:08:15.140 --> 00:08:17.740
who complain at me at work about,


00:08:17.740 --> 00:08:19.300
why is this Python stuff kicking up?


00:08:19.300 --> 00:08:21.700
I only use this script every two months kind of thing.


00:08:21.700 --> 00:08:24.740
So I know lots of ancillary uses of Python


00:08:24.740 --> 00:08:26.940
all over the world.


00:08:26.940 --> 00:08:28.500
So I'd be really curious.


00:08:28.500 --> 00:08:31.060
Obviously this does not really represent the world itself.


00:08:31.060 --> 00:08:34.060
So I think it just at least helps set a guideline


00:08:34.060 --> 00:08:35.620
as it is, as it were,


00:08:35.620 --> 00:08:39.060
as to how to view these results more than an actual number


00:08:39.060 --> 00:08:42.060
we can rely on for the overall computing world.


00:08:42.060 --> 00:08:44.860
- Yeah, I think it's interesting


00:08:44.860 --> 00:08:46.500
because if I remember correctly,


00:08:46.500 --> 00:08:49.420
this question was sort of a self selection


00:08:49.420 --> 00:08:52.000
of how you identify.


00:08:52.000 --> 00:08:55.560
So I definitely say like, yeah, I am a Python developer,


00:08:55.560 --> 00:08:58.540
but if I am realistic about the actual code


00:08:58.540 --> 00:09:00.240
that I'm writing on a daily basis,


00:09:00.240 --> 00:09:04.540
I'm definitely not like primarily writing Python.


00:09:04.540 --> 00:09:07.100
So I think that this really sort of frames


00:09:07.100 --> 00:09:10.140
the perspective of the person filling out the survey


00:09:10.140 --> 00:09:14.820
to say like, yes, Python is my main language of choice


00:09:14.820 --> 00:09:16.100
in whatever way that might be,


00:09:16.100 --> 00:09:17.540
but it might not actually be the thing


00:09:17.540 --> 00:09:19.460
that they're writing the most code for.


00:09:19.460 --> 00:09:21.260
- Sure.


00:09:21.260 --> 00:09:26.100
I'd like to hear your thoughts of this from everyone,


00:09:26.100 --> 00:09:28.440
but my view of the Python world


00:09:28.440 --> 00:09:32.800
is it basically breaks into three pieces.


00:09:32.800 --> 00:09:36.280
We've got the web developer, web API sort of folks.


00:09:36.280 --> 00:09:40.000
We've got the data scientists


00:09:40.000 --> 00:09:44.700
and we have this massive other, you know, scientists,


00:09:44.700 --> 00:09:48.500
economists, you know, maker folks,


00:09:48.500 --> 00:09:50.000
programming little devices.


00:09:50.000 --> 00:09:53.540
And it seems to me that the first two,


00:09:53.540 --> 00:09:55.660
the web and the data science


00:09:55.660 --> 00:09:58.900
would probably really be the main, right?


00:09:58.900 --> 00:10:01.460
They would just live in Python, but that other group,


00:10:01.460 --> 00:10:04.500
they might drop into Python to just,


00:10:04.500 --> 00:10:06.200
oh, I heard there's this library


00:10:06.200 --> 00:10:07.620
and it'll give me this picture that I need,


00:10:07.620 --> 00:10:09.180
and then go back to whatever they were doing,


00:10:09.180 --> 00:10:10.180
something like that.


00:10:10.180 --> 00:10:14.140
And Tanya, what do you think?


00:10:14.140 --> 00:10:15.260
Sorry, Brad, didn't mean to cut you off.


00:10:15.260 --> 00:10:17.140
- Yeah, yeah, I guess too,


00:10:17.140 --> 00:10:20.060
like I was, that actually made me think about like,


00:10:20.060 --> 00:10:22.880
like when you were collecting the survey results


00:10:22.880 --> 00:10:25.740
for this one, like what levels,


00:10:25.740 --> 00:10:27.500
like did you ask like what level they were at?


00:10:27.500 --> 00:10:29.940
Like, were they more junior, senior, mid-level?


00:10:31.060 --> 00:10:34.060
I feel like maybe someone maybe just starting out in Python,


00:10:34.060 --> 00:10:36.580
you know, maybe that's like their own,


00:10:36.580 --> 00:10:38.700
like their main language that they're using


00:10:38.700 --> 00:10:41.700
versus someone who's more senior or more experienced.


00:10:41.700 --> 00:10:42.900
Maybe they were using, you know,


00:10:42.900 --> 00:10:44.420
secondary languages as well.


00:10:44.420 --> 00:10:46.440
- Yeah.


00:10:46.440 --> 00:10:50.060
That's a very good observation.


00:10:50.060 --> 00:10:54.060
There's a section on the, how junior or senior people are,


00:10:54.060 --> 00:10:56.200
which I think is pretty interesting.


00:10:56.200 --> 00:10:59.180
Jay, you're, you've been doing some of the


00:11:00.800 --> 00:11:03.720
developer relationship stuff, you probably got to think about this sort of breakdown


00:11:03.720 --> 00:11:04.720
a lot.


00:11:04.720 --> 00:11:06.720
What are your thoughts?


00:11:06.720 --> 00:11:07.720
I do.


00:11:07.720 --> 00:11:13.040
And my history comes from being a tinker/automator.


00:11:13.040 --> 00:11:22.240
So often I had to use whatever tools I was told to use and find ways to inject Python


00:11:22.240 --> 00:11:23.860
into it.


00:11:23.860 --> 00:11:29.640
So what I'm glad to see is now, I mean, I think that's the case for most people.


00:11:29.640 --> 00:11:35.640
Like you said, that is that bubble that the Python community is vastly growing in of people


00:11:35.640 --> 00:11:42.200
who are, "I'm using Python to do this thing in my job that isn't as a developer."


00:11:42.200 --> 00:11:47.920
And it's nice to see that I think more and more use cases of Python are becoming available


00:11:47.920 --> 00:11:53.140
so that I don't have to go reach for whatever the parent language is in my project.


00:11:53.140 --> 00:11:57.640
I can go and just use Python for most things.


00:11:57.640 --> 00:11:59.740
I think that while a part of this is,


00:11:59.740 --> 00:12:02.440
we're looking at this dataset as people who love Python,


00:12:02.440 --> 00:12:03.980
wanting to come in and talk about Python


00:12:03.980 --> 00:12:06.280
and share their thoughts and feelings about it.


00:12:06.280 --> 00:12:10.720
But I also recognize that had you asked me


00:12:10.720 --> 00:12:12.940
this very question three years ago,


00:12:12.940 --> 00:12:15.200
I would have had to given a different answer.


00:12:15.200 --> 00:12:19.460
Yeah, I think that it's great that that number can go up


00:12:19.460 --> 00:12:24.540
because of the growth of Python from a technical standpoint.


00:12:24.820 --> 00:12:31.260
Yeah, great point. Gina? Yeah, that pretty much mirrors what I was about to say


00:12:31.260 --> 00:12:36.100
because when I started with Python, when I got the first time into touch with it,


00:12:36.100 --> 00:12:44.100
that must have been sometime around 2007, 2008-ish. So a really long time ago when I


00:12:44.100 --> 00:12:47.940
actually was still a system administrator at university in the


00:12:47.940 --> 00:12:53.540
computer science department and I used Python to automate some stuff like


00:12:53.540 --> 00:12:57.260
maintenance things and bookkeeping and whatnot.


00:12:57.260 --> 00:13:00.880
So I distinctly remember writing a label tool


00:13:00.880 --> 00:13:02.580
for the backup drives.


00:13:02.580 --> 00:13:05.820
And back then, if you had asked me this question,


00:13:05.820 --> 00:13:07.940
I would certainly not have said I'm a Python programmer.


00:13:07.940 --> 00:13:09.680
And I'm not even sure I would have said


00:13:09.680 --> 00:13:11.540
that Python is my secondary language


00:13:11.540 --> 00:13:14.420
because it would probably rather have been my tertiary


00:13:14.420 --> 00:13:17.700
or whatever the word is for fourth or fifth.


00:13:17.700 --> 00:13:18.920
(laughing)


00:13:18.920 --> 00:13:21.820
And even 10 years ago,


00:13:21.820 --> 00:13:25.100
I would still have identified as a Java developer


00:13:25.100 --> 00:13:27.540
with maybe a bit of background in Python


00:13:27.540 --> 00:13:31.140
and a lot of JavaScript, HTML, CSS and Bash stuff thrown in.


00:13:31.140 --> 00:13:35.460
But these days, yeah, I've also moved to someone


00:13:35.460 --> 00:13:37.180
who would call themselves a Python developer.


00:13:37.180 --> 00:13:39.020
And I kind of find it funny that apparently


00:13:39.020 --> 00:13:41.020
many more people have made the same transition


00:13:41.020 --> 00:13:41.860
over the years.


00:13:41.860 --> 00:13:43.800
And that is kind of amazing to see.


00:13:43.800 --> 00:13:47.420
- Yeah, there's definitely a large influx


00:13:47.420 --> 00:13:49.220
of people moving in.


00:13:49.220 --> 00:13:52.340
So related to that, you said you had done Java


00:13:52.340 --> 00:13:55.780
and actually right now I'm working on Dart.


00:13:55.780 --> 00:13:59.660
I'm trying to maybe do some Flutter mobile app stuff


00:13:59.660 --> 00:14:01.740
to augment our courses and whatnot.


00:14:01.740 --> 00:14:04.100
And there's, you know, it's,


00:14:04.100 --> 00:14:06.060
Tanya had a great point where she said,


00:14:06.060 --> 00:14:08.540
you know, the more junior you are,


00:14:08.540 --> 00:14:11.080
you might just be learning one language now,


00:14:11.080 --> 00:14:12.300
but then as you grow, you're like,


00:14:12.300 --> 00:14:15.260
well, I really need to learn this other language


00:14:15.260 --> 00:14:16.460
to do this thing.


00:14:16.460 --> 00:14:18.340
So the next question was,


00:14:18.340 --> 00:14:23.340
Well, what are you using in addition to your Python code,


00:14:23.340 --> 00:14:25.460
regardless of whether it's your primary or second,


00:14:25.460 --> 00:14:29.740
are you doing JavaScript, doing HTML,


00:14:29.740 --> 00:14:33.060
are you doing C# or Rust or Go?


00:14:33.060 --> 00:14:34.960
And I think these questions are,


00:14:34.960 --> 00:14:39.180
they're always really hard to pick because for example,


00:14:39.180 --> 00:14:42.760
HTML and CSS, that seemed like a valid question,


00:14:42.760 --> 00:14:43.820
but on the other hand,


00:14:43.820 --> 00:14:47.500
it's not really a standalone programming language.


00:14:47.500 --> 00:14:49.900
Like no one would introduce themselves like,


00:14:49.900 --> 00:14:52.060
hey, I'm Michael, I'm a CSS developer,


00:14:52.060 --> 00:14:53.200
full stack by the way.


00:14:53.200 --> 00:14:58.040
So should it really be a thing that pairs with that or not?


00:14:58.040 --> 00:14:59.940
It's a tricky for me to decide,


00:14:59.940 --> 00:15:03.420
but for that question,


00:15:03.420 --> 00:15:07.580
the most paired up language is JavaScript


00:15:07.580 --> 00:15:09.420
and then HTML and CSS.


00:15:09.420 --> 00:15:12.700
And then we've got, sort of to Gina's point,


00:15:12.700 --> 00:15:17.180
Bash or Shell scripting and SQL.


00:15:17.180 --> 00:15:18.860
But I guess if you look at programming languages,


00:15:18.860 --> 00:15:21.420
we probably have JavaScript and then C++


00:15:21.420 --> 00:15:23.220
and then Java and then C#.


00:15:23.220 --> 00:15:29.780
Yeah, this is pretty interesting what people pair it with.


00:15:29.780 --> 00:15:30.940
I think you gotta,


00:15:30.940 --> 00:15:33.860
I talked about the third of sort of web developer side


00:15:33.860 --> 00:15:38.860
that clearly is the 40, 30% of JavaScript and HTML.


00:15:38.860 --> 00:15:41.580
And then I think it gets pretty interesting.


00:15:41.580 --> 00:15:43.580
What stands out to everyone here?


00:15:45.660 --> 00:15:47.780
- I think this kind of suggests it might be a third cohort


00:15:47.780 --> 00:15:49.700
after the web and data science of,


00:15:49.700 --> 00:15:53.500
and it's kind of was suggested by like,


00:15:53.500 --> 00:15:56.940
I think Gina and Jay earlier of automation, right?


00:15:56.940 --> 00:15:59.820
Where I think the folks who work with like Ansible


00:15:59.820 --> 00:16:04.820
and Chef and Salt and use Python to basically do the DevOps,


00:16:04.820 --> 00:16:08.980
IT admin things, probably are a third cohort


00:16:08.980 --> 00:16:11.060
and may not quite view themselves as Python developers,


00:16:11.060 --> 00:16:12.820
even though they are, right?


00:16:12.820 --> 00:16:14.640
And I think this kind of plays into that


00:16:14.640 --> 00:16:16.980
with the whole JavaScript, HTML, CSS covering that web group


00:16:16.980 --> 00:16:21.500
and then patch shell covering that cohort


00:16:21.500 --> 00:16:23.920
and then SQL kind of cross cuts across web and data science.


00:16:23.920 --> 00:16:26.100
So I think it kind of is interesting.


00:16:26.100 --> 00:16:29.180
I also personally hope the C++ group drops


00:16:29.180 --> 00:16:31.780
'cause people write more Python and less C and C++


00:16:31.780 --> 00:16:34.260
with all the performance coming in Python 3.11


00:16:34.260 --> 00:16:36.940
in the future, but that's just a personal wish.


00:16:36.940 --> 00:16:42.260
- Yeah, Paul, you're pumping your fist there


00:16:42.260 --> 00:16:45.860
some C++ being overtaken by more Python.


00:16:45.860 --> 00:16:53.060
I will start by giving the first of 20 consecutive compliments to Brett,


00:16:53.060 --> 00:16:58.860
who is reviewing WebAssembly pull requests,


00:16:58.860 --> 00:17:02.660
probably as we speak, he's got two or three other Bretts back in the back


00:17:02.660 --> 00:17:05.560
that are doing the pull request reviews.


00:17:05.560 --> 00:17:08.160
But as WebAssembly becomes a thing,


00:17:08.160 --> 00:17:12.960
then maybe Brett's mission to demolish C# will take effect.


00:17:12.960 --> 00:17:16.660
I'll take exception to the HTML ain't a language.


00:17:16.660 --> 00:17:19.360
The L language. Come on.


00:17:19.360 --> 00:17:21.220
Give it some love.


00:17:21.220 --> 00:17:23.360
And Stack Overflow says it's the number one language.


00:17:23.360 --> 00:17:27.160
So maybe the only thing I'll add that was interesting to me on this


00:17:27.160 --> 00:17:30.720
is seeing the change since 2016, because this is a question


00:17:30.720 --> 00:17:32.560
that's been asked every time.


00:17:32.560 --> 00:17:35.820
Fairly stable wording on it hasn't changed that much.


00:17:36.520 --> 00:17:38.920
The top five are the top five.


00:17:38.920 --> 00:17:40.560
SQL has bounced around.


00:17:40.560 --> 00:17:42.200
If I remember correctly, last year,


00:17:42.200 --> 00:17:45.960
it was number one ahead of JavaScript at 43%


00:17:45.960 --> 00:17:47.760
or something like that.


00:17:47.760 --> 00:17:50.040
And I kind of thought, well, that's data science kicking in,


00:17:50.040 --> 00:17:52.440
but then this year it took a little bit of a drop.


00:17:52.440 --> 00:17:55.640
- Question about the makeup of this language.


00:17:55.640 --> 00:17:57.520
Was this a kind of a multiple choice thing


00:17:57.520 --> 00:17:59.360
or did you have to, okay,


00:17:59.360 --> 00:18:01.640
so you could say JavaScript, HTML, Bash.


00:18:01.640 --> 00:18:02.920
I remember taking the survey,


00:18:02.920 --> 00:18:06.040
but I cannot remember the question format.


00:18:06.040 --> 00:18:11.080
Yeah, yeah, Gina, the little giveaway is that there's this 100 plus at the top,


00:18:11.080 --> 00:18:13.320
which means like people can pick more than one.


00:18:13.320 --> 00:18:14.920
Ah, okay, okay, okay.


00:18:14.920 --> 00:18:16.680
When you see that at the top of my section.


00:18:16.680 --> 00:18:22.760
Anonymized, cleaned up data sets are available for all you smart people who can do cross tabs.


00:18:22.760 --> 00:18:28.600
If they want to do SQL against their team, it's CSV. Sorry, go ahead.


00:18:28.600 --> 00:18:30.840
No, that's okay. I was just saying, I was going to say like,


00:18:30.840 --> 00:18:35.080
I have tried to escape JavaScript for a while now.


00:18:35.080 --> 00:18:36.800
I just feel like I'm not able to escape it.


00:18:36.800 --> 00:18:38.120
It's like, you know, I have, you know,


00:18:38.120 --> 00:18:39.720
- There is no escape.


00:18:39.720 --> 00:18:41.920
- There is no escape from JavaScript.


00:18:41.920 --> 00:18:43.080
- I've just given up.


00:18:43.080 --> 00:18:44.160
- Yeah.


00:18:44.160 --> 00:18:45.800
I was curious to see though, how, you know,


00:18:45.800 --> 00:18:48.280
like as the development of, you know, PyScript,


00:18:48.280 --> 00:18:50.160
as it develops, like if that JavaScript number


00:18:50.160 --> 00:18:51.400
will stay the same,


00:18:51.400 --> 00:18:53.280
or if it's gonna like kind of drop off a little bit.


00:18:53.280 --> 00:18:56.280
And then, I mean, I know Bootstrap isn't a language,


00:18:56.280 --> 00:18:58.000
it's more of a front end framework,


00:18:58.000 --> 00:19:01.480
but I'm, you know, I, this kind of made me curious,


00:19:01.480 --> 00:19:04.240
you know, like are Python developers using Bootstrap


00:19:04.240 --> 00:19:07.420
more with their applications or are they using straight JavaScript? Are they using,


00:19:07.420 --> 00:19:10.020
you know, vanilla HTML and CSS?


00:19:10.020 --> 00:19:16.480
- I could imagine that React is pretty much featuring very highly there and maybe


00:19:16.480 --> 00:19:22.480
also Angular and Vue.js as well, which is also how I explained that maybe


00:19:22.480 --> 00:19:27.100
JavaScript is actually ranked up higher than HTML and CSS because if you write


00:19:27.100 --> 00:19:31.060
React in these days, you pretty much only interact with JavaScript code and you


00:19:31.060 --> 00:19:34.380
might throw snippets of stuff in there that looks like HTML,


00:19:34.380 --> 00:19:35.260
but actually isn't.


00:19:35.260 --> 00:19:38.860
And so people in that case would probably more identify


00:19:38.860 --> 00:19:41.540
as the JavaScript crowd or maybe the TypeScript crowd.


00:19:41.540 --> 00:19:43.320
So yeah.


00:19:43.320 --> 00:19:47.900
- Dina, do you use a lot of other languages


00:19:47.900 --> 00:19:50.060
or technologies for your devices


00:19:50.060 --> 00:19:52.300
and embedded things and so on?


00:19:52.300 --> 00:19:55.060
- I used to have this thing that I try to learn


00:19:55.060 --> 00:19:58.300
a new language every other year or so,


00:19:58.300 --> 00:20:00.860
but then life happened and I haven't been up to that


00:20:00.860 --> 00:20:03.700
for the last, I don't know, 13 years or so now.


00:20:03.700 --> 00:20:06.660
But I can say that in my day to day,


00:20:06.660 --> 00:20:09.740
I probably mostly use Python, JavaScript,


00:20:09.740 --> 00:20:11.360
Bash as well a lot.


00:20:11.360 --> 00:20:14.280
No Java anymore, thankfully.


00:20:14.280 --> 00:20:18.560
SQL here and there maybe as well.


00:20:18.560 --> 00:20:20.880
But I think that is about that.


00:20:20.880 --> 00:20:24.100
I mean, sometimes I also have to touch C or C++ code,


00:20:24.100 --> 00:20:29.100
but I try to really avoid it because I know my weaknesses


00:20:29.300 --> 00:20:32.900
are pointer arithmetics and forgetting to free up memory.


00:20:32.900 --> 00:20:34.980
So I stay away from languages that allow


00:20:34.980 --> 00:20:36.820
to shoot myself in the foot too much.


00:20:36.820 --> 00:20:39.380
- Yeah, even if you're good at it,


00:20:39.380 --> 00:20:42.180
it's just, it's a hassle if you can avoid it.


00:20:42.180 --> 00:20:43.580
Final thought on this one, Emily,


00:20:43.580 --> 00:20:46.780
you said you were doing other languages as well.


00:20:46.780 --> 00:20:49.660
One being a core developer, C++ is probably something


00:20:49.660 --> 00:20:53.820
that you've got to mess with, or C rather, being CPython.


00:20:53.820 --> 00:20:56.460
But what stands out to you here?


00:20:57.620 --> 00:21:00.820
- Yeah, I think that most of my contributions to CPython


00:21:00.820 --> 00:21:02.700
have been C and not Python.


00:21:02.700 --> 00:21:05.940
Yeah, I think it's interesting.


00:21:05.940 --> 00:21:07.580
I think it's very clear that web development


00:21:07.580 --> 00:21:09.700
is very much at the forefront.


00:21:09.700 --> 00:21:13.740
I think being able to sort of ingest this data


00:21:13.740 --> 00:21:15.780
and make meaning of it does get really difficult


00:21:15.780 --> 00:21:18.500
because you look at HTML, CSS,


00:21:18.500 --> 00:21:21.160
and there's so many different ways that it can be used.


00:21:21.160 --> 00:21:24.340
So it's like, oh, like, are these people writing Django


00:21:24.340 --> 00:21:26.840
or Flask applications, and they're also including that,


00:21:26.840 --> 00:21:29.880
Or do they happen to be writing a React front end


00:21:29.880 --> 00:21:32.260
and are considering it in there?


00:21:32.260 --> 00:21:33.640
So I do think that that's interesting


00:21:33.640 --> 00:21:35.800
and just sort of a difficult thing


00:21:35.800 --> 00:21:37.960
to really like take that meaning out of it.


00:21:37.960 --> 00:21:41.000
But I think it's very clear that


00:21:41.000 --> 00:21:46.160
there is some section of people who


00:21:46.160 --> 00:21:50.800
are still looking for things that are more similar


00:21:50.800 --> 00:21:52.800
to Python elsewhere, right?


00:21:52.800 --> 00:21:56.160
So you can't get away from JavaScript as we all know.


00:21:56.160 --> 00:21:58.380
There's really not a good substitution for something


00:21:58.380 --> 00:22:01.700
like HTML, CSS, if that's what you're building.


00:22:01.700 --> 00:22:06.380
But you see things in here where there's Go, there's Rust,


00:22:06.380 --> 00:22:08.380
things that people might be leaning towards when


00:22:08.380 --> 00:22:10.540
they need something that's a bit more performant


00:22:10.540 --> 00:22:12.940
or filling a different need for them.


00:22:12.940 --> 00:22:15.540
So I think it's interesting that those are still


00:22:15.540 --> 00:22:18.140
making a meaningful enough impact that they're


00:22:18.140 --> 00:22:19.020
making this list.


00:22:19.020 --> 00:22:21.120
And I think it will be interesting to see


00:22:21.120 --> 00:22:25.080
how this changes over the next few years with improvements


00:22:25.080 --> 00:22:27.740
the Python performance, so.


00:22:27.740 --> 00:22:29.620
- For sure, yeah, good point.


00:22:29.620 --> 00:22:32.120
The one, it's hard to tell from these little graphs


00:22:32.120 --> 00:22:33.740
that shows year over year change,


00:22:33.740 --> 00:22:36.440
and the one that seems to have grown the most is Rust,


00:22:36.440 --> 00:22:38.500
and I feel like there's a lot of people


00:22:38.500 --> 00:22:40.540
starting to pair Rust with Python


00:22:40.540 --> 00:22:44.040
instead of C with Python for some of those internals.


00:22:44.040 --> 00:22:45.340
Pretty interesting, okay.


00:22:45.340 --> 00:22:48.260
Languages for web and data science,


00:22:48.260 --> 00:22:49.860
they break this stuff all down.


00:22:49.860 --> 00:22:54.800
I'm gonna skip over this one,


00:22:54.800 --> 00:23:02.620
And so this next question here asks,


00:23:02.620 --> 00:23:06.140
Python usage as a main or secondary language


00:23:06.140 --> 00:23:09.060
for a certain purpose?


00:23:09.060 --> 00:23:13.500
So maybe we could touch on top four or five here.


00:23:13.500 --> 00:23:17.140
So data analytics.


00:23:17.140 --> 00:23:23.740
Python is the main language, but only by 4%, right?


00:23:23.740 --> 00:23:26.540
And then a web development,


00:23:26.540 --> 00:23:29.140
it seems like Python is more of the main language


00:23:29.140 --> 00:23:31.400
and so on.


00:23:31.400 --> 00:23:32.620
But for example, DevOps,


00:23:32.620 --> 00:23:34.660
as Gina was sort of talking about,


00:23:34.660 --> 00:23:35.580
system administration,


00:23:35.580 --> 00:23:38.880
it's a secondary language that people bring in.


00:23:38.880 --> 00:23:41.260
So yeah, Tanya, were you gonna jump in there?


00:23:41.260 --> 00:23:45.980
- I was just kind of nodding my head


00:23:45.980 --> 00:23:50.180
about the data analysis, the 52%,


00:23:50.180 --> 00:23:52.500
and just thinking like, what else are they using?


00:23:52.500 --> 00:23:55.700
using R instead of Python for data analysis or something else?


00:23:55.700 --> 00:23:58.980
Or just kind of made me think of that.


00:23:58.980 --> 00:24:02.580
- Yeah, it's a real good question.


00:24:02.580 --> 00:24:03.420
I don't know the answer.


00:24:03.420 --> 00:24:04.940
Maybe some other folks do.


00:24:04.940 --> 00:24:08.300
- For me, coming from--


00:24:08.300 --> 00:24:11.180
- What are they using if not the second language?


00:24:11.180 --> 00:24:12.020
Go ahead, Jay.


00:24:12.020 --> 00:24:14.460
- I don't even think it was necessarily like a language.


00:24:14.460 --> 00:24:17.180
I think it was, where is the data coming from


00:24:17.180 --> 00:24:18.860
and how do you get into it?


00:24:18.860 --> 00:24:20.300
That was one of the things where I've been


00:24:20.300 --> 00:24:25.060
a massive advocate for working with public data


00:24:25.060 --> 00:24:28.660
and using tools like Socrata that provide REST APIs


00:24:28.660 --> 00:24:29.660
for a lot of that data.


00:24:29.660 --> 00:24:33.860
But when all of a sudden you're working in a project


00:24:33.860 --> 00:24:36.380
and you have a map and the map is only GIS data


00:24:36.380 --> 00:24:39.700
and you're like, well, yes, I could.


00:24:39.700 --> 00:24:43.140
I could start doing like neonatum stuff


00:24:43.140 --> 00:24:45.580
or I could just use what they give me.


00:24:45.580 --> 00:24:48.900
And unfortunately, a lot of data like that


00:24:48.900 --> 00:24:53.180
is kind of locked into however they decide to give it to you,


00:24:53.180 --> 00:25:00.300
albeit sometimes a CSV file that has 2,000 columns to it.


00:25:00.300 --> 00:25:06.660
So it's almost terrifying to open up Pandas or open up just


00:25:06.660 --> 00:25:09.100
Python import CSV and run with it.


00:25:09.100 --> 00:25:12.740
So you just kind of use whatever they've given you to use.


00:25:12.740 --> 00:25:14.900
But I'm glad that there are services.


00:25:14.900 --> 00:25:18.020
Again, that's going to be my repeating sentiment,


00:25:18.020 --> 00:25:24.140
I'm glad that there are more and more things coming out that make using Python with a lot


00:25:24.140 --> 00:25:30.060
of these tools a little bit more accessible to beginners and I would say enthusiasts.


00:25:30.060 --> 00:25:32.340
I'm not a data analyst.


00:25:32.340 --> 00:25:33.740
I'm not a data scientist.


00:25:33.740 --> 00:25:35.380
I don't even pretend to be one.


00:25:35.380 --> 00:25:41.700
I'm just someone that loves looking at data and says, "What can I discover from it?"


00:25:41.700 --> 00:25:45.100
Yeah, very cool.


00:25:45.100 --> 00:25:51.100
Gina, how does that DevOps system administration breakdown for you, does that resonate?


00:25:51.100 --> 00:25:56.380
Absolutely, because frankly, even though I now consider myself a Python developer,


00:25:56.380 --> 00:26:03.100
whenever I have to get into DevOps administration stuff, the first thing that I try to use to solve


00:26:03.100 --> 00:26:09.180
any given problem that I have is shell script. Once that reaches a certain level of complexity


00:26:09.180 --> 00:26:14.180
and I start to slowly but surely lose my sanity over it,


00:26:14.180 --> 00:26:15.980
then I switch it over to Python.


00:26:15.980 --> 00:26:19.460
But the first approach is usually just, I don't know,


00:26:19.460 --> 00:26:20.980
three or four lines of best script,


00:26:20.980 --> 00:26:23.660
and suddenly all ton of logic ends up in it,


00:26:23.660 --> 00:26:26.500
then I might need an argument parser at some point,


00:26:26.500 --> 00:26:29.820
and then, yeah, then Python starts to look more


00:26:29.820 --> 00:26:31.180
attractive at that point.


00:26:31.180 --> 00:26:33.580
But if it's really just chaining a bunch of


00:26:33.580 --> 00:26:36.420
Unix commands together and throwing JQ


00:26:36.420 --> 00:26:38.260
against the JSON dump or something like that,


00:26:38.260 --> 00:26:40.060
but then it's just, I don't know,


00:26:40.060 --> 00:26:41.620
the shell script is just faster.


00:26:41.620 --> 00:26:45.620
- Yeah, no dependencies, it's just right there.


00:26:45.620 --> 00:26:46.820
- Yeah, it just works.


00:26:46.820 --> 00:26:50.140
Like maybe I have to install one single command line tool


00:26:50.140 --> 00:26:53.060
or statically linked even maybe, and then I'm done.


00:26:53.060 --> 00:26:55.760
So yeah, when I can do that, I prefer doing that


00:26:55.760 --> 00:26:57.580
because then I don't feel like


00:26:57.580 --> 00:26:59.220
I have to maintain something now.


00:26:59.220 --> 00:27:05.820
- Emily, the one that stands out to me most here


00:27:05.820 --> 00:27:10.460
is that the biggest I'm using Python as my primary language


00:27:10.460 --> 00:27:12.100
is for web development.


00:27:12.100 --> 00:27:14.900
You probably run into a lot of web projects at CuddleSoft.


00:27:14.900 --> 00:27:16.340
What are your thoughts on that?


00:27:16.340 --> 00:27:21.180
- Yeah, I mean, I think that at least for the space


00:27:21.180 --> 00:27:26.180
that I operate in, Python really is sort of a sweet spot.


00:27:26.180 --> 00:27:30.260
Python and Ruby don't kick me off the show.


00:27:30.260 --> 00:27:33.300
- We're not judging, we're not judging.


00:27:33.300 --> 00:27:35.480
(laughing)


00:27:35.480 --> 00:27:39.040
I think that as a whole,


00:27:39.040 --> 00:27:42.240
web development is something that needs to be


00:27:42.240 --> 00:27:43.280
very accessible.


00:27:43.280 --> 00:27:45.680
You need to be able to hire for it,


00:27:45.680 --> 00:27:49.080
needs to be something that's maintainable over time.


00:27:49.080 --> 00:27:51.000
And so I do think that there's kind of like a sweet spot


00:27:51.000 --> 00:27:53.060
of like getting something started.


00:27:53.060 --> 00:27:53.900
And a lot of times,


00:27:53.900 --> 00:27:56.040
especially if it's your first iteration


00:27:56.040 --> 00:27:58.080
of building something out,


00:27:58.080 --> 00:27:59.980
Python is a much more accessible language


00:27:59.980 --> 00:28:02.880
than trying to jump into something where you're maybe


00:28:02.880 --> 00:28:04.560
over optimizing or over engineering


00:28:04.560 --> 00:28:05.960
for something in the future.


00:28:05.960 --> 00:28:10.040
Yeah, and I think Python just really shines


00:28:10.040 --> 00:28:12.480
with web development and it's such a rich ecosystem


00:28:12.480 --> 00:28:16.320
that why wouldn't you reach for it if you could?


00:28:16.320 --> 00:28:17.840
- Why wouldn't you, right?


00:28:17.840 --> 00:28:20.180
Yeah, and you have to hand off these projects


00:28:20.180 --> 00:28:21.840
as being a consulting firm, right?


00:28:21.840 --> 00:28:24.240
You build them and you probably hand them off


00:28:24.240 --> 00:28:28.160
and I bet it feels more reasonable to hand off a Django


00:28:28.160 --> 00:28:33.160
or a Flask app than it would be to some highly configured


00:28:33.800 --> 00:28:38.800
ASP.NET type thing or a Java type of app that's,


00:28:38.800 --> 00:28:40.480
you know, requires a bunch of steps,


00:28:40.480 --> 00:28:43.300
even just to get the thing to run, you know?


00:28:43.300 --> 00:28:44.140
- Yeah, absolutely.


00:28:44.140 --> 00:28:45.780
Anything that's going to wind up being like


00:28:45.780 --> 00:28:48.400
operating system restricted is really tricky.


00:28:48.400 --> 00:28:51.360
And we've also been working with,


00:28:51.360 --> 00:28:56.800
especially backend applications that require


00:28:56.800 --> 00:29:01.680
a really complex ecosystem and architecture to deploy them.


00:29:01.680 --> 00:29:04.600
And my goodness, like if you can't easily spin up


00:29:04.600 --> 00:29:07.700
your local environment within, you know, five, 10 minutes,


00:29:07.700 --> 00:29:10.120
you're probably doing something wrong.


00:29:10.120 --> 00:29:13.940
And like all of these cloud infrastructures that exist


00:29:13.940 --> 00:29:16.340
have their place, but a lot of times people really


00:29:16.340 --> 00:29:18.180
want to grab onto those as well.


00:29:18.180 --> 00:29:20.100
And it just, it complicates things.


00:29:20.100 --> 00:29:24.240
So yeah, I definitely see why Python


00:29:24.240 --> 00:29:26.900
is still shining in web development.


00:29:26.900 --> 00:29:27.740
- For sure.


00:29:27.740 --> 00:29:30.680
Brett, I'll give you the final word on this section.


00:29:30.680 --> 00:29:32.180
And it's a two-part question.


00:29:32.180 --> 00:29:35.840
One, educational purposes.


00:29:35.840 --> 00:29:38.240
Python's a primary language there.


00:29:38.240 --> 00:29:39.520
That's pretty interesting.


00:29:39.520 --> 00:29:43.160
- Yeah, and it's fantastic.


00:29:43.160 --> 00:29:47.120
I mean, way back when I started programming,


00:29:47.120 --> 00:29:48.320
definitely, I didn't have Python.


00:29:48.320 --> 00:29:51.840
I wish I did as an easier language to get tied into it.


00:29:51.840 --> 00:29:58.360
But yeah, I mean, I definitely see it and I appreciate it.


00:29:58.360 --> 00:30:00.760
And I wish I had convinced my professors


00:30:00.760 --> 00:30:02.600
when I was in grad school to switch to Python


00:30:02.600 --> 00:30:03.640
instead of some of their choices,


00:30:03.640 --> 00:30:07.160
but luckily, Python still went out years later.


00:30:07.160 --> 00:30:10.840
I've gone back and looked at all my previous schools


00:30:10.840 --> 00:30:12.480
I attended all switched, so that's fantastic.


00:30:12.480 --> 00:30:14.440
But yeah, and I hope it grows too, right?


00:30:14.440 --> 00:30:16.880
Like Paul alluded to WebAssembly and such,


00:30:16.880 --> 00:30:18.520
and I think we have some opportunity here


00:30:18.520 --> 00:30:21.000
to make getting started for education,


00:30:21.000 --> 00:30:22.560
as Emily also pointed out,


00:30:22.560 --> 00:30:25.240
just getting up and going is a really important


00:30:25.240 --> 00:30:26.480
friction point to lower,


00:30:26.480 --> 00:30:28.120
So I'm hoping we can continue to improve that


00:30:28.120 --> 00:30:29.960
to get us somewhere.


00:30:29.960 --> 00:30:30.940
- Yeah.


00:30:30.940 --> 00:30:33.320
Yeah, that was the part two of the two part question


00:30:33.320 --> 00:30:35.040
is the WebAssembly stuff.


00:30:35.040 --> 00:30:38.620
It's, I think traction is finally starting to take there


00:30:38.620 --> 00:30:41.840
and that's post the time the survey was run,


00:30:41.840 --> 00:30:43.600
but I think it is.


00:30:43.600 --> 00:30:44.440
- Yeah.


00:30:44.440 --> 00:30:46.400
And I just wanna tell us in two things here.


00:30:46.400 --> 00:30:49.400
One, I love this question 'cause it's got the most,


00:30:49.400 --> 00:30:52.920
I find odd specific point of programming of web parser,


00:30:52.920 --> 00:30:55.360
scrapers and crawlers out of all the other options.


00:30:55.360 --> 00:30:58.160
It always throws me every time I take this question.


00:30:58.160 --> 00:30:59.840
It's like, why that specific line?


00:30:59.840 --> 00:31:01.440
And I know it's historical


00:31:01.440 --> 00:31:03.260
'cause what Python's been used for over the years,


00:31:03.260 --> 00:31:05.360
but it's always so specific.


00:31:05.360 --> 00:31:06.380
The other thing I look at this,


00:31:06.380 --> 00:31:09.280
and this shows how weird my relationship with Python is,


00:31:09.280 --> 00:31:11.840
I don't view this as Python for today.


00:31:11.840 --> 00:31:13.600
I view it as what I wanted to see change


00:31:13.600 --> 00:31:15.000
for Python tomorrow,


00:31:15.000 --> 00:31:18.040
and specifically three, five, 10 years from now.


00:31:18.040 --> 00:31:22.600
And so I hope we can move the education,


00:31:22.600 --> 00:31:24.880
the desktop development,


00:31:24.880 --> 00:31:29.960
and the embedded in mobile development more to--


00:31:29.960 --> 00:31:33.000
on our screen, the left, but higher percentages.


00:31:33.000 --> 00:31:36.280
Yeah, put them higher in that list, for sure.


00:31:36.280 --> 00:31:37.080
Absolutely.


00:31:37.080 --> 00:31:38.240
Yeah, great point.


00:31:38.240 --> 00:31:39.200
OK, totally agree.


00:31:39.200 --> 00:31:41.960
I believe Paul had something he wanted to bring up.


00:31:41.960 --> 00:31:44.160
Paul, get in here.


00:31:44.160 --> 00:31:47.200
Yeah, a quick point.


00:31:47.200 --> 00:31:49.360
First, on the historical anomaly,


00:31:49.360 --> 00:31:51.200
Brett, when you said that, I just


00:31:51.200 --> 00:31:53.480
went back and looked at 2017.


00:31:53.480 --> 00:31:55.400
And web crawlers was a big thing, man.


00:31:55.400 --> 00:31:57.880
It was 32% back then.


00:31:57.880 --> 00:32:00.440
So it is a little bit of an anomaly.


00:32:00.440 --> 00:32:02.880
So I guess it still is.


00:32:02.880 --> 00:32:04.760
What I'd like to call everyone's attention to


00:32:04.760 --> 00:32:06.400
is look at data analysis.


00:32:06.400 --> 00:32:09.480
The difference between the 52 and the 46,


00:32:09.480 --> 00:32:12.120
it's gone down for people who identify to that.


00:32:12.120 --> 00:32:14.040
If you go look at the two previous years,


00:32:14.040 --> 00:32:16.000
it went down then as well.


00:32:16.000 --> 00:32:19.040
Counterintuitive.


00:32:19.040 --> 00:32:22.000
Yeah, it really is.


00:32:22.000 --> 00:32:24.160
It must mean that the data analysis folks


00:32:24.160 --> 00:32:26.500
have a lot of different languages to juggle.


00:32:26.500 --> 00:32:29.500
All right, a bunch of other things that we could dive into.


00:32:29.500 --> 00:32:32.380
Kind of touched on a bunch of these.


00:32:32.380 --> 00:32:34.240
I think this is a really interesting question.


00:32:34.240 --> 00:32:35.080
I've always enjoyed it.


00:32:35.080 --> 00:32:35.900
And the question is,


00:32:35.900 --> 00:32:38.340
do you consider yourself a data scientist?


00:32:38.340 --> 00:32:45.460
And let's see, 66% say no.


00:32:45.460 --> 00:32:51.320
29% say yes.


00:32:51.320 --> 00:32:54.400
And then there's an other, and I'm not really sure.


00:32:54.400 --> 00:32:56.320
If I looked at the results, I guess that makes sense,


00:32:56.320 --> 00:32:58.760
but it sounds like a yes or no question,


00:32:58.760 --> 00:33:03.040
but somewhere there's some uncertainty in there.


00:33:03.040 --> 00:33:05.680
But when I describe the world as 1/3, 1/3, 1/3,


00:33:05.680 --> 00:33:09.080
at least for the data science folks,


00:33:09.080 --> 00:33:12.400
here's the 1/3.


00:33:12.400 --> 00:33:14.960
I do think there's a very interesting trend


00:33:14.960 --> 00:33:19.960
in the Python space where people who do data science,


00:33:20.840 --> 00:33:25.760
they feel like they are more isolated in the minority


00:33:25.760 --> 00:33:28.260
than say web developers and other folks.


00:33:28.260 --> 00:33:32.280
Because I think you have a team of web developers


00:33:32.280 --> 00:33:34.400
and often you have like one data scientist


00:33:34.400 --> 00:33:36.080
at the company that's doing the processing


00:33:36.080 --> 00:33:37.100
and analyzing and whatnot.


00:33:37.100 --> 00:33:39.160
But if you look at the usage for Python,


00:33:39.160 --> 00:33:43.040
the highest use, it's 50% is data analysis


00:33:43.040 --> 00:33:45.060
and yet only 29% of the people say


00:33:45.060 --> 00:33:47.800
they consider themselves data scientists.


00:33:47.800 --> 00:33:51.480
So I think there's something interesting.


00:33:51.480 --> 00:33:53.680
I think there's more data science happening in Python


00:33:53.680 --> 00:33:58.360
than even the people in the trenches of that space of it


00:33:58.360 --> 00:34:00.840
see it as.


00:34:00.840 --> 00:34:02.240
- I think it gets even a bit weirder


00:34:02.240 --> 00:34:05.040
because it's not that two thirds of everyone


00:34:05.040 --> 00:34:06.840
who got asked here doesn't consider themselves


00:34:06.840 --> 00:34:09.480
data scientists, but two thirds of all the people


00:34:09.480 --> 00:34:13.680
that were asked, that stated that they work


00:34:13.680 --> 00:34:15.320
in data analysis and machine learning


00:34:15.320 --> 00:34:17.240
said they are not data scientists.


00:34:17.240 --> 00:34:19.160
as it says there.


00:34:19.160 --> 00:34:22.520
So that is something that throws me completely off here


00:34:22.520 --> 00:34:26.000
because I don't know, maybe imposter syndrome,


00:34:26.000 --> 00:34:27.500
but I don't know.


00:34:27.500 --> 00:34:29.840
- Yeah.


00:34:29.840 --> 00:34:30.680
- Yeah, I think a lot of this goes to,


00:34:30.680 --> 00:34:33.400
it kind of goes to what, yeah, no worries.


00:34:33.400 --> 00:34:35.340
I think this kind of goes to what Jay was saying earlier.


00:34:35.340 --> 00:34:38.660
Like when we look at data analysis


00:34:38.660 --> 00:34:40.320
as these questions were asked,


00:34:40.320 --> 00:34:43.960
that's not necessarily data science for a lot of people.


00:34:43.960 --> 00:34:45.920
So Jay was talking about like using Python


00:34:45.920 --> 00:34:49.760
to pull data from public APIs and do analysis on them.


00:34:49.760 --> 00:34:52.960
Or like we use Python to run our accounting department.


00:34:52.960 --> 00:34:53.800
Right?


00:34:53.800 --> 00:34:56.400
Like we pulled together spreadsheets and do analysis


00:34:56.400 --> 00:35:00.560
and budgeting and automatically generate invoices.


00:35:00.560 --> 00:35:02.740
So I think that there's just like so much more


00:35:02.740 --> 00:35:05.160
within that data analysis section


00:35:05.160 --> 00:35:08.840
that just doesn't necessarily apply to data science.


00:35:08.840 --> 00:35:09.680
- Right.


00:35:09.680 --> 00:35:11.800
They're not doing machine learning with TensorFlow


00:35:11.800 --> 00:35:12.640
and Jupyter.


00:35:12.640 --> 00:35:14.760
So it might not feel like I'm a data scientist type.


00:35:14.760 --> 00:35:15.720
Yeah.


00:35:15.720 --> 00:35:45.400
Yeah, this is to me, this is an industry direction, you know, question of, you know, the industries that we work in are becoming more and more data focused, more and more data driven. And we've been saying that for a decade now. So I'm just going to keep the pattern going. But it seems like even in newer industries, even in industries that are popping up, like I think about how many people are social media influencers that have to deal


00:35:45.400 --> 00:35:48.280
with things like impressions and stuff like that.


00:35:48.280 --> 00:35:49.660
So it's like, yes,


00:35:49.660 --> 00:35:53.940
you have high school kids and younger folks and


00:35:53.940 --> 00:35:58.380
people who get it but I just don't.


00:35:58.380 --> 00:36:02.440
They're having to look at data and they're having to think about


00:36:02.440 --> 00:36:08.320
things from a data-driven perspective a lot earlier in life.


00:36:08.320 --> 00:36:11.000
I think as it becomes more commonplace,


00:36:11.000 --> 00:36:12.600
what we'll see is people will do


00:36:12.600 --> 00:36:15.160
anything and everything to make their jobs easier.


00:36:15.160 --> 00:36:21.120
And in fact, that was what originally got me into Python was, how do I make this job


00:36:21.120 --> 00:36:22.120
easier?


00:36:22.120 --> 00:36:23.880
Oh, I can script this out.


00:36:23.880 --> 00:36:28.080
And I think we have some, I mean, I talked to high school kids, you know, from time to


00:36:28.080 --> 00:36:33.220
time just about, you know, their careers in computer science in the future.


00:36:33.220 --> 00:36:40.680
And a lot of them are thinking about everything that they do now from a data perspective.


00:36:40.680 --> 00:36:46.360
And I think that's where you have more people doing data analytics that aren't necessarily


00:36:46.360 --> 00:36:47.960
doing data science.


00:36:47.960 --> 00:36:51.400
Yeah, that's a great perspective.


00:36:51.400 --> 00:36:56.280
I'm very excited, especially for Brett and Emily on this one, this next question.


00:36:56.280 --> 00:37:00.320
Python versions, Python 3 versus 2.


00:37:00.320 --> 00:37:03.600
There was a little bit of uncertainty back in 2017.


00:37:03.600 --> 00:37:07.680
25% of the people were still, "Nah, I'm doing Python 2."


00:37:07.680 --> 00:37:11.360
it's just down to the ones I suspect you have no choice.


00:37:11.360 --> 00:37:14.040
It's 95% Python 3.


00:37:14.040 --> 00:37:17.720
Brett, can you do a celebration lap on this one?


00:37:17.720 --> 00:37:21.600
- Oh yeah, I mean, I started to celebrate


00:37:21.600 --> 00:37:24.560
when we got past 50% and the trend continued to go down.


00:37:24.560 --> 00:37:28.460
I mean, I basically had on faith alone


00:37:28.460 --> 00:37:31.460
and partially because this is somewhat my fault, right?


00:37:31.460 --> 00:37:34.820
Like I did play a part in trying to make this all happen.


00:37:34.820 --> 00:37:35.880
I kind of had to have faith


00:37:35.880 --> 00:37:37.680
that this would all trend this way.


00:37:37.680 --> 00:37:40.160
I feel sorry for the people,


00:37:40.160 --> 00:37:43.440
those 5% that are still stuck on Python 2.


00:37:43.440 --> 00:37:44.680
I know they're keeping--


00:37:44.680 --> 00:37:46.480
- Well, you hear about some of the banks,


00:37:46.480 --> 00:37:48.800
there's some of the banks that have


00:37:48.800 --> 00:37:51.400
like 5,000 Python developers working on


00:37:51.400 --> 00:37:54.680
some forked specialized version of Python 2


00:37:54.680 --> 00:37:56.800
that has millions of lines of code.


00:37:56.800 --> 00:37:58.720
I mean, that could be 3% right there.


00:37:58.720 --> 00:38:02.280
- Yeah, and I mean, and I do know people


00:38:02.280 --> 00:38:04.420
are still actively working on this, right?


00:38:04.420 --> 00:38:07.580
like a friend of some of us, Jeff Triplett,


00:38:07.580 --> 00:38:09.540
like I know part of his consulting work


00:38:09.540 --> 00:38:12.100
is to help companies move from Python two to three.


00:38:12.100 --> 00:38:15.240
So I know it's not that people aren't trying to do it.


00:38:15.240 --> 00:38:17.740
My worry about those folk that can't move


00:38:17.740 --> 00:38:20.300
is how much of an island will become to themselves


00:38:20.300 --> 00:38:22.500
just because they'll slowly just be able to use


00:38:22.500 --> 00:38:23.980
less and less of the open source stuff,


00:38:23.980 --> 00:38:25.880
but not much we can do there.


00:38:25.880 --> 00:38:28.860
But yes, I am very happy about this.


00:38:28.860 --> 00:38:32.300
And at work, all of our stuff,


00:38:32.300 --> 00:38:34.860
we dropped Python to support officially


00:38:34.860 --> 00:38:35.860
beginning of this year.


00:38:35.860 --> 00:38:39.900
So it was a nice day when that happened.


00:38:39.900 --> 00:38:42.800
- Fantastic.


00:38:42.800 --> 00:38:44.460
Emily, being on the inside,


00:38:44.460 --> 00:38:46.420
what are your thoughts on this as well?


00:38:46.420 --> 00:38:48.500
- Yeah, it's interesting.


00:38:48.500 --> 00:38:52.460
'Cause I feel two very like conflicted feelings about this.


00:38:52.460 --> 00:38:55.460
So my gut reaction when I look at this is like,


00:38:55.460 --> 00:38:58.300
wow, like was it really 75% of people


00:38:58.300 --> 00:38:59.980
who were already on it in 2017?


00:38:59.980 --> 00:39:04.580
Like in my soul, I feel like there was still this big push


00:39:04.580 --> 00:39:06.380
to like get people on Python 3


00:39:06.380 --> 00:39:09.600
and it doesn't feel like we were that successful


00:39:09.600 --> 00:39:11.600
that long ago.


00:39:11.600 --> 00:39:12.440
So that's the first thing.


00:39:12.440 --> 00:39:13.360
And then the other thing is like,


00:39:13.360 --> 00:39:18.320
I just, I am lucky to function in a space


00:39:18.320 --> 00:39:23.000
that we were so able to jump on Python 3


00:39:23.000 --> 00:39:24.840
right from the beginning.


00:39:24.840 --> 00:39:28.520
And I do kind of share a lot of Brett's concerns


00:39:28.520 --> 00:39:30.720
and hesitations about, you know,


00:39:30.720 --> 00:39:34.040
man, the people who are still on Python 2 right now


00:39:34.040 --> 00:39:36.760
are probably really stuck on Python 2


00:39:36.760 --> 00:39:39.200
and will be for the foreseeable future.


00:39:39.200 --> 00:39:42.240
- Yeah, you're gonna have to leave that job


00:39:42.240 --> 00:39:43.460
and go to a different place


00:39:43.460 --> 00:39:45.080
where you no longer have to touch that software


00:39:45.080 --> 00:39:46.580
to make that change, I'm sure.


00:39:46.580 --> 00:39:49.040
- Yeah, that actually happened.


00:39:49.040 --> 00:39:50.920
A company I was working for in 2019,


00:39:50.920 --> 00:39:55.000
they were on Python 2.7, they're still on Python 2.7.


00:39:55.000 --> 00:39:58.240
So unfortunately they're in that small percentage


00:39:58.240 --> 00:40:03.240
that's used in Python 2.7, but yeah.


00:40:03.240 --> 00:40:08.440
- For me, this graph represents a struggle


00:40:08.440 --> 00:40:11.140
that I actually am still fighting


00:40:11.140 --> 00:40:13.600
or was fighting until very recently


00:40:13.600 --> 00:40:15.520
in OctoPrint's maintenance,


00:40:15.520 --> 00:40:18.120
because OctoPrint is something that is deployed


00:40:18.120 --> 00:40:20.240
at the end user space,


00:40:20.240 --> 00:40:22.540
so I do not control the Python environment it is running in.


00:40:22.540 --> 00:40:25.640
And so until the very latest stable version,


00:40:25.640 --> 00:40:29.900
OctoPrint still supported Python 2 and 3.


00:40:29.900 --> 00:40:34.480
And dropping Python 2 support was something that I dreaded


00:40:34.480 --> 00:40:37.600
because I feared a huge backlash from the community


00:40:37.600 --> 00:40:38.440
along the lines of,


00:40:38.440 --> 00:40:41.400
"but then this and this plugin will no longer work


00:40:41.400 --> 00:40:43.320
because the maintainer has not upgraded it yet


00:40:43.320 --> 00:40:44.780
to support Python 3 as well."


00:40:44.780 --> 00:40:48.600
And I'm currently looking at my own tracking stats


00:40:48.600 --> 00:40:52.760
and for OctoPrint, the split is still 15% of all instances


00:40:52.760 --> 00:40:54.800
are still on Python 2,


00:40:54.800 --> 00:40:56.820
but at least we now have 85%.


00:40:56.820 --> 00:41:00.200
So we are slowly catching up to these survey results,


00:41:00.200 --> 00:41:05.700
but still the journey was long and hard.


00:41:05.700 --> 00:41:08.300
And I'm really, really glad that I can finally now say,


00:41:08.300 --> 00:41:11.300
no, I'm exclusively developing in Python 3.


00:41:11.300 --> 00:41:12.700
f-strings, yes.


00:41:12.700 --> 00:41:15.900
- Yes, yes, 3.6 is all you need.


00:41:15.900 --> 00:41:16.980
That's where the magic is.


00:41:16.980 --> 00:41:19.060
You got EaseTicker08 and you got f-strings.


00:41:19.060 --> 00:41:19.900
- Yeah.


00:41:19.900 --> 00:41:22.020
- I think that's an interesting microcosm


00:41:22.020 --> 00:41:25.280
to think about how your app has these plugins.


00:41:25.280 --> 00:41:29.000
And so there's that cascading dependency as well.


00:41:29.000 --> 00:41:31.620
- Yeah, and it also means that if I make decisions


00:41:31.620 --> 00:41:33.540
like dropping Python 2 support,


00:41:33.540 --> 00:41:36.900
I pretty much nuke a whole part of my ecosystem.


00:41:36.900 --> 00:41:40.960
And that is obviously bad because I depend on my ecosystem.


00:41:40.960 --> 00:41:43.040
It makes up like,


00:41:43.040 --> 00:41:45.520
it's one of the biggest selling points of the whole thing.


00:41:45.520 --> 00:41:49.080
So yeah, that always was,


00:41:49.080 --> 00:41:51.160
or stuff like this is always decisions


00:41:51.160 --> 00:41:53.760
that are especially hard to make.


00:41:53.760 --> 00:41:54.760
And yeah.


00:41:54.760 --> 00:41:55.600
- Yeah.


00:41:55.600 --> 00:41:59.920
- There's a Zed Shaw quote for everything.


00:41:59.920 --> 00:42:04.200
And I wondered if there was a Zed Shaw quote for this.


00:42:04.200 --> 00:42:06.360
Guess what?


00:42:06.360 --> 00:42:07.960
There's a Zed Shaw quote.


00:42:07.960 --> 00:42:10.080
November, 2016.


00:42:10.080 --> 00:42:12.640
There's a high probability that Python 3


00:42:12.640 --> 00:42:15.220
is such a failure it will kill Python.


00:42:16.520 --> 00:42:19.260
So Brett, I mean, you killer.


00:42:19.260 --> 00:42:22.440
- I'm okay with that.


00:42:22.440 --> 00:42:24.040
Python 2 can go hang out with COBOL


00:42:24.040 --> 00:42:27.040
in the back of the room and just live on forever,


00:42:27.040 --> 00:42:29.720
well beyond all of us and do its thing


00:42:29.720 --> 00:42:31.880
for the few that are stuck on it forever


00:42:31.880 --> 00:42:33.920
and just can't do anything better.


00:42:33.920 --> 00:42:35.000
- I am curious about that,


00:42:35.000 --> 00:42:38.440
about that the box next to the graph here


00:42:38.440 --> 00:42:41.200
about I'm saying, compared to Python 3,


00:42:41.200 --> 00:42:44.080
Python 2 is more often applied to computer graphics,


00:42:44.080 --> 00:42:45.520
games and mobile development.


00:42:45.520 --> 00:42:47.520
I know for Mac--


00:42:47.520 --> 00:42:49.520
Yeah, I'm curious about that as well.


00:42:49.520 --> 00:42:51.520
Yeah, it was interesting. It kind of really stood out to me.


00:42:51.520 --> 00:42:53.520
I know for Mac, right, they're dropping


00:42:53.520 --> 00:42:55.520
Python 2.7 support, I believe,


00:42:55.520 --> 00:42:57.520
which happened at the beginning of this year.


00:42:57.520 --> 00:42:59.520
So yeah, that just was--


00:42:59.520 --> 00:43:01.520
It's got to be embedded in something.


00:43:01.520 --> 00:43:03.520
I can also kind of indirectly talk to this.


00:43:03.520 --> 00:43:05.520
I have a friend who used to be in the gaming industry professionally.


00:43:05.520 --> 00:43:07.520
Chats with him suggest the gaming industry is very


00:43:07.520 --> 00:43:09.520
very much a


00:43:09.520 --> 00:43:11.520
very very


00:43:11.520 --> 00:43:13.520
very


00:43:13.520 --> 00:43:18.520
The gaming industry is very slow to pick up on new stuff,


00:43:18.520 --> 00:43:21.360
ironically, like cutting-edge graphics and all that,


00:43:21.360 --> 00:43:24.860
but modern development practices and stuff,


00:43:24.860 --> 00:43:27.860
extremely slow to switch.


00:43:27.860 --> 00:43:31.160
I don't know if it's just culture or the velocity


00:43:31.160 --> 00:43:33.900
of the tempo we do development at causes them to not stop


00:43:33.900 --> 00:43:35.900
and look at how things change.


00:43:35.900 --> 00:43:39.400
I think it's a combination of the embedding comment


00:43:39.400 --> 00:43:44.400
just made plus just literally it works,


00:43:44.400 --> 00:43:47.400
why make a change and we don't have time to move anything.


00:43:47.400 --> 00:43:49.160
- I think Paul Hildebrandt talks about that


00:43:49.160 --> 00:43:52.880
in Hollywood and video production, right?


00:43:52.880 --> 00:43:55.400
- Yeah, Maya and all that switching over.


00:43:55.400 --> 00:44:00.200
Yeah, I gave a talk at Disney for Paul at one point


00:44:00.200 --> 00:44:03.200
to help him try to convince folks to move to Python 3


00:44:03.200 --> 00:44:06.200
and they had to get the whole industry on board, right?


00:44:06.200 --> 00:44:08.640
Like, 'cause there's a whole industry group


00:44:08.640 --> 00:44:11.520
that controls-- control sounds a little extreme--


00:44:11.520 --> 00:44:14.080
but works together to come up with standards of software


00:44:14.080 --> 00:44:15.880
so that the whole industry works together.


00:44:15.880 --> 00:44:18.560
And they, as a group, had to decide to move to Python 3.


00:44:18.560 --> 00:44:20.800
And I think they did it a bit later


00:44:20.800 --> 00:44:22.200
than some people might know.


00:44:22.200 --> 00:44:25.960
And then that's what got Maya and all those graphics tools


00:44:25.960 --> 00:44:27.080
to move over and all that.


00:44:27.080 --> 00:44:29.000
And if you're still running older versions,


00:44:29.000 --> 00:44:30.240
I'm sure you haven't switched.


00:44:30.240 --> 00:44:33.600
So that's my guess as to why those specific areas are


00:44:33.600 --> 00:44:35.520
kind of taking a bit longer to switch.


00:44:35.520 --> 00:44:36.640
Yeah.


00:44:36.640 --> 00:44:38.600
I totally agree with the game, computer graphics.


00:44:38.600 --> 00:44:42.040
I'm not so sure about mobile because I don't even know what is happening there.


00:44:42.040 --> 00:44:45.480
This game development point just kind of made me wonder.


00:44:45.480 --> 00:44:50.840
A long time ago in a Galaxy Far, Far Away, I doubled briefly in Unity.


00:44:50.840 --> 00:44:54.200
And back then, I think it didn't have Python bindings.


00:44:54.200 --> 00:44:55.440
And I just checked.


00:44:55.440 --> 00:44:58.520
Apparently, they introduced Python bindings in 2020


00:44:58.520 --> 00:45:02.440
and they started with Python 2 in 2020.


00:45:02.840 --> 00:45:06.840
So, and back then I currently have the blog post in front of me,


00:45:06.840 --> 00:45:12.520
Python for Unity editor and where they said Python 3 support is in the works,


00:45:12.520 --> 00:45:16.920
and that was on February 26th in 2020. So, I don't know if they have shipped it by now,


00:45:16.920 --> 00:45:26.040
I sincerely hope so, but I mean that kind of explains why it might still be a factor in


00:45:26.040 --> 00:45:30.760
games development, because if you started, for example, on a Unity game and developed everything


00:45:30.760 --> 00:45:36.360
in Python 2, then why port it over? No one will look into the source anyhow because you


00:45:36.360 --> 00:45:38.600
shipped the whole game binary and stuff like that.


00:45:38.600 --> 00:45:47.640
Yep, very good. Very good point. Okay, let's move on to the next one. And this one I think


00:45:47.640 --> 00:45:54.600
more than most, you got to keep in mind this is from the fall of 2021, and this is for Python 3,


00:45:54.600 --> 00:45:59.960
what versions are you using? You know, you hear about a lot of libraries these days being 3.7 or


00:45:59.960 --> 00:46:04.280
or above, I believe official support for 3.6


00:46:04.280 --> 00:46:07.080
is no longer there, right, Emily?


00:46:07.080 --> 00:46:08.560
It's now retired?


00:46:08.560 --> 00:46:10.800
- Yep.


00:46:10.800 --> 00:46:11.880
- Yeah, okay.


00:46:11.880 --> 00:46:15.840
So it breaks down what percentage is being used.


00:46:15.840 --> 00:46:20.840
So 3.5 or lower is only 2%, 3.6 is seven,


00:46:20.840 --> 00:46:26.720
3.7 is 13, then it goes 27% and 35% for 3.9


00:46:26.720 --> 00:46:29.400
and 16% for 3.10.


00:46:29.400 --> 00:46:32.840
And so there's sort of this right side heavy,


00:46:32.840 --> 00:46:36.120
normal distribution type of thing.


00:46:36.120 --> 00:46:38.240
And I suspect it would move a little more to the right


00:46:38.240 --> 00:46:40.880
with 310, you know, being seven months later


00:46:40.880 --> 00:46:42.040
or something like that.


00:46:42.040 --> 00:46:49.600
- Yeah, I think this really speaks a good.


00:46:49.600 --> 00:46:51.160
- I was gonna say the timeframe, I think is really,


00:46:51.160 --> 00:46:53.120
as you point out, Michael, really important to keep in mind


00:46:53.120 --> 00:46:56.280
'cause in the fall, 310 would have been brand spanking new


00:46:56.280 --> 00:46:58.160
'cause it comes out at the beginning of October


00:46:58.160 --> 00:47:01.900
on the broadcast anniversary of Monty Python's Flying Circus.


00:47:01.900 --> 00:47:05.860
So it's so new that if the community hadn't caught up yet


00:47:05.860 --> 00:47:08.800
with releasing usually the extension modules


00:47:08.800 --> 00:47:10.100
that everyone relies on, right,


00:47:10.100 --> 00:47:12.360
that scientific stack and all that being ready to go,


00:47:12.360 --> 00:47:13.280
that would probably hold that up.


00:47:13.280 --> 00:47:14.800
So actually 16% is kind of nice


00:47:14.800 --> 00:47:16.280
'cause it does show that at least some people


00:47:16.280 --> 00:47:19.440
are ready to go day one versus everyone beyond three night,


00:47:19.440 --> 00:47:22.400
which for the majority of the year that this survey covers


00:47:22.400 --> 00:47:24.520
was the latest and greatest, right?


00:47:24.520 --> 00:47:26.120
And talking about the Python 2 stuff,


00:47:26.120 --> 00:47:30.720
I love this chart because for the longest time, right, Python 2 was up over here on


00:47:30.720 --> 00:47:33.040
the left side and everything was slowly keeping up on the other side.


00:47:33.040 --> 00:47:37.800
Now we're back to what would have been normal way back in my beginner days of Python of,


00:47:37.800 --> 00:47:41.680
oh yeah, pretty much everyone just is on the newest version like three months, six months


00:47:41.680 --> 00:47:42.680
later.


00:47:42.680 --> 00:47:46.920
I can see Paul shaking his head remembering the same time as I do where the whole community


00:47:46.920 --> 00:47:51.160
just moved together on the same versions versus the old split that we had where it's just


00:47:51.160 --> 00:47:53.160
like, well, some people are moving, some aren't.


00:47:53.160 --> 00:47:56.640
Kind of nice to be back on this cadence.


00:47:56.640 --> 00:48:03.120
Not to fast forward any of your conversation, Mike, but I think that the point below it


00:48:03.120 --> 00:48:09.680
also speaks to why a lot of people were on 3.9 at this point in time, which is how they're


00:48:09.680 --> 00:48:10.920
installing it.


00:48:10.920 --> 00:48:11.920
Oh, yeah.


00:48:11.920 --> 00:48:16.540
If you're installing it from your OS provider or, you know, some other form, you're going


00:48:16.540 --> 00:48:18.840
to get an older version of Python.


00:48:18.840 --> 00:48:28.440
And if you're learning Python, which just from surveys that I've seen from Python communities,


00:48:28.440 --> 00:48:35.000
the largest member of Python communities are often students and people wanting to learn.


00:48:35.000 --> 00:48:36.960
So how do they install Python?


00:48:36.960 --> 00:48:40.320
Well, if it's already there, they're just going to use what's there.


00:48:40.320 --> 00:48:45.480
If they don't, then they're probably going to go to the website and download it and then


00:48:45.480 --> 00:48:48.240
and just run the installer.


00:48:48.240 --> 00:48:54.720
I think that we as Python professionals like to think that the way that we do things is


00:48:54.720 --> 00:49:00.720
normal or normalized, I guess, but often not.


00:49:00.720 --> 00:49:06.320
Me using, you know, ASDF to manage all of my different Python versions that I'm using


00:49:06.320 --> 00:49:09.520
back and forth is very much the outlier.


00:49:09.520 --> 00:49:16.640
So I feel like 3.9 is the largest in this case because teachers are telling their students,


00:49:16.640 --> 00:49:20.600
here, install this, do this thing, and if that's what they're using and that's what


00:49:20.600 --> 00:49:23.720
they're, you know, being forced to use, then they're just going to tell their students


00:49:23.720 --> 00:49:26.040
to do the same thing.


00:49:26.040 --> 00:49:31.800
Yeah, the other thing is, if you, the main way you get Python here, that people got Python


00:49:31.800 --> 00:49:33.800
is by downloading the installer.


00:49:33.800 --> 00:49:37.060
If you do that, it does an auto update, right?


00:49:37.060 --> 00:49:41.560
And so if you did that a year and a half ago, you're just going to have that, "Oh, I have


00:49:41.560 --> 00:49:43.560
Python 3, I'm good."


00:49:43.560 --> 00:49:48.280
There's no auto update, whereas if you did brew install,


00:49:48.280 --> 00:49:49.600
it'll say, oh, there's a new version.


00:49:49.600 --> 00:49:52.640
And you just generally just accept whatever the updates are.


00:49:52.640 --> 00:49:55.840
So I think that actually has a big influence here as well.


00:49:55.840 --> 00:49:57.600
And then, Brett, to your point,


00:49:57.600 --> 00:50:00.000
I remember right as 3.10 came out,


00:50:00.000 --> 00:50:01.360
there was a few things I wanted


00:50:01.360 --> 00:50:03.520
that didn't have wheels for 3.10


00:50:03.520 --> 00:50:05.520
that also had to be on M1.


00:50:05.520 --> 00:50:08.880
There was like, there were certain libraries that didn't,


00:50:08.880 --> 00:50:10.240
it's not that they didn't support it,


00:50:10.240 --> 00:50:14.240
they weren't quite ready to deliver you


00:50:14.240 --> 00:50:16.240
the stuff you actually needed to use it.


00:50:16.240 --> 00:50:20.680
Yeah.


00:50:20.680 --> 00:50:22.240
- Yeah.


00:50:22.240 --> 00:50:26.960
- Tanya, Paul, Jay, you all are talking to customers


00:50:26.960 --> 00:50:28.040
and working with folks.


00:50:28.040 --> 00:50:31.160
Does this influence how you might think


00:50:31.160 --> 00:50:33.320
of working with people or presenting stuff


00:50:33.320 --> 00:50:35.520
like tutorials or things along those lines?


00:50:35.520 --> 00:50:38.440
- Yeah, I think so.


00:50:38.440 --> 00:50:42.080
depend on like, you know, which level they're at, and like,


00:50:42.080 --> 00:50:45.760
what operating system that they're using, maybe. I know,


00:50:45.760 --> 00:50:48.460
for myself, like, I just, I literally, like, just started


00:50:48.460 --> 00:50:52.840
using pyemp. Just makes it a lot easier to, like, also switch


00:50:52.840 --> 00:50:55.960
between, you know, different Python versions. But yeah, I


00:50:55.960 --> 00:50:57.640
think this is definitely something to think about, like,


00:50:57.640 --> 00:51:00.880
when we're writing content. Yeah, for sure.


00:51:00.880 --> 00:51:01.960
For sure.


00:51:01.960 --> 00:51:08.320
I may have been told once or twice to not lean on the wall


00:51:08.320 --> 00:51:13.320
and some of my match case operators as much.


00:51:13.320 --> 00:51:18.880
But you do have to think about how you're writing code


00:51:18.880 --> 00:51:21.020
and some of the benefits.


00:51:21.020 --> 00:51:24.700
And I think that's, I know 3.11 isn't on here


00:51:24.700 --> 00:51:27.380
for obvious reasons, but that's one of the things


00:51:27.380 --> 00:51:29.940
that we think about when we talk about what's happening


00:51:29.940 --> 00:51:34.940
in the future too, is yes, it's great to be able


00:51:35.300 --> 00:51:38.860
to extol the virtues of all the efficiency improvements.


00:51:38.860 --> 00:51:41.100
But at the same time, we have to also understand


00:51:41.100 --> 00:51:43.620
that we might be talking to someone that says,


00:51:43.620 --> 00:51:44.580
yeah, yeah, yeah, that's great.


00:51:44.580 --> 00:51:47.820
We're not going to touch 3.11 for another three years.


00:51:47.820 --> 00:51:48.860
So it--


00:51:48.860 --> 00:51:51.300
- It works, we're not touching it.


00:51:51.300 --> 00:51:54.340
- Yeah, it's fun to encourage that conversation,


00:51:54.340 --> 00:51:57.820
but also to remember that not every blog post


00:51:57.820 --> 00:52:00.780
can have the latest and greatest features included.


00:52:00.780 --> 00:52:04.060
- Yeah, for sure.


00:52:04.060 --> 00:52:05.180
Three quick points from me.


00:52:05.180 --> 00:52:09.420
First, Emily's first contribution to CPython was Walrus.


00:52:09.420 --> 00:52:13.060
So you will address Walrus with love and respect.


00:52:13.060 --> 00:52:15.020
- I love the Walrus operator.


00:52:15.020 --> 00:52:19.420
I for one, read forward every time I can in my personal code


00:52:19.420 --> 00:52:20.260
however.


00:52:20.260 --> 00:52:24.340
- Second, I find myself blocked sometimes by,


00:52:24.340 --> 00:52:28.220
of all things has black gotten to it yet,


00:52:28.220 --> 00:52:30.180
which is kind of funny.


00:52:30.180 --> 00:52:33.820
And third, I believe all these problems we solved


00:52:33.820 --> 00:52:36.520
when Brett adds install Python


00:52:36.520 --> 00:52:39.460
to the Python launcher feature set.


00:52:39.460 --> 00:52:42.480
I think that we'll all be in good shape when that happens.


00:52:42.480 --> 00:52:46.800
I'm curious, Emily, I wanna put you on the spot,


00:52:46.800 --> 00:52:49.000
make a prediction, 310,


00:52:49.000 --> 00:52:50.880
what's its number gonna be next time?


00:52:50.880 --> 00:52:56.400
Think it'll hit 35%?


00:52:56.400 --> 00:53:00.200
- Yeah, absolutely.


00:53:00.200 --> 00:53:01.040
- All right.


00:53:01.040 --> 00:53:03.040
- Because I think what we're seeing here,


00:53:03.040 --> 00:53:10.140
least to a certain extent, is that we haven't inflicted too much trauma on the community


00:53:10.140 --> 00:53:16.540
that they've said, "No, I finally got to Python 3.6 or 3.5," or wherever they were at when


00:53:16.540 --> 00:53:20.680
they migrated over, and that they wanted to kind of like stay there.


00:53:20.680 --> 00:53:29.180
And I think that the core team takes great care, especially now, to not introduce any


00:53:29.180 --> 00:53:35.880
any sort of deprecations or breaking changes that are going to impact the majority of users.


00:53:35.880 --> 00:53:39.560
Because we know, like we have this talk internally all the time, that like there is not going


00:53:39.560 --> 00:53:43.760
to be a Python 4 because we don't want to see that sort of transition that we saw from


00:53:43.760 --> 00:53:50.360
2 to 3. And so I'm hoping that in a way we've broken that stigma that a Python upgrade is


00:53:50.360 --> 00:53:58.320
a pain. And I don't think I was really around to see the better days before we introduced


00:53:58.320 --> 00:54:04.800
that. But I do think at this point, there's much lower friction and much better tooling


00:54:04.800 --> 00:54:10.240
for somebody to say, "Hey, you know, yeah, like Python 3.10 just came out. Let's upgrade


00:54:10.240 --> 00:54:14.200
our Docker container. Let's run CI. Let's see if our tests pass and like, we should


00:54:14.200 --> 00:54:19.840
be good to go." And just kind of like more readily upgrade on a regular basis. Because


00:54:19.840 --> 00:54:27.200
we look at these more as incremental changes, one. And two, I think there is, there's a


00:54:27.200 --> 00:54:30.800
a lot of cool new features that go into each release


00:54:30.800 --> 00:54:32.680
that people want to grab for.


00:54:32.680 --> 00:54:36.680
And I think that will drive people to continue to upgrade


00:54:36.680 --> 00:54:38.560
as much as they possibly can.


00:54:38.560 --> 00:54:43.280
- Yeah, absolutely.


00:54:43.280 --> 00:54:48.280
I do think it's been a very smooth ride from 3.5 onward.


00:54:48.280 --> 00:54:53.720
I can't think of anything that's been a problem.


00:54:53.720 --> 00:54:57.480
So people are encouraged to keep going.


00:54:57.480 --> 00:54:58.800
I do think there's two things.


00:54:58.800 --> 00:55:02.400
One, I love the Wallrace operator as well,


00:55:02.400 --> 00:55:05.120
although I've taken down my website with it on accident


00:55:05.120 --> 00:55:06.920
because there were some utility scripts


00:55:06.920 --> 00:55:09.320
that were not loaded by the website that I thought,


00:55:09.320 --> 00:55:12.360
oh, I can put my newer code over here.


00:55:12.360 --> 00:55:14.480
And it was three, seven on the server,


00:55:14.480 --> 00:55:17.280
but the server, the web framework scans all the files


00:55:17.280 --> 00:55:20.760
to try to find routes, URLs, even if you don't call it


00:55:20.760 --> 00:55:22.080
and it didn't work so well.


00:55:22.080 --> 00:55:24.160
But I also love it.


00:55:24.160 --> 00:55:25.600
I think the other thing is there's gonna be


00:55:25.600 --> 00:55:29.880
an interesting blip in this graph over time


00:55:29.880 --> 00:55:32.360
from going, 'cause it goes three eight, three nine,


00:55:32.360 --> 00:55:34.400
then three 10, and it's sort of this curve


00:55:34.400 --> 00:55:38.320
of what you expect, like a normal-ish distribution.


00:55:38.320 --> 00:55:40.920
I think the performance that's coming in 3.11


00:55:40.920 --> 00:55:42.760
is gonna make a lot of people say,


00:55:42.760 --> 00:55:45.480
no, no, no, it's time to be cutting edge.


00:55:45.480 --> 00:55:47.720
We're going to get such a boost from it


00:55:47.720 --> 00:55:50.980
that we're willing to jump not just to 3.10, but to 3.11.


00:55:50.980 --> 00:55:55.980
I was trying to pull up the graph here for us.


00:55:55.980 --> 00:56:00.340
Yeah, there's some amazing numbers for that.


00:56:00.340 --> 00:56:02.280
Maybe the core devs on the team


00:56:02.280 --> 00:56:03.380
wanna speak real quick to this,


00:56:03.380 --> 00:56:06.600
but there was Eduardo pointed out,


00:56:06.600 --> 00:56:08.980
there's this article, maybe you all have seen it.


00:56:08.980 --> 00:56:12.180
This says the Python 3.11 performance benchmarks


00:56:12.180 --> 00:56:13.700
are looking fantastic.


00:56:13.700 --> 00:56:16.120
And it's kind of hard to navigate this thing.


00:56:16.120 --> 00:56:17.680
But if you cruise through here,


00:56:17.680 --> 00:56:22.680
you see some really meaningful performance improvements,


00:56:22.680 --> 00:56:26.060
like 40% for certain use cases and so on.


00:56:26.060 --> 00:56:29.760
So, you know, Brett and Emily, what do you think about this?


00:56:29.760 --> 00:56:31.800
More people kind of jumping over 3.10


00:56:31.800 --> 00:56:34.280
to get to this faster Python.


00:56:34.280 --> 00:56:38.080
- So I think in general, you're right.


00:56:38.080 --> 00:56:40.840
I think when 3.11 comes out and people start talking


00:56:40.840 --> 00:56:43.680
about how they're getting like bare minimum 5%


00:56:43.680 --> 00:56:46.240
and in certain benchmarks, 60%,


00:56:46.240 --> 00:56:49.740
which averages out probably roughly to 20% for most people.


00:56:49.740 --> 00:56:53.580
I think that's going to cause a lot of people to perk up and go, "Yeah, we should jump."


00:56:53.580 --> 00:56:56.960
Now, having said that, there is the potential for compatibility concerns


00:56:56.960 --> 00:57:01.720
because so much of the internals have had to be uprooted and changed


00:57:01.720 --> 00:57:04.220
that if you're, depending on an extension module,


00:57:04.220 --> 00:57:09.100
there's some really deep mucking around with CPython internals.


00:57:09.100 --> 00:57:11.740
They might have to spend some time still to get updated.


00:57:11.740 --> 00:57:14.700
so there might also be some cohort of users


00:57:14.700 --> 00:57:17.100
that get held up because of that.


00:57:17.100 --> 00:57:21.060
But yeah, I suspect most people are not in that group,


00:57:21.060 --> 00:57:23.820
and so they will be able to jump straight over


00:57:23.820 --> 00:57:26.180
and people are gonna go, "Oh, wow, this is so much faster."


00:57:26.180 --> 00:57:28.060
For literally just business reasons alone


00:57:28.060 --> 00:57:30.860
of just literally saving on your compute costs,


00:57:30.860 --> 00:57:32.380
let's switch to 311.


00:57:32.380 --> 00:57:34.660
Like, I think this is gonna be one of those,


00:57:34.660 --> 00:57:36.340
you can go to management and convince them


00:57:36.340 --> 00:57:38.060
that you update your code


00:57:38.060 --> 00:57:40.900
because the amount of money you're gonna save on your cost


00:57:40.900 --> 00:57:43.660
is going to be high enough that it's worth putting the time and effort in.


00:57:43.660 --> 00:57:46.260
Versus the other times where it's the engineers coming to management going,


00:57:46.260 --> 00:57:49.620
I want the wall or so afraid. Why will you let me have this? Right.


00:57:49.620 --> 00:57:52.580
And they all like, well, it's not worth it. Just keep doing it.


00:57:52.580 --> 00:57:56.460
Whereas now like we can save 20% off our compute costs. Oh, okay. Yeah.


00:57:56.460 --> 00:57:57.660
Let's go ahead and do this. Right. So.


00:57:57.660 --> 00:57:59.660
Yep, exactly.


00:57:59.660 --> 00:58:02.740
Everyone will eventually get Emily's walrus operator, hell or high water.


00:58:02.740 --> 00:58:06.220
And meanwhile, I'll, I'll,


00:58:06.220 --> 00:58:10.580
I'll probably for all eternity of OctoPrince development will be stuck on


00:58:10.580 --> 00:58:15.580
whatever is the latest that is still supported kind of thing


00:58:15.580 --> 00:58:17.260
or the oldest.


00:58:17.260 --> 00:58:18.080
- Right, right.


00:58:18.080 --> 00:58:19.280
So 3.7, yep.


00:58:19.280 --> 00:58:21.340
- Yeah, so currently I'm still stuck on,


00:58:21.340 --> 00:58:23.580
stuck, I mean, I'm happy I'm finally on 3.7


00:58:23.580 --> 00:58:27.700
and not on 2.7, but I hear Walrus operator


00:58:27.700 --> 00:58:30.260
and I hear matching and pattern matching


00:58:30.260 --> 00:58:32.420
and I hear all this stuff and this looks so amazing


00:58:32.420 --> 00:58:33.980
and I would love to play around with it,


00:58:33.980 --> 00:58:37.740
but maybe in five years or so, I don't know.


00:58:37.740 --> 00:58:40.180
For now it's like, yeah.


00:58:40.180 --> 00:58:42.660
If you have to support something that people install


00:58:42.660 --> 00:58:44.260
on their OS provider's Python,


00:58:44.260 --> 00:58:46.860
then you are, yeah, a bit out of luck.


00:58:46.860 --> 00:58:51.540
- Absolutely, very interesting angle there


00:58:51.540 --> 00:58:52.660
that you're constrained by.


00:58:52.660 --> 00:58:54.780
All right, I wanna just, we only have time for one more.


00:58:54.780 --> 00:58:56.940
I want to, oh my gosh.


00:58:56.940 --> 00:59:01.900
I wanna find out how long people, two things actually.


00:59:01.900 --> 00:59:05.380
Let's just, I think since we have two,


00:59:05.380 --> 00:59:09.540
a representative for V2 major.


00:59:09.540 --> 00:59:11.700
(laughing)


00:59:11.700 --> 00:59:13.740
Editors, let's real quick,


00:59:13.740 --> 00:59:17.100
maybe Brett and Paul give us your thoughts on


00:59:17.100 --> 00:59:19.780
if I'm going to use,


00:59:19.780 --> 00:59:21.900
I'm gonna write some code,


00:59:21.900 --> 00:59:24.220
you know, what editor do I use, right?


00:59:24.220 --> 00:59:26.740
It's VS Code and PyCharm,


00:59:26.740 --> 00:59:29.340
pretty close neck and neck,


00:59:29.340 --> 00:59:30.300
and then it just tails off


00:59:30.300 --> 00:59:32.740
to some insane long tail after that.


00:59:32.740 --> 00:59:35.380
I mean, honestly, this must make both of you pretty happy


00:59:35.380 --> 00:59:38.300
that playing such an important role up front.


00:59:38.300 --> 00:59:43.300
- Yeah, especially, I mean, PyCharm's been up there


00:59:43.300 --> 00:59:49.340
from the get-go, the start of this survey,


00:59:49.340 --> 00:59:52.980
and us little spunky folk over at VS Code


00:59:52.980 --> 00:59:55.100
have finally caught up to PyCharm,


00:59:55.100 --> 00:59:55.940
'cause if you go back to 2017--


00:59:55.940 --> 00:59:58.520
- You and all your extensions, that's what it is.


00:59:58.520 --> 01:00:02.740
- 'Cause if you go back to 2017,


01:00:02.740 --> 01:00:03.860
when this was actually added,


01:00:03.860 --> 01:00:07.260
we were sixth or seventh on that list.


01:00:07.260 --> 01:00:10.940
So we're fairly lucky that the community has decided


01:00:10.940 --> 01:00:15.340
that we are worthy as it were to be up there with PyCharm.


01:00:15.340 --> 01:00:16.580
So yeah.


01:00:16.580 --> 01:00:18.100
- Yeah, awesome.


01:00:18.100 --> 01:00:20.220
- I think one of the, an interesting story for this


01:00:20.220 --> 01:00:25.060
is just smart editing in general.


01:00:25.060 --> 01:00:26.940
When we're just looking at the distribution


01:00:26.940 --> 01:00:31.700
of Python releases for me, I think it's 78% is 3.8 or higher


01:00:31.700 --> 01:00:33.060
which is great news for me


01:00:33.060 --> 01:00:35.300
because I like the typing convenience,


01:00:35.300 --> 01:00:37.840
type hinting conveniences that started to appear


01:00:37.840 --> 01:00:39.100
in 3.8 and after.


01:00:39.100 --> 01:00:44.360
And it's just a wonderful surprise to me


01:00:44.360 --> 01:00:47.960
that the PyCharm community or Python community values


01:00:47.960 --> 01:00:53.420
typing and values tooling that puts that to work


01:00:53.420 --> 01:00:55.260
to help you write better code.


01:00:55.260 --> 01:00:58.540
So for when I look at this, I see this to a degree


01:00:58.540 --> 01:01:01.420
as a demand for smart tooling, smart editing.


01:01:02.900 --> 01:01:05.620
- Yeah, and I think that's a really good point


01:01:05.620 --> 01:01:09.780
that not only, I think it's two signals.


01:01:09.780 --> 01:01:12.080
It's one, the community, as Paul said,


01:01:12.080 --> 01:01:14.160
picking up on typing and smart tooling, I wanna do that,


01:01:14.160 --> 01:01:17.900
but also the tool makers,


01:01:17.900 --> 01:01:19.720
I'm speaking for myself,


01:01:19.720 --> 01:01:21.580
realizing that the Python community is big enough


01:01:21.580 --> 01:01:23.140
and important enough to invest in it, right?


01:01:23.140 --> 01:01:26.260
Because there's always been a conflict of,


01:01:26.260 --> 01:01:29.620
oh, smart tooling for Python's hard,


01:01:29.620 --> 01:01:31.500
but I don't wanna do it, right?


01:01:31.500 --> 01:01:33.780
which is honestly kind of good in a weird way


01:01:33.780 --> 01:01:35.940
'cause it led to us having such a good tradition


01:01:35.940 --> 01:01:37.580
of documentation, right?


01:01:37.580 --> 01:01:39.180
And people care so much about that.


01:01:39.180 --> 01:01:41.260
I mean, like I know what Michael and Paul have done


01:01:41.260 --> 01:01:43.380
around Mist and then their tutorials and that coming up


01:01:43.380 --> 01:01:45.100
and being a thing and was continuously caring


01:01:45.100 --> 01:01:47.300
about our documentation tooling and all that.


01:01:47.300 --> 01:01:49.900
But it's also, I think just a showing of,


01:01:49.900 --> 01:01:52.200
yeah, just where we've all come from all directions,


01:01:52.200 --> 01:01:55.100
both from a support perspective, the community perspective,


01:01:55.100 --> 01:01:58.060
and just getting to the point where this,


01:01:58.060 --> 01:02:00.200
everyone views this as totally reasonable and possible


01:02:00.200 --> 01:02:02.720
and something people can totally rely on and push on.


01:02:02.720 --> 01:02:05.320
And the community going along with it and going like,


01:02:05.320 --> 01:02:06.240
yeah, this is fantastic.


01:02:06.240 --> 01:02:08.520
We now have the equivalent tooling, more or less,


01:02:08.520 --> 01:02:10.160
of other languages, isn't this fantastic?


01:02:10.160 --> 01:02:11.800
Versus, oh, I don't wanna use Python


01:02:11.800 --> 01:02:13.320
'cause I don't get auto-complete, right?


01:02:13.320 --> 01:02:14.880
'Cause I know that used to be a big complaint


01:02:14.880 --> 01:02:16.920
I used to get, which is, once again,


01:02:16.920 --> 01:02:19.120
the history of us pushing for good documentation,


01:02:19.120 --> 01:02:22.040
good names and caring and all that stuff and API design.


01:02:22.040 --> 01:02:24.440
So I think, ironically, not having this


01:02:24.440 --> 01:02:25.840
at the start of the community,


01:02:25.840 --> 01:02:27.880
back in the '90s and early 2000s,


01:02:27.880 --> 01:02:29.560
actually has become a benefit long-term


01:02:29.560 --> 01:02:33.540
because we have good practices that have now paid tenfold


01:02:33.540 --> 01:02:36.040
because good practices plus tooling now


01:02:36.040 --> 01:02:37.560
versus we'll just lean on the tooling


01:02:37.560 --> 01:02:38.560
and who cares what the name is


01:02:38.560 --> 01:02:40.560
because everyone's just going to hit dot anyway


01:02:40.560 --> 01:02:42.560
and just choose the first answer.


01:02:42.560 --> 01:02:45.560
- Mike, you know, I appreciate both of these.


01:02:45.560 --> 01:02:47.560
- Yeah, go ahead, Jay.


01:02:47.560 --> 01:02:49.060
- You know you can't bring me on the show


01:02:49.060 --> 01:02:51.060
without knowing I'm going to troll a little bit.


01:02:51.060 --> 01:02:55.560
So I just want to point out that the Vim/VimMode users


01:02:55.560 --> 01:02:59.060
are winning in the war between Vim and Emacs.


01:02:59.060 --> 01:03:02.680
- Yeah, it's three to one.


01:03:02.680 --> 01:03:08.600
Yeah, the Notepad++ folks, they're out there too.


01:03:08.600 --> 01:03:10.240
But excellent, all right, well,


01:03:10.240 --> 01:03:12.120
we are getting a little bit long on time


01:03:12.120 --> 01:03:14.440
for everyone on the show's time.


01:03:14.440 --> 01:03:16.560
I could sit here and talk for hours about this.


01:03:16.560 --> 01:03:18.880
This is such a great panel to be here


01:03:18.880 --> 01:03:20.580
and talking with you all about it.


01:03:20.580 --> 01:03:22.600
It's been super fascinating.


01:03:22.600 --> 01:03:25.560
So maybe we just close this out with,


01:03:25.560 --> 01:03:27.880
if you have any thoughts on where Python


01:03:27.880 --> 01:03:30.440
just recently come from and where it's going.


01:03:30.440 --> 01:03:34.180
I'll start it off with just WebAssembly, PyScript,


01:03:34.180 --> 01:03:39.180
very exciting new Py slice of where Python might show up


01:03:39.180 --> 01:03:40.720
and make big impacts.


01:03:40.720 --> 01:03:43.720
So thank you to everyone who's done that in particular,


01:03:43.720 --> 01:03:44.980
Brett, and I know Paul,


01:03:44.980 --> 01:03:47.040
you're working on PyScript stuff as well.


01:03:47.040 --> 01:03:51.940
Yeah, any thoughts?


01:03:51.940 --> 01:03:53.180
- Do you mind if I just start my quick?


01:03:53.180 --> 01:03:54.020
- Yeah.


01:03:54.020 --> 01:03:56.760
(laughs)


01:03:56.760 --> 01:03:59.120
I'll just say, I just hope the community continues


01:03:59.120 --> 01:04:01.720
to be as fantastic and wonderful as it is.


01:04:01.720 --> 01:04:03.780
I'm sure Emily and anyone else who got to be


01:04:03.780 --> 01:04:06.960
at PyCon in person this year got to relive that experience


01:04:06.960 --> 01:04:09.360
after a two year hiatus and got to see it still alive


01:04:09.360 --> 01:04:10.200
and thriving.


01:04:10.200 --> 01:04:12.760
And I mean, I've said this before,


01:04:12.760 --> 01:04:14.040
I'll just say I came for the language,


01:04:14.040 --> 01:04:15.040
but I did it for the community


01:04:15.040 --> 01:04:16.760
and I continue to stay for the community, right?


01:04:16.760 --> 01:04:18.720
Like I literally just got a career conversation


01:04:18.720 --> 01:04:22.120
with my manager last month and I opened with saying,


01:04:22.120 --> 01:04:24.040
the reason I'm here and the passion I hold


01:04:24.040 --> 01:04:25.080
is for this community.


01:04:25.080 --> 01:04:26.960
It's not even specifically for the language anymore.


01:04:26.960 --> 01:04:31.560
Language is the enabler to allow me to help bring more wonderful people to this


01:04:31.560 --> 01:04:34.960
community and to help others get to enjoy and benefit from this community.


01:04:34.960 --> 01:04:39.200
And I hope that's the future is this community needs to thrive and grow and


01:04:39.200 --> 01:04:42.880
be an open welcoming place for everyone who needs that place in their lives.


01:04:42.880 --> 01:04:46.160
I just want to say seven years.


01:04:46.160 --> 01:04:52.200
It took me seven years to go from, Hey, this Python thing looks cool.


01:04:52.200 --> 01:04:54.680
I would love to work with this in my day to day.


01:04:54.680 --> 01:04:59.680
to now I'm in a job where my focus is working on Python.


01:04:59.680 --> 01:05:02.640
And I don't think that,


01:05:02.640 --> 01:05:04.680
part of that is just me being persistent and ornery,


01:05:04.680 --> 01:05:06.920
I guess, but then like the other part of that


01:05:06.920 --> 01:05:10.000
is the fact that the community continues to grow,


01:05:10.000 --> 01:05:12.660
the resources continue to grow.


01:05:12.660 --> 01:05:14.880
I feel Emily's pain with working with Ruby.


01:05:14.880 --> 01:05:18.080
My first programming language was learning Ruby.


01:05:18.080 --> 01:05:21.140
And the thing that made me switch from Ruby to Python


01:05:21.140 --> 01:05:23.200
was that community.


01:05:23.200 --> 01:05:26.600
So, you know, we have a couple of PSF folks


01:05:26.600 --> 01:05:27.880
and core maintainers here.


01:05:27.880 --> 01:05:30.080
You know, thank you for making the language what it is,


01:05:30.080 --> 01:05:32.280
but also thank you for making the community what it is.


01:05:32.280 --> 01:05:34.440
Because without it, I don't think I would be


01:05:34.440 --> 01:05:36.000
in the role that I'm at today.


01:05:36.000 --> 01:05:41.120
- I would like to just hook into this as well,


01:05:41.120 --> 01:05:46.120
because I went to my very first German PyCon in 2018.


01:05:46.120 --> 01:05:48.840
I felt utterly out of my space.


01:05:48.840 --> 01:05:51.680
I had large imposter syndrome,


01:05:51.680 --> 01:05:53.080
because who was I?


01:05:53.080 --> 01:05:55.800
I was this service project maintainer


01:05:55.800 --> 01:05:58.720
who had actually self-taught herself Python


01:05:58.720 --> 01:06:01.200
'cause she developed a project in that.


01:06:01.200 --> 01:06:06.200
And now I had the courage to go to a PyCon


01:06:06.200 --> 01:06:10.760
and I sat there and people just started talking to me


01:06:10.760 --> 01:06:12.240
and I had all very nice chats.


01:06:12.240 --> 01:06:16.740
And actually the next PyCon, I held my first talk at one.


01:06:16.740 --> 01:06:21.520
So I can't say that I have ever felt so welcome


01:06:21.520 --> 01:06:24.520
in the community ever before than in the Python community.


01:06:24.520 --> 01:06:27.120
So thank you very much for that.


01:06:27.120 --> 01:06:27.960
- Yeah, that's fantastic.


01:06:27.960 --> 01:06:28.920
- That's awesome.


01:06:28.920 --> 01:06:32.540
Yeah, that seems to be a common trend on our talk today.


01:06:32.540 --> 01:06:36.160
So yeah, I actually started out programming with Java.


01:06:36.160 --> 01:06:39.960
Then I moved to Ruby, like some other people here did.


01:06:39.960 --> 01:06:43.120
And then I just wasn't,


01:06:43.120 --> 01:06:45.400
I didn't feel like the community was as supportive.


01:06:45.400 --> 01:06:47.000
And then when I moved to Python,


01:06:47.000 --> 01:06:48.920
it was just like, you know, light bulb came on


01:06:48.920 --> 01:06:51.460
and the community has been absolutely amazing.


01:06:51.460 --> 01:06:54.300
So thank you to everyone who is supporting me


01:06:54.300 --> 01:06:55.020
in the community.


01:06:55.020 --> 01:06:56.860
Thank you to our core developers as well.


01:06:56.860 --> 01:07:00.220
I'm definitely excited to see, of course, where PyScript goes


01:07:00.220 --> 01:07:02.940
and also to see where some of the other types of things


01:07:02.940 --> 01:07:05.340
go, like mobile development and game development as well.


01:07:05.340 --> 01:07:09.360
Totally.


01:07:09.360 --> 01:07:13.280
All right.


01:07:13.280 --> 01:07:17.340
Well, I'm looking at all you here on the screen


01:07:17.340 --> 01:07:19.580
and just realizing what a great community it is,


01:07:19.580 --> 01:07:21.520
what awesome contributions you all have made.


01:07:21.520 --> 01:07:23.980
So thank you for being on the show.


01:07:23.980 --> 01:07:26.140
Thank you for reflecting on the survey


01:07:26.140 --> 01:07:27.420
and the state of the community with me.


01:07:27.420 --> 01:07:29.020
It's been great to have you here.


01:07:29.020 --> 01:07:30.180
See you all later.


01:07:30.180 --> 01:07:31.340
- Thanks, Michael.


01:07:31.340 --> 01:07:32.180
- Thank you.


01:07:32.180 --> 01:07:33.100
- Yep, bye.


01:07:33.100 --> 01:07:43.100
[BLANK_AUDIO]

