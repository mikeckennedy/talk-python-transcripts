WEBVTT

00:00:00.001 --> 00:00:04.480
Stephanie, welcome to Talk Python To Me. It's awesome to have you.

00:00:04.480 --> 00:00:05.840
Stephanie Pau: Thanks for having me.

00:00:05.840 --> 00:00:12.560
Yeah. Really looking forward to talking about pre-commit hooks. These are things that

00:00:12.560 --> 00:00:17.520
I'm sure a lot of people have heard of, I've certainly heard of, but to be honest, it's not

00:00:17.520 --> 00:00:22.320
much I've done very much with. And I bet a lot of people out there listening are like,

00:00:22.320 --> 00:00:25.760
yeah, that'd be a good idea. Just like continuous integration and writing tests.

00:00:25.760 --> 00:00:30.960
Now let's get back to it. Something like that. So I think there's a lot for people to take on,

00:00:30.960 --> 00:00:36.960
take away here. And we'll talk about what are these pre-commit hooks, when to use them,

00:00:36.960 --> 00:00:42.080
how to build them, and a whole bunch of other things that you're up to. So it should be a lot

00:00:42.080 --> 00:00:44.080
of fun. I'm looking forward to it. Stephanie Pau: Me too.

00:00:44.080 --> 00:00:49.760
Stephanie Pau: Yeah. Now, before we get to that, how about your story? How did you get into programming

00:00:49.760 --> 00:00:56.480
Python and pre-commit hooks and all these things? Stephanie Pau: Oh, well, so I, hello everyone.

00:00:56.480 --> 00:01:04.240
I'm Stephanie Molin. I am a software engineer at Bloomberg. And I would say, I guess I got into

00:01:04.240 --> 00:01:11.920
programming in Python. I initially was programming in R and I was doing more data analysis while still

00:01:11.920 --> 00:01:18.720
building some things. And I needed to build a web app. And one of my teammates had suggested that

00:01:18.720 --> 00:01:25.200
rather than battling with Shiny in R, that I just learn Python. So I took a few weeks and just forced

00:01:25.200 --> 00:01:29.680
myself to do that. And I built something with Flask and that was how I got into it.

00:01:29.680 --> 00:01:38.880
Stephanie Pau: Oh, that's really awesome. Yeah. You were doing work in, not finance, but in ads or

00:01:38.880 --> 00:01:43.040
something like that with R? What kind of work was that? I would just generally, I'd have to go into

00:01:43.040 --> 00:01:49.920
details. Stephanie Pau: Yeah. So it was mainly reporting and doing analysis on how client campaigns

00:01:49.920 --> 00:01:55.120
were going. But what really got me started with programming was more, I had gotten involved with

00:01:55.120 --> 00:02:00.240
a hackathon team and we had built an alerting system. So just monitoring when something weird

00:02:00.240 --> 00:02:07.120
went on with the campaigns. And I really enjoyed building more so than the analysis. And so I had to

00:02:07.120 --> 00:02:14.480
find a way to, and I enjoy a little bit of data and more on the coding side. So I had to find something

00:02:14.480 --> 00:02:19.360
that would let me combine those two. Yeah. Well, that sounds really fun. I definitely,

00:02:19.360 --> 00:02:27.440
I'm on the same wavelength as you with data analysis is fun, but the building is really where things get

00:02:27.440 --> 00:02:32.560
interesting and just look back and see like, oh, we built this thing. That's a pretty awesome feeling.

00:02:32.560 --> 00:02:36.640
Stephanie Pau: Yeah. It was a ton of fun. And we ended up getting, I think,

00:02:37.200 --> 00:02:43.200
third place on the hackathon. But yeah, that was really that moment where it was like, I got to

00:02:43.200 --> 00:02:47.120
taste of something else. And I was like, this is what I want to be doing. So.

00:02:47.120 --> 00:02:51.440
Stephanie Pau: Oh, that's fantastic. Was that at your company or was that some other thing you did?

00:02:51.440 --> 00:02:55.120
Stephanie Pau: That was at the previous role. It was the ad tech company. And so

00:02:55.120 --> 00:02:58.880
that was actually all built in R, the alerting system. And then-

00:02:58.880 --> 00:03:00.480
Stephanie Pau: Oh, no. Yeah. Okay.

00:03:00.480 --> 00:03:06.000
Stephanie Pau: Yeah. And then, and then as we worked more on it, certain things ended up moving

00:03:06.000 --> 00:03:12.160
into Python. So it's a lot easier to work with and to automate things and not have like some laptop

00:03:12.160 --> 00:03:13.040
running R somewhere because, you know.

00:03:13.040 --> 00:03:22.320
Stephanie Pau: Yeah, exactly. It's, that's sort of the promise of Python over a lot of these things that

00:03:22.320 --> 00:03:28.480
at first blush seem somewhat equivalent, right? Is that it's, it's a real programming language that

00:03:28.480 --> 00:03:35.600
can go on to do all the stuff. You don't have to, you know, try to automate some weird thing that's

00:03:35.600 --> 00:03:37.040
Stephanie Pau: Yeah. That's not really meant to be that way. Right?

00:03:37.040 --> 00:03:41.920
Stephanie Pau: I know. And then now, I mean, I could not write R if I, if I had to, I wouldn't,

00:03:41.920 --> 00:03:43.200
I don't think I would write it.

00:03:43.200 --> 00:03:46.480
Stephanie Pau: Really? Yeah. Well, I was going to ask you, well, now,

00:03:46.480 --> 00:03:50.400
which side of the fence do you spend more time on R or Python? It sounds like-

00:03:50.400 --> 00:03:56.080
Stephanie Pau: I haven't touched R in maybe six plus years at this point. So I, yeah. Other than the

00:03:56.080 --> 00:03:57.840
arrows, that's probably the only thing I could know.

00:03:57.840 --> 00:04:04.960
Stephanie Pau: Yeah. No more equal size, just arrows. Okay. Got it. Awesome. Well,

00:04:04.960 --> 00:04:12.160
Stephanie Pau: That's super fun. Let's talk about pre-commit hooks, right? I've had Anthony

00:04:12.160 --> 00:04:18.400
Sotili on the show to talk about his pre-commit project was a long time ago. And I'm sure that

00:04:18.400 --> 00:04:24.480
project will get a bit of a shout out from your work as well. But, you know, congrats, you put together

00:04:24.480 --> 00:04:34.320
a really nice series of articles and resources, teaching people what commit hooks are, how to debug them, how to

00:04:34.320 --> 00:04:39.200
build them, how to choose them. So I think the stuff we're going to talk about, I'll link, of course,

00:04:39.200 --> 00:04:41.920
in the show notes, it's a really nice resource for folks. So-

00:04:41.920 --> 00:04:43.120
Stephanie Pau: Thank you. I appreciate that.

00:04:43.120 --> 00:04:50.400
Stephanie Pau: Yeah. Yeah. You bet. So let's talk about NumPy doc, doc string validation.

00:04:50.400 --> 00:04:56.400
This was your entry way into what this whole world of pre-commit hooks is, right?

00:04:56.400 --> 00:05:03.520
Stephanie Pau: Yeah. So, and I think, yeah, July, 2022, I was at my first EuroPython.

00:05:03.680 --> 00:05:08.560
Stephanie Pau: And I decided to do the sprints for the first time. I ended up working with the

00:05:08.560 --> 00:05:14.560
scikit-learn team. And they wanted to make sure that all of their doc strings were conforming to the

00:05:14.560 --> 00:05:21.360
NumPy doc standard. They had a file in place or a test file that you could run and just validate that

00:05:21.360 --> 00:05:28.880
whatever changes you made were now being validated as far as doc strings. And I remember at one point,

00:05:28.880 --> 00:05:35.040
Stephanie Pau: I had, I think, done 12 or so PRs in that sprint. So I was very productive. And there was

00:05:35.040 --> 00:05:40.560
one early on, I think in the second or so, where it just wasn't working. And I couldn't figure out why

00:05:40.560 --> 00:05:47.120
it was telling me it wasn't valid. It was saying that it wasn't ending in a period. And I had called over

00:05:47.760 --> 00:05:51.840
Stephanie Pau: The one of the maintainers and we both stared at it. To us, it looked like a period.

00:05:51.840 --> 00:05:57.520
Stephanie Pau: And I ended up just deleting the doc string and starting over. And it turned out that it

00:05:57.520 --> 00:06:03.120
Stephanie Pau: was a trailing space at the end. And so I had asked the maintainer, like, how do you not

00:06:03.120 --> 00:06:08.480
have this happen to you? And the response was, you should install pre-commit. And by then I had,

00:06:08.480 --> 00:06:14.320
I was already, I had to leave. So I was like, make, I made a note to myself. I need to research this when

00:06:14.320 --> 00:06:20.640
I get home. And when I did, I was like, how did I not know about this before? And I set it up on things.

00:06:20.640 --> 00:06:26.720
Stephanie Pau: And then I went to look, does NumPyDoc have that? This seems like exactly what you would

00:06:26.720 --> 00:06:30.880
want. And as you're writing code, you want to make sure that it's going to check the doc string there.

00:06:30.880 --> 00:06:34.320
Stephanie Pau: You don't want to have to run some other thing later on and remember to run it.

00:06:34.320 --> 00:06:42.000
Stephanie Pau: So I looked and there was no pre-commit hook for NumPyDoc. And I had made something,

00:06:42.000 --> 00:06:48.640
something that initially we had just used internally within my team. And then later on, I kind of wanted to

00:06:48.640 --> 00:06:55.200
use it for a personal project. And so I set about seeing how we could actually open source it. And

00:06:55.200 --> 00:07:01.200
I had contacted the NumPyDoc team and they were very, very interested in it because there was a

00:07:01.200 --> 00:07:06.880
reason there was no focus because no one knew how to do it. Right. And at that point, I had the horrible

00:07:06.880 --> 00:07:12.640
realization that what I had written would never work outside because it was relying on things being

00:07:12.640 --> 00:07:19.520
installed. So, and then I felt pretty bad about promising that to them. So I managed to come up

00:07:19.520 --> 00:07:27.600
with an entirely new solution in a weekend and figured out how to use the abstract syntax tree to work

00:07:27.600 --> 00:07:33.120
through. And so I built an entirely new version of it. And that is what is currently available in

00:07:33.120 --> 00:07:39.680
NumPyDoc. And that actually led to them inviting me to be a core developer for NumPyDoc.

00:07:39.680 --> 00:07:42.320
Stephanie Pau: Congratulations. How cool is that?

00:07:42.320 --> 00:07:48.000
Stephanie Pau: Yeah, I know. It's like the full spectrum, right? Just having heard about it and then just

00:07:48.000 --> 00:07:51.520
seeing the connection between two things that weren't previously connected.

00:07:51.520 --> 00:07:55.200
Stephanie Pau: Yeah. Yeah. Well, I think your comment about

00:07:56.400 --> 00:08:03.440
the pre-commit hook not previously existing for this project also is pretty interesting, right?

00:08:03.440 --> 00:08:07.200
It's kind of like I hinted at. I mean, a lot of people hear about this kind of stuff, but

00:08:07.200 --> 00:08:10.000
that doesn't mean they're putting it into practice, right?

00:08:10.000 --> 00:08:12.560
Stephanie Pau: Yeah, for sure.

00:08:12.560 --> 00:08:17.200
Stephanie Pau: And so how do we, you know, let's find our way over to pre-commit

00:08:17.200 --> 00:08:22.960
hooks in general. So how do we encourage people or ensure that people

00:08:24.160 --> 00:08:30.320
follow coding rules, right? We've got tools like Black. We've got tools like Rough.

00:08:30.320 --> 00:08:37.680
Now those will work awesome if you give them a consistent config file or config settings,

00:08:37.680 --> 00:08:44.640
not so much with Black, but with Rough. Anyway, they'll make those changes and do a lot of the

00:08:44.640 --> 00:08:48.960
kind of stuff that we're talking about here. But that requires, like you said, people to have it installed,

00:08:49.520 --> 00:08:57.040
people to run it, and people to buy into the whole concept of the project in the first place, right?

00:08:57.040 --> 00:08:59.280
Stephanie Pau: Yeah, that lasts for a minute.

00:08:59.280 --> 00:09:02.640
Stephanie Pau: We're all using these tools and we're all going to run them and we're going to remember

00:09:02.640 --> 00:09:07.440
to run them until one person goes, "I don't like these tools. I'm not doing it." And then their

00:09:07.440 --> 00:09:11.760
settings fight with your settings or their spacing fights with your spacing or whatever, right?

00:09:11.760 --> 00:09:18.240
Stephanie Pau: Yeah. I think what has, what really helped in my experience when you incorporate these

00:09:18.240 --> 00:09:22.240
things, even like going and approaching open source projects that didn't have a pre-commit setup and

00:09:22.240 --> 00:09:28.240
just asking if they were interested in it, it's, you really see the value when you've, you think if

00:09:28.240 --> 00:09:33.600
you've ever reviewed something or gotten review comments about, "You should start a new line here. I

00:09:33.600 --> 00:09:39.440
don't like this space here." And then you think about how much time you waste at that stage. And then you

00:09:39.440 --> 00:09:47.680
still have zero consistency because you did it one way, someone else does it another way. And even, even further than that, it's just the time you waste

00:09:47.680 --> 00:09:53.120
in your code. Oh, I should put this on a new line and reformatting files when you could actually be

00:09:53.120 --> 00:10:00.960
writing things and thinking about how should I design this algorithm, right? And so I think a big part of

00:10:00.960 --> 00:10:06.000
making sure that once you find these tools that you're going to use and actually make sure they're using,

00:10:06.000 --> 00:10:11.680
it's making it easy to use. Like you said, yeah, you can just run black or rough, but you have to remember to run

00:10:11.680 --> 00:10:18.400
black or rough. And that is the key problem. And what's so great about pre-commit or even extensions in

00:10:18.400 --> 00:10:24.960
your IDE is that these things become automatic and that's what you need to get towards for these things to actually stick.

00:10:24.960 --> 00:10:35.680
Yeah, to make them automatic and not part of it. And to some degree, continuous integration can do those kinds of things.

00:10:35.680 --> 00:10:36.400
Yeah.

00:10:36.400 --> 00:10:40.480
But a lot of times it's too late at that point. It's already checked in, it's already committed,

00:10:40.480 --> 00:10:46.640
and then you've got the back and forth of now it's a diff, but it's only a diff because they spaced it

00:10:46.640 --> 00:10:53.120
differently when they hit save in their IDE than when you hit save in yours and all that. So pre-commit

00:10:53.120 --> 00:10:58.080
hooks run prior to actually leaving your computer, right?

00:10:58.080 --> 00:11:04.720
Yeah. So it's actually prior to even the commit. So when you do get commit and you, let's say you pass

00:11:04.720 --> 00:11:10.240
your message and if it's successful, you normally, you see the hash that gets generated. If you have

00:11:10.240 --> 00:11:17.200
pre-commit hooks enabled, then if that, those checks don't pass, then that commit never gets created in the

00:11:17.200 --> 00:11:22.960
first place. So you still have the files staged, but nothing has made it to the commit.

00:11:22.960 --> 00:11:25.040
Yeah. That's great.

00:11:25.040 --> 00:11:30.160
And yeah, I was just going to explain maybe a little bit about how they work if you're curious.

00:11:30.160 --> 00:11:34.080
Yeah. Yeah. Well, let's start with just like, what even are, are these pre-commit hooks?

00:11:34.080 --> 00:11:42.320
Yeah. So pre-commit hooks, and I think the naming is quite overloaded and that leads to a lot of confusion.

00:11:42.320 --> 00:11:51.120
So at the lowest level, a Git repository in general supports a hooks system. So there's a variety of

00:11:51.120 --> 00:11:57.360
different types of actions that Git will trigger a script on your behalf. And one of those such

00:11:57.360 --> 00:12:02.800
actions is pre-commit. So as I described before, as you run Git commit, this gets triggered. Another

00:12:02.800 --> 00:12:07.600
thing might be pushing. You can have Git wired to run some script when you push.

00:12:09.200 --> 00:12:15.440
So that is Git's version of pre-commit and hook, singular hook, because you can only have a single

00:12:15.440 --> 00:12:19.280
file run. Single executable can run. So then-

00:12:19.280 --> 00:12:26.480
Right. If you go to your, it's in the Git folder, there's a hooks subfolder and it's got little samples

00:12:26.480 --> 00:12:28.400
for all the different lifecycle things, right?

00:12:28.400 --> 00:12:34.240
Yeah. And yeah, they provide some, they have to, like I said, they had to be executable,

00:12:34.240 --> 00:12:38.800
but you can be in any language that you have available on the machine. And so Git provides

00:12:38.800 --> 00:12:44.320
some examples. I do think there are a few stages that don't have examples, but it's basically,

00:12:44.320 --> 00:12:48.640
you take the name of the stage that you're going to use, and that's the name of the file.

00:12:48.640 --> 00:12:53.600
And that has to be an executable and Git will run it at the designated moment.

00:12:53.600 --> 00:13:01.040
Okay. So it could be a Python executable, or it could be a Go executable or whatever,

00:13:01.040 --> 00:13:02.080
but it's just one, right?

00:13:02.080 --> 00:13:05.840
It's just one. Yeah. Because it has to be named, and like in the case of pre-commit,

00:13:05.840 --> 00:13:08.720
it has to be called pre-commit, nothing else.

00:13:08.720 --> 00:13:12.880
Right. Right. Right. So if you want to run more, you basically have to,

00:13:12.880 --> 00:13:18.560
potentially, write a program, which then itself figures out all the things to do.

00:13:19.200 --> 00:13:24.800
And then delegates to running them. Like if you want to run rough with a fixed formatting issues,

00:13:24.800 --> 00:13:31.760
and you want to run the checker fixer for NumPy doc strings and all those things,

00:13:31.760 --> 00:13:35.680
you'd have to write a sort of orchestrating program for that, right?

00:13:35.680 --> 00:13:39.040
Yeah. It's almost like you're writing in the case of like a bash script,

00:13:39.040 --> 00:13:44.080
like a giant bash script where you have to decide, you know, do you fail early? How do you like,

00:13:44.080 --> 00:13:48.480
and check, do I run this one and then this one? And then even worse, you're actually

00:13:48.880 --> 00:13:53.680
in that case, you're probably running everything, you know, you're running everything sequentially.

00:13:53.680 --> 00:13:58.720
And if you don't do it carefully, then, you know, maybe, maybe you want to fail early. Maybe you

00:13:58.720 --> 00:14:04.560
don't. That becomes very, very challenging to configure and also to share, because the thing

00:14:04.560 --> 00:14:09.520
about that file is that is not included in version control. So that would be something that you would

00:14:09.520 --> 00:14:15.600
maybe have to store somewhere else and then do a symbolic link. And then that becomes already a

00:14:15.600 --> 00:14:20.240
lot trickier for everyone to manage. Yeah. I was just doing that last night and that's an AI

00:14:20.240 --> 00:14:25.840
question. I don't remember how to do that. I know you can do it. It's not that hard. It involves

00:14:25.840 --> 00:14:31.040
ln, but you know, ChatGPT. What do I do exactly? It's ln-s. I've had to do that quite a bit.

00:14:31.040 --> 00:14:37.280
So it's burned into the brain, huh? So one of the things that you recommend,

00:14:37.920 --> 00:14:44.560
so we don't have to build this orchestration piece is actually pre-commit, which is a Python

00:14:44.560 --> 00:14:49.760
project, right? Yes. And it's not the only one. So again, that's where like the naming becomes

00:14:49.760 --> 00:14:54.960
challenging. But pre-commit is built in Python, but it can run hooks in a variety of languages.

00:14:54.960 --> 00:15:02.560
And it interfaces with GitHub's system for you. So it creates that executable and plants it there.

00:15:02.560 --> 00:15:07.760
But that executable is then pointing back to pre-commit so that you can just define a simple

00:15:07.760 --> 00:15:13.280
YAML file. Like you can see part of it on the screen right now. And it becomes very easy to,

00:15:13.280 --> 00:15:17.120
because essentially you're just configuring what you want to run. You're not actually coding the

00:15:17.120 --> 00:15:23.920
logic of the checks and how they relate to each other. Right. So let's assume that all the

00:15:23.920 --> 00:15:29.520
commit hooks that you want to run somehow exist out there in the world, right? You don't have to

00:15:29.520 --> 00:15:33.520
create them for the moment. So what you can do with pre-commit is you can set up a,

00:15:34.240 --> 00:15:42.560
is that a YAML file? I always get those crisscrossed. A YAML file, a pre-commit config YAML file,

00:15:42.560 --> 00:15:50.880
which then has a bunch of listings of here's a get repository. And if you install it as a Python

00:15:50.880 --> 00:15:56.560
package, here's a bunch of things that you can run on it, like check toml, check YAML, and so on,

00:15:56.560 --> 00:16:00.720
right? Well, it doesn't actually have to be a Python package, right? So in that repo,

00:16:00.720 --> 00:16:06.400
we're maybe jumping ahead, but there's a special file in that repo, which will tell pre-commit how

00:16:06.400 --> 00:16:08.480
it actually needs to install it. So it could be anything.

00:16:08.480 --> 00:16:15.120
Oh, that's interesting. So the thing that integrates with the pre-commit project, it has to

00:16:15.120 --> 00:16:21.760
opt in in a sense in that it has to have a configuration file or a launch file or setup file,

00:16:21.760 --> 00:16:26.880
something like that. Yeah. So right now we're looking at pre-commit config. There's pre-commit hooks,

00:16:27.360 --> 00:16:32.320
and that one is kind of registering it with pre-commit system. So it tells pre-commit

00:16:32.320 --> 00:16:38.480
how to install it once it gets a hold of it. And it also lists out these hooks that we see here under

00:16:38.480 --> 00:16:43.680
ID, but that will be defined over there so that pre-commit knows, well, what is check toml? What is

00:16:43.680 --> 00:16:50.640
check YAML? Mm-hmm. Okay. Yeah. Oh, that's really cool. And you can have more than one of these

00:16:50.640 --> 00:16:59.600
repositories in there, right? Correct. Essentially? Yeah. So the repos section is a list of repo lists,

00:16:59.600 --> 00:17:06.000
sections, and then each repo then has other config, like the individual hooks that you want to run from

00:17:06.000 --> 00:17:12.080
that repo. Right, right. So for the first example that you have in this, and this is your article,

00:17:12.080 --> 00:17:17.840
I guess I don't know if I should give this the proper announcement, but how to set up pre-commit

00:17:17.840 --> 00:17:23.040
hooks. This is your, I perceive this as kind of your getting started article for this whole series. I

00:17:23.040 --> 00:17:29.120
don't know if you see it that way. Yeah. Yeah. This was the first one. I had gotten a lot of questions on

00:17:29.120 --> 00:17:33.680
how to do this. And I think it's always interesting, especially when you think about, you know,

00:17:33.680 --> 00:17:39.040
speaking at conferences, I feel like, and which I do a lot of, and I feel like a lot of what gets more hits

00:17:39.040 --> 00:17:43.600
in that sense is like the advanced stuff, maybe more creating it, but there's so much value in

00:17:43.600 --> 00:17:48.240
people just getting started and figuring out how do I even use this in the first place? Because this

00:17:48.240 --> 00:17:54.160
saves you so much time. So I really, this was where I got started for that reason. I think a lot of

00:17:54.160 --> 00:18:01.360
people were able to benefit from this article. Yeah. It seems like it. I know it's fun to talk about

00:18:01.360 --> 00:18:07.520
the super advanced deep dive things, but most people, they just need to get started. They just need some

00:18:07.520 --> 00:18:13.840
foundation, right? And I think, I think that's actually where most of the benefit comes from,

00:18:13.840 --> 00:18:18.960
even though it is really fun to see some cool deep dive talk that people are going into, right?

00:18:18.960 --> 00:18:28.080
So this next one is pretty interesting that we're adding here in this example, and that's the rough

00:18:28.080 --> 00:18:34.640
pre-commit from straight from Astral, right? So this is just github.com/astral.sh, which is the

00:18:34.640 --> 00:18:40.800
company behind rough.nuv. And this is the rough pre-commit. But what's interesting about this is,

00:18:40.800 --> 00:18:46.400
well, one, that it has nothing to do with the pre-commit project, but two, that this one also

00:18:46.400 --> 00:18:53.840
takes special arguments that you can pass to it. Yeah. So I mean, I think the rough pre-commit one

00:18:53.840 --> 00:18:58.720
is just a smaller version so that it works faster with pre-commit because pre-commit will have to

00:18:58.720 --> 00:19:04.560
install these at some point. It will have a cache. So if you don't change like the version in this case,

00:19:04.560 --> 00:19:10.000
it will be able to reuse that. But that first time you do have a bit of a delay and that's not something

00:19:10.000 --> 00:19:14.400
you want, it's something you have to be very careful of when you want to be using these. And then the

00:19:14.400 --> 00:19:20.480
args thing is nice because you have a few options when you configure these tools, depending on what the

00:19:20.480 --> 00:19:24.480
the tool supports. In this case, rough supports, as I think we mentioned a little bit earlier,

00:19:24.480 --> 00:19:31.200
configuration file. So for example, you could have stuff in your pyproject.toml. But the key here is

00:19:31.200 --> 00:19:38.160
that maybe you're using rough in your IDE and maybe you don't want to do the same kind of changes that

00:19:38.160 --> 00:19:43.680
you want to do in pre-commit. Maybe you wanted to ask you if it's going to change something, whereas

00:19:43.680 --> 00:19:48.800
in the pre-commit stage, you definitely want it to be fixed. So you can use the args here to provide

00:19:48.800 --> 00:19:53.680
stuff that you only want to happen when it's running in the context of pre-commit.

00:19:53.680 --> 00:20:01.440
Yeah. And rough has a exit non-zero on fix, which means if it goes through and you say to fix it,

00:20:01.440 --> 00:20:09.440
it will fix it, but then it'll error out and say that wasn't a smooth transition or whatever,

00:20:09.440 --> 00:20:15.440
which is cool because that will then fail the commit itself, give you the modified files and

00:20:15.440 --> 00:20:20.960
say basically have a look. See if you like it now, right? Before it actually just ships it off.

00:20:20.960 --> 00:20:26.640
That's so important because sometimes you realize there was some rule that you hadn't reviewed before.

00:20:26.640 --> 00:20:31.680
That's not quite doing what I want and let me tweak my setup. So it's nice to have that bit where you

00:20:31.680 --> 00:20:37.280
can verify what was actually changed is what you want. Yeah. I guess it's a little bit dangerous to just say

00:20:38.160 --> 00:20:45.680
change it and then commit it. I've had people. So I did a workshop on pre-commit, both on setting it up

00:20:45.680 --> 00:20:51.440
and then making your own hooks at EuroPython this year. And I did have some, a few people actually,

00:20:51.440 --> 00:20:58.240
one very insistent asking me why wasn't there a hook or why don't they support just fixing it and then

00:20:58.240 --> 00:21:03.200
automatically adding it and committing it on your behalf. And to me as a person who works in security,

00:21:03.200 --> 00:21:08.800
that just sounds very scary. I don't want to do that. I want to see what is being changed and

00:21:08.800 --> 00:21:14.800
whether or not I agree with it or not. Yeah. Why doesn't it just go ahead and push it as well? Come on.

00:21:14.800 --> 00:21:18.240
Yeah. Well, I think that was, that was part of the suggestion. I was like, I certainly don't want

00:21:18.240 --> 00:21:24.800
that running on my machine. Yeah. It does skip out on some of the benefits of the multi-stage aspects

00:21:24.800 --> 00:21:29.040
of Git, I suppose, but it is efficient. You just get it done all at once. That's pretty cool.

00:21:29.040 --> 00:21:31.280
Yeah. But you don't know what else is grabbing, which is the scary part.

00:21:31.280 --> 00:21:34.400
No, of course not. I know. Super bad. So

00:21:35.840 --> 00:21:39.280
this example that we're talking about here where we've got a pre-commit hook

00:21:39.280 --> 00:21:46.880
that we're grabbing and then it takes these arguments. I think this is, this is an interesting

00:21:46.880 --> 00:21:51.200
point of discussion. So the example you have in your article just says, what we're going to tell

00:21:51.200 --> 00:21:59.520
rough is --fix, dash dash, exit non-zero fix and show fixes, which is all good. But rough can be

00:22:00.160 --> 00:22:06.080
pretty complex in its configuration, right? You can say disable flight gate, turn this one on. These

00:22:06.080 --> 00:22:11.760
are warnings. These are errors. And there's a whole, you know, here's how many line columns I want and

00:22:11.760 --> 00:22:18.480
all of this stuff. Right. So you can either do this argument thing, or if it's supported, you could also

00:22:18.480 --> 00:22:25.760
potentially have say a rough dot toml, right? Yeah. So I tend to want to minimize the amount of

00:22:25.760 --> 00:22:30.000
configuration files I have. So in my case, I think below I talk about having it in the

00:22:30.000 --> 00:22:35.360
pyproject.toml. Yeah, exactly. So you just add a rough section in there and then you configure things.

00:22:35.360 --> 00:22:39.760
And this is stuff that you'd want to use both in your editor as well as in the pre-commit stage,

00:22:39.760 --> 00:22:44.160
because you want them to agree. And nothing worse than one telling you the lines too long and the

00:22:44.160 --> 00:22:50.000
other one like, nope, that's good. Go ahead. Or put, put a space after the comma in parameters and

00:22:50.000 --> 00:22:53.840
then take away the space and put the space and take away the space. Exactly. You don't want them fighting.

00:22:53.840 --> 00:22:58.000
You want them integrated. No, no, you don't. So I suppose that's a massive

00:22:58.000 --> 00:23:03.760
bonus of having either the tool.rough settings in your pyproject or just a rough.toml,

00:23:03.760 --> 00:23:08.640
however you go about that, it doesn't really matter. Because then no matter how you're using rough

00:23:08.640 --> 00:23:12.880
via the pre-commit or for your project, it'll be the same thing, right? Exactly.

00:23:12.880 --> 00:23:18.800
Yeah. Okay. Yeah. That's pretty awesome. Now,

00:23:20.640 --> 00:23:29.760
I guess maybe we got a bit ahead of ourselves. If I want to somehow install a pre-commit hook or pre-commit

00:23:29.760 --> 00:23:35.600
so that when I then give it one of these toml files, it'll go subsequently grab them and do the things.

00:23:35.600 --> 00:23:36.800
How do you get started with that?

00:23:36.800 --> 00:23:40.960
I think I need a rephrasing of that question.

00:23:40.960 --> 00:23:50.560
Is it? Yeah. Sorry. So if I have just a plain GitHub repository and I want to have pre-commit

00:23:50.560 --> 00:23:55.360
manage the hooks for that repository, what do I do?

00:23:55.360 --> 00:24:02.080
Okay. So the first thing is you have to actually install pre-commit and that's not the command

00:24:02.080 --> 00:24:07.760
that's on the screen. This is more of a pip install. So make sure you have the Python library in place.

00:24:07.760 --> 00:24:08.240
Yeah. Yeah. Yeah.

00:24:08.240 --> 00:24:16.960
And then you need to have this configuration file. At least one hook in there so that you have a valid file.

00:24:16.960 --> 00:24:22.400
And then you can run pre-commit install. And I omitted it here, but what I talk about in a different

00:24:22.400 --> 00:24:28.400
article, when you run this command, pre-commit actually tells you that it created the git hooks

00:24:28.400 --> 00:24:32.720
pre-commit file. And if you open that up, and I have an example on that other article,

00:24:33.760 --> 00:24:39.040
it's very simple and it's just calling pre-commit the tool itself. So in all cases, you need to have

00:24:39.040 --> 00:24:47.760
it installed in your environment. And a single time you run pre-commit install, which then does the

00:24:47.760 --> 00:24:54.240
wiring on the git side. And this is something that everyone in your project has to run on any machine

00:24:54.240 --> 00:25:00.640
they are using because it's part of the repository itself. That file needs to exist there. And that can

00:25:00.640 --> 00:25:02.400
only happen if you run this command.

00:25:02.400 --> 00:25:11.360
Yeah. So there's a .pre-commit.config.yaml file. That's what you put into GitHub at the root of your

00:25:11.360 --> 00:25:17.760
project or something like this. But then to actually configure git itself, you've got to run this

00:25:17.760 --> 00:25:23.760
pre-commit space install. And it basically wires up the hooks to make that happen, right?

00:25:23.760 --> 00:25:28.480
Correct. So yeah, when you run this, that file gets created on your behalf. And then you don't have to

00:25:28.480 --> 00:25:33.200
worry about wiring that up. And then it's transparent to you. All you have to do is

00:25:33.200 --> 00:25:39.840
tweak your config and then the changes happen. Nice. I don't know if the naming,

00:25:39.840 --> 00:25:43.920
how much to believe the naming, can it do things other than pre-commit?

00:25:43.920 --> 00:25:44.240
Yes.

00:25:44.240 --> 00:25:47.600
Can it do pre-push and those kinds of things?

00:25:47.600 --> 00:25:54.240
Yeah. They don't support every single one, but there are quite a few that they do support. For

00:25:54.240 --> 00:26:02.240
example, I once configured an open source project with a pre-push because it was a slower check. And

00:26:02.240 --> 00:26:06.560
that's something you definitely don't want running on each commit. But it might be something where you

00:26:06.560 --> 00:26:10.000
want to make sure when you push the files that you've addressed something that's maybe a little bit

00:26:10.000 --> 00:26:18.720
longer. And that is really not any different than configuring with the pre-commit config.yaml. There's just a

00:26:18.720 --> 00:26:23.600
separate item that goes in there that says which stage to run. By default, it's pre-commit. So you

00:26:23.600 --> 00:26:25.520
don't see it. But if you needed to change it, you can.

00:26:25.520 --> 00:26:30.560
Yeah. I figured that was the case. But I'd never tried. And given that it's named pre-commit,

00:26:30.560 --> 00:26:33.520
it's kind of named after one of the hooks, right? But of course.

00:26:33.520 --> 00:26:36.400
I think that's named probably the most useful one.

00:26:37.440 --> 00:26:38.320
I would think so.

00:26:38.320 --> 00:26:38.960
Yeah, I would think so.

00:26:38.960 --> 00:26:46.080
When you think about it, I think a very popular example would perhaps be the commit message hook.

00:26:46.080 --> 00:26:51.680
So there's a lot of tools that work on making sure your commits are following a certain standard. I think

00:26:51.680 --> 00:26:57.360
one of them is called Commitizen. And so that runs on, my guess is on the commit message hook.

00:26:57.360 --> 00:27:00.160
Commitizen. Yes.

00:27:00.160 --> 00:27:05.040
Okay. What is this Commitizen about? I haven't heard of this.

00:27:05.040 --> 00:27:11.520
I don't think their example uses that, but I think they do have a pre-commit hook.

00:27:11.520 --> 00:27:13.440
Okay. And I believe it works out.

00:27:13.440 --> 00:27:20.080
Yeah. Interesting. Okay. What's this thing? A release management tool for teams. Yeah,

00:27:20.080 --> 00:27:27.200
sure that makes sense that you want to kind of be a little bit careful about what your commit messages

00:27:27.200 --> 00:27:32.000
are. Maybe you want to grab certain commit messages and add them to your changelog or something like

00:27:32.000 --> 00:27:39.040
that, right? Yeah. I think there's been quite a bit of talk about this one at Commences I've been

00:27:39.040 --> 00:27:44.960
lately. I think it's gotten a lot of traction. Yeah. 2.5,000 GitHub stars. That's pretty good.

00:27:44.960 --> 00:27:50.000
I'll check it out. This is news to me. Yeah. Awesome. All right. What other

00:27:50.000 --> 00:27:54.320
takeaways should we talk about in this first one? I think we maybe have pretty much covered it. Let's

00:27:54.320 --> 00:28:02.640
see. I guess we mentioned before, but if people want to see sort of examples of pre-commit hooks

00:28:02.640 --> 00:28:07.520
failing or succeeding or failing because they changed something, which is not exactly a failure, but

00:28:07.520 --> 00:28:15.920
stopping and starting over, you have a nice example of what that's like there. One thing that I guess

00:28:18.560 --> 00:28:26.400
might be useful is sometimes maybe you don't want to run the pre-commit hooks. Maybe you need to check

00:28:26.400 --> 00:28:34.400
in something in a certain way to fix the servers down, right? We have to check this in. I can't fix this

00:28:34.400 --> 00:28:40.400
hook, whatever this hook is upset about right now. It needs to go in right away. Just let me commit it,

00:28:40.400 --> 00:28:47.040
right? You can do that. Yeah. I mean, I think there are probably several use cases or something like this. Maybe

00:28:47.040 --> 00:28:50.720
you're going to be squashing things later and it doesn't, and it's, you don't, maybe you don't even

00:28:50.720 --> 00:28:53.920
know what the API for you're doing, what you're doing is going to look like.

00:28:55.360 --> 00:29:00.240
It could be, and this kind of ties back to what we talked about earlier, perhaps roughs doing something

00:29:00.240 --> 00:29:04.400
and you don't agree with, but you need to like check with the rest of your team to make sure that

00:29:04.400 --> 00:29:11.680
everyone's in agreement with let's remove this rule. Right? So it's, I, this definitely don't

00:29:11.680 --> 00:29:16.560
encourage always doing this. That defeats the purpose. Right? But there is kind of a break glass

00:29:16.560 --> 00:29:22.880
solution here where you, let's say you first run, get commit and something fails. And it's not something that

00:29:22.880 --> 00:29:27.760
you either want to fix at the moment or really can fix. Then you can just pass it, pass in dash dash

00:29:27.760 --> 00:29:33.440
no verify. And none of the checks run at that point. So it's like, as if the checks were never

00:29:33.440 --> 00:29:40.400
there in the first place. Right. Right. Right. Okay. That's pretty interesting. Like you say,

00:29:40.400 --> 00:29:44.800
hopefully people don't run that all the time. At that point, just remove the pre-commit setup,

00:29:44.800 --> 00:29:50.320
save yourself. Yeah. Like what are you, what are you even doing? Right. I suppose there's an

00:29:50.320 --> 00:29:57.760
interesting interplay between pre-commit hooks and continuous integration, right? Like in a sense,

00:29:57.760 --> 00:30:01.680
they are often checking some of the same things. What do you think?

00:30:01.680 --> 00:30:08.960
So I think it's probably an example, like not, not quite a Venn diagram. I probably the,

00:30:08.960 --> 00:30:16.400
the circle for pre-commit is entirely contained within the circle for the CICD. The difference is,

00:30:16.400 --> 00:30:20.560
there are certain things where you can get immediate feedback, quick feedback locally,

00:30:20.560 --> 00:30:26.240
and that should be something that you can put pre-commit things like linting, formatting, et cetera. And then

00:30:26.240 --> 00:30:31.440
CICD may like running your test suite. That's definitely not something you want to be doing

00:30:31.440 --> 00:30:35.760
in a commit. Imagine you have a test suite that takes three minutes to run, even maybe three minutes

00:30:35.760 --> 00:30:40.080
isn't that bad, but every commit waiting three minutes is definitely not something you want to do.

00:30:40.080 --> 00:30:45.920
No. But it's still a check that you should definitely be running. So in CICD, I would run everything,

00:30:45.920 --> 00:30:51.120
do the linting, do the formatting. That's your final, that's your last layer of defense,

00:30:51.120 --> 00:30:55.920
and you need to be checking everything. And this just allows developers to get that feedback sooner.

00:30:55.920 --> 00:31:03.360
Right. So what you're actually checking in and you finally approve is much closer to what CICD would

00:31:03.360 --> 00:31:08.400
kind of want in the first place, right? Yeah. Yeah. Okay.

00:31:08.400 --> 00:31:12.480
And it's also a much faster feedback, right? So like if the thing has to run all the way through

00:31:12.480 --> 00:31:16.560
the linting, the formatting, the testing, the type checking, whatever, you might be waiting 10,

00:31:16.560 --> 00:31:20.560
15 minutes for all the things to run when you could have had, you know, under a minute,

00:31:20.560 --> 00:31:25.600
hopefully way under a minute feedback instantly that your file wasn't formatted correctly.

00:31:25.600 --> 00:31:33.040
It should be near instantaneous, right? I mean, instant maybe is asking too much, but some of that

00:31:33.040 --> 00:31:36.560
astral stuff is, it's kind of ridiculous.

00:31:36.560 --> 00:31:42.720
Yeah. I think you have to be very careful because there's all these checks and you think you had up

00:31:42.720 --> 00:31:48.240
on the screen maybe earlier, like the pre-commit hooks, the general ones provided by the

00:31:48.240 --> 00:31:53.600
pre-commit organization. Yeah. There's tons of things in there, but you do have to be careful,

00:31:53.600 --> 00:31:56.800
right? Because if you're like, oh, this could be good and this could be good and this could be good.

00:31:56.800 --> 00:32:02.000
Each check is adding time, assuming, like I say, assuming they're all running on Python files,

00:32:02.000 --> 00:32:07.040
you're adding time to how long. So you do have to be mindful of what you actually need.

00:32:08.160 --> 00:32:13.840
And yeah, if you go to the point where you end up making the whole process take too long, people are

00:32:13.840 --> 00:32:16.640
going to stop using it. And then that defeats the purpose.

00:32:16.640 --> 00:32:20.720
Yeah. Yeah, exactly. As soon as it becomes a point where people go, I'm not using this thing,

00:32:20.720 --> 00:32:26.480
then you're kind of, kind of sort of lost. And unless you can just say, no, you have to use it, but

00:32:26.480 --> 00:32:28.880
then you just have unhappy teammates.

00:32:28.880 --> 00:32:31.280
Exactly. Either way, it's not a real great outcome, is it?

00:32:31.280 --> 00:32:36.560
I mean, if there's something that, you know, maybe only runs on a few files every once in a while,

00:32:36.560 --> 00:32:41.680
then if you are having problems with speed, then you can also consider moving that to the CICD.

00:32:41.680 --> 00:32:47.440
And I am definitely a big fan of rough, as you said, like just switching from black, flake gate,

00:32:47.440 --> 00:32:52.560
all that onto rough. You do save a significant amount of time on these checks and it's a huge benefit.

00:32:52.560 --> 00:32:58.160
Yeah, it's pretty ridiculous. Now, this is not a get pre-commit thing. This is a

00:32:58.800 --> 00:33:03.360
pre-commit the project thing, but you can use, if you're using this pre-commit project we've been

00:33:03.360 --> 00:33:10.960
talking about, you can say pre-commit space run and do kind of a test without actually doing a commit,

00:33:10.960 --> 00:33:16.400
right? Correct. Yeah. So there's a bit of nuances. So if you just do pre-commit run,

00:33:16.400 --> 00:33:20.880
it's going to run all of your hooks, but on the staged changes, because it's thinking,

00:33:20.880 --> 00:33:26.080
essentially you're doing like a dry run. If you, let's say, are adding a new hook and you want to make

00:33:26.080 --> 00:33:30.400
sure all of your files are compatible with that new hook, then you might want to do something like

00:33:30.400 --> 00:33:36.000
pre-commit run --all files. So look through your entire repository, regardless of whether you

00:33:36.000 --> 00:33:42.320
have changes in place. So if you say pre-commit run, it only works on your, basically your changed

00:33:42.320 --> 00:33:47.360
files, not the stuff that's already there and accepted. Correct. And another neat thing is in the

00:33:47.360 --> 00:33:51.840
case I mentioned where you add a new hook, you might just want to run that hook. So you can say,

00:33:51.840 --> 00:33:56.640
pre-commit run and then the hook ID, and then you would just run that hook and then you can define

00:33:56.640 --> 00:34:01.520
either a certain set of files or the staged runs, whatever. Yeah. That sounds pretty useful when

00:34:01.520 --> 00:34:07.360
you're building your own pre-commit hook, right? So yeah, depending on how you build it,

00:34:07.360 --> 00:34:14.880
you can either use that or they have also a try repo command. Right. Got it. Got it. Well, let's see.

00:34:15.840 --> 00:34:22.080
Maybe we could jump over and talk a bit through your hook creation guide, a step-by-step guide to

00:34:22.080 --> 00:34:28.400
developing your own pre-commit hook. I thought this was really, like I said, a good article and maybe

00:34:28.400 --> 00:34:35.920
one of the first things we talk about is just what makes a good hook in the first place, right? You said

00:34:35.920 --> 00:34:42.800
that they can't be too long or people will go crazy and turn them off or skip them or whatever, but what else?

00:34:42.800 --> 00:34:49.600
So I think another big thing is if you're able to fix something, then you should fix it. In the case

00:34:49.600 --> 00:34:54.800
of like formatting and you're saying, oh, this should have a trailing comma, then that's easy enough.

00:34:54.800 --> 00:34:59.200
You can add the trailing comma. You don't make more work for the user. If you can't do that,

00:34:59.200 --> 00:35:04.880
then you should be very specific saying this file. And if you have a line number saying exactly where it is,

00:35:04.880 --> 00:35:09.840
because, you know, just saying there's something wrong in this file and someone has to hunt it is also not

00:35:09.840 --> 00:35:14.320
a good user experience. No, that's going to be frustrating and super, super quick.

00:35:14.320 --> 00:35:23.280
Yeah. So be really descriptive about it. And then also, you know, maybe choose not to make it a

00:35:23.280 --> 00:35:26.800
pre-commit hook, right? Not necessarily everything needs to run on every commit.

00:35:26.800 --> 00:35:35.920
Yeah. I think that like the speed thing is a huge factor. And in general, I think one big thing that is

00:35:35.920 --> 00:35:42.560
key to note here is that it's even though, let's say you change files that, let's say you change a

00:35:42.560 --> 00:35:48.880
Python file, a Markdown file and an image file. If you're making a hook that only runs on a certain

00:35:48.880 --> 00:35:54.320
type of file, if you're careful and specify that, then it's not necessarily a bad thing to include

00:35:54.320 --> 00:36:00.880
that in there because it will only get triggered on those certain types of files. And so like an example I

00:36:00.880 --> 00:36:07.440
have is the exif stripper tool I created, when I was building my website.

00:36:07.440 --> 00:36:12.320
Yeah. Your exif stripper is super interesting. I'm starting to think maybe I want this as well.

00:36:12.320 --> 00:36:17.040
Yeah. I was just very paranoid at one point about just working with images.

00:36:17.040 --> 00:36:26.480
And you, so they come with, what's up here. So, exchangeable image file format data or exif, as it's commonly called.

00:36:26.480 --> 00:36:30.800
And it's metadata that is in the image that you might not realize is there.

00:36:30.800 --> 00:36:38.160
And so in this article, I talk about a picture of me presenting that I was given from a conference.

00:36:38.160 --> 00:36:44.080
And this was something that was stored, I think in a Google drive. So you have access to all the metadata that was available.

00:36:44.560 --> 00:36:53.120
So I never met the photographer and yet I know the photographer's name, the camera they use, what type of computer they have, how they edited it, all kinds of information.

00:36:53.120 --> 00:36:57.920
And the, and the dangerous part is the exact location of where this was.

00:36:57.920 --> 00:37:06.400
Now conference, not a big deal, but you have to think about maybe you're blogging about something you did in your house, your apartment.

00:37:06.400 --> 00:37:15.280
And now you have a photo up on your website where anyone can potentially see it that has the GPS coordinates for where you live.

00:37:15.280 --> 00:37:16.480
Right.

00:37:16.480 --> 00:37:17.760
Yeah. That wouldn't be great. No.

00:37:17.760 --> 00:37:24.720
So I w I was very paranoid about this and I don't want the idea of like, oh, I'm going to add a new image.

00:37:24.720 --> 00:37:30.400
Let me go through my checklist of what I need to do because I know at some point I'm going to mess something up or forget it.

00:37:30.400 --> 00:37:34.720
And so this is a perfect use case for the pre-commit, right?

00:37:34.720 --> 00:37:39.200
Because you want something that is going to stop you and tell you, nope, you can't do this.

00:37:39.200 --> 00:37:45.760
Right. And in this case, it can also remove the metadata because I am being super conservative and saying no metadata,

00:37:45.760 --> 00:37:51.440
which has the nice side benefit of shrinking files, which is good for serving them.

00:37:51.920 --> 00:37:59.760
Yeah. Well, what, what value is it to have all that metadata in there for, for a blog?

00:37:59.760 --> 00:38:02.880
Like most of the time, most people are not, they just want to see, they want to read the blog.

00:38:02.880 --> 00:38:04.560
They're not going to dissect your image. Right.

00:38:04.560 --> 00:38:08.960
I think it depends what you, I mean, maybe you have a travel blog and you want to know like,

00:38:08.960 --> 00:38:14.400
here's that location. And then you have one off post where you introduce yourself and oops, you know?

00:38:14.400 --> 00:38:15.440
Yeah.

00:38:15.440 --> 00:38:20.160
There's so many ways. And I think even just thinking, oh, I'm only going to be doing this.

00:38:20.640 --> 00:38:24.560
There's always going to be something that later on happens. So you have to be very careful,

00:38:24.560 --> 00:38:27.680
just upfront that everything is going to go through this track.

00:38:27.680 --> 00:38:33.040
And sure. Can your exit thing, can it be selective about the metadata?

00:38:33.040 --> 00:38:35.840
That's something I do want to do in the future.

00:38:35.840 --> 00:38:38.240
Like just remove the location. If you say,

00:38:38.240 --> 00:38:43.440
But the thing is there's like looking through all of that, it's hard to tell if there might be something

00:38:43.440 --> 00:38:48.320
in one subset of images you take that might be sensitive. You can even think of certain situations

00:38:48.320 --> 00:38:52.000
where you might not want someone to know what kind of device you were using.

00:38:52.000 --> 00:38:53.200
Yeah.

00:38:53.200 --> 00:38:57.280
Because maybe they're like, oh, that device is vulnerable to something and I know they have it. Right?

00:38:57.280 --> 00:39:05.440
The worst of these is I think the multiple times, I'm pretty sure it was the Samsung,

00:39:05.440 --> 00:39:13.760
but one of the Android companies posted a picture promoting the new phone and the exit information

00:39:13.760 --> 00:39:16.400
had the picture as being from an iPhone or something like that.

00:39:16.400 --> 00:39:17.920
It was the other way around, I think.

00:39:17.920 --> 00:39:18.800
Or the other way around.

00:39:18.800 --> 00:39:19.360
I remember hearing that.

00:39:19.360 --> 00:39:23.280
Well, it was like one phone company was posting it from, but the picture was actually,

00:39:23.280 --> 00:39:27.200
even though it was about the phone, it was implying this picture comes from or something.

00:39:27.200 --> 00:39:31.920
It was like, nope. Whoever is on the marketing team just happens to have the other kind of phone.

00:39:31.920 --> 00:39:33.360
And there it goes. Right?

00:39:33.360 --> 00:39:37.440
And it's a huge scandal. I mean, for those companies that talk about how awesome they're,

00:39:37.440 --> 00:39:39.360
how much better their cameras are or whatever.

00:39:39.360 --> 00:39:41.200
Well, I see that's also the thing, right?

00:39:41.200 --> 00:39:43.440
Because you never know who's going to look at the metadata either.

00:39:44.240 --> 00:39:49.120
And it's interesting because certain things will, certain platforms will remove it.

00:39:49.120 --> 00:39:51.920
So I mentioned like Google Drive. It's everything is preserved.

00:39:51.920 --> 00:39:55.600
But the thing is, is you have to know ahead of time.

00:39:55.600 --> 00:39:59.040
So you'd have to say, I'm planning to put this image here.

00:39:59.040 --> 00:40:04.080
Let me upload a dummy image that I don't care and check if the metadata is still there.

00:40:04.080 --> 00:40:09.040
Yeah, exactly. Yeah. I think, I think Mastodon might remove it.

00:40:09.040 --> 00:40:12.400
There's some certain platforms that will take away that metadata.

00:40:12.400 --> 00:40:14.880
I think Facebook might. It's been a long time.

00:40:14.880 --> 00:40:19.440
I mean, it's a huge security concern. So I imagine more and more places are,

00:40:19.440 --> 00:40:23.680
but I just wanted to have an abundance of caution and not risk anything happening.

00:40:23.680 --> 00:40:27.200
Well, yeah. And you're putting it on the internet as well, which there's,

00:40:27.200 --> 00:40:32.160
it goes straight from your computer through some sort of static website process.

00:40:32.160 --> 00:40:35.920
And then it's downloaded, right? There's very, there's no, nothing in between those two steps.

00:40:35.920 --> 00:40:40.560
Exactly. At least not in terms of image processing. Yeah. Yeah. Cool.

00:40:40.560 --> 00:40:48.880
Yeah, this is nice. I'm thinking about grabbing it and trying out, what file types does it work on?

00:40:48.880 --> 00:40:52.960
Does it work on just JPEGs or does it do like WebP and all that?

00:40:52.960 --> 00:40:57.920
Any image, anything that's classified as an image on pre-commit, the way pre-commit runs.

00:40:57.920 --> 00:41:04.000
Okay. And it has to work with, I'm using Pillow. So if Pillow can't read it, then it's not going to work.

00:41:04.000 --> 00:41:07.440
But right. Then I'll just skip over it or whatever.

00:41:07.440 --> 00:41:14.560
Yeah. Yeah. So really quick, while we're talking about stuff on your website, your website's super nice.

00:41:14.560 --> 00:41:17.840
Did you build this yourself? Like, how is this thing built?

00:41:17.840 --> 00:41:24.240
I did. I did build this myself. I took a couple months in the beginning of the year and just,

00:41:24.240 --> 00:41:30.160
I had a before a single page where it was just like some boxes. And then I was like, this needs to be revisited.

00:41:31.120 --> 00:41:43.040
So it's built with Next.js. And so React and TypeScript. And then I use Tailwind CSS. And yeah, it was kind of just like,

00:41:43.040 --> 00:41:50.400
I mean, a lot of these things are for me because sometimes, you know, I like seeing all in one place where I'm speaking next or like

00:41:50.400 --> 00:41:59.200
where I've spoken, like a map and stuff. And I went through, so kind of my process would be, you know, on my iPad,

00:41:59.200 --> 00:42:05.840
I would sketch out what I kind of envisioned a page looking at. And then I would prototype it in React and see,

00:42:05.840 --> 00:42:12.400
okay, maybe this isn't fully work or like tweak things and iterate on a few times. And bit by bit,

00:42:12.400 --> 00:42:20.160
the pages formed. The latest thing I added was this timeline functionality. At EuroPython this year,

00:42:20.160 --> 00:42:27.360
I had this idea for a timeline and I kind of got really, really into it. So it was funny. I had a Python

00:42:27.360 --> 00:42:33.440
conference. I was doing tons of React. But if you scroll down a tiny bit, there's actually too much.

00:42:33.440 --> 00:42:34.880
Oh, this one, right? Yeah, yeah.

00:42:34.880 --> 00:42:36.720
Where's the little text?

00:42:36.720 --> 00:42:38.960
Oh, the complete upcoming. Yeah, I got you.

00:42:38.960 --> 00:42:40.560
So I built this.

00:42:40.560 --> 00:42:45.520
Oh, that's beautiful. I love it. It's like a little infographic of your upcoming events.

00:42:45.520 --> 00:42:52.640
Yeah. So I was like very inspired. And I did this in a few days. But it's nice because, you know,

00:42:52.640 --> 00:43:01.600
going from the sketch to the React components, it's become very natural, which it takes a

00:43:01.600 --> 00:43:08.240
bit to get there. But it was nice because I did have to learn TypeScript for some changes in my team.

00:43:08.240 --> 00:43:14.160
We were going to be starting moving to TypeScript. So this was great to work on something that,

00:43:14.160 --> 00:43:20.240
you know, fit in my head as far as what needed to be done. And it's very, very helpful. But yeah,

00:43:20.240 --> 00:43:25.600
I'm very proud of this. There's still more, tons more to do. I have massive lists, but.

00:43:25.600 --> 00:43:32.320
Yeah, I remember looking and going, this is a nice static site. Very cool. And I didn't even see this

00:43:32.320 --> 00:43:35.760
feature. This is great. Broadbent out the audience says fire emoji for it. It's very good.

00:43:35.760 --> 00:43:36.880
Thank you.

00:43:36.880 --> 00:43:42.480
And also, thanks. I see you put the podcast appearance on here as well. That's cool. So

00:43:42.480 --> 00:43:46.320
that's happening today. Watch the live stream now. If you're not watching now, then it's probably missed

00:43:46.320 --> 00:43:50.880
it. But the recording will be there, of course. But what the reason I say that is you maybe want to

00:43:50.880 --> 00:43:54.240
give a shout out to some of your upcoming events.

00:43:54.240 --> 00:44:01.840
Yeah, why not? So I'm going to be in San Francisco next week talking about my data morph project. And

00:44:01.840 --> 00:44:07.840
I'll also be doing a book signing there for my hands on data analysis with pandas book, second edition.

00:44:08.560 --> 00:44:15.040
And then after that, I'm off to France to give a workshop on pandas and then also talk about

00:44:15.040 --> 00:44:22.080
getting started in open source contributions. And then a couple of weeks after that, I will be at the

00:44:22.080 --> 00:44:27.920
final conference of the year in Australia. And I will be talking about data morph once again. And I'm

00:44:27.920 --> 00:44:33.040
hoping to run my third development sprint on data morph while I'm there.

00:44:33.040 --> 00:44:38.480
Oh, that's cool. Yeah, we'll talk about data morph in a second. That's some interesting stuff.

00:44:38.480 --> 00:44:42.880
But this is quite the agenda. You got some cool trips coming up.

00:44:42.880 --> 00:44:52.240
No, I'm excited. It's nice to see different cultures. It definitely does land different,

00:44:52.240 --> 00:44:54.560
you know, the topics and just reactions.

00:44:54.560 --> 00:44:58.800
Some people are over the top excited. Some of them are just straight face.

00:44:58.800 --> 00:45:08.400
I think it really comes into play as far as giving workshops. I was in

00:45:08.400 --> 00:45:15.120
Portugal last week and I did the data analysis workshop. And I think that was one of the best

00:45:15.120 --> 00:45:20.160
ones I've ever had. It was very, very highly interactive and it was a really fun time for me.

00:45:20.160 --> 00:45:22.080
And hopefully everyone else thought so as well.

00:45:22.080 --> 00:45:24.160
Yeah, that's fantastic.

00:45:24.800 --> 00:45:36.800
So I was going to be talking about the hands-on data analysis with Panda's book in 2019.

00:45:36.800 --> 00:45:42.000
And at that time, if you had told me, go do some public speaking, I'm like, please no.

00:45:42.000 --> 00:45:46.880
You're going to France and Australia and Portugal recently. So I'm like, no, no, no.

00:45:46.880 --> 00:45:55.360
Yeah. And then, well, during pandemic times, a conference reached out to me about doing a

00:45:55.360 --> 00:46:01.600
workshop on pandas because I had written the book and doing it virtually. And to me, that felt like

00:46:01.600 --> 00:46:06.800
a good stepping stone to get over that fear of public speaking and the fact that it would be virtual.

00:46:06.800 --> 00:46:13.040
I wouldn't really have to look at anyone. And I was still absolutely terrified when it came to actually

00:46:13.040 --> 00:46:18.640
delivering that talk. And when you think about it, it wasn't a talk, right? So it was my first thing

00:46:18.640 --> 00:46:27.680
was a four hour workshop. And now I'm at the point where a virtual thing is much less desirable because

00:46:27.680 --> 00:46:32.240
it's so hard when you can't see people, you can't see our things landing, are they confused? Are they

00:46:32.240 --> 00:46:39.760
with me? Are they even still there? So, and then after I did, I made it to the end and I was like,

00:46:39.760 --> 00:46:46.640
okay, that's definitely something I want to work on and do it again. So I did, I came up with a second

00:46:46.640 --> 00:46:57.520
workshop on data visualization. And then I think I did two or three more virtual sessions. And then

00:46:57.520 --> 00:47:02.560
it became that some conferences were now in person and I was like, okay, I think I should try this.

00:47:02.560 --> 00:47:07.600
And again, it was still a long one. It may have even been a six hour session that time.

00:47:07.600 --> 00:47:13.680
So it's like crazy, right? And then I did that in person and I was like, okay, I survived. And then

00:47:13.680 --> 00:47:19.760
it kind of just felt like something, if I kept doing it, I would get over it or at least get to the point

00:47:19.760 --> 00:47:26.480
where I could do it without being terrified for a month ahead of time. And I am at that point now. It is,

00:47:26.480 --> 00:47:31.520
like, I enjoy doing it because I enjoy, I'm very passionate about knowledge sharing and just

00:47:31.520 --> 00:47:37.520
teaching people and getting that interaction that, oh, people are really like getting value out of this.

00:47:37.520 --> 00:47:43.760
And that to me is very nice. Yeah. It's super rewarding. So, but yeah, this is quite impressive.

00:47:43.760 --> 00:47:48.800
So just, I got the sense you kind of got started pretty soon. You said 2019. So that's,

00:47:48.800 --> 00:47:51.440
haven't been doing it for that long and this is great.

00:47:51.440 --> 00:47:58.880
So maybe, you know, you brought it up. Maybe we could talk a bit about your book as well.

00:47:58.880 --> 00:48:03.920
I don't know what to say about this one.

00:48:03.920 --> 00:48:07.920
Just yeah, that it exists and people should check it out or something like that.

00:48:07.920 --> 00:48:10.880
It's giant. As you can see 788 pages.

00:48:10.880 --> 00:48:12.800
So, holy moly, that is giant.

00:48:12.800 --> 00:48:19.920
Yeah. So this is the second edition. If you scroll down, there's also the covers for the Korean and

00:48:19.920 --> 00:48:20.960
Chinese editions.

00:48:20.960 --> 00:48:22.560
Oh, awesome.

00:48:22.560 --> 00:48:25.440
And I do not read either of those.

00:48:25.440 --> 00:48:27.520
But I do have copies.

00:48:27.520 --> 00:48:29.040
It's an act of faith to put your name on them.

00:48:29.040 --> 00:48:34.240
You know what? I've been told by people that read both of those languages that the name is not

00:48:34.240 --> 00:48:39.200
quite translated correctly, but you know, I'll forget about that. It's cool to have the copies.

00:48:39.200 --> 00:48:40.080
Yeah.

00:48:40.080 --> 00:48:43.440
Yeah. So this, this book covers obviously pandas,

00:48:43.440 --> 00:48:50.880
working through the basics of data analysis. We also talk about data visualization,

00:48:50.880 --> 00:48:57.120
and then there is a little bit towards the end about like actually applying this stuff to use

00:48:57.120 --> 00:48:59.600
cases and also a little bit of machine learning.

00:48:59.600 --> 00:49:05.600
Cool. Yeah. So I'll put a link in the show notes. People can check it out if they would like to.

00:49:05.600 --> 00:49:12.560
All right. I feel like there's a few things. We didn't make it very far in our creation guide.

00:49:12.560 --> 00:49:18.640
So let's talk about the recipe, right? What are the four steps, at least Stephanie's recipe for

00:49:19.200 --> 00:49:20.000
pre-commit hook?

00:49:20.000 --> 00:49:26.480
Yeah, this is definitely my recipe. I mean, I've, I think, well, I've made two that are published

00:49:26.480 --> 00:49:31.520
ones and then obviously a few other for trainings and explanation purposes. And this, this is something

00:49:31.520 --> 00:49:37.680
that works well for me and I think makes sense as far as thinking about the pieces. So the first thing,

00:49:37.680 --> 00:49:42.960
the hardest thing is actually to figure out what are you checking and how do you actually code that up?

00:49:42.960 --> 00:49:46.960
Yeah. And if you want to do this in Python, this is just, okay, code your logic.

00:49:46.960 --> 00:49:52.960
Yeah. Yeah. Well, and if it has a --fix, maybe that's even harder than just trying to

00:49:52.960 --> 00:49:57.360
understand, right? Because now you've got to not break somebody's code or sorts of things like that.

00:49:57.360 --> 00:50:02.880
Yeah. But this would be where you start at the basic level probably first, you know, find, figure out,

00:50:02.880 --> 00:50:08.080
can you find the issue and show people where it is? And then you can look into fixing it. But yeah,

00:50:08.080 --> 00:50:11.600
you have to be very careful, especially if you're going to be touching things.

00:50:11.600 --> 00:50:21.840
So I guess it's pretty straightforward, but the magic of Python is not just the language and the static,

00:50:21.840 --> 00:50:27.600
the standard library, but the 500,000 external packages, right? There's probably a ton of external

00:50:27.600 --> 00:50:33.120
packages that understand code, check different things. And you could, you can use those in your

00:50:33.120 --> 00:50:37.600
hook implementation, right? Just like a standard Python package, it can have dependencies and stuff.

00:50:37.600 --> 00:50:44.240
Yes. And so I talk about this in the third step, but I do like to make it as a package just because

00:50:44.240 --> 00:50:48.800
you know that that's going to work and grab the dependencies as long as you follow what you already

00:50:48.800 --> 00:50:56.000
know. And pre-commit will, you will tell pre-commit in the fourth step in that pre-commit hooks file,

00:50:56.000 --> 00:51:00.560
how it should be installed. So when you say this is, this is Python, then it will know, okay,

00:51:00.560 --> 00:51:06.080
so I should be using, for example, pip to install this. And if you have, for example,

00:51:06.080 --> 00:51:10.320
project tombo and you specify how it should be built, then all of that just happens as it normally

00:51:10.320 --> 00:51:12.720
would. It's just that pre-commit is doing it instead of you.

00:51:12.720 --> 00:51:18.080
Yeah. Yeah. Yeah. It's kind of, instead of you doing a pip install, dashy dot or whatever,

00:51:18.080 --> 00:51:23.600
it's kind of figuring that out. And I guess we haven't really talked too much about it, but when you

00:51:23.600 --> 00:51:30.560
pre-commit install, it looks at this hooks YAML file and then it creates the environment and it

00:51:30.560 --> 00:51:36.320
downloads all the packages the first time to kind of set it up. Then it just runs over and over

00:51:36.320 --> 00:51:39.920
after that, right? Yeah. Unless you change something in your pre-commit

00:51:39.920 --> 00:51:46.000
config file, then it won't need to rebuild the environment for this. So if you keep the same

00:51:46.000 --> 00:51:50.400
version, then it's kind of like you said, I installed this version of the package. And as long as you don't

00:51:50.400 --> 00:51:54.240
say you need to update the package, then it's kind of like a virtual environment. Okay. You already have

00:51:54.240 --> 00:52:00.160
that. There's no need to. Yeah. Yeah. Excellent. So your recipe is one, design the check function to

00:52:00.720 --> 00:52:05.520
turn it into a CLI, which there's some interesting stuff in that one as well. That stuff.

00:52:05.520 --> 00:52:10.320
And I think that's kind of where the --fix comment comes into play, right? So

00:52:10.320 --> 00:52:16.000
you have your logic, that check function, you should be able to say this was successful,

00:52:16.000 --> 00:52:23.440
this was not successful as in stop the commit or don't. And then the CLI provides a very easy way to

00:52:23.440 --> 00:52:28.880
plug into that. Maybe you want to say --fix or dash dash, you know, leave this type of file

00:52:28.880 --> 00:52:35.440
alone. Whatever kind of modification you want to do, you can expose that in a CLI. And that's also

00:52:35.440 --> 00:52:42.960
a quicker way to get started versus trying to, let's say, read the pipe, find the pipe project.tongle,

00:52:42.960 --> 00:52:47.840
read it in, parse out things. That's all stuff that can come later once you figure out exactly

00:52:47.840 --> 00:52:53.520
how you want your tool to be configured. Yeah. Especially if it just has one or two arguments,

00:52:53.520 --> 00:53:00.080
it might not be necessary to be too, too over the top with all the configuration. And then you make

00:53:00.080 --> 00:53:05.760
it installable, basically, like you said, make it a package and then create the pre-commit hooks. Yeah,

00:53:05.760 --> 00:53:10.240
well, those are the steps. So I think write the function, that's pretty straightforward. You just,

00:53:10.240 --> 00:53:14.960
whatever you want it to do, you just write a function that does it. You do have an example in here

00:53:15.680 --> 00:53:25.120
about checking for valid file names and snake cased file names. So things like it can't be just one

00:53:25.120 --> 00:53:33.120
letter and it has to be snake cased and so on. Right. But then to turn that into a CLI, there's a lot of

00:53:33.120 --> 00:53:40.720
options in Python these days, right? You can click, you can type, but if you want something built in,

00:53:40.720 --> 00:53:45.200
yeah, if you want something built in, argparse is pretty straightforward, right? Yeah. And I think

00:53:45.200 --> 00:53:52.240
also, I mean, if you look at the pre-commit hooks repo provided by pre-commit org, a lot of them,

00:53:52.240 --> 00:53:57.840
or maybe all of them are just using argpars. Because for most hooks, all you'll need to say is,

00:53:57.840 --> 00:54:02.400
I have an argument parser and it accepts file names. And at that point, you have this boilerplate that you

00:54:02.400 --> 00:54:10.560
can just copy and you don't even need to worry about configuring multiple arguments. Yeah. It doesn't have to be

00:54:10.560 --> 00:54:16.480
too advanced with like subcommands and all that kind of stuff necessarily. Exactly. Yeah. Yeah. And then

00:54:16.480 --> 00:54:23.280
make it installable. This is, you recommend a pyproject.toml, which yeah, for packages these days,

00:54:23.280 --> 00:54:28.480
that seems pretty, pretty much the de facto standard, right? Yeah. And then what's nice is,

00:54:28.480 --> 00:54:33.600
yeah, you're, you're using current things. You're not relying on setup.py. And also in there,

00:54:33.600 --> 00:54:40.400
there's a way to expose an entry point and that's line 24. Yeah. Yeah. Yeah. That's really nice.

00:54:40.400 --> 00:54:46.240
I love entry points. I think it's, I think they're massively underused in Python. You know,

00:54:46.240 --> 00:54:51.840
people talk about how do I create a script that I can give it to somebody so they can run something. And

00:54:51.840 --> 00:54:58.880
that so often involves like, where is it? Where is its associated files? Where is its Python? And where is

00:54:58.880 --> 00:55:03.840
its dependence? All of that stuff you, if you just create a package and it has an entry point, you can

00:55:03.840 --> 00:55:09.120
pipx install it or uv tool install it. Or, and now you just have all these commands and people don't have to

00:55:09.120 --> 00:55:13.600
mess with all the Python stuff. Even if you know how to do it, you don't necessarily want to do that all

00:55:13.600 --> 00:55:18.000
the time, right? Yeah. And then it's just easy to, you can kind of call it from anywhere at that point.

00:55:18.000 --> 00:55:21.680
Yeah, exactly. Exactly. So in this example, you give, you put a,

00:55:21.680 --> 00:55:29.360
um, a validate dash file name command and you just point to, you know, what module and then what

00:55:29.360 --> 00:55:33.840
function to call in. That's the CLI. Yeah, that's really nice. And then of course that,

00:55:33.840 --> 00:55:38.880
that function in there is built and backed with argpar. So it all, it kind of all comes

00:55:38.880 --> 00:55:44.000
full circle right there. Yeah. Yeah. So it's like you, it's almost like you had created, you know,

00:55:44.000 --> 00:55:49.280
some command line utility, like bash wise or something. And you just have that available and

00:55:49.280 --> 00:55:55.600
it's hooks into your, your CLI. I also want to call out on a 21, line 21, because we talked about

00:55:55.600 --> 00:56:01.280
dependencies, right? So anything you put in there that's automatically will get grabbed when pre-commit

00:56:01.280 --> 00:56:06.160
installs. So in this case, there's nothing. And the case of the exit stripper I mentioned,

00:56:06.160 --> 00:56:12.960
like we need to install pillow, right? So this is how you can configure how pre-commit will grab

00:56:12.960 --> 00:56:19.520
everything. And I also see it has, yeah, I see it has a requires Python version. Does pre-commit help you

00:56:19.520 --> 00:56:25.360
get Python in any way? Or is it just assume that there's a-- You do need to have whatever languages you're

00:56:25.360 --> 00:56:31.600
relying on, you do need to have them installed already. Okay. So in order for you to use this

00:56:31.600 --> 00:56:35.840
pre-commit hook on your machine, you'd have to have, for example, Python 3, 10, 11, 12,

00:56:35.840 --> 00:56:40.320
something like that installed, given that it says 310 or greater. So for example, like if you saw some

00:56:40.320 --> 00:56:45.200
hook that sounded interesting, but it's written in Go and you don't have Go on your computer,

00:56:45.200 --> 00:56:47.600
you have to figure that out first. That's a no-go.

00:56:49.840 --> 00:56:55.280
So now go, all right, let's see. Yeah. And then last thing to do is you say,

00:56:55.280 --> 00:57:04.320
create the pre-commit hooks.yaml file. And is this the thing that goes into your repo? So when pre-commit

00:57:04.320 --> 00:57:11.280
sees it, it knows what to do? Yeah. So for example, in the exit stripper repo, there's this file exists. So if

00:57:11.280 --> 00:57:16.720
someone uses exit stripper, they point to that repository. And then when pre-commit goes and grabs

00:57:16.720 --> 00:57:24.960
it, it looks for this file. Right? And then the key things here for one being language. So language tells

00:57:24.960 --> 00:57:30.560
pre-commit, how does it try to install that? So in this case, it says, oh, this is Python. So then it knows,

00:57:30.560 --> 00:57:38.080
okay, pip, the ID at the top, that's the name that you reference in the pre-commit config.

00:57:38.080 --> 00:57:45.280
When you want to, like we saw check toml, check yaml in the beginning, those correspond to entries

00:57:45.280 --> 00:57:52.560
in the pre-commit hooks yaml of that repository that they were being referenced from. So pre-commit can,

00:57:52.560 --> 00:57:57.840
so first finds this file, it can install, then it can see, oh, which hook do you want? Validate file name

00:57:57.840 --> 00:58:05.600
in this case. And then how do I call this? And that's entry. And this is pointing to the entry

00:58:05.600 --> 00:58:10.320
point that we made, but it can be anything, right? You could call rough and then add, you know, 20

00:58:10.320 --> 00:58:15.360
different command line flags if you want, and that can be your hook. And that was, that would be fine

00:58:15.360 --> 00:58:21.680
as well. And what's very interesting here is it's optional, but it's the types one at the bottom.

00:58:21.680 --> 00:58:27.360
So I talked before about exit stripper only running on images, right? It'd be wasteful to have it look at

00:58:27.360 --> 00:58:30.080
toml and markdown, right? If it's not going to do anything.

00:58:30.080 --> 00:58:32.480
Can't find any XF information in the toml.

00:58:32.480 --> 00:58:40.640
Yeah. So, so this controls that. So for example, this hook will only run on Python files and this

00:58:40.640 --> 00:58:45.760
logic blanking on the name of the tool that pre-commit uses to figure this out, but this is

00:58:45.760 --> 00:58:48.320
handled elsewhere. So there's like certain names that you can use.

00:58:48.320 --> 00:58:55.840
Right. Some sort of category mapping over to these file extensions or these bombs at the beginning of the

00:58:55.840 --> 00:58:57.600
file or whatever mean that it's this thing.

00:58:57.600 --> 00:59:02.800
Exactly. There is, it's very dangerous thing with this and that types is an and.

00:59:02.800 --> 00:59:08.640
So if you say, if you wanted to do like this should run on Python and markdown, you can't use this

00:59:08.640 --> 00:59:12.560
because it will look for files that are both Python and markdown and

00:59:12.560 --> 00:59:14.560
it will not end well.

00:59:14.560 --> 00:59:16.240
Not too many of those exist.

00:59:16.240 --> 00:59:16.560
Yeah.

00:59:16.560 --> 00:59:20.640
There's a separate types or that you have to use. That's like a little gotcha.

00:59:20.640 --> 00:59:25.600
Yeah. It's like an ORM sort of instead of a SQL statement. Kind of you gotta.

00:59:25.600 --> 00:59:25.600
Yeah.

00:59:25.600 --> 00:59:30.080
Those things always get weird. Like import the or operator. Like, okay.

00:59:32.240 --> 00:59:38.000
Yeah. Cool. Okay. That's actually, that, that is very good to know. Cause it looks like a list of options.

00:59:38.000 --> 00:59:43.120
It is. Yeah. But they combine. So you might have something like, it is a file and it's Python. That

00:59:43.120 --> 00:59:44.000
might be one thing I've seen.

00:59:44.000 --> 00:59:44.640
I've seen.

00:59:44.640 --> 00:59:52.960
Right. Okay. Yeah. Cool. So if I wanted to have more than one hook, I could put it into one. I

00:59:52.960 --> 00:59:54.560
could have more than one here. Is that possible?

00:59:54.560 --> 00:59:56.160
Yeah. So the ID looks like a list.

00:59:56.160 --> 01:00:01.120
Yeah, exactly. It's structured as a, as a YAML list. So you just kind of could copy that block,

01:00:01.120 --> 01:00:06.000
paste the new one and then just change whatever fields you want. And then that's now the second

01:00:06.000 --> 01:00:06.880
hook that you expose.

01:00:06.880 --> 01:00:12.720
Right. And working backwards, I suppose you just expose a different entry point potentially and then just

01:00:12.720 --> 01:00:14.320
call it out or whatever you want.

01:00:14.320 --> 01:00:18.400
You could like, maybe you have a validate file name and maybe you have another one that's like

01:00:18.400 --> 01:00:22.480
validate long file names or something where you're like, now they have to be this long. And then

01:00:22.480 --> 01:00:25.440
it's just a shortcut for something else. So it doesn't have to be a different thing.

01:00:25.440 --> 01:00:29.760
Oh yeah. You just put an argument in there as a default kind of for people.

01:00:29.760 --> 01:00:35.520
So we talked about args earlier and that was something the user could tweak. Anything you put in

01:00:35.520 --> 01:00:41.680
here is essentially like, it will always run with these. So you could bake in certain things that have to

01:00:41.680 --> 01:00:43.280
happen.

01:00:43.280 --> 01:00:51.120
Yeah. Awesome. I love it. Okay. Let's, we're pretty much out of time, but let's talk about one final

01:00:51.120 --> 01:00:56.800
thing. Not this one, your data morph project. Give a quick shout out to that before we

01:00:56.800 --> 01:01:00.320
before we wrap things up. What do you think?

01:01:00.320 --> 01:01:10.640
Sure. So this project started related to the pandas workshop I had mentioned. I wanted to have a visual

01:01:10.640 --> 01:01:16.880
to really drive home the point that we needed to visualize our data because pandas very much data

01:01:16.880 --> 01:01:21.600
wrangling. And after, you know, talking to people two hours about data wrangling and statistics, you can

01:01:21.600 --> 01:01:27.760
calculate on tabular data. Some people just feel like, oh, okay, we're done. I mean, you know, we're done.

01:01:27.760 --> 01:01:33.360
And that's definitely not the case. And I was thinking about, and you had it on the screen

01:01:33.360 --> 01:01:42.480
before, but the data source doesn't. So yeah. So there was research in 2017 by Autodesk where

01:01:42.480 --> 01:01:48.160
they took the idea of Anscombe's Quartet, which is sorry, just a little bit above that,

01:01:49.440 --> 01:01:57.120
which is just a set of four, yeah, four data sets. They share the same summary statistics. So

01:01:57.120 --> 01:02:02.640
the mean in X and Y, the standard deviation in X and Y, and the Pearson correlation coefficient.

01:02:02.640 --> 01:02:05.440
And they look very different. And...

01:02:05.440 --> 01:02:12.560
Right. If you think of, naively, you think, well, I know the average and maybe how spread out things are.

01:02:12.560 --> 01:02:18.080
So I can kind of get a sense of what this data probably means. But in reality,

01:02:18.080 --> 01:02:20.160
Yeah, you have no idea.

01:02:20.160 --> 01:02:22.960
Outliers and other weird things could just completely blow up those ideas, right?

01:02:22.960 --> 01:02:30.960
Yeah. And so in 2017, they had developed this algorithm using simulated annealing. So if you

01:02:30.960 --> 01:02:38.400
scroll down once more, where they take the dinosaur at the top and they use simulated annealing.

01:02:38.400 --> 01:02:43.200
So let me describe this really quick for people listening. So there's a matplotlib looking

01:02:43.200 --> 01:02:51.760
graph of some data points and it has a certain standard deviation, certain mean, etc. But if you

01:02:51.760 --> 01:02:55.360
actually look at it, it looks like a T-Rex, right? Something like this?

01:02:55.360 --> 01:02:55.760
Yes.

01:02:55.760 --> 01:02:58.080
Is that a decent enough description?

01:02:58.080 --> 01:03:02.880
That's a perfect description. Yeah. So what the researchers have done is they use this

01:03:02.880 --> 01:03:08.320
simulated annealing algorithm to push the points around. So starting from that dinosaur,

01:03:08.320 --> 01:03:13.520
and just moving the points ever so slightly in such a way where the summary statistics are unchanged,

01:03:13.520 --> 01:03:20.560
at least to the two decimal places where they're currently shown and tried to make other shapes.

01:03:20.560 --> 01:03:28.400
So some of the other shapes they have are a bullseye, a circle, lines slanted vertically or a star.

01:03:28.400 --> 01:03:37.600
And all of these can be formed from that dinosaur, some to varying degrees of success. But they're visually

01:03:37.600 --> 01:03:44.320
recognizable, which is the point that is pretty important here, right? So you cannot, as we said,

01:03:44.320 --> 01:03:48.800
rely on those summary statistics because you don't know. Is it the stars? Is it the dinosaur? Is it a line?

01:03:48.800 --> 01:03:56.000
It could be anything. And they also had animation that they included. So basically,

01:03:56.000 --> 01:04:01.920
you could start from the dinosaur and then turn it into a circle. And that's even more impractical because

01:04:01.920 --> 01:04:08.640
you realize at that point that it's not just the dinosaur and the circle that has something in common, but it's the infinite

01:04:08.640 --> 01:04:22.640
number of points arrangements that you can make between them that actually share that. And so I wanted to explore if I could extend that to working for arbitrary data sets and also different shapes.

01:04:22.640 --> 01:04:29.360
So I found the research code and spent quite a bit hacking at it and even just trying to get it to work

01:04:29.360 --> 01:04:41.360
for their example. And that took quite a bit of time. And then I had this idea of being that it was for a pandas workshop to take a panda and turn it. Initially, I wanted to turn it into the dinosaur.

01:04:41.360 --> 01:05:03.360
I still have not found a good way to do that yet, but I also haven't been trying at all this year on that, to be honest. But I figured out how to, and I, by adding a lot of other things that didn't exist in an initial algorithm, things like calculating bounds of the data and different metrics that I figured out a way to get it to work

01:05:04.080 --> 01:05:10.480
regardless. So I can give it a panda data set or a soccer ball and it can perform these transformations

01:05:10.480 --> 01:05:29.920
and move the points around. So on the screen we have the first time I shared this publicly, what I had been working on, it happened to be Easter. So I made a bunny holding an Easter egg with the words, happy Easter off the side. And it turns into two vertical lines all while preserving the summary statistics.

01:05:29.920 --> 01:05:31.520
That's really cool.

01:05:32.080 --> 01:05:42.320
This is something I think makes it for a very good teaching tool and say like an introductory statistics course to encourage people that they need to visualize.

01:05:42.320 --> 01:06:00.720
There's an interesting study, I think called the hypothesis is a liability. And they talked about taking students in a statistical analysis course, and they split them into two. And one set of students were just given the data set and say here, explore, see what you find.

01:06:00.720 --> 01:06:08.960
And then the other set were just given the data set. And then the other set were given a set of hypotheses to test. And it turns out that the data is shaped like a gorilla.

01:06:08.960 --> 01:06:18.000
And the students who were told here, test these hypotheses were five times less likely to even realize that it was shaped like a gorilla because they never plotted it.

01:06:18.000 --> 01:06:19.200
Yeah. Yeah.

01:06:19.200 --> 01:06:20.200
If you don't look.

01:06:20.200 --> 01:06:28.440
This is such a huge thing to get people learning this early. And the more shocking these visuals are, the better.

01:06:28.440 --> 01:06:29.000
Yeah.

01:06:29.000 --> 01:06:38.680
Yeah. And I think these are super shocking, right? Having T-Rexes and bunnies and go, you know, that bunny is, you know, equivalent.

01:06:38.680 --> 01:06:46.920
There's a continuous transformation from bunny to blob of dots with one outside dot, right? That kind of stuff kind of surprise you, I think.

01:06:46.920 --> 01:06:57.160
And then, I mean, one thing I see, especially when the dinosaur came out, but even when I posted some of my first examples is you see people comment right away.

01:06:57.160 --> 01:07:07.400
Wow, that there's something that's so cool that that dinosaur is possible to do that with. Like, no, no, no, it's not. It's not just the dinosaur or just the panda. It's really like anything.

01:07:07.400 --> 01:07:21.400
And so the way this also works is that people can use their own data sets or they can add something new. And that's what I've had. That's what I've done this year in the two previous development sprints that I had people just been.

01:07:21.400 --> 01:07:39.560
I did one in EuroPython and one in PyCon Taiwan earlier this year and hopefully in Australia we'll do some more. But I had people add, for example, a target shape. So what the, for example, the panda would turn into.

01:07:39.560 --> 01:07:49.160
We have a club, like the card suit, which was quite a challenge and the spade. And I had already had the heart.

01:07:49.160 --> 01:08:08.040
The heart is actually a trigonometric equation, which blew my mind at first. There's actually a page I found on, I think, Wolfram Alpha, which was like, I want to say like 10 or 15 different equations, trigonometric equations for different types of hearts. And you can pick the exact type of heart you wanted.

01:08:08.040 --> 01:08:10.920
The social media heart, the emoji heart, what are we talking about?

01:08:10.920 --> 01:08:13.460
No, no, but it was just like, this is longer. This is more curved.

01:08:13.460 --> 01:08:14.960
Yeah, yeah, yeah. That's awesome.

01:08:15.600 --> 01:08:24.040
But these are all now math problems when you think about that side of it. So this could then be used maybe in a course where they want to focus on math, but also some more coding.

01:08:24.040 --> 01:08:40.000
So there's lots of different use cases, like just giving it the data. And that's very much more just pure statistics. But, you know, I think, and I've heard from a few teachers that, from what I presented, that they're, they, sounds like this would be something that they would like to use.

01:08:40.000 --> 01:08:46.440
So hopefully that does happen. If not, it's a fun thing to put in my slides and I did enjoy getting it to work.

01:08:46.440 --> 01:08:54.440
Yeah, I didn't pull up any good videos for the YouTube video, but there's some really nice animations of actually seeing it go from one to the other that you got.

01:08:54.440 --> 01:09:01.440
And this is, you're doing a talk at PyCon Australia and then you're doing a sprint on this as well, right?

01:09:01.440 --> 01:09:04.000
Coming up in November 22nd, about a month from now?

01:09:04.000 --> 01:09:04.800
Correct.

01:09:04.800 --> 01:09:11.320
So cool. People can check that out if they happen to be at PyCon Australia and want to...

01:09:11.320 --> 01:09:17.920
Well, I'll also be talking about it in San Francisco next week. There won't be a sprint, but I will be talking about that.

01:09:17.920 --> 01:09:18.740
Okay.

01:09:18.740 --> 01:09:19.820
It's not a PyCon though.

01:09:20.320 --> 01:09:32.920
Sure. It's still cool. All right. Well, Stephanie, thank you so much for being here. Let's, let's wrap things up, but I guess, you know, give us a final call to action for people maybe interested in pre-commit hooks or other stuff you're doing.

01:09:32.920 --> 01:09:50.980
Yeah, you can find everything that we mentioned here and the projects on my website. I'm putting much more effort into putting stuff on there this year now that I've rebuilt it. So definitely check there and sign up for my newsletter. Follow me on socials. There's no links down here, but you can find them.

01:09:50.980 --> 01:09:58.740
There'll be links on the episode page. So we'll put them there. All right. Well, thanks. Thanks for being here. It's great to talk to you. Thanks for coming on and sharing.

01:09:58.740 --> 01:10:00.060
Thanks for having me.

01:10:00.060 --> 01:10:00.780
Yeah. Bye-bye.

01:10:00.780 --> 01:10:01.420
Bye.

01:10:01.420 --> 01:10:02.420
Thank you.

01:10:02.420 --> 01:10:03.720
Thank you.

