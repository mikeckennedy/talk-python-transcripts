WEBVTT

00:00:00.000 --> 00:00:05.000
- Hey, John and Benz, how you doing?


00:00:05.000 --> 00:00:08.040
- Good, how you doing?


00:00:08.040 --> 00:00:11.280
- Fantastic, thanks for being on the podcast today.


00:00:11.280 --> 00:00:13.180
We're looking forward to kicking that off.


00:00:13.180 --> 00:00:15.120
And just a quick note for everyone listening


00:00:15.120 --> 00:00:18.000
in the live stream live, thank you for being here.


00:00:18.000 --> 00:00:19.960
If you have questions, comments, feedback,


00:00:19.960 --> 00:00:21.280
throw that into the live chat


00:00:21.280 --> 00:00:23.440
and we'll try to make that part of the show.


00:00:23.440 --> 00:00:24.440
If you're listening afterwards,


00:00:24.440 --> 00:00:26.620
well, I guess check out what other people said.


00:00:26.620 --> 00:00:29.640
So with that, let's kick this off.


00:00:29.640 --> 00:00:35.640
Ben, it's John. Welcome to Talk Python to Me.


00:00:35.640 --> 00:00:37.640
Thank you. Thanks for having us.


00:00:37.640 --> 00:00:48.640
Yeah, it's great to have you both here. It's going to be exciting, unnerving, I might say, a little bit to have this conversation, but I think it's certainly high time.


00:00:48.640 --> 00:00:50.640
You'll never pip install the same way.


00:00:50.640 --> 00:00:53.720
- Exactly, exactly.


00:00:53.720 --> 00:00:56.840
You just kind of hold your breath as you do at each time.


00:00:56.840 --> 00:00:58.560
And you know, I'm also,


00:00:58.560 --> 00:01:03.560
this is not a challenge that just the Python world faces.


00:01:03.560 --> 00:01:04.440
Right?


00:01:04.440 --> 00:01:07.200
This is anyone that has a package manager.


00:01:07.200 --> 00:01:08.240
- Yep.


00:01:08.240 --> 00:01:10.080
- And the more open, the bigger,


00:01:10.080 --> 00:01:11.640
the difficulties, I suppose.


00:01:11.640 --> 00:01:12.480
Right?


00:01:12.480 --> 00:01:15.440
So NPM, gems, like you name it, right?


00:01:15.440 --> 00:01:16.280
- Yep.


00:01:16.280 --> 00:01:17.120
- Great.


00:01:17.120 --> 00:01:19.000
- If you're a software developer these days,


00:01:19.000 --> 00:01:20.520
it probably affects you.


00:01:20.520 --> 00:01:23.240
- Yeah, absolutely.


00:01:23.240 --> 00:01:27.360
So before we get into the typo squatting,


00:01:27.360 --> 00:01:31.240
the supply chain issues and all the stuff in history


00:01:31.240 --> 00:01:34.240
and current problems and, you know,


00:01:34.240 --> 00:01:36.480
on the positive side, there are solutions and tools


00:01:36.480 --> 00:01:38.420
and things that we can talk about as well.


00:01:38.420 --> 00:01:40.840
Before we get into all that, let's start with your story,


00:01:40.840 --> 00:01:42.620
maybe abbreviated version,


00:01:42.620 --> 00:01:43.600
since there's a couple of you,


00:01:43.600 --> 00:01:46.400
Ben, how'd you get into programming in Python?


00:01:46.400 --> 00:01:48.040
- Programming, I got into just as a kid.


00:01:48.040 --> 00:01:50.920
got a computer when I was nine or 10


00:01:50.920 --> 00:01:53.060
and tinkered around with it, enjoyed it,


00:01:53.060 --> 00:01:54.840
ended up actually taking programming classes


00:01:54.840 --> 00:01:56.500
in high school, stuck with it in college,


00:01:56.500 --> 00:01:58.420
majoring in computer engineering,


00:01:58.420 --> 00:02:01.180
and was a software developer for systems engineering,


00:02:01.180 --> 00:02:04.960
that sort of stuff, in the defense industry for 20 years.


00:02:04.960 --> 00:02:07.280
- Yeah, what languages did you start in?


00:02:07.280 --> 00:02:08.680
- Originally started in C, actually,


00:02:08.680 --> 00:02:11.760
originally learned Pascal, then started in C, C++,


00:02:11.760 --> 00:02:14.960
and transitioned over to doing more active


00:02:14.960 --> 00:02:16.640
Python development.


00:02:16.640 --> 00:02:21.640
I just needed a web scraper, needed to collect some data


00:02:21.640 --> 00:02:23.640
and analyze it, and Python was the--


00:02:23.640 --> 00:02:25.640
Brian: You didn't want to do that in C++?


00:02:25.640 --> 00:02:27.640
John: I did not, no.


00:02:27.640 --> 00:02:29.640
And now Python is my preferred language for tinkering


00:02:29.640 --> 00:02:33.640
or back-end web development.


00:02:33.640 --> 00:02:35.640
Pretty much as much as I can use it for, I use Python.


00:02:35.640 --> 00:02:37.640
Brian: Yeah, fantastic.


00:02:37.640 --> 00:02:39.640
John, how about you?


00:02:39.640 --> 00:02:40.640
John: I don't have quite the classic story.


00:02:40.640 --> 00:02:43.640
I learned it programming through statistics classes in undergrad.


00:02:43.640 --> 00:02:45.760
specialized language called Stata


00:02:45.760 --> 00:02:48.020
that a lot of economists use.


00:02:48.020 --> 00:02:51.060
Good for legal trials, well-tested.


00:02:51.060 --> 00:02:54.560
But I didn't learn Python until I, in grad school,


00:02:54.560 --> 00:02:57.020
I took more data science classes


00:02:57.020 --> 00:03:00.740
and learned the typical NumPy, Pandas, scikit-learn.


00:03:00.740 --> 00:03:02.620
- Right, let us introduce you to,


00:03:02.620 --> 00:03:04.660
probably it was called IPython at the time.


00:03:04.660 --> 00:03:06.040
- Yeah, exactly.


00:03:06.040 --> 00:03:09.180
And now, of course, Jupyter Notebooks, that sort of thing.


00:03:09.180 --> 00:03:10.900
- Yeah, fantastic.


00:03:10.900 --> 00:03:14.820
It's really interesting just to see all the broad


00:03:14.820 --> 00:03:16.940
and diverse ways that Python is growing


00:03:16.940 --> 00:03:18.380
and people are coming into it.


00:03:18.380 --> 00:03:21.940
It's not that, well, I learned it for programming,


00:03:21.940 --> 00:03:23.900
building an operating system and on I went.


00:03:23.900 --> 00:03:25.900
There's a lot of languages that are fairly,


00:03:25.900 --> 00:03:28.260
or JavaScript, I built it to work on a website.


00:03:28.260 --> 00:03:32.160
It draws people in from all sorts of places,


00:03:32.160 --> 00:03:33.500
which is awesome, I think.


00:03:33.500 --> 00:03:34.820
- It's a meeting ground.


00:03:34.820 --> 00:03:38.060
- Yeah, and I think that's one of the strengths, actually,


00:03:38.060 --> 00:03:40.060
kind of a sidebar, is that we have all these people


00:03:40.060 --> 00:03:42.140
different backgrounds and different motivations


00:03:42.140 --> 00:03:44.400
and interests and things they're trying to build


00:03:44.400 --> 00:03:45.840
rather than being more like,


00:03:45.840 --> 00:03:47.300
well, here's how I build my web app.


00:03:47.300 --> 00:03:48.800
How do you build your web app?


00:03:48.800 --> 00:03:51.580
Yeah, very cool.


00:03:51.580 --> 00:03:53.920
And how about now?


00:03:53.920 --> 00:03:56.260
Vence, what are you up to day to day?


00:03:56.260 --> 00:03:59.060
- So day to day, you know, kind of put down the keyboard,


00:03:59.060 --> 00:04:01.580
at least from the programming perspective.


00:04:01.580 --> 00:04:06.580
And I work as a cybersecurity subject matter expert


00:04:06.580 --> 00:04:09.700
for In-Q-Tel, which, so I guess my job there


00:04:09.700 --> 00:04:13.860
to search for and then work with companies we find in the cybersecurity industry, we're


00:04:13.860 --> 00:04:18.580
going to have a high impact on national security, as well as providing kind of advisory services


00:04:18.580 --> 00:04:21.580
to our customers in the US government.


00:04:21.580 --> 00:04:23.220
Okay, cool.


00:04:23.220 --> 00:04:25.740
So what's IQtel and QTel?


00:04:25.740 --> 00:04:27.980
Sorry, IQtel I guess it is.


00:04:27.980 --> 00:04:30.220
What's the company story there?


00:04:30.220 --> 00:04:31.900
Because you both are from the same company.


00:04:31.900 --> 00:04:38.580
Yeah, so it's a nonprofit, 501(c)(3), stood up a little over 20 years ago by the CIA to


00:04:38.580 --> 00:04:41.100
to basically help, originally the CIA,


00:04:41.100 --> 00:04:43.380
but now it's seen most of the intelligence community


00:04:43.380 --> 00:04:47.900
and elements of the DoD, basically acquire and adopt


00:04:47.900 --> 00:04:51.220
and use cutting edge technology.


00:04:51.220 --> 00:04:53.420
They realized a little while ago, around that time,


00:04:53.420 --> 00:04:56.020
that a lot of innovation was moving into Silicon Valley


00:04:56.020 --> 00:04:58.860
and into other places in industry and startups.


00:04:58.860 --> 00:05:00.300
And the traditional acquisition model


00:05:00.300 --> 00:05:02.960
that the federal government uses


00:05:02.960 --> 00:05:04.660
doesn't play well with those people.


00:05:04.660 --> 00:05:05.820
They don't understand it.


00:05:05.820 --> 00:05:08.680
So we kind of help as a bridge working with startups,


00:05:08.680 --> 00:05:10.920
identifying them and then helping them interact


00:05:10.920 --> 00:05:13.720
with the government and conversely helping the government


00:05:13.720 --> 00:05:16.520
adopt said technologies.


00:05:16.520 --> 00:05:17.520
- Right, right.


00:05:17.520 --> 00:05:19.720
So maybe, let me see if I can run a scenario by you.


00:05:19.720 --> 00:05:21.640
Maybe there's some Silicon Valley company


00:05:21.640 --> 00:05:25.620
that's created like a cool ML thing


00:05:25.620 --> 00:05:30.000
that identifies deforestation or something like that.


00:05:30.000 --> 00:05:31.760
And the government decides,


00:05:31.760 --> 00:05:34.160
oh, this might be really helpful for us for,


00:05:34.160 --> 00:05:35.320
I have no reason why.


00:05:35.320 --> 00:05:37.800
I have no idea why, but imagine there is a reason, right?


00:05:37.800 --> 00:05:40.520
You might help that company like work


00:05:40.520 --> 00:05:42.200
with the request for proposals


00:05:42.200 --> 00:05:44.560
and the whole crazy government side of things


00:05:44.560 --> 00:05:47.840
and get them more in line with what's needed there.


00:05:47.840 --> 00:05:49.200
Is that the story?


00:05:49.200 --> 00:05:50.280
- Yeah, that's to an extent.


00:05:50.280 --> 00:05:53.160
Yeah, I mean, we actually invest in them, take equity


00:05:53.160 --> 00:05:56.240
and then we do help them learn how to interact


00:05:56.240 --> 00:05:58.440
with the government and also help them shape their product


00:05:58.440 --> 00:06:00.280
to meet our customer needs.


00:06:00.280 --> 00:06:01.920
- Yeah, okay, cool.


00:06:01.920 --> 00:06:05.320
Interesting. I had no idea such a company exists.


00:06:05.320 --> 00:06:06.840
John, how about yourself?


00:06:06.840 --> 00:06:08.840
- I'm also at IQT.


00:06:08.840 --> 00:06:10.840
I work in what's called IQT Labs.


00:06:10.840 --> 00:06:13.880
It's an open source applied research and development lab


00:06:13.880 --> 00:06:15.920
where we do hands-on research,


00:06:15.920 --> 00:06:19.120
mostly in the open source, largely on GitHub.


00:06:19.120 --> 00:06:22.440
- Cool.


00:06:22.440 --> 00:06:24.000
Yeah, it sounds very, very fun.


00:06:24.000 --> 00:06:29.000
Now, let's talk about the supply chain issue,


00:06:29.000 --> 00:06:31.720
I guess at a real broad level, right?


00:06:31.720 --> 00:06:33.040
And I don't know how you all feel.


00:06:33.040 --> 00:06:38.040
I suspect that you have a little more hesitancy or whatever


00:06:38.040 --> 00:06:42.640
as you interact with the computers and software


00:06:42.640 --> 00:06:44.040
and the internet and so on.


00:06:44.040 --> 00:06:46.180
You know, when you, oh, there's a cool new app.


00:06:46.180 --> 00:06:47.060
Maybe I'll try that.


00:06:47.060 --> 00:06:49.960
Like, you might think a little more carefully about this


00:06:49.960 --> 00:06:52.720
than the average, you know, say teenager or whatever.


00:06:52.720 --> 00:06:55.400
But-


00:06:55.400 --> 00:06:57.240
- There's a little bit of paranoia that comes with this.


00:06:57.240 --> 00:06:58.160
- Yeah, exactly.


00:06:58.160 --> 00:06:59.000
Exactly.


00:06:59.000 --> 00:06:59.820
That's what I'm getting at.


00:06:59.820 --> 00:07:07.740
I feel like one of the more insidious aspects of this has been the supply chain side of things, right?


00:07:07.740 --> 00:07:11.140
Because it's one thing to say that app looks shady, that site looks shady.


00:07:11.140 --> 00:07:15.340
Let me just not go there. Let me not click that link. Let me not install that.


00:07:15.340 --> 00:07:19.740
But if I were to install, you know, Office Suite X,


00:07:19.740 --> 00:07:23.740
and I completely trust the company that makes that,


00:07:23.740 --> 00:07:28.140
but there's some library that they got from a third party,


00:07:28.140 --> 00:07:31.960
and that third party had been hacked


00:07:31.960 --> 00:07:34.980
and they somehow Trojaned that third party thing


00:07:34.980 --> 00:07:36.520
and no one's found out yet.


00:07:36.520 --> 00:07:39.340
Well, that's, I don't know, that's super scary.


00:07:39.340 --> 00:07:41.940
And that's kind of along the lines


00:07:41.940 --> 00:07:43.700
of some of the things that we're touching on.


00:07:43.700 --> 00:07:45.900
And so I think the most broad one of those


00:07:45.900 --> 00:07:49.260
in the recent times has gotta be SolarWinds, right?


00:07:49.260 --> 00:07:52.140
- That's certainly what's making the headlines


00:07:52.140 --> 00:07:56.540
these days, even what, four or five months later.


00:07:56.540 --> 00:08:01.340
That's still a topic of discussion around this theme.


00:08:01.340 --> 00:08:05.260
And yeah, I mean, that was a pretty challenging attack


00:08:05.260 --> 00:08:06.540
to pull off.


00:08:06.540 --> 00:08:10.420
I mean, it took nation state actors months, maybe years


00:08:10.420 --> 00:08:14.260
to plan, laying the groundwork, getting things in place,


00:08:14.260 --> 00:08:16.580
basically infiltrating SolarWinds development


00:08:16.580 --> 00:08:18.220
infrastructure.


00:08:18.220 --> 00:08:21.340
Pretty impressive, honestly, that they were able to do it.


00:08:21.340 --> 00:08:23.580
And obviously, the impact was enormous.


00:08:23.580 --> 00:08:26.020
It was wildly successful.


00:08:26.020 --> 00:08:30.420
I think one thing that Vince and I have been interested in, though, while this sort of


00:08:30.420 --> 00:08:36.740
attack is very serious and obviously has rightly gathered a lot of attention, there are a number


00:08:36.740 --> 00:08:41.340
of other types of attacks, often focusing on open source software, that are actually


00:08:41.340 --> 00:08:43.260
more numerous.


00:08:43.260 --> 00:08:50.260
How serious they are is actually open to debate, but we are still talking many people affected


00:08:50.260 --> 00:08:55.300
and can still have grave consequences, especially if you're the one that's hacked.


00:08:55.300 --> 00:08:56.660
- Yeah, absolutely.


00:08:56.660 --> 00:09:01.500
- It's gotten less front of the newspaper attention,


00:09:01.500 --> 00:09:04.180
but Vince and I still think it's serious.


00:09:04.180 --> 00:09:05.860
- I think it's, yeah, I think it's very serious.


00:09:05.860 --> 00:09:06.700
I started with this one


00:09:06.700 --> 00:09:08.660
because I feel like everyone has heard about this.


00:09:08.660 --> 00:09:10.660
Everyone can relate to this, right?


00:09:10.660 --> 00:09:11.500
- Yeah.


00:09:11.500 --> 00:09:16.300
- Here's an example of a company that supplies network gear


00:09:16.300 --> 00:09:19.380
to many of the largest companies


00:09:19.380 --> 00:09:22.260
and government organizations around the world.


00:09:22.260 --> 00:09:26.900
And this was basically a way to get access to all of those.


00:09:26.900 --> 00:09:27.740
- That's right.


00:09:27.740 --> 00:09:30.220
- They think it's Russia's cozy beer crew,


00:09:30.220 --> 00:09:31.540
but who knows, right?


00:09:31.540 --> 00:09:33.620
And it almost doesn't matter.


00:09:33.620 --> 00:09:37.660
Another one that I think also is in the news real quick


00:09:37.660 --> 00:09:39.300
before we jump into the open source stuff,


00:09:39.300 --> 00:09:41.940
this is not open source at all,


00:09:41.940 --> 00:09:43.700
but was called Xcode Ghost.


00:09:43.700 --> 00:09:45.500
Have you two heard of this?


00:09:45.500 --> 00:09:46.340
- Yeah, yeah.


00:09:46.340 --> 00:09:50.440
So yeah, I mean, basically what happened here was,


00:09:51.540 --> 00:09:54.660
app developers, iOS developers in China,


00:09:54.660 --> 00:09:56.860
don't like to download or can't download stuff


00:09:56.860 --> 00:10:00.660
from the Apple, official Apple version of Xcode.


00:10:00.660 --> 00:10:04.380
So someone put a compromised version of Xcode--


00:10:04.380 --> 00:10:06.180
- Let's get it off BitTorrent or something.


00:10:06.180 --> 00:10:07.020
How could that go wrong?


00:10:07.020 --> 00:10:08.780
- Yeah, I mean, off of some Chinese file sharing site


00:10:08.780 --> 00:10:10.460
that app developers over there like to use


00:10:10.460 --> 00:10:11.500
'cause it's more convenient.


00:10:11.500 --> 00:10:13.460
And it was compromised.


00:10:13.460 --> 00:10:17.540
There was basically something that would bake a backdoor


00:10:17.540 --> 00:10:20.180
into the ultimate compiled app


00:10:20.180 --> 00:10:23.480
that will go into the app store or variant of the app store.


00:10:23.480 --> 00:10:26.240
- Yeah, so every app that was built


00:10:26.240 --> 00:10:29.040
and published to the app store with Xcode Ghost,


00:10:29.040 --> 00:10:31.560
which looked exactly like Xcode,


00:10:31.560 --> 00:10:34.680
injected a backdoor malware type of thing into it.


00:10:34.680 --> 00:10:38.360
So there was something like 2,500 applications


00:10:38.360 --> 00:10:42.480
on the iOS app store that, yeah,


00:10:42.480 --> 00:10:44.960
that affected like 128 million people.


00:10:44.960 --> 00:10:49.560
So that's bad kinds of things, right?


00:10:49.560 --> 00:10:51.560
- Very bad. - Not a good idea.


00:10:51.560 --> 00:10:53.560
- I mean, I guess attacking a compiler,


00:10:53.560 --> 00:10:55.560
I mean, developers trust their compiler, I would say.


00:10:55.560 --> 00:10:57.560
I mean, not being able to rely on that


00:10:57.560 --> 00:10:59.560
or feel like you have, and it's very hard to


00:10:59.560 --> 00:11:01.560
vet your code, I mean, especially for


00:11:01.560 --> 00:11:03.560
closed source or closed-ish source


00:11:03.560 --> 00:11:05.560
product like Xcode.


00:11:05.560 --> 00:11:07.560
It's very hard to see, is my compiler


00:11:07.560 --> 00:11:09.560
compromised or not?


00:11:09.560 --> 00:11:11.560
- Yeah, yeah.


00:11:11.560 --> 00:11:13.560
And I think this actually is closer


00:11:13.560 --> 00:11:15.560
to the open source side of things,


00:11:15.560 --> 00:11:17.560
because if you can start to


00:11:17.560 --> 00:11:19.560
the tools of the developers building the things.


00:11:19.560 --> 00:11:21.560
That's a problem.


00:11:21.560 --> 00:11:23.560
Yeah, so let's


00:11:23.560 --> 00:11:27.560
talk about the open source side. John,


00:11:27.560 --> 00:11:29.560
you pointed out there's many known


00:11:29.560 --> 00:11:31.560
attacks over there.


00:11:31.560 --> 00:11:33.560
That's right. What's going on?


00:11:33.560 --> 00:11:35.560
So,


00:11:35.560 --> 00:11:37.560
there's actually a range of attacks, but


00:11:37.560 --> 00:11:39.560
I'll mention a couple here and we'll get into typosquatting.


00:11:39.560 --> 00:11:43.560
So there is certainly a typosquatting


00:11:43.560 --> 00:11:45.560
attack, which we'll discuss extensively today,


00:11:45.560 --> 00:11:48.680
which just like domain names, you might have heard,


00:11:48.680 --> 00:11:54.360
someone is trying to go to a website and mistypes it a little


00:11:54.360 --> 00:11:56.760
or somehow gets confused about how it's spelled,


00:11:56.760 --> 00:11:58.600
maybe switching the order of words,


00:11:58.600 --> 00:12:01.000
and then ends up someplace that's malicious,


00:12:01.000 --> 00:12:03.720
either on the web or if you're downloading a package,


00:12:03.720 --> 00:12:07.640
you download a package you think you want, but it's not actually.


00:12:07.640 --> 00:12:11.080
And sometimes, not always, sometimes that contains malware


00:12:11.080 --> 00:12:15.080
and does things to your computer that you don't want.


00:12:15.080 --> 00:12:18.080
That's bad, right?


00:12:18.080 --> 00:12:27.080
Bad. Especially if there's arbitrary code execution, meaning they can do what they want because perhaps you've installed it as root.


00:12:27.080 --> 00:12:43.080
Right. And well, I think a lot of people who are getting into Python don't realize that when you pip install something, unless it's being installed as a wheel, as a binary wheel, it's running a setup.py as your account.


00:12:43.080 --> 00:12:49.080
So whatever your current account is able to do, like you said, if you run it as pseudo, it can do more.


00:12:49.080 --> 00:12:56.080
But even if it can just completely wreck your account and get your information, for many people, that's plenty bad on your computer. You don't want that.


00:12:56.080 --> 00:13:02.080
Yeah, and it could be your computer, it could be your corporation's computer where you work, or your company's computer.


00:13:02.080 --> 00:13:06.080
In this setup.py, you're exactly right, it is a key attack vector.


00:13:06.080 --> 00:13:11.840
vector. For many people, it's simply a helpful way to install software, but unfortunately,


00:13:11.840 --> 00:13:17.840
some people abuse that specific resource. Yeah, I think it's been critical in the growth


00:13:17.840 --> 00:13:24.960
of how software is built. I remember, you know, Ben, you were talking about doing C++ programming.


00:13:24.960 --> 00:13:33.440
I remember back in 97, 98, 99, doing C++ programming then, and it felt like whatever you wanted to do,


00:13:33.440 --> 00:13:35.940
almost everything you had to build from scratch.


00:13:35.940 --> 00:13:38.280
You want a library that does this kind of UI widgets?


00:13:38.280 --> 00:13:39.440
Well, how do I build that?


00:13:39.440 --> 00:13:42.440
You want a library that has this kind of data structure?


00:13:42.440 --> 00:13:44.900
Where do I either find or build that, right?


00:13:44.900 --> 00:13:47.040
And now it's just pip install this thing,


00:13:47.040 --> 00:13:48.580
pip install that thing.


00:13:48.580 --> 00:13:52.620
And the building blocks that we have to compose


00:13:52.620 --> 00:13:54.800
are so much more effective, right?


00:13:54.800 --> 00:13:56.300
I can take a couple of libraries here


00:13:56.300 --> 00:13:57.140
and click them together,


00:13:57.140 --> 00:13:59.840
and all of a sudden I've got something


00:13:59.840 --> 00:14:00.920
absolutely incredible,


00:14:00.920 --> 00:14:02.760
like pulling data from different sources,


00:14:02.760 --> 00:14:04.680
creating amazing graphs.


00:14:04.680 --> 00:14:08.280
I mean, that is the power of modern software development.


00:14:08.280 --> 00:14:12.800
And yet, I guess Corey Adkins out in the live stream


00:14:12.800 --> 00:14:15.120
has a nice sort of comment.


00:14:15.120 --> 00:14:17.960
It's like, he said, "I didn't realize how naive I was


00:14:17.960 --> 00:14:19.960
"thinking packages were vetted like Pip."


00:14:19.960 --> 00:14:21.440
- You're not alone, Corey.


00:14:21.440 --> 00:14:23.400
You're not alone, join the club.


00:14:23.400 --> 00:14:28.160
- Yeah, and it's these incredible building blocks,


00:14:28.160 --> 00:14:29.600
these Lego pieces.


00:14:31.760 --> 00:14:36.120
There's a lot of faith out there that these are good building blocks.


00:14:36.120 --> 00:14:39.440
Not good in the sense they don't have bugs, but good in that they have a good intent.


00:14:39.440 --> 00:14:50.160
Well, I think that's one thing that's the key is that it is a challenge here is you have to kind of figure out the intent of the people you're trusting and you are trusting them ultimately.


00:14:50.160 --> 00:14:54.720
And you have to hope they do not have malicious intent because inferring that is very challenging.


00:14:54.720 --> 00:14:55.940
Yeah.


00:14:55.940 --> 00:14:57.760
And it's a it's a double edged sword.


00:14:58.280 --> 00:15:00.140
I mean, I agree.


00:15:00.140 --> 00:15:05.540
This is it is a powerful change that you can download a couple of libraries and have an amazing app,


00:15:05.540 --> 00:15:08.420
potentially in a few minutes, maybe an hour or two.


00:15:08.420 --> 00:15:13.740
And this is the dream of code reuse come alive finally.


00:15:13.740 --> 00:15:18.140
And it just so happens that there are sometimes downsides.


00:15:18.140 --> 00:15:20.140
They can be mitigated.


00:15:20.140 --> 00:15:23.940
But unfortunately to the unaware user,


00:15:23.940 --> 00:15:27.900
which it's all too easy to be unaware.


00:15:27.900 --> 00:15:29.740
It's difficult, actually.


00:15:29.740 --> 00:15:33.020
There are serious, there can be risks.


00:15:33.020 --> 00:15:35.380
- Yeah, there definitely can.


00:15:35.380 --> 00:15:38.660
Kim Van Wick out of the live stream has an example.


00:15:38.660 --> 00:15:43.220
A benign example would be Attr, A-T-T-R, versus Attrs.


00:15:43.220 --> 00:15:47.260
Both are legitimate packages, but completely different.


00:15:47.260 --> 00:15:51.380
Another example would be if I want to install requests,


00:15:51.380 --> 00:15:53.740
but I actually just type request, right?


00:15:53.740 --> 00:15:56.900
I mean, even auditorily, like they sound like requests.


00:15:56.900 --> 00:15:58.500
- Requests. - Easy to do.


00:15:58.500 --> 00:16:01.020
- It's even sounds like very similar


00:16:01.020 --> 00:16:03.460
with the S versus no S there.


00:16:03.460 --> 00:16:05.340
And if somebody says, "Go install requests."


00:16:05.340 --> 00:16:07.300
You're like, "Oh, request, pip install request.


00:16:07.300 --> 00:16:08.140
"God, I did it."


00:16:08.140 --> 00:16:09.700
Like, "Wait, no, no, no, don't do that one."


00:16:09.700 --> 00:16:11.220
- Yeah, and it actually happened.


00:16:11.220 --> 00:16:14.260
You can find that that attack truly happened,


00:16:14.260 --> 00:16:17.140
it affected, at least according to the article


00:16:17.140 --> 00:16:19.580
published about it, 20,000 users.


00:16:19.580 --> 00:16:23.220
So I don't know how many of them were actually affected.


00:16:23.220 --> 00:16:25.580
I haven't, we don't, this is unfortunately


00:16:25.580 --> 00:16:31.940
part of the problem. It's hard to track this data, but the example you brought up, I know


00:16:31.940 --> 00:16:35.380
you brought it up on purpose. It's serious.


00:16:35.380 --> 00:16:42.980
Yeah. And requests with the S is installed millions of times a week or many, many, many,


00:16:42.980 --> 00:16:43.980
many times, right?


00:16:43.980 --> 00:16:44.980
Yeah.


00:16:44.980 --> 00:16:48.500
And so maybe if there's a-


00:16:48.500 --> 00:16:49.500
And there's another one that-


00:16:49.500 --> 00:16:50.500
Yeah, go ahead.


00:16:50.500 --> 00:16:51.500
No, no, go ahead.


00:16:51.500 --> 00:16:54.420
Oh, and, you know, we'll talk about this later,


00:16:54.420 --> 00:16:59.420
but we found one called pandar, like pan does, but with an R.


00:16:59.420 --> 00:17:03.740
And, you know, it's not hard to imagine


00:17:03.740 --> 00:17:08.580
just by either confusion or a mistake typing this.


00:17:08.580 --> 00:17:09.740
- Yeah, absolutely.


00:17:09.740 --> 00:17:15.540
So another area I think that is a little bit interesting


00:17:15.540 --> 00:17:19.300
before we dive completely into the package management


00:17:19.300 --> 00:17:26.980
type of squatting and related type of issues has to do with a trusted open source thing


00:17:26.980 --> 00:17:32.700
going becoming untrusted. And what I mean by that is, there were some examples of things


00:17:32.700 --> 00:17:38.520
like Google Chrome extensions being put out there as proper extensions, and then someone


00:17:38.520 --> 00:17:45.020
taking over that project, and then putting something, maybe more adware in it or something


00:17:45.020 --> 00:17:48.460
somewhat nefarious if not actually malicious.


00:17:48.460 --> 00:17:54.580
Or you know, somebody who is running the request is not a great example because it's under


00:17:54.580 --> 00:17:56.900
a PSF organization.


00:17:56.900 --> 00:18:03.280
But many of the projects are under an individual, right on their GitHub project.


00:18:03.280 --> 00:18:09.560
And so if somebody was able to break into that person's GitHub repo, and then they somehow


00:18:09.560 --> 00:18:12.860
sneak something into the code, well, does it look wrong?


00:18:12.860 --> 00:18:19.100
the person who made that change is the trusted benevolent person who runs this project, right?


00:18:19.100 --> 00:18:26.460
They are, if, you know, Guido van Rossum comes in and makes a change, well, who's going to look at


00:18:26.460 --> 00:18:29.980
that and go, "Oh, this guy is sketchy. We better really change." Like, it's probably going to be


00:18:29.980 --> 00:18:35.980
fine, right? So if someone takes over an account, like, not only do they have access to the code,


00:18:35.980 --> 00:18:40.380
and then how it gets pushed out to, you know, potentially gets into the stream that goes to


00:18:40.380 --> 00:18:45.380
a PyPI, it's also done by the person who looks like they should be most trusted.


00:18:45.380 --> 00:18:49.380
Right? So, you know, things like two-factor auth and just


00:18:49.380 --> 00:18:56.380
securing your GitHub and things along those lines seems extremely important as well.


00:18:56.380 --> 00:19:01.380
Absolutely. I mean, what you're describing with account takeovers happened numerous times.


00:19:01.380 --> 00:19:06.380
And there's variants on it too, where there's some single developer who's overworked,


00:19:06.380 --> 00:19:08.540
doesn't use the project they create anymore,


00:19:08.540 --> 00:19:10.540
they hand it over to someone who ends up


00:19:10.540 --> 00:19:14.780
putting a backdoor in it or some sort of malicious payload.


00:19:14.780 --> 00:19:16.780
I mean, that's happened.


00:19:16.780 --> 00:19:19.900
And then also people take advantage of the fact


00:19:19.900 --> 00:19:21.980
that not only you have your GitHub profile secure,


00:19:21.980 --> 00:19:25.940
but you also have to have your PyPy or RubyGems


00:19:25.940 --> 00:19:29.260
or where you actually publish your packages, people run.


00:19:29.260 --> 00:19:32.020
So there's kind of two areas for potential attack


00:19:32.020 --> 00:19:34.180
and also people take advantage of the,


00:19:34.180 --> 00:19:35.540
most people, at least me anyway,


00:19:35.540 --> 00:19:39.180
And when I would vet software, I would go look at GitHub.


00:19:39.180 --> 00:19:40.380
And then I would download--


00:19:40.380 --> 00:19:41.840
I wouldn't download it from GitHub.


00:19:41.840 --> 00:19:43.980
I would download it using pip or whatever.


00:19:43.980 --> 00:19:48.460
And that kind of dissonance or whatever you want to call it


00:19:48.460 --> 00:19:55.940
is another opportunity for confusion and malfeasance.


00:19:55.940 --> 00:19:58.940
Yeah, and so these things are hard to detect.


00:19:58.940 --> 00:20:02.780
But I guess the area that you all have done a lot of research


00:20:02.780 --> 00:20:04.300
in, you've built some tools around,


00:20:04.300 --> 00:20:08.620
And probably the biggest area is around


00:20:08.620 --> 00:20:12.020
the package management side of things, right?


00:20:12.020 --> 00:20:12.860
- That's right.


00:20:12.860 --> 00:20:15.940
- Yeah, so we've talked about typo squatting


00:20:15.940 --> 00:20:18.280
and some of the challenges


00:20:18.280 --> 00:20:21.540
where people might mistype things.


00:20:21.540 --> 00:20:23.220
And you talked about some examples


00:20:23.220 --> 00:20:25.880
where you found packages that look like


00:20:25.880 --> 00:20:28.900
they were intended to be installed by accident,


00:20:28.900 --> 00:20:30.140
you know, to catch those.


00:20:30.140 --> 00:20:32.900
If there's 7 million people type,


00:20:32.900 --> 00:20:35.900
you know, 7 million times pip install requests is typed,


00:20:35.900 --> 00:20:37.740
chances that a couple of those are misspelled


00:20:37.740 --> 00:20:40.900
or enough of those are misspelled is pretty high.


00:20:40.900 --> 00:20:43.660
But there were actually quite a few examples.


00:20:43.660 --> 00:20:47.780
Like for example, the register had an article.


00:20:47.780 --> 00:20:48.620
When was this?


00:20:48.620 --> 00:20:51.780
This was, this is recent March, 2021.


00:20:51.780 --> 00:20:54.940
The title is Python Package Index Nukes,


00:20:54.940 --> 00:20:58.980
3,653 malicious libraries uploaded


00:20:58.980 --> 00:21:02.660
soon after security shortcomings highlighted.


00:21:02.660 --> 00:21:03.500
- That's right.


00:21:03.500 --> 00:21:06.780
This is, there's really a longer historical narrative too,


00:21:06.780 --> 00:21:11.780
to include this, I'll call this political activism,


00:21:11.780 --> 00:21:13.720
anti-typo squatting activism,


00:21:13.720 --> 00:21:18.180
where this, you could call it an attack,


00:21:18.180 --> 00:21:24.900
is really about drawing attention to this risk.


00:21:24.900 --> 00:21:27.100
- Yeah, I feel like a lot of these were people like,


00:21:27.100 --> 00:21:30.300
look, I'm proving to you this could actually happen, right?


00:21:30.300 --> 00:21:35.220
I'm proving by creating this thing that uploads as requests


00:21:35.220 --> 00:21:37.980
with the SNT swapped.


00:21:37.980 --> 00:21:41.740
But were there actually viruses put up there?


00:21:41.740 --> 00:21:43.780
What is the actual harm then?


00:21:43.780 --> 00:21:46.700
- Yeah, so not all of these are.


00:21:46.700 --> 00:21:51.700
This one and a number of others,


00:21:51.700 --> 00:21:54.060
we can discuss those if we have time,


00:21:54.060 --> 00:21:58.720
were largely benevolent, but demonstrated the risk.


00:21:58.720 --> 00:22:01.440
But yes, there have been at least by our calculations,


00:22:01.440 --> 00:22:04.880
40 known malicious typo squatters


00:22:04.880 --> 00:22:08.560
on the Python package index, affecting thousands of users.


00:22:08.560 --> 00:22:11.780
We actually published a blog post on this.


00:22:11.780 --> 00:22:13.480
It's something like Python typo squatting


00:22:13.480 --> 00:22:15.080
is about more than typos.


00:22:15.080 --> 00:22:21.720
And so yes, this has happened.


00:22:21.720 --> 00:22:25.560
I don't know the exact persons that it has affected.


00:22:25.560 --> 00:22:27.200
We just don't have that data.


00:22:27.200 --> 00:22:28.940
I'm sorry if it affected you.


00:22:28.940 --> 00:22:33.240
And we published this and got some debate on Hacker News.


00:22:33.240 --> 00:22:35.100
And this is at the point where Vince and I said,


00:22:35.100 --> 00:22:36.740
oh, there's really something here.


00:22:36.740 --> 00:22:41.100
There's a broad audience that hasn't had a voice


00:22:41.100 --> 00:22:43.160
that cares about this.


00:22:43.160 --> 00:22:44.000
- Yeah.


00:22:44.000 --> 00:22:45.800
I mean, it could have been nothing, right?


00:22:45.800 --> 00:22:47.760
If I'm a student at a university


00:22:47.760 --> 00:22:50.220
and I install it on a lab computer.


00:22:50.220 --> 00:22:51.340
- No big deal.


00:22:51.340 --> 00:22:52.180
- No big deal.


00:22:52.180 --> 00:22:55.340
Like who trusts those lab computers, right?


00:22:55.340 --> 00:22:56.780
- You shouldn't.


00:22:56.780 --> 00:23:00.540
I mean, not just because like somebody could have installed something bad on it,


00:23:00.540 --> 00:23:02.500
but there's,


00:23:02.500 --> 00:23:07.020
there are college students who could be installing all sorts of just,


00:23:07.020 --> 00:23:09.020
you know, pranks and other kinds of stuff.


00:23:09.020 --> 00:23:11.900
So you should just treat those things with extreme caution.


00:23:11.900 --> 00:23:15.740
Yes, they're fully canary. But on the other hand,


00:23:15.740 --> 00:23:20.740
if this is a data scientist working at like a major corporation or an agency


00:23:20.740 --> 00:23:22.180
and that happened to them,


00:23:23.060 --> 00:23:26.600
it could be the thing that opens the door to, you know,


00:23:26.600 --> 00:23:31.160
access to the entire network and all sorts of lateral movement, right?


00:23:31.160 --> 00:23:35.940
That's right. There's even one of the earliest pieces of anti-typo squatting


00:23:35.940 --> 00:23:38.120
activism comes from Nikolai Schacher,


00:23:38.120 --> 00:23:43.120
who was writing his undergraduate thesis at the time in Europe.


00:23:43.120 --> 00:23:46.240
And he showed that over a few weeks,


00:23:46.240 --> 00:23:50.640
he got over 17,000 downloads of a series of typos, five packages,


00:23:50.800 --> 00:23:53.920
including .mil, the military addresses


00:23:53.920 --> 00:23:55.560
of the United States military.


00:23:55.560 --> 00:24:00.360
So it is certainly possible that people


00:24:00.360 --> 00:24:04.720
in a more secure organization that really values security


00:24:04.720 --> 00:24:08.560
could accidentally be the victim of type of squatting.


00:24:08.560 --> 00:24:09.380
- Yeah, absolutely.


00:24:09.380 --> 00:24:14.280
And the fact that it came out of a .mil domain shows


00:24:14.280 --> 00:24:16.720
that yeah, that bad example could also happen.


00:24:16.720 --> 00:24:21.360
And also his thesis got covered on Ars Technica, which--


00:24:21.360 --> 00:24:22.280
- That's right.


00:24:22.280 --> 00:24:24.320
Coolest undergrad thesis ever.


00:24:24.320 --> 00:24:27.200
- Exactly, that's way better than anything I did in college


00:24:27.200 --> 00:24:28.040
and how it got covered.


00:24:28.040 --> 00:24:30.320
- Me too, oh yeah.


00:24:30.320 --> 00:24:32.360
- Yeah, fantastic.


00:24:32.360 --> 00:24:37.360
And then there was this project called Pyto-squatting.


00:24:37.360 --> 00:24:40.160
- Yeah, it's a play on--


00:24:40.160 --> 00:24:42.440
- Yeah, like a play on typo squatting, right?


00:24:42.440 --> 00:24:43.800
- It's a play on typo squatting.


00:24:43.800 --> 00:24:44.840
It's a clever one.


00:24:44.840 --> 00:24:47.440
and Benjamin Balderbach and Hannah Beck,


00:24:47.440 --> 00:24:51.200
who are open source software activists, developers,


00:24:51.200 --> 00:24:54.080
also a journalist,


00:24:54.080 --> 00:24:57.080
they've really had a multi-year effort


00:24:57.080 --> 00:24:58.700
pointing out the dangers here,


00:24:58.700 --> 00:25:01.000
not simply criticizing,


00:25:01.000 --> 00:25:04.400
but trying to help Python Software Foundation


00:25:04.400 --> 00:25:07.640
and the Warehouse or PyPI crew raise money


00:25:07.640 --> 00:25:11.840
and build a consensus around


00:25:11.840 --> 00:25:14.280
trying to make this infrastructure safer.


00:25:14.280 --> 00:25:21.640
Yeah, yeah. So they had this project called Pyto squatting, but that actually got closed


00:25:21.640 --> 00:25:30.040
down. That's right. Yeah, because they said that the, the PS, what do they call it? The


00:25:30.040 --> 00:25:38.000
PSRT, Python security response team. That's a PSRT. And I'm like, wait, there's a Python


00:25:38.000 --> 00:25:43.920
security response team. Oh, yeah. They respond to emails too. They're good. Yeah. Okay. So


00:25:43.920 --> 00:25:46.960
This is an organization, a group of people


00:25:46.960 --> 00:25:50.400
under the PSF banner that basically triage


00:25:50.400 --> 00:25:52.800
these types of concerns, right?


00:25:52.800 --> 00:25:54.240
- That's right, that's right.


00:25:54.240 --> 00:26:00.440
- Okay, yeah, I'll link to their page on python.org


00:26:00.440 --> 00:26:02.800
and they have their email there.


00:26:02.800 --> 00:26:05.360
They also have rules for different types of disclosure,


00:26:05.360 --> 00:26:09.560
like whether you should email them, do other things, yeah.


00:26:09.560 --> 00:26:12.860
- That's right, and if you find a malicious package


00:26:12.860 --> 00:26:15.380
or even a package that you think is very suspicious,


00:26:15.380 --> 00:26:17.580
this is who to contact.


00:26:17.580 --> 00:26:20.500
And they're diligent and timely.


00:26:20.500 --> 00:26:24.540
- So what do you two think about


00:26:24.540 --> 00:26:26.420
how this should be disclosed?


00:26:26.420 --> 00:26:29.140
People out there listening, they find something.


00:26:29.140 --> 00:26:30.620
Should they go to Hacker News and say,


00:26:30.620 --> 00:26:33.620
"Look, this horrible thing I found on PyPI


00:26:33.620 --> 00:26:36.620
"or on NPM or whatever."


00:26:36.620 --> 00:26:39.420
Should they quietly disclose that


00:26:39.420 --> 00:26:43.220
to the security response team,


00:26:43.220 --> 00:26:46.460
and then talk about it after it's been removed and fixed.


00:26:46.460 --> 00:26:49.940
So what's the flow for disclosure?


00:26:49.940 --> 00:26:53.340
- Seems like it would follow,


00:26:53.340 --> 00:26:55.900
you know, any other responsible disclosure process


00:26:55.900 --> 00:26:59.780
for kind of traditional bugs, exploitable bugs


00:26:59.780 --> 00:27:01.800
that are vulnerabilities.


00:27:01.800 --> 00:27:05.320
Where it would be nice if you find a problem,


00:27:05.320 --> 00:27:09.220
contact maybe the Python security team,


00:27:09.220 --> 00:27:11.360
get in contact with the developer, get it fixed,


00:27:11.360 --> 00:27:16.600
probably get the package pulled down if in fact it is malicious.


00:27:16.600 --> 00:27:19.640
Then yeah, it'd be nice to have some reporting mechanism so that


00:27:19.640 --> 00:27:22.120
everyone who uses it could be identified.


00:27:22.120 --> 00:27:24.120
The first part, as John Speed was saying,


00:27:24.120 --> 00:27:27.480
the Python Salve Foundation and the PSRT do a good job,


00:27:27.480 --> 00:27:29.640
a great job of being on top of it,


00:27:29.640 --> 00:27:31.640
being timely, being responsible.


00:27:31.640 --> 00:27:34.000
It's much harder to notify.


00:27:34.000 --> 00:27:36.800
there's no authentication when you download one of these packages.


00:27:36.800 --> 00:27:38.640
It's very hard to know who's been affected.


00:27:38.640 --> 00:27:42.700
Maybe just promoting that more would be helpful,


00:27:42.700 --> 00:27:46.040
but then people have to know where to look and that they need to look at all.


00:27:46.040 --> 00:27:50.240
>> It's like the Xcode ghost thing.


00:27:50.240 --> 00:27:56.080
There was 2,500 apps that were backdoored,


00:27:56.080 --> 00:27:59.800
and I think only the top 25 were even disclosed.


00:27:59.800 --> 00:28:02.000
If there was a list of 2,500 apps,


00:28:02.000 --> 00:28:04.760
Are you going to go cross compare?


00:28:04.760 --> 00:28:10.040
No, you know, no normal person is going to cross compare that announcement with their phone.


00:28:10.040 --> 00:28:10.880
Right.


00:28:10.880 --> 00:28:11.200
Right.


00:28:11.200 --> 00:28:11.680
Right.


00:28:11.680 --> 00:28:13.560
And it's, it's just such a challenge.


00:28:13.560 --> 00:28:15.920
And I feel like, you know, here we had the same thing, right?


00:28:15.920 --> 00:28:19.480
We had 3,653 packages removed.


00:28:19.480 --> 00:28:22.520
Well, are you going to go check if you had those?


00:28:22.520 --> 00:28:27.000
It's extra hard because it's, you didn't intend to ever have them, right?


00:28:27.000 --> 00:28:31.640
You didn't intend to swap the S and the T when you type requests, but you did.


00:28:31.640 --> 00:28:32.480
- Yeah.


00:28:32.480 --> 00:28:35.440
- And you accidentally, almost unknowingly got it


00:28:35.440 --> 00:28:36.580
most likely, right?


00:28:36.580 --> 00:28:41.580
And so I do think it's really hard to push this out


00:28:41.580 --> 00:28:45.120
as an awareness thing and like,


00:28:45.120 --> 00:28:47.320
hey, you should know that this happened.


00:28:47.320 --> 00:28:48.760
And so just go check, right?


00:28:48.760 --> 00:28:51.040
The checking, I think it's really tricky.


00:28:51.040 --> 00:28:53.440
- Yeah, I mean, like many software problems,


00:28:53.440 --> 00:28:56.320
you need to solve it with more software and-


00:28:56.320 --> 00:29:00.280
- You gotta solve it with AI probably, that's gonna work.


00:29:00.280 --> 00:29:03.280
- Oh, you definitely have to solve it with AI.


00:29:03.280 --> 00:29:08.280
And I think one thing that's helpful


00:29:08.280 --> 00:29:10.840
and could be part of that process,


00:29:10.840 --> 00:29:12.720
but isn't always unfortunately,


00:29:12.720 --> 00:29:15.240
is also taking a collection,


00:29:15.240 --> 00:29:18.640
or taking that artifact that you found,


00:29:18.640 --> 00:29:21.000
let's say a Python package that was malicious,


00:29:21.000 --> 00:29:22.560
and making sure it gets to somewhere


00:29:22.560 --> 00:29:23.920
where it can be studied


00:29:23.920 --> 00:29:26.280
and hopefully future attacks prevented.


00:29:26.280 --> 00:29:29.160
And so for Python and a couple of other languages,


00:29:29.160 --> 00:29:30.920
There is actually an interesting project


00:29:30.920 --> 00:29:32.080
that has a very colorful name.


00:29:32.080 --> 00:29:34.480
It's called Backstabbers Knife Collection.


00:29:34.480 --> 00:29:36.240
Sounds very scary and malicious,


00:29:36.240 --> 00:29:39.840
but it is actually yet another enterprising grad student


00:29:39.840 --> 00:29:43.960
trying to collect malware samples,


00:29:43.960 --> 00:29:45.840
especially of interpreted languages.


00:29:45.840 --> 00:29:47.400
Python is one of them.


00:29:47.400 --> 00:29:51.080
And so that there can be a community of researchers


00:29:51.080 --> 00:29:54.400
and hopefully then companies that can fight these packages.


00:29:54.400 --> 00:29:56.840
So that would be another thing I would add to the list.


00:29:56.840 --> 00:29:58.000
Yeah, there you go.


00:29:58.000 --> 00:30:06.320
Mark Ohm is the main person associated with that and has written some interesting papers and great stuff.


00:30:06.320 --> 00:30:12.520
And so I urge you if you come upon this and you say, how do I act responsibly here?


00:30:12.520 --> 00:30:19.640
Do the things Vince says and also maybe grab a sample and give it to the Backside Research Collection or another similar repository.


00:30:19.640 --> 00:30:21.680
Yeah, interesting. Okay.


00:30:21.680 --> 00:30:26.000
Have I just messed up my computer by visiting this web page as well?


00:30:26.000 --> 00:30:27.600
I don't think so, but there is--


00:30:27.600 --> 00:30:28.440
- I'm just teasing.


00:30:28.440 --> 00:30:30.040
- Yeah, okay, okay.


00:30:30.040 --> 00:30:31.840
I mean, I can't guarantee anything though, but--


00:30:31.840 --> 00:30:33.800
- No, of course, of course, of course.


00:30:33.800 --> 00:30:35.020
Before we get too far on,


00:30:35.020 --> 00:30:37.120
Corey Adkins also asked,


00:30:37.120 --> 00:30:39.840
"When we were talking about messing up your computer,


00:30:39.840 --> 00:30:41.740
"the lab computer, so on," he asked,


00:30:41.740 --> 00:30:43.820
"Could installing these types of things


00:30:43.820 --> 00:30:46.080
"also affect shared server space?


00:30:46.080 --> 00:30:51.000
"On my IaaS land where I have a shared server


00:30:51.000 --> 00:30:53.240
"running for however much,


00:30:53.240 --> 00:30:57.240
Someone else does something bad.


00:30:57.240 --> 00:30:58.840
I mean, theoretically, sure,


00:30:58.840 --> 00:31:01.560
it depends on the permissions I would think.


00:31:01.560 --> 00:31:03.480
Yeah, if you install some dependency


00:31:03.480 --> 00:31:05.960
that has a keylogger baked into it,


00:31:05.960 --> 00:31:07.880
or I don't know, or you know,


00:31:07.880 --> 00:31:10.240
some sort of file collector and it has


00:31:10.240 --> 00:31:12.040
permission to traverse all directories,


00:31:12.040 --> 00:31:14.240
then yeah, I could certainly see a


00:31:14.240 --> 00:31:15.600
scenario that was possible.


00:31:15.600 --> 00:31:18.000
I mean, I haven't heard of that


00:31:18.000 --> 00:31:19.880
happening specifically, but.


00:31:19.880 --> 00:31:21.200
There's nothing preventing it,


00:31:21.200 --> 00:31:21.640
theoretically.


00:31:21.640 --> 00:31:24.600
Yeah, if you had a series of virtual machines,


00:31:24.600 --> 00:31:26.680
it's pretty tricky from one virtual machine


00:31:26.680 --> 00:31:27.720
to escape to another.


00:31:27.720 --> 00:31:30.920
But I believe there have been examples.


00:31:30.920 --> 00:31:34.000
But those are exceedingly rare, those sorts of vulnerabilities,


00:31:34.000 --> 00:31:34.520
right?


00:31:34.520 --> 00:31:35.020
Yeah.


00:31:35.020 --> 00:31:36.960
That's right.


00:31:36.960 --> 00:31:40.720
So while we're on this topic, I want to throw out an idea.


00:31:40.720 --> 00:31:42.920
And then we'll talk about some of the tools you built.


00:31:42.920 --> 00:31:45.840
But I feel like we're right in the middle of this notification


00:31:45.840 --> 00:31:46.840
thing.


00:31:46.840 --> 00:31:50.000
We've got all these packages.


00:31:50.000 --> 00:31:51.440
they've been identified,


00:31:51.440 --> 00:31:53.440
they have been downloaded, we can see that.


00:31:53.440 --> 00:31:54.880
We probably even have IP addresses,


00:31:54.880 --> 00:31:56.880
which you can reverse look up to DNS names


00:31:56.880 --> 00:32:00.640
as probably how those attributions were given.


00:32:00.640 --> 00:32:06.000
But it happens so often in so many different places, right?


00:32:06.000 --> 00:32:10.080
Like if I've got a continuous integration story


00:32:10.080 --> 00:32:13.600
that builds a Docker container that pushes to a Docker hub,


00:32:13.600 --> 00:32:17.440
and then my production grabs that from that container,


00:32:19.120 --> 00:32:23.840
The place where the problem happened is not the place where the problem is, right?


00:32:23.840 --> 00:32:27.360
It's probably GitHub or some other CI tool.


00:32:27.360 --> 00:32:33.600
We have a really nice thing for this in the account space,


00:32:33.600 --> 00:32:36.880
Have I Been Pwned by Troy Hunt, which is a really nice project.


00:32:36.880 --> 00:32:42.560
I definitely recommend people go there and enter their email address.


00:32:42.560 --> 00:32:44.320
>> And prepare to be horrified.


00:32:44.320 --> 00:32:51.600
Yeah, and prepare to be horrified. There's 11.2, 11.3 billion accounts that have been


00:32:51.600 --> 00:32:56.680
breached, which is odd because it's more than all the humans, but we have more than one


00:32:56.680 --> 00:33:02.240
account. So there it is. But yeah, so you put your email in there and then in the future,


00:33:02.240 --> 00:33:07.240
well, historically as well, but then in the future you say, if something has happened


00:33:07.240 --> 00:33:13.400
and your email appears in some kind of password dump, password breach or account or informational


00:33:13.400 --> 00:33:16.280
breach, you'll get an email saying, Hey, we found something


00:33:16.280 --> 00:33:18.120
that should be concerning to you check it out.


00:33:18.120 --> 00:33:24.920
I would love to see something like this for pip. Right?


00:33:24.920 --> 00:33:29.160
Something that says I pip install this thing. And it just


00:33:29.160 --> 00:33:32.520
has a record of, here's my account. These are the things


00:33:32.520 --> 00:33:35.680
I've pip installed. If there turns out to be a problem with


00:33:35.680 --> 00:33:38.760
one of those, notify me that that had happened.


00:33:42.440 --> 00:33:43.760
That does sound really useful.


00:33:43.760 --> 00:33:45.240
I don't think it exists.


00:33:45.240 --> 00:33:46.720
- I don't think it exists either.


00:33:46.720 --> 00:33:48.280
And it shouldn't just be a pip thing.


00:33:48.280 --> 00:33:49.360
It should be an NPM thing.


00:33:49.360 --> 00:33:50.400
It should be a gem thing.


00:33:50.400 --> 00:33:51.320
It should be a crate thing.


00:33:51.320 --> 00:33:52.560
It should be something that,


00:33:52.560 --> 00:33:55.200
like just a little bit of a wrapper that says,


00:33:55.200 --> 00:33:59.160
I would like to opt in to saying,


00:33:59.160 --> 00:34:02.120
here's my UUID,


00:34:02.120 --> 00:34:03.360
here's my email address,


00:34:03.360 --> 00:34:05.680
and here's the list of things that I've installed.


00:34:05.680 --> 00:34:07.320
If it turns out that one of them is horrible,


00:34:07.320 --> 00:34:08.720
just let me know.


00:34:08.720 --> 00:34:10.520
(laughing)


00:34:10.520 --> 00:34:13.040
It's so sensible, it makes me laugh.


00:34:13.040 --> 00:34:14.400
- Yeah.


00:34:14.400 --> 00:34:17.120
- Well, there's an idea out there as well.


00:34:17.120 --> 00:34:20.140
But this is way far down the line, right?


00:34:20.140 --> 00:34:21.820
This is, oh, we know this has happened.


00:34:21.820 --> 00:34:22.660
We know who's done it.


00:34:22.660 --> 00:34:26.160
We know who's been affected and so on.


00:34:26.160 --> 00:34:28.880
But starting a little bit further back,


00:34:28.880 --> 00:34:33.180
you all have built some tools to go


00:34:33.180 --> 00:34:34.280
and start at the beginning and say,


00:34:34.280 --> 00:34:36.740
well, let's look and see what might be out there


00:34:36.740 --> 00:34:37.620
that is bad, right?


00:34:37.620 --> 00:34:42.340
This is the tool used to find Pandar instead of Pandas.


00:34:42.340 --> 00:34:43.180
- That's right.


00:34:43.180 --> 00:34:46.620
I mean, I think the first idea you had is the crucial one,


00:34:46.620 --> 00:34:49.200
which is that you need to know that there's been a


00:34:49.200 --> 00:34:51.100
compromise in order to report it.


00:34:51.100 --> 00:34:55.100
And right now it's surprisingly hard to know that.


00:34:55.100 --> 00:34:59.980
So we're not the only one to devise a tool or approach to


00:34:59.980 --> 00:35:04.020
finding malicious packages on the Python package index,


00:35:04.020 --> 00:35:06.700
but we took a particularly simple one and we said,


00:35:06.700 --> 00:35:10.740
can we use simply the metadata, especially the name,


00:35:10.740 --> 00:35:14.140
but some other information too of packages,


00:35:14.140 --> 00:35:18.360
and then look at just the most downloaded packages


00:35:18.360 --> 00:35:21.080
and check who has names that are very similar


00:35:21.080 --> 00:35:22.320
to those packages.


00:35:22.320 --> 00:35:23.160
And we do--


00:35:23.160 --> 00:35:24.680
- This is where AI comes in.


00:35:24.680 --> 00:35:27.160
- Yeah, need crazy AI at this point.


00:35:27.160 --> 00:35:28.960
You do get a lot of false positives.


00:35:28.960 --> 00:35:30.200
People have similar names


00:35:30.200 --> 00:35:31.960
just because the packages are related.


00:35:31.960 --> 00:35:32.800
It's fine.


00:35:32.800 --> 00:35:36.620
There's no problem inherently with having a similar name,


00:35:36.620 --> 00:35:40.740
But we cracked open those packages too.


00:35:40.740 --> 00:35:43.980
This was some very boring Saturday mornings of mine.


00:35:43.980 --> 00:35:47.020
And simply scanned through the code


00:35:47.020 --> 00:35:49.180
looking for anything that's suspicious.


00:35:49.180 --> 00:35:51.180
And lo and behold, we found one called Pandar


00:35:51.180 --> 00:35:55.420
that was actually doing key logging.


00:35:55.420 --> 00:35:56.740
It was a proof of concept.


00:35:56.740 --> 00:36:00.440
It's unlikely that it actually would have worked.


00:36:00.440 --> 00:36:04.700
But we reported it to the Python security response team,


00:36:04.700 --> 00:36:08.500
security@python.org, they said, "Yep, not good."


00:36:08.500 --> 00:36:09.340
Yanked it.


00:36:09.340 --> 00:36:17.060
And it was just an example of it's not that hard to find them.


00:36:17.060 --> 00:36:21.140
And we were showing, yet again, with a pretty simple


00:36:21.140 --> 00:36:24.060
demonstration that it's not that hard.


00:36:24.060 --> 00:36:25.220
Interesting.


00:36:25.220 --> 00:36:28.420
Yeah, so I think that's really cool.


00:36:28.420 --> 00:36:31.700
So basically, the tool is about finding--


00:36:31.700 --> 00:36:36.140
given popular packages, finding ones that are oddly similar.


00:36:36.140 --> 00:36:37.500
And then there's like a,


00:36:37.500 --> 00:36:39.500
let me go and see what this one's about.


00:36:39.500 --> 00:36:40.340
- That's right.


00:36:40.340 --> 00:36:41.460
And so there's a couple of additional checks


00:36:41.460 --> 00:36:43.300
to help anyone using it.


00:36:43.300 --> 00:36:46.060
You can find it, it's an open source written in Python


00:36:46.060 --> 00:36:50.120
tool, command line tool.


00:36:50.120 --> 00:36:51.980
It also checks things like, for instance,


00:36:51.980 --> 00:36:55.600
is the description of the package on PyPI,


00:36:55.600 --> 00:36:57.220
is it very similar?


00:36:57.220 --> 00:37:00.340
So that what you are witnessing as someone


00:37:00.340 --> 00:37:03.500
who's trying to not only type of squat the name,


00:37:03.500 --> 00:37:08.500
but in some sense like squat the broader metadata


00:37:08.500 --> 00:37:11.540
or almost like the copyright of the package.


00:37:11.540 --> 00:37:13.780
- Right, 'cause you want it to look as similar as possible.


00:37:13.780 --> 00:37:14.620
- Exactly.


00:37:14.620 --> 00:37:17.620
Like a camouflage.


00:37:17.620 --> 00:37:19.620
- Yeah, are you guys familiar with Snyk?


00:37:19.620 --> 00:37:22.460
- Yes. - Yes.


00:37:22.460 --> 00:37:30.180
- There's a project, and geez, I'm forgetting.


00:37:30.180 --> 00:37:31.980
- Are you thinking of the advisor project?


00:37:31.980 --> 00:37:34.180
- Yes, sneak package advisor.


00:37:34.180 --> 00:37:35.860
- Yeah, it's neat. - That's it.


00:37:35.860 --> 00:37:36.700
It's super neat.


00:37:36.700 --> 00:37:37.900
Yeah, that's what I was looking for.


00:37:37.900 --> 00:37:39.620
No, that's not how I wanna spell it.


00:37:39.620 --> 00:37:42.340
Yeah, and so that thing is pretty cool.


00:37:42.340 --> 00:37:44.740
Let me, so the reason I bring this thing up


00:37:44.740 --> 00:37:48.100
is you can come over here and I can type in a project


00:37:48.100 --> 00:37:52.920
like requests or whatever, and it'll tell us eventually,


00:37:52.920 --> 00:37:56.300
it'll tell us the package health score,


00:37:56.300 --> 00:37:58.900
and it'll tell us things like there's this many PRs


00:37:58.900 --> 00:38:00.060
that have been open and closed.


00:38:00.060 --> 00:38:03.700
there's this many contributors, there's this many people participating,


00:38:03.700 --> 00:38:05.700
the maintenance looks like, so on.


00:38:05.700 --> 00:38:08.100
So one thing that I think would be cool


00:38:08.100 --> 00:38:12.300
would be to take this number plus a misspelling


00:38:12.300 --> 00:38:15.300
and say, if that number is really, really low


00:38:15.300 --> 00:38:18.100
for a package that should be really, really high,


00:38:18.100 --> 00:38:21.380
that's a challenge, right?


00:38:21.380 --> 00:38:25.420
Like if you look at the GitHub repo that is delivering this thing


00:38:25.420 --> 00:38:27.420
and it doesn't look right,


00:38:27.420 --> 00:38:30.540
if it's not associated with something that seems kind of hard to replicate,


00:38:30.540 --> 00:38:34.700
like a GitHub repo with many people participating over a long period of time.


00:38:34.700 --> 00:38:35.200
Yeah.


00:38:35.200 --> 00:38:38.060
That seems like that could be a good flag as well.


00:38:38.060 --> 00:38:39.820
Yeah, certainly.


00:38:39.820 --> 00:38:44.780
It certainly seems like there's an abundant opportunity to build


00:38:44.780 --> 00:38:51.980
something into the actual download client to the pip or a wrapper around pip


00:38:51.980 --> 00:38:53.980
where it checks these sorts of things and


00:38:55.020 --> 00:39:01.020
create speed bumps for you as you are trying to download something or use a package so that


00:39:01.020 --> 00:39:06.940
says, "Hey, this looks suspicious. Have you thoroughly checked this?" And I think your


00:39:06.940 --> 00:39:15.660
idea could contribute to exactly such a tool or tools. Yeah, yeah, very neat. So you've been


00:39:15.660 --> 00:39:23.980
working on this and Martin Karnagouski created this thing called Aurora and also reached out


00:39:23.980 --> 00:39:26.780
and said, "Hey, I'm also working on this."


00:39:26.780 --> 00:39:29.660
And so, yeah, tell us about this thing called Aurora.


00:39:29.660 --> 00:39:32.420
- Yeah, so we got an email last fall


00:39:32.420 --> 00:39:33.820
after publishing this blog post,


00:39:33.820 --> 00:39:37.360
and he said, "Hey, I've been working on a similar tool.


00:39:37.360 --> 00:39:41.400
"Not only does it check this metadata,


00:39:41.400 --> 00:39:43.120
"but we even do static analysis


00:39:43.120 --> 00:39:45.140
"of the entire Python package index."


00:39:45.140 --> 00:39:47.640
And we said, "Martin, that's awesome.


00:39:47.640 --> 00:39:49.060
"Let's work together."


00:39:49.060 --> 00:39:52.740
And so over the past six months, roughly now,


00:39:53.860 --> 00:40:01.500
In an open source collaboration between a number of us at IQT Labs and Martin Tarnagouski,


00:40:01.500 --> 00:40:05.900
we have further refined Aura, which truly is designed to do a static analysis of the


00:40:05.900 --> 00:40:10.180
entire Python package index, open source tool, you can find it.


00:40:10.180 --> 00:40:15.860
He releases his data on a...


00:40:15.860 --> 00:40:18.300
Try as best as you can to release it regularly.


00:40:18.300 --> 00:40:22.060
We've also built a tool called Aura Borealis.


00:40:22.060 --> 00:40:29.100
Key thing, his aura produces 50 gigs of output when it's done scanning the entire Python


00:40:29.100 --> 00:40:30.620
package index.


00:40:30.620 --> 00:40:33.140
No human can wade through that.


00:40:33.140 --> 00:40:39.260
And I suspect also the PyPA, the Python Package Authority folks probably don't want everyone


00:40:39.260 --> 00:40:41.180
downloading that much data all the time.


00:40:41.180 --> 00:40:46.700
No, it's exhausting and creates so many database issues and other things.


00:40:46.700 --> 00:40:50.620
So we've been working on a tool called Aura Borealis that you pulled up that is a front


00:40:50.620 --> 00:41:00.540
end that makes it easier to use the dataset that Martin creates with this tool, Aura.


00:41:00.540 --> 00:41:08.940
So we -- this wouldn't necessarily be part of PyPI, though, of course, it could be, but


00:41:08.940 --> 00:41:13.940
We imagine this as a tool for organizations or persons that


00:41:13.940 --> 00:41:19.060
need to have global knowledge, either global knowledge


00:41:19.060 --> 00:41:20.620
about the entire Python package index


00:41:20.620 --> 00:41:24.860
and to rank and assess potential threats and go look for those


00:41:24.860 --> 00:41:26.240
and then take appropriate action,


00:41:26.240 --> 00:41:28.200
or even individual developers that are really


00:41:28.200 --> 00:41:30.180
curious about packages.


00:41:30.180 --> 00:41:31.700
This makes it easy.


00:41:31.700 --> 00:41:34.500
The Aura Borealis isn't yet live,


00:41:34.500 --> 00:41:37.260
but we hope to make it live this summer.


00:41:37.260 --> 00:41:39.180
Aura is an in-production tool.


00:41:39.180 --> 00:41:40.060
It works.


00:41:40.060 --> 00:41:41.980
So go check it out.


00:41:41.980 --> 00:41:43.420
Yeah.


00:41:43.420 --> 00:41:45.220
This looks like it's really handy.


00:41:45.220 --> 00:41:48.180
So the idea is basically it's going to run forever,


00:41:48.180 --> 00:41:50.900
and that's going to generate tremendous amounts of data.


00:41:50.900 --> 00:41:53.460
Maybe just put a web front end on top of that static data


00:41:53.460 --> 00:41:56.500
for everyone to explore instead of generating over and over.


00:41:56.500 --> 00:41:57.060
Exactly.


00:41:57.060 --> 00:41:59.100
Instead of having to generate over and over,


00:41:59.100 --> 00:42:01.780
now having 50 gigs and having to write your own custom,


00:42:01.780 --> 00:42:05.220
probably Python script that you'll have to optimize


00:42:05.220 --> 00:42:06.420
and blah, blah, blah.


00:42:06.420 --> 00:42:06.720
Yeah.


00:42:06.720 --> 00:42:12.960
So Kim out in the live stream just says I accidentally typed sink instead of sneak,


00:42:12.960 --> 00:42:17.700
which also is hard to spell anyway, because it's like a non-common spelling.


00:42:17.700 --> 00:42:20.480
So, which is an excellent way to demonstrate making a


00:42:20.480 --> 00:42:21.880
typo and getting the wrong package.


00:42:21.880 --> 00:42:24.000
I have no idea what that's going to return.


00:42:24.000 --> 00:42:24.880
I'm not going to pull it up.


00:42:24.880 --> 00:42:25.620
Yeah.


00:42:25.620 --> 00:42:30.200
Podcast, podcast imitates life, imitates art, imitates compromise.


00:42:30.200 --> 00:42:32.040
Exactly.


00:42:32.040 --> 00:42:33.760
Exactly.


00:42:33.760 --> 00:42:35.280
All right.


00:42:35.280 --> 00:42:38.560
Well, so this is really,


00:42:38.560 --> 00:42:40.760
how would I use the Aurora data


00:42:40.760 --> 00:42:43.540
and the Aurora Borealis project?


00:42:43.540 --> 00:42:45.920
I guess also we should talk about this


00:42:45.920 --> 00:42:47.080
from different angles, right?


00:42:47.080 --> 00:42:49.860
Maybe I'm a CISO at a company


00:42:49.860 --> 00:42:51.800
and I'm concerned that all my people are psyched


00:42:51.800 --> 00:42:56.800
about data science and Python or NPM and web front ends


00:42:56.800 --> 00:42:58.560
and they just make me nervous all day


00:42:58.560 --> 00:43:00.400
and I wanna get on top of it.


00:43:00.400 --> 00:43:03.280
So as somebody who is concerned about,


00:43:03.280 --> 00:43:05.740
I would like to know what's happening


00:43:05.740 --> 00:43:08.200
in my software supply chain,


00:43:08.200 --> 00:43:12.200
or maybe I run, I maintain pandas


00:43:12.200 --> 00:43:14.060
and I'm really upset that pandar exists


00:43:14.060 --> 00:43:16.640
and I want to now be able to defend my package.


00:43:16.640 --> 00:43:18.840
Like it seems like there's different use cases


00:43:18.840 --> 00:43:20.420
and people out there.


00:43:20.420 --> 00:43:22.880
- That's right.


00:43:22.880 --> 00:43:24.720
I think if you're a company


00:43:24.720 --> 00:43:26.520
and you have a group of software developers


00:43:26.520 --> 00:43:31.360
and you have the, let's say a security team


00:43:31.360 --> 00:43:33.960
that helps vet packages.


00:43:33.960 --> 00:43:37.680
So perhaps you put those packages in an internal repository


00:43:37.680 --> 00:43:42.120
so that then developers know that they're cleared to use


00:43:42.120 --> 00:43:44.260
or Borealis will help you do that.


00:43:44.260 --> 00:43:46.200
We're glad to set up pilots and discuss,


00:43:46.200 --> 00:43:49.600
you can email me, jmeyers@iqt.org.


00:43:49.600 --> 00:43:54.400
But there's also other angles too.


00:43:54.400 --> 00:43:56.040
There's just, you're a developer


00:43:56.040 --> 00:43:58.640
and you wanna make an informed choice.


00:43:58.640 --> 00:44:00.460
The static analysis tool and its output


00:44:00.460 --> 00:44:03.220
can help you with that, or Borealis.


00:44:03.220 --> 00:44:04.620
And I think there is also, you're right,


00:44:04.620 --> 00:44:06.380
there's a maintainer angle,


00:44:06.380 --> 00:44:09.080
and also a PyPI administrator angle,


00:44:09.080 --> 00:44:13.780
where you want to either protect a set of namespaces


00:44:13.780 --> 00:44:15.940
close to your package,


00:44:15.940 --> 00:44:19.160
or you care about the health of the entire ecosystem.


00:44:19.160 --> 00:44:22.860
And those are all possible user types.


00:44:22.860 --> 00:44:25.340
- Yeah.


00:44:25.340 --> 00:44:29.840
And we could probably use your PyPI scan


00:44:29.840 --> 00:44:35.160
to go and say, look, can I say look for things similar to my package name?


00:44:35.160 --> 00:44:40.160
Yeah, that's right. And we built that into Aura Borealis too now. So in some ways,


00:44:40.160 --> 00:44:46.160
PyPI scan was a demo and still useful as a command line tool, but Aura Borealis


00:44:46.160 --> 00:44:50.960
and Aura has that now built in. Are you all going to put an API on top of this?


00:44:50.960 --> 00:44:59.400
Well, good question. That would be cool. The thing that is tricky, like


00:44:59.400 --> 00:45:01.260
everything in life is it costs money,


00:45:01.260 --> 00:45:06.180
and engineering resources and time.


00:45:06.180 --> 00:45:08.360
I certainly have a vision,


00:45:08.360 --> 00:45:12.800
and if I don't do it, someone else should do it,


00:45:12.800 --> 00:45:13.980
go make a lot of money,


00:45:13.980 --> 00:45:19.460
of creating a technical infrastructure


00:45:19.460 --> 00:45:21.300
that every single package


00:45:21.300 --> 00:45:24.040
and every single new version of every package,


00:45:24.040 --> 00:45:26.440
PyPI, NPM, et cetera,


00:45:26.440 --> 00:45:28.040
gets scanned, a variety of scans,


00:45:28.040 --> 00:45:31.220
static analysis, dynamic analysis, metadata analysis,


00:45:31.220 --> 00:45:32.880
and that gets stored in a database


00:45:32.880 --> 00:45:37.180
that where you and I can go make API calls


00:45:37.180 --> 00:45:40.940
and get the information that we should on these packages.


00:45:40.940 --> 00:45:43.600
That could be, you know, there could be a free tier


00:45:43.600 --> 00:45:45.840
and then if you really need to make a lot of calls,


00:45:45.840 --> 00:45:50.140
a paid tier, but someone should do it, I think.


00:45:50.140 --> 00:45:50.980
- Yeah.


00:45:50.980 --> 00:45:56.660
Yeah, it would be neat to know, you know,


00:45:56.660 --> 00:45:59.140
like you said, integrate into say pip even.


00:45:59.140 --> 00:46:00.700
So if I pip install something,


00:46:00.700 --> 00:46:02.820
it could even flag it and say,


00:46:02.820 --> 00:46:05.220
hey, no, actually we're gonna block that.


00:46:05.220 --> 00:46:06.980
- That's right.


00:46:06.980 --> 00:46:08.980
- Preemptively because it's got some low score


00:46:08.980 --> 00:46:10.820
unless you do like a --force,


00:46:10.820 --> 00:46:12.300
like no really, I mean it.


00:46:12.300 --> 00:46:13.140
- Yeah, exactly.


00:46:13.140 --> 00:46:14.600
- It's something that'll sort of slow it down


00:46:14.600 --> 00:46:16.060
as you call them speed bumps.


00:46:16.060 --> 00:46:21.300
- Yeah, so I hope someone does something similar to that.


00:46:21.300 --> 00:46:26.100
We have plans, but no active development underway.


00:46:26.100 --> 00:46:33.300
All right, so that sets the stage that some of the tools out there at least to identify


00:46:33.300 --> 00:46:37.140
that there are potentially bad packages.


00:46:37.140 --> 00:46:41.100
And it's also, I guess, you know, worth pointing out.


00:46:41.100 --> 00:46:47.480
If we go over, say, to PyPI, there's over 300,000 packages over there.


00:46:47.480 --> 00:46:51.860
And if there are 40 actually malicious ones, right, the chances are low.


00:46:51.860 --> 00:46:55.580
They're not very high.


00:46:55.580 --> 00:46:59.420
So people shouldn't be running for the hills


00:46:59.420 --> 00:47:02.260
in complete panic or anything, I don't think, from this.


00:47:02.260 --> 00:47:05.240
But at the same time, we should be careful.


00:47:05.240 --> 00:47:06.260
We should be cautious.


00:47:06.260 --> 00:47:08.460
So what can we do?


00:47:08.460 --> 00:47:13.660
- That's the tough question.


00:47:13.660 --> 00:47:14.540
Vince, do you wanna start?


00:47:14.540 --> 00:47:15.380
You want me to go?


00:47:15.380 --> 00:47:16.200
- Sure.


00:47:16.200 --> 00:47:17.820
I mean, there's a lot of things that we can do.


00:47:17.820 --> 00:47:19.620
I mean, John Speed's hit on a few of them


00:47:19.620 --> 00:47:23.860
about just kind of being more deliberate,


00:47:23.860 --> 00:47:26.780
checking your work before you download something.


00:47:26.780 --> 00:47:29.940
And also, when you're considering dependencies,


00:47:29.940 --> 00:47:32.740
you mentioned C++ in the late 90s.


00:47:32.740 --> 00:47:34.420
I vaguely remember those times.


00:47:34.420 --> 00:47:36.300
Remember when Boost came out, it was a big deal.


00:47:36.300 --> 00:47:37.820
- Oh yeah.


00:47:37.820 --> 00:47:38.660
- You actually had a dependency.


00:47:38.660 --> 00:47:40.900
- I remember reading more books.


00:47:40.900 --> 00:47:41.920
- Right.


00:47:41.920 --> 00:47:44.340
- Less internet, more books to make things work.


00:47:44.340 --> 00:47:45.620
- So yeah, we moved on from that.


00:47:45.620 --> 00:47:47.480
But ultimately, it is worth considering,


00:47:47.480 --> 00:47:49.140
do you actually need this dependency?


00:47:49.140 --> 00:47:52.580
Your left pad, and NPM is a funny canonical example,


00:47:52.580 --> 00:47:54.460
broke the internet because people didn't feel like typing


00:47:54.460 --> 00:47:56.100
one line of their own code.


00:47:56.100 --> 00:47:59.580
They wanted to import a left padding dependency.


00:47:59.580 --> 00:48:01.580
- I do feel that's a really good example.


00:48:01.580 --> 00:48:03.140
And certainly left pad came to mind,


00:48:03.140 --> 00:48:04.560
not as a malicious thing,


00:48:04.560 --> 00:48:09.460
but just as a supply chain Jenga tower type of thing.


00:48:09.460 --> 00:48:11.980
And somebody pulled too much on a part of the Jenga tower


00:48:11.980 --> 00:48:12.940
and it came down.


00:48:12.940 --> 00:48:19.260
I feel that the JavaScript community


00:48:19.260 --> 00:48:23.180
has way smaller Lego pieces than the Python community.


00:48:23.180 --> 00:48:24.300
Right?


00:48:24.300 --> 00:48:27.700
The blocks that you click together here are larger.


00:48:27.700 --> 00:48:33.260
So I feel like there's just fewer in number external dependencies


00:48:33.260 --> 00:48:37.020
on average in my Python experience than my JavaScript experience.


00:48:37.020 --> 00:48:38.060
Yeah, I think that's accurate.


00:48:38.060 --> 00:48:39.180
I mean, numbers vary.


00:48:39.180 --> 00:48:44.300
I've seen NPM, people who use NPM, so JavaScript developers,


00:48:44.300 --> 00:48:49.460
The average package in npm has 94% dependency.


00:48:49.460 --> 00:48:52.940
Other dependencies, only 6% is your actual code you've written.


00:48:52.940 --> 00:48:57.540
Most of the modern languages, meaning JavaScript, Python,


00:48:57.540 --> 00:49:00.500
and some others are in the 90-ish range,


00:49:00.500 --> 00:49:03.140
and then you see C++ are much lower,


00:49:03.140 --> 00:49:04.260
Java somewhere in the middle.


00:49:04.260 --> 00:49:07.780
So yeah, Python is, I would say, lower than JavaScript,


00:49:07.780 --> 00:49:11.460
but much higher than the legacy languages


00:49:11.460 --> 00:49:13.860
that are historically used.


00:49:13.860 --> 00:49:16.620
So be deliberate means things like,


00:49:16.620 --> 00:49:20.920
don't just as fast as you can type pip install, whatever.


00:49:20.920 --> 00:49:25.220
Type pip install and then carefully type out the package name.


00:49:25.220 --> 00:49:27.820
Maybe give it a quick read before you hit go.


00:49:27.820 --> 00:49:30.940
>> No, we're just copy and paste. Don't type it all.


00:49:30.940 --> 00:49:32.500
>> Yeah. For example,


00:49:32.500 --> 00:49:34.380
if I'm over here on PyPI,


00:49:34.380 --> 00:49:39.700
there's a copy button I can click and it'll do exactly that.


00:49:39.700 --> 00:49:40.420
>> Right.


00:49:40.420 --> 00:49:41.700
>> That's an option.


00:49:41.700 --> 00:49:44.700
Yeah, so yeah, just being a little more thoughtful


00:49:44.700 --> 00:49:47.700
and kind of looking at the dependency chain as well


00:49:47.700 --> 00:49:50.700
before you download something, which is much harder than it should be


00:49:50.700 --> 00:49:53.700
to be completely bare.


00:49:53.700 --> 00:49:56.700
That's helpful to know that maybe the top level


00:49:56.700 --> 00:49:59.700
you are using JOSKI.


00:49:59.700 --> 00:50:02.700
I have no idea what JOSKI is.


00:50:02.700 --> 00:50:05.700
You should pip install that right now. Let's see what happens.


00:50:05.700 --> 00:50:06.700
Let's just see what happens.


00:50:06.700 --> 00:50:08.700
Here's an example of one of those that should rank lower.


00:50:08.700 --> 00:50:10.260
No offense if this is your project,


00:50:10.260 --> 00:50:13.100
but it literally has zero stars, zero forks.


00:50:13.100 --> 00:50:15.900
Its features are to do, its requirements are to do.


00:50:15.900 --> 00:50:19.700
Its PyPI version banner is not found.


00:50:19.700 --> 00:50:22.020
And I mean, there's a couple of,


00:50:22.020 --> 00:50:23.600
it is only four minutes old.


00:50:23.600 --> 00:50:24.920
They may be working on it.


00:50:24.920 --> 00:50:25.760
- Yeah, sure.


00:50:25.760 --> 00:50:27.580
- Yeah, but if it has dependencies,


00:50:27.580 --> 00:50:28.420
this one probably doesn't,


00:50:28.420 --> 00:50:30.500
but you know, take a look at those too.


00:50:30.500 --> 00:50:32.380
Just makes them, there's nothing


00:50:32.380 --> 00:50:33.860
egregiously wrong at a minimum.


00:50:33.860 --> 00:50:36.240
- Yeah, that's one of the things that makes it


00:50:36.240 --> 00:50:41.040
kind of insidious and hard to see is the thing I directly look at may be fine,


00:50:41.040 --> 00:50:42.780
but the person who maintained that,


00:50:42.780 --> 00:50:46.900
did they make a mistake in the things that they depend upon or maybe,


00:50:46.900 --> 00:50:52.140
you know, transit, like follow that chain, that graph down far enough, right?


00:50:52.140 --> 00:50:55.420
There's a lot of layers that could be happening along the way.


00:50:55.420 --> 00:50:59.940
Yeah. It ends up looking a web. not surprisingly, just because of that,


00:50:59.940 --> 00:51:02.980
most of most vulnerabilities inside of,


00:51:03.060 --> 00:51:05.720
of packages like this are in the transitive dependencies,


00:51:05.720 --> 00:51:07.960
the ones below the first layer,


00:51:07.960 --> 00:51:10.040
the dependencies of dependencies.


00:51:10.040 --> 00:51:12.180
- Interesting, yeah, I can see that.


00:51:12.180 --> 00:51:15.160
- So what, oh, sorry.


00:51:15.160 --> 00:51:17.440
- Well, so you can pip install the thing.


00:51:17.440 --> 00:51:18.840
What about pinning the version?


00:51:18.840 --> 00:51:20.160
I know there was some issues


00:51:20.160 --> 00:51:23.560
about having a private PyPI server,


00:51:23.560 --> 00:51:24.840
which I think is a good idea


00:51:24.840 --> 00:51:26.280
where you whitelist packages in.


00:51:26.280 --> 00:51:28.040
You say, we approve these things,


00:51:28.040 --> 00:51:29.920
and only these things get installed.


00:51:29.920 --> 00:51:31.600
And then if you want to use a new one,


00:51:31.600 --> 00:51:32.760
we've got to opt it in.


00:51:32.760 --> 00:51:35.260
and then now it's part of the organization.


00:51:35.260 --> 00:51:37.020
That seems like something you could do, right?


00:51:37.020 --> 00:51:39.300
There's PyPI server that you could set up


00:51:39.300 --> 00:51:42.320
that is a sort of pass-through layer there.


00:51:42.320 --> 00:51:45.460
But then there was also the vulnerability


00:51:45.460 --> 00:51:47.260
of the version mismatch.


00:51:47.260 --> 00:51:50.020
Like if there's a higher version of that thing


00:51:50.020 --> 00:51:52.940
on a public, on the public PyPI,


00:51:52.940 --> 00:51:54.060
then your local one.


00:51:54.060 --> 00:51:58.300
So people were putting in like data layer version 70,


00:51:58.300 --> 00:51:59.900
you know, and then it's like,


00:51:59.900 --> 00:52:02.020
oh, there's a newer version out there for me to go get.


00:52:02.020 --> 00:52:05.780
So I'll get that even though it was internal,


00:52:05.780 --> 00:52:07.080
meant to be internal only, right?


00:52:07.080 --> 00:52:08.580
So there's these challenges,


00:52:08.580 --> 00:52:11.380
but what do you think about a private whitelist server?


00:52:11.380 --> 00:52:17.180
- Certainly seems valuable and seems like it's


00:52:17.180 --> 00:52:20.780
another speed bump as John Speed was calling them.


00:52:20.780 --> 00:52:23.380
Yeah, I mean, then you run into scenarios


00:52:23.380 --> 00:52:25.060
like the one you just described,


00:52:25.060 --> 00:52:29.060
where it's kind of, I guess that's undefined behavior,


00:52:29.060 --> 00:52:30.820
potentially, or at least not well-known behavior


00:52:30.820 --> 00:52:33.940
that it maybe isn't necessarily the most intuitive.


00:52:33.940 --> 00:52:35.220
So even that might not be enough.


00:52:35.220 --> 00:52:39.660
So then, yeah, the pinning could help.


00:52:39.660 --> 00:52:41.200
Then, of course, there's the challenge


00:52:41.200 --> 00:52:45.380
of maintaining your pin at the profitable level, which


00:52:45.380 --> 00:52:48.780
adds more effort on the developers


00:52:48.780 --> 00:52:51.540
to maintain up-to-date dependencies, which--


00:52:51.540 --> 00:52:53.620
At least publicly, yeah, publicly


00:52:53.620 --> 00:52:56.100
we have dependabot on GitHub, which


00:52:56.100 --> 00:52:58.220
is way more of a pain than it should be to use.


00:52:58.220 --> 00:53:00.060
Because if you've got 10 updates,


00:53:00.060 --> 00:53:04.060
it'll issue 10 PRs which conflict with themselves.


00:53:04.060 --> 00:53:06.180
Anyway, that's a long story,


00:53:06.180 --> 00:53:08.300
but it's still at least some automation that says,


00:53:08.300 --> 00:53:10.480
hey, there's a new version of this, here's the change log.


00:53:10.480 --> 00:53:15.140
And we also have the CVE security checks of Dependabot,


00:53:15.140 --> 00:53:16.700
which are really good.


00:53:16.700 --> 00:53:19.500
- Yeah, unfortunately, most of these


00:53:19.500 --> 00:53:21.580
type of squatting or just general supply chain attacks


00:53:21.580 --> 00:53:25.260
don't end up in the NVD as a CVE.


00:53:25.260 --> 00:53:26.900
- Yeah, who's gonna study this one


00:53:26.900 --> 00:53:28.980
and then not just say, take it down, right?


00:53:28.980 --> 00:53:32.220
It's living in the shadows, right?


00:53:32.220 --> 00:53:35.020
>> Yeah. NPM does a good job with


00:53:35.020 --> 00:53:37.200
their advisory service of saying this is


00:53:37.200 --> 00:53:39.900
a malicious package and this is why we removed it.


00:53:39.900 --> 00:53:43.380
But not all package managers do that,


00:53:43.380 --> 00:53:45.580
and even so then you have to go to all the most of


00:53:45.580 --> 00:53:48.180
those developers are


00:53:48.180 --> 00:53:49.780
developing multiple languages these days,


00:53:49.780 --> 00:53:50.980
so it's hard to keep track.


00:53:50.980 --> 00:53:53.500
>> Yeah. What about


00:53:53.500 --> 00:53:57.140
having isolated environments for trying out new packages?


00:53:57.140 --> 00:54:00.140
So for example, one of the things I'm trying to do


00:54:00.140 --> 00:54:03.020
is if I'm checking out any new package I have to pip install,


00:54:03.020 --> 00:54:05.180
maybe that happens in a Docker container,


00:54:05.180 --> 00:54:07.620
then I throw away the container.


00:54:07.620 --> 00:54:09.980
Or possibly a VM with snapshotting on,


00:54:09.980 --> 00:54:13.620
and then I roll back the snapshot periodically.


00:54:13.620 --> 00:54:15.380
Yeah, those both sound like great ways


00:54:15.380 --> 00:54:20.740
to have good hygiene and not isolate the potential blast


00:54:20.740 --> 00:54:26.380
radius of a potentially malicious package.


00:54:26.380 --> 00:54:27.940
- Yeah, it's one thing to say,


00:54:27.940 --> 00:54:30.100
here's a thing we want you to check out


00:54:30.100 --> 00:54:32.940
and it's on PyPI and it's really well known,


00:54:32.940 --> 00:54:35.260
but it's, you know, you gotta explore new things


00:54:35.260 --> 00:54:37.700
that aren't super well known yet, right?


00:54:37.700 --> 00:54:40.780
So how do you install that?


00:54:40.780 --> 00:54:42.860
Right, so I think some kind of blast store,


00:54:42.860 --> 00:54:45.380
like you said, like Docker, like a VM,


00:54:45.380 --> 00:54:46.580
is not a terrible idea.


00:54:46.580 --> 00:54:48.820
- Yeah, it's a good one.


00:54:48.820 --> 00:54:52.740
- Let's see, what else?


00:54:52.740 --> 00:54:57.620
There's the Open Source Software Security Foundation.


00:54:57.620 --> 00:54:58.780
- Yeah, that's right.


00:54:58.780 --> 00:55:01.320
- Yeah, Open SSF.


00:55:01.320 --> 00:55:04.680
- Open SSF, clearly a reference to Open SSL.


00:55:04.680 --> 00:55:11.900
Yeah, another well-known software supply chain compromise


00:55:11.900 --> 00:55:15.060
with widespread impact.


00:55:15.060 --> 00:55:21.100
It's worth sort of pointing out that this group,


00:55:21.100 --> 00:55:25.620
for anyone who becomes very enthusiastic about open source


00:55:25.620 --> 00:55:27.980
software, supply chain security in particular,


00:55:27.980 --> 00:55:32.380
has become a meeting ground where both companies,


00:55:32.380 --> 00:55:34.740
but also persons interested in the sort of topics


00:55:34.740 --> 00:55:36.860
we've been discussing today and more,


00:55:36.860 --> 00:55:38.620
have set up a series of working groups.


00:55:38.620 --> 00:55:42.300
There's six roughly, and meet every few weeks.


00:55:42.300 --> 00:55:47.060
Open community, fun, interesting people,


00:55:47.060 --> 00:55:49.900
either interested in the topic or actively working


00:55:49.900 --> 00:55:52.380
to give back and contribute.


00:55:52.380 --> 00:55:54.780
It's run by the Linux Foundation,


00:55:54.780 --> 00:55:56.740
and we would highly recommend it


00:55:56.740 --> 00:55:59.460
as a place to find other like-minded persons


00:55:59.460 --> 00:56:02.220
if you care about these sorts of topics.


00:56:02.220 --> 00:56:04.340
- Yep, fantastic.


00:56:04.340 --> 00:56:09.260
And then there's the further on down the road,


00:56:09.260 --> 00:56:11.060
which we've touched on a couple of times,


00:56:11.060 --> 00:56:13.900
but maybe we can encourage some enterprising person,


00:56:13.900 --> 00:56:16.500
people, group out there to go after it,


00:56:16.500 --> 00:56:20.120
like a hardened pip or, you know,


00:56:20.120 --> 00:56:23.420
we have things that are sort of on top of PIP,


00:56:23.420 --> 00:56:26.180
pip-tools, we've got pip ENV,


00:56:26.180 --> 00:56:27.580
- pip X. - We've got pip X,


00:56:27.580 --> 00:56:28.860
I'm a big fan of pip X,


00:56:28.860 --> 00:56:31.380
the isolation of that gives us kind of neat.


00:56:31.380 --> 00:56:36.100
And just, I can see like a PIPSEC


00:56:36.100 --> 00:56:39.060
or something along those,


00:56:39.060 --> 00:56:41.200
those are PIPs, maybe a plural PIPs,


00:56:41.200 --> 00:56:42.860
I don't know for pip security,


00:56:42.860 --> 00:56:43.700
but something like that,


00:56:43.700 --> 00:56:45.140
that incorporates some of these ideas,


00:56:45.140 --> 00:56:49.420
maybe it checks in, you say like,


00:56:49.420 --> 00:56:51.980
I don't want to install any package


00:56:51.980 --> 00:56:54.360
that is not in the top 1000.


00:56:54.360 --> 00:56:56.620
- Sure.


00:56:56.620 --> 00:56:57.440
- Of popular package,


00:56:57.440 --> 00:56:59.620
except for what I whitelist in on top of that,


00:56:59.620 --> 00:57:00.460
or something along,


00:57:00.460 --> 00:57:05.120
or check with Aurora Borealis about the score,


00:57:05.120 --> 00:57:07.220
or check with the have I been pipped


00:57:07.220 --> 00:57:10.060
or whatever that thing ever would become, right?


00:57:10.060 --> 00:57:12.940
Talk about like where you might see things going, you two.


00:57:12.940 --> 00:57:14.840
- Yeah, well, there's been a couple,


00:57:14.840 --> 00:57:19.060
I'll call them starter projects in the hardened pip area.


00:57:19.060 --> 00:57:21.020
There even was one called PIPsec.


00:57:21.020 --> 00:57:24.240
You can find it on PyPI, but it's really,


00:57:24.240 --> 00:57:27.000
there's nothing there, unfortunately, at least yet.


00:57:27.000 --> 00:57:29.640
That namespace is claimed.


00:57:29.640 --> 00:57:33.060
The maintainers who we mentioned,


00:57:33.060 --> 00:57:34.760
Benjamin Balderbach especially,


00:57:34.760 --> 00:57:40.320
are interested in doing some, just haven't had time,


00:57:40.320 --> 00:57:41.720
other busy priorities.


00:57:41.720 --> 00:57:44.880
And I think there is a lot of potential


00:57:44.880 --> 00:57:48.200
to build out that idea and create something


00:57:48.200 --> 00:57:51.040
that could be useful to the average developer.


00:57:51.040 --> 00:57:52.960
JavaScript has a tool that has at least


00:57:52.960 --> 00:57:56.200
a moderate popularity called mpq that does this.


00:57:56.200 --> 00:57:59.640
And I think it's time for the Python community


00:57:59.640 --> 00:58:03.240
to see if there's something similar.


00:58:03.240 --> 00:58:05.680
- Yeah, I would love to see something like that.


00:58:05.680 --> 00:58:09.760
Another thing is Google, thank you Google,


00:58:09.760 --> 00:58:13.240
has become a visionary sponsor of the PSF.


00:58:13.240 --> 00:58:18.240
And specifically, they want their funds


00:58:18.240 --> 00:58:22.220
to go towards critical supply chain security improvements,


00:58:22.220 --> 00:58:25.760
developing productized malware detection for PyPI,


00:58:25.760 --> 00:58:28.280
prototype a dynamic analysis infrastructure.


00:58:28.280 --> 00:58:30.720
So this sort of gets at the head at,


00:58:30.720 --> 00:58:36.160
maybe there's something that the PyPA and PyPI.org


00:58:37.160 --> 00:58:41.320
could do on their end without even necessarily changing PIP, right?


00:58:41.320 --> 00:58:46.040
PIP's going to go talk to some API there and it goes, "Yeah, no, not this one."


00:58:46.040 --> 00:58:49.280
Or you can upload it, like with upload a new package, it goes, "No,


00:58:49.280 --> 00:58:51.240
we don't want to accept it."


00:58:51.240 --> 00:58:55.920
- And Dustin Ingram of the Python Software Foundation at PyCon just recently devoted


00:58:55.920 --> 00:59:00.920
his talk to talking about Python and the software supply chain issues that we've


00:59:00.920 --> 00:59:04.560
discussed today and writ large to include typosquatting.


00:59:04.560 --> 00:59:09.120
And it's clear that there's energy and willingness


00:59:09.120 --> 00:59:13.080
from UN core members of warehouse


00:59:13.080 --> 00:59:15.840
and Python software foundation to tackle these issues.


00:59:15.840 --> 00:59:18.720
And so we're glad to see that.


00:59:18.720 --> 00:59:22.160
- Yeah, it'd be great to see something like that happening.


00:59:22.160 --> 00:59:23.620
I think layers as well, right?


00:59:23.620 --> 00:59:26.640
That's how you talk about security often is it's not just,


00:59:26.640 --> 00:59:28.280
well, you have a strong password and you're fine.


00:59:28.280 --> 00:59:30.760
Like, well, and maybe you have two factor authentication


00:59:30.760 --> 00:59:32.200
and maybe you run as lower permissions


00:59:32.200 --> 00:59:33.280
and, and, and, and, right?


00:59:33.280 --> 00:59:34.600
like layers.


00:59:34.600 --> 00:59:37.080
So this could be one of the layers,


00:59:37.080 --> 00:59:38.840
but not necessarily all of them.


00:59:38.840 --> 00:59:41.640
- Yeah, I should note that we even,


00:59:41.640 --> 00:59:44.680
a couple of us at IQ2 Labs even put in an issue recently


00:59:44.680 --> 00:59:49.480
that on warehouse that might interested some parties here.


00:59:49.480 --> 00:59:52.120
It's issue 9527, you can also find it


00:59:52.120 --> 00:59:57.120
at short.iqt.org/issue, just a redirect.


00:59:57.120 --> 01:00:00.000
And we essentially call for something like


01:00:00.000 --> 01:00:03.680
social distancing for the top Python package indexes.


01:00:03.680 --> 01:00:08.100
So that for very popular package names,


01:00:08.100 --> 01:00:13.100
the package names that are close by are blocked off.


01:00:13.100 --> 01:00:17.960
So that, not saying that anybody who chooses those names


01:00:17.960 --> 01:00:21.160
is malicious, but just so malicious people can't choose them.


01:00:21.160 --> 01:00:22.640
Feel free to upvote that.


01:00:22.640 --> 01:00:27.040
We've been discussing this with some of the members


01:00:27.040 --> 01:00:28.140
of the warehouse team.


01:00:29.220 --> 01:00:31.460
- So I think, sorry.


01:00:31.460 --> 01:00:34.580
- But as, yeah, so your proposal is that


01:00:34.580 --> 01:00:39.620
Pandar should not have even been allowed, right?


01:00:39.620 --> 01:00:43.220
Given that the package pandas is so popular,


01:00:43.220 --> 01:00:45.860
minor variations on its spelling


01:00:45.860 --> 01:00:50.300
should basically be blocked or maybe redirect to pandas


01:00:50.300 --> 01:00:52.260
and say, with a warning, like,


01:00:52.260 --> 01:00:53.500
you tried to install Pandar,


01:00:53.500 --> 01:00:55.820
did you mean to install pandas?


01:00:55.820 --> 01:00:56.660
- That's right.


01:00:56.660 --> 01:00:57.740
- Or something like that.


01:00:57.740 --> 01:00:58.580
- That's right.


01:00:58.580 --> 01:01:07.580
So it's a way to build in guardrails so that the unwary don't fall prey to this.


01:01:07.580 --> 01:01:17.580
Yeah, I think that that's personally my first impression is that that's a good idea. It's worth it that we don't need request and requests and requester.


01:01:17.580 --> 01:01:26.460
And the potential harm is higher than the value of reusing very, very similar names.


01:01:26.460 --> 01:01:31.900
Yeah, we agree. There's obviously trade-offs.


01:01:31.900 --> 01:01:39.420
Yeah. Bence, what do you think? You must agree with this.


01:01:39.420 --> 01:01:42.940
I do agree with that. I definitely supported this. And I know one other thing that's under


01:01:42.940 --> 01:01:46.060
consideration that's relevant is namespacing.


01:01:46.060 --> 01:01:50.540
So if you can, Kenneth Wrights is the request guy.


01:01:50.540 --> 01:01:51.740
He has his namespace.


01:01:51.740 --> 01:01:55.220
You go to his namespace, you're less likely to mistype that


01:01:55.220 --> 01:01:57.420
and have someone, the namespace, and have someone


01:01:57.420 --> 01:02:01.300
who has claimed the same package within their own namespace.


01:02:01.300 --> 01:02:04.540
So possible, but it's another layer,


01:02:04.540 --> 01:02:06.500
I guess as you were describing it.


01:02:06.500 --> 01:02:07.460
- Yeah, it makes the commands,


01:02:07.460 --> 01:02:08.760
you got to type a little bit longer,


01:02:08.760 --> 01:02:11.940
but it makes it really clear where it's coming from.


01:02:11.940 --> 01:02:14.580
I mean, that's what the point of namespaces and programming is.


01:02:14.580 --> 01:02:16.460
It's really clear what library it comes from


01:02:16.460 --> 01:02:18.380
or what part of your code it comes from,


01:02:18.380 --> 01:02:21.060
because it's grouped together in a namespace.


01:02:21.060 --> 01:02:21.620
As well.


01:02:21.620 --> 01:02:23.060
I know Go has done--


01:02:23.060 --> 01:02:25.980
used that to great success.


01:02:25.980 --> 01:02:29.420
Yeah, Kim Benwick out there put a cool comment


01:02:29.420 --> 01:02:31.020
that's sort of related to that, talking


01:02:31.020 --> 01:02:36.300
about the private PyPI server that's redirecting out.


01:02:36.300 --> 01:02:39.380
It would help if the private PIs--


01:02:39.380 --> 01:02:43.060
if you had an option to prevent the account uploading images


01:02:43.060 --> 01:02:45.340
from pulling images with a certain prefix,


01:02:45.340 --> 01:02:48.820
for example, if everybody named their packages,


01:02:48.820 --> 01:02:50.620
ABC something at the company,


01:02:50.620 --> 01:02:53.340
you could say, ABC is private,


01:02:53.340 --> 01:02:55.900
ABC star is private and never ever,


01:02:55.900 --> 01:02:59.060
you know, go look beyond here for that type of thing.


01:02:59.060 --> 01:03:01.380
I think that that's pretty interesting.


01:03:01.380 --> 01:03:03.500
- Yeah, that's a good idea.


01:03:03.500 --> 01:03:06.220
- Yeah, I think it seems super simple and a good idea.


01:03:06.220 --> 01:03:07.040
I agree.


01:03:08.460 --> 01:03:10.680
All right, gentlemen, well, very cool


01:03:10.680 --> 01:03:11.780
to talk about this stuff.


01:03:11.780 --> 01:03:14.180
Like I said, it's gonna make all of us


01:03:14.180 --> 01:03:16.180
a little bit more nervous, I suspect.


01:03:16.180 --> 01:03:17.980
And for example, Corey Adkins out there said,


01:03:17.980 --> 01:03:20.340
I also just found an article on malicious Docker images.


01:03:20.340 --> 01:03:23.620
Now I am paranoid, which, welcome to our world.


01:03:23.620 --> 01:03:25.020
- I'm sorry, welcome.


01:03:25.020 --> 01:03:30.620
- Yeah, yeah, I've been there for a while.


01:03:30.620 --> 01:03:32.700
All right, before I let you two out of here though,


01:03:32.700 --> 01:03:35.660
real quickly, let's answer, I'll ask you the two questions


01:03:35.660 --> 01:03:37.140
at the end of the show, of course.


01:03:37.140 --> 01:03:38.940
So if you're gonna write some Python code,


01:03:38.940 --> 01:03:40.140
what editor do you use?


01:03:40.140 --> 01:03:43.780
- I use Vim if I'm in the command line,


01:03:43.780 --> 01:03:48.780
but if I have the fortune to be outside of it, use Sublime.


01:03:48.780 --> 01:03:52.500
- Right on, I suspect JupyterLab is also in there.


01:03:52.500 --> 01:03:53.900
- Definitely Jupyter is in there.


01:03:53.900 --> 01:03:55.820
- Yeah, and Benz?


01:03:55.820 --> 01:03:57.140
- Primarily PyCharm.


01:03:57.140 --> 01:04:02.140
Yeah, I mean, I'll use Vim if I'm already in a command line,


01:04:02.140 --> 01:04:04.020
but yeah, that's not as often these days,


01:04:04.020 --> 01:04:06.780
so PyCharm is just my idea of choice.


01:04:06.780 --> 01:04:09.620
right on and then a notable PyPI package,


01:04:09.620 --> 01:04:12.900
something that's like, oh, people should know about this.


01:04:12.900 --> 01:04:15.340
- Check out one called NetworkML.


01:04:15.340 --> 01:04:17.340
It's a package related to machine learning


01:04:17.340 --> 01:04:18.880
and network traffic.


01:04:18.880 --> 01:04:21.840
The lead maintainer is Charlie Lewis of IQT Labs.


01:04:21.840 --> 01:04:24.100
You can go find it on PyPI.


01:04:24.100 --> 01:04:27.480
- Yeah, fantastic.


01:04:27.480 --> 01:04:30.940
So machine learning plugins for network traffic.


01:04:30.940 --> 01:04:32.660
So it identifies like anomalies


01:04:32.660 --> 01:04:35.060
and other weirdnesses like that.


01:04:35.060 --> 01:04:37.500
- Yeah, it parses network traffic


01:04:37.500 --> 01:04:40.660
and one of the cool things it does is it helps identify


01:04:40.660 --> 01:04:45.220
what sort of device is being observed.


01:04:45.220 --> 01:04:46.380
So is this thing a printer


01:04:46.380 --> 01:04:47.820
or is this thing a personal computer?


01:04:47.820 --> 01:04:50.620
Is it an Active Directory controller, et cetera?


01:04:50.620 --> 01:04:52.660
- Is it a canary?


01:04:52.660 --> 01:04:53.660
- Is it a canary?


01:04:53.660 --> 01:04:58.300
- Awesome, all right, well, thank you both


01:04:58.300 --> 01:05:01.300
for shedding a light on lots of what's happening,


01:05:01.300 --> 01:05:02.540
some of the things that are being done


01:05:02.540 --> 01:05:04.820
and what might also be done as well.


01:05:04.820 --> 01:05:08.220
So final call to action, people that want to get involved,


01:05:08.220 --> 01:05:11.020
maybe do more, become more aware, what do you all say?


01:05:11.020 --> 01:05:14.760
- Yeah, I mean, there's plenty of work to be done.


01:05:14.760 --> 01:05:18.360
OpenSSF is a very welcoming, relatively new organization


01:05:18.360 --> 01:05:21.320
that has a nice list of stuff to do.


01:05:21.320 --> 01:05:25.720
Python Software Foundation also actually has an active list


01:05:25.720 --> 01:05:27.360
of items they would like to work on,


01:05:27.360 --> 01:05:29.280
some of which are relevant to this topic.


01:05:29.280 --> 01:05:31.240
So that'd be two great places to start.


01:05:32.480 --> 01:05:37.080
And I'll point you back towards that GitHub issue.


01:05:37.080 --> 01:05:39.440
Feel free to chime in.


01:05:39.440 --> 01:05:40.800
I think there's definitely potential


01:05:40.800 --> 01:05:42.680
over the next few months.


01:05:42.680 --> 01:05:46.200
Additionally, we're actually working on a survey at IQT Labs


01:05:46.200 --> 01:05:48.720
called on secure code reuse.


01:05:48.720 --> 01:05:51.960
So if you want to help build the research foundations for this,


01:05:51.960 --> 01:05:56.200
you can find this survey at short.iqt.org/survey.


01:05:56.200 --> 01:05:59.680
And we're trying to understand the developer or data


01:05:59.680 --> 01:06:02.200
scientists or other programming professionals' experience


01:06:02.200 --> 01:06:04.240
of package reuse.


01:06:04.240 --> 01:06:05.200
So that's another way.


01:06:05.200 --> 01:06:08.800
So hopefully this survey informs future tools.


01:06:08.800 --> 01:06:09.720
- Yeah, fantastic.


01:06:09.720 --> 01:06:11.760
Well, thanks for the work that you all are doing


01:06:11.760 --> 01:06:13.280
and thanks for being on the show.


01:06:13.280 --> 01:06:14.120
- Thanks for having us.


01:06:14.120 --> 01:06:15.160
- Thanks for having us.


01:06:15.160 --> 01:06:17.400
- Bye. - Bye.


01:06:17.400 --> 01:06:27.400
[BLANK_AUDIO]

