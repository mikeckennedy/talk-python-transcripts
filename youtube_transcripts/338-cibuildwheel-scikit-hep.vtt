WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, Henry.


00:00:01.000 --> 00:00:02.000
>> Hi, Michael.


00:00:02.000 --> 00:00:08.400
>> Hey, it's great to have you here on the channel and just a moment on the podcast.


00:00:08.400 --> 00:00:10.400
It's going to be a lot of fun, isn't it?


00:00:10.400 --> 00:00:12.400
>> Yes, thanks for having me.


00:00:12.400 --> 00:00:13.680
>> Yeah, you bet.


00:00:13.680 --> 00:00:17.880
So yeah, let's kick it off and talk about some higher energy physics and a bunch of


00:00:17.880 --> 00:00:19.520
packages and all sorts of cool stuff.


00:00:19.520 --> 00:00:22.600
There's a lot to cover, so I'm excited to get to it.


00:00:22.600 --> 00:00:27.000
Henry, welcome to Talk Python to Me.


00:00:27.000 --> 00:00:28.000
>> Thank you.


00:00:28.000 --> 00:00:29.520
>> Yeah, it's great to have you here.


00:00:29.520 --> 00:00:33.360
I'm always fascinated with cutting edge physics


00:00:33.360 --> 00:00:36.920
with maybe both ends of physics.


00:00:36.920 --> 00:00:39.000
I'm really fascinated with astrophysics


00:00:39.000 --> 00:00:42.080
and the super large, and then also the very, very small.


00:00:42.080 --> 00:00:44.440
And we're going to probably tend a little bit


00:00:44.440 --> 00:00:47.920
towards the smaller, high energy things this time around.


00:00:47.920 --> 00:00:49.920
But so much fun to talk about this stuff


00:00:49.920 --> 00:00:52.640
and how it intersects Python.


00:00:52.640 --> 00:00:55.760
Some of the smallest things you can measure


00:00:55.760 --> 00:00:58.520
and some of the largest amounts of data you can get out.


00:00:58.520 --> 00:01:04.600
Yeah, yeah, the data story is actually really, really crazy. And we're going to talk a bit about that.


00:01:04.600 --> 00:01:13.720
But so neat, so much stuff, like we used to think that, you know, atoms were smallest things


00:01:13.720 --> 00:01:17.160
get right. Like I remember learning that in elementary school, like there are these things


00:01:17.160 --> 00:01:22.920
called atoms, they combine to form compounds and stuff. And that that's as small as it gets. And


00:01:22.920 --> 00:01:24.920
Yeah, not so much, right?


00:01:24.920 --> 00:01:27.400
Yeah, that was sort of what adam was supposed to mean


00:01:27.400 --> 00:01:30.680
exactly the smallest bit but


00:01:30.680 --> 00:01:33.960
Nope it but that name got used up. So there we are


00:01:33.960 --> 00:01:39.000
All right. Well before we get into all that stuff though, let's start with your story. How do you get into programming in python?


00:01:39.000 --> 00:01:42.520
Well, I started with um


00:01:42.520 --> 00:01:46.600
A little bit of programming that my dad taught me. He was a physicist


00:01:46.600 --> 00:01:49.560
and I remember it was


00:01:49.800 --> 00:01:54.280
C++ and sort of taught the way you would teach Java, you know all objects and classes


00:01:54.280 --> 00:02:01.560
Did just a little bit and then when I started at uh college then I wanted to take I wanted to take classes


00:02:01.560 --> 00:02:04.460
And I took a couple classes again in C++


00:02:04.460 --> 00:02:12.360
um, but I just really loved objects and classes, which unfortunately the courses didn't actually cover that much but the book did so


00:02:12.360 --> 00:02:14.440
I really got


00:02:14.440 --> 00:02:16.440
into that


00:02:16.440 --> 00:02:18.200
And then for python


00:02:18.200 --> 00:02:22.400
Actually, right when I started college, I started using this program called Blender.


00:02:22.400 --> 00:02:24.400
- And it had a-- - Oh, yeah, Blender.


00:02:24.400 --> 00:02:26.400
I've heard of Blender. It's like...


00:02:26.400 --> 00:02:31.400
3D animation tool, like Maya or something like that, right?


00:02:31.400 --> 00:02:33.400
- Yes, but open source. - It's very Python.


00:02:33.400 --> 00:02:36.900
- Really cool. - Yeah, and it's very Python friendly, right?


00:02:36.900 --> 00:02:39.900
Yes, it has a built-in Python interpreter.


00:02:39.900 --> 00:02:43.400
And so I knew it had this built-in language called Python,


00:02:43.400 --> 00:02:45.400
so that made me really want to learn Python.


00:02:45.400 --> 00:02:50.280
And then when I went to an REU, a Research Experience


00:02:50.280 --> 00:02:52.080
for Undergraduates at Northwestern University


00:02:52.080 --> 00:02:54.200
in Chicago.


00:02:54.200 --> 00:02:57.720
And when I was there, we had this cluster


00:02:57.720 --> 00:02:58.760
that we were working on.


00:02:58.760 --> 00:03:03.760
This was in solid state physics, material physics.


00:03:03.760 --> 00:03:08.440
And we would launch these simulations on the cluster.


00:03:08.440 --> 00:03:11.360
And so I started using Python.


00:03:11.360 --> 00:03:13.440
And I was able to write a program that


00:03:13.440 --> 00:03:15.720
go out and it would create a bunch of threads


00:03:15.720 --> 00:03:19.480
and it would watch all of the nodes in the cluster.


00:03:19.480 --> 00:03:21.720
And as soon as one became available, it would take it.


00:03:21.720 --> 00:03:23.920
So I could just, my simulation could just take


00:03:23.920 --> 00:03:25.560
the entire cluster after a few hours,


00:03:25.560 --> 00:03:27.040
I would have everything.


00:03:27.040 --> 00:03:29.320
So at the end of that, everybody hated me


00:03:29.320 --> 00:03:31.560
and everybody wanted my scripts.


00:03:31.560 --> 00:03:33.880
- Exactly, they're like, this is horrible.


00:03:33.880 --> 00:03:35.640
I can't believe you did that to me,


00:03:35.640 --> 00:03:37.960
but I'll completely forgive you if you just give it to me


00:03:37.960 --> 00:03:40.520
and only to me because I need that power.


00:03:40.520 --> 00:03:43.520
(laughing)


00:03:43.520 --> 00:03:45.040
- Yeah, that's fantastic.


00:03:45.040 --> 00:03:45.880
How neat.


00:03:45.880 --> 00:03:48.280
So I think that is one of the cool things about Python,


00:03:48.280 --> 00:03:53.280
right, is that it has this quick prototyping approachability


00:03:53.280 --> 00:03:57.160
that you're like, I'm just gonna take over


00:03:57.160 --> 00:04:00.440
a huge hardware, right, like a huge cluster of servers,


00:04:00.440 --> 00:04:03.640
but it itself doesn't have to be like intense programming.


00:04:03.640 --> 00:04:06.780
It can be like this elegant little bit of code, right?


00:04:06.780 --> 00:04:09.240
- You can sort of do things that normally,


00:04:09.240 --> 00:04:10.740
I think the programming gets in the way more,


00:04:10.740 --> 00:04:12.380
but Python tends to stay out.


00:04:12.380 --> 00:04:13.600
It looks more like pseudocode.


00:04:13.600 --> 00:04:16.680
So you can do more and learn more


00:04:16.680 --> 00:04:19.240
and eventually you can go do it in C++ or something.


00:04:19.240 --> 00:04:20.640
- Yeah, yeah, absolutely.


00:04:20.640 --> 00:04:22.440
Or yeah, or maybe not.


00:04:22.440 --> 00:04:25.400
Sometimes you do need to go do it in some other language


00:04:25.400 --> 00:04:27.240
and sometimes you don't.


00:04:27.240 --> 00:04:30.720
I think the stuff at CERN and LHC


00:04:30.720 --> 00:04:33.520
has an interesting exchange between C++


00:04:33.520 --> 00:04:36.400
and maybe some more Python and whatnot.


00:04:36.400 --> 00:04:38.000
So that'll be fun to talk about.


00:04:38.000 --> 00:04:45.280
Yeah, we've been C++ originally, but Python is really showing up in a lot more places


00:04:45.280 --> 00:04:47.800
and there's been a lot of movement in that direction.


00:04:47.800 --> 00:04:51.240
There have been some really interesting things that have come out, a lot of interesting things


00:04:51.240 --> 00:04:55.240
have come out of the LIC, competing-wise as well as physics.


00:04:55.240 --> 00:04:57.080
Awesome, yeah.


00:04:57.080 --> 00:05:00.280
As a computing bit of infrastructure, there's a ton going on there.


00:05:00.280 --> 00:05:05.140
And as physics, it's kind of the center of the particle physics world, right?


00:05:05.140 --> 00:05:09.340
So it's got those two parallel things generating,


00:05:09.340 --> 00:05:10.980
all sorts of cool stuff.


00:05:10.980 --> 00:05:13.060
I want to go back to just really quickly to,


00:05:13.060 --> 00:05:15.180
you talked about your dad teaching a little programming.


00:05:15.180 --> 00:05:17.860
If people are out there and they're the dad,


00:05:17.860 --> 00:05:19.620
they want to teach their kids a little bit of programming,


00:05:19.620 --> 00:05:22.060
I want to give a shout out to CodeCombat.com.


00:05:22.060 --> 00:05:23.500
Such a cool place.


00:05:23.500 --> 00:05:24.980
My daughter just yesterday was like,


00:05:24.980 --> 00:05:26.660
"Hey dad, I want to do a little Python.


00:05:26.660 --> 00:05:29.260
Remember that game that taught me programming?"


00:05:29.260 --> 00:05:30.100
Like, "Yeah, yeah, sure."


00:05:30.100 --> 00:05:32.300
So she's like, she logged in and started playing


00:05:32.300 --> 00:05:35.220
and basically solve a dungeon interactively


00:05:35.220 --> 00:05:36.100
by writing Python.


00:05:36.100 --> 00:05:37.780
And it's such an approachable way,


00:05:37.780 --> 00:05:39.820
but it's not the like draggy, droppy, fake stuff.


00:05:39.820 --> 00:05:40.960
You write real Python,


00:05:40.960 --> 00:05:43.860
which I think is cool to introduce kids that way.


00:05:43.860 --> 00:05:45.600
So anyway, shout out to them.


00:05:45.600 --> 00:05:46.880
I had them on the podcast before,


00:05:46.880 --> 00:05:50.020
but it's cool to see kids like take into it in that way.


00:05:50.020 --> 00:05:51.900
Whereas you say it like you could write a terminal app.


00:05:51.900 --> 00:05:53.860
They're like, I don't wanna do that,


00:05:53.860 --> 00:05:55.140
but solve a dungeon.


00:05:55.140 --> 00:05:56.940
Yeah, they could do that.


00:05:56.940 --> 00:05:58.180
- Yeah, I've actually played with a couple of those.


00:05:58.180 --> 00:05:59.700
They're actually really fun just to play with.


00:05:59.700 --> 00:06:01.300
- Yeah, they are exactly.


00:06:01.300 --> 00:06:03.500
I did like 40 dungeons along with my daughter.


00:06:03.500 --> 00:06:05.260
It was very cool.


00:06:05.260 --> 00:06:05.840
How about now?


00:06:05.840 --> 00:06:06.640
What do you do now?


00:06:06.640 --> 00:06:12.260
So I work in a lot of different areas,


00:06:12.260 --> 00:06:15.220
and I jump around a lot.


00:06:15.220 --> 00:06:17.900
So I do a mix of coding.


00:06:17.900 --> 00:06:23.820
I do some work on websites because they just


00:06:23.820 --> 00:06:26.220
needed maintenance, and somehow I got volunteered.


00:06:26.220 --> 00:06:30.820
And some writing.


00:06:30.820 --> 00:06:33.220
So less coding than I would like,


00:06:33.220 --> 00:06:36.300
but I definitely do get to do it, which is fun.


00:06:36.300 --> 00:06:39.100
- Yeah, and this is at CERN or your university


00:06:39.100 --> 00:06:40.980
or where is this?


00:06:40.980 --> 00:06:44.220
- So now I'm at Princeton University


00:06:44.220 --> 00:06:46.860
and I'm part of a sort of a local group


00:06:46.860 --> 00:06:49.280
of RSCs, Research Software Engineers.


00:06:49.280 --> 00:06:54.700
And I'm also part of the IRISEP,


00:06:54.700 --> 00:06:56.240
which we'll talk about a little bit,


00:06:56.240 --> 00:06:58.860
but that's sort of a very spread out group.


00:06:58.860 --> 00:07:02.660
Some, a few of us are at CERN, a few are in some other places,


00:07:02.660 --> 00:07:04.900
a few in Fermilab.


00:07:04.900 --> 00:07:09.580
And I think physicists are just used to working remote.


00:07:09.580 --> 00:07:11.540
The pandemic wasn't that big of a change for us.


00:07:11.540 --> 00:07:12.820
We were already doing all our meetings remote.


00:07:12.820 --> 00:07:15.060
We just eventually changed from video to Zoom.


00:07:15.060 --> 00:07:17.500
But other than that, it was--


00:07:17.500 --> 00:07:18.540
Exactly.


00:07:18.540 --> 00:07:19.820
It was real similar for me as well.


00:07:19.820 --> 00:07:20.620
That's interesting.


00:07:20.620 --> 00:07:24.060
Fermilab, that's in Chicago, outside Chicago, right?


00:07:24.060 --> 00:07:24.560
Yes.


00:07:24.560 --> 00:07:25.400
Is that still going?


00:07:25.400 --> 00:07:27.700
I got the sense that that was shutting down.


00:07:27.700 --> 00:07:30.620
So they're big in neutrino physics.


00:07:30.620 --> 00:07:32.380
So they do a lot of neutrino things there.


00:07:32.380 --> 00:07:34.180
And then they're also very active just


00:07:34.180 --> 00:07:35.820
in the particle physics space.


00:07:35.820 --> 00:07:39.940
So you may be at Fermilab, but working on CERN data.


00:07:39.940 --> 00:07:40.420
I see.


00:07:40.420 --> 00:07:41.180
OK, interesting.


00:07:41.180 --> 00:07:41.680
Yeah.


00:07:41.680 --> 00:07:43.740
I got to tour that place a little bit.


00:07:43.740 --> 00:07:45.500
And it's a really neat place.


00:07:45.500 --> 00:07:46.000
It is.


00:07:46.000 --> 00:07:47.540
CERN's a neat place, too.


00:07:47.540 --> 00:07:48.740
I would love to tour CERN.


00:07:48.740 --> 00:07:52.020
But it wasn't 20 minutes down the street


00:07:52.020 --> 00:07:53.340
from where I happen to be.


00:07:53.340 --> 00:07:54.820
So I didn't make it there.


00:07:54.820 --> 00:07:57.700
Sadly, I hope to get back there someday.


00:07:57.700 --> 00:08:02.700
All right, well, let's talk about sort of the scikit-hep


00:08:02.700 --> 00:08:08.780
side of things and how you got into maintaining


00:08:08.780 --> 00:08:09.940
all of these packages.


00:08:09.940 --> 00:08:13.980
So you found yourself in this place where you're working


00:08:13.980 --> 00:08:16.980
on tools that help other people build packages


00:08:16.980 --> 00:08:20.740
for the physicists and data scientists and so on, right?


00:08:20.740 --> 00:08:23.020
So where'd that all start?


00:08:23.020 --> 00:08:29.980
- So, with maintenance itself, the first thing I started maintaining was a package called


00:08:29.980 --> 00:08:39.820
Plumbum back in 2015. And at that point, I was starting to submit some PRs, and the author


00:08:39.820 --> 00:08:43.820
came to me and said, you know, I would like to have somebody do the releases. I need a


00:08:43.820 --> 00:08:47.020
release manager. I don't have enough time. And I said, sure, I'd be happy to do it. And


00:08:47.020 --> 00:08:50.940
And it was exciting for me because it was the first package


00:08:50.940 --> 00:08:54.580
or like real package I got to join.


00:08:54.580 --> 00:08:59.060
And so I think in the page,


00:08:59.060 --> 00:09:00.780
I might even still have the original news item


00:09:00.780 --> 00:09:02.540
when it says welcome to me.


00:09:02.540 --> 00:09:07.540
But so that was the first thing I started maintaining.


00:09:07.540 --> 00:09:12.980
And then I was working on a high-energy physics tool


00:09:12.980 --> 00:09:15.660
called Goofit when I became a postdoc.


00:09:15.660 --> 00:09:20.020
And I worked on sort of really renovating that.


00:09:20.020 --> 00:09:24.460
It started out as a code written by physicists.


00:09:24.460 --> 00:09:27.980
And I worked on making it actually installable


00:09:27.980 --> 00:09:31.300
and packaged nicely and worked with a student


00:09:31.300 --> 00:09:33.780
to add Python bindings to it, things like that.


00:09:33.780 --> 00:09:37.620
And as part of that, I wrote a C++ package, CLI 11.


00:09:37.620 --> 00:09:40.700
This is the first package I actually


00:09:40.700 --> 00:09:43.660
wrote and then maintained.


00:09:43.660 --> 00:09:45.380
That's actually in C++.


00:09:45.380 --> 00:09:48.980
And that was written for Goofit, but now it's a fairly,


00:09:48.980 --> 00:09:53.820
I think it's done pretty well on its own.


00:09:53.820 --> 00:09:54.660
- Nice, what's that one do?


00:09:54.660 --> 00:09:56.120
- Microsoft Terminal uses it.


00:09:56.120 --> 00:09:58.160
- Yeah, Microsoft Terminal uses it?


00:09:58.160 --> 00:10:00.100
Oh, nice.


00:10:00.100 --> 00:10:01.660
Yeah, I'm a big fan of Microsoft Terminal.


00:10:01.660 --> 00:10:05.260
I've for a while now kind of shied away


00:10:05.260 --> 00:10:06.340
from working on Windows


00:10:06.340 --> 00:10:09.780
because the terminal experience has been really crummy.


00:10:09.780 --> 00:10:12.460
You know, the cmd.exe command prompt style


00:10:12.460 --> 00:10:15.420
it's just like, oh, why is it so painful?


00:10:15.420 --> 00:10:16.460
And people who work in that all day,


00:10:16.460 --> 00:10:17.700
they might not see this painful,


00:10:17.700 --> 00:10:21.460
but if you get to work in something like a macOS terminal,


00:10:21.460 --> 00:10:23.940
or even to not quite the same degree,


00:10:23.940 --> 00:10:26.100
but still in like a Linux one,


00:10:26.100 --> 00:10:27.900
then all of a sudden, yeah, it kind of gets there.


00:10:27.900 --> 00:10:30.940
So, but I'm kind of warming up to it again


00:10:30.940 --> 00:10:32.780
with Windows Terminal.


00:10:32.780 --> 00:10:34.940
- Yeah, the Xterm is one of the reasons I use,


00:10:34.940 --> 00:10:37.700
I moved to Mac 'cause I loved Xterm.


00:10:37.700 --> 00:10:40.420
And then, Windows Terminal is amazing.


00:10:40.420 --> 00:10:42.720
Now it's a great team working on it,


00:10:42.720 --> 00:10:44.980
including the fact that they used my cursor,


00:10:44.980 --> 00:10:49.100
but it's actually quite nice.


00:10:49.100 --> 00:10:50.220
The only problem I have in Windows 10


00:10:50.220 --> 00:10:51.620
is it's really hard to get the thing


00:10:51.620 --> 00:10:54.700
to show up instead of CMD prompt.


00:10:54.700 --> 00:10:57.300
- Yeah, I think it's different than Windows 11, right?


00:10:57.300 --> 00:10:58.380
- It's the only one, yeah.


00:10:58.380 --> 00:11:01.140
- I definitely think it's included now, which is great.


00:11:01.140 --> 00:11:07.060
So CLI 11, this is a C++ 11 command line parser, right?


00:11:07.060 --> 00:11:09.580
Like click or arg parse or something like that,


00:11:09.580 --> 00:11:11.020
but for C++, right?


00:11:11.020 --> 00:11:14.820
- Yes, it was designed off of the Plumbum command line parser


00:11:14.820 --> 00:11:15.940
'cause Plumbum's sort of a toolkit


00:11:15.940 --> 00:11:17.540
and it has several different things.


00:11:17.540 --> 00:11:18.780
I wish those things had been pulled out


00:11:18.780 --> 00:11:20.780
'cause I think on their own, they might have


00:11:20.780 --> 00:11:25.780
maybe even been popular on their own.


00:11:25.780 --> 00:11:26.780
It has a really nice parser,


00:11:26.780 --> 00:11:29.780
but it was sort of designed off of that and off click.


00:11:29.780 --> 00:11:34.580
So it has some similarities to both of those.


00:11:34.580 --> 00:11:36.300
- Yeah, I think probably that's a challenge.


00:11:36.300 --> 00:11:39.180
I mean, we're gonna get into scikit-hub


00:11:39.180 --> 00:11:40.860
with a whole bunch of these different packages,


00:11:40.860 --> 00:11:44.860
but finding the right granularity of what is a


00:11:44.860 --> 00:11:47.780
self-contained unit that you want to share with people


00:11:47.780 --> 00:11:51.720
or versus things like pulling out a command line parser


00:11:51.720 --> 00:11:53.380
rather than some other library, right?


00:11:53.380 --> 00:11:55.040
This is a careful balance.


00:11:55.040 --> 00:11:57.260
- It's a bit challenging.


00:11:57.260 --> 00:12:01.420
I think in Python, there's a really strong emphasis


00:12:01.420 --> 00:12:04.320
to having the individual separate pieces and packages,


00:12:04.320 --> 00:12:06.340
especially in Python,


00:12:06.340 --> 00:12:09.900
partially because it has a really good packaging system.


00:12:09.900 --> 00:12:14.900
And that being able to take things, have just pieces


00:12:14.900 --> 00:12:17.500
and be able to swap out one that you don't like


00:12:17.500 --> 00:12:19.140
is really, really nice.


00:12:19.140 --> 00:12:20.460
And that's sort of, that's one of the things


00:12:20.460 --> 00:12:21.660
we'll talk about the Pipea as well.


00:12:21.660 --> 00:12:24.260
And that's one of the things that they focus on


00:12:24.260 --> 00:12:27.540
is small individual packages that each do a job


00:12:27.540 --> 00:12:29.780
versus like all in one.


00:12:29.780 --> 00:12:30.620
- Yeah.


00:12:30.620 --> 00:12:31.820
- Poetry detecting.


00:12:31.820 --> 00:12:32.640
- Yeah.


00:12:32.640 --> 00:12:37.640
you'll have to do some checking or some fact checking,


00:12:37.640 --> 00:12:39.860
balancing, modernizing for me.


00:12:39.860 --> 00:12:43.940
I did professional C++ development for a couple of years


00:12:43.940 --> 00:12:47.180
and I really enjoyed it until there were better options.


00:12:47.180 --> 00:12:49.380
And then I'm like, why am I still doing this?


00:12:49.380 --> 00:12:51.380
I would go work on those.


00:12:51.380 --> 00:12:56.180
But one of the things that struck me as a big difference


00:12:56.180 --> 00:13:00.540
to that world is basically the number of libraries you use,


00:13:00.540 --> 00:13:03.020
the granularity of the libraries you use,


00:13:03.020 --> 00:13:07.220
the relative acceptance of things like pip


00:13:07.220 --> 00:13:09.740
and the ease of using another library, right?


00:13:09.740 --> 00:13:12.700
If in C++, you've got the header


00:13:12.700 --> 00:13:16.740
and you've got the linked file and you've got the DLL,


00:13:16.740 --> 00:13:18.000
and there's like all sorts of stuff


00:13:18.000 --> 00:13:20.660
that can like get out of sync and go crazy


00:13:20.660 --> 00:13:22.660
and like make weird crashes,


00:13:22.660 --> 00:13:24.900
your app just goes away and that's not great.


00:13:24.900 --> 00:13:27.340
Is that still true?


00:13:27.340 --> 00:13:30.040
I feel like that difference is one of the things


00:13:30.040 --> 00:13:32.460
that allows for people to make these smaller,


00:13:32.460 --> 00:13:34.620
composable pieces in Python?


00:13:34.620 --> 00:13:36.060
- I think that has a lot to do with it.


00:13:36.060 --> 00:13:39.780
What has happened in C++ is there's sort of a rise


00:13:39.780 --> 00:13:41.780
of a lot of header-only libraries.


00:13:41.780 --> 00:13:44.660
And these libraries are a lot easier


00:13:44.660 --> 00:13:46.940
to just drop into your project


00:13:46.940 --> 00:13:49.780
because all you do is you put in the headers


00:13:49.780 --> 00:13:54.780
and you don't have to deal with a lot of the original issues.


00:13:54.780 --> 00:13:56.900
So a lot of these small standalone libraries


00:13:56.900 --> 00:13:58.600
are header-only.


00:13:58.600 --> 00:14:04.520
And one of the next things that I picked up as a maintainer was PyBind 11.


00:14:04.520 --> 00:14:10.640
And I've sort of been in that space sort of between C++ and Python for quite a bit.


00:14:10.640 --> 00:14:13.000
I kind of like being in that area.


00:14:13.000 --> 00:14:16.120
- Yeah. - Joining the two.


00:14:16.120 --> 00:14:19.560
I get a sense from listening to the things that you've worked on previously


00:14:19.560 --> 00:14:23.280
and things like this that you're interested in connecting and enabling,


00:14:23.280 --> 00:14:27.760
like piecing together, like, here's my script that's going to pull together the compute on this cluster,


00:14:27.760 --> 00:14:31.440
or here's this library that pulls together Python and C++ and so on.


00:14:31.440 --> 00:14:38.240
Yes, making different things work together and combining things like C++ and Python


00:14:38.240 --> 00:14:41.920
or combining different packages in Python and piecing together a solution.


00:14:41.920 --> 00:14:45.120
I think that's one of Python's strengths versus something like MATLAB.


00:14:45.120 --> 00:14:50.640
I spent quite a bit of time in MATLAB early on and got to move a lot of stuff over to Python.


00:14:50.640 --> 00:14:52.640
Right on, that's awesome.


00:14:52.640 --> 00:14:55.920
It was really nice. We didn't have to have a license and things like that.


00:14:56.800 --> 00:14:58.640
I know it's so expensive.


00:14:58.640 --> 00:15:00.760
And then you get the, what are they called?


00:15:00.760 --> 00:15:02.360
Toolkits, the add-on toolkits.


00:15:02.360 --> 00:15:05.480
And they're like, each toolkit is the price of, you know,


00:15:05.480 --> 00:15:07.840
another thousand dollars a year, $2,000 a year.


00:15:07.840 --> 00:15:09.280
It's ridiculous.


00:15:09.280 --> 00:15:14.280
So I know of CFFI, which is a way for Python and C


00:15:14.280 --> 00:15:19.000
to get clicked together in a simple way.


00:15:19.000 --> 00:15:23.480
What, how's PyBind 11 fit into that?


00:15:23.480 --> 00:15:26.680
This is seamless interoperability between C++ 11


00:15:26.680 --> 00:15:28.680
and Python. How are they different?


00:15:28.680 --> 00:15:35.760
So, CFFI, I teach a little short course where I can go through some of the different binding


00:15:35.760 --> 00:15:40.120
tools and it usually ends up me saying Python 11 is my favorite.


00:15:40.120 --> 00:15:43.280
Yeah, cool. Give us an overview of what the options are and stuff.


00:15:43.280 --> 00:15:52.240
It's closer to C types. It's focused on C versus C++. And it's actually the one I've


00:15:52.240 --> 00:15:54.240
I've used the least, those just helping,


00:15:54.240 --> 00:15:57.540
we're just talking with the CFI developer,


00:15:57.540 --> 00:16:00.380
but I've used it the least of those.


00:16:00.380 --> 00:16:05.380
But I think it basically parses your C headers,


00:16:05.380 --> 00:16:08.040
and then sort of automates a lot of what


00:16:08.040 --> 00:16:09.440
you would have to manually do with C types,


00:16:09.440 --> 00:16:13.760
or you have to specify what symbol you wanna call,


00:16:13.760 --> 00:16:15.760
and what the arguments are, and what the return type is,


00:16:15.760 --> 00:16:16.920
and if one of those things is wrong,


00:16:16.920 --> 00:16:18.880
you get a segfault and that sort of thing.


00:16:20.160 --> 00:16:22.700
Whereas PyBind 11, this is about building modules,


00:16:22.700 --> 00:16:24.120
extension modules.


00:16:24.120 --> 00:16:27.820
So, and it's, the interesting thing about this


00:16:27.820 --> 00:16:30.620
is that it's written in pure C++.


00:16:30.620 --> 00:16:33.500
The other tools out there, so Cython can do this,


00:16:33.500 --> 00:16:35.340
it's not what it was designed for,


00:16:35.340 --> 00:16:37.740
but it immediately became popular for doing this


00:16:37.740 --> 00:16:42.740
because Cython turned code, Python-like code


00:16:42.740 --> 00:16:47.140
is a new language, into, it transpiled it into C


00:16:47.140 --> 00:16:49.580
or C++, it had a toggle you could change,


00:16:49.580 --> 00:16:51.140
has a toggle you can change.


00:16:51.140 --> 00:16:56.500
And then when you're there, you can now call C or C++.


00:16:56.500 --> 00:16:58.700
But it's extremely verbose, and you repeat yourself,


00:16:58.700 --> 00:17:00.380
and you have to learn another language.


00:17:00.380 --> 00:17:02.420
It's this weird combined Python thing.


00:17:02.420 --> 00:17:04.620
And just thinking in Cython is difficult,


00:17:04.620 --> 00:17:07.260
because you have to think about, well, am I in Python?


00:17:07.260 --> 00:17:11.340
Or am I in Cython that's going to be bound to Python?


00:17:11.340 --> 00:17:14.180
Or am I in Cython that's just going straight to C, C++?


00:17:14.180 --> 00:17:16.500
Or am I just in C++?


00:17:16.500 --> 00:17:17.660
Or C++?


00:17:17.660 --> 00:17:19.420
A lot of layers there, yeah.


00:17:19.420 --> 00:17:23.600
- Python 11 is just C++ and it's just, it's basically,


00:17:23.600 --> 00:17:30.220
it's like the C API for Python, but a C++ API.


00:17:30.220 --> 00:17:33.020
So it's quite natural and you don't have to learn


00:17:33.020 --> 00:17:33.840
a new language.


00:17:33.840 --> 00:17:36.340
It uses some fairly advanced C++, but that's it.


00:17:36.340 --> 00:17:38.380
You're learning something useful anyway.


00:17:38.380 --> 00:17:39.380
- Right.


00:17:39.380 --> 00:17:41.720
So do you do some sort of like template type thing


00:17:41.720 --> 00:17:45.740
and then say, I'm going to expose this class to Python


00:17:45.740 --> 00:17:47.300
or something like that, and then it figures out,


00:17:47.300 --> 00:17:49.540
Does it write the Python code or what is it?


00:17:49.540 --> 00:17:51.580
- It's writing the--


00:17:51.580 --> 00:17:55.440
- Like data so files or what do you do here?


00:17:55.440 --> 00:17:59.660
- It compiles into the C API calls


00:17:59.660 --> 00:18:02.480
and then that would compile into a data cell.


00:18:02.480 --> 00:18:03.320
- Right.


00:18:03.320 --> 00:18:05.180
- And there's no separate step like Python or Swig


00:18:05.180 --> 00:18:09.460
or these other tools because it's just C++.


00:18:09.460 --> 00:18:11.700
You compile it like you do any other C++,


00:18:11.700 --> 00:18:15.500
but it's actually internally using the CPython API


00:18:15.500 --> 00:18:17.680
or PyPy's wrapper for it.


00:18:17.680 --> 00:18:19.620
- Yeah, that's really cool.


00:18:19.620 --> 00:18:22.860
- And the language looks a lot like Python,


00:18:22.860 --> 00:18:23.760
but the names are similar.


00:18:23.760 --> 00:18:25.820
You just do a def to define a function


00:18:25.820 --> 00:18:28.140
and you give it the name and then you just pass it


00:18:28.140 --> 00:18:31.380
the pointer to the underlying thing.


00:18:31.380 --> 00:18:32.780
It can figure out things like types


00:18:32.780 --> 00:18:34.180
and stuff like that for you.


00:18:34.180 --> 00:18:36.060
You can do docstring if you want,


00:18:36.060 --> 00:18:37.300
you can argue its names.


00:18:37.300 --> 00:18:39.420
You can make it as Pythonic as you want.


00:18:39.420 --> 00:18:42.280
It's verbose, but it's not overly verbose.


00:18:42.280 --> 00:18:45.260
- Yeah, that's really neat.


00:18:45.260 --> 00:18:48.300
And for people who haven't used those kinds of outputs,


00:18:48.300 --> 00:18:51.660
basically it's just import module name,


00:18:51.660 --> 00:18:56.660
whether it's a .py file or it's a .so file.


00:18:56.660 --> 00:19:02.500
- PyTorch if you've used, SciPy if you've used,


00:19:02.500 --> 00:19:04.180
any of those things,


00:19:04.180 --> 00:19:06.880
you've been importing some PyPy to 11 code.


00:19:06.880 --> 00:19:09.460
- Yeah, awesome.


00:19:09.460 --> 00:19:11.140
All right.


00:19:11.140 --> 00:19:14.060
So let's talk a little bit about


00:19:14.060 --> 00:19:15.300
And scikit-hep.


00:19:15.300 --> 00:19:21.300
This is one of the projects that


00:19:21.300 --> 00:19:25.260
it has a lot of these packages inside of it.


00:19:25.260 --> 00:19:30.260
And your library, cbuild wheel,


00:19:30.260 --> 00:19:32.900
CI build wheel, excuse me,


00:19:32.900 --> 00:19:36.180
is one of the things that is used to maintain


00:19:36.180 --> 00:19:37.400
and build a lot of those packages.


00:19:37.400 --> 00:19:39.620
'Cause I'm sure they have a lot of interesting


00:19:39.620 --> 00:19:41.780
and oddball dependencies, right?


00:19:41.780 --> 00:19:43.900
I mean, C++ is kind of standard,


00:19:43.900 --> 00:19:46.000
but there's probably others as well, right?


00:19:46.000 --> 00:19:49.620
- It is, so one thing that is kind of


00:19:49.620 --> 00:19:54.440
somewhat unique to HEP is that we are very heavily invested


00:19:54.440 --> 00:19:55.280
in C++.


00:19:55.280 --> 00:19:58.160
So there's, it's usually either you're gonna see Python


00:19:58.160 --> 00:20:01.580
or you're gonna see some sort of C++ package of some sort.


00:20:01.580 --> 00:20:04.000
I mean, it could be, it varies in size there,


00:20:04.000 --> 00:20:06.320
but it's mostly C++ or Python.


00:20:06.320 --> 00:20:10.840
We really haven't used other languages much


00:20:10.840 --> 00:20:11.760
for the past.


00:20:13.160 --> 00:20:18.040
Is that inertia or is that by choice?


00:20:18.040 --> 00:20:20.560
Why is that?


00:20:20.560 --> 00:20:26.400
I think it's partially the community is a fairly cohesive


00:20:26.400 --> 00:20:26.960
community.


00:20:26.960 --> 00:20:28.920
We're really used to working together.


00:20:28.920 --> 00:20:32.880
The experiments themselves are often--


00:20:32.880 --> 00:20:35.680
might be a thousand or several thousand physicists


00:20:35.680 --> 00:20:37.720
working on a single experiment.


00:20:37.720 --> 00:20:41.120
And we have been fairly good about meeting together


00:20:41.120 --> 00:20:44.540
and sort of deciding the direction that we want to go in


00:20:44.540 --> 00:20:46.140
and then sort of sticking to that.


00:20:46.140 --> 00:20:49.500
So for C++, it was heavily Root,


00:20:49.500 --> 00:20:54.380
which is a giant C++ framework.


00:20:54.380 --> 00:20:56.980
And it got everything in it.


00:20:56.980 --> 00:20:59.840
And that was C++ and that's what everybody used.


00:20:59.840 --> 00:21:02.580
- Right, so Root is the library.


00:21:02.580 --> 00:21:05.500
If I was going to write code that would run


00:21:05.500 --> 00:21:09.140
and interact with like the grid computing


00:21:09.140 --> 00:21:12.820
or the data access and all that kind of stuff at LHC,


00:21:12.820 --> 00:21:14.140
I would use this root library


00:21:14.140 --> 00:21:15.940
if I was doing that in C++, right?


00:21:15.940 --> 00:21:19.620
- Yes, and you might be using interpreted C++,


00:21:19.620 --> 00:21:21.340
which is something we invented.


00:21:21.340 --> 00:21:22.820
- Oh, okay.


00:21:22.820 --> 00:21:24.540
This is interesting.


00:21:24.540 --> 00:21:26.820
Is this something people can use?


00:21:26.820 --> 00:21:28.020
- Oh, yes, we actually,


00:21:28.020 --> 00:21:31.100
so Cint was the original interpreter


00:21:31.100 --> 00:21:33.700
and then it got replaced by Cling,


00:21:33.700 --> 00:21:35.700
which is built on the LLVM.


00:21:35.700 --> 00:21:39.700
And I think recently it was merged to mainline LLVM


00:21:39.700 --> 00:21:43.740
as Clang-Ripple, I think it's called.


00:21:43.740 --> 00:21:46.700
It's sort of a lightweight version.


00:21:46.700 --> 00:21:49.140
Yeah, it's a C++ interpreter.


00:21:49.140 --> 00:21:50.740
You can actually get Zeus-Cling,


00:21:50.740 --> 00:21:56.260
which I think Quantstack does,


00:21:56.260 --> 00:22:00.100
but they package it as well, I think, Zeus-Cling.


00:22:00.100 --> 00:22:02.060
- Okay, yeah, very interesting.


00:22:02.060 --> 00:22:04.700
- It's not, C++ really wasn't designed


00:22:04.700 --> 00:22:09.460
friend notebook though. It does work. But you can't rerun a cell


00:22:09.460 --> 00:22:13.580
often because of the you can't redefine things. Python is just


00:22:13.580 --> 00:22:15.860
really natural in a notebook and C++ is not.


00:22:15.860 --> 00:22:19.460
Right. Yeah, especially if you change the type you compile it


00:22:19.460 --> 00:22:21.140
as an int and then you're like, Oh, that should be a string.


00:22:21.140 --> 00:22:25.620
Like, yeah, that's not gonna be a string. It's compiled. Yeah,


00:22:25.620 --> 00:22:30.460
interesting. So it seems to me like the community at CERN has


00:22:30.460 --> 00:22:33.220
decided, look, we need some low level stuff. And there's some


00:22:33.220 --> 00:22:36.080
crazy low level things that happen over there.


00:22:36.080 --> 00:22:37.920
People can check out a video,


00:22:37.920 --> 00:22:39.980
maybe I'll mention a little bit later.


00:22:39.980 --> 00:22:44.180
But for that use, they've sort of gravitated towards C.


00:22:44.180 --> 00:22:46.320
And then for the other aspects,


00:22:46.320 --> 00:22:49.240
it sounds like Python is what everyone agreed to.


00:22:49.240 --> 00:22:50.760
It's like, hey, we want to visualize this.


00:22:50.760 --> 00:22:52.180
We want to do some notebook stuff.


00:22:52.180 --> 00:22:56.120
We want to piece things together, something like that, right?


00:22:56.120 --> 00:22:59.960
- It's certainly moving that way.


00:22:59.960 --> 00:23:01.560
They definitely have sort of agreed


00:23:01.560 --> 00:23:05.400
that Python should be a first class language


00:23:05.400 --> 00:23:06.520
and join C++.


00:23:06.520 --> 00:23:09.080
That was decided a few years ago.


00:23:09.080 --> 00:23:12.400
And I think that's been a great step in the right direction.


00:23:12.400 --> 00:23:13.860
Because what was happening, people


00:23:13.860 --> 00:23:15.600
were coming in with Python knowledge.


00:23:15.600 --> 00:23:16.840
They wanted to use Pandas.


00:23:16.840 --> 00:23:19.520
And I came in that way as well.


00:23:19.520 --> 00:23:21.720
Pandas and Numba and all these tools


00:23:21.720 --> 00:23:23.360
were really, really nice.


00:23:23.360 --> 00:23:25.360
And we were basically just having


00:23:25.360 --> 00:23:28.080
to write them all ourselves in C++.


00:23:28.080 --> 00:23:29.040
It has a data frame.


00:23:29.040 --> 00:23:34.040
but why not just use Python,


00:23:34.040 --> 00:23:36.600
which is what people know anyway.


00:23:36.600 --> 00:23:39.680
- Panda exists, there's a ton of people already doing this,


00:23:39.680 --> 00:23:41.280
the work maintaining it for us.


00:23:41.280 --> 00:23:44.580
- It literally has a stream class.


00:23:44.580 --> 00:23:46.960
- Yeah, okay.


00:23:46.960 --> 00:23:48.640
- Literally, they do everything.


00:23:48.640 --> 00:23:52.120
So, sort of the idea,


00:23:52.120 --> 00:23:54.580
and this is sort of the idea behind scikit-hep,


00:23:54.580 --> 00:23:58.880
was to build this collection of packages


00:23:58.880 --> 00:24:00.520
that would just fill in the missing pieces,


00:24:00.520 --> 00:24:03.280
the things that high energy physicists were used to


00:24:03.280 --> 00:24:06.600
and needed, and some of them are general


00:24:06.600 --> 00:24:09.320
and were just gaps in the data science ecosystem,


00:24:09.320 --> 00:24:12.260
and some things are very specific to high energy physics.


00:24:12.260 --> 00:24:17.440
So PsyConHEP actually sort of originated


00:24:17.440 --> 00:24:18.880
as a single package.


00:24:18.880 --> 00:24:23.480
It sort of looked like root red at first,


00:24:23.480 --> 00:24:26.560
and it was invented by someone called Eduardo Rodriguez,


00:24:26.560 --> 00:24:28.500
who was actually in my office at CERN,


00:24:28.500 --> 00:24:31.200
and we're office mates.


00:24:31.200 --> 00:24:33.400
And, but he did something I think really brilliant


00:24:33.400 --> 00:24:34.240
when he did this,


00:24:34.240 --> 00:24:35.960
and that is he created an organization


00:24:35.960 --> 00:24:37.760
called Scikit-Hep around it,


00:24:37.760 --> 00:24:40.200
and then he went out and spoke with people


00:24:40.200 --> 00:24:42.060
and got some of the other Python packages


00:24:42.060 --> 00:24:45.080
that existed at the time to join Scikit-Hep,


00:24:45.080 --> 00:24:46.720
moved them over and started building


00:24:46.720 --> 00:24:49.100
sort of a collection of some of the most popular


00:24:49.100 --> 00:24:51.240
Python packages at the time.


00:24:51.240 --> 00:24:53.440
And I thought that was great.


00:24:53.440 --> 00:24:56.720
And I really wanted scikit-hep to become a collection


00:24:56.720 --> 00:24:59.560
of tools, separate tools, and for the scikit-hep package


00:24:59.560 --> 00:25:01.760
to just be sort of a meta package


00:25:01.760 --> 00:25:03.480
that just grabbed all the rest.


00:25:03.480 --> 00:25:06.040
And that's actually kind of where it is now.


00:25:06.040 --> 00:25:09.300
- Right, I can pip install scikit-hep, is that right?


00:25:09.300 --> 00:25:11.660
- You can, and mostly, other than a few little things


00:25:11.660 --> 00:25:14.280
that are still in there that never got pulled out,


00:25:14.280 --> 00:25:16.880
that will mostly just install our most popular,


00:25:16.880 --> 00:25:19.240
maybe 15 or so packages,


00:25:19.240 --> 00:25:21.720
2015 of our most popular packages.


00:25:21.720 --> 00:25:24.380
- Yeah, so it probably doesn't really do anything


00:25:24.380 --> 00:25:26.960
other than say it depends on those packages


00:25:26.960 --> 00:25:28.360
or something like that, right?


00:25:28.360 --> 00:25:31.600
And then by virtue of installing it, it'll grab it.


00:25:31.600 --> 00:25:33.000
Yeah.


00:25:33.000 --> 00:25:35.040
Yeah, that's a really cool idea and I like it.


00:25:35.040 --> 00:25:37.800
So maybe one of the things I thought would be fun


00:25:37.800 --> 00:25:40.640
is to go through some of the packages there


00:25:40.640 --> 00:25:43.400
to give people a sense of what's in here.


00:25:43.400 --> 00:25:45.320
Some of these are pretty particular


00:25:45.320 --> 00:25:48.640
and I don't think would find broad use outside of CERN.


00:25:48.640 --> 00:25:51.160
For example, conda forge root.


00:25:51.160 --> 00:25:54.000
It sounds like that's about building root


00:25:54.000 --> 00:25:55.700
so I can install it as a dependency


00:25:55.700 --> 00:25:57.120
or something like that, right?


00:25:57.120 --> 00:25:58.680
- Yeah, building root is horrible.


00:25:58.680 --> 00:26:03.480
And you actually now can get it as part of a conda package,


00:26:03.480 --> 00:26:07.320
which is just way better than anything that was available


00:26:07.320 --> 00:26:09.600
for attaching to a specific version of Python


00:26:09.600 --> 00:26:11.880
'cause it has to compile against


00:26:11.880 --> 00:26:14.240
a very specific version of Python.


00:26:14.240 --> 00:26:15.680
But that's what it does.


00:26:15.680 --> 00:26:18.320
So unless you want something in root,


00:26:18.320 --> 00:26:21.080
then that's very HEP-specific.


00:26:21.080 --> 00:26:25.160
Some of the more general ones, probably our first--


00:26:25.160 --> 00:26:27.120
briefly mention our very first package


00:26:27.120 --> 00:26:30.280
that I think was really popular among high-energy physicists


00:26:30.280 --> 00:26:36.360
that we actually produced was uproot,


00:26:36.360 --> 00:26:39.440
which was just a pure Python package,


00:26:39.440 --> 00:26:42.640
so you didn't have to install it, that read root files.


00:26:42.640 --> 00:26:44.860
So again, very specific for somebody


00:26:44.860 --> 00:26:48.580
who was in high energy physics,


00:26:48.580 --> 00:26:51.460
but you could actually read a root file


00:26:51.460 --> 00:26:53.740
and get your data without installing a root.


00:26:53.740 --> 00:26:56.020
And that was a game changer.


00:26:56.020 --> 00:26:59.060
And now you can actually install root slightly easier,


00:26:59.060 --> 00:27:00.860
but normally it's a multi-hour compile


00:27:00.860 --> 00:27:04.380
and it's gotten better,


00:27:04.380 --> 00:27:06.120
but it's still a bit of a beast to compile,


00:27:06.120 --> 00:27:06.960
especially for Python.


00:27:06.960 --> 00:27:07.940
- That does sound like a beast.


00:27:07.940 --> 00:27:08.780
Oh my gosh.


00:27:08.780 --> 00:27:10.300
- And now you can just read in your files.


00:27:10.300 --> 00:27:14.220
Basically, Jim Pofarski basically just taught Python


00:27:14.220 --> 00:27:19.180
to understand the decompiler root file structure.


00:27:19.180 --> 00:27:20.580
And actually can write it right now too,


00:27:20.580 --> 00:27:22.460
but originally reading.


00:27:22.460 --> 00:27:23.300
But that actually was really--


00:27:23.300 --> 00:27:25.360
- So this is like if I wanna do,


00:27:25.360 --> 00:27:27.640
if I wanna create a notebook


00:27:27.640 --> 00:27:29.100
and maybe visualize some of the data,


00:27:29.100 --> 00:27:31.340
but I don't really need access to anything else,


00:27:31.340 --> 00:27:33.460
I shouldn't depend on this beast


00:27:33.460 --> 00:27:38.180
of almost its own operating system type of thing, right?


00:27:38.180 --> 00:27:39.700
- We're very close to being able to use


00:27:39.700 --> 00:27:41.540
all the data science tools in Python,


00:27:41.540 --> 00:27:43.260
pandas, things like that.


00:27:43.260 --> 00:27:45.880
for most data worked fine.


00:27:45.880 --> 00:27:47.820
You just had to get the data.


00:27:47.820 --> 00:27:50.300
And I mean, I've done this too,


00:27:50.300 --> 00:27:54.420
where I had one special install of Python and root together


00:27:54.420 --> 00:27:56.880
that I'd worked several hours on and it sat somewhere


00:27:56.880 --> 00:27:58.260
and I would convert data with it,


00:27:58.260 --> 00:28:00.180
I'd move it to HDF5.


00:28:00.180 --> 00:28:03.980
And then I would do all the rest of the analysis in Python


00:28:03.980 --> 00:28:05.420
that didn't have root because then I could do--


00:28:05.420 --> 00:28:06.820
- And then there's Python libraries


00:28:06.820 --> 00:28:09.660
that read that HDF5 format, right?


00:28:09.660 --> 00:28:11.500
- Yeah. - Right, okay.


00:28:11.500 --> 00:28:15.220
The first package we had that was really popular on its own


00:28:15.220 --> 00:28:17.120
was awkward array.


00:28:17.120 --> 00:28:17.960
- Yeah, awkward arrays.


00:28:17.960 --> 00:28:18.780
- Awkward array was originally--


00:28:18.780 --> 00:28:21.260
- I've definitely heard about this one, yeah.


00:28:21.260 --> 00:28:23.260
- Yeah, that was originally part of UPROOT,


00:28:23.260 --> 00:28:24.580
sort of grew out of UPROOT,


00:28:24.580 --> 00:28:25.880
but when you're reading root files,


00:28:25.880 --> 00:28:28.700
you end up with these jagged arrays.


00:28:28.700 --> 00:28:32.980
So that's an array that is not rectangular.


00:28:32.980 --> 00:28:35.540
So at least one dimension is jagged,


00:28:35.540 --> 00:28:37.060
it depends on the data.


00:28:37.060 --> 00:28:39.860
And this shows up in all sorts of places,


00:28:39.860 --> 00:28:41.560
not just particle collisions.


00:28:41.560 --> 00:28:43.260
Or obviously, it shows up lots of places


00:28:43.260 --> 00:28:44.220
in particle collisions.


00:28:44.220 --> 00:28:46.300
How many hits got triggered in the detector?


00:28:46.300 --> 00:28:47.580
That's a variable length list.


00:28:47.580 --> 00:28:49.180
How many tracks are in an event?


00:28:49.180 --> 00:28:50.500
That's a variable length list.


00:28:50.500 --> 00:28:54.320
And it can be a variable length list of structured data.


00:28:54.320 --> 00:28:58.900
And to store that compactly the same way you would use NumPy


00:28:58.900 --> 00:29:01.500
was one thing.


00:29:01.500 --> 00:29:04.700
But you can-- arrow, and there's some other things that do this.


00:29:04.700 --> 00:29:09.140
But Awkward Array also gives you NumPy-like indexing


00:29:09.140 --> 00:29:11.260
and data manipulation.


00:29:11.260 --> 00:29:14.380
And that was the breakthrough thing here.


00:29:14.380 --> 00:29:15.940
It's like NumPy.


00:29:15.940 --> 00:29:17.860
The original one was built on top of NumPy.


00:29:17.860 --> 00:29:22.340
The new one actually has some PyBind11 compiled bits


00:29:22.340 --> 00:29:23.500
and pieces.


00:29:23.500 --> 00:29:27.740
But it makes working with that really well.


00:29:27.740 --> 00:29:32.700
In fact, Jim Pofarski has now got a grant to expand this to--


00:29:32.700 --> 00:29:34.940
I don't remember the number of different disciplines


00:29:34.940 --> 00:29:37.780
that he's working with, but lots of different areas, genomics


00:29:37.780 --> 00:29:40.680
and things like that have all have use cases


00:29:40.680 --> 00:29:43.700
and he's adding things like complex numbers


00:29:43.700 --> 00:29:45.660
and things that weren't originally needed


00:29:45.660 --> 00:29:48.180
by HydroGPhysicists, but make it widely used.


00:29:48.180 --> 00:29:52.680
- Almost an evangelism, like dev evangelism type of role,


00:29:52.680 --> 00:29:55.220
right, go talk to the other groups and say,


00:29:55.220 --> 00:29:57.920
hey, we think you should be using this.


00:29:57.920 --> 00:29:59.780
What is it missing for you to really love it?


00:29:59.780 --> 00:30:01.140
Something like that, right?


00:30:01.140 --> 00:30:03.460
How interesting.


00:30:05.540 --> 00:30:10.100
Yeah, yeah, so looking at the awkward array page here,


00:30:10.100 --> 00:30:12.020
says for a similar problem,


00:30:12.020 --> 00:30:14.680
two million times larger than this example given above,


00:30:14.680 --> 00:30:17.140
which one above is not totally simple.


00:30:17.140 --> 00:30:18.400
So that's pretty crazy.


00:30:18.400 --> 00:30:20.780
It says awkward array,


00:30:20.780 --> 00:30:24.600
the one-liner takes 4.6 seconds to run


00:30:24.600 --> 00:30:26.340
and uses two gigs of memory.


00:30:26.340 --> 00:30:28.320
The equivalent Python list in dictionaries


00:30:28.320 --> 00:30:31.040
takes over two minutes


00:30:31.040 --> 00:30:33.980
and uses 10 times as much memory, 22 gigs.


00:30:33.980 --> 00:30:37.480
So yeah, that's a pretty appealing value proposition there.


00:30:37.480 --> 00:30:40.320
Yeah, and it supports Numba.


00:30:40.320 --> 00:30:43.520
Jim has been very, works very closely with the Numba team,


00:30:43.520 --> 00:30:47.360
and really is one of the experts on the Numba internals.


00:30:47.360 --> 00:30:51.800
So, you know, it has full Numba support now,


00:30:51.800 --> 00:30:53.800
and he's working on adding Dask.


00:30:53.800 --> 00:30:56.060
He's working with Anaconda on this grant,


00:30:56.060 --> 00:31:00.600
and then working with adding GPU support.


00:31:00.600 --> 00:31:02.400
Very cool.


00:31:02.400 --> 00:31:04.400
Maybe not everyone out there knows what Numba is.


00:31:04.400 --> 00:31:08.240
Maybe give us a quick elevator pitch on Numba.


00:31:08.240 --> 00:31:10.880
I hear it makes Python code fast, right?


00:31:10.880 --> 00:31:14.480
Yeah, it's a just-in-time compiler.


00:31:14.480 --> 00:31:17.600
And it takes Python.


00:31:17.600 --> 00:31:19.360
It actually takes the bytecode.


00:31:19.360 --> 00:31:26.320
And then it basically takes that back to something--


00:31:26.320 --> 00:31:30.040
or it parses the bytecode and turns it into LLVM.


00:31:30.040 --> 00:31:33.520
So it works a lot like Julia, except instead of a new language,


00:31:33.520 --> 00:31:38.240
it's actually reading Python bytecode, which is challenging because the Python


00:31:38.240 --> 00:31:43.240
bytecode is not something that stays static or supposed to be a public detail.


00:31:43.240 --> 00:31:50.800
- Yeah, there's no public promises about consistency of bytecode across versions


00:31:50.800 --> 00:31:54.880
because they play with that all the time to try to speed up things and add bytecodes


00:31:54.880 --> 00:31:56.760
and they try to do little optimizations.


00:31:56.760 --> 00:31:57.260
and--


00:31:57.260 --> 00:31:57.760
Yeah.


00:31:57.760 --> 00:31:59.340
So every Python release breaks Numbus.


00:31:59.340 --> 00:32:00.240
So they have to--


00:32:00.240 --> 00:32:02.500
they just know the next Python release will not support


00:32:02.500 --> 00:32:05.600
Number, and it usually takes a month or two.


00:32:05.600 --> 00:32:06.120
OK.


00:32:06.120 --> 00:32:06.620
All right.


00:32:06.620 --> 00:32:07.720
So-- yeah, go ahead.


00:32:07.720 --> 00:32:08.960
It's very impressive, though.


00:32:08.960 --> 00:32:09.920
It's the speedups.


00:32:09.920 --> 00:32:13.880
You do get full C-type speedups for something


00:32:13.880 --> 00:32:15.720
that looks just like Python.


00:32:15.720 --> 00:32:18.680
It compiles really fast for a small problem.


00:32:18.680 --> 00:32:24.240
And it's as fast as anything else you can do.


00:32:24.240 --> 00:32:27.720
I've tried lots of these various programming problems


00:32:27.720 --> 00:32:29.680
and you just about can't beat them,


00:32:29.680 --> 00:32:32.040
but it actually knows what your architecture is


00:32:32.040 --> 00:32:33.360
since it's just in time compiling.


00:32:33.360 --> 00:32:35.840
So you have to do all sorts of things.


00:32:35.840 --> 00:32:37.860
- Which is an advantage over, say, like C, right?


00:32:37.860 --> 00:32:41.160
It can look exactly at what your platform is


00:32:41.160 --> 00:32:42.480
and your machine architecture and say,


00:32:42.480 --> 00:32:43.960
we're going to target, you know,


00:32:43.960 --> 00:32:47.480
I see your CPU supports this special vectorized thing


00:32:47.480 --> 00:32:49.840
or whatever, and it's going to build that in, right?


00:32:49.840 --> 00:32:52.320
- Yeah.


00:32:52.320 --> 00:32:54.000
And then what sort of Jim does with Awkward,


00:32:54.000 --> 00:32:56.800
and we've done with some other things with vector does this too.


00:32:56.800 --> 00:33:02.920
You can control what Python turns into what LLVM constructs


00:33:02.920 --> 00:33:06.800
any Python turns into, because you can control that compile phase.


00:33:06.800 --> 00:33:10.080
That's incredibly powerful, because you can say,


00:33:10.080 --> 00:33:11.600
and it doesn't have to be the same thing,


00:33:11.600 --> 00:33:14.280
but obviously you want it to behave the same way,


00:33:14.280 --> 00:33:18.080
but you'd say, if you see this structure, this is what it turns into.


00:33:18.080 --> 00:33:22.940
in LLVM machine code, which then gets compiled,


00:33:22.940 --> 00:33:25.740
or machine language then gets compiled into your native


00:33:25.740 --> 00:33:27.980
machine language.


00:33:27.980 --> 00:33:31.080
Interesting. So if you have like a certain data structure


00:33:31.080 --> 00:33:33.240
that you know can be well represented


00:33:33.240 --> 00:33:36.440
or gets packed up in a certain way to be super efficient,


00:33:36.440 --> 00:33:38.440
you can control that?


00:33:38.440 --> 00:33:40.940
Yeah, you can say that,


00:33:40.940 --> 00:33:45.040
well, this operation on this data structure, this is what it should do.


00:33:45.040 --> 00:33:48.640
And then that turns into LLVM and maybe it can get vectorized


00:33:48.640 --> 00:33:50.760
or things like that for you.


00:33:50.760 --> 00:33:51.440
Yeah.


00:33:51.440 --> 00:33:52.160
Yeah.


00:33:52.160 --> 00:33:54.000
That's super neat.


00:33:54.000 --> 00:33:56.360
Another package in the list that I got to talk about,


00:33:56.360 --> 00:33:59.400
because just the name and the graphic is fantastic,


00:33:59.400 --> 00:34:00.440
is a gas.


00:34:00.440 --> 00:34:01.400
What is a gas?


00:34:01.400 --> 00:34:02.880
It's got like this--


00:34:02.880 --> 00:34:03.760
the scream.


00:34:03.760 --> 00:34:06.040
I forgot who was the artist of that.


00:34:06.040 --> 00:34:10.840
But the scream sort of look as part of the logo is good.


00:34:10.840 --> 00:34:14.080
About half of the logos come from Jim.


00:34:14.080 --> 00:34:16.280
And I did about half, and he did about half,


00:34:16.280 --> 00:34:17.960
and then a few other around


00:34:17.960 --> 00:34:20.000
or from the individual Akitakes.


00:34:20.000 --> 00:34:23.240
Aghast was, so this is sort of part of the histogramming


00:34:23.240 --> 00:34:25.320
area, which is where, sort of the area I work in,


00:34:25.320 --> 00:34:28.480
Scikit-Hep, but Jim actually wrote Aghast,


00:34:28.480 --> 00:34:30.000
and the idea was that it would convert


00:34:30.000 --> 00:34:32.320
between histogram representations.


00:34:32.320 --> 00:34:34.320
I think it came up because Jim got tired


00:34:34.320 --> 00:34:35.520
of writing histogram libraries.


00:34:35.520 --> 00:34:38.040
I think he's written at least five.


00:34:38.040 --> 00:34:40.960
- Yeah, one of the things I got the sense of


00:34:40.960 --> 00:34:43.420
by looking through all the Scikit-Hep stuff,


00:34:43.420 --> 00:34:47.060
There's a lot of histogram stuff happening over there.


00:34:47.060 --> 00:34:49.900
Yes, so histograms is sort of the area that I was in,


00:34:49.900 --> 00:34:53.260
and it ended up coming in in several pieces.


00:34:53.260 --> 00:34:55.460
But I think one of the important things was actually--


00:34:55.460 --> 00:34:57.940
and I think Aghast may not really matter,


00:34:57.940 --> 00:34:59.700
may get archived at some point.


00:34:59.700 --> 00:35:03.540
Because instead of translating between different


00:35:03.540 --> 00:35:07.380
representations of histograms in memory, what you can do


00:35:07.380 --> 00:35:09.940
is define a static typing protocol.


00:35:09.940 --> 00:35:13.440
and it can be checked by mypy,


00:35:13.440 --> 00:35:19.320
that describes what an object needs to be called a histogram.


00:35:19.320 --> 00:35:21.520
And so I've defined that as a package called UHI,


00:35:21.520 --> 00:35:23.760
Universal Histogram Interface.


00:35:23.760 --> 00:35:25.720
And anything that implements UHI,


00:35:25.720 --> 00:35:29.620
it can be fully checked by mypy, will then


00:35:29.620 --> 00:35:36.080
be able to take any object from any library that implements UHI.


00:35:36.080 --> 00:35:39.600
And so all the libraries we have that produce histograms,


00:35:39.600 --> 00:35:41.600
So uproot, when it reads a root histogram,


00:35:41.600 --> 00:35:43.920
or hist, hist and boost histogram,


00:35:43.920 --> 00:35:45.980
when they produce histograms,


00:35:45.980 --> 00:35:47.460
they don't need to depend on each other.


00:35:47.460 --> 00:35:48.720
They don't even depend on UHI.


00:35:48.720 --> 00:35:52.720
That's just a static dependency for IPy time.


00:35:52.720 --> 00:35:56.960
And then they can be plotted in, in MPLHEP,


00:35:56.960 --> 00:36:00.500
or they can be printed to the terminal with histoprint,


00:36:00.500 --> 00:36:03.920
and there's no dependencies there.


00:36:03.920 --> 00:36:05.420
One doesn't need the other.


00:36:05.420 --> 00:36:06.340
- Yeah.


00:36:06.340 --> 00:36:09.440
- And that's sort of making a guest somewhat


00:36:09.440 --> 00:36:11.680
unneeded because now it really doesn't matter.


00:36:11.680 --> 00:36:13.000
You don't have to convert between two


00:36:13.000 --> 00:36:15.560
because they both just work.


00:36:15.560 --> 00:36:18.160
- They work on the same underlying structure,


00:36:18.160 --> 00:36:19.400
basically, right?


00:36:19.400 --> 00:36:22.240
- They work through the same interface.


00:36:22.240 --> 00:36:23.320
- Right.


00:36:23.320 --> 00:36:25.780
Yeah, so a GAST is a way to work


00:36:25.780 --> 00:36:28.280
with different histogramming libraries


00:36:28.280 --> 00:36:31.600
that kind of is the intermediary of that,


00:36:31.600 --> 00:36:33.600
to the abstraction layer on that.


00:36:33.600 --> 00:36:34.440
Okay.


00:36:34.440 --> 00:36:35.280
What are some other ones?


00:36:35.280 --> 00:36:36.440
- Aggregated.


00:36:36.440 --> 00:36:37.280
- Yeah.


00:36:37.280 --> 00:36:39.320
What are some other ones we should kind of give a shout out to?


00:36:39.320 --> 00:36:42.560
We talked about Goofit, which is their--


00:36:42.560 --> 00:36:43.720
- That's an affiliated package.


00:36:43.720 --> 00:36:45.560
It's not part of scikit-hep, but it has.


00:36:45.560 --> 00:36:48.600
So we developed this idea of an affiliated package,


00:36:48.600 --> 00:36:51.100
which were things that didn't need to be moved in,


00:36:51.100 --> 00:36:54.640
but had at least one scikit-hep developer


00:36:54.640 --> 00:36:57.360
working with them.


00:36:57.360 --> 00:36:59.000
Or at least that's my definition.


00:36:59.000 --> 00:37:00.600
I was never able to actually get the rest


00:37:00.600 --> 00:37:02.340
to agree to exactly that definition,


00:37:02.340 --> 00:37:04.920
but that's my working definition.


00:37:04.920 --> 00:37:07.200
And so that's why PyBind11 gets listed there.


00:37:07.200 --> 00:37:11.080
it's a affiliated package because we share a developer,


00:37:11.080 --> 00:37:14.200
me, with the PyBind11 library.


00:37:14.200 --> 00:37:17.920
And we sort of have a say in that


00:37:17.920 --> 00:37:19.680
and how that is developed.


00:37:19.680 --> 00:37:20.960
And most importantly,


00:37:20.960 --> 00:37:22.760
if we have somebody come into scikit-hep,


00:37:22.760 --> 00:37:25.120
we want them to use PyBind11 over the other tools


00:37:25.120 --> 00:37:28.220
because that one we have a lot of experience with.


00:37:28.220 --> 00:37:31.240
- Very cool.


00:37:31.240 --> 00:37:33.740
Another one I thought was interesting is hep units.


00:37:34.720 --> 00:37:37.720
So this idea of representing units like, you know,


00:37:37.720 --> 00:37:40.600
the standard units, they're not enough for us.


00:37:40.600 --> 00:37:45.120
We have our own kind of things like molarity and stuff,


00:37:45.120 --> 00:37:49.940
but also luminosity and other stuff, right?


00:37:49.940 --> 00:37:53.960
- Yeah, different experience can differ a bit.


00:37:53.960 --> 00:37:55.440
So there's a sort of a standard


00:37:55.440 --> 00:37:57.780
that got built up for units.


00:37:57.780 --> 00:38:00.160
And so this just sort of puts that together


00:38:00.160 --> 00:38:04.500
and has, and the unit that we've sort of decided on,


00:38:04.500 --> 00:38:05.920
this should be the standard unit.


00:38:05.920 --> 00:38:08.120
That's one, and the rest are different scalars.


00:38:08.120 --> 00:38:09.720
So it's a very tiny little library.


00:38:09.720 --> 00:38:11.840
It was the first one to be fully statically typed,


00:38:11.840 --> 00:38:13.480
because it was tiny.


00:38:13.480 --> 00:38:15.280
- That's easy to do.


00:38:15.280 --> 00:38:16.880
- Because myPy and first constants,


00:38:16.880 --> 00:38:18.840
there was like two functions or something,


00:38:18.840 --> 00:38:19.960
and then it was done.


00:38:19.960 --> 00:38:22.000
- Yeah, probably a lot of floats.


00:38:22.000 --> 00:38:27.520
- But that's sort of what it is.


00:38:27.520 --> 00:38:28.800
So you can use that,


00:38:28.800 --> 00:38:30.640
and the idea is that the rest of the libraries


00:38:30.640 --> 00:38:34.480
will adhere to that system of units.


00:38:34.480 --> 00:38:39.160
So then if you use this and then use the values it gives you,


00:38:39.160 --> 00:38:43.520
then you can have a nice human readable units


00:38:43.520 --> 00:38:44.960
and be sure of your units.


00:38:44.960 --> 00:38:46.560
- Yeah, that's really neat.


00:38:46.560 --> 00:38:48.120
Have you heard of Pint?


00:38:48.120 --> 00:38:48.960
Are you familiar with this one?


00:38:48.960 --> 00:38:50.640
- Yes, I love Pint.


00:38:50.640 --> 00:38:51.480
- Oh, I think Pint is interesting as well.


00:38:51.480 --> 00:38:54.400
- Pint actually takes the types through


00:38:54.400 --> 00:38:56.120
and I use Pint some.


00:38:56.120 --> 00:38:59.560
But it actually gives you a quantity out,


00:38:59.560 --> 00:39:02.180
or a numpy quantity.


00:39:02.180 --> 00:39:05.680
Whereas the happiness just stays out of the way


00:39:05.680 --> 00:39:08.320
and it's a way to be more clear in your code,


00:39:08.320 --> 00:39:09.400
but it's not enforced.


00:39:09.400 --> 00:39:11.840
Pint is enforced, which I like enforcing,


00:39:11.840 --> 00:39:13.440
but it also can slow down.


00:39:13.440 --> 00:39:15.760
You can't, these are not actual real numbers anymore.


00:39:15.760 --> 00:39:16.880
So you pay--


00:39:16.880 --> 00:39:18.720
- Yeah, so it's gonna add a ton of overhead, right?


00:39:18.720 --> 00:39:20.220
But Pint's interesting 'cause you can do things


00:39:20.220 --> 00:39:24.400
like three times meter plus four times centimeter,


00:39:24.400 --> 00:39:27.120
and you end up with 3.04 meters.


00:39:27.120 --> 00:39:28.600
- Yeah, 'cause those are actual real quantities.


00:39:28.600 --> 00:39:30.400
They're actually a different object,


00:39:30.400 --> 00:39:32.920
which is the good thing about it,


00:39:32.920 --> 00:39:34.720
but it's also the reason that then it's not gonna talk


00:39:34.720 --> 00:39:37.560
to, say, a C library that expects a regular number


00:39:37.560 --> 00:39:39.440
or something as well. - Sure.


00:39:39.440 --> 00:39:43.400
Sure, okay, maybe one or two more,


00:39:43.400 --> 00:39:45.520
and then we'll probably be out of time for these.


00:39:45.520 --> 00:39:47.520
But what else do people maybe pay attention to


00:39:47.520 --> 00:39:50.440
that they could generally find useful over here?


00:39:50.440 --> 00:39:51.960
- You can mention vector, it's a little bit newer,


00:39:51.960 --> 00:39:57.080
but it's certainly for general physics, I think it's useful,


00:39:57.080 --> 00:40:02.840
because it's a library for 2D, 3D, and relativistic vectors.


00:40:02.840 --> 00:40:04.360
And there aren't really--


00:40:04.360 --> 00:40:07.920
it's a very common sort of learning example you see,


00:40:07.920 --> 00:40:10.280
but there aren't really very many libraries that do this,


00:40:10.280 --> 00:40:11.840
that actually have--


00:40:11.840 --> 00:40:15.040
if you want to take the magnitude of a vector in 3D


00:40:15.040 --> 00:40:18.400
space, there just isn't a nice library for that.


00:40:18.400 --> 00:40:20.540
So we wrote Vector to do that.


00:40:20.540 --> 00:40:23.860
And Vector is supported by Awkward.


00:40:23.860 --> 00:40:24.900
It has an Awkward backend.


00:40:24.900 --> 00:40:29.660
It has a NumBy backend and then PlainObject backend.


00:40:29.660 --> 00:40:31.340
And eventually, we might work on more.


00:40:31.340 --> 00:40:32.700
And it even has a NumBy Awkward.


00:40:32.700 --> 00:40:37.860
So you can use a vector inside an Awkward array,


00:40:37.860 --> 00:40:39.860
inside a NumBy JIT compiled loop,


00:40:39.860 --> 00:40:43.140
and still take magnitudes and do stuff like that.


00:40:43.140 --> 00:40:45.420
That's really cool, that integration there.


00:40:45.420 --> 00:40:46.980
Yeah.


00:40:46.980 --> 00:40:49.180
Because we have a lot of those in physics.


00:40:49.180 --> 00:40:49.740
Sure.


00:40:49.740 --> 00:40:53.040
And you can do things like ask if one vector is


00:40:53.040 --> 00:40:55.380
close to another vector and things like that,


00:40:55.380 --> 00:40:56.860
even in different--


00:40:56.860 --> 00:41:00.980
it looks like one in polar coordinates and one in Cartesian


00:41:00.980 --> 00:41:02.140
or something like that.


00:41:02.140 --> 00:41:03.600
>>It has different unit systems.


00:41:03.600 --> 00:41:05.560
And it can actually--


00:41:05.560 --> 00:41:07.140
it actually stores the vector in that.


00:41:07.140 --> 00:41:08.980
So you don't waste memory or something


00:41:08.980 --> 00:41:11.380
if that's the representation you have.


00:41:11.380 --> 00:41:13.180
That was a feature from Root that we


00:41:13.180 --> 00:41:15.060
wanted to make sure we got.


00:41:15.060 --> 00:41:17.620
And it also has the idea of momentums, too,


00:41:17.620 --> 00:41:20.420
and stuff for the relativistic stuff.


00:41:20.420 --> 00:41:21.260
- Yeah.


00:41:21.260 --> 00:41:22.300
- End up with a lot of that.


00:41:22.300 --> 00:41:25.540
- So, yeah, go ahead.


00:41:25.540 --> 00:41:28.380
- And then maybe just mention the,


00:41:28.380 --> 00:41:30.180
since we mentioned the histogramming stuff


00:41:30.180 --> 00:41:33.180
and that's the area, that's the ones that I really work on.


00:41:33.180 --> 00:41:36.300
The ones I specifically work on that are general purpose.


00:41:36.300 --> 00:41:37.860
Boost histogram is a wrapper


00:41:37.860 --> 00:41:40.740
for the C++ boost histogram library.


00:41:40.740 --> 00:41:41.560
- Okay.


00:41:41.560 --> 00:41:45.040
- Boost is the sort of the big C++ library,


00:41:45.040 --> 00:41:48.120
just one step below the standard library.


00:41:48.120 --> 00:41:52.020
And right at the time I was starting at Princeton,


00:41:52.020 --> 00:41:55.720
I met the author of Boost's histogram,


00:41:55.720 --> 00:41:57.120
who's from physics.


00:41:57.120 --> 00:42:00.320
And he was in the process, I believe,


00:42:00.320 --> 00:42:02.000
of getting this accepted into Boost.


00:42:02.000 --> 00:42:03.860
And it got accepted after that.


00:42:03.860 --> 00:42:06.480
But one of the things that he decided to do


00:42:06.480 --> 00:42:08.440
was pull out his initial Python bindings


00:42:08.440 --> 00:42:12.660
that were written in Boost Python,


00:42:12.660 --> 00:42:15.260
which is actually very similar to PyBind11,


00:42:15.260 --> 00:42:18.580
but requires Boost instead of not requiring anything.


00:42:18.580 --> 00:42:21.260
But the design is intentionally very similar.


00:42:21.260 --> 00:42:26.140
And so I proposed I would work on Boost Histogram


00:42:26.140 --> 00:42:31.340
and write these Python bindings for it inside scikit-hep.


00:42:31.340 --> 00:42:33.060
And that would be sort of the main project


00:42:33.060 --> 00:42:35.820
I started on when I started at Princeton.


00:42:35.820 --> 00:42:38.780
And that's what I did.


00:42:38.780 --> 00:42:41.580
Boost Histogram is an extremely powerful histogramming


00:42:41.580 --> 00:42:42.220
library.


00:42:42.220 --> 00:42:44.680
So it's a histogram as an object rather than--


00:42:44.680 --> 00:42:46.980
like in NumPy, there's a histogram function,


00:42:46.980 --> 00:42:50.380
and you give it an array, and then it spits a couple of arrays


00:42:50.380 --> 00:42:55.380
back out at you that you now have to manage these.


00:42:55.380 --> 00:42:57.220
They don't have any special meaning.


00:42:57.220 --> 00:42:59.040
Whereas BoostHistogram, histograms really


00:42:59.040 --> 00:43:01.180
are much more natural as an object, just like a data frame


00:43:01.180 --> 00:43:03.660
is more natural as an object where you tie that information


00:43:03.660 --> 00:43:04.420
together.


00:43:04.420 --> 00:43:06.140
A histogram's really natural that way,


00:43:06.140 --> 00:43:08.480
where you still have the information about what the data


00:43:08.480 --> 00:43:10.020
actually was on the axes.


00:43:10.020 --> 00:43:15.320
If you have labels, you want to keep those attached to that data.


00:43:15.320 --> 00:43:18.720
And you may need to fill again, which is one of the main things that


00:43:18.720 --> 00:43:22.720
hydrophysicists really wanted because we tend to fill histograms and then keep filling them


00:43:22.720 --> 00:43:25.420
or rebinning them or doing operations on them.


00:43:25.420 --> 00:43:27.420
And you can do all those very naturally.


00:43:27.420 --> 00:43:32.020
And Boost Histograms, the actual C++ wrapper in PyBind 11,


00:43:32.020 --> 00:43:37.220
and I actually got involved in CI Buildable because of Boost Histogram


00:43:37.220 --> 00:43:39.860
because one of the things I wanted is make sure it worked everywhere.


00:43:39.860 --> 00:43:43.620
And it obviously requires C++, so it requires compilation.


00:43:43.620 --> 00:43:45.220
Yeah.


00:43:45.220 --> 00:43:47.220
And then HIST is a nice wrapper on top of that


00:43:47.220 --> 00:43:49.220
that just makes it a lot more friendly to use


00:43:49.220 --> 00:43:53.460
because the original Boost.js author wants to keep this, Hans Stavinsky,


00:43:53.460 --> 00:43:56.100
wants to keep this quite pure and clean.


00:43:56.100 --> 00:43:59.220
So HIST is more natural.


00:43:59.220 --> 00:44:02.180
And even if you're not in HEP, I think that's still the more natural one to use.


00:44:02.180 --> 00:44:03.220
Yeah.


00:44:03.220 --> 00:44:04.660
And those...


00:44:04.660 --> 00:44:05.620
Right, right.


00:44:05.620 --> 00:44:08.380
There's a lot of people who use histogram


00:44:08.380 --> 00:44:09.680
to cross all sorts of disciplines.


00:44:09.680 --> 00:44:11.620
So that would definitely be one of those


00:44:11.620 --> 00:44:13.300
that is generally useful.


00:44:13.300 --> 00:44:20.180
All right, so I think that brings us to CI build wheel.


00:44:20.180 --> 00:44:21.700
Let's talk a bit about that.


00:44:21.700 --> 00:44:25.260
And I mean, maybe the place to start here is


00:44:25.260 --> 00:44:28.360
you want our wheels, right?


00:44:28.360 --> 00:44:30.900
The first sentence describing it is


00:44:30.900 --> 00:44:31.820
Python wheels are great.


00:44:31.820 --> 00:44:33.340
Build them across Mac, Linux, Windows,


00:44:33.340 --> 00:44:35.540
and other multiple versions of Python.


00:44:35.540 --> 00:44:36.380
Not so much.


00:44:36.380 --> 00:44:37.260
So--


00:44:37.260 --> 00:44:38.780
- No description of what a wheel is.


00:44:38.780 --> 00:44:39.980
- Yeah, exactly.


00:44:39.980 --> 00:44:41.660
Well, wheels are good.


00:44:41.660 --> 00:44:44.500
There's times when there are no wheels


00:44:44.500 --> 00:44:46.260
and things install slower.


00:44:46.260 --> 00:44:48.340
They might not install at all.


00:44:48.340 --> 00:44:50.340
It's generally a bad thing if you don't have a wheel,


00:44:50.340 --> 00:44:54.160
but they're not easy to make, right?


00:44:54.160 --> 00:44:55.460
So tell us what is a wheel,


00:44:55.460 --> 00:44:57.120
and then let's talk about why maybe building them


00:44:57.120 --> 00:45:00.260
across all these platforms and this cross product


00:45:00.260 --> 00:45:03.800
along with like versions of Python and whatnot is a mess.


00:45:04.820 --> 00:45:06.980
- Yeah, so when you distribute Python,


00:45:06.980 --> 00:45:08.140
you have several options.


00:45:08.140 --> 00:45:10.060
The most common one and most packages


00:45:10.060 --> 00:45:11.660
have at least an sdist,


00:45:11.660 --> 00:45:15.460
which is just basically a tarball of the source.


00:45:15.460 --> 00:45:17.060
- Right, when you pip install it, it's basically--


00:45:17.060 --> 00:45:17.900
- Modify it slightly and it will be


00:45:17.900 --> 00:45:19.420
you're missing a few things or adding some things.


00:45:19.420 --> 00:45:21.100
But otherwise, it's mostly the source.


00:45:21.100 --> 00:45:22.220
- Yeah, it unzips your source


00:45:22.220 --> 00:45:23.700
and puts it somewhere Python will find it


00:45:23.700 --> 00:45:25.540
and then that's that.


00:45:25.540 --> 00:45:27.300
- Yeah, so it runs your build system.


00:45:27.300 --> 00:45:28.960
So setup tools traditionally,


00:45:28.960 --> 00:45:31.040
that's become a lot more powerful recently,


00:45:31.040 --> 00:45:33.620
but it has to run the build system


00:45:33.620 --> 00:45:34.980
to figure out what do you do with it.


00:45:34.980 --> 00:45:36.460
This is just a bunch of files.


00:45:36.460 --> 00:45:39.220
And then it puts it together in a particular structure


00:45:39.220 --> 00:45:44.140
on your computer.


00:45:44.140 --> 00:45:47.420
And so a wheel was a package that was already,


00:45:47.420 --> 00:45:50.140
everything was already in place.


00:45:50.140 --> 00:45:51.660
So it's already in a particular structure.


00:45:51.660 --> 00:45:55.740
It knows the structure and all Python has to do


00:45:55.740 --> 00:45:56.820
for a pure Python wheel,


00:45:56.820 --> 00:46:01.820
one that does not have any binary pieces in it.


00:46:01.840 --> 00:46:05.520
it just grabs the contents inside


00:46:05.520 --> 00:46:09.400
and dumps them following a specific set of rules


00:46:09.400 --> 00:46:12.040
into places into your site packages.


00:46:12.040 --> 00:46:12.880
- Right, exactly. - So then you now


00:46:12.880 --> 00:46:13.840
have something installed.


00:46:13.840 --> 00:46:16.040
There's no setup.py in your wheel.


00:46:16.040 --> 00:46:18.400
There's no pyproject.toml.


00:46:18.400 --> 00:46:20.440
Those sorts of things are not in the wheel.


00:46:20.440 --> 00:46:21.920
The wheel's already there.


00:46:21.920 --> 00:46:24.120
It can't run arbitrary code.


00:46:24.120 --> 00:46:24.940
- Yeah, exactly.


00:46:24.940 --> 00:46:25.780
That was one of the points I was gonna make.


00:46:25.780 --> 00:46:27.040
- It takes some people in. - It's one of those things


00:46:27.040 --> 00:46:30.280
that can be scary about installing packages


00:46:30.280 --> 00:46:32.560
is just by virtue of installing them,


00:46:32.560 --> 00:46:37.560
you're running arbitrary code because often that is execute,


00:46:37.560 --> 00:46:42.880
Python space, setup py space, install or something like that


00:46:42.880 --> 00:46:45.120
and like whatever that thing does,


00:46:45.120 --> 00:46:47.200
that's what happens when you pip install, right?


00:46:47.200 --> 00:46:48.320
But now with wheels, as you said,


00:46:48.320 --> 00:46:50.280
it comes down in a binary blob and just like,


00:46:50.280 --> 00:46:51.200
boom, here it is.


00:46:51.200 --> 00:46:54.960
Obviously the thinking is,


00:46:54.960 --> 00:46:58.240
we have this package delivered to a million computers,


00:46:58.240 --> 00:47:00.200
why do we need to have every million computer


00:47:00.200 --> 00:47:02.560
run all the steps, why don't we just run it once


00:47:02.560 --> 00:47:05.060
and then go here, and then also that saves you


00:47:05.060 --> 00:47:07.040
a ton of time, right?


00:47:07.040 --> 00:47:10.440
Like I just installed micro-WSGI and it took,


00:47:10.440 --> 00:47:14.120
I don't know, 30 seconds, 45 seconds to install


00:47:14.120 --> 00:47:15.840
'cause it didn't have a wheel, so it sat there


00:47:15.840 --> 00:47:19.400
and it just grinded away compiling it, you know?


00:47:19.400 --> 00:47:21.600
- Yeah, so there's two possibilities.


00:47:21.600 --> 00:47:24.900
A pure Python package, a wheel is still superior


00:47:24.900 --> 00:47:27.600
because of the not running arbitrary code.


00:47:27.600 --> 00:47:32.720
Pip will actually go ahead and compile all your PYC files.


00:47:32.720 --> 00:47:35.280
So it goes ahead and makes the bytecode for all those,


00:47:35.280 --> 00:47:36.560
if it's a wheel.


00:47:36.560 --> 00:47:39.720
If it's a tarball, it doesn't do that.


00:47:39.720 --> 00:47:42.840
If it doesn't pass through the wheel stage anyway.


00:47:42.840 --> 00:47:44.680
And then every time you open the file,


00:47:44.680 --> 00:47:48.080
then it's going to have to make that bytecode.


00:47:48.080 --> 00:47:50.320
So it'll be a little slower the first time you open it.


00:47:50.320 --> 00:47:52.200
There's a variety of reasons.


00:47:52.200 --> 00:47:54.080
I think it's pythonwheels.com, something


00:47:54.080 --> 00:47:57.820
like that, that describes why you should use wheels.


00:47:57.820 --> 00:48:00.040
That's maybe that's not it.


00:48:00.040 --> 00:48:04.840
Yes, Python wheels.


00:48:04.840 --> 00:48:07.880
So they have like a list of advantages there.


00:48:07.880 --> 00:48:08.720
But-


00:48:08.720 --> 00:48:11.600
- Yeah, I also have a little like checklist.


00:48:11.600 --> 00:48:16.320
It says, how are we doing for the top 360 packages?


00:48:16.320 --> 00:48:18.580
And apparently 342 of them have wheels


00:48:18.580 --> 00:48:21.000
and it shows you for your popular packages,


00:48:21.000 --> 00:48:24.300
which ones, like click does, but future doesn't,


00:48:24.300 --> 00:48:25.900
for example, and so on.


00:48:25.900 --> 00:48:28.100
- Yeah, future's been there for a long time.


00:48:28.100 --> 00:48:34.560
But yeah, so wheels are really good.


00:48:34.560 --> 00:48:37.940
And they actually replaced an older mechanism


00:48:37.940 --> 00:48:39.860
that was trying to do something somewhat similar


00:48:39.860 --> 00:48:43.180
called eggs, but I avoid talking about those.


00:48:43.180 --> 00:48:44.420
I don't really understand.


00:48:44.420 --> 00:48:46.500
- Let it live in the past.


00:48:46.500 --> 00:48:48.740
- But wheels also are a great way


00:48:48.740 --> 00:48:51.700
if you have compile that happens.


00:48:51.700 --> 00:48:56.700
So if you compile some code as part of your build,


00:48:56.700 --> 00:48:59.700
then that of course is much slower.


00:48:59.700 --> 00:49:00.540
If you have the--


00:49:00.540 --> 00:49:02.140
- Like my Microsoft G example.


00:49:02.140 --> 00:49:04.100
Yeah, it's like it was doing GCC or something.


00:49:04.100 --> 00:49:06.180
- If you don't have a compiler, it won't even work.


00:49:06.180 --> 00:49:07.020
- Right, exactly.


00:49:07.020 --> 00:49:09.260
- You have to have some setup, at least a little setup.


00:49:09.260 --> 00:49:11.700
You have to have a compiler setup at the very moment.


00:49:11.700 --> 00:49:13.340
- How many Windows users have seen


00:49:13.340 --> 00:49:16.300
cannot find vcvars.bat, right?


00:49:16.300 --> 00:49:19.140
You don't want to be in the environment


00:49:19.140 --> 00:49:21.940
or you have to have the right script sourced, yes.


00:49:21.940 --> 00:49:22.780
- Yeah.


00:49:22.780 --> 00:49:27.780
- So wheels also can contain binary components


00:49:27.780 --> 00:49:29.900
like .so's and things.


00:49:29.900 --> 00:49:32.220
And they have a tag as part of their name.


00:49:32.220 --> 00:49:35.060
They have a very special naming scheme for wheels


00:49:35.060 --> 00:49:37.420
and the tag is stored in the wheel too.


00:49:37.420 --> 00:49:41.380
And they can tell you what Python version they're good for,


00:49:41.380 --> 00:49:46.020
what platform they are supported on.


00:49:46.020 --> 00:49:48.540
They have a build number.


00:49:48.540 --> 00:49:51.480
And then they have a,


00:49:51.480 --> 00:49:53.820
the Python's actually in two pieces.


00:49:53.820 --> 00:49:58.820
There's the ABI and the interface.


00:49:58.820 --> 00:50:02.900
- Yeah, you can see there's some huge long name


00:50:02.900 --> 00:50:04.780
that with a bunch of underscores separating it


00:50:04.780 --> 00:50:08.860
and basically, we tried to install it.


00:50:08.860 --> 00:50:10.340
Sorry, go ahead.


00:50:10.340 --> 00:50:12.700
It's also one of the reasons that names are normalized.


00:50:12.700 --> 00:50:14.500
There's no difference between a dash and underscore.


00:50:14.500 --> 00:50:17.600
It's because that special wheel name has dashes in it.


00:50:17.600 --> 00:50:20.360
So the package name at that point in the file name


00:50:20.360 --> 00:50:21.460
has to be underscores.


00:50:21.460 --> 00:50:24.300
- Interesting. Yeah, okay.


00:50:24.300 --> 00:50:25.940
Yeah, and so basically when you pip install,


00:50:25.940 --> 00:50:28.740
it says, it builds up that name and says,


00:50:28.740 --> 00:50:30.780
"Do you have this as a binary?


00:50:30.780 --> 00:50:31.620
"Give it to me," right?


00:50:31.620 --> 00:50:33.340
Something like this?


00:50:33.340 --> 00:50:34.180
- Mm-hmm.


00:50:34.180 --> 00:50:35.580
Yeah, it knows how to pick out the right,


00:50:35.580 --> 00:50:36.740
it looks for the right one.


00:50:36.740 --> 00:50:38.860
If it finds a binary, it'll just download it.


00:50:38.860 --> 00:50:42.380
depending slightly on the system and how new your pip is.


00:50:42.380 --> 00:50:45.620
- Right, and this is one of the main innovations,


00:50:45.620 --> 00:50:50.620
ideas or philosophies behind Conda and Anaconda, right?


00:50:50.620 --> 00:50:52.300
It's like, let's just take that and make sure


00:50:52.300 --> 00:50:54.920
that we build all of these things in a really clear way


00:50:54.920 --> 00:50:59.760
and then sort of package up the testing and compilation


00:50:59.760 --> 00:51:03.200
and distributing all that together, right?


00:51:03.200 --> 00:51:05.960
- Yes, this is very similar to, this came, I think,


00:51:05.960 --> 00:51:08.180
I'm pretty sure it came after Conda.


00:51:08.180 --> 00:51:11.000
I think they were still in eggs when condo was invented.


00:51:11.000 --> 00:51:13.920
And then sort of building up wheels was challenging.


00:51:13.920 --> 00:51:16.280
Building a wheel was challenging.


00:51:16.280 --> 00:51:19.720
And that's, CI build wheel has really changed that.


00:51:19.720 --> 00:51:21.480
If you want to pure Python, it's really easy.


00:51:21.480 --> 00:51:24.160
You use, today you should be using the build tool,


00:51:24.160 --> 00:51:27.580
which I'm a maintainer of that as well.


00:51:27.580 --> 00:51:30.960
But build just builds an STIST for you,


00:51:30.960 --> 00:51:32.260
or it builds a wheel.


00:51:32.260 --> 00:51:35.720
- Right, and so you would say something like Python,


00:51:35.720 --> 00:51:39.800
set up UI BDist or something like that.


00:51:39.800 --> 00:51:40.640
And then boom, out comes your wheel.


00:51:40.640 --> 00:51:41.840
- I shouldn't be doing that anymore, please don't.


00:51:41.840 --> 00:51:43.240
But that is how you--


00:51:43.240 --> 00:51:44.320
- Yeah, how would I do it?


00:51:44.320 --> 00:51:45.560
Tell me the right way.


00:51:45.560 --> 00:51:46.760
- The best way.


00:51:46.760 --> 00:51:53.080
Well, you could do Python or pip install build.


00:51:53.080 --> 00:51:56.640
And then Python dash m build.


00:51:56.640 --> 00:51:59.360
And that will build both an SDist and a wheel.


00:51:59.360 --> 00:52:02.160
And it'll build the wheel from the SDist.


00:52:02.160 --> 00:52:04.100
If you use pipx, which I would recommend,


00:52:04.100 --> 00:52:05.980
then you can just say pipx run build


00:52:05.980 --> 00:52:07.140
and you don't have to do anything.


00:52:07.140 --> 00:52:10.600
That'll download build into a virtual environment for you.


00:52:10.600 --> 00:52:12.180
It'll do it and then eventually it'll throw away


00:52:12.180 --> 00:52:14.580
the virtual environment after a week.


00:52:14.580 --> 00:52:15.620
- Interesting, okay.


00:52:15.620 --> 00:52:17.940
But we could just use the build.


00:52:17.940 --> 00:52:19.700
We should be using the build.


00:52:19.700 --> 00:52:21.380
- You should be using the build tool.


00:52:21.380 --> 00:52:24.940
It's for Estus, there's a big benefit to this.


00:52:24.940 --> 00:52:28.620
And that is it will use your pyproject.toml.


00:52:28.620 --> 00:52:30.860
And if you say you require numpy,


00:52:30.860 --> 00:52:34.980
then it will go, like you're using the NumPy headers,


00:52:34.980 --> 00:52:37.860
the C headers, then it will go and it will,


00:52:37.860 --> 00:52:40.700
when it's building Estus, it will make


00:52:40.700 --> 00:52:45.500
the PEP 5.17 virtual environment.


00:52:45.500 --> 00:52:50.220
It'll install NumPy, anything that's in your requires


00:52:50.220 --> 00:52:53.220
in your pyproject.toml, and then it will run


00:52:53.220 --> 00:52:56.340
the setup.py inside that environment.


00:52:56.340 --> 00:52:59.020
So you can now import NumPy directly in there


00:52:59.020 --> 00:53:01.540
and it'll work even when you're building an SDist.


00:53:01.540 --> 00:53:05.660
If you do Python, SDist, or Python setup.py stuff,


00:53:05.660 --> 00:53:09.460
it can't do that because you're literally running Python,


00:53:09.460 --> 00:53:12.980
giving it setup.py, import numpy, now it's broken.


00:53:12.980 --> 00:53:14.180
- Right, okay.


00:53:14.180 --> 00:53:19.180
- Nothing triggers that call to the pyproject.toml


00:53:19.180 --> 00:53:21.940
to see what you need.


00:53:21.940 --> 00:53:26.060
For a wheel, the best way to do it is with pip,


00:53:26.060 --> 00:53:29.300
or the original way to do it was with pip wheel,


00:53:29.300 --> 00:53:31.020
because pip has to be able to build wheels


00:53:31.020 --> 00:53:33.560
in order to install things.


00:53:33.560 --> 00:53:39.940
That got added to pip before build existed.


00:53:39.940 --> 00:53:42.500
But now the best way to do it would be with build wheel.


00:53:42.500 --> 00:53:43.940
And that's actually, it's doing the right thing.


00:53:43.940 --> 00:53:46.180
It's actually trying to build the wheel you want,


00:53:46.180 --> 00:53:49.660
whereas pip wheel is actually just building a wheelhouse.


00:53:49.660 --> 00:53:52.660
So if you depend on NumPy and NumPy doesn't have wheels,


00:53:54.540 --> 00:53:56.060
They did better with Python 3.10,


00:53:56.060 --> 00:53:59.140
so I'm not gonna complain about NumPy for Python 3.10.


00:53:59.140 --> 00:54:02.060
But for 3.9, they didn't have wheels for a while.


00:54:02.060 --> 00:54:03.380
So it'll build the wheels there,


00:54:03.380 --> 00:54:04.380
and it'll build your wheels,


00:54:04.380 --> 00:54:06.320
and it'll dump them all in the wheelhouse,


00:54:06.320 --> 00:54:07.740
whatever the output is.


00:54:07.740 --> 00:54:09.540
So you'll get, you'll be building NumPy wheels,


00:54:09.540 --> 00:54:11.660
which you definitely don't wanna try to upload.


00:54:11.660 --> 00:54:13.660
- Yeah, yeah, definitely not.


00:54:13.660 --> 00:54:15.100
All right, well, that's really cool,


00:54:15.100 --> 00:54:16.180
and I definitely learned something.


00:54:16.180 --> 00:54:20.540
I will start using build instead of doing it the other way.


00:54:20.540 --> 00:54:23.740
- You can now delete your setup.py too.


00:54:23.740 --> 00:54:24.980
- Yeah, that's the big thing, right?


00:54:24.980 --> 00:54:27.580
So you don't have to run that kind of stuff, right?


00:54:27.580 --> 00:54:28.500
- Mm-hmm.


00:54:28.500 --> 00:54:31.060
Yeah, they're trying to move away from any commands


00:54:31.060 --> 00:54:34.940
to setup.py because you don't even need one anymore.


00:54:34.940 --> 00:54:37.300
And you can't control that environment.


00:54:37.300 --> 00:54:39.540
It's very much an internal detail.


00:54:39.540 --> 00:54:40.460
- Yeah.


00:54:40.460 --> 00:54:45.000
So, wrapping up this segment of the conversation,


00:54:45.000 --> 00:54:47.580
we want a wheel because that's best.


00:54:47.580 --> 00:54:49.860
It installs without requiring the compiler tools


00:54:49.860 --> 00:54:51.260
on our system.


00:54:51.260 --> 00:54:53.060
It installs faster.


00:54:53.060 --> 00:54:55.160
It's built just for our platform.


00:54:55.160 --> 00:54:58.320
The challenge is when you become a maintainer,


00:54:58.320 --> 00:55:03.320
you got to solve this matrix of different Python versions


00:55:03.320 --> 00:55:05.460
that are supported and different platforms.


00:55:05.460 --> 00:55:07.320
Like for example, there's macOS Intel,


00:55:07.320 --> 00:55:10.400
there's macOS M1, Apple Silicon,


00:55:10.400 --> 00:55:12.680
there's multiple versions of Windows,


00:55:12.680 --> 00:55:15.120
there's different versions of Linux, right?


00:55:15.120 --> 00:55:19.280
Like ARM Linux versus AMD 64 Linux.


00:55:20.240 --> 00:55:24.120
And now MUSE Linux versus the other Linux varieties.


00:55:24.120 --> 00:55:27.200
Yeah, so one of the challenges with the wheel


00:55:27.200 --> 00:55:29.880
is making it distributable.


00:55:29.880 --> 00:55:31.320
So if you just go out and you build a wheel


00:55:31.320 --> 00:55:32.600
and then you try to give it to someone else,


00:55:32.600 --> 00:55:33.460
it may not work.


00:55:33.460 --> 00:55:38.200
Certainly on Linux, if you try to,


00:55:38.200 --> 00:55:40.920
pretty much if you do that, it just won't work


00:55:40.920 --> 00:55:42.800
because the systems are gonna be different.


00:55:42.800 --> 00:55:45.400
On macOS, it'll only work on the version


00:55:45.400 --> 00:55:47.840
you compiled it on and not anything older.


00:55:47.840 --> 00:55:52.840
And you'll even see people trying to compile on macOS 10.14


00:55:52.840 --> 00:55:57.200
because they want their wheels to work as in many places.


00:55:57.200 --> 00:55:59.620
(indistinct)


00:55:59.620 --> 00:56:01.940
- Exactly, it's fine.


00:56:01.940 --> 00:56:06.140
The jankiest like I've got a Mac mini from 2009.


00:56:06.140 --> 00:56:07.180
We're building on that thing


00:56:07.180 --> 00:56:09.540
'cause it will work for most people, right?


00:56:09.540 --> 00:56:10.820
- I think that's how they actually build


00:56:10.820 --> 00:56:12.940
the official Python binaries.


00:56:12.940 --> 00:56:13.780
- Interesting.


00:56:13.780 --> 00:56:14.620
- I'm not sure.


00:56:14.620 --> 00:56:17.380
- Well, but then Apple went in through like last year


00:56:17.380 --> 00:56:20.020
around this time, they threw a big spanner in the works


00:56:20.020 --> 00:56:21.880
and said, you know what, we're going to completely switch


00:56:21.880 --> 00:56:25.060
to ARM and our own silicon, and you got to compile


00:56:25.060 --> 00:56:26.740
for something different now.


00:56:26.740 --> 00:56:29.540
- Yeah, and cross compiling has always been a challenge.


00:56:29.540 --> 00:56:33.020
Yeah, and then Windows is actually the easiest


00:56:33.020 --> 00:56:33.840
of all of them.


00:56:33.840 --> 00:56:36.060
You're most likely on Windows to be able to compile


00:56:36.060 --> 00:56:38.660
something that you can give to someone else.


00:56:38.660 --> 00:56:39.580
But the rest are- - Yeah, that's true.


00:56:39.580 --> 00:56:41.700
That is one of the things that Microsoft's been really


00:56:41.700 --> 00:56:43.860
pretty good at is backwards compatibility.


00:56:43.860 --> 00:56:46.460
I get holds them back in other ways, but yeah,


00:56:46.460 --> 00:56:49.260
typically you can run an app from 20 years ago and it'll still run.


00:56:49.260 --> 00:56:53.660
Yeah, there are a few caveats, but not many,


00:56:53.660 --> 00:56:55.980
at least compared to the other systems.


00:56:55.980 --> 00:56:59.740
Apple's really good, but you do have to understand how to...


00:56:59.740 --> 00:57:02.500
you do have to set your minimum version.


00:57:02.500 --> 00:57:06.060
And you have to get a Python that had that minimum version set


00:57:06.060 --> 00:57:07.780
when it was compiled.


00:57:07.780 --> 00:57:09.780
If you do that, it works really well.


00:57:09.780 --> 00:57:12.740
So what I actually did with...


00:57:12.740 --> 00:57:14.820
what I actually started with in scikit-hep,


00:57:14.900 --> 00:57:17.340
I had this, I was building Boost Histogram,


00:57:17.340 --> 00:57:19.100
which needed to be able to run anywhere.


00:57:19.100 --> 00:57:20.420
That was something I absolutely wanted.


00:57:20.420 --> 00:57:21.820
It had to be pip install Boost Histogram


00:57:21.820 --> 00:57:23.580
and it just worked no matter what.


00:57:23.580 --> 00:57:26.540
And also we had several other compiled packages at the time.


00:57:26.540 --> 00:57:27.780
Several we had inherited


00:57:27.780 --> 00:57:34.260
and I-Menu was compiled and that was quite popular.


00:57:34.260 --> 00:57:36.660
We had a couple of specific ones


00:57:36.660 --> 00:57:38.940
and we had a couple more that ended up


00:57:38.940 --> 00:57:40.500
becoming interested in that.


00:57:40.500 --> 00:57:42.140
In fact, during this sort of period


00:57:42.140 --> 00:57:44.860
is when Awkward started compiling pieces.


00:57:44.860 --> 00:57:48.440
And so what I started with was building my own system


00:57:48.440 --> 00:57:49.280
to do this.


00:57:49.280 --> 00:57:52.060
It was called Azure Wheel Helpers,


00:57:52.060 --> 00:57:54.120
which was, as you can guess by the name,


00:57:54.120 --> 00:57:58.520
Azure was basically a set of Azure DevOps scripts.


00:57:58.520 --> 00:58:00.480
It was right after Azure had come out.


00:58:00.480 --> 00:58:02.520
And I wrote a series of blog posts on this


00:58:02.520 --> 00:58:04.560
and described the exact process


00:58:04.560 --> 00:58:06.760
and sort of the things I found out


00:58:06.760 --> 00:58:09.000
about how you build a compatible wheel.


00:58:09.000 --> 00:58:11.200
On macOS, you have to make sure you get


00:58:11.200 --> 00:58:19.120
the most compatible CPython from Python.org itself.


00:58:19.120 --> 00:58:21.520
You can't use brew or something like that,


00:58:21.520 --> 00:58:24.280
because those are going to be compiled for whatever system


00:58:24.280 --> 00:58:25.600
they were targeting.


00:58:25.600 --> 00:58:30.060
And on Linux, you have to run the mini Linux system,


00:58:30.060 --> 00:58:31.520
and you should run audit wheel.


00:58:31.520 --> 00:58:33.520
And actually, on Mac, you should run develop--


00:58:33.520 --> 00:58:38.240
develop wheel, though I might be getting--


00:58:38.240 --> 00:58:40.320
I think it's develop wheel.


00:58:40.320 --> 00:58:42.240
So there's this series of things that you have to do.


00:58:42.240 --> 00:58:45.920
And I started maintaining this multi-hundred line set


00:58:45.920 --> 00:58:48.840
of scripts to do this.


00:58:48.840 --> 00:58:53.840
And I was also being limited by Azure at the time.


00:58:53.840 --> 00:58:55.840
They didn't have all the templates and stuff they have now.


00:58:55.840 --> 00:58:59.320
So everything had to be managed through get sub-tree


00:58:59.320 --> 00:59:02.040
because it couldn't be a separate repository.


00:59:02.040 --> 00:59:06.240
And then when Jim started working awkward,


00:59:06.240 --> 00:59:08.240
he went and just rewrote the whole thing


00:59:09.080 --> 00:59:11.800
I thought he wanted it to look simpler for him


00:59:11.800 --> 00:59:14.040
and took a couple of things out that were needed


00:59:14.040 --> 00:59:16.200
and suddenly made it two separate things.


00:59:16.200 --> 00:59:18.240
Now I had to help maintain that.


00:59:18.240 --> 00:59:21.440
So when Python 3.8 or whatever it was came out,


00:59:21.440 --> 00:59:23.520
now I had a completely different set of changes


00:59:23.520 --> 00:59:24.960
I had to make for that one.


00:59:24.960 --> 00:59:26.720
And it was really just not--


00:59:26.720 --> 00:59:27.920
it was not working out.


00:59:27.920 --> 00:59:29.920
It was not very easy to maintain.


00:59:29.920 --> 00:59:33.880
And I was watching CI Buildwheel.


00:59:33.880 --> 00:59:34.880
And it was this package.


00:59:34.880 --> 00:59:39.040
It was a Python package that would do this.


00:59:39.040 --> 00:59:41.240
And it didn't matter what CI system you were on


00:59:41.240 --> 00:59:42.840
because it was written in Python.


00:59:42.840 --> 00:59:48.320
And it could follow nice sort of Python principles


00:59:48.320 --> 00:59:49.280
for good package design.


00:59:49.280 --> 00:59:50.820
It had unit tests and all that sort of stuff.


00:59:50.820 --> 00:59:52.160
So it looked really good.


00:59:52.160 --> 00:59:53.360
There were a couple of things it was missing.


00:59:53.360 --> 00:59:56.160
I came in, I added, I made PRs for the things


00:59:56.160 --> 00:59:58.120
that I'd come up with that it didn't have


00:59:58.120 --> 00:59:59.520
and they got accepted.


00:59:59.520 --> 01:00:01.120
And there was a shared maintainer


01:00:01.120 --> 01:00:03.320
between PyBind11 and CI Buildable as well.


01:00:03.320 --> 01:00:04.400
I think that's one of the reasons


01:00:04.400 --> 01:00:05.760
that I sort of had heard about it


01:00:05.760 --> 01:00:06.920
and was really watching it.


01:00:06.920 --> 01:00:09.040
And I finally decided just to make the switch.


01:00:09.040 --> 01:00:11.080
And I did.


01:00:11.080 --> 01:00:13.120
At some point a little later, I actually became a maintainer


01:00:13.120 --> 01:00:14.800
of CI Buildwheel.


01:00:14.800 --> 01:00:17.320
But I think I started doing the switch before.


01:00:17.320 --> 01:00:19.240
It made it really easy once I was a maintainer to say,


01:00:19.240 --> 01:00:21.560
this is a package that we have some control over.


01:00:21.560 --> 01:00:22.680
It's okay, let's just--


01:00:22.680 --> 01:00:25.200
- Right, this is a safe place to depend upon this


01:00:25.200 --> 01:00:27.720
'cause we have a city.


01:00:27.720 --> 01:00:29.720
- It just took out all of that maintenance


01:00:29.720 --> 01:00:33.760
and now the pin bot does all the maintenance for us.


01:00:33.760 --> 01:00:36.120
Does the pin, moves forward a pin on CI Buildwheel


01:00:36.120 --> 01:00:36.960
That's it.


01:00:36.960 --> 01:00:38.800
- Nice.


01:00:38.800 --> 01:00:42.000
So if I want to accomplish,


01:00:42.000 --> 01:00:45.820
if I'm a package developer owner


01:00:45.820 --> 01:00:50.000
and I want to share that package with everybody,


01:00:50.000 --> 01:00:52.560
we've already determined we would ideally


01:00:52.560 --> 01:00:54.320
want to have a wheel,


01:00:54.320 --> 01:00:55.340
but getting that wheel is hard.


01:00:55.340 --> 01:00:57.800
So CI build wheel will let you integrate it


01:00:57.800 --> 01:01:01.880
as the name indicates into your continuous integration.


01:01:01.880 --> 01:01:06.080
And one of those steps of CI could be build the wheel, right?


01:01:06.080 --> 01:01:09.580
So it reduces it down to pretty much that,


01:01:09.580 --> 01:01:11.960
that there's a step in your CI that says,


01:01:11.960 --> 01:01:15.460
you know, run CI build wheel.


01:01:15.460 --> 01:01:19.560
And then CI build wheel is designed to really integrate


01:01:19.560 --> 01:01:20.700
nicely with the build matrix.


01:01:20.700 --> 01:01:24.380
So you could, for a fairly simple package


01:01:24.380 --> 01:01:26.500
or for many packages, you can really just do Mac,


01:01:26.500 --> 01:01:28.900
Windows and Linux, have the same job.


01:01:28.900 --> 01:01:32.020
I can get up actions, it's easy to do the same job.


01:01:32.020 --> 01:01:34.320
And then call CI build wheel.


01:01:34.320 --> 01:01:35.980
And that's about it.


01:01:35.980 --> 01:01:39.420
It just goes through all the different versions of Python that are supported.


01:01:39.420 --> 01:01:44.380
It just goes through and makes a wheel for each.


01:01:44.380 --> 01:01:47.120
And in fact, it even has one feature that was really nice


01:01:47.120 --> 01:01:50.580
that I struggled with a bit, is testing.


01:01:50.580 --> 01:01:54.080
So if you give it a test command, it will even take your package,


01:01:54.080 --> 01:01:56.580
it will install in a new environment that's not, you know,


01:01:56.580 --> 01:01:59.120
in a different directory that's not related to your build at all,


01:01:59.120 --> 01:02:02.680
and make sure it works and passes whatever test you give it.


01:02:02.680 --> 01:02:04.680
We'll do that across the platforms.


01:02:04.680 --> 01:02:07.180
We'll do a macOS test and a Windows test.


01:02:07.180 --> 01:02:09.180
Yeah, for each.


01:02:09.180 --> 01:02:11.980
So CRBL will really just seize the platform it's sitting on


01:02:11.980 --> 01:02:14.980
because it's inside the build matrix, and so it's run for each.


01:02:14.980 --> 01:02:21.680
And yeah, it does for each one, it will run that test.


01:02:21.680 --> 01:02:23.680
And the simplest test is just echo,


01:02:23.680 --> 01:02:24.980
and that will just make sure it installs


01:02:24.980 --> 01:02:26.980
because it won't try to install your wheel


01:02:26.980 --> 01:02:29.980
unless there's something in that test command.


01:02:29.980 --> 01:02:31.680
Even that's useful sometimes.


01:02:31.680 --> 01:02:32.520
- Yeah, sure.


01:02:32.520 --> 01:02:35.840
- So it's broken sometimes because of NumPy


01:02:35.840 --> 01:02:38.720
not supporting one of those things in that matrix.


01:02:38.720 --> 01:02:40.380
- Yeah, it can't install the dependency,


01:02:40.380 --> 01:02:42.600
so that step fails or something.


01:02:42.600 --> 01:02:45.760
So it says it currently supports GitHub Actions,


01:02:45.760 --> 01:02:48.640
Azure Pipelines, which I don't know how long


01:02:48.640 --> 01:02:50.000
those are gonna be two separate things.


01:02:50.000 --> 01:02:51.160
Maybe they'll always be separate,


01:02:51.160 --> 01:02:53.640
but Microsoft owning GitHub, I feel like


01:02:53.640 --> 01:02:56.520
they're saying two separate Azure Pipelines


01:02:56.520 --> 01:02:57.800
and then they're kind of moving,


01:02:57.800 --> 01:02:58.840
like, yeah, I think they're similar.


01:02:58.840 --> 01:03:00.400
- The runners are the same.


01:03:00.400 --> 01:03:02.400
They actually had the same environments.


01:03:02.400 --> 01:03:03.400
Okay.


01:03:03.400 --> 01:03:07.200
So I think they'll exist just as two different interfaces probably.


01:03:07.200 --> 01:03:11.400
And Azure is not so tied to GitHub and it has more of an enterprise type.


01:03:11.400 --> 01:03:12.400
Yeah, for sure.


01:03:12.400 --> 01:03:13.400
Definitely has a different focus.


01:03:13.400 --> 01:03:17.400
But GitHub was just a rewrite and a better rewrite in most cases of it.


01:03:17.400 --> 01:03:18.400
They got to learn.


01:03:18.400 --> 01:03:21.400
Yeah, I think GitHub Actions came second.


01:03:21.400 --> 01:03:26.400
All right, so then Travis CI, AppBear, CircleCI, and GitLab CI.


01:03:26.400 --> 01:03:28.400
At least all of those, right?


01:03:28.400 --> 01:03:32.080
At least those are the ones we test on.


01:03:32.080 --> 01:03:34.400
And then it runs locally.


01:03:34.400 --> 01:03:38.400
There are some limitations to running it locally.


01:03:38.400 --> 01:03:40.200
If you target Linux,


01:03:40.200 --> 01:03:42.720
and you can have any system that has Docker


01:03:42.720 --> 01:03:43.840
can target Linux.


01:03:43.840 --> 01:03:46.120
You can just ask to build Linux wheels


01:03:46.120 --> 01:03:48.600
and you can actually run it from like my Mac


01:03:48.600 --> 01:03:50.680
or from Windows, I assume from a Windows machine.


01:03:50.680 --> 01:03:52.200
I've tried Windows with Docker.


01:03:52.200 --> 01:03:57.200
And Windows, it does install to a standard location,


01:03:57.720 --> 01:04:01.480
C colon backslash CI build will, but other than that, it's safe to run it there.


01:04:01.480 --> 01:04:04.880
And macOS, it will install to your macOS system.


01:04:04.880 --> 01:04:06.440
It's installed system versions of Python.


01:04:06.440 --> 01:04:08.360
So that's something we haven't solved yet.


01:04:08.360 --> 01:04:09.640
We might be able to someday.


01:04:09.640 --> 01:04:13.880
Um, so it's not a good idea unless you really are okay with installing every


01:04:13.880 --> 01:04:15.440
version of Python that ever existed in tier.


01:04:15.440 --> 01:04:17.240
Into your system.


01:04:17.240 --> 01:04:19.800
Uh, maybe get a VM.


01:04:19.800 --> 01:04:23.440
The Python.org, Python, but yeah.


01:04:23.440 --> 01:04:23.880
Yeah.


01:04:23.880 --> 01:04:24.080
Yeah.


01:04:24.080 --> 01:04:25.200
It's, I mean, it's somewhat safe.


01:04:26.560 --> 01:04:34.640
If you're on Windows, you could use Windows subsystem for Linux WSL as well, in addition to Docker, I suspect.


01:04:34.640 --> 01:04:40.480
Well, the mini Linux has to run, you could, as long as you can launch Docker.


01:04:40.480 --> 01:04:46.680
The thing that you have to be able to do is launch Docker because you have to use the mini Linux Docker images.


01:04:46.680 --> 01:04:49.000
Or you should use that or a derivative of that.


01:04:49.000 --> 01:04:54.160
There's lots of rules to exactly what can be in the environment and things like that.


01:04:54.160 --> 01:04:57.100
- Okay. - And IPA maintains that.


01:04:57.100 --> 01:05:00.600
One thing that also helps is that we have the main...


01:05:00.600 --> 01:05:03.240
Many Linux maintainer is also a CI build wheel maintainer.


01:05:03.240 --> 01:05:05.680
- So it's one reason those things tend... - Oh.


01:05:05.680 --> 01:05:08.480
- That... - They fit well together.


01:05:08.480 --> 01:05:10.880
Features tend to match.


01:05:10.880 --> 01:05:13.120
- Yeah, indeed. - Like Musil Linux,


01:05:13.120 --> 01:05:14.840
which is a big thing recently.


01:05:14.840 --> 01:05:18.000
It's not actually in a released version of CI build wheel yet.


01:05:18.000 --> 01:05:20.000
What is Musil Linux?


01:05:20.000 --> 01:05:25.920
So a normal Linux is based on glibc and that's actually what controls


01:05:25.920 --> 01:05:30.340
them. It's one of two things that controls mini Linux. So if can you


01:05:30.340 --> 01:05:34.580
download the binary wheel or do you have to build? If you have an old version of


01:05:34.580 --> 01:05:38.820
pip that won't, they had to teach pip about each version of mini Linux and


01:05:38.820 --> 01:05:42.620
that was a mess so they eventually switched to a standard numbering


01:05:42.620 --> 01:05:47.800
system that is your glibc number and now pip doesn't, you know, and the


01:05:47.800 --> 01:05:51.300
The current pip will be able to install a feature Mini Linux, as long as your system supports it.


01:05:51.300 --> 01:05:53.400
But that was a big problem.


01:05:53.400 --> 01:05:56.840
So pip 9 can only install Mini Linux 1.


01:05:56.840 --> 01:06:00.320
It can't install Mini Linux 10, even if your glibc is fine for it.


01:06:00.320 --> 01:06:03.720
So the other thing is the glibc version.


01:06:03.720 --> 01:06:08.600
And Mini Linux 1 was based on CentOS 5, Red Hat 5.


01:06:08.600 --> 01:06:12.440
Mini Linux 2010 was CentOS 6.


01:06:12.440 --> 01:06:14.600
Mini Linux 2014 was CentOS 7.


01:06:15.000 --> 01:06:16.400
And then now they switched to Debian


01:06:16.400 --> 01:06:21.300
because of CentOS sort of switching to the stream model.


01:06:21.300 --> 01:06:26.200
So Minilinks 214, or 224 is glibc 2.24,


01:06:26.200 --> 01:06:30.560
and that's Debian 8 or something like that.


01:06:30.560 --> 01:06:31.540
- Okay, I see.


01:06:31.540 --> 01:06:34.480
- So, but that's glibc-based.


01:06:34.480 --> 01:06:37.880
There are distributions that are not glibc-based,


01:06:37.880 --> 01:06:39.240
most notably Alpine.


01:06:39.240 --> 01:06:41.440
So if you've ever used Alpine,


01:06:41.440 --> 01:06:43.360
it's this tiny, tiny little Docker image.


01:06:43.360 --> 01:06:44.800
It's a really fun distribution to use


01:06:44.800 --> 01:06:46.360
if you're on Docker.


01:06:46.360 --> 01:06:48.880
But it actually sounds fun to install,


01:06:48.880 --> 01:06:50.560
but I've never tried it without Docker.


01:06:50.560 --> 01:06:55.200
But it's these five megabyte Docker wheels,


01:06:55.200 --> 01:06:57.640
or Docker, I guess Docker doesn't do wheels,


01:06:57.640 --> 01:06:58.480
Docker images.


01:06:58.480 --> 01:06:59.360
- Docker images, yeah.


01:06:59.360 --> 01:07:04.360
- But that doesn't use glibc, that uses musel.


01:07:04.360 --> 01:07:08.620
And so musel-index will run on Alpine.


01:07:08.620 --> 01:07:10.680
- Okay, got it.


01:07:10.680 --> 01:07:14.120
So if you're building for the platform Alpine


01:07:14.120 --> 01:07:15.380
and similar ones, right?


01:07:15.380 --> 01:07:21.100
Yeah, and you said I can run this locally as well.


01:07:21.100 --> 01:07:25.280
I know I would use it in CI 'cause I'm trying,


01:07:25.280 --> 01:07:28.160
I've got that matrix of all the versions of CPython


01:07:28.160 --> 01:07:30.520
and PyPI, P-U-I, P-U-I,


01:07:30.520 --> 01:07:32.720
and then all the platforms that I wanna check


01:07:32.720 --> 01:07:34.480
as many of those boxes as possible


01:07:34.480 --> 01:07:36.360
to put wheels in it, right?


01:07:36.360 --> 01:07:40.960
Suppose I'm on my Mac and I wanna make use of this


01:07:40.960 --> 01:07:43.320
to fill in, maybe do some testing,


01:07:43.320 --> 01:07:46.240
at least on some of these columns, like, how do I do that?


01:07:46.240 --> 01:07:47.520
What's the benefit there?


01:07:47.520 --> 01:07:51.120
- Well, I can tell you the case where it happened.


01:07:51.120 --> 01:07:54.080
So we were shipping CMake,


01:07:54.080 --> 01:07:57.380
and the scikit-build organization ran out


01:07:57.380 --> 01:08:01.320
of Travis credits, and they were being built.


01:08:01.320 --> 01:08:03.680
We hadn't switched them over to being emulated builds


01:08:03.680 --> 01:08:06.000
on GitHub Actions yet.


01:08:06.000 --> 01:08:08.040
And it just ran out, we couldn't build them,


01:08:08.040 --> 01:08:09.520
and one of them had been missed,


01:08:09.520 --> 01:08:10.980
and we also weren't waiting to upload.


01:08:10.980 --> 01:08:12.040
So we had uploaded everything,


01:08:12.040 --> 01:08:16.280
but we had one set or maybe it was all of the emulated builds.


01:08:16.280 --> 01:08:17.680
I think it was one set of emulated builds.


01:08:17.680 --> 01:08:19.480
It didn't work.


01:08:19.480 --> 01:08:24.240
And so we wanted to go ahead and upload those missing wheels.


01:08:24.240 --> 01:08:27.680
And I tried, but I couldn't actually get emulation,


01:08:27.680 --> 01:08:32.520
the Docker QEMU emulation.


01:08:32.520 --> 01:08:34.360
I couldn't get that working on my Mac.


01:08:34.360 --> 01:08:38.320
So the Mini Linux maintainer used his Linux machine


01:08:38.320 --> 01:08:42.320
And he had QMU emulation on it


01:08:42.320 --> 01:08:46.140
and he built the emulated images, took a few hours,


01:08:46.140 --> 01:08:48.840
but he just built them locally and then uploaded them.


01:08:48.840 --> 01:08:52.000
- Okay, yeah, very nice.


01:08:52.000 --> 01:08:58.800
So if I'm maintaining a package,


01:08:58.800 --> 01:09:00.520
I got some package I'm putting on PyPI


01:09:00.520 --> 01:09:04.340
and I want to test it, does it make sense to do it locally


01:09:04.340 --> 01:09:07.560
or does it just make sense to put it on some CI system?


01:09:07.560 --> 01:09:15.560
- For C build, usually, I do some local testing, but I'm also developing C build.


01:09:15.560 --> 01:09:20.760
But, you know, usually it's probably fine to do this in your, just in your CI,


01:09:20.760 --> 01:09:23.160
and usually you don't want to run the full thing every time.


01:09:23.160 --> 01:09:26.600
Usually you have your regular unit tests, because C build is going to be a lot slower


01:09:26.600 --> 01:09:29.080
because it's going through and it's making each set of wheels,


01:09:29.080 --> 01:09:31.880
and then launching Docker images and things like that.


01:09:31.880 --> 01:09:37.000
And it's installing Python each time for macOS and Windows.


01:09:37.000 --> 01:09:40.420
So usually, unless if you have fairly quick build,


01:09:40.420 --> 01:09:42.120
I've seen some people just run CI build wheel


01:09:42.120 --> 01:09:43.880
as part of their test suite,


01:09:43.880 --> 01:09:46.620
but usually you just run it, say right before release.


01:09:46.620 --> 01:09:49.720
Yeah, maybe I usually do it once before the release


01:09:49.720 --> 01:09:51.200
and then on the release.


01:09:51.200 --> 01:09:52.020
- Right, exactly.


01:09:52.020 --> 01:09:53.200
Okay, that makes sense.


01:09:53.200 --> 01:09:56.080
'Cause it's a pretty heavyweight type of operation.


01:09:56.080 --> 01:10:00.160
So when I look at all these different platforms,


01:10:00.160 --> 01:10:02.720
I see macOS Intel, macOS Apple Silicon,


01:10:02.720 --> 01:10:05.040
different bitnesses of Windows.


01:10:05.040 --> 01:10:08.020
And then I think about CI systems.


01:10:08.020 --> 01:10:10.620
You know, what CI systems can I use


01:10:10.620 --> 01:10:11.700
that support all these things?


01:10:11.700 --> 01:10:14.820
Like does GitHub Actions support both versions of macOS,


01:10:14.820 --> 01:10:17.660
for example, plus Windows?


01:10:17.660 --> 01:10:22.120
- GitHub Actions is by far our most popular platform.


01:10:22.120 --> 01:10:22.960
It switched very quickly.


01:10:22.960 --> 01:10:24.220
It used to be Travis.


01:10:24.220 --> 01:10:25.160
Travis was a challenge


01:10:25.160 --> 01:10:26.420
'cause they didn't do Windows very,


01:10:26.420 --> 01:10:28.140
they still don't do Windows very well.


01:10:28.140 --> 01:10:29.500
And it's a challenge for us


01:10:29.500 --> 01:10:31.820
because we actually can't run our macOS tests


01:10:31.820 --> 01:10:34.620
on them anymore because once we joined the PyPI,


01:10:34.620 --> 01:10:36.860
the billing became an issue.


01:10:36.860 --> 01:10:44.340
And so we basically just lost macOS running for it.


01:10:44.340 --> 01:10:49.140
But Circle, I think, Azure, and GitHub Actions,


01:10:49.140 --> 01:10:51.540
I think they do all three.


01:10:51.540 --> 01:10:53.420
And you can always split things up.


01:10:53.420 --> 01:10:57.060
Do Travis for the Linux and then App Fair for Windows.


01:10:57.060 --> 01:10:58.820
You can do it that way.


01:10:58.820 --> 01:11:01.880
One of the big things that I helped develop for CI Build


01:11:01.880 --> 01:11:06.800
wheel was the pyproject.toml or any toml configuration,


01:11:06.800 --> 01:11:10.240
but usually that one configuration for CI build


01:11:10.240 --> 01:11:10.760
wheel.


01:11:10.760 --> 01:11:14.120
So that way you can get your CI build wheel configuration out


01:11:14.120 --> 01:11:16.960
of your YAML files.


01:11:16.960 --> 01:11:20.200
That way it works locally, which is one of the things I was


01:11:20.200 --> 01:11:20.680
after.


01:11:20.680 --> 01:11:22.200
But also you can just do it and then


01:11:22.200 --> 01:11:23.660
run on several different systems.


01:11:23.660 --> 01:11:26.160
Like you might like the fact that Travis--


01:11:26.160 --> 01:11:30.240
Travis is, I think, the only one that does the native strange


01:11:30.240 --> 01:11:31.480
architectures.


01:11:31.480 --> 01:11:33.000
you have to emulate it other places,


01:11:33.000 --> 01:11:36.320
which is a lot slower, five times slower or something.


01:11:36.320 --> 01:11:37.940
- Okay.


01:11:37.940 --> 01:11:40.600
Yeah, so kind of split that up, get the definition


01:11:40.600 --> 01:11:45.600
and then create maybe multiple CI jobs based on a trigger.


01:11:45.600 --> 01:11:47.240
- Yeah, your CI scripts are really simple.


01:11:47.240 --> 01:11:48.960
- Yeah, very cool.


01:11:48.960 --> 01:11:51.280
- The example script is just a few lines.


01:11:51.280 --> 01:11:54.880
It does not take much to do this, comparing on--


01:11:54.880 --> 01:11:55.720
- Oh yeah, I didn't even--


01:11:55.720 --> 01:11:57.320
- There's hundreds of lines it used to take.


01:11:57.320 --> 01:11:58.840
- Yeah, sure, and I didn't even scroll down here.


01:11:58.840 --> 01:12:03.720
you've got a nice grid on github.com/ipa/cibuildwheel


01:12:03.720 --> 01:12:05.060
that shows on GitHub Actions,


01:12:05.060 --> 01:12:07.880
which is supported on Azure pipelines,


01:12:07.880 --> 01:12:08.720
what support--


01:12:08.720 --> 01:12:09.540
- Oh, I was not right.


01:12:09.540 --> 01:12:10.900
CircleCI doesn't do Windows.


01:12:10.900 --> 01:12:17.080
- No, but yeah, AppVeyor, Travis, Azure, and GitHub do.


01:12:17.080 --> 01:12:21.540
- Travis does do MacOS, but we can't test it.


01:12:21.540 --> 01:12:24.540
- Theoretically, it doesn't.


01:12:24.540 --> 01:12:25.380
Gotcha.


01:12:25.380 --> 01:12:28.900
And then, yeah, I wonder about the M1,


01:12:28.900 --> 01:12:32.140
the Apple Silicon ARM versions versus the Intel versions.


01:12:32.140 --> 01:12:35.940
I don't know how well that's permeated into the world yet.


01:12:35.940 --> 01:12:39.860
But the fact that they have Mac at all is kind of impressive.


01:12:39.860 --> 01:12:43.340
- Nobody has an M1 runner yet.


01:12:43.340 --> 01:12:44.980
There are a few places I think now


01:12:44.980 --> 01:12:49.520
that you can purchase time on one, but no runners.


01:12:49.520 --> 01:12:51.060
Last I checked GitHub Actions,


01:12:51.060 --> 01:12:53.860
you couldn't even run it yourself on the M1.


01:12:53.860 --> 01:12:56.180
That may have changed, I don't know.


01:12:56.180 --> 01:12:57.020
That was a while back.


01:12:57.020 --> 01:13:00.320
- Yeah, I mean, there are some crazy places out there.


01:13:00.320 --> 01:13:02.800
I think there's one called Mac Mini Colo.


01:13:02.800 --> 01:13:03.760
I think that's what it's called.


01:13:03.760 --> 01:13:04.880
Let me see if that's,


01:13:04.880 --> 01:13:08.760
yeah, I think that's it.


01:13:08.760 --> 01:13:09.860
Yeah.


01:13:09.860 --> 01:13:14.080
So you can go to these places like Mac Mini Colo


01:13:14.080 --> 01:13:17.580
and get a whole bunch of Mac Minis


01:13:17.580 --> 01:13:21.100
and put them into this crazy data center.


01:13:21.100 --> 01:13:25.660
But you know, that's not the same as I upload a text file


01:13:25.660 --> 01:13:29.040
into GitHub that says run on Azure on GitHub actions.


01:13:29.040 --> 01:13:30.180
And then that's the end of it, right?


01:13:30.180 --> 01:13:32.740
You probably got to set up your whole,


01:13:32.740 --> 01:13:35.980
like some whole build system into a set of minis.


01:13:35.980 --> 01:13:38.780
And like, that doesn't sound very practical for most people.


01:13:38.780 --> 01:13:40.940
- Ideally with what you could do is,


01:13:40.940 --> 01:13:42.020
I mean, you just need one mini


01:13:42.020 --> 01:13:45.500
and then you set up a GitHub actions hosted runner,


01:13:45.500 --> 01:13:46.980
you know, locally hosted runner.


01:13:46.980 --> 01:13:47.820
- Yeah.


01:13:47.820 --> 01:13:48.980
- And other systems do that too.


01:13:48.980 --> 01:13:51.820
GitLab CI was big on that.


01:13:51.820 --> 01:13:53.580
You can do anything on GitLab CI,


01:13:53.580 --> 01:13:54.580
we just haven't tested that


01:13:54.580 --> 01:13:55.660
'cause they don't have those publicly.


01:13:55.660 --> 01:13:59.580
But if you have your own, you can do that.


01:13:59.580 --> 01:14:02.020
I know somebody who does this with basically with root


01:14:02.020 --> 01:14:06.820
and has a Mac mini and runs the M1 builds on that.


01:14:06.820 --> 01:14:09.260
But you could do that.


01:14:09.260 --> 01:14:10.140
I mean, I have a Mac mini


01:14:10.140 --> 01:14:11.940
and the lead developer of CI Buildwheel


01:14:11.940 --> 01:14:15.460
also has a Mac mini with the M1.


01:14:15.460 --> 01:14:17.180
He has an M1 of something, I don't know.


01:14:17.180 --> 01:14:18.020
- Sure.


01:14:18.020 --> 01:14:18.860
- Mine is a Mac mini.


01:14:18.860 --> 01:14:20.660
That's what I'm talking to you right now on.


01:14:20.660 --> 01:14:22.740
It's a fantastic little machine.


01:14:22.740 --> 01:14:24.460
- Yeah, it's very impressive.


01:14:24.460 --> 01:14:26.700
I love the way the boost histogram, it was fast.


01:14:26.700 --> 01:14:31.060
I have a 16 inch of almost maxed out MacBook


01:14:31.060 --> 01:14:32.380
and the Mac mini M1,


01:14:32.380 --> 01:14:34.780
it was faster on boost histogram than this thing.


01:14:34.780 --> 01:14:35.620
- Wow.


01:14:35.620 --> 01:14:38.260
Yeah, I have a maxed out 15 inches,


01:14:38.260 --> 01:14:39.340
a little bit older, a couple of years,


01:14:39.340 --> 01:14:40.980
but I just don't touch that thing


01:14:40.980 --> 01:14:43.140
unless I literally need it as a laptop


01:14:43.140 --> 01:14:44.140
because I want to be somewhere else.


01:14:44.140 --> 01:14:46.860
But yeah, I'm definitely not drawn to it.


01:14:46.860 --> 01:14:48.460
So you could probably set up one of these minis


01:14:48.460 --> 01:14:51.060
for 700 bucks and then tie it up.


01:14:51.060 --> 01:14:53.020
But that's again, not as easy as,


01:14:53.020 --> 01:14:56.820
you know, just clicking the public free option that works,


01:14:56.820 --> 01:15:00.340
but still it's within the realm of possibility.


01:15:00.340 --> 01:15:02.020
- Yeah, and Apple has actually helped out several,


01:15:02.020 --> 01:15:05.780
like I know Homebrew and a few others,


01:15:05.780 --> 01:15:06.940
they've helped out with,


01:15:06.940 --> 01:15:11.820
by giving them either Mac minis or something


01:15:11.820 --> 01:15:12.780
that they could build with.


01:15:12.780 --> 01:15:13.620
So they,


01:15:15.540 --> 01:15:18.900
I believe brew actually builds,


01:15:18.900 --> 01:15:21.700
home brew actually builds on real M1s.


01:15:21.700 --> 01:15:23.980
I know it does because the builds are super fast.


01:15:23.980 --> 01:15:24.920
I remember that.


01:15:24.920 --> 01:15:26.820
Like it builds root in like 20 minutes,


01:15:26.820 --> 01:15:28.100
the root recipe.


01:15:28.100 --> 01:15:29.500
I gotta maintain that.


01:15:29.500 --> 01:15:31.180
And the normal one takes about an hour


01:15:31.180 --> 01:15:32.900
'cause it's running on multiple cores.


01:15:32.900 --> 01:15:34.980
But it's like three times faster.


01:15:34.980 --> 01:15:36.500
It's done in like 20 minutes.


01:15:36.500 --> 01:15:38.780
It's just, I thought something was wrong


01:15:38.780 --> 01:15:39.820
when I first saw that.


01:15:39.820 --> 01:15:41.380
- It did, how could it be done?


01:15:41.380 --> 01:15:43.260
Something broke, what broke?


01:15:43.260 --> 01:15:44.100
Interesting.


01:15:44.100 --> 01:15:45.460
All right, Henry, we're getting really short


01:15:45.460 --> 01:15:47.660
We're a little bit over, but it's been a fun conversation.


01:15:47.660 --> 01:15:49.140
How about you give us a look at the future?


01:15:49.140 --> 01:15:54.660
Where are things going with all this stuff?


01:15:54.660 --> 01:15:58.700
>> Next thing I'm interested in being involved with is scikit-build,


01:15:58.700 --> 01:16:06.420
which is a package that currently sort of augments setup tools,


01:16:06.420 --> 01:16:12.340
but hopefully will eventually sort of replace setup tools as the thing that you build with,


01:16:12.340 --> 01:16:13.940
and it will call out to CMake.


01:16:13.940 --> 01:16:17.780
So you basically just write a CMake file.


01:16:17.780 --> 01:16:21.940
And this could wrap an existing package,


01:16:21.940 --> 01:16:24.860
or maybe you need some of the other things that CMake has.


01:16:24.860 --> 01:16:29.780
And this will then let you build that as a regular Python package.


01:16:29.780 --> 01:16:33.260
In fact, recently, somebody sort of put together CI build wheel,


01:16:33.260 --> 01:16:35.980
and scikit build, and the CMake example,


01:16:35.980 --> 01:16:39.980
and built LLVM, and pulled out just the Clang format tool,


01:16:39.980 --> 01:16:41.980
and made wheels out of that.


01:16:41.980 --> 01:16:44.260
And now you can just do pip install clang-format.


01:16:44.260 --> 01:16:45.660
It's one to two megabytes.


01:16:45.660 --> 01:16:47.860
It works on all systems, including Apple Silicon and things.


01:16:47.860 --> 01:16:50.020
I just tried it on Apple Silicon yesterday.


01:16:50.020 --> 01:16:52.100
And it's a pip install.


01:16:52.100 --> 01:16:54.180
Now you can clang-format C++ code.


01:16:54.180 --> 01:16:56.500
And that's just mind-blowing.


01:16:56.500 --> 01:16:57.780
You can add it to pre-commit.


01:16:57.780 --> 01:16:59.820
So pre-commit CI, it runs in two.


01:16:59.820 --> 01:17:02.020
I mean, I've been fighting for about a week


01:17:02.020 --> 01:17:05.140
to reduce the size of the clang-format recipe


01:17:05.140 --> 01:17:08.740
from 600 megabytes to just under the 250.


01:17:08.740 --> 01:17:10.780
That was the maximum for pre-commit.CI.


01:17:10.780 --> 01:17:15.620
And then you can now pip install it under about a megabyte


01:17:15.620 --> 01:17:16.700
for Linux.


01:17:16.700 --> 01:17:17.980
Oh, wow.


01:17:17.980 --> 01:17:18.740
That sort of thing.


01:17:18.740 --> 01:17:24.020
And I think that would be a really great thing to work on.


01:17:24.020 --> 01:17:28.460
It's been around since 2014, but it needs some serious work.


01:17:28.460 --> 01:17:30.780
And so I'm currently actually working on writing a grant


01:17:30.780 --> 01:17:34.340
to try to get funded to just to work on basically


01:17:34.340 --> 01:17:36.420
the scikit-build system and looking


01:17:36.420 --> 01:17:38.900
for interesting science use cases that


01:17:38.900 --> 01:17:42.300
would be interested in adapting or switching


01:17:42.300 --> 01:17:47.180
an existing build system over or adapting to it


01:17:47.180 --> 01:17:48.820
or taking something that has never


01:17:48.820 --> 01:17:53.900
been available from Python and making it available.


01:17:53.900 --> 01:17:54.400
Yeah.


01:17:54.400 --> 01:17:56.260
And yes, root might be one possible thing.


01:17:56.260 --> 01:17:57.220
Scikit-build packages.


01:17:57.220 --> 01:17:59.620
I'm looking for a wide variety.


01:17:59.620 --> 01:18:00.420
Yeah, how neat.


01:18:00.420 --> 01:18:01.700
Scikit-build packages.


01:18:01.700 --> 01:18:03.820
Fundamentally, just the glue between set of tools,


01:18:03.820 --> 01:18:05.660
Python module, and CMake.


01:18:05.660 --> 01:18:08.380
Yeah, so it's a real way to take some of these things


01:18:08.380 --> 01:18:11.220
or based on CMake and sort of expose them to Python?


01:18:11.220 --> 01:18:15.560
- Yeah, so you can just have a CMake package


01:18:15.560 --> 01:18:17.380
that does all the CMake things well,


01:18:17.380 --> 01:18:19.740
you know, like finding different libraries


01:18:19.740 --> 01:18:23.180
and that I'm a big CMake person.


01:18:23.180 --> 01:18:25.180
Honeybee basically uses it very heavily.


01:18:25.180 --> 01:18:27.380
Most C++ does, it's about 60%, I think,


01:18:27.380 --> 01:18:30.660
of all build systems are CMake-based now,


01:18:30.660 --> 01:18:35.260
going from Gitware's numbers, but they make CMake.


01:18:35.260 --> 01:18:40.400
But I think it's very powerful.


01:18:40.400 --> 01:18:41.900
It can be used for things like that.


01:18:41.900 --> 01:18:47.740
And it will really open up a much easier C++,


01:18:47.740 --> 01:18:50.580
more natural in C++ and C and Fortran and things like that


01:18:50.580 --> 01:18:52.740
and CUDA than is currently available.


01:18:52.740 --> 01:18:53.740
Setup tools is--


01:18:53.740 --> 01:18:56.780
Disutils is going away in Python 3.12.


01:18:56.780 --> 01:18:59.460
Setup tools is not really designed


01:18:59.460 --> 01:19:03.020
to build C++ packages or packages.


01:19:03.020 --> 01:19:05.860
It was really just a hack on top of disk utils,


01:19:05.860 --> 01:19:08.780
which happened to build just Python itself.


01:19:08.780 --> 01:19:09.620
- Yeah.


01:19:09.620 --> 01:19:10.440
- So.


01:19:10.440 --> 01:19:13.900
- Well, scikit-build sounds like the perfect tool


01:19:13.900 --> 01:19:15.940
to apply to the science space,


01:19:15.940 --> 01:19:18.740
because there's so many of these weird compiled things


01:19:18.740 --> 01:19:21.940
that are challenging to install and deploy


01:19:21.940 --> 01:19:23.180
and share and so on.


01:19:23.180 --> 01:19:25.680
So making that easier sounds good.


01:19:25.680 --> 01:19:28.660
All right.


01:19:28.660 --> 01:19:32.540
Well, I think we're probably gonna need to leave it there


01:19:32.540 --> 01:19:36.040
just for the sake of time, but it's been awesome


01:19:36.040 --> 01:19:40.060
to talk about all the internals of supporting scikit-hep


01:19:40.060 --> 01:19:43.860
and people should check out CI Build Wheel.


01:19:43.860 --> 01:19:46.420
It looks like if you're maintaining a package


01:19:46.420 --> 01:19:48.820
either publicly or just for internal for your organization,


01:19:48.820 --> 01:19:50.500
it looks like it'd be a big help.


01:19:50.500 --> 01:19:52.500
- Yeah, if it's got binary,


01:19:52.500 --> 01:19:54.500
any sort of binary build in it, yes.


01:19:54.500 --> 01:19:55.700
- Yeah, absolutely.


01:19:55.700 --> 01:19:57.300
- Not build is fine.


01:19:57.300 --> 01:19:58.300
- Yeah, right.


01:19:58.300 --> 01:20:00.740
And I learned about build, which is good to know.


01:20:02.500 --> 01:20:04.440
All right, so before you get out of here, Henry,


01:20:04.440 --> 01:20:07.180
let me ask you the two final questions.


01:20:07.180 --> 01:20:09.720
If you're gonna write some code,


01:20:09.720 --> 01:20:12.940
primarily Python code, what editor would you use?


01:20:12.940 --> 01:20:14.660
- Depends on how much, it'll either be VI


01:20:14.660 --> 01:20:16.940
if it's a very small amount.


01:20:16.940 --> 01:20:19.180
If it's a really large project that,


01:20:19.180 --> 01:20:23.500
let's say it takes several days, then I'll use PyCharm.


01:20:23.500 --> 01:20:26.220
And then I've really started using VS Code quite a bit.


01:20:26.220 --> 01:20:27.660
And that's sort of expanding to fill in


01:20:27.660 --> 01:20:29.540
all the middle ground and kind of eating in


01:20:29.540 --> 01:20:32.420
on both of the other, both of the edges.


01:20:32.420 --> 01:20:34.220
Yeah, there's some interesting stuff going there.


01:20:34.220 --> 01:20:35.020
Good choice.


01:20:35.020 --> 01:20:35.520
And then--


01:20:35.520 --> 01:20:37.820
But all with the VI mode.


01:20:37.820 --> 01:20:40.260
VI bindings, yeah, gotcha.


01:20:40.260 --> 01:20:42.500
And then notable PyPI package.


01:20:42.500 --> 01:20:44.700
I mean, we probably talked about 20 already.


01:20:44.700 --> 01:20:46.380
If you want to just give a shout out to one of those,


01:20:46.380 --> 01:20:46.940
that's fine.


01:20:46.940 --> 01:20:48.300
Or if you've got a new idea.


01:20:48.300 --> 01:20:51.540
I'm going to go with one that's--


01:20:51.540 --> 01:20:54.500
might not get mentioned, but I'm really excited by it.


01:20:54.500 --> 01:20:58.060
The development of it is--


01:20:58.060 --> 01:20:59.460
I think the developer's quite new.


01:20:59.460 --> 01:21:02.500
but what he's actually done as far as the actual package


01:21:02.500 --> 01:21:03.500
has been nice.


01:21:03.500 --> 01:21:06.580
It needs some nice touches.


01:21:06.580 --> 01:21:11.860
And that is plot text, P-L-O-T-T-E-X-T.


01:21:11.860 --> 01:21:13.220
And I'm really excited about that


01:21:13.220 --> 01:21:17.640
because the actual plots it makes are really, really nice.


01:21:17.640 --> 01:21:19.720
And they're plotted to the terminal.


01:21:19.720 --> 01:21:22.500
And it can integrate with French.


01:21:22.500 --> 01:21:24.900
And of course, I'm interested in it


01:21:24.900 --> 01:21:28.340
because I want to see it integrated with textual.


01:21:28.340 --> 01:21:32.740
I think a textual app that combines this


01:21:32.740 --> 01:21:37.740
with file browsers and things like that


01:21:37.740 --> 01:21:39.820
could be incredible.


01:21:39.820 --> 01:21:42.620
- Yeah, so you could do things like with a terminal.


01:21:42.620 --> 01:21:45.780
Yes, you could like cruise around your files,


01:21:45.780 --> 01:21:49.820
use your root IO integration,


01:21:49.820 --> 01:21:50.860
pull these things up here


01:21:50.860 --> 01:21:52.660
and put the plot right on the screen, right?


01:21:52.660 --> 01:21:53.740
But in the terminal.


01:21:53.740 --> 01:21:56.860
Okay, yeah, this is really cool.


01:21:56.860 --> 01:21:57.700
I had no idea.


01:21:57.700 --> 01:21:59.300
This is based on rich, you say?


01:21:59.300 --> 01:22:01.220
- It can integrate with rich.


01:22:01.220 --> 01:22:03.020
- It integrates with rich, okay, got it, yeah.


01:22:03.020 --> 01:22:04.980
- So as soon as I saw it, I started trying to make sure


01:22:04.980 --> 01:22:07.060
the two people were talking to each other,


01:22:07.060 --> 01:22:10.100
Will and the person who's developing this.


01:22:10.100 --> 01:22:10.920
- Yeah, exactly, all right.


01:22:10.920 --> 01:22:12.940
- So it makes these things work together.


01:22:12.940 --> 01:22:13.900
- That's very cool.


01:22:13.900 --> 01:22:15.020
They seem like they should, right?


01:22:15.020 --> 01:22:17.020
They're in the same general zone.


01:22:17.020 --> 01:22:20.780
- Yeah, and they do now.


01:22:20.780 --> 01:22:22.660
There had to be some communication back and forth


01:22:22.660 --> 01:22:25.460
as far as what size the plots were and things.


01:22:25.460 --> 01:22:26.300
- Right.


01:22:26.300 --> 01:22:27.420
- This should work in it.


01:22:27.420 --> 01:22:29.040
A good recommendation.


01:22:29.040 --> 01:22:30.200
Definitely one I had not learned about,


01:22:30.200 --> 01:22:32.340
so I'm sure people will enjoy that.


01:22:32.340 --> 01:22:33.620
All right, Henry, final call to action.


01:22:33.620 --> 01:22:36.700
People want to do more with wheels, CI Build Wheel,


01:22:36.700 --> 01:22:38.220
or maybe some of the other stuff we talked about.


01:22:38.220 --> 01:22:39.300
What do you tell them?


01:22:39.300 --> 01:22:43.940
- So we looked through, I think one of the best places to go


01:22:43.940 --> 01:22:45.260
is the scikit-hep developer pages,


01:22:45.260 --> 01:22:47.440
even if you have no interest in scikit-hep tools


01:22:47.440 --> 01:22:49.260
or hep2hep at all.


01:22:49.260 --> 01:22:50.900
And that sort of shows you how all these things


01:22:50.900 --> 01:22:52.740
integrate together really well,


01:22:52.740 --> 01:22:55.620
and has nice documentation.


01:22:55.620 --> 01:22:57.320
Of course, CI Build Wheel itself is nice


01:22:57.320 --> 01:22:59.840
and the PyPA, a lot of the PyPA projects


01:22:59.840 --> 01:23:03.320
have gotten good documentation, as well as


01:23:03.320 --> 01:23:05.200
packaging.python.org.


01:23:05.200 --> 01:23:08.840
We've updated that quite a bit to reflect


01:23:08.840 --> 01:23:09.800
some of these things.


01:23:09.800 --> 01:23:13.960
But I really like the scikit-help developer pages.


01:23:13.960 --> 01:23:17.360
I'm biased because I wrote most of them.


01:23:17.360 --> 01:23:17.860
Nice.


01:23:17.860 --> 01:23:19.040
Yeah, I'll link to those.


01:23:19.040 --> 01:23:21.320
And I'll try to link to pretty much everything else


01:23:21.320 --> 01:23:22.740
that we spoke to as well, so people


01:23:22.740 --> 01:23:24.520
can check out the podcast player show notes


01:23:24.520 --> 01:23:26.000
to find all that stuff.


01:23:26.000 --> 01:23:28.000
I guess one final thing that we didn't call out


01:23:28.000 --> 01:23:30.380
that I think is worth pointing out is CI Buildwheel


01:23:30.380 --> 01:23:32.860
is under the PyPA, the Python Packaging Authority.


01:23:32.860 --> 01:23:36.180
So it gives it some officialness, I guess you should say.


01:23:36.180 --> 01:23:38.020
- Yes, that happened after I joined.


01:23:38.020 --> 01:23:39.640
One of the first things I wanted to do was


01:23:39.640 --> 01:23:42.160
I thought this should really be in the PyPA.


01:23:42.160 --> 01:23:44.680
And I was sort of pushing for that


01:23:44.680 --> 01:23:47.320
and the other developers were fine with that.


01:23:47.320 --> 01:23:50.720
And so we brought it up and I actually joined the PyPA


01:23:50.720 --> 01:23:53.820
just before that by becoming a member of Build.


01:23:53.820 --> 01:23:55.900
So I got to vote on CI Buildwheel coming in.


01:23:55.900 --> 01:23:58.700
But it was a very enthusiastic vote, even without my vote.


01:23:58.700 --> 01:23:59.620
- Yeah, cool.


01:23:59.620 --> 01:24:01.380
- And PipX joined right at the same time too.


01:24:01.380 --> 01:24:04.420
So those were, it was an exciting time.


01:24:04.420 --> 01:24:06.060
- Yeah, PipX is a great library.


01:24:06.060 --> 01:24:08.060
I really like the way PipX works.


01:24:08.060 --> 01:24:08.960
It's a great tool.


01:24:08.960 --> 01:24:11.700
All right, Henry, thank you for being here.


01:24:11.700 --> 01:24:12.540
It's been great.


01:24:12.540 --> 01:24:14.740
Thanks for all the insight on all these internals


01:24:14.740 --> 01:24:17.460
around building and installing Python packages.


01:24:17.460 --> 01:24:19.180
- Yeah, there's also a lot more on my blog.


01:24:19.180 --> 01:24:21.820
So isinumpy.gitlab.io.


01:24:21.820 --> 01:24:23.940
So that's also a good link to look.


01:24:23.940 --> 01:24:26.160
that links to all those other things obviously too.


01:24:26.160 --> 01:24:27.000
- Awesome, all right.


01:24:27.000 --> 01:24:28.300
Thanks again for being here. - All right, thanks.


01:24:28.300 --> 01:24:29.900
- Yeah, see ya. - Thanks for having me.


01:24:29.900 --> 01:24:31.400
- Yeah, you bet. - It was fun.


01:24:31.400 --> 01:24:41.400
[BLANK_AUDIO]

