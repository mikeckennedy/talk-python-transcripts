00:00:00 - Everyone out there on YouTube, hello, Vince.

00:00:04 Hey, Garant.

00:00:05 - Hi.

00:00:06 - Hi.

00:00:08 - It's good to have you here on YouTube and the podcast in just a moment.

00:00:12 Make sure you're patient as we're getting started.

00:00:14 I know some of you were waiting for the live stream to start so very nice to have you here.

00:00:19 Now, let's kick this off, guys.

00:00:23 - Thanks to anyone who's here.

00:00:25 - Yeah, thanks for being here and if you have any thoughts or questions, please put them in the live chat if you're here watching live.

00:00:31 Vince Garant, welcome to Talk Python To Me.

00:00:33 - Thanks, Michael.

00:00:35 Thank you very much for having us.

00:00:36 Thank you.

00:00:37 - Yeah, thanks.

00:00:38 Nice to be here.

00:00:38 - Yeah, it's great to have you.

00:00:40 Vince, I guess it's welcome back for you, right?

00:00:43 - Yeah, I was on the show a while ago and I'm a big listener, love the show.

00:00:49 Yeah, I came here a long time ago to discuss one of the game theoretic libraries I work on.

00:00:55 So yeah, thanks for having me again.

00:00:58 - Yeah, you bet.

00:00:58 I love game theory, it's amazing.

00:01:00 We'll touch on that a little bit.

00:01:02 We're gonna do kind of a survey of a bunch of different areas of applied math and how Python and compare that with how R might solve those problems.

00:01:14 Some of the libraries involved, some of the techniques involved.

00:01:17 So lots of fun things.

00:01:19 I'm looking forward to diving into them with you.

00:01:22 - Awesome, awesome.

00:01:23 - But before we do, maybe we'll kick it off with Garen.

00:01:28 You're new, tell people quickly about how you got into programming, Python, math.

00:01:34 How'd you end up here on this show?

00:01:35 - So I'm a lecturer at Cardiff University in the School of Mathematics.

00:01:42 So I learned to program while I was doing my PhD.

00:01:45 And Vince here was actually my PhD supervisor.

00:01:49 So I essentially learned programming from Vince during that time.

00:01:54 - Nice.

00:01:56 Yeah, and I think during my PhD, I sort of realized or I learned that everything that we'd been able to learn during my like masters and stuff, it was all completely doable in open source software.

00:02:14 And that's kind of where I focused my PhD on then.

00:02:18 I sort of, one of my main projects during my PhD was building a library to be able to do some of this stuff.

00:02:25 And then, yeah, I passed.

00:02:28 - That's what general area was your PhD in?

00:02:33 I know math, but what specifically?

00:02:36 - Discrete event simulation was where I specialized in my PhD, but like in conjunction with some of the other techniques, stuff like Markov chains and queueing theory, which all sort of are different ways of solving the same sort of problem.

00:02:53 And that's where I sort of specialized in.

00:02:55 - Fun, very, very cool.

00:02:57 - We have a running joke with Garrent that one of his sub topics in his PhD that he became hyper specialized in as PhDs go is deadlock.

00:03:07 And so there's a tweet came up about a question about deadlock and all these jokes that come up.

00:03:13 We got very excited.

00:03:14 Well, I got very excited.

00:03:15 Like, "Garrent, someone's joking about your work." - That's fantastic.

00:03:20 Vince, you've already told your story.

00:03:22 Maybe just a quick update.

00:03:23 What have you been up to in the last couple of years?

00:03:26 - Yes, in the last couple of years, having the pleasure of working with Geraint now, now that he's a colleague of mine, but otherwise continuing my work on the Axtra library, which is the library we were chatting about just now.

00:03:41 And yeah, I'm still a mathematician at Cardiff, where the best part of my job is getting to teach people how to program.

00:03:51 And that's, I think mathematics is such a cool subject, but in a way you're only ever a theoretical mathematician until you can program the stuff you're doing.

00:04:02 Even the applied stuff is quite theoretic.

00:04:04 And then it's once you can code these things that are so powerful, it really kind of releases the magic of mathematics for want of a less cringy type of way of saying it.

00:04:15 So that's kind of what I really enjoy doing and what I keep doing.

00:04:19 Kind of what we're going to be talking about today.

00:04:21 - Yeah, absolutely, we're gonna touch on a bunch of different manifestations of that basically.

00:04:26 Cool, I wanna put out a quick disclaimer.

00:04:31 So we're gonna be talking about math things, obviously Python things as well on the Python show here.

00:04:36 The disclaimer is, I have some degrees in math, but I have not done anything with them for 20 years.

00:04:44 And therefore, I know just enough to ask bad questions and make poor assumptions.

00:04:49 So you all are gonna have to keep me on track and just tell me, no, no, no, Michael, you are totally misremembering that from your courses 20 years ago.

00:04:58 - The real problem is we might just be on just the other side of that boundary where we could confidently give you bad answers.

00:05:05 That's the--

00:05:06 (laughing)

00:05:07 - Look, if you say it confidently, I'm sure--

00:05:09 - Yeah, exactly, confidently giving bad answers is the problem.

00:05:13 - Yeah, sure, all right, cool.

00:05:15 - Well, let's kick this off by just talking about what is applied mathematics.

00:05:23 Because one of the final courses I took, it very much confused me, both in the content and just purely in its title.

00:05:34 This was a course at UCSD in the PhD program there.

00:05:37 The course was titled Applied Abstract Algebra.

00:05:42 - Right.

00:05:43 (laughing)

00:05:44 - I'm distracted.

00:05:45 (laughing)

00:05:46 - Why is it applied?

00:05:47 Because I really don't, I just, so let's just start out.

00:05:51 We're gonna be talking about solving applied math problems.

00:05:54 Like what the heck is applied math versus like, what am I doing, a calculus class where I'm solving a bunch of like formulaic type of problems versus real analysis where I'm chaining theories to derive new ideas or maybe it's a numerical analysis or stats, like what, where are we in the math world?

00:06:14 - Yeah, I think applied mathematics is an interesting kind of like term because in a way it's become a, it's come destroyed from its meaning in a lot of cases in that there's a whole area of applied mathematics as a subfield of mathematics.

00:06:31 That's not necessarily applied in any realistic sense.

00:06:36 I don't know what you think, Gav.

00:06:38 - Yeah, yeah, so I think traditionally what applied mathematics was when I was doing my undergrad was these sort of physics models where they assume no gravity and they assume no friction and stuff like that which doesn't seem very realistic to me at all. Whereas when me and Vince have been talking about applied mathematics sometimes that goes under another name called operational research or operations research that we call it applied mathematics because we're applying various techniques in mathematics to a situation, a real situation. Right. So that they are and I do think not necessarily by definition but just in general different techniques that apply to the more physicsy problems to the more management style problems maybe that is yeah but not by definition it doesn't have to be like that. It's just that's what people find useful. Yeah, in a way a lot of these labels in terms of the mathematical subfields and things are not terribly helpful because they create barriers between these fields. There's this problem I studied in my PhD where it's in a pure enumerative combinatorics trying to count these types of matrices. Really neat problem actually, 'cause a whole other series of conversations.

00:08:05 And the most elegant proof that came for this conjecture came from statistical mechanics, whatever that means, but it's a field of mathematical physics, and it's where like all these boundaries from fields not always are helpful, whereas really the techniques are the helpful ones and knowing when to apply them.

00:08:24 Yeah, so I think the definition that we would use for the purpose of what we're talking about today in terms of applied mathematics are just, without necessarily going to an incredibly high level of mathematics where you're talking about the stuff that they do at CERN that is certainly applied, you know, there's some very low hanging fruit.

00:08:46 I don't know if that's the right word.

00:08:47 Low hanging fruit of where mathematics can vary much.

00:08:50 - Like day to day trumps, yeah.

00:08:51 - Exactly, day to day.

00:08:54 And it's where you take these ideas of, you know, in high school where you're told, oh, matrices are important because computers can do mathematics really quickly with them, but you don't do it with a computer.

00:09:03 So, you know, who cares, right?

00:09:05 - Yeah, exactly.

00:09:06 - But I'm happy with the matrix.

00:09:07 - They tell you how to do it with computers and then you, yeah, then you proceed to do it by hand for the next two weeks, yeah.

00:09:13 - Exactly, two weeks if you're lucky.

00:09:15 - I wish I could tell you.

00:09:17 I wish I could tell you that, but yeah, exactly.

00:09:18 You're like, well, I could tell you whether this matrix is singular or not, but I have no idea why I would do that, right?

00:09:26 So this is sort of the next step, like, well, what would you, if you had that knowledge, that kind of knowledge, what would you do with it?

00:09:33 Like what kind of problems could you answer?

00:09:34 And some of the examples that you all cover in this book that we're gonna highlight a little bit are things like if you have two businesses that are competing, what choices might they make?

00:09:45 Or if, no, I know this is extremely theoretical and it's never gonna happen, but what if there was like a pandemic and there were people who were sick?

00:09:55 (laughing)

00:09:56 - Probably not that fun to be in.

00:09:57 (laughing)

00:09:57 We're using it to make weird trade-offs about society, like should we shut everybody in a basement?

00:10:02 Should we make them behave in different ways?

00:10:05 What's the cost versus benefit analysis?

00:10:09 And those kinds of things, right?

00:10:11 And all these things that you can, without needing too much high-level mathematics, you can describe them mathematically relatively simply.

00:10:20 And then just with a little bit of code, you can really do cool stuff with it.

00:10:26 It doesn't take much code, you know, and that's where Python really comes in.

00:10:30 - Yeah, for sure.

00:10:31 One of the things that we'll see throughout here is there's a bunch of different examples across these different areas of math and these different types of problems in different libraries that apply to solving them.

00:10:42 But the thing that's cool is every one of those solutions fits within a couple of pages on the long ones, right?

00:10:51 For Jupyter Notebooks that have the solutions plus have some of the output of the answer, right?

00:10:55 It's not a ton of code, is it?

00:10:58 - No, no, exactly.

00:11:00 And that's, this kind of touches on something else that we were gonna talk about is the idea that a lot of the time when these things are taught, they're taught with specific pieces of software, mostly commercial pieces of software.

00:11:18 And then the topic itself is kind of not separated from the software used to attack the topic.

00:11:24 we often go into meetings with industrial partners for research products, and they talk about the tool as opposed to the idea.

00:11:30 And that's a pity because that makes the idea much more complicated than it is, because all of a sudden you have to take apart this really complex idea.

00:11:39 But often with open source software, or with Python and R, which are the two examples that we've used, it's like three lines of code to find out the effect of a pandemic or other things.

00:11:53 - I also think it demystifies things a little bit because if what you do is you go to some expensive polished piece of software like Maple or something and you can say, you say, well, I could ask this expensive, complex, huge piece of software a question and it can magically give me the answer.

00:12:19 - Yeah.

00:12:22 - And it's great that you know you have this very fancy tool, but it doesn't necessarily reveal a ton of understanding because of it, right?

00:12:30 - Yeah.

00:12:31 - Yeah, cool.

00:12:32 - Yeah, and an idea that's beginning to form in my head, I was just saying this to Gary, I just haven't fully formed, I think there's a blog post that no one's gonna read that I wanna write one day about, you know, the ethics of it, about teaching these fancy commercial softwares, why these great companies give out these educational software is that they immediately have lots of users of the software that don't know how to use anything else. And I wonder if ethically as educators if that's okay. I think we should make more of an effort to separate the concept from the software. And I was kind of like saying like I don't think I don't think we should teach any commercial software.

00:13:16 Geraint, you made a good point.

00:13:18 - Yeah, I don't really have a problem with teaching a particular topic through commercial software as long as we teach it in a separated way so that you know, once you've formulated the concepts and the ideas mathematically, you can use whatever software you want.

00:13:35 But in the classroom, we happen to have this expensive license, we're gonna use this.

00:13:40 But outside of the classroom, there are other things you can use.

00:13:43 - Yeah, well, I think there's a couple aspects here.

00:13:47 One, Vince, you spoke about the ethics of it.

00:13:50 Is it the right thing to do to basically reinforce this loop?

00:13:53 - Exactly, exactly.

00:13:56 - That entrenches some of these.

00:13:58 The other part is, if you're in the UK or if you're in the US and you say to your student, probably especially if you're in the US, they're used to getting paid so much.

00:14:10 I just paid for both my daughters to go through college.

00:14:12 So I'm aware that here you pay a lot for the actual tuition, but many places you'll say to students, what is it in the UK?

00:14:22 Is there, how is college, what's the affordability?

00:14:25 I know in Germany and other places, but I don't know what that was.

00:14:29 - So it's a touchy subject in that tuition fees have just come in.

00:14:36 And so cost of universities here are equivalent, not far off to in-state tuition in public universities in the United States.

00:14:45 I think they're not far off.

00:14:48 But then we get to charge, and I'm saying we, very, very not talking about me, but we get to charge whatever we want to a certain extent to people from the European Union and then even more to people from outside of that.

00:15:02 Actually, I don't even know if that's true about the European Union because of recent events anymore.

00:15:08 But yeah.

00:15:09 So yeah, there is a cost.

00:15:13 - Sure, okay.

00:15:14 So going back though, my point about the ethics was, it's one thing to be in the US or places in Europe where we have a decent amount of money.

00:15:24 It's another to say to somebody, you have to pay $500 for this software to learn the subject, right?

00:15:33 where 500 US dollars might be the yearly income for an employed person and their student.

00:15:39 It seems like there's a lot of good would be done by building up maybe the missing gaps that force or encourage people to go to this commercial software, building that up rather in the form of SciPy libraries and the Python data science stack in general.

00:16:05 So that it's free, open source and all those things.

00:16:07 - I think that would apply for all subjects.

00:16:10 I think really close to what we're talking about here is with mathematics, I think it's really frustrating 'cause maybe I'm thinking too purely now, but I mean, pure of heart, not pure mathematics.

00:16:25 In terms of like, mathematics is just such a clean and minimalistic subject.

00:16:30 You need a pen and a paper to do it.

00:16:33 And if all of a sudden we're teaching people to use a pen and paper to do mathematics and saying like, oh, but you can only do it with a pen made by a BIC.

00:16:41 But don't worry, BIC is--

00:16:44 - Long pen is the only one that can do calculus.

00:16:46 - Exactly, right?

00:16:47 And then once you graduate, if you want to write down this idea again, you have to use a BIC pen, but you have to pay for it yourself.

00:16:55 And I really do think mathematics, evolution of mathematics and a lot of science, I would argue, is into computing, right? Is into getting computers to do it. And that extension of using the pen now is to use code.

00:17:09 And yeah, it's...

00:17:10 I do think, I think, for me at least, I think one of the important things is our separation of mathematical concepts to software. Because it's a lot less of a problem, but there's still a problem going, the only way you can do this is by using free open software. There are some places, unfortunately, that are not allowed to use open software because they think there's security problems and stuff. So if you've only taught open software, then certain, like the NHS, for example, I know they discourage using open software. So maybe you think then, think, "I can't do this maths thing anymore." But if you've separated the concept from the software, at least you know the concept and you know you've got choices.

00:17:53 Yeah, absolutely. I think that's very true. Separating the concept from the software is key where possible and I think perhaps we don't always do a good job of that. And here I am speaking as an industry, I think sometimes we often... I've been to conversations where people have said, "I need to use MATLAB. Can you help me with MATLAB?" And it turned out they wanted to know how to numerically solve a differential equation. They didn't want to do math lab. They just wanted to solve a numeric equation. They just did not know that that's what they were doing.

00:18:24 I do want to move off of this so we can dive into the applied math aspects. But I think one other final thing on this is I feel like professors, especially as they get older, they've taught a certain way with a certain set of tools for 20 years.

00:18:51 And you know what?

00:18:52 That course they wrote, they already have the materials and the exercises and all of that.

00:18:57 And the idea of saying, "Well, we're going to now throw out this and grab some new open source library." I mean, there's 350,000 libraries on PyPI and they're always changing and turning and and something new is coming along.

00:19:09 And it's maybe a lot to ask, but also maybe not too much to ask to say, look, you should keep up with these things.

00:19:18 And if there's a new way to present it to your students, not because even some of the ethics stuff, but you might be doing a disservice to your student to say, look, the only way that you can solve these problems is with say Fortran, or the only way you can do is with a $2,000 toolbox extension to MATLAB.

00:19:35 That's the way that you have to go to solve this.

00:19:37 here's this super well-respected professor telling you that's how you do it.

00:19:40 Well, that's not actually how you do it.

00:19:41 That's how they've done it for 20 years.

00:19:43 And so there's a lot of inertia there, right?

00:19:46 I'm really new at being a lecturer, so maybe I'm being really naive here, but it is an effort to keep up with all this stuff, but that's our job.

00:19:58 Our job is to keep up with the latest maths.

00:20:01 Anyway, if I was still using, if in 30 years time, I was still using the same math that I'm using today, I wouldn't be doing my job properly.

00:20:08 So why is the same true with software?

00:20:10 Yeah, I think it actually, frankly, comes back to ethics in that it's unethical to not make the effort to update your training.

00:20:21 And if we were talking about doctors and surgeons, they do need to learn new things as the science evolves.

00:20:29 I think it could probably with lecturers, professors, higher education, it comes back to that dichotomy between research and teaching and how teaching is viewed.

00:20:43 But yes, absolutely.

00:20:44 I think, yeah.

00:20:45 In a way, I would be disappointed if at the end of my career, I'm still teaching Python.

00:20:51 In a way, I also hope I have.

00:20:53 in a way.

00:20:54 Yeah, yeah.

00:20:55 Well, but not 2020 Python, but 2050 Python or whatever it is, right?

00:21:00 Absolutely.

00:21:01 Yeah, exactly.

00:21:02 Oh, Python's already on.

00:21:03 I started teaching Python 2, and then I had to figure out how to teach both.

00:21:08 Yeah, exactly.

00:21:09 Yeah, yeah.

00:21:10 Sorry to cut you off.

00:21:11 So you started teaching Python 2, and then now you've moved on.

00:21:15 And then I had to figure out how to deal with Python 2 and 3, and now I just teach Python 3, and yeah.

00:21:20 Yeah.

00:21:21 I can't believe that transition took so long, but well, there it is.

00:21:26 All right, well, let's dive into some of the problems.

00:21:29 And we're gonna, more specifically, I'm gonna take this book that you all created and use it to sort of guide our exploration of both some of these problems, how we might solve them with Python, and some of the libraries that make it possible.

00:21:44 I guess one of the things that struck me about that journey is that there's not that many external packages that are required.

00:21:53 It's not like, well, this one takes 10 to solve this problem.

00:21:56 This one takes these complex, these five.

00:21:58 If you put them together just right, you get the answer.

00:22:00 So that'll be fun.

00:22:01 But tell us a bit about this book, Applied Mathematics with Open Source Software.

00:22:06 - Yeah, so publisher, this is an academic publisher, which amongst other things means the book is really too expensive.

00:22:17 But they often just send out emails to people saying, hey, could you write a book?

00:22:23 It's not necessarily a source of flattery.

00:22:26 But we got one of these emails and Geraint actually had just given a talk at PyCon UK.

00:22:35 I don't know if you want to say a little bit about the talk you gave, Geraint.

00:22:39 - Yeah, so it was very much a precursor to this book where I had given an introduction to the field of operational research, which is how we label this certain type of applied mathematics and all the different problems that could occur.

00:22:56 And I think the title of the talk was, there's a library for that, because every sort of problem that we could come up with, you could pip install a library and in a function or two solve the problem, which was a neat little, oh, there it is, it's a neat little.

00:23:10 - Is this it?

00:23:11 - Yeah, yeah.

00:23:12 - If I could just interrupt the call for proposals for PyCon UK closes on Saturday.

00:23:18 So if you're thinking of talking, please submit a talk.

00:23:21 - So yeah, and it was just really neat that we had these, like what we call standard problems.

00:23:30 It was essentially our postgraduate MSC course that we teach, but instead of teaching the maths, there was one or two Python functions that solved it for you And then, yeah, that eventually evolved into this book where instead of each little topic being a couple of functions, we filled out chapters on some of the theory, and again, tried to separate the maths and the programming, emphasizing that by introducing another language, which was R, to show that you can do it in two different ways, and the software is independent of the problem.

00:24:01 - Yeah. - Yeah.

00:24:02 - And we kind of, I think you and I have described it, 'cause every now and then as we were writing the book, we kind of stop and go, "Wait, who's the book for?" And as we were making decisions about how exactly to do something, we're like, "Wait, who's the before and after?" I won't necessarily...

00:24:17 Well, maybe we should talk about that.

00:24:19 But I think we've written a book that's meant to be useful to people wanting to get started either with the mathematical field problem or with how to actually do it with the code.

00:24:34 And so every chapter has got the same kind of structure that describes a problem.

00:24:39 Then it describes the basics ideas between behind the theory of the problem or the mathematical tools, the theory behind the mathematical tools.

00:24:47 But again, not going into too much depth, kind of what I said before about, you don't need to understand all of Newton and Leibniz's calculus to be able to kind of predict the outcome of a pandemic.

00:25:00 And then it just solves the problem.

00:25:04 original problem, it solves it in two separate ways, the R and the Python, using R and Python.

00:25:09 And the final kind of section, every chapter is pointing at a bunch of literature on it, which should be useful.

00:25:17 Yeah, and more broadly, you might be able to, these types of problems appear and what you might be able to do with them.

00:25:23 But the really cool stuff with the publisher is that we had an ongoing kind of conversation before the start.

00:25:28 Garren and I were both like, well, the book has to be open.

00:25:32 And so they've agreed, like all--

00:25:36 there's not a PDF floating around online of the book.

00:25:38 But all the source files are there.

00:25:40 So all the LaTeX files are there.

00:25:42 All the Jupyter notebooks are there with the code.

00:25:45 We haven't quite gotten all our Markdown files up yet, but they are theoretically all there.

00:25:50 And so the book is very open, which we're happy about.

00:25:55 Yeah, that's great.

00:25:57 - It is very shiny new.

00:25:59 It still has that new book smell.

00:26:01 It was released just almost exactly a month ago, right?

00:26:05 - That's right, that's right.

00:26:07 Yeah, yeah.

00:26:07 Keep on saying I've got to have Garent over to celebrate, but we don't have enough doing that.

00:26:13 - I have to sign a copy for my nan.

00:26:17 (all laughing)

00:26:19 - All right, now before we dive into the various problems on the Python side, while we're still kind of talking a little bit high level, this is, one of the interesting aspects here is the Python and R aspect.

00:26:36 So when you go through each chapter, which is, I think I agree with you that it's pretty approachable, even if you don't have a, you don't have to have like a master's in math or specialize in that area for it to make sense.

00:26:48 It doesn't have, if you don't really want to see a ton of formulas, yeah, it's not super intense.

00:26:53 - I think that's our first official review, Michael.

00:26:55 Pretty approachable, it's fantastic to hear.

00:26:57 (laughing)

00:26:59 - Well, like I said, my math, while I study a ton of it is highly rusted and it was pretty approachable for me, so there's that.

00:27:07 But maybe just talk about putting R and Python side by side for solving a set of different problems.

00:27:14 What are some of the takeaways either of you got from that?

00:27:17 - Yeah, so one thing I wanna say, - Yeah, I'm sorry, I'm interrupting you there, but one thing we wanted to do here, 'cause we would, well, I would certainly describe myself as a Python person, not an R person.

00:27:33 I know R, I write R, I've written a book in R, but I would certainly describe myself as a Python person in that.

00:27:38 - If you're gonna sit down and write something, you would pick Python first.

00:27:41 - I would pick Python, exactly.

00:27:44 But also, I'm embedded in the Python community, I listen to some good Python podcasts, I'm a Python person and I can look at some Python code and the joyous, that looks very Pythonic, right?

00:28:01 I can tell you that.

00:28:04 And so we were kind of aware that we didn't want to translate the Python to R when we were writing this.

00:28:11 We wanted to write this as close to R people as we could.

00:28:16 I don't know if we managed that, but that was something as well that we were aware of.

00:28:21 It's not just translating languages.

00:28:24 Geraint, did you--

00:28:25 - In Python, yeah, in Python we have the word Pythonic for idiomatic Python.

00:28:30 Do you all know, is there a word for that in R?

00:28:32 Or is it just idiomatic R?

00:28:35 - I don't know, I don't know, yeah.

00:28:37 - I don't either.

00:28:38 Geraint, you were gonna say something, jump in here.

00:28:41 - So I was gonna say, as we were writing the book, we noticed that there were certain problems which the R and the Python lined up exactly, not from design, just from, if we were gonna approach these independently, it is pretty much exactly the same way to solve it.

00:28:59 There were some problems where we had to reformulate the mathematics because the way to do it in R was so different to the way you do it in Python.

00:29:10 That doesn't mean the math's changed, we just had to reformulate it, re-communicate it so that we could write it down in R.

00:29:17 And then there were some problems again where we have to use different mathematics to solve it in Python and R because of the availability of libraries and stuff.

00:29:26 So I thought that was really, really neat.

00:29:28 And I think that emphasizes again, the separation of concept to software because sometimes you did have to do very different things in different softwares.

00:29:38 - My favorite chapter on this is the one that is your specialty, Darren, the discrete event simulation chapter where I forget the name of the two theoretic ideas about discrete event simulation, process-based and what's the other one?

00:29:58 - Yeah, so there's process-based and there's the event scheduling approach.

00:30:02 There's two different ways of approaching discrete event simulation and the standard library in R to do it is process-based and I don't wanna call it the way to do it in Python, The way we've said in Python to do it is by using the Q libraries, CIW library.

00:30:22 - The only reason Gerard doesn't want to say it's the way to do it in Python is because it's using his library, the library that he's the maintainer of.

00:30:29 (laughing)

00:30:31 - Yeah, nice.

00:30:32 - Both those libraries, I'm pretty sure that underneath, well, I know how Q works underneath, but the Simmer, which is the R version, I'm pretty sure underneath they work very, very similarly.

00:30:46 There's not many ways you can do different ways of discrete dimensionalization, but the way you formulate the problem is very different.

00:30:54 And going through that in the book and going in Python, you have to take like an overhead worldview where you look at the system, whereas in R you have to take a sort of, you have to put yourself mind in the, sorry, put yourself in the mind of the customer and go, what is the customer doing right now rather than from a systems point of view in order to formulate the problem before you could just then go and solve it.

00:31:20 I just thought it was very, very interesting that the way to do it in each language was so different and yet probably underneath it's doing exactly the same thing.

00:31:28 You get the same answers out.

00:31:29 You just got to formulate it in a different way.

00:31:31 - I think that's such a nice example where diversity, and I'm using diversity from the way that languages do things.

00:31:37 I think that's the best chapter in the book, frankly.

00:31:40 I think that's the best chapter in the book because you not only do things differently from a programming point of view, but because you do things differently from a programming point of view, the theoretic discussion allows you to kind of, yeah, give a really good understanding of these two ways of doing this.

00:31:55 - Yeah. - Yeah.

00:31:58 - Yeah. - Something else that's kind of worth mentioning about the Python in R bit.

00:32:03 I don't know if this is a terrible address, but I like tests.

00:32:09 I don't like trusting any code.

00:32:11 I like writing tests all the time.

00:32:13 And we came to this immediate thing So we wanted the book to be tested.

00:32:16 We wanted to know the code was correct in the book, but we wanted to have these two different languages.

00:32:22 And we didn't want to kind of use the standard doc test notation for the Python.

00:32:26 And then we wanted to find something that would work for the R, et cetera.

00:32:29 So we actually wrote a little language of Gnostic doc tester that basically runs through and tests all the code in the book for us.

00:32:39 And theoretically, when we write the second edition, when we add Julia as well, it will be able to handle that as well.

00:32:44 (laughing)

00:32:45 - Yeah, I guess Julia is another option that could have possibly shown up in here.

00:32:50 Pretty interesting.

00:32:53 I guess it's worth pulling this up.

00:32:56 It's probably worth pulling up the Stack Overflow trends and you're putting those in there.

00:33:04 - Yeah.

00:33:05 - Right, so we have R, we've got Julia.

00:33:10 I don't know where these all lie right now, but I would imagine the graph, the graph looks a little bit different across these.

00:33:21 Just for people listening, I would say, you know, R is certainly growing.

00:33:25 It's actually growing pretty healthily compared to many, many programming languages.

00:33:31 And it's not going crazy, but it's going across.

00:33:35 You've got Python, which if anyone's looked in the last couple of years, it's just done insane stuff in terms of popularity - Over there, so there's that.

00:33:45 And then Julia is, it's, I don't know, I can't really read it.

00:33:50 It's like 0.01% versus say like 2% for Julia, for R, excuse me, and then for 16% for Python.

00:34:01 And there is something to be considered about choosing not just a language, 'cause the language has a cool way of doing async or its generators are beautiful, but choosing a language for its ecosystem as well.

00:34:14 - Yeah.

00:34:15 - And I think that's where it touches on this here, right?

00:34:20 - But also for the community that's already there, I think, at least in the area of mathematics that me and Vincent are in, I think R and Python are quite prevalent, but they're also used-

00:34:34 - Maybe they're people there, right?

00:34:37 - Yeah.

00:34:37 - But I think that also used in different ways, would you agree Vince?

00:34:43 I would say Python's very, because of PyPy, things like out of the box, there's one library to do this and it's their way to do it.

00:34:54 Whereas with R, people tend to write their own stuff and then upload it.

00:35:00 - Yeah.

00:35:01 - So you might get lots and lots of different ways of doing the same thing, but each one might specialize slightly in a different way.

00:35:09 Whereas with Python, I feel like there's one library that does it really, really well.

00:35:15 I think people just use the ecosystems in different ways.

00:35:18 - Yeah, both those two things are often talked as strengths of either library, right?

00:35:22 The fact that Python has that one way to do things, and then the seven different ways to do string formatting conversation comes up.

00:35:28 Then the fact that R is kind of like closer to the science.

00:35:37 I don't know if that's even accurate, but that's the feeling I guess.

00:35:40 It's also a strength, right?

00:35:42 - Yeah, the reason there's lots and lots of libraries to do the same thing is 'cause they've each specialized in something which a new academic has just written a paper on.

00:35:50 And that's why there's lots of different ways of doing it.

00:35:52 - Yeah.

00:35:53 - All right, sure.

00:35:53 And maybe, you know, like out in the audience, the ninja says, "R is really powerful "when it comes to things like analytics and so on." So maybe there's certain areas where...

00:36:05 - Yeah.

00:36:06 - You know, there's the libraries you can pick, there's definitely better.

00:36:08 Okay, now we talked about the book.

00:36:10 The book also, as you pointed out, has an open version where you can find it on GitHub, which obviously we'll link to.

00:36:20 And in here for each one of these, you've got some examples which are basically the, at least for the Python side, the Jupyter Notebook examples here.

00:36:33 So I thought maybe we could sort of talk through a little bit of what is the problem and then, maybe really first quick, quickly introduce what this area is.

00:36:44 And then we can talk about the problem, the example problem you put out there and some of the libraries and techniques there.

00:36:53 - Sure.

00:36:54 So the chapter two, which you're looking at right there, uses is about a mathematical concept called Markov chain.

00:37:04 So it's this probability model that you loosely go that as the system changes over time, the system is in a particular state and then you go with a given probability of being in that state to another state and you can go around like that.

00:37:26 That's not the best explanation I've ever given.

00:37:28 I've explained that many times, that was probably one of my worst explanations.

00:37:32 But Markov chains can be used to model queues. And there's a whole field of mathematics called queuing theory, and that is often used as a very applied problem. And so the problem we got here is, imagine you've got a barber, and the barber has kind of two decisions, how many chairs they have to cut hair in and how many chairs they have to keep people waiting for a chair.

00:38:00 And obviously that has an impact on the queue, right, of how long people have to wait to get their hair cut.

00:38:05 And you can use Markup Change to build up a model and find the probability of having to wait relatively simply.

00:38:14 I don't know if you want to clean up what I just said.

00:38:18 (laughing)

00:38:20 - No, yeah, so I think, the model then would be the set of states and the probabilities of going between each states from the state you're in.

00:38:32 And that can be written as a matrix.

00:38:35 And the neat thing then is there's loads and loads of linear algebra techniques, which at this point you don't really need to know about, but there are linear algebra techniques, which stuff like NumPy can just do for you, which if you know which techniques to use, you know how to interpret that as a real life interpretation.

00:38:54 So for example, there's one certain set of equations you can solve using our Markov chain, sorry, using our matrix, which will give you the long run probabilities of being in each state.

00:39:05 There's another certain linear algebraic technique which will give you something else.

00:39:10 And that's what this is.

00:39:12 - Nice.

00:39:13 - Yeah, the problem is essentially comes down of solving a matrix equation, which you can write down and understand with basic mathematical knowledge.

00:39:23 And then that can be solved.

00:39:26 This goes back to what you told me in high school, that matrices are great 'cause computers can do them fast, but then you never actually get to do that.

00:39:30 You just write down equations.

00:39:33 But it's just a call to NumPy's, the NALS library can just solve it immediately for you.

00:39:39 - It's amazing.

00:39:40 Yeah, so the problem here to make this applied or more operational, I guess, that you all put out there says you have a barber shop and the shop notices that there's a lot of customers who are, they come and the shop is full and the waiting room is full and people just leave.

00:39:57 And I, you know, since COVID I've just decided I'm cutting my own hair.

00:40:01 I can't, it took too long to find a barber or anything that worked.

00:40:04 And then after that, I kind of figured it out.

00:40:05 But there used to be this place I would go to and boy, did it need this problem.

00:40:09 It would be, you would go there and it'd be like an hour and a half wait.

00:40:13 And you know, you just, all the time.

00:40:16 And you never knew, so they would solve it by giving away free beer to people while they wait, which was nice.

00:40:22 But this one wants to solve it more in a more formal business way where they would have people just wait less.

00:40:28 So it says you have two barber chairs, there's room for four people in the waiting room, there's about 10 customers an hour, and it takes about 15 minutes to serve a customer.

00:40:40 How can we minimize or how do we change things so that we don't have customers leaving 'cause they come in and see a full waiting room and take off, right?

00:40:51 Yeah.

00:40:53 - So instead of knocking down a wall and building a bigger waiting room or spending a lot of money on an extra barber chair and just seeing the effect and maybe five years later trying the other way, you can just mathematically model this.

00:41:06 And this is a good example of, I think, what we've described as applied mathematics so that you can answer these cool questions.

00:41:13 - So you could say, well, maybe we need a bigger waiting room or maybe we need more barber chairs or something like that, right?

00:41:19 And then you can make that trade off.

00:41:22 Yeah, so let me find the, this is the numpy, numpy.linalg magic.

00:41:34 And so basically you set it up so that you set up all these scenarios in these constraints And then you just say, "NumPy, solve it," right?

00:41:43 - That's pretty much it, yeah.

00:41:45 Mathematically, you write down this matrix A and another vector B, and you're solving an equation AX equals B.

00:41:55 Most of the code is just getting the matrix set up and the B set up.

00:42:00 Actually, most of the code is the doc strings.

00:42:03 And then, yeah, you just use the linalg.leastSquares.

00:42:06 That's one of many ways you can do it.

00:42:08 least squares is actually getting an approximate solution to the linear algebraic equation.

00:42:16 And there's various reasons why that's a better idea than solving it directly.

00:42:19 And yeah, it's just basically one line.

00:42:22 - Well, I think one of the neat things about this then is all that maths you sort of learn in school or even first year university where you're doing sort of row operations and stuff.

00:42:36 That's not the mathematics that matters here.

00:42:38 The mathematics of math is, what is the matrix you need to do that to?

00:42:42 And once you've done it, how do you interpret the result?

00:42:45 That is the mathematics.

00:42:47 It's not the actual operations that you spent so long doing in first year university.

00:42:53 That's such a good point, Garen.

00:42:56 That's such a good point, Garen, because I think what is mathematics is an interesting question, right?

00:43:00 And is it being able to differentiate a whole bunch of quadratics really fast?

00:43:05 Or is it knowing which quadratic you need to differentiate, right?

00:43:08 And I would argue that it is that, you know, it's knowing what, really knowing what the problem is so that, okay, then the actual specific mathematical technique, well, who cares, right?

00:43:20 - Sure.

00:43:20 Well, Vince, people so often say, oh, I'm never gonna use that.

00:43:24 I'm never gonna do these things.

00:43:26 I can do that with a calculator, or I can do that, you know, and I think a lot of that might be slightly misplaced.

00:43:32 I'm not gonna say misplaced, a somewhat misplaced focus on some of these things, right?

00:43:37 Like if you could say, well, spend a little time showing you how to differentiate, then we'll show you how to actually solve problems with that instead of just getting, you know, more and more complicated techniques that you can apply, I guess, integrations more of a pick and choose or I like to find which thing applies, but still, you know, instead of going deep, deep, deep, deep, deep into that on the first year stuff, yeah.

00:44:02 - Yeah, absolutely.

00:44:03 You had someone on the show a little while ago called Allen Downey.

00:44:06 - Yeah.

00:44:07 - And he writes a lot of really great books.

00:44:11 And I remember what he said on your show was about, he likes to think of teaching these things in the other way that code allows you to do these things immediately.

00:44:19 So instead of waiting through and waiting and having to have faith that there's gonna be used to it, you can just flip that around, you know, and understand what it is.

00:44:29 I think there's also a lot of that in what we should be doing.

00:44:33 - Yeah, that's a very good point.

00:44:34 I totally agree.

00:44:36 All right, wrap this one up.

00:44:37 You were able to find that it would be better to increase the number of barbers by one than increase the waiting room capacity by two.

00:44:46 'Cause I think the chance of the shop being full is like 23% if you had--

00:44:50 - Something like that, yeah.

00:44:51 - Yeah, yeah, versus like 8%, you know, those kinds of things.

00:44:56 And those are really concrete numbers that you could go to a business and say, you hired us to analyze these things.

00:45:02 We gathered all the necessary information like average time, how much that might vary and those kinds of things.

00:45:10 And here are your choices and here are what are the rough expected outcomes.

00:45:14 Like that's really, really valuable information.

00:45:17 And I am very sure that most barbershops even chains don't do this kind of analysis.

00:45:25 - Not enough linear algebra going on in barbershops.

00:45:27 That's an interest, that's a bold thing.

00:45:29 - I know. (laughs)

00:45:31 - And this question, so a lot of the research Geraint and I do is within healthcare.

00:45:38 So we work with hospitals solving essentially very similar problems to the one that we've just discussed.

00:45:43 We're keen to avoid too much healthcare because that's what we do so much of.

00:45:47 But yeah, if you get rid of the idea of a barber shop, you talk about a ward, how many beds are on the ward, how big's the parking lot for ambulances to wait in, et cetera, et cetera, that becomes very important and very powerful and not something you need to spend thousands of pounds or dollars on licenses for, not necessarily even have a huge understanding of underlying mathematics.

00:46:14 It's all right there.

00:46:15 It's all right there available to anyone.

00:46:18 - Yeah, but there's way more at stake in a hospital and healthcare than there is for--

00:46:24 - Of course, of course.

00:46:25 - A haircut. - Of course.

00:46:26 - Yeah, of course.

00:46:28 - Okay, let's go on to the next one.

00:46:33 So the next topic is discrete events.

00:46:36 So I'll find my way over to that one.

00:46:39 And you'll introduce this one, discrete event simulation.

00:46:47 This sounds like this might be somewhat in your wheelhouse, Garin.

00:46:51 - Yeah, so I think discrete event simulation is probably, if you're used to programming, this is probably the one that probably makes the most sense because it's moving virtual things around the place essentially.

00:47:06 - Yeah.

00:47:07 - So the question we're asking here is very similar to the question we just answered with Markov chains.

00:47:16 But sometimes things are too complicated to be able to formulate that correct matrix or the matrix doesn't quite work because the situation is a bit too complicated.

00:47:26 But what we can do is build a virtual representation of our system.

00:47:31 And by sampling random numbers, we can move virtual people around that barbershop and look at what would happen, right?

00:47:41 Just observe, collect data, crunch that data.

00:47:44 And this is what discrete event simulation is.

00:47:47 It's building a virtual representation of the system, using random numbers to play that virtual representation system, and then collect some data about what just happened virtually.

00:47:58 Right.

00:47:59 OK, excellent.

00:47:59 So this one-- let me set the problem that you all laid out here.

00:48:02 This is a bicycle repair shop.

00:48:05 And there's a set of gates or actions or, I guess, events, you might say, that it flows through.

00:48:15 So a bike arrives randomly at a rate of 15 bikes per hour.

00:48:22 They show up and they say, hey, there's something wrong with my bike.

00:48:25 And the staff member looks at it and helps them.

00:48:29 That takes about three minutes.

00:48:31 But it turns out about 20% of the time, the bikes don't need repair.

00:48:33 There's like, did you know that there's a thing to just twist here and tighten it?

00:48:36 All right, go away.

00:48:38 You're fixed, you're cured.

00:48:39 But 80% of the time, there's something wrong, flat tire, broken chain, whatever.

00:48:43 And that gets put into a place where they're waiting to work on it.

00:48:48 And that takes about six minutes, right?

00:48:50 And then you've got to collect it back.

00:48:51 The question is, I guess the difference that I see here is there's not an uncertainty of whether or not you want a haircut when you show up at a barbershop.

00:49:02 There's just amount of time and where the people are and actions they might take if it's too full.

00:49:06 But here you may show up and you may need help or you may not need help and so on.

00:49:11 So is that the difference?

00:49:13 >> I suppose that is the difference between these two problems.

00:49:20 but that's not the reason we would use simulation over Markov chains.

00:49:24 In fact, the situation we're looking at here could be formulated as a Markov chain.

00:49:32 The difference I see is that in this situation, you could have an infinite amount of bicycles in your bicycle shop.

00:49:39 So if we were to formulate that as a Markov chain, we'd have an infinite matrix, which is not terrible to deal with, but you wouldn't be able to deal with it in the way we just did.

00:49:49 - Got it, okay.

00:49:52 - Yeah.

00:49:52 - There's also, sorry, Gary.

00:49:54 - No, go on.

00:49:56 - There's also, talking about the states that I did kind of awkwardly in the previous chapter, it's just how many people are in the shop.

00:50:04 So there's three people in the shop.

00:50:06 Well, there's a probability that the next thing that happens is four, or the probability that the next thing that happens is two.

00:50:11 So it's a very straightforward set of states that is finite, as Garen said.

00:50:18 Here, there's two things to keep track of.

00:50:21 There's the number of bikes waiting to be seen by the inspector, the number of bikes waiting to be seen by the repair shop.

00:50:26 And that just immediately, the fact that now you've got these two dimensions that can change, just again adds to the complexity and the fact that it's an amount of them.

00:50:35 - Yeah, okay.

00:50:38 - Yeah.

00:50:38 - So the reason we would use, no.

00:50:42 So the reason we would use simulation for this is because it's a more complicated situation for a variety of reasons than what we had before.

00:50:51 It would take a really, really big, if not infinite matrix to be able to solve this.

00:50:56 So why would we go to that effort when we can get quick, easy answers just by virtually playing the system?

00:51:02 - Right.

00:51:04 - And these two chapters are paired.

00:51:07 Sorry, Michael, I'm, please.

00:51:08 - No, please go.

00:51:10 - These two chapters are paired, and actually there's this, all the chapters are paired in the book the reason that they are kind of the two similar types of problems from opposite angles and correct me, Garen, if you don't agree, but I think that the two opposite angles about numerical tractability, how much you can do with an exact method, which is what the previous chapter was, versus a more approximative method.

00:51:41 And it's not always easy to say exactly what you should use one or the other.

00:51:44 Sometimes it's absolutely clear, but sometimes it's not.

00:51:47 But there's these pairs of chapters that kind of reflect the size of the problem, for want of a better word.

00:51:53 Very interesting.

00:51:54 Okay, the fundamental Python bit here is the CIW, or you pronounce that Q?

00:52:01 Yeah, I call that Q.

00:52:05 CIW, Q, it's the Welsh word for Q, Q-U-E-U-E.

00:52:10 It's the Welsh word for that, and that's why I call it the library, though.

00:52:14 - Yeah, fantastic.

00:52:16 All right, and so the idea is basically you state the problem in terms of the arrival rate of events, the inspection or the service distributions in terms of how those flow through there, the number of things that can be servicing it, and the routing and so on.

00:52:35 You create a network with the Q library and then you could just ask it questions, right?

00:52:45 You can tell it to run a simulation, you can run it for some amount of time, like eight seconds or so on.

00:52:53 And it's interesting that it simulates it, that it doesn't exactly solve it, right?

00:53:00 - Yeah, so that's the point of simulation, not the point, but like one of the uses of simulation is that we can quite easily simulate something that's too complicated to solve exactly, or would take too long to solve exactly, but we can quite easily simulate it.

00:53:19 The trade-off then is, because assimilation is essentially streams of random numbers that we do things to, you could get extreme values, you could get flukes.

00:53:30 So you lose accuracy, but you gain efficiency.

00:53:37 Yeah, so the idea is you run it over and over and over again with the randomness playing out there.

00:53:44 And then you just say, well, what is the most common set of outcomes look like?

00:53:50 Yeah, yeah, essentially, yeah.

00:53:52 Nice.

00:53:55 Very cool.

00:53:55 So what did we learn from this one?

00:53:58 That we could add an extra inspector at the front, or we could add an extra repairer.

00:54:08 And what was the better outcome here?

00:54:11 - So we were measuring was the maximum amount of time a bicycle spends in the shop.

00:54:17 We wanted to get bicycles out as quick as possible.

00:54:20 So if we added an extra bicycle inspector, we would reduce our time, maximum time in the shop by quite a lot.

00:54:31 But if we added an extra repairer, we'd reduce it, but not quite so much.

00:54:36 So we essentially found that the bottleneck was the inspection desk and not the repairing.

00:54:40 - How interesting.

00:54:42 And I suspect, maybe this is not true, but I feel like if I was a business, knowing that would not just help me hire the right person, but I think having an inspector type of person would be easier to get, right?

00:54:55 You don't have to have as great of a skillset to actually be the mechanic that does the repairs.

00:55:02 So that's really valuable as somebody who runs a bike shop.

00:55:07 I will also throw out another statement here that's probably true.

00:55:11 I also suspect bike shops don't employ these techniques but should.

00:55:15 (all laughing)

00:55:18 - Oh, they can now.

00:55:21 - They can, well, and they can now, honestly.

00:55:23 - I believe larger companies probably would.

00:55:27 Stuff like supermarkets and airports probably would a team of people behind them doing this, but smaller shops probably not.

00:55:34 Yeah. Oh gosh, I don't remember the name.

00:55:38 Not always, right, would be a little caveat. We certainly know of lots of examples of big entities, companies, things that make very expensive decisions without doing these sorts of investigations. Yeah.

00:55:57 - Yeah, well, you mentioned grocery stores and stuff.

00:56:01 I had the folks from Kroger, which I think, if not, is the largest, one of the largest chains in the US.

00:56:09 They have basically an analytics and data science subsidiary called 8451.

00:56:15 They employ 200 data scientists who do R and Python.

00:56:19 That's not joking around in terms of, where do the bananas go?

00:56:26 Yeah, all those types of things, right?

00:56:28 There.

00:56:28 So you're right.

00:56:29 The larger companies definitely, definitely invest in that.

00:56:33 It's interesting thing about what is data science, right?

00:56:38 So my data scientists, in that, are they looking at historic data and identifying things?

00:56:46 And I suspect there's no answer to my question here as well.

00:56:50 I suspect different data scientists do different things.

00:56:52 but when you hear a data science department, that doesn't necessarily mean they're doing this type of work? It might be, absolutely might be. But they might be diving into the data and understanding and observing as opposed to necessarily modeling. It's possible.

00:57:08 Right. It could be AI, it could be AI and ML, it could be data ETL, just bringing in data, just getting into system. Yeah, there's all these different aspects. I wonder more about the data science on when do I go from being somebody that uses say Python for computation to becoming a data science right when do I where would you cross the boundary from being a mathematician or a biologist to becoming a data scientist that has some understanding of biology for example. I would argue it kind of goes back to what we were saying earlier about what is an applied mathematician and And at what point are these labels helpful and at what point are they not, right?

00:57:53 - Yeah, yeah, exactly.

00:57:55 Out in the audience, Preetam says, "Yeah, data science is such a catch-all phrase right now." I would agree, also a buzzword.

00:58:02 So if you're looking for a job, so it's a good one to employ for that.

00:58:05 All right.

00:58:06 Let's go on to another one.

00:58:08 We'll get through as many of these as we can.

00:58:10 And then we have time for anyway.

00:58:13 So those two problem areas were paired together.

00:58:18 - Yeah.

00:58:19 - The next area that you focused on is fairly different with differential equations.

00:58:24 - Yeah, so those two areas that we were just in, the book's got parts and there's two chapters in every part and that was in the probabilistic modeling is what we'd call it, modeling these probabilistic type situations.

00:58:34 And here in the dynamical systems section and so specifically here, we're looking at a problem where differential equations can be used.

00:58:42 And we wrote, we started writing this book before the world changed, before COVID.

00:58:50 And I remember coming into one of our writing sessions, I have to say I really enjoyed writing the book.

00:58:57 Very glad to have it finished, but I enjoyed writing the book and I said to Garren, Garren, do we need to change this chapter?

00:59:04 Because this chapter is, there's a disease going around, I think we call it a cold.

00:59:09 Yeah, everyone's caught a cold in a small community.

00:59:13 There's a cost to not being able to work.

00:59:14 - It's a point now to have a cold.

00:59:16 Right?

00:59:16 And the cost, financial cost associated with not being able to work, financial costs with a possible cure that would double the rate at which you get better from the cure.

00:59:28 Is it worth, from the cold, pardon me, is it worth financially to get this cure was the problem.

00:59:35 And yeah, we were like, should we make this about COVID?

00:59:39 You know, should we just essentially all the graphs we spent so long looking at that was on the news the time, this is it. This is essentially the same thing. Should we make it about COVID?

00:59:52 We decided not to, didn't we, Garry? We decided to just keep it somewhat abstract. But yeah, that's the problem here. And the model is a textbook, for want of a better word, a textbook model that's often taught when you start learning about systems of differential equations called the SIR model. And the SIR model has a population in three groups, susceptible people.

01:00:25 Sorry, Vint, I think you're talking about a different chapter.

01:00:28 I am talking about the wrong chapter. Thank you. Sorry, I went off on that one. Thank you.

01:00:34 That's the next chapter.

01:00:35 They're similar. Yeah, they're similar.

01:00:38 Very similar.

01:00:39 - This one, you can write down a differential equation that dictates not a system, but just the number of people that are infected over time.

01:00:50 And so you can write that down, that differential equation, you can get a solution for it.

01:00:54 Sorry, thank you, Geraint, thank you.

01:00:57 - Yeah, no worries.

01:01:01 This one actually uses an interesting library that I am just fascinated with.

01:01:06 - Awesome library, yeah.

01:01:08 - Yeah, I just had the folks on back in May, not too long ago for this one, Andre and Aaron for this.

01:01:17 I did not expect this from Python because I expected NumPy and the linear algebra type things, but not, here's the integral of this solution of this differential equation.

01:01:34 And here were the steps that I took to get there.

01:01:36 It is so neat.

01:01:37 SimPy is an incredible library that just gives you so much of what in mathematics is thought to have to be commercial in that you can have all your symbolic stuff.

01:01:48 So, if you wanna know what is X plus X, you don't need to tell the computer what value X has.

01:01:55 With SimPy, the computer can just understand the concept that X is this mathematical idea, and it's incredible.

01:02:01 And it's a fantastic, fantastic library.

01:02:04 I think it was when I started teaching programming through our first year cohort, I actually taught SageMath and SageMath is built on top of SimPy.

01:02:15 But at some point I decided to just teach with SimPy.

01:02:19 And so that's what we use here.

01:02:20 That's what we use here.

01:02:21 We build up the actual numeric solution for the differential equations.

01:02:26 We find the expression that if you put it into this differential equation, that would be the solution.

01:02:34 So again, the exact solution here.

01:02:36 - Yeah.

01:02:38 It's pretty wild.

01:02:39 You say, the way you set it up, I mean, everything about Senpai is wild, but the way you set it up here is you say, I'm gonna create some symbols like time T or a constant alpha or so on, or initial conditions.

01:02:54 And then you say, I'm gonna have a function.

01:02:56 You don't say what the function is.

01:02:57 You say there is a function called I.

01:03:00 And then what you define for the thing you're going to work with is you say, sim dot equation.

01:03:06 And you say the equation is going to be given the derivative of this function and, of T and T.

01:03:13 And then it has this, this expression in there.

01:03:16 Negative.

01:03:16 I guess that's probably the, you, what you're specifying here is this is the derivative, not the equation itself, which is negative alpha times I have T.

01:03:25 Right.

01:03:26 This is one of those parts of SymPy that when we teach this to our first years, it allows us to help identify misunderstandings about the mathematics.

01:03:35 I think programming can often help you understand mathematics better and likewise and vice versa, but people often come to study mathematics and don't know the difference between a formula and an equation, and an equation has two sides.

01:03:49 An equation has an equal side in the middle.

01:03:52 And so what you're creating here is sim.eq takes two variables, a left-hand side and a right-hand side.

01:03:59 That's actually the name of the parameters.

01:04:01 So the left-hand side is the derivative of i.

01:04:03 So it's saying that the speed at which the number of infected people changes over time, that's the left-hand side of your equation, is equal to, and then the right-hand side of your equation, some constant alpha minus some constant alpha, sorry, times the number.

01:04:19 So the speed is related to the number.

01:04:21 And that's really the relationship that defines the differential equations.

01:04:25 Right.

01:04:26 And in this scenario, you can change the alpha, the rate of recovery by providing medicine or just letting people do their thing, you know?

01:04:35 Naturally recover, yes.

01:04:37 Yeah, yeah, exactly.

01:04:38 So in here you say, you know, given these constants, we're going to, you know, get the equation and then you solve it.

01:04:45 You come up with the actual symbolic solution, which is always, always blows my mind.

01:04:50 - And then when you say sim.dsolve, like does that solve the differential equation?

01:04:54 I'm guessing you give it the equation and the initial conditions and stuff, and you're like, where the initial condition is, we defined a function i, we didn't say what it is, really.

01:05:06 What we said at zero, it's the initial condition of like how many people are sick or whatever that turned out to be, which is just amazing.

01:05:13 - All of which is simple.

01:05:14 Everything here is just an idea.

01:05:16 Nothing's a number.

01:05:17 Everything is just an idea.

01:05:18 - Yeah, yeah, we don't know anything about it.

01:05:20 We just know that these are the constraints of the equation and out it gives you, let's see.

01:05:28 You get the solution and it says an equation.

01:05:34 Let's see, I gotta go further down.

01:05:35 - So that's it.

01:05:36 - Yeah, so it gives you the actual solution and then you start plugging in like the numbers, the different conditions and it gives you the answers, right?

01:05:43 - Exactly.

01:05:45 - Yeah, you plug in the numbers at the end.

01:05:47 - Yeah.

01:05:49 So we get the cost if you were to purchase the cure would be 700 and the cost without purchasing the cure would be 500.

01:05:58 And since the overall costing into account productivity offsetting all the impacts of, you know, the similar type of decisions that have been, you know, governments all over the world have been making.

01:06:09 And in this particular case, for this cold data is, no, it is not worth getting the cure.

01:06:13 (laughing)

01:06:14 - Don't tell that to the people who are suffering with a fever or whatever.

01:06:17 - It's a cold.

01:06:19 - It's a little like, yeah, yeah, it's a cold.

01:06:20 - This is not like a common cold, this is a cold.

01:06:22 (laughing)

01:06:24 - Well, this chapter, I think was, we found this chapter really, really neat because when we started doing exactly the same thing, going, how do we solve this in R, we realized we had to use a completely different approach.

01:06:39 - Well, you know what, you skip, skipping a step, right? - It was a bad choice.

01:06:43 - Yeah, 'cause, sorry, again, Sorry. So we went looking in R for an equivalent symbolic mathematics package in R. And there is one, but really it's a wrapper for Python's SymPy. And so we found ourselves writing strings of Python that you pass to R that R passes to SymPy. And yeah, sorry.

01:07:11 - Yeah, I think that's--

01:07:13 - That doesn't sound like really like solving it in R.

01:07:16 You know?

01:07:17 - Exactly, exactly.

01:07:18 So then, so we decided, well, no, if we were just to solve this in R, how would you do it?

01:07:23 And as there is no symbolic library, a library for doing symbolic mathematics in R, we solved it numerically.

01:07:30 And that just shows like exactly the same problem.

01:07:34 We get exactly the same answers out, but the bit in the middle, the solution steps, were completely different in both Python and R for those reasons, which I think is really neat.

01:07:47 I think that shows that you're concentrating on the problem rather than the solution steps.

01:07:55 Yeah, I like that.

01:07:57 - Yeah, absolutely.

01:07:59 And what you've learned here is that this function that expresses the cost of people being sick, IFT that we talked about is 100 for a hundred people sick.

01:08:11 E to the negative alpha of T, which is, it's pretty awesome.

01:08:15 I mean, there's never, there's almost always a reason to marvel at the number E.

01:08:22 Have you all read the book, E, the story of a number?

01:08:26 - I don't think I have, no.

01:08:28 - This, this book is so good.

01:08:33 It just goes back to the history literally of just, - Oh yeah, I totally can recommend it.

01:08:38 So people can check that out.

01:08:39 - E is a ridiculously cool number, right?

01:08:41 In terms of, I know pi gets all the press, but E is a ridiculously cool number.

01:08:45 - It's way cooler than pi.

01:08:46 It's way cooler than pi.

01:08:48 I mean, pi is cool, but if you are into the change of anything, differential equations, integrations, like, there's nothing like it, yeah.

01:08:58 - Recommendation, I haven't heard about that one.

01:09:00 - We are going pretty long on time here, so I wanna be respectful of your time and everything.

01:09:05 So maybe, is there any other of the problems or areas or libraries that you've made?

01:09:10 Actually, let me pick one here.

01:09:11 Which chapter is the game theory one?

01:09:16 (laughing)

01:09:19 Wait for it, no, it's nine.

01:09:24 - Just one before that, yeah.

01:09:25 - Yeah, or yeah, no, it was one before that.

01:09:27 Yeah, got it, yep.

01:09:28 The missing one is the linear programming one.

01:09:32 All right, game theory.

01:09:34 And the reason I want to pull this up is we talked about Q, Grant's library and his application.

01:09:41 How about some Nash pie?

01:09:42 I mean, there was John Nash won the Nobel Prize in economics for coming up with basically proving in every game there was an equilibrium position, which is insane.

01:09:56 - In a 17 page PhD thesis.

01:09:59 Yeah, incredible.

01:10:00 - Not bad, not bad.

01:10:03 So, quick game theory, what is it?

01:10:07 People maybe have heard of it, but they don't really know, or maybe they do know.

01:10:11 I know I fumbled through the previous one, but it probably makes sense for me to take this one.

01:10:17 Yeah, yeah, sure.

01:10:17 Right.

01:10:18 So game theory is the study of emergent interactions, of if you can kind of make some decisions, Describe a system at the lower level, how individuals interact, what happens at the higher level. That's the study of game theory. It's interactive decision-making. A lot of the time you can think of decision-making, for example, with that barbershop problem we discussed at the first stage of, well, if I had this many chairs or this much waiting room, what's the best thing for me, but there you're the only thing that your decision gets hit back with. If you think of a game of tennis, it's playing against a wall, it's playing against that probability. Game theory is just taking it to a slightly different dimension where you have two barbershops. What if you had two barbershops and if one does this and the other does that, where are the customers going to go?

01:11:14 Right. Both barbershops could say expand their waiting room. Both barbershops could hire more barbers or one could say, "You know what? If you hire barbers, I'm getting a bigger waiting room." Yeah.

01:11:24 - Right, it's like that trade-off, yeah.

01:11:27 - Exactly, a very famous problem in game theory is the prisoner's dilemma.

01:11:31 Two prisoners are, two criminals are convicted and are separated and are questioned, and they can give evidence about the other prisoner.

01:11:43 If they both stay quiet, they both give no evidence, the police won't have enough evidence to send them to prison for a very long time.

01:11:52 they'll have to stay for a very short amount of time.

01:11:54 So that's in their interest, but the police offer me a deal.

01:11:57 And if I give evidence about Geraint, then I'll go free and Geraint will go to prison for far longer.

01:12:03 Geraint gets offered the same deal and that immediately creates a dilemma that we will both end up getting to prison for a long time because we will both give evidence one about the other.

01:12:11 And so that's a very simple model.

01:12:14 And that's actually what I came on the show a long time ago to talk about was that actual model and all the interesting stuff you could do with that.

01:12:21 But this game theoretic chapter is paired with another chapter called agent-based modeling. It's again one of those points where labeling is interesting because for some, agent-based modeling is a subset of game theory. In a way, it doesn't really matter. And so this chapter is all about emergent behavior. If we can define how decision makers in our system interact, what happens based on what they do, and they being plural, then what is the emergent behavior that you can measure? And so the game that we model in this chapter is there are two taxi firms that serve a community, again, a small town, and they get to decide how many taxis they're going to have. And the town wants to incentivize these two taxi firms, essentially not to collude.

01:13:19 They want to incentivize the taxi firms to give better service to the population.

01:13:24 And so we create the game that allows the taxi firms to decide how many taxis they're going to have, one, two, or three.

01:13:33 And we build a little model that describes what happens if each taxi firm has one taxi, what happens if one has one, the other has two, what happens if one has one, the other as three, et cetera, et cetera.

01:13:47 And then we obtain what is called the Nash equilibrium, which is a measure of if both tax firms know all this and act rationally, what would we expect to happen?

01:13:57 - It's just amazing how these outcomes, it's just so clear, you know, if what's the likelihood of the other person doing or the other player participant taking this particular choice and if I take this choice, what are they most likely to do and where are things going to settle in?

01:14:18 It's really neat how this all sets up here.

01:14:22 Let me find the section.

01:14:25 Yeah. So what you do is you create a NumPy array that represents one of the participants outcomes and choices.

01:14:39 And this one, I guess it's a, what is this?

01:14:43 A zero sum game?

01:14:44 'Cause you can--

01:14:45 - Not quite, not quite.

01:14:46 It's not zero sum, it's symmetric.

01:14:48 So--

01:14:48 - Oh, symmetric, okay.

01:14:50 So you can pass in the transpose of that, which says, here's the other player.

01:14:53 They get basically the opposite of that.

01:14:56 And then you just say, Nash.game, and off you go, right?

01:15:00 - Yeah, Nash.game creates this game.

01:15:03 It creates the game object, and in the game object, the Nash Pi library has all sorts of different algorithms that could be used and the one we use is something called support enumeration, which is essentially the basic by definition idea.

01:15:18 And the thing that we do do here is we say, okay, if we are the town hall trying to decide how to let these two tax firms compete, is we essentially are deciding not how we regulate them, but how we incentivize them.

01:15:35 So what game should we make the two taxi firms play?

01:15:38 And we do that by essentially saying, I guess we will tax you slightly less if you put on this amount of taxis or give you an extra bonus if not.

01:15:47 And the idea is to, what is the smallest amount that the city hall has to kind of guarantee to the taxi firms to ensure that their rational behavior would be to give best service to the population?

01:16:01 - Yeah. - So yeah, then it's just those three lines you got on the screen right there, it's a little while loop where it just increments that offset.

01:16:07 Yep, and you just say, you know, get the equilibrium from it and off it goes.

01:16:14 Yeah, very nice.

01:16:16 Okay.

01:16:18 This is really great and I guess it's worth pointing out.

01:16:22 I've heard of the guy.

01:16:24 Yeah, that's me.

01:16:25 I should say that.

01:16:26 The Nash Pi Library is myself and a former undergraduate.

01:16:34 Actually, they went on to start their PhD at the School of Mathematics.

01:16:38 We started this library, and it's grown quite nicely now.

01:16:44 To be honest, probably the part of the library I'm the most proud of is the documentation.

01:16:48 There's arguably a game theory textbook in there, if anyone's interested, as well as all the functionality for two-player games. >> Yeah, fantastic.

01:16:56 [laughter]

01:16:57 Yeah, it looks really great. I'm a big fan of game theory.

01:16:59 I think it's very simple, and yet it reveals pretty amazing answers and behaviors. So, you know, as opposed to something like partial differential equation, which can also reveal amazing answers, but the journey to get through it is extremely long versus this. You could sit down in an afternoon and explain it to somebody, you know, like that prisoner's dilemma and so on. We could all kind of relate to a lot of what's happening there. I mean, to be honest, if you, this is one of those things, right, you know, you you wonder, you realize that you're aging.

01:17:34 But I remember when I first started teaching game theory, everyone had seen the movie "A Beautiful Mind." But if people listening and haven't, are slightly interested in game theory and haven't seen "A Beautiful Mind," I'd definitely recommend it.

01:17:44 It's a Hollywood movie, so have the correct level of expectations.

01:17:49 But it's a really nice movie.

01:17:52 It's Russell Crowe plays John Nash.

01:17:54 And it's more about the, not necessarily about the mathematics, about his life, which is incredibly interesting.

01:18:02 And there's a couple of scenes in that movie that arguably if you just spend a little bit of time talking about a couple of scenes in that movie, you could explain most of the game theory.

01:18:11 - Yeah, absolutely.

01:18:15 All right, well, I get the sense we're a tad bit over time, which is fine, but maybe we should wrap it up here.

01:18:21 There's a bunch of other areas that we haven't covered that are lots of fun that you go into.

01:18:27 So yeah, very, very neat.

01:18:30 But let's kind of wrap it up.

01:18:32 Maybe we'll ask you the final two questions and then we can--

01:18:37 (laughing)

01:18:38 - I want to thank you for having us, but I know that you got these two questions coming.

01:18:42 So like, oh, do I thank you now?

01:18:43 Do I thank you later?

01:18:44 But no, I really do appreciate you having us on, Mike.

01:18:46 I really do appreciate it.

01:18:47 - Yeah, you're very welcome.

01:18:49 It's been great to talk about it.

01:18:50 All right, now maybe a lightning round.

01:18:52 Vint, if you're gonna write some Python code, what editor are you using these days?

01:18:56 - I use Vim.

01:18:57 I use Vim.

01:18:58 - Vim, right on.

01:19:00 Grant?

01:19:02 - I use Sublime.

01:19:03 I really like having no features.

01:19:07 I just like typing.

01:19:09 I don't want features.

01:19:10 - Right on.

01:19:10 Perfect.

01:19:13 And then a notable PyPI package that you've come across that you're thinking is worth giving a shout out to?

01:19:20 - I was thinking about this before, and the one I'm gonna suggest is one called Python Ternary.

01:19:25 You've got it on the screen there.

01:19:26 Yeah, Python Ternary is a library for plotting on simplexes.

01:19:31 So for plotting on triangles, want a better word.

01:19:35 It's type of plots you draw a lot in evolutionary game theory, as well as other things.

01:19:40 Actually a collaborator on another project of mine that maintains this.

01:19:44 And it's a very nice library for plotting different looking plots.

01:19:48 - Yeah, there's some, I'm sure people think about, well, you could have these different plots on triangle surfaces or how much are you, how close are each three different states or something like that.

01:20:03 - Yeah.

01:20:04 - You've got, some of these are really amazing, like this M cherry one on there where it's got kind of crawling graphs through these triangle different states and so on.

01:20:12 Yeah, I haven't seen any one like that before.

01:20:16 - It's very cool.

01:20:17 It's very cool.

01:20:17 And it's built on top of MapPlotLib.

01:20:19 So it's essentially the layer to do all the correct scaling and things like that is there for you.

01:20:26 So yeah, Python ternary is really cool.

01:20:29 - Yeah, fantastic.

01:20:31 Grant.

01:20:32 - So I think the library I would choose is, it's called Traces.

01:20:38 It's a small library.

01:20:39 I don't know if you've heard of it before.

01:20:42 I got the link here.

01:20:43 It's one thing, yeah, it does one thing and one thing good.

01:20:51 it takes moving averages over irregular time intervals.

01:20:55 And it was a problem which I thought I had until I found this, and then it just made life easier.

01:21:00 I liked it.

01:21:01 - Yeah, very cool.

01:21:02 Okay.

01:21:03 - I think it's the next link.

01:21:05 - Fantastic.

01:21:07 This one right here?

01:21:08 Not that one.

01:21:09 This one?

01:21:10 - There it is.

01:21:11 - Yes, the uneven time series.

01:21:13 Yeah, perfect.

01:21:14 Okay.

01:21:15 Oh yeah, that's great.

01:21:17 - It does one thing quite well.

01:21:20 Yeah.

01:21:21 And yeah, that's often just what you need.

01:21:24 Put a link to both of those in the show notes.

01:21:26 Thank you so much.

01:21:29 So people, people are interested in your book or maybe exploring some of these problems.

01:21:34 What do you tell them?

01:21:36 Where do they go?

01:21:38 I think if they're interested in the book, that's, that's great.

01:21:42 I think I, I, I'd more kind of emphasize just, just mathematics is so incredibly powerful And it really, really is.

01:21:50 And it's kind of like, I feel that code, open source code, Python, kind of an order of how important each other is, with mathematics really, really gives you superpowers.

01:22:03 And so, I'd encourage people to investigate those things and you can do amazing things with mathematics and a bit of code.

01:22:10 That'd be mine.

01:22:12 I don't know what you think, Gary.

01:22:14 - No, no, yeah, I second that.

01:22:17 I think my main message is the maths and the software are separate things and they complement each other really, really well, but they are separate things.

01:22:27 - They are separate things, yeah, that's the thing.

01:22:29 - Yeah, fantastic.

01:22:31 All right, like I said, your book is on GitHub, so people can go poke around some of the examples and some of the notebooks and see what we're talking about.

01:22:40 Make it a little more concrete.

01:22:41 Make it a little more applied, maybe.

01:22:43 - Yes.

01:22:45 (laughing)

01:22:47 - All right guys, thanks for being here.

01:22:49 Thanks for sharing your work.

01:22:50 - Thank you so much.

01:22:51 - It's been a lot of fun.

01:22:52 Yeah.

01:22:53 - Thank you very much.

01:22:53 - Thank you.

01:22:54 - You bet.

