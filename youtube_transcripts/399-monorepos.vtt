WEBVTT

00:00:00.000 --> 00:00:03.000
- Hello, YouTube. Hello, David.


00:00:03.000 --> 00:00:04.000
- Hello.


00:00:04.000 --> 00:00:09.000
- Hey, awesome to have you here on the channel, on the livestream at the moment.


00:00:09.000 --> 00:00:12.000
And yeah, let's just dive into the podcast.


00:00:12.000 --> 00:00:15.000
David, welcome to Talk Python To Me.


00:00:15.000 --> 00:00:20.000
- Thank you. I'm really glad to be on the podcast.


00:00:20.000 --> 00:00:23.000
- I'm really excited to have you on the podcast.


00:00:23.000 --> 00:00:27.000
And we get to talk about a couple of interesting ideas.


00:00:27.000 --> 00:00:30.000
We get to talk about software architecture.


00:00:30.000 --> 00:00:33.000
People may know I'm a big fan of architecture.


00:00:33.000 --> 00:00:38.000
I think putting your software together right makes all the difference.


00:00:38.000 --> 00:00:41.000
We're going to talk about some ideas that are new to me,


00:00:41.000 --> 00:00:44.000
this polylith idea that you're an advocate and fan of


00:00:44.000 --> 00:00:46.000
and how it applies to Python.


00:00:46.000 --> 00:00:49.000
We're also going to focus a good portion of this conversation


00:00:49.000 --> 00:00:53.000
on monorepos and what the heck are monorepos, right?


00:00:55.000 --> 00:00:56.480
- Yeah.


00:00:56.480 --> 00:00:58.360
- So yeah, that'll be a lot of fun


00:00:58.360 --> 00:01:00.180
and I'm really looking forward to it.


00:01:00.180 --> 00:01:03.400
But let's hear your story first.


00:01:03.400 --> 00:01:05.500
How'd you get into programming and Python?


00:01:05.500 --> 00:01:08.080
- Yeah, how did I get into programming?


00:01:08.080 --> 00:01:11.960
Well, it was, I guess it was when I was a kid.


00:01:11.960 --> 00:01:15.320
My dad bought me Commodore 64.


00:01:15.320 --> 00:01:18.360
It was like way back in the 1980s.


00:01:18.360 --> 00:01:20.880
So that's when I started learning


00:01:20.880 --> 00:01:23.760
the basic programming language


00:01:23.760 --> 00:01:25.800
and how to like think in,


00:01:25.800 --> 00:01:33.040
how to write things that are code and not like pure text.


00:01:33.040 --> 00:01:37.760
But then I kind of, I went on a different path.


00:01:37.760 --> 00:01:42.760
I was working mostly with design and things like that.


00:01:42.760 --> 00:01:48.280
And the first thing I knew was a job in our business


00:01:48.280 --> 00:01:50.920
was a web designer.


00:01:50.920 --> 00:01:53.980
So that was what I wanted to be at first.


00:01:53.980 --> 00:01:56.640
So I started to learn JavaScript and copy and pasted


00:01:56.640 --> 00:02:01.640
some snippets of code on the internet and stuff like that.


00:02:01.640 --> 00:02:05.280
- Yeah, and that's the era, I'm just guessing from the,


00:02:05.280 --> 00:02:07.160
you know, the starting computer,


00:02:07.160 --> 00:02:09.520
where you were sort of in time when this must have happened.


00:02:09.520 --> 00:02:12.960
And that was probably before all these crazy JavaScript


00:02:12.960 --> 00:02:14.320
front end frameworks and all that.


00:02:14.320 --> 00:02:18.000
And it was more of a, how do you visually design this page


00:02:18.000 --> 00:02:21.600
with graphic and more art and more focused on that, right?


00:02:21.600 --> 00:02:25.200
- Yeah, before like jQuery and before like all these,


00:02:25.200 --> 00:02:29.520
all React and all of that good stuff that we have today.


00:02:29.520 --> 00:02:32.400
So yeah, but with Python,


00:02:32.400 --> 00:02:36.800
I think I started about 2015 with Python.


00:02:36.800 --> 00:02:41.120
I started with Python 2.7 and then learning,


00:02:41.120 --> 00:02:45.240
all I think in that period,


00:02:45.240 --> 00:02:48.260
I also learned, started to think in more like


00:02:48.260 --> 00:02:52.680
functional programming style, more like functional-ish.


00:02:52.680 --> 00:02:55.360
And that's coming from Python actually.


00:02:55.360 --> 00:03:00.360
And I was very much into Node.js at that time too.


00:03:00.360 --> 00:03:03.320
So I think around 2015, and I've been like jumping


00:03:03.320 --> 00:03:05.940
back and forth between different languages.


00:03:05.940 --> 00:03:09.600
I'm a really huge fan of Clojure too,


00:03:09.600 --> 00:03:12.500
which is like 100% functional.


00:03:12.500 --> 00:03:17.500
So I've been like visiting some different kinds


00:03:17.500 --> 00:03:22.300
of programming languages and styles and things like that.


00:03:22.300 --> 00:03:26.460
And now I'm back to full-time Python on my day job


00:03:26.460 --> 00:03:30.780
and almost full-time Python during nights


00:03:30.780 --> 00:03:33.620
because I really love to code on my spare time too


00:03:33.620 --> 00:03:38.620
when I assume there is any chance to code.


00:03:38.620 --> 00:03:40.740
So I'll take that one.


00:03:40.740 --> 00:03:41.580
- Yeah, absolutely.


00:03:41.580 --> 00:03:43.580
how much of open source is,


00:03:43.580 --> 00:03:46.860
well, there's programmers and we have this project


00:03:46.860 --> 00:03:48.860
we've got to work on, but we really want to build


00:03:48.860 --> 00:03:50.860
this other thing and we're super passionate about it.


00:03:50.860 --> 00:03:52.860
We just end up building it and sharing it and it takes off.


00:03:52.860 --> 00:03:56.580
I think that's a very common story for sure.


00:03:56.580 --> 00:04:00.580
So, before we move on,


00:04:00.580 --> 00:04:04.580
how has working in Python influenced


00:04:04.580 --> 00:04:07.580
something like Clojure or Clojure influenced


00:04:07.580 --> 00:04:10.580
your Python thinking? They're fairly different languages, right?


00:04:10.580 --> 00:04:11.420
- Yeah.


00:04:11.420 --> 00:04:13.660
- Box all being less stateful,


00:04:13.660 --> 00:04:16.660
which is a really big different way of programming.


00:04:16.660 --> 00:04:17.900
- Yeah.


00:04:17.900 --> 00:04:20.860
Well, I think what I learned from Python


00:04:20.860 --> 00:04:25.860
was like the elegance and the importance


00:04:25.860 --> 00:04:30.420
of writing elegant and simplistic code.


00:04:30.420 --> 00:04:33.860
I was really impressed by the Zen of Python.


00:04:33.860 --> 00:04:36.340
You know, if you type import this in a shell,


00:04:36.340 --> 00:04:39.840
you get this nice list of how to write your code.


00:04:39.840 --> 00:04:47.760
really liked that idea. So, I guess that's where I started to think about keeping it simple, clean,


00:04:47.760 --> 00:04:56.880
and short. And with Clojure, it was like, that's kind of a different, total different syntax,


00:04:56.880 --> 00:05:06.400
but also digging into a lot of functional aspects and how to think about state and how to separate


00:05:07.760 --> 00:05:11.640
calculations from actions and data and things like that.


00:05:11.640 --> 00:05:14.520
And I think I've brought a lot of those ideas


00:05:14.520 --> 00:05:16.960
to back to when I'm back at Python,


00:05:16.960 --> 00:05:21.960
how to separate different kinds of code that you write.


00:05:21.960 --> 00:05:25.380
- Yeah, I can see that.


00:05:25.380 --> 00:05:27.900
I feel like Python's really interesting


00:05:27.900 --> 00:05:31.420
because you can choose to only focus on little parts of it.


00:05:31.420 --> 00:05:33.440
That's good for beginners


00:05:33.440 --> 00:05:34.800
'cause they only have to learn a little part,


00:05:34.800 --> 00:05:36.000
but it's also good for people


00:05:36.000 --> 00:05:39.360
who have particular styles that they like to work.


00:05:39.360 --> 00:05:41.920
If you wanna write functional Python,


00:05:41.920 --> 00:05:44.200
you don't have to create any global variables


00:05:44.200 --> 00:05:46.720
or any classes or any, you can just,


00:05:46.720 --> 00:05:49.920
you can write it that way, but you could completely go,


00:05:49.920 --> 00:05:52.760
you know, really deep OO patterns.


00:05:52.760 --> 00:05:54.920
And you can do that in Python too if you want, right?


00:05:54.920 --> 00:05:56.600
It's completely up to you.


00:05:56.600 --> 00:05:59.240
- Yeah, and I like that kind of freedom.


00:05:59.240 --> 00:06:02.440
You can, you can't, you don't,


00:06:02.440 --> 00:06:06.760
you're not forced to do either this or that.


00:06:06.760 --> 00:06:10.120
You can learn and experiment,


00:06:10.120 --> 00:06:13.400
and especially if you use libraries,


00:06:13.400 --> 00:06:15.880
they are designed in different ways too.


00:06:15.880 --> 00:06:17.720
So you don't have to limit yourself


00:06:17.720 --> 00:06:20.520
to only use that kind of library or this kind of library.


00:06:20.520 --> 00:06:23.300
So I really like Python,


00:06:23.300 --> 00:06:27.440
the capabilities of Python when it comes to that,


00:06:27.440 --> 00:06:30.540
but it's not very strict in any kind of format.


00:06:32.240 --> 00:06:35.040
- I like that too, and I think other languages


00:06:35.040 --> 00:06:37.520
are seeing that and adopting that as well.


00:06:37.520 --> 00:06:39.120
You know, you see Swift with their playgrounds,


00:06:39.120 --> 00:06:42.740
and well, Swift in general, and .NET with their,


00:06:42.740 --> 00:06:45.040
you know, maybe we don't need namespaces and classes


00:06:45.040 --> 00:06:47.440
and static main void for everything to get started.


00:06:47.440 --> 00:06:48.280
- Wow.


00:06:48.280 --> 00:06:51.160
- And they're adopting those types of things.


00:06:51.160 --> 00:06:52.920
You know, we're talking about this,


00:06:52.920 --> 00:06:55.240
like well, functional people might wanna write this way,


00:06:55.240 --> 00:06:57.100
and more OO oriented people that way,


00:06:57.100 --> 00:06:59.640
but that also could just be you in different situations.


00:06:59.640 --> 00:07:02.160
You know, right now, this is the right tool to solve it,


00:07:02.160 --> 00:07:03.880
and other times here's a different way


00:07:03.880 --> 00:07:05.920
to solve a different problem,


00:07:05.920 --> 00:07:07.400
but you can just stay in the same tools


00:07:07.400 --> 00:07:10.040
and the same editors and the same ecosystem.


00:07:10.040 --> 00:07:11.480
It's cool. - Yeah, definitely.


00:07:11.480 --> 00:07:13.360
Yeah. - Yeah.


00:07:13.360 --> 00:07:17.480
All right, well, let's start in on the first half


00:07:17.480 --> 00:07:21.880
of our main topic here is the mono repo.


00:07:21.880 --> 00:07:26.880
Now, it's really easy to confuse what a mono repo is


00:07:26.880 --> 00:07:31.360
with a mono-lith versus say microservices.


00:07:31.360 --> 00:07:33.800
And those are not really at all the same thing.


00:07:33.800 --> 00:07:36.500
In fact, they might actually be opposites in a sense,


00:07:36.500 --> 00:07:39.960
a monorepo and a monolith to some degree.


00:07:39.960 --> 00:07:42.560
So maybe kick us off by telling us


00:07:42.560 --> 00:07:44.320
what is a monorepo here?


00:07:44.320 --> 00:07:47.520
- Yeah, so a monorepo,


00:07:47.520 --> 00:07:49.960
I don't think it's that complicated,


00:07:49.960 --> 00:07:53.640
but I actually, also before I started


00:07:53.640 --> 00:07:55.560
to dig into this thing more,


00:07:55.560 --> 00:07:58.120
I also had almost put like an equal sign


00:07:58.120 --> 00:08:00.240
between monolith and monorepo


00:08:00.240 --> 00:08:04.140
because that's the way I have used writing code.


00:08:04.140 --> 00:08:07.420
I was in the .NET and C# world a lot


00:08:07.420 --> 00:08:09.820
and you like building your website


00:08:09.820 --> 00:08:13.200
and you have a data layer and you have a domain layer


00:08:13.200 --> 00:08:14.520
and everything was in a repo.


00:08:14.520 --> 00:08:19.520
So I guess Microsoft was like a reaction to that,


00:08:19.520 --> 00:08:26.780
to separate code into isolated environments


00:08:27.220 --> 00:08:32.220
and you can have this nice and clean little code base


00:08:32.220 --> 00:08:33.900
and you have that does one thing


00:08:33.900 --> 00:08:35.700
and you have this other code base


00:08:35.700 --> 00:08:37.660
that does a different thing.


00:08:37.660 --> 00:08:40.460
- So you're thinking like,


00:08:40.460 --> 00:08:45.580
so if instead of just having the user authentication bit


00:08:45.580 --> 00:08:47.380
completely just woven into the code,


00:08:47.380 --> 00:08:49.820
we can make a little API that we call over JSON


00:08:49.820 --> 00:08:51.340
that does the authentication


00:08:51.340 --> 00:08:54.220
and then here's the one that has the catalog


00:08:54.220 --> 00:08:55.900
and we could write just a little bit of code


00:08:55.900 --> 00:08:58.400
And I guess the benefit, right,


00:08:58.400 --> 00:09:01.560
is that whoever's working on the catalog bit,


00:09:01.560 --> 00:09:03.840
they theoretically can just stay focused


00:09:03.840 --> 00:09:06.720
on that little bit of code and not the entire system, right?


00:09:06.720 --> 00:09:09.760
- Yeah. - With a microservice story.


00:09:09.760 --> 00:09:10.940
- Yeah.


00:09:10.940 --> 00:09:15.940
So a monorepo is, I think, from the way I see it,


00:09:15.940 --> 00:09:20.940
it's like, it's a Git or any version control repo


00:09:22.380 --> 00:09:27.380
that has basically all of your code


00:09:27.380 --> 00:09:30.340
in the same repo, same repository.


00:09:30.340 --> 00:09:33.940
And that doesn't necessarily mean that it's one program


00:09:33.940 --> 00:09:37.780
or one app that you are going to build or compile into.


00:09:37.780 --> 00:09:42.780
You can have several projects or artifacts in that repo.


00:09:42.780 --> 00:09:47.020
And I guess that's why it's called the mono repo


00:09:47.020 --> 00:09:50.500
because you can have multiple things in it.


00:09:50.500 --> 00:09:53.980
So I guess that's the difference between a monolith


00:09:53.980 --> 00:09:57.260
where you actually build one app


00:09:57.260 --> 00:10:00.020
and deploy it to one place.


00:10:00.020 --> 00:10:02.940
- Right, right.


00:10:02.940 --> 00:10:08.280
The monolith is the opposite of the microservice style.


00:10:08.280 --> 00:10:12.100
Whereas the monorepo is just a way of organizing your code


00:10:12.100 --> 00:10:16.180
and sharing how do you propagate changes,


00:10:16.180 --> 00:10:21.180
look at dependencies across either libraries or...


00:10:21.180 --> 00:10:24.340
There are companies that take this really far,


00:10:24.340 --> 00:10:27.800
like crazy, crazy far, like Google and Facebook,


00:10:27.800 --> 00:10:29.060
I believe, haven't worked on it,


00:10:29.060 --> 00:10:33.440
but I hear that they have one repo.


00:10:33.440 --> 00:10:34.280
- Yeah.


00:10:34.280 --> 00:10:36.320
- For like all of it.


00:10:36.320 --> 00:10:37.340
One, really?


00:10:37.340 --> 00:10:40.140
Just like, what's the checkout story look like on that?


00:10:40.140 --> 00:10:41.760
- That has to be a lot of code.


00:10:41.760 --> 00:10:44.540
- Yeah, it's gotta be a lot of code.


00:10:44.540 --> 00:10:50.660
I believe Google-- I'm probably going to misassociate this,


00:10:50.660 --> 00:10:56.300
but I think Google uses Bazel.


00:10:56.300 --> 00:10:58.300
There's different tools that allow them


00:10:58.300 --> 00:11:00.580
that are kind of not just Git, but something that


00:11:00.580 --> 00:11:04.220
can handle that scale of code.


00:11:04.220 --> 00:11:10.260
So it really-- when I think about organizing my code,


00:11:10.260 --> 00:11:12.100
it's either me or me and a couple of people


00:11:12.100 --> 00:11:15.660
working on the code and it's pretty contained.


00:11:15.660 --> 00:11:17.460
But when you start to think about hundreds


00:11:17.460 --> 00:11:20.440
or thousands of people across projects,


00:11:20.440 --> 00:11:22.740
it starts to get really wild, right?


00:11:22.740 --> 00:11:26.780
- Yeah, that has to be a completely different story.


00:11:26.780 --> 00:11:28.380
(laughs)


00:11:28.380 --> 00:11:29.220
- Yeah.


00:11:29.220 --> 00:11:32.100
- Where you really come to see how they do,


00:11:32.100 --> 00:11:35.300
how they work in the teams.


00:11:35.300 --> 00:11:37.020
- Yeah, absolutely.


00:11:37.020 --> 00:11:41.180
So maybe we could talk about some of the,


00:11:41.180 --> 00:11:46.180
Why, if you're not doing this, why would you do that?


00:11:46.180 --> 00:11:50.460
Like it seems, you highlighted that there's kind of


00:11:50.460 --> 00:11:55.020
these two trends that you saw out there


00:11:55.020 --> 00:11:56.020
in some of your articles.


00:11:56.020 --> 00:11:58.100
And we'll talk about the articles and link to them.


00:11:58.100 --> 00:12:01.580
You talked about seeing a trend of more people


00:12:01.580 --> 00:12:05.140
trending towards this monorepo and more people


00:12:05.140 --> 00:12:07.300
or other groups of people trending towards


00:12:07.300 --> 00:12:10.980
having more small repos.


00:12:10.980 --> 00:12:11.820
- Yeah.


00:12:11.820 --> 00:12:14.660
- For, you take my little microservice example,


00:12:14.660 --> 00:12:19.620
the user access service might be its own repository


00:12:19.620 --> 00:12:21.980
separate from the catalog service.


00:12:21.980 --> 00:12:23.340
Whereas others might say,


00:12:23.340 --> 00:12:25.660
we're gonna put all that together and all the utilities


00:12:25.660 --> 00:12:28.180
and that other data reporting project


00:12:28.180 --> 00:12:30.160
and all of that goes into one giant repo,


00:12:30.160 --> 00:12:32.420
even though there's a big team on it, right?


00:12:32.420 --> 00:12:33.260
- Yeah.


00:12:33.260 --> 00:12:36.840
Well, I think from my experience,


00:12:36.840 --> 00:12:41.480
what I've seen joining different teams


00:12:41.480 --> 00:12:45.400
and different companies that I've seen exactly that some,


00:12:45.400 --> 00:12:51.080
quite recently I joined a team


00:12:51.080 --> 00:12:53.320
at a company with several teams


00:12:53.320 --> 00:12:56.400
and they actually migrated from a monorepo


00:12:56.400 --> 00:12:59.520
to several repositories.


00:12:59.520 --> 00:13:02.600
And it was part of their microservice journey


00:13:02.600 --> 00:13:04.280
as they call it,


00:13:04.280 --> 00:13:09.280
because they had one repo with all their code,


00:13:09.280 --> 00:13:15.440
but that code base was so difficult to work with.


00:13:15.440 --> 00:13:23.400
So they kind of wanted to extract one app at a time


00:13:23.400 --> 00:13:27.800
into a separate repository just to be able to deploy that one


00:13:27.800 --> 00:13:31.360
and work with it in a reasonable way


00:13:31.360 --> 00:13:34.440
with tooling support and things like that.


00:13:34.440 --> 00:13:39.440
So, and before that, I was at a different company


00:13:39.440 --> 00:13:41.700
joining a different team,


00:13:41.700 --> 00:13:44.320
and we went the total opposite way.


00:13:44.320 --> 00:13:47.080
We had a couple of microservices


00:13:47.080 --> 00:13:54.620
that we were quite easy to work with,


00:13:54.620 --> 00:13:59.620
but we identified issues or problems with it


00:13:59.640 --> 00:14:01.960
because maybe there's one service


00:14:01.960 --> 00:14:04.600
that has outdated dependencies.


00:14:04.600 --> 00:14:09.600
Or the biggest problem was the actual code duplication


00:14:09.600 --> 00:14:11.440
because we had one service


00:14:11.440 --> 00:14:14.080
that we had developed one thing for,


00:14:14.080 --> 00:14:17.280
and we had another service that we needed code


00:14:17.280 --> 00:14:20.600
that was very much like the thing we had


00:14:20.600 --> 00:14:24.400
in that other service.


00:14:24.400 --> 00:14:26.560
So I guess the solution could be to extract that one


00:14:26.560 --> 00:14:29.520
into a library, but then you have three repositories


00:14:29.520 --> 00:14:34.520
And so I guess there's difficult to find that good balance


00:14:34.520 --> 00:14:39.180
between the one or the other.


00:14:39.180 --> 00:14:42.360
- Yeah, I agree.


00:14:42.360 --> 00:14:43.600
And that extracting, I mean,


00:14:43.600 --> 00:14:47.360
that's certainly one of the possibilities.


00:14:47.360 --> 00:14:49.320
As you say, well, we're gonna, you know what?


00:14:49.320 --> 00:14:50.880
We now have a third repository


00:14:50.880 --> 00:14:55.880
and we have the share, the data access repository and package


00:14:55.880 --> 00:14:57.680
you know, that's probably not the type of thing


00:14:57.680 --> 00:15:00.600
you publish to PyPI, but it's very likely something


00:15:00.600 --> 00:15:03.120
you would publish to some kind of internal


00:15:03.120 --> 00:15:06.720
dependency artifact system that you would depend upon, right?


00:15:06.720 --> 00:15:13.040
But the problem is, if it's used in just these two places,


00:15:13.040 --> 00:15:15.760
it's, and it sounds like that sort of description,


00:15:15.760 --> 00:15:19.440
the kind of the team is probably working on both sides


00:15:19.440 --> 00:15:21.680
of those microservices and they understand


00:15:21.680 --> 00:15:24.640
the broader system, but as it grows


00:15:24.640 --> 00:15:26.200
and more people depend upon it,


00:15:26.200 --> 00:15:30.200
it's harder to understand this little standalone project.


00:15:30.200 --> 00:15:34.720
Who is using it and what ways are they completely,


00:15:34.720 --> 00:15:36.560
can we make a change here?


00:15:36.560 --> 00:15:40.560
If we refactor this, who do we talk to about changing


00:15:40.560 --> 00:15:42.440
even just the signature of a function?


00:15:42.440 --> 00:15:46.160
How do we reach out to the other parts of code


00:15:46.160 --> 00:15:48.800
or other stakeholders and say, look,


00:15:48.800 --> 00:15:53.800
we need to change this function, but we got to,


00:15:53.800 --> 00:15:55.280
you know, we're changing the data model


00:15:55.280 --> 00:15:57.780
and you're going to have to figure out how to go along.


00:15:57.780 --> 00:16:01.980
On the other hand, if all of those projects were together


00:16:01.980 --> 00:16:03.980
in a giant mono repo,


00:16:03.980 --> 00:16:09.180
we have tooling that understands what functions call this function


00:16:09.180 --> 00:16:11.980
or what thing imports this class,


00:16:11.980 --> 00:16:14.580
or who's using it, is it used at all?


00:16:14.580 --> 00:16:16.180
Actually, maybe you could delete it.


00:16:16.180 --> 00:16:18.180
You thought someone was using it, and no one's using it.


00:16:18.180 --> 00:16:24.280
There's a lot of understanding of the broader integration


00:16:24.280 --> 00:16:26.640
if it's all there with you, right?


00:16:26.640 --> 00:16:28.920
Definitely.


00:16:28.920 --> 00:16:36.680
What was I going to say? I totally agree. And our editors


00:16:36.680 --> 00:16:44.040
are so smart, and they can can find usages. And if you this


00:16:44.040 --> 00:16:47.280
function signature isn't really correct and stuff like that,


00:16:47.280 --> 00:16:53.120
and that's so much easier when you have your source code in a


00:16:53.120 --> 00:17:00.560
folder, but it's like right next to the one using it. So that's a huge benefit like editor wise to


00:17:00.560 --> 00:17:05.680
the developer experience, I guess. Yeah, absolutely. And


00:17:05.680 --> 00:17:13.200
I think one of this is both a benefit and a challenge, you know, maybe link to the mono


00:17:13.200 --> 00:17:18.160
repo Wikipedia page. And here's some of the advantages. One of the number one advantage


00:17:18.160 --> 00:17:20.560
is ease of code reuse.


00:17:20.560 --> 00:17:24.440
So it's possible, not necessarily suggested,


00:17:24.440 --> 00:17:26.760
but possible that you say, well,


00:17:26.760 --> 00:17:30.340
the data access functions and classes


00:17:30.340 --> 00:17:31.800
that we need on this side,


00:17:31.800 --> 00:17:33.060
we need some of them over here,


00:17:33.060 --> 00:17:34.560
but if you have the whole monorepo,


00:17:34.560 --> 00:17:38.200
you could just say, well, import them in both projects


00:17:38.200 --> 00:17:41.760
and deploy a larger piece of code to your server,


00:17:41.760 --> 00:17:42.580
but who cares?


00:17:42.580 --> 00:17:43.720
The servers have a lot of storage


00:17:43.720 --> 00:17:46.080
and they'll be fine, right?


00:17:46.080 --> 00:17:46.920
- Yeah, yeah.


00:17:46.920 --> 00:17:49.240
(laughing)


00:17:49.240 --> 00:17:51.240
- The challenge I think is gonna be the,


00:17:51.240 --> 00:17:57.080
you're gonna end up with a tightly coupled architecture


00:17:57.080 --> 00:17:59.920
pretty badly if you just say,


00:17:59.920 --> 00:18:02.240
well, I see way over there, there's that file


00:18:02.240 --> 00:18:04.080
and that's the one I want and we're just gonna grab that.


00:18:04.080 --> 00:18:08.960
And it doesn't necessarily encourage good behavior


00:18:08.960 --> 00:18:11.080
but it does make reusing code


00:18:11.080 --> 00:18:13.120
and understand how it's being used easy, right?


00:18:13.120 --> 00:18:13.960
- Yeah.


00:18:15.240 --> 00:18:19.160
- Yeah, and also you're like in the risk zone


00:18:19.160 --> 00:18:21.900
of actually building a monolith again.


00:18:21.900 --> 00:18:23.980
So, yeah. - Yeah, exactly.


00:18:23.980 --> 00:18:28.720
Usually part of the API endpoints run there


00:18:28.720 --> 00:18:30.120
and part of the API endpoints run there,


00:18:30.120 --> 00:18:32.960
but they're effectively just one giant thing, right?


00:18:32.960 --> 00:18:40.400
- So I guess what I think is that if you are using a monolith


00:18:40.400 --> 00:18:43.640
if you want to have your code in a monolith,


00:18:43.640 --> 00:18:46.860
I guess you would need some sort of tooling


00:18:46.860 --> 00:18:51.860
or ideas about how to separate your code


00:18:51.860 --> 00:18:56.400
into separate artifacts that don't have


00:18:56.400 --> 00:18:59.920
the entire code base in its package,


00:18:59.920 --> 00:19:04.000
only the code that is actually needed for this artifact.


00:19:04.000 --> 00:19:08.000
So I guess that's part of the challenge,


00:19:08.000 --> 00:19:09.920
having a monorepo.


00:19:09.920 --> 00:19:11.160
- I would say so.


00:19:11.160 --> 00:19:13.640
I've been thinking about this a little bit


00:19:13.640 --> 00:19:15.440
leading up to our conversation today.


00:19:15.440 --> 00:19:20.120
And certainly you can use packages in the,


00:19:20.120 --> 00:19:22.040
you know, we have this problem in Python


00:19:22.040 --> 00:19:27.040
or this challenge where packages mean different things


00:19:27.040 --> 00:19:29.800
but it has the same word.


00:19:29.800 --> 00:19:32.860
So a package could be just a grouping of modules


00:19:32.860 --> 00:19:35.520
into a directory that has a gender in it


00:19:35.520 --> 00:19:37.580
or it could be something on PyPI that you ship


00:19:37.580 --> 00:19:39.400
and you deploy a new version on its own.


00:19:39.400 --> 00:19:43.400
I mean, in just the on-disk, the Dunder,


00:19:43.400 --> 00:19:46.400
and that local grouping.


00:19:46.400 --> 00:19:50.400
You could create these groups within your Monorepo


00:19:50.400 --> 00:19:53.400
and say, "We're going to import that," but have a little bit


00:19:53.400 --> 00:19:57.400
of a formal separation and say, "Look, we're not necessarily going


00:19:57.400 --> 00:20:02.400
to deploy it through some versioning story and let other people pull it in


00:20:02.400 --> 00:20:06.400
because then we lose track of who's using it and how they're using it.


00:20:06.400 --> 00:20:08.400
Are they on the right version?


00:20:08.400 --> 00:20:12.080
But we'll still maybe think of them as a Python package


00:20:12.080 --> 00:20:14.080
in a sense.


00:20:14.080 --> 00:20:17.960
Do you have any experience with doing it one way or the other?


00:20:17.960 --> 00:20:19.960
Any preference?


00:20:19.960 --> 00:20:22.760
Yeah, what I was thinking of


00:20:22.760 --> 00:20:25.920
from the company that I joined that were


00:20:25.920 --> 00:20:29.080
migrating from their monorepo,


00:20:29.080 --> 00:20:32.760
they had done a couple of attempts to


00:20:32.760 --> 00:20:36.040
to do this code sharing thing


00:20:36.040 --> 00:20:41.560
with the likes, I think it was like Git submodules or sim links and things like that.


00:20:41.560 --> 00:20:50.120
But all of that ended up into, it became too complicated to understand what was going on.


00:20:50.120 --> 00:20:56.760
And I think even the editor support wasn't really perfect when you had like these kind of


00:20:56.760 --> 00:21:04.200
dynamic linking. So I guess that's why they chose to abandon that idea.


00:21:05.800 --> 00:21:12.200
Yeah, and it sounds a little bit like with the submodules


00:21:12.200 --> 00:21:15.400
that it was not a pure monorepo, but kind of a,


00:21:15.400 --> 00:21:23.840
let's have different sections on our repository,


00:21:23.840 --> 00:21:27.560
but bring it together when we see it for development


00:21:27.560 --> 00:21:30.240
as if it was a monorepo, right?


00:21:30.240 --> 00:21:32.520
Like, we're going to sort of put these files,


00:21:32.520 --> 00:21:35.040
and this is a submodule, that's a submodule,


00:21:35.040 --> 00:21:37.520
and they're kind of separate, but then once they're all


00:21:37.520 --> 00:21:39.820
checked out and linked up, then our tool


00:21:39.820 --> 00:21:43.000
thinks of it as one giant thing, like the monorepo would be.


00:21:43.000 --> 00:21:44.160
Right?


00:21:44.160 --> 00:21:45.560
- Yeah.


00:21:45.560 --> 00:21:46.640
- Yeah.


00:21:46.640 --> 00:21:48.560
So that's kind of an intermediate.


00:21:48.560 --> 00:21:50.000
I also thought about this as well.


00:21:50.000 --> 00:21:53.480
Like maybe you could put together the Git tools like that.


00:21:53.480 --> 00:21:56.880
I do want to highlight a couple of Git tools,


00:21:56.880 --> 00:22:01.560
because maybe I'll take a quick bit of audience feedback


00:22:01.560 --> 00:22:04.480
real quick, but I do think that, you know,


00:22:04.480 --> 00:22:06.640
when it's five people, 10 people,


00:22:06.640 --> 00:22:08.720
you just check the thing out and it's gonna be fine.


00:22:08.720 --> 00:22:10.760
But as it gets larger and larger,


00:22:10.760 --> 00:22:14.720
both over time and lines of code and number of people,


00:22:14.720 --> 00:22:19.320
it's gonna be a thing where it almost becomes unmanageable


00:22:19.320 --> 00:22:24.100
to just do a git clone URL and see what happens, right?


00:22:24.100 --> 00:22:26.540
(laughing)


00:22:26.540 --> 00:22:29.040
- You can go grab a coffee and when you got back,


00:22:29.040 --> 00:22:30.160
it's not--


00:22:30.160 --> 00:22:32.080
- Exactly, I mean, there's,


00:22:32.080 --> 00:22:33.860
we've probably seen that XKCD


00:22:33.860 --> 00:22:36.420
where there's people like fake sword fighting on a chair.


00:22:36.420 --> 00:22:38.820
It's like, get back to work.


00:22:38.820 --> 00:22:39.820
We're doing to get clone.


00:22:39.820 --> 00:22:41.020
Leave us alone.


00:22:41.020 --> 00:22:42.380
OK, sure, fine.


00:22:42.380 --> 00:22:43.020
I got you.


00:22:43.020 --> 00:22:45.420
It's going to be a while.


00:22:45.420 --> 00:22:47.300
Some quick bit of audience feedback


00:22:47.300 --> 00:22:50.180
says, model repos are OK if you have a dedicated team that


00:22:50.180 --> 00:22:53.100
manages the advanced tooling required to deal with them.


00:22:53.100 --> 00:22:53.780
Yeah, absolutely.


00:22:53.780 --> 00:22:57.260
And sort of related, Lucas asks, would you


00:22:57.260 --> 00:22:58.860
use Bazel for your projects?


00:22:58.860 --> 00:23:03.840
Or rather, make files or similar in case of lints and builds?


00:23:03.840 --> 00:23:08.840
So yeah, there's the different tools that like Facebook


00:23:08.840 --> 00:23:12.160
and Google and those folks use.


00:23:12.160 --> 00:23:13.720
There's also Pants.


00:23:13.720 --> 00:23:16.480
Benji Weinberg has talked a lot about it.


00:23:16.480 --> 00:23:18.400
I've had him on the show before


00:23:18.400 --> 00:23:19.960
and Pants is one of these tools


00:23:19.960 --> 00:23:22.560
that can kind of help Pants build.


00:23:22.560 --> 00:23:24.400
But David, how about you?


00:23:24.400 --> 00:23:27.600
What were you all using in terms of more advanced tooling


00:23:27.600 --> 00:23:30.360
or was there anything special?


00:23:31.200 --> 00:23:34.760
Back then, it was not really more advanced


00:23:34.760 --> 00:23:39.180
than actually make files to make things happen.


00:23:39.180 --> 00:23:43.860
But the place, the team that I joined,


00:23:43.860 --> 00:23:48.080
actually started to use this,


00:23:48.080 --> 00:23:50.240
I guess we're going to talk about it


00:23:50.240 --> 00:23:52.320
some of the architecture called PolyLith


00:23:52.320 --> 00:23:54.960
and there's also tooling support.


00:23:54.960 --> 00:23:55.800
- Yeah.


00:23:55.800 --> 00:24:00.800
- That kind of offers a solution to many of these headaches


00:24:01.100 --> 00:24:04.140
with having a monorepo.


00:24:04.140 --> 00:24:06.380
So, so-- - Okay, yeah, absolutely.


00:24:06.380 --> 00:24:10.620
- And back then it was because Polylith


00:24:10.620 --> 00:24:13.160
is originates from Clojure.


00:24:13.160 --> 00:24:15.700
So we were actually writing Clojure code.


00:24:15.700 --> 00:24:20.700
And for Python, I was started to look around for solution.


00:24:20.700 --> 00:24:26.900
I actually read a little bit about Pants.


00:24:26.900 --> 00:24:31.300
I think that can solve a lot of problems too.


00:24:31.300 --> 00:24:35.180
It seems like a really great tool


00:24:35.180 --> 00:24:38.720
with a lot of useful functionality.


00:24:38.720 --> 00:24:44.660
And then there's also poetry.


00:24:44.660 --> 00:24:48.740
I don't think, it's not really about monorepos,


00:24:48.740 --> 00:24:53.060
but you can, I believe that you can use pure poetry


00:24:55.540 --> 00:25:00.380
and have your dependencies like the third party libraries,


00:25:00.380 --> 00:25:05.220
your own or the one at PyPy in sort of an,


00:25:05.220 --> 00:25:08.260
not the third party, but your own in an editable mode.


00:25:08.260 --> 00:25:11.380
So they will, as soon as you change something,


00:25:11.380 --> 00:25:12.380
it will be updated.


00:25:12.380 --> 00:25:16.260
So I guess there are some tools


00:25:16.260 --> 00:25:18.700
that can help you along the way.


00:25:18.700 --> 00:25:23.860
But I guess there's still a lot of frustration


00:25:23.860 --> 00:25:27.540
and having that smooth and really joyful


00:25:27.540 --> 00:25:29.740
monorepo experience that you would like to have.


00:25:29.740 --> 00:25:34.740
So that's what led me to start working on this project.


00:25:34.740 --> 00:25:38.760
- I do think that Python,


00:25:38.760 --> 00:25:41.500
the way that its dependencies and its understanding


00:25:41.500 --> 00:25:45.820
of linking files together through directories


00:25:45.820 --> 00:25:48.920
and things like that makes it a little bit more challenging


00:25:48.920 --> 00:25:50.000
than other systems.


00:25:50.000 --> 00:25:52.460
Like if I was doing C++,


00:25:52.460 --> 00:25:54.000
I could open up Visual Studio Code


00:25:54.000 --> 00:25:56.380
and create a broader project and say,


00:25:56.380 --> 00:25:59.680
these three libraries are what I want to see as my project.


00:25:59.680 --> 00:26:01.380
And it doesn't really matter where they come from.


00:26:01.380 --> 00:26:02.840
You build it and they link together


00:26:02.840 --> 00:26:05.700
and there's sort of a, you know,


00:26:05.700 --> 00:26:07.540
build the Delta only type of thing.


00:26:07.540 --> 00:26:10.040
Whereas in Python, you kind of need to bring on


00:26:10.040 --> 00:26:11.260
a little bit more tooling to say,


00:26:11.260 --> 00:26:13.540
I know it looks like there's some giant Python thing here,


00:26:13.540 --> 00:26:15.680
but just these two pieces.


00:26:15.680 --> 00:26:18.380
That's what I want to think of as the thing, you know?


00:26:18.380 --> 00:26:19.280
(laughing)


00:26:19.280 --> 00:26:20.120
- Yeah.


00:26:21.360 --> 00:26:23.680
But what we're going to talk about with some of the stuff


00:26:23.680 --> 00:26:25.680
that you've done with Poetry,


00:26:25.680 --> 00:26:31.020
with PolyLith and others, certainly make that relevant.


00:26:31.020 --> 00:26:33.020
I do want to talk about the Git tools,


00:26:33.020 --> 00:26:35.500
but it's also interesting, this comment from David Poole,


00:26:35.500 --> 00:26:39.580
it says, "We use submodules for legal licensing reasons."


00:26:39.580 --> 00:26:45.340
That is, to have GPL code separate from our proprietary code


00:26:45.340 --> 00:26:46.780
rather than just dropping it in,


00:26:46.780 --> 00:26:49.660
which obviously has different implications.


00:26:49.660 --> 00:26:53.160
- Yeah, oh, that was very interesting to learn about, yeah.


00:26:53.160 --> 00:26:55.500
- Yeah, I hadn't really thought about that either,


00:26:55.500 --> 00:26:58.420
but yes, you definitely, definitely wanna think about it.


00:26:58.420 --> 00:27:00.620
So let's just talk Git for a moment.


00:27:00.620 --> 00:27:05.140
Now, one of the big challenges is


00:27:05.140 --> 00:27:08.140
if we're gonna put this all into one giant GitHub repository,


00:27:08.140 --> 00:27:11.220
which I hinted at, it could get really large,


00:27:11.220 --> 00:27:13.400
especially if you put binary files,


00:27:13.400 --> 00:27:16.860
like some of your build tooling or other assets,


00:27:16.860 --> 00:27:17.820
you might put it in there,


00:27:17.820 --> 00:27:20.140
and then that makes it extra tricky.


00:27:20.140 --> 00:27:23.800
The less something can diff, the more it piles up quick.


00:27:23.800 --> 00:27:25.600
So as I was thinking about this thing,


00:27:25.600 --> 00:27:29.840
I learned about a couple of cool ideas.


00:27:29.840 --> 00:27:31.280
Let's talk about this one first.


00:27:31.280 --> 00:27:33.320
Partial clone.


00:27:33.320 --> 00:27:36.720
This is something that was totally new to me.


00:27:36.720 --> 00:27:43.640
So normally, it's get clone the URL to the get repository.


00:27:43.640 --> 00:27:48.940
However, you can say things like filter --filter=blob.


00:27:48.940 --> 00:27:50.940
Have you seen this before, David?


00:27:50.940 --> 00:27:55.640
No, this is totally new to me, but it looks really interesting.


00:27:55.640 --> 00:28:03.240
Yeah, so what happens here is the blob is like a binary file, right?


00:28:03.240 --> 00:28:06.240
And what you're saying when you say filter blob


00:28:06.240 --> 00:28:10.040
is it'll check out all of the git history.


00:28:10.040 --> 00:28:12.340
And normally when you do a clone, you get,


00:28:12.340 --> 00:28:15.220
at least for the branch neuron, you get every version of the file.


00:28:15.220 --> 00:28:17.300
So you git clone, you disconnect from the network,


00:28:17.300 --> 00:28:19.060
and you've got everything, right?


00:28:19.060 --> 00:28:21.060
Which is the beauty of git.


00:28:21.060 --> 00:28:24.740
But if you've got a really huge repository,


00:28:24.740 --> 00:28:27.220
it also might be the drawback of git.


00:28:27.220 --> 00:28:31.780
So you can filter out these blobs in the historical sense.


00:28:31.780 --> 00:28:35.420
And if you say this, what you see in your hard drive


00:28:35.420 --> 00:28:38.020
for the working directory is identical.


00:28:38.020 --> 00:28:42.260
But the .git folder with the history only has the working version,


00:28:42.260 --> 00:28:46.020
not all copies of the history of the blob.


00:28:46.020 --> 00:28:49.100
And it turns out that this has like a really huge effect.


00:28:49.100 --> 00:28:53.560
So I did this on Talk Python Training, my courses website.


00:28:53.560 --> 00:28:57.660
And if I just say, get clone, the repo,


00:28:57.660 --> 00:29:00.720
it pulled down 118,000 objects.


00:29:00.720 --> 00:29:05.620
It resolved 71,000 deltas and it updated 10,000 files.


00:29:05.620 --> 00:29:07.020
And it was a gig on disk.


00:29:07.020 --> 00:29:10.260
If I just say filter --filter equals blob colon none,


00:29:12.060 --> 00:29:15.980
It goes from 118,000 to 10,000 downloads.


00:29:15.980 --> 00:29:19.640
It goes from, it's less than half the size.


00:29:19.640 --> 00:29:23.720
And the resulting files on disk, those were the same,


00:29:23.720 --> 00:29:28.720
but the intermediate deltas were like 1/70 or 1/50.


00:29:28.720 --> 00:29:31.800
Really a big difference.


00:29:31.800 --> 00:29:37.280
And this is, you know, it's a pretty old repo.


00:29:37.280 --> 00:29:38.640
It's got a lot of stuff, but it's not,


00:29:38.640 --> 00:29:40.320
it's nothing compared to what a lot of people have.


00:29:40.320 --> 00:29:43.480
So one, there's one problem where like, okay,


00:29:43.480 --> 00:29:46.640
if I'm gonna try to get clone a monorepo,


00:29:46.640 --> 00:29:48.160
there's just no way, right?


00:29:48.160 --> 00:29:50.320
So Link adding this aspect here,


00:29:50.320 --> 00:29:52.420
I think actually would be really valuable.


00:29:52.420 --> 00:29:54.560
- Yeah, definitely.


00:29:54.560 --> 00:29:58.400
Because it's, I guess in the normal,


00:29:58.400 --> 00:30:00.560
the use case is that you want to work


00:30:00.560 --> 00:30:02.640
with the latest version of the source code.


00:30:02.640 --> 00:30:04.120
You want to develop something new.


00:30:04.120 --> 00:30:07.920
So I guess that's what you want on disk.


00:30:08.960 --> 00:30:11.420
- Yeah, most of the time.


00:30:11.420 --> 00:30:13.520
And what happens is, if you say,


00:30:13.520 --> 00:30:15.520
well, actually we need to switch branches,


00:30:15.520 --> 00:30:19.300
or we need to go back three months in time,


00:30:19.300 --> 00:30:20.760
it just goes back to the network


00:30:20.760 --> 00:30:22.520
and clones a little bit more.


00:30:22.520 --> 00:30:25.160
It's like an incremental clone as it needs it.


00:30:25.160 --> 00:30:31.000
So I think actually this would help a lot of people


00:30:31.000 --> 00:30:33.740
who don't know about it, working with monorepos


00:30:33.740 --> 00:30:35.160
that turn out to have a lot of files,


00:30:35.160 --> 00:30:37.880
and a lot of historical, especially binaries


00:30:37.880 --> 00:30:39.600
that grow over time.


00:30:39.600 --> 00:30:40.880
- Yeah.


00:30:40.880 --> 00:30:42.720
- 'Cause those are the ones that are huge, you know,


00:30:42.720 --> 00:30:45.360
it's not the text files usually that are the problem.


00:30:45.360 --> 00:30:49.920
- So I have to put my (indistinct)


00:30:49.920 --> 00:30:51.200
- Yeah, yeah, yeah, absolutely.


00:30:51.200 --> 00:30:55.000
And related to that, related to that,


00:30:55.000 --> 00:31:00.000
so quirky ads, wouldn't a shallow clone be more predictable?


00:31:00.000 --> 00:31:01.840
So this is also interesting.


00:31:01.840 --> 00:31:06.840
So shallow clones is a older way to do this in GitHub.


00:31:07.840 --> 00:31:10.400
The problem is with shallow clones,


00:31:10.400 --> 00:31:14.800
you don't get the full history and change log.


00:31:14.800 --> 00:31:18.280
With these partial clones, you have all of the history,


00:31:18.280 --> 00:31:22.280
commit history and details, you just don't have the files


00:31:22.280 --> 00:31:23.320
and they're incrementally pulled in.


00:31:23.320 --> 00:31:25.320
So you could do a shallow clone.


00:31:25.320 --> 00:31:29.560
And then there's another one, what was it called?


00:31:29.560 --> 00:31:31.440
A sparse clone.


00:31:31.440 --> 00:31:37.280
So a sparse clone is another tool


00:31:37.480 --> 00:31:40.240
that you can bring in here for advanced Git usage,


00:31:40.240 --> 00:31:43.960
where you say, "I know I've got this huge directory structure,


00:31:43.960 --> 00:31:47.720
but I just want to get these three directories,


00:31:47.720 --> 00:31:50.640
or this sub-directory structure,"


00:31:50.640 --> 00:31:53.120
and you clone only part of the files.


00:31:53.120 --> 00:31:56.000
So we're talking about how Python understands


00:31:56.000 --> 00:31:58.480
just the whole thing as one giant project,


00:31:58.480 --> 00:32:00.960
and maybe even you check it out and try to open it,


00:32:00.960 --> 00:32:03.080
your editor will just sit there indexing, indexing,


00:32:03.080 --> 00:32:06.120
and autocomplete won't really work very well,


00:32:06.120 --> 00:32:07.900
and it'll go crazy.


00:32:07.900 --> 00:32:10.460
So you can just say, I want these three directories,


00:32:10.460 --> 00:32:12.720
and I want them partially cloned,


00:32:12.720 --> 00:32:14.900
so they only have the recent history,


00:32:14.900 --> 00:32:16.380
and they're not so insane.


00:32:16.380 --> 00:32:18.060
And you can kind of combine these


00:32:18.060 --> 00:32:22.380
to get really focused views into a monorepo,


00:32:22.380 --> 00:32:24.340
which I thought was pretty interesting.


00:32:24.340 --> 00:32:32.120
Yeah, so anyway, when I think back to the story


00:32:32.320 --> 00:32:37.320
told about how you guys were using sub-modules,


00:32:37.320 --> 00:32:41.040
I feel like these partial clones plus sparse clones


00:32:41.040 --> 00:32:44.140
might be a better fit than trying to


00:32:44.140 --> 00:32:46.140
sim-link things together.


00:32:46.140 --> 00:32:49.140
Because it really just is the same thing.


00:32:49.140 --> 00:32:51.140
If you want to clone the whole thing, you do,


00:32:51.140 --> 00:32:53.880
but then you can just, as you clone it, filter out.


00:32:53.880 --> 00:32:55.880
And you can also, with those sparse clones,


00:32:55.880 --> 00:32:57.880
you can retroactively add in,


00:32:57.880 --> 00:33:01.140
"Oh, I also need that directory," say, "Get Sparse Add."


00:33:01.140 --> 00:33:04.540
- Oh, cool. - I now need this piece


00:33:04.540 --> 00:33:05.540
to come in as well.


00:33:05.540 --> 00:33:08.860
And there's some interesting ways to put these together.


00:33:08.860 --> 00:33:10.500
So I think these tools are gonna be,


00:33:10.500 --> 00:33:12.420
for people who are working with monorepos,


00:33:12.420 --> 00:33:15.980
I think those advanced Git features that I called out


00:33:15.980 --> 00:33:17.380
might be really helpful.


00:33:17.380 --> 00:33:18.220
What do you think, David?


00:33:18.220 --> 00:33:20.220
- Yeah, I totally agree,


00:33:20.220 --> 00:33:24.200
especially when you have a monorepo that is a lot of code.


00:33:24.200 --> 00:33:29.200
So it seems like you wouldn't want to live without it,


00:33:30.420 --> 00:33:33.260
I guess, because it's probably a lot of helpful.


00:33:33.260 --> 00:33:36.180
- Yeah, I think so too.


00:33:36.180 --> 00:33:38.980
So sparse checkout, I believe is actually


00:33:38.980 --> 00:33:40.300
like I said, call it sparse clone.


00:33:40.300 --> 00:33:42.420
But I think it's sparse checkout is the term


00:33:42.420 --> 00:33:43.820
I'll link to it as well.


00:33:43.820 --> 00:33:46.420
Partial clone and sparse checkout, there we go.


00:33:46.420 --> 00:33:47.260
- Nice.


00:33:47.260 --> 00:33:48.620
- Okay, cool. - There's so many


00:33:48.620 --> 00:33:53.500
good features in Git that I guess most of us don't use.


00:33:53.500 --> 00:33:57.460
- Yeah, I think so too.


00:33:57.460 --> 00:33:59.260
I've been doing Git for a really long time


00:33:59.260 --> 00:34:04.260
and this sparse checkout is completely new to me.


00:34:04.260 --> 00:34:05.280
I only learned about it


00:34:05.280 --> 00:34:08.200
'cause I was trying to research a little bit more.


00:34:08.200 --> 00:34:10.720
Well, how do you do actually manage with these monorepos


00:34:10.720 --> 00:34:12.940
as we are preparing for our chat today?


00:34:12.940 --> 00:34:18.120
So yeah, I think there's a lot of tools and flexibility


00:34:18.120 --> 00:34:19.960
that are not obvious or not apparent


00:34:19.960 --> 00:34:22.420
that people can use to make monorepos


00:34:22.420 --> 00:34:24.440
work really, really well.


00:34:24.440 --> 00:34:26.760
But there's still a lot of interesting ways


00:34:26.760 --> 00:34:29.320
to structure your code and put it together


00:34:29.320 --> 00:34:31.540
and use it once you get it checked out.


00:34:31.540 --> 00:34:35.480
So maybe let's, what do you wanna start?


00:34:35.480 --> 00:34:37.440
You wanna start with a fresh take on monorepos?


00:34:37.440 --> 00:34:39.620
This is one of your articles.


00:34:39.620 --> 00:34:41.660
- Yeah, yeah, why not?


00:34:41.660 --> 00:34:43.860
- Yeah, yeah, so tell us the story here.


00:34:43.860 --> 00:34:49.220
- Yeah, I wrote this article about a year ago,


00:34:49.220 --> 00:34:53.060
most a year ago, and that was me trying to,


00:34:54.340 --> 00:34:58.980
Before that, I was trying to figure out how to work,


00:34:58.980 --> 00:35:02.820
have this nice developer experience in a monorepo.


00:35:02.820 --> 00:35:07.820
And coming from Clojure and having learned new things


00:35:07.820 --> 00:35:14.020
and have some new fresh ideas on how you can solve things,


00:35:14.020 --> 00:35:18.100
I wanted to give it a try in Python too.


00:35:18.100 --> 00:35:22.500
So, and also at the same time,


00:35:22.500 --> 00:35:27.500
I was actually doing work with microservices,


00:35:27.500 --> 00:35:31.940
but in several repos, and I kind of found myself,


00:35:31.940 --> 00:35:35.740
it was not a huge thing, but it was like a logger,


00:35:35.740 --> 00:35:39.340
sort of a logger module or a package.


00:35:39.340 --> 00:35:44.340
And I knew that I had done it in the other microservice


00:35:44.340 --> 00:35:47.080
just a couple of weeks ago.


00:35:47.080 --> 00:35:48.700
So, okay, what should I do?


00:35:48.700 --> 00:35:49.980
Should I create a library?


00:35:49.980 --> 00:35:52.660
no, this is way too small to create a library.


00:35:52.660 --> 00:35:56.380
And it's not, it's not, wasn't even open open source.


00:35:56.380 --> 00:36:01.060
It's like a proprietary system.


00:36:01.060 --> 00:36:06.060
So when you would need the private people servers


00:36:06.060 --> 00:36:07.220
and things like that.


00:36:07.220 --> 00:36:09.340
So I just ended up in copying some code.


00:36:09.340 --> 00:36:12.620
- And you know, while people would go, of course


00:36:12.620 --> 00:36:16.780
you should never do that, but sometimes it's just not


00:36:16.780 --> 00:36:19.420
it's just not complicated enough or important enough


00:36:19.420 --> 00:36:23.300
or big enough to justify all the change management


00:36:23.300 --> 00:36:26.180
and dependencies and you know what?


00:36:26.180 --> 00:36:27.660
That file, it goes into this project


00:36:27.660 --> 00:36:32.420
and it's usually it's fine until they get out of sync


00:36:32.420 --> 00:36:34.940
or there's some weird, you wanna upgrade one


00:36:34.940 --> 00:36:37.220
and then, oh, well, where else is it, right?


00:36:37.220 --> 00:36:38.700
- Yeah, yeah.


00:36:38.700 --> 00:36:39.540
- Yeah, okay.


00:36:39.540 --> 00:36:43.220
- Or you discover a bug in that part


00:36:43.220 --> 00:36:45.020
and you forget about that you have copied it


00:36:45.020 --> 00:36:46.740
to the couple of times and now with the other repo.


00:36:46.740 --> 00:36:49.240
So then you have a lot of work to do.


00:36:49.240 --> 00:36:53.460
- There's probably a whole section of cybersecurity history


00:36:53.460 --> 00:36:57.580
and like breaches where they thought they fixed a problem


00:36:57.580 --> 00:36:58.980
in some system.


00:36:58.980 --> 00:37:01.640
And it turns out someone else found a copy of it


00:37:01.640 --> 00:37:02.940
that wasn't fixed and broken.


00:37:02.940 --> 00:37:06.280
And yeah, there's a, yeah, this is not ideal.


00:37:06.280 --> 00:37:11.020
Yeah, so what'd you do?


00:37:11.020 --> 00:37:15.900
- Yeah, so I really wanted to give the podleth in Python


00:37:15.900 --> 00:37:24.620
try because I really enjoyed the way things are structured and a lot of these like headaches


00:37:24.620 --> 00:37:25.620
are solved there.


00:37:25.620 --> 00:37:26.620
So I started to...


00:37:26.620 --> 00:37:30.820
- PolyLith is really, really new to me.


00:37:30.820 --> 00:37:34.220
Maybe tell people about PolyLith before we go on because I suspect a lot of people don't


00:37:34.220 --> 00:37:35.220
know about this.


00:37:35.220 --> 00:37:38.420
Yeah, yeah, let's begin there and we'll come back to it.


00:37:38.420 --> 00:37:39.420
- Yeah, good.


00:37:39.420 --> 00:37:46.460
it's an architecture, but it's also a tool or something with a tooling support.


00:37:46.460 --> 00:37:53.180
And it's open source and it's developed by a fellow Swede, Joakim Tengstrand.


00:37:53.180 --> 00:38:01.340
And I was fortunate to actually work in the same team as him. So he was done introducing


00:38:01.340 --> 00:38:07.420
this and we decided to give it a try. He was new in our team.


00:38:07.420 --> 00:38:16.140
And I was, I have to confess, I was a little bit skeptical at the beginning because skeptical


00:38:16.140 --> 00:38:22.700
of monorepos in general too, because based on previous bad experiences.


00:38:22.700 --> 00:38:34.580
So the polylith is the main idea is that you have, that you create, when you write code,


00:38:34.580 --> 00:38:39.580
you're supposed, you aim to write them in small parts.


00:38:39.580 --> 00:38:44.140
And that's what Pololith called components.


00:38:44.140 --> 00:38:49.140
And a component, Pololith uses the idea of Lego,


00:38:49.140 --> 00:38:52.820
but for code.


00:38:52.820 --> 00:38:57.560
So a component could be a piece, a brick, a Lego brick,


00:38:57.560 --> 00:39:00.560
that you can reuse in several ways.


00:39:03.260 --> 00:39:07.360
And a component can be everything from a small tech,


00:39:07.360 --> 00:39:11.340
something that you normally would put in a utils folder,


00:39:11.340 --> 00:39:16.340
like functions that do maybe some parsing or something,


00:39:16.340 --> 00:39:19.380
but it can also be a combination of other components.


00:39:19.380 --> 00:39:23.020
So they don't have to be of the same size.


00:39:23.020 --> 00:39:26.900
It's the idea of composability and reusability


00:39:26.900 --> 00:39:28.500
that is the important thing.


00:39:29.980 --> 00:39:34.980
So, and like the big parts of PolyLith are components


00:39:34.980 --> 00:39:40.260
and then we have something called bases


00:39:40.260 --> 00:39:42.300
and that is also a component,


00:39:42.300 --> 00:39:46.260
but a kind of special kind of components.


00:39:46.260 --> 00:39:47.780
If you think about Lego,


00:39:47.780 --> 00:39:50.060
if you're going to build like a house,


00:39:50.060 --> 00:39:53.300
you often have some, a base plate


00:39:53.300 --> 00:39:55.060
where you put your Lego bricks on it.


00:39:55.060 --> 00:39:58.260
So a base is sort of that part.


00:39:58.260 --> 00:40:00.620
And in code that could be like,


00:40:00.620 --> 00:40:04.060
if you have like a FastAPI app,


00:40:04.060 --> 00:40:09.060
maybe a base plate could be where you define the end points.


00:40:09.060 --> 00:40:13.460
Like you use the API decorator style


00:40:13.460 --> 00:40:14.420
or something like that.


00:40:14.420 --> 00:40:16.960
So that could be a base.


00:40:16.960 --> 00:40:20.380
And then the code that actually does something


00:40:20.380 --> 00:40:23.760
could be a combination of different components.


00:40:23.760 --> 00:40:26.060
And all of this--


00:40:26.060 --> 00:40:27.760
- I rushed away to think of it.


00:40:27.760 --> 00:40:32.940
But so when you think, you know,


00:40:32.940 --> 00:40:34.140
whenever you talk about stuff,


00:40:34.140 --> 00:40:36.520
one of the things that's difficult is to understand


00:40:36.520 --> 00:40:39.620
what is the scale or how are these different?


00:40:39.620 --> 00:40:43.700
So, you know, one way, well, our functions components,


00:40:43.700 --> 00:40:46.420
our modules components, our packages components,


00:40:46.420 --> 00:40:50.620
like, you know, what are, how do I identify that


00:40:50.620 --> 00:40:54.500
since it's not, you know, a formal language runtime term?


00:40:54.500 --> 00:40:55.340
- Yeah.


00:40:55.340 --> 00:40:59.100
- Help me understand how you make these things in Python.


00:40:59.100 --> 00:41:00.060
Yeah.


00:41:00.060 --> 00:41:01.200
- Yeah.


00:41:01.200 --> 00:41:03.460
Yeah, that was really interesting because


00:41:03.460 --> 00:41:07.660
you can see a component,


00:41:07.660 --> 00:41:12.180
it's not a full blown feature,


00:41:12.180 --> 00:41:16.860
like maybe a library that you publish in on PyPi,


00:41:16.860 --> 00:41:17.980
PyPi would be.


00:41:17.980 --> 00:41:21.620
It's smaller than that.


00:41:21.620 --> 00:41:24.800
And I guess it could be a single function,


00:41:24.800 --> 00:41:27.800
but it's probably one or more functions


00:41:27.800 --> 00:41:29.560
that kind of relates to it.


00:41:29.560 --> 00:41:30.600
Let's say that you,


00:41:30.600 --> 00:41:35.480
what should I have prepared with an example,


00:41:35.480 --> 00:41:40.480
but let's say that you want to parse a CSV file


00:41:40.480 --> 00:41:43.680
or something.


00:41:43.680 --> 00:41:48.520
Then you would probably separate the different things


00:41:48.520 --> 00:41:53.520
you want to do with that cfc file into functions already.


00:41:53.520 --> 00:41:57.680
And the component is where you kind of group the functions


00:41:57.680 --> 00:41:59.680
that kind of relate to each other


00:41:59.680 --> 00:42:04.680
or that makes sense to have in a Python package.


00:42:04.680 --> 00:42:09.720
And then I mean, a namespace with a dunder in it.


00:42:09.720 --> 00:42:12.360
So that could be a component.


00:42:12.360 --> 00:42:13.600
Yeah.


00:42:13.600 --> 00:42:17.120
- Yeah, because although it could be modeled


00:42:17.120 --> 00:42:21.560
one of these sub packages, it's those sub packages often have multiple jobs and


00:42:21.560 --> 00:42:25.520
roles and you're like, let's, let's stay really focused on, on the one thing that


00:42:25.520 --> 00:42:25.960
it does.


00:42:25.960 --> 00:42:26.280
Right.


00:42:26.280 --> 00:42:27.320
Yeah.


00:42:27.320 --> 00:42:27.760
Yeah.


00:42:27.760 --> 00:42:29.480
Okay.


00:42:29.480 --> 00:42:34.640
yeah, so, and all of this, this lives in a, in a, what Pololith calls a


00:42:34.640 --> 00:42:42.920
workspace and that is basically a repository, with a, with a, with


00:42:42.920 --> 00:42:47.920
that top configuration about how your repository looks like.


00:42:47.920 --> 00:42:56.400
So you have your components in namespace packages,


00:42:56.400 --> 00:42:59.280
basically, and you have your basis,


00:42:59.280 --> 00:43:02.560
the entry points of your apps.


00:43:02.560 --> 00:43:07.020
Then you have something called projects or a project,


00:43:07.020 --> 00:43:11.280
and that is the artifacts that you want to build.


00:43:11.280 --> 00:43:14.240
So you can have only one project


00:43:14.240 --> 00:43:17.000
if you're going to build one thing,


00:43:17.000 --> 00:43:20.540
maybe a FastAPI service.


00:43:20.540 --> 00:43:24.380
But the benefit comes when you are


00:43:24.380 --> 00:43:26.200
about to build something new,


00:43:26.200 --> 00:43:28.900
then you have your project infrastructure,


00:43:28.900 --> 00:43:33.900
like the project configuration and what it is


00:43:33.900 --> 00:43:38.480
defined in a folder called projects.


00:43:38.480 --> 00:43:42.040
And then, but the code you use,


00:43:42.040 --> 00:43:44.820
you pick the code from the components and basis folder.


00:43:44.820 --> 00:43:48.520
So you will reuse the same source code


00:43:48.520 --> 00:43:52.200
and then you package it into different artifacts.


00:43:52.200 --> 00:43:53.040
- I see.


00:43:53.040 --> 00:43:54.400
So it sounds a little bit,


00:43:54.400 --> 00:43:56.840
yeah, sorry.


00:43:56.840 --> 00:43:59.840
So it sounds a little bit like we've got this monorepo


00:43:59.840 --> 00:44:03.240
with all of this stuff and the polylith,


00:44:03.240 --> 00:44:05.080
its job is to say, well,


00:44:05.080 --> 00:44:09.440
we're gonna look into these little parts of this monolith,


00:44:09.440 --> 00:44:11.440
and I need this part and this part and this part.


00:44:11.440 --> 00:44:14.520
And it's some tooling and some concepts


00:44:14.520 --> 00:44:19.520
to help you manage some artifact.


00:44:19.520 --> 00:44:22.520
We don't usually have exact build artifacts.


00:44:22.520 --> 00:44:24.600
Often if you're not doing,


00:44:24.600 --> 00:44:26.360
shipping out separate packages,


00:44:26.360 --> 00:44:28.560
but maybe these three pieces here


00:44:28.560 --> 00:44:31.000
make up the FastAPI service


00:44:31.000 --> 00:44:32.000
that we're gonna host over there.


00:44:32.000 --> 00:44:33.700
And maybe these two services


00:44:33.700 --> 00:44:35.780
make up the data science tools


00:44:35.780 --> 00:44:38.780
or when I give to the data scientists for their notebooks.


00:44:38.780 --> 00:44:41.660
And there could be some overlap in those, right?


00:44:41.660 --> 00:44:43.500
- Yeah, exactly, yeah.


00:44:43.500 --> 00:44:44.340
- Okay.


00:44:44.340 --> 00:44:47.580
- And another good thing is with the workspace


00:44:47.580 --> 00:44:52.300
is that you don't really do much work


00:44:52.300 --> 00:44:55.580
in the project folder or something like that


00:44:55.580 --> 00:44:58.300
because the main idea is that you have


00:44:58.300 --> 00:45:02.260
a developer development environment


00:45:02.260 --> 00:45:06.180
that includes all your bases, all your components.


00:45:06.180 --> 00:45:10.580
So the good thing with that is that you can experiment


00:45:10.580 --> 00:45:14.220
and try out code without worrying about


00:45:14.220 --> 00:45:16.100
if you have imported the correct stuff.


00:45:16.100 --> 00:45:19.380
You just, you have a top project folder


00:45:19.380 --> 00:45:23.460
containing all of your dependencies and packages,


00:45:23.460 --> 00:45:26.160
and then you can take it from there.


00:45:26.160 --> 00:45:29.500
And once you're ready to build a project,


00:45:29.500 --> 00:45:33.020
build something out of it, an app or whatever it is,


00:45:33.020 --> 00:45:34.660
then you can start constructing


00:45:34.660 --> 00:45:38.020
that project specific configurations.


00:45:38.020 --> 00:45:39.760
You can choose where you want to start,


00:45:39.760 --> 00:45:43.660
but I usually start from the development workspace.


00:45:43.660 --> 00:45:46.220
And I really like a way of working


00:45:46.220 --> 00:45:48.260
called the Ripple driven development,


00:45:48.260 --> 00:45:49.740
but I also learned from Clojure,


00:45:49.740 --> 00:45:52.840
which is they try out things in a Ripple basically.


00:45:52.840 --> 00:45:53.780
(laughs)


00:45:53.780 --> 00:45:55.140
- Yeah.


00:45:55.140 --> 00:45:58.700
- So that's a really nice developer experience


00:45:58.700 --> 00:46:01.740
that you get from having the entire source code,


00:46:01.740 --> 00:46:04.460
you can try out things, combine components


00:46:04.460 --> 00:46:06.340
and develop new features.


00:46:06.340 --> 00:46:09.560
- So doing more and more of that as well,


00:46:09.560 --> 00:46:11.240
this ripple driven development,


00:46:11.240 --> 00:46:16.240
or I'd say not necessarily development, but exploration.


00:46:16.240 --> 00:46:18.180
I got to kind of understand,


00:46:18.180 --> 00:46:20.800
I'm not really sure is this gonna click together right?


00:46:20.800 --> 00:46:24.860
Or is this rather than putting a lot of structure in place,


00:46:24.860 --> 00:46:27.100
'cause I'm not even sure I really wanna stick with it,


00:46:27.100 --> 00:46:29.100
fire up a REPL.


00:46:29.100 --> 00:46:31.100
For those of you who don't know, if you just type Python,


00:46:31.100 --> 00:46:33.100
what you get is a redevelopment loop.


00:46:33.100 --> 00:46:35.100
That's the REPL.


00:46:35.100 --> 00:46:37.100
I do it in PyCharm these days


00:46:37.100 --> 00:46:39.100
because PyCharm has a


00:46:39.100 --> 00:46:41.100
Python console, but it gives you auto-complete


00:46:41.100 --> 00:46:43.100
and tab completion


00:46:43.100 --> 00:46:45.100
of the things that are in your project


00:46:45.100 --> 00:46:47.100
when you're playing in the REPL,


00:46:47.100 --> 00:46:49.100
but still, same idea.


00:46:49.100 --> 00:46:51.100
- That's really great.


00:46:51.100 --> 00:46:53.100
- Yeah, absolutely.


00:46:53.100 --> 00:46:55.100
Are you guys


00:46:55.100 --> 00:46:57.960
- Are you guys using this on your projects right now?


00:46:57.960 --> 00:47:01.920
Or what's the (indistinct)


00:47:01.920 --> 00:47:04.460
- Yeah, I'm fairly new to the team that I joined.


00:47:04.460 --> 00:47:09.460
So I've introduced them to the ideas,


00:47:09.460 --> 00:47:12.140
but they have like already code and stuff in place.


00:47:12.140 --> 00:47:14.980
So my hopes are that we will give it


00:47:14.980 --> 00:47:16.940
once we have something new to develop


00:47:16.940 --> 00:47:20.980
or include an existing microservice,


00:47:20.980 --> 00:47:25.400
maybe we could give this idea a try.


00:47:25.400 --> 00:47:27.740
So that's basically--


00:47:27.740 --> 00:47:29.560
- That's always the problem.


00:47:29.560 --> 00:47:31.360
Yeah, that's always the problem is,


00:47:31.360 --> 00:47:33.320
even if you yourself are not new,


00:47:33.320 --> 00:47:34.940
the ideas may be new to you


00:47:34.940 --> 00:47:36.360
and you've done a bunch of previous work.


00:47:36.360 --> 00:47:39.000
Like for me, I was showing you that repo before,


00:47:39.000 --> 00:47:40.800
I'm just, I'm thinking, there's a lot of cool stuff


00:47:40.800 --> 00:47:43.420
I could do about how I restructure this and reuse it


00:47:43.420 --> 00:47:46.240
and make it avail, you know, sort of bring more


00:47:46.240 --> 00:47:49.480
of the monorepo stuff to some of the things I'm doing.


00:47:49.480 --> 00:47:53.520
but then I got to update the continuous deployment changes


00:47:53.520 --> 00:47:56.000
and I've got to update where the web server,


00:47:56.000 --> 00:47:56.880
you know, it's just like,


00:47:56.880 --> 00:47:59.960
there's all this stuff that's there and it's,


00:47:59.960 --> 00:48:02.760
you know, do you kind of pause what you're doing


00:48:02.760 --> 00:48:06.680
to try some new big organization of code here?


00:48:06.680 --> 00:48:09.160
That's how it goes, right?


00:48:09.160 --> 00:48:11.560
- At least I learned Apollo,


00:48:11.560 --> 00:48:13.840
that's where we actually used it in production.


00:48:13.840 --> 00:48:17.120
We had several kinds of different services and apps


00:48:17.120 --> 00:48:20.880
So where we have had everything in a polarly monorepo,


00:48:20.880 --> 00:48:21.920
but that was closure.


00:48:21.920 --> 00:48:24.320
- Yeah, yeah.


00:48:24.320 --> 00:48:28.260
Enclosure is a compiled language like C++ or C#.


00:48:28.260 --> 00:48:29.100
Is that right?


00:48:29.100 --> 00:48:31.160
- Yeah, it's on top of the JVM.


00:48:31.160 --> 00:48:36.160
So that is compiled, yeah, to through that.


00:48:36.160 --> 00:48:39.280
- Yeah, I do feel like things are just a little,


00:48:39.280 --> 00:48:44.280
the deliverable artifacts are slightly more obvious


00:48:45.920 --> 00:48:49.720
and easy to distinguish when you're talking


00:48:49.720 --> 00:48:50.960
about something that compiles.


00:48:50.960 --> 00:48:54.320
And like, here's the library that drops into the bin folder


00:48:54.320 --> 00:48:56.700
and here's the executable binary that drops,


00:48:56.700 --> 00:48:59.280
you know, there's an output folder


00:48:59.280 --> 00:49:01.360
that has all the pieces that were selected.


00:49:01.360 --> 00:49:04.500
Whereas Python, you gotta be a little more,


00:49:04.500 --> 00:49:07.440
a little more careful how you put that together.


00:49:07.440 --> 00:49:08.280
- Yeah. - Yeah.


00:49:08.280 --> 00:49:13.120
- So what I came up to was,


00:49:14.320 --> 00:49:18.360
how can this idea be used in Python?


00:49:18.360 --> 00:49:23.360
And then that was actually what led me to Poetry,


00:49:23.360 --> 00:49:25.500
which I think is a really nice tool.


00:49:25.500 --> 00:49:32.580
And because Poetry, I think has a lot of nice ways


00:49:32.580 --> 00:49:36.920
of handling projects and dependencies and structure


00:49:36.920 --> 00:49:38.480
and stuff like that.


00:49:38.480 --> 00:49:40.580
But there were a couple of things missing


00:49:40.580 --> 00:49:42.380
to make this idea work,


00:49:42.380 --> 00:49:47.100
because since you are,


00:49:47.100 --> 00:49:50.860
when you have a project configuration,


00:49:50.860 --> 00:49:55.860
you actually include components in from a relative path.


00:49:55.860 --> 00:49:59.580
So you navigate up and navigate down


00:49:59.580 --> 00:50:01.360
to the actual component.


00:50:01.360 --> 00:50:04.460
And if it would just build a wheel


00:50:04.460 --> 00:50:06.380
or a source distribution from that,


00:50:06.380 --> 00:50:09.740
that wouldn't be a valid package


00:50:09.740 --> 00:50:12.460
because then you would need to ship


00:50:12.460 --> 00:50:14.620
the entire monorepo structure


00:50:14.620 --> 00:50:16.620
and you don't want to do that.


00:50:16.620 --> 00:50:22.580
So what I did was I developed a plugin to Poetry


00:50:22.580 --> 00:50:26.260
that actually allows for having relative includes


00:50:26.260 --> 00:50:29.260
and that will build the code.


00:50:29.260 --> 00:50:33.660
It will build a wheel and a source distribution


00:50:33.660 --> 00:50:36.940
with the kind of correct path.


00:50:36.940 --> 00:50:41.060
So it takes all the package dependencies


00:50:41.060 --> 00:50:46.740
and puts them in the same folder basically


00:50:46.740 --> 00:50:48.060
before it does the wheel.


00:50:48.060 --> 00:50:51.700
And then you have a valid distribution that you can use.


00:50:51.700 --> 00:50:56.340
So it does a little bit of copying and stuff like that.


00:50:56.340 --> 00:51:01.220
- All right, so the actual output here,


00:51:01.220 --> 00:51:04.540
it's a couple of wheels that we could say,


00:51:04.540 --> 00:51:07.260
pip install into a virtual environment


00:51:07.260 --> 00:51:09.700
and they work together, is that right?


00:51:09.700 --> 00:51:10.540
- Yeah. - Okay.


00:51:10.540 --> 00:51:16.380
- So, and I tried this idea with like services,


00:51:16.380 --> 00:51:21.060
like FastAPI services, instead of including


00:51:21.060 --> 00:51:27.540
the source code, like as a tree,


00:51:27.540 --> 00:51:32.540
I'm installing it with pip from a wheel


00:51:32.640 --> 00:51:36.200
or a source distribution from preferably from a wheel


00:51:36.200 --> 00:51:40.560
if you don't have any like operating system specific stuff.


00:51:40.560 --> 00:51:43.120
So, and I think that works really well.


00:51:43.120 --> 00:51:46.400
And it's like the end result,


00:51:46.400 --> 00:51:48.840
if you do it in a Docker container,


00:51:48.840 --> 00:51:52.200
you can like have the full control of what's in there.


00:51:52.200 --> 00:51:55.960
So the output from any kind of...


00:51:55.960 --> 00:51:58.160
Yeah, sorry.


00:51:58.160 --> 00:51:59.000
- Yes, yeah.


00:51:59.000 --> 00:52:02.840
in your Docker file that builds the Docker image,


00:52:02.840 --> 00:52:05.760
you can just say, copy these three wheels over,


00:52:05.760 --> 00:52:09.240
pip install them into my Python environment


00:52:09.240 --> 00:52:10.080
I have over there.


00:52:10.080 --> 00:52:13.120
And it's just taken the, what do you call them?


00:52:13.120 --> 00:52:16.200
Workspaces that they need over there.


00:52:16.200 --> 00:52:19.880
What is the terminology that you call the artifacts here?


00:52:19.880 --> 00:52:21.600
I mean, I know they're wheels and packages,


00:52:21.600 --> 00:52:24.680
but is there a poly term that matches?


00:52:24.680 --> 00:52:27.040
- Oh, I don't think so.


00:52:27.040 --> 00:52:31.200
maybe it's like a built artifact perhaps.


00:52:31.200 --> 00:52:36.320
And it's probably the most simplistic scenario


00:52:36.320 --> 00:52:41.320
is that you have like an app, like a API endpoint


00:52:41.320 --> 00:52:46.880
or maybe a CLI app or even a library.


00:52:46.880 --> 00:52:50.640
And you probably want to install them in different places,


00:52:50.640 --> 00:52:53.240
maybe you, or even on AWS Lambda.


00:52:53.240 --> 00:52:58.240
So you can have the control over the deployment in your CI


00:52:58.240 --> 00:53:02.380
saying that I want to deploy this Lambda here


00:53:02.380 --> 00:53:04.980
and I want to deploy this FastAPI over there.


00:53:04.980 --> 00:53:09.700
So, and with Polariff you can build these wheels differently.


00:53:09.700 --> 00:53:10.780
- Nice, yeah.


00:53:10.780 --> 00:53:14.580
I feel like the, if you think of microservices


00:53:14.580 --> 00:53:19.580
and monolith, the AWS Lambda or any serverless function,


00:53:19.580 --> 00:53:22.500
functions as a service story is like the most extreme


00:53:22.500 --> 00:53:24.500
version of this.


00:53:24.500 --> 00:53:26.500
Here's a single function that gets deployed.


00:53:26.500 --> 00:53:28.500
Here's a single function that gets deployed.


00:53:28.500 --> 00:53:30.500
One after another.


00:53:30.500 --> 00:53:32.500
It's kind of out of control.


00:53:32.500 --> 00:53:34.500
- And you have all of them


00:53:34.500 --> 00:53:36.500
separate repositories.


00:53:36.500 --> 00:53:38.500
- Oh, please no.


00:53:38.500 --> 00:53:40.500
That would be definitely tricky.


00:53:40.500 --> 00:53:42.500
I want to come back and talk more about


00:53:42.500 --> 00:53:44.500
this Poetry plugin because it's really cool.


00:53:44.500 --> 00:53:46.500
Let's address


00:53:46.500 --> 00:53:48.500
this question from Lucas here.


00:53:48.500 --> 00:53:50.500
How would you approach


00:53:50.500 --> 00:53:55.500
versioning in a mono repo, like of these different services


00:53:55.500 --> 00:53:57.500
and of the different pieces.


00:53:57.500 --> 00:54:01.500
So if I'm going to have that FastAPI thing that builds over there,


00:54:01.500 --> 00:54:04.500
I'm going to have some other projects that are built


00:54:04.500 --> 00:54:08.500
with some overlap that are shared over to, say, my data science team.


00:54:08.500 --> 00:54:11.500
They're going to analyze data in some other way


00:54:11.500 --> 00:54:13.500
but reuse some of the code.


00:54:13.500 --> 00:54:17.500
I've got some thoughts, but what are your thoughts on versioning,


00:54:17.500 --> 00:54:21.600
say, in the repository or how you deploy them?


00:54:21.600 --> 00:54:23.500
- Yeah, that's a really good question.


00:54:23.500 --> 00:54:30.320
If I'm looking at it from a Polylith perspective,


00:54:30.320 --> 00:54:36.720
then I think I would suggest a very simplistic solution.


00:54:36.720 --> 00:54:41.000
So let's say that you have your,


00:54:41.000 --> 00:54:44.280
this project depends on something with this version


00:54:44.280 --> 00:54:48.640
and the other project is still on an earlier version.


00:54:48.640 --> 00:54:51.720
So, and I think that can be solved


00:54:51.720 --> 00:54:54.900
with the components itself


00:54:54.900 --> 00:54:59.900
because all source code is made up of all these components.


00:54:59.900 --> 00:55:04.200
So if you're going to build a new version of something,


00:55:04.200 --> 00:55:09.520
and if that version uses a new third-party dependency


00:55:09.520 --> 00:55:12.080
or that is incompatible,


00:55:12.080 --> 00:55:16.920
I would suggest you to add it as a new separate component.


00:55:16.920 --> 00:55:20.320
So your new projects that will use that one


00:55:20.320 --> 00:55:24.480
will pick that component instead of the old.


00:55:24.480 --> 00:55:27.880
And I think it's a good practice if these components


00:55:27.880 --> 00:55:32.880
have the same or as long as it's possible, the same API.


00:55:32.880 --> 00:55:38.820
So it should be easy to switch from the old to the new one.


00:55:38.900 --> 00:55:42.820
So that would be my solution to versioning,


00:55:42.820 --> 00:55:45.140
at least when using PolyLive.


00:55:45.140 --> 00:55:46.980
- Yeah, okay.


00:55:46.980 --> 00:55:51.440
If we look at not the mono repo style,


00:55:51.440 --> 00:55:54.740
but you build an artifact, like a wheel from one repo,


00:55:54.740 --> 00:55:56.860
and you put it up there and someone else


00:55:56.860 --> 00:56:00.100
depends upon that, maybe through an internal


00:56:00.100 --> 00:56:02.760
artifact management private PyPI,


00:56:02.760 --> 00:56:06.720
you would pin your version in the requirements file


00:56:06.720 --> 00:56:07.860
for that other one, right?


00:56:07.860 --> 00:56:10.920
because that repo is changing at a different rate


00:56:10.920 --> 00:56:13.840
and a different cadence than maybe the library


00:56:13.840 --> 00:56:14.800
that it depends upon.


00:56:14.800 --> 00:56:17.800
And that's really natural for us as Python people


00:56:17.800 --> 00:56:21.280
because we already have a great long list of things


00:56:21.280 --> 00:56:23.580
that are open source that we don't build,


00:56:23.580 --> 00:56:25.380
that we depend on, right?


00:56:25.380 --> 00:56:28.460
FastAPI, Pydantic, and Starlette would be an example


00:56:28.460 --> 00:56:29.640
from what we've been talking, right?


00:56:29.640 --> 00:56:32.720
Those things you don't control and you depend on them.


00:56:32.720 --> 00:56:35.580
So you pin the versions and upgrade them as you see fit.


00:56:35.580 --> 00:56:38.360
But one of the advantages of the monorepo,


00:56:38.360 --> 00:56:40.120
to me, as far as I see it at least,


00:56:40.120 --> 00:56:45.120
is the whole system, not just your part of the system,


00:56:45.120 --> 00:56:50.560
but the whole system is consistent all the time


00:56:50.560 --> 00:56:52.860
on the main branch or the production branch


00:56:52.860 --> 00:56:55.760
or whatever the shipping branch is.


00:56:55.760 --> 00:56:58.380
So I think you would maybe branch,


00:56:58.380 --> 00:57:00.500
do some of your work, merge that back in,


00:57:00.500 --> 00:57:03.540
and at that point, you could ship everything


00:57:03.540 --> 00:57:05.240
if you need to, right?


00:57:05.240 --> 00:57:10.160
It's because you're continuously keeping it together


00:57:10.160 --> 00:57:12.900
as a whole system, not like, well, that library built


00:57:12.900 --> 00:57:15.400
and that library built because they're separate repos,


00:57:15.400 --> 00:57:16.240
but you put them together


00:57:16.240 --> 00:57:17.580
and who knows what's gonna happen.


00:57:17.580 --> 00:57:20.480
I think this is an advantage of the monorepo in a sense.


00:57:20.480 --> 00:57:22.400
- Yeah, me too, definitely.


00:57:22.400 --> 00:57:29.200
I think it makes it easier to get noticed about using,


00:57:35.040 --> 00:57:40.040
if some parts of the code is using a certain version


00:57:40.040 --> 00:57:45.400
of a dependency, you will learn about it quite quickly


00:57:45.400 --> 00:57:48.560
because if you would install it and try to run the code.


00:57:48.560 --> 00:57:52.800
So it's easier to notify, and hopefully it's easier


00:57:52.800 --> 00:57:54.440
to also update that code.


00:57:54.440 --> 00:57:57.700
But if you are in a situation where there's so much code


00:57:57.700 --> 00:58:01.400
that you need to refactor, maybe there's a breaking change


00:58:01.400 --> 00:58:06.400
that kind of has rethought the entire idea of that app,


00:58:06.400 --> 00:58:09.640
maybe you need to do some sort of separation


00:58:09.640 --> 00:58:14.640
and keep it all until you have the time to refactor that.


00:58:14.640 --> 00:58:19.400
I guess in most cases, it's pretty straightforward


00:58:19.400 --> 00:58:22.800
to update just everything in the model repo.


00:58:22.800 --> 00:58:23.680
- Right, yeah, exactly.


00:58:23.680 --> 00:58:26.260
And if you've got some sort of continuous integration


00:58:26.260 --> 00:58:28.760
or some kind of automated check,


00:58:28.760 --> 00:58:30.720
you're gonna find out pretty quickly


00:58:30.720 --> 00:58:33.300
this change you made has a consequence over there.


00:58:33.300 --> 00:58:35.620
And I think that's why people are really,


00:58:35.620 --> 00:58:39.860
people who are psyched about monorepos are excited about it.


00:58:39.860 --> 00:58:42.260
It also feels to me like


00:58:42.260 --> 00:58:44.560
if there was gonna be a breaking change,


00:58:44.560 --> 00:58:46.540
it's gonna happen either way.


00:58:46.540 --> 00:58:48.780
It's just, is it gonna happen in small little pieces


00:58:48.780 --> 00:58:51.740
or is it gonna happen in one terrible, huge,


00:58:51.740 --> 00:58:52.700
oh, you got the new one?


00:58:52.700 --> 00:58:54.740
Well, let me tell you, the new one's really different.


00:58:54.740 --> 00:58:55.740
It doesn't work anymore.


00:58:55.740 --> 00:58:56.820
Like, oh no.


00:58:56.820 --> 00:59:03.780
just like you want to merge more often, or you want to try to integrate things more often,


00:59:03.780 --> 00:59:07.380
and not just wait some long period of time and go, "Now do they go together?"


00:59:07.380 --> 00:59:13.620
Why are there a hundred or a thousand merge conflicts? I don't know, right? The more you


00:59:13.620 --> 00:59:20.100
do these little continuous checkbacks and integrations, it's just going to be so much


00:59:20.100 --> 00:59:22.100
- Oh, yeah. Totally agree. - Yeah.


00:59:22.100 --> 00:59:26.100
Yeah. I mean, the only scenario where you don't have to go back


00:59:26.100 --> 00:59:32.100
and pay that penalty is where the other service


00:59:32.100 --> 00:59:34.100
that you're versioning against says,


00:59:34.100 --> 00:59:36.100
"We're never going to go to the new version."


00:59:36.100 --> 00:59:40.100
And if this is internal code, it's unlikely that it's never going to go


00:59:40.100 --> 00:59:42.100
to the new version unless it becomes just dead,


00:59:42.100 --> 00:59:44.100
and then who cares?


00:59:44.100 --> 00:59:47.100
You know, right? So you're going to need to integrate them eventually.


00:59:47.100 --> 00:59:48.820
need to integrate them eventually,


00:59:48.820 --> 00:59:50.660
just keep doing it continuously.


00:59:50.660 --> 00:59:52.300
So yeah, I'm starting to really come around


00:59:52.300 --> 00:59:54.100
to the idea of these things, yeah.


00:59:54.100 --> 00:59:55.340
- Yeah, good.


00:59:55.340 --> 01:00:01.160
- So this PolyLith plugin for Poetry,


01:00:01.160 --> 01:00:03.180
it's super cool. - Yeah.


01:00:03.180 --> 01:00:06.300
- So for example, here on your example,


01:00:06.300 --> 01:00:10.320
you say Poetry, space poly, space info on the terminal,


01:00:10.320 --> 01:00:12.440
on the command prompt. - Yeah.


01:00:12.440 --> 01:00:15.660
- And it'll say, hey, look, in here we have two projects


01:00:15.660 --> 01:00:17.780
made of two components and two bases,


01:00:17.780 --> 01:00:20.220
the Lambda project and the FastAPI project.


01:00:20.220 --> 01:00:24.500
And they're made up of these different elements.


01:00:24.500 --> 01:00:26.020
And it really shows, you know,


01:00:26.020 --> 01:00:29.740
what part of your code is depending on the other ones.


01:00:29.740 --> 01:00:31.860
It even gives you a pretty table.


01:00:31.860 --> 01:00:33.000
This made with rich.


01:00:33.000 --> 01:00:34.940
- Yeah, it's rich.


01:00:34.940 --> 01:00:35.780
I love that.


01:00:35.780 --> 01:00:36.600
- It looks great.


01:00:36.600 --> 01:00:37.860
- Oh, great, yeah.


01:00:37.860 --> 01:00:39.380
This is my new favorite.


01:00:39.380 --> 01:00:41.380
It's favorite too.


01:00:41.380 --> 01:00:42.860
It's so good.


01:00:42.860 --> 01:00:44.980
- Yeah, so it's a really nice looking UI


01:00:44.980 --> 01:00:46.740
that you put together here as well.


01:00:46.740 --> 01:00:48.140
- Yeah, thanks.


01:00:48.140 --> 01:00:49.660
I'm really happy to hear that.


01:00:49.660 --> 01:00:51.540
Yeah, that's--


01:00:51.540 --> 01:00:53.140
- Yeah, so how easy are people to--


01:00:53.140 --> 01:00:53.980
Yeah, go ahead, sorry.


01:00:53.980 --> 01:00:55.660
Don't mean to just talk over you.


01:00:55.660 --> 01:00:57.460
- Yeah, I just wanted to mention that what we see here


01:00:57.460 --> 01:01:02.460
is the tooling support for the polylith thing in Python.


01:01:02.460 --> 01:01:08.260
And I decided to make it as a poetry plugin.


01:01:08.260 --> 01:01:11.020
I have some plans to like break it out of poetry


01:01:11.020 --> 01:01:15.340
to make it a separate CLI too.


01:01:15.340 --> 01:01:17.020
Maybe I'll do that in the future,


01:01:17.020 --> 01:01:19.440
but I thought it was a good fit for poetry


01:01:19.440 --> 01:01:22.900
since I'm relying on a lot of poetry features.


01:01:22.900 --> 01:01:27.020
And the command there, polyinfo,


01:01:27.020 --> 01:01:31.700
is showing you an overview of your monorepo.


01:01:31.700 --> 01:01:34.460
And this is my example project with,


01:01:34.460 --> 01:01:37.300
so it's not a lot of code,


01:01:37.300 --> 01:01:39.900
but the idea is that you can,


01:01:39.900 --> 01:01:44.020
you will list all your components and basis.


01:01:44.020 --> 01:01:46.240
The common information, these are bricks.


01:01:46.240 --> 01:01:49.140
And then you get a sort of a overview


01:01:49.140 --> 01:01:50.860
of what's in that monorep.


01:01:50.860 --> 01:01:55.860
You can sort of get a idea of what's in there.


01:01:55.860 --> 01:01:58.940
What does this thing do?


01:01:58.940 --> 01:02:00.780
And then it's listed per project.


01:02:00.780 --> 01:02:05.780
So you can see which project is actually using which brick.


01:02:05.780 --> 01:02:09.460
And you can use that information later.


01:02:09.460 --> 01:02:10.780
- Yeah.


01:02:10.780 --> 01:02:14.060
- Yeah, let me just give a little bit of visual information


01:02:14.060 --> 01:02:14.900
for people listening.


01:02:14.900 --> 01:02:18.240
So under the brick column, it says we have the logging,


01:02:18.240 --> 01:02:20.780
we have the messaging, we have the greet API,


01:02:20.780 --> 01:02:22.900
and we have the messages for Lambda.


01:02:22.900 --> 01:02:25.000
And then you've got in different columns,


01:02:25.000 --> 01:02:27.000
the different projects that might be consuming them


01:02:27.000 --> 01:02:30.420
in little check marks or dashes to say using or not using it.


01:02:30.420 --> 01:02:33.140
It makes it really visually clear


01:02:33.140 --> 01:02:35.660
how your elements fit together, right?


01:02:35.660 --> 01:02:36.760
- Yeah, yeah.


01:02:39.060 --> 01:02:42.580
I was just going to say that there's a,


01:02:42.580 --> 01:02:46.660
I'm continuously adding commands to this tooling.


01:02:46.660 --> 01:02:51.660
And there's also, you can use this information,


01:02:51.660 --> 01:02:53.560
the information about the workspace


01:02:53.560 --> 01:02:58.560
and the individual project to, in your CI to determine,


01:02:58.560 --> 01:03:03.600
let's say that you change the message component,


01:03:03.600 --> 01:03:06.260
you do something in it,


01:03:06.260 --> 01:03:11.260
And then you would want to have the projects


01:03:11.260 --> 01:03:14.280
that are affected built for that.


01:03:14.280 --> 01:03:19.280
So the tooling will help your CI to make decisions


01:03:19.280 --> 01:03:23.440
if it should build this project


01:03:23.440 --> 01:03:27.280
or if it should skip building because nothing has changed.


01:03:27.280 --> 01:03:30.320
So that's part of the tooling support.


01:03:30.320 --> 01:03:34.520
- That's pretty interesting because we've had attempts


01:03:34.520 --> 01:03:37.700
And they've always been like an awesome 80% solution


01:03:37.700 --> 01:03:39.260
that never quite works.


01:03:39.260 --> 01:03:44.760
But really good tool ideas, I guess, to say,


01:03:44.760 --> 01:03:46.800
if you change this code,


01:03:46.800 --> 01:03:49.340
what actually needs to be tested again?


01:03:49.340 --> 01:03:51.440
Or what needs to be analyzed again?


01:03:51.440 --> 01:03:54.640
If this other part of your system doesn't depend on it,


01:03:54.640 --> 01:03:56.920
you don't need to run those tests, right?


01:03:56.920 --> 01:03:59.360
And if just the file changes,


01:03:59.360 --> 01:04:00.600
that doesn't tell you anything.


01:04:00.600 --> 01:04:03.340
You need to look at things like code coverage.


01:04:03.340 --> 01:04:11.660
what part of the system was touched by this at all?


01:04:11.660 --> 01:04:14.060
Those are always really tricky,


01:04:14.060 --> 01:04:17.580
and how do you keep a history of code coverage to know what to do?


01:04:17.580 --> 01:04:20.460
And all those attempts I've seen, just like,


01:04:20.460 --> 01:04:22.460
"We tried, but we don't really do that.


01:04:22.460 --> 01:04:25.100
We'll just run the files I've changed," which is never enough.


01:04:25.100 --> 01:04:31.180
But this is a natural way to express dependencies in that tree,


01:04:31.180 --> 01:04:35.680
to say, okay, if we change the greet API,


01:04:35.680 --> 01:04:38.520
we see that the Lambda thing doesn't work with it.


01:04:38.520 --> 01:04:41.720
So we don't need to test anything to do with the Lambda stuff.


01:04:41.720 --> 01:04:44.820
We only need to test the FastAPI aspect, right?


01:04:44.820 --> 01:04:48.720
- Yeah, yeah, exactly. - Is that tooling in place now?


01:04:48.720 --> 01:04:51.820
- Yeah, that's in place now. - Okay.


01:04:51.820 --> 01:04:55.820
So the poly info command,


01:04:55.820 --> 01:04:59.080
I think it was the first command that I actually added.


01:04:59.080 --> 01:05:03.400
Then there's a diff command.


01:05:03.400 --> 01:05:06.900
And what did I added?


01:05:06.900 --> 01:05:12.360
Yeah, the latest addition to commands is a check command


01:05:12.360 --> 01:05:17.360
because you might, since you are,


01:05:17.360 --> 01:05:21.120
I was talking about that development experience


01:05:21.120 --> 01:05:23.320
that you're working on in a development project


01:05:23.320 --> 01:05:24.720
where you have everything,


01:05:24.720 --> 01:05:28.160
and then you might not touch the project that much.


01:05:28.160 --> 01:05:32.000
And that means that you could potentially forget


01:05:32.000 --> 01:05:34.680
to include dependencies because as of today,


01:05:34.680 --> 01:05:37.240
there's no automatic thing yet.


01:05:37.240 --> 01:05:39.360
I'm planning to add that later,


01:05:39.360 --> 01:05:43.200
but so far you need to keep track of your dependencies


01:05:43.200 --> 01:05:44.580
and stuff like that.


01:05:44.580 --> 01:05:48.680
So I added a check command that actually does,


01:05:48.680 --> 01:05:52.920
performs analysis on the source code.


01:05:52.920 --> 01:05:56.000
So if you, let's say that one of the components uses


01:05:56.000 --> 01:05:59.120
the requests library or something like that,


01:05:59.120 --> 01:06:01.360
and you don't have it in your dependencies,


01:06:01.360 --> 01:06:05.800
then you would be notified for that particular project.


01:06:05.800 --> 01:06:08.880
It's very likely that you would discover it anyway


01:06:08.880 --> 01:06:10.560
in your development environment,


01:06:10.560 --> 01:06:15.260
but this is an extra check to just make sure


01:06:15.260 --> 01:06:17.880
once you're about to build something,


01:06:17.880 --> 01:06:20.640
can I really build this specific project?


01:06:22.880 --> 01:06:26.400
So yeah, so it's a few commands,


01:06:26.400 --> 01:06:29.200
but it will be more commands


01:06:29.200 --> 01:06:31.520
that are more and more useful, I guess.


01:06:31.520 --> 01:06:32.400
So.


01:06:32.400 --> 01:06:33.320
- Yeah, it looks great.


01:06:33.320 --> 01:06:38.240
And you have some examples over in the Python PolyLith


01:06:38.240 --> 01:06:41.200
examples repository that people can check out.


01:06:41.200 --> 01:06:42.600
- Yeah, yeah.


01:06:42.600 --> 01:06:46.840
- Yeah, so is the Poetry plugin ready for people


01:06:46.840 --> 01:06:48.080
if they wanted to use it?


01:06:49.320 --> 01:06:53.380
- I think so, I know I haven't any stats yet,


01:06:53.380 --> 01:06:56.660
but I have a couple of users that have contacted me


01:06:56.660 --> 01:06:59.380
through the GitHub repo and social media


01:06:59.380 --> 01:07:04.380
that some of them have just experimented with it


01:07:04.380 --> 01:07:09.340
and others have, I think that actually are working with it


01:07:09.340 --> 01:07:11.220
in their like daily work.


01:07:11.220 --> 01:07:13.100
And I think it's useful.


01:07:13.100 --> 01:07:18.100
I have to remind myself to contact them


01:07:18.100 --> 01:07:22.260
and regular to just check up how it goes.


01:07:22.260 --> 01:07:25.900
And hopefully they will come to this repo


01:07:25.900 --> 01:07:30.140
and let me know if something doesn't work as intended.


01:07:30.140 --> 01:07:33.340
So, but it's a new tool


01:07:33.340 --> 01:07:38.340
and it probably needs some more work on it, of course.


01:07:38.340 --> 01:07:42.060
- Yeah.


01:07:42.060 --> 01:07:43.660
Well, a lot of people hear about it now,


01:07:43.660 --> 01:07:46.140
they can come check it out and play with it


01:07:46.140 --> 01:07:47.820
and see if it- - Oh, that would be great.


01:07:47.820 --> 01:07:51.940
- Yeah, and I'm sure you're taking contributions and PRs


01:07:51.940 --> 01:07:54.460
and you wouldn't mind if people had some additions.


01:07:54.460 --> 01:07:57.060
- Yeah, I would love to have that.


01:07:57.060 --> 01:08:02.220
So contributions are very welcome, yeah.


01:08:02.220 --> 01:08:05.220
- And you also have really nice examples here.


01:08:05.220 --> 01:08:09.700
Like you have two videos that show how it works,


01:08:09.700 --> 01:08:11.300
you know, 15 minute YouTube videos


01:08:11.300 --> 01:08:13.380
and you've got some pictures and, you know,


01:08:13.380 --> 01:08:14.220
well done on that.


01:08:14.220 --> 01:08:16.260
It makes it really easy for people to come and just see like,


01:08:16.260 --> 01:08:17.460
okay, is this interesting?


01:08:17.460 --> 01:08:19.460
as it applied to me.


01:08:19.460 --> 01:08:21.460
- Thanks. - Good work.


01:08:21.460 --> 01:08:24.880
I do want to make one really quick follow-up.


01:08:24.880 --> 01:08:28.340
Corky out there had mentioned that maybe shallow clones


01:08:28.340 --> 01:08:31.540
were a better, more predictable choice


01:08:31.540 --> 01:08:36.040
than the partial clones with the filter equals blob.


01:08:36.040 --> 01:08:40.080
In general, the people at GitHub are recommending


01:08:40.080 --> 01:08:42.120
not to use the shallow clones anymore,


01:08:42.120 --> 01:08:45.900
but to use instead these partial clones,


01:08:45.900 --> 01:08:48.200
because it keeps the history and it can incrementally go back


01:08:48.200 --> 01:08:50.400
and pull the stuff in as needed.


01:08:50.400 --> 01:08:54.640
However, there is one time where you may really want those shallow clones.


01:08:54.640 --> 01:08:58.200
And the reason I'm thinking of this is you talked about builds


01:08:58.200 --> 01:09:00.600
and using this to make builds run faster


01:09:00.600 --> 01:09:02.800
and only focusing on the parts that have changed.


01:09:02.800 --> 01:09:05.500
If you have a CI,


01:09:05.500 --> 01:09:08.740
the CI doesn't care about the history of your GitHub project.


01:09:08.740 --> 01:09:11.240
It just wants the working files, right?


01:09:11.240 --> 01:09:13.300
- Yeah. - So you can do a shallow clone


01:09:13.300 --> 01:09:15.300
I'm going to say, "Just give me only the files


01:09:15.300 --> 01:09:19.140
on the tip of this branch and then build it."


01:09:19.140 --> 01:09:21.740
And that could be dramatically faster than saying,


01:09:21.740 --> 01:09:25.220
"Give me all five years of history of every single file


01:09:25.220 --> 01:09:27.220
and reassociate that."


01:09:27.220 --> 01:09:30.100
If you're thinking about CI, this shallow clone idea


01:09:30.100 --> 01:09:32.820
that I was dismissing a little bit


01:09:32.820 --> 01:09:35.300
is exactly a good choice, I think,


01:09:35.300 --> 01:09:37.540
because you don't care about version history


01:09:37.540 --> 01:09:40.540
if you're trying to see if the current version builds or not.


01:09:40.540 --> 01:09:43.300
So anyway, just a quick follow up on that.


01:09:43.300 --> 01:09:49.540
All right, David, I think we're probably out of time.


01:09:49.540 --> 01:09:51.480
I definitely encourage people to go check out


01:09:51.480 --> 01:09:52.860
your poetry plugin.


01:09:52.860 --> 01:09:57.860
They can check out polylith at polylith.getbook.io.


01:09:57.860 --> 01:10:02.760
Of course, I'll link to it in the show notes.


01:10:02.760 --> 01:10:04.060
Now, before you get out of here,


01:10:04.060 --> 01:10:06.920
I've got the two final questions to ask you, of course.


01:10:06.920 --> 01:10:09.100
If you're gonna write some code,


01:10:09.100 --> 01:10:12.900
if you're gonna work on the Poetry, PolyLift plugin,


01:10:12.900 --> 01:10:15.820
whatever, what editor are you using these days?


01:10:15.820 --> 01:10:19.140
- Well, these days I use Emacs.


01:10:19.140 --> 01:10:20.900
I really like the tool.


01:10:20.900 --> 01:10:25.780
Before Emacs, I was really an IDE guy.


01:10:25.780 --> 01:10:27.980
I really liked PyCharm too,


01:10:27.980 --> 01:10:32.580
but then I decided to learn Emacs and I'm stuck.


01:10:32.580 --> 01:10:34.140
I don't want, I don't,


01:10:34.140 --> 01:10:35.500
every programming language,


01:10:35.500 --> 01:10:38.820
I'm going to code everything in Emacs.


01:10:38.820 --> 01:10:39.960
- Nice, yeah.


01:10:39.960 --> 01:10:42.800
Long, long ago, that was my very first editor


01:10:42.800 --> 01:10:43.640
for programming.


01:10:43.640 --> 01:10:44.840
- Oh, oh cool.


01:10:44.840 --> 01:10:47.560
- And then, yeah, brings me back to working


01:10:47.560 --> 01:10:49.240
on Silicon Graphics mainframes,


01:10:49.240 --> 01:10:50.760
computers doing C++.


01:10:50.760 --> 01:10:56.360
Notable PyPI package, something,


01:10:56.360 --> 01:10:57.320
could be something we talked about,


01:10:57.320 --> 01:10:58.840
something else that you wanted to tell people about


01:10:58.840 --> 01:11:01.440
that you thought was awesome, ran across recently.


01:11:01.440 --> 01:11:04.680
- Well, I have to say Rich,


01:11:04.680 --> 01:11:07.160
because it's such an awesome tool.


01:11:07.160 --> 01:11:10.160
when you're going to develop a CLI


01:11:10.160 --> 01:11:12.040
and want it to look nice.


01:11:12.040 --> 01:11:15.520
And yeah, I would,


01:11:15.520 --> 01:11:18.480
Rich is a really, really good tool.


01:11:18.480 --> 01:11:20.520
There were a lot of visualization features


01:11:20.520 --> 01:11:21.340
and stuff like that.


01:11:21.340 --> 01:11:24.040
So that's a fantastic tool.


01:11:24.040 --> 01:11:25.120
- Yeah, good recommendation.


01:11:25.120 --> 01:11:27.760
There's so much momentum behind Rich these days.


01:11:27.760 --> 01:11:32.760
And if you're making some CLI developer oriented tool,


01:11:32.760 --> 01:11:35.440
just give it a little color,


01:11:35.440 --> 01:11:36.960
give it a little structure


01:11:36.960 --> 01:11:41.100
and something like Rich, even just a little bit of color


01:11:41.100 --> 01:11:43.800
or a little bit of distinguishing,


01:11:43.800 --> 01:11:44.920
one line of text from another,


01:11:44.920 --> 01:11:46.040
it makes such a big difference


01:11:46.040 --> 01:11:48.160
in being able to use it really quickly and easily.


01:11:48.160 --> 01:11:51.480
And Rich is probably the best way to do that by far, right?


01:11:51.480 --> 01:11:52.760
- Yeah.


01:11:52.760 --> 01:11:55.840
You should check out my new latest command, Polycheck,


01:11:55.840 --> 01:11:59.140
because it uses a rich feature that I'm really happy about.


01:11:59.140 --> 01:12:00.560
It's silly, but I'm really happy.


01:12:00.560 --> 01:12:04.520
It uses an emoji while you're waiting.


01:12:04.520 --> 01:12:06.120
(laughs)


01:12:06.120 --> 01:12:08.400
- Fantastic, oh yeah, I love emojis.


01:12:08.400 --> 01:12:11.680
I love emojis in CLIs as well.


01:12:11.680 --> 01:12:14.840
All right, final call to action.


01:12:14.840 --> 01:12:18.800
People wanna get started with monorepos, with polylith,


01:12:18.800 --> 01:12:21.560
with some of these ideas we've talked about.


01:12:21.560 --> 01:12:22.660
What do you tell them?


01:12:22.660 --> 01:12:25.140
- I would say,


01:12:25.140 --> 01:12:31.200
head over to the polylith Git repo


01:12:31.200 --> 01:12:34.520
or the official polylith docs and read about it


01:12:34.520 --> 01:12:35.840
and see--


01:12:35.840 --> 01:12:39.720
also, if you're interested in monorepos in general,


01:12:39.720 --> 01:12:42.440
check out the other solutions that are out there,


01:12:42.440 --> 01:12:44.960
because there are a lot of different approaches


01:12:44.960 --> 01:12:47.040
with different kind of focuses that maybe


01:12:47.040 --> 01:12:50.840
fit your situation best.


01:12:50.840 --> 01:12:56.040
I'm, of course, pro-Polylith, because I develop a tool


01:12:56.040 --> 01:12:56.920
and really like that.


01:12:56.920 --> 01:13:00.000
But there's probably tools that are better


01:13:00.000 --> 01:13:03.680
for a different situation.


01:13:03.680 --> 01:13:07.520
So just explore, I would say.


01:13:07.520 --> 01:13:08.360
- Right, right.


01:13:08.360 --> 01:13:13.400
The tools that maybe Google chooses to manage its code base


01:13:13.400 --> 01:13:16.360
might be the wrong tools that you choose for yours


01:13:16.360 --> 01:13:19.120
because the scale is so different, right?


01:13:19.120 --> 01:13:21.920
You might have so much complexity that it's not relevant.


01:13:21.920 --> 01:13:22.960
You know, it makes it really hard,


01:13:22.960 --> 01:13:24.200
but you don't need that complexity


01:13:24.200 --> 01:13:25.600
'cause you've got five projects,


01:13:25.600 --> 01:13:27.400
not 5,000 projects, right?


01:13:27.400 --> 01:13:31.720
So yeah, absolutely, look around is good advice.


01:13:31.720 --> 01:13:33.360
Okay, David, thank you for being here.


01:13:33.360 --> 01:13:35.360
It's been a really fun chat. I learned a bunch.


01:13:35.360 --> 01:13:37.960
Yeah, thank you.


01:13:37.960 --> 01:13:39.960
It's been really fun to be on the channel.


01:13:39.960 --> 01:13:40.960
Thank you.


01:13:40.960 --> 01:13:42.960
Yeah, you bet. Bye-bye.

