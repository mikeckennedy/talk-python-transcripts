WEBVTT

00:00:00.001 --> 00:00:04.160
Russell, welcome to Talk Python to Me. Great to have you back.

00:00:04.160 --> 00:00:06.220
Hi. Thank you for having me again.

00:00:06.220 --> 00:00:08.240
Yeah, it's good to have you back.

00:00:08.240 --> 00:00:12.280
You've been diligently working away on Beware,

00:00:12.280 --> 00:00:17.020
and I am very excited to see what you all are up to these days

00:00:17.020 --> 00:00:19.220
because I have very high hopes for the project.

00:00:19.220 --> 00:00:20.760
Thank you.

00:00:20.760 --> 00:00:22.620
Multiple angles. I'm a fan.

00:00:22.620 --> 00:00:24.280
Thank you very much.

00:00:24.280 --> 00:00:28.360
Yeah, I have been very busy, particularly busy over the last couple of years,

00:00:28.360 --> 00:00:30.280
but, yeah, we've made some good progress,

00:00:30.280 --> 00:00:35.180
and, yeah, we started to see the fruits of what is now at this point

00:00:35.180 --> 00:00:37.320
almost a 10-year – well, it is over a 10-year project.

00:00:37.320 --> 00:00:40.360
Yeah, yeah. You've been at it for a long time,

00:00:40.360 --> 00:00:42.000
and it's been quite a while since I had you on the show,

00:00:42.000 --> 00:00:44.300
and Talk Python's been around for almost 10 years,

00:00:44.300 --> 00:00:47.160
and so I know you've been at it for quite a while.

00:00:47.160 --> 00:00:51.460
That's awesome, and it seems like you're starting to get some real traction,

00:00:51.460 --> 00:00:53.900
which it could come soon enough.

00:00:53.900 --> 00:01:00.900
Yes, and the reason why that has happened is basically about three years ago,

00:01:00.900 --> 00:01:04.500
I was hired by Anaconda to work on their open source team.

00:01:04.500 --> 00:01:10.520
So I am employed full-time just to work on Beware with another guy,

00:01:10.520 --> 00:01:13.040
Malcolm Smith, who works with Ease based in London.

00:01:13.040 --> 00:01:18.040
And, yeah, just the short version is it is amazing how much progress you can make

00:01:18.040 --> 00:01:20.560
when you have two people working full-time on an open source project.

00:01:21.020 --> 00:01:24.840
I've always thought that about things.

00:01:24.840 --> 00:01:30.220
It's like there's the main product or the main project or the main library,

00:01:30.220 --> 00:01:34.320
and then there's all these little not fun, annoying details

00:01:34.320 --> 00:01:35.840
that somebody just has to grind through.

00:01:35.840 --> 00:01:39.640
And when it's two hours on a weekend where you're excited about it,

00:01:39.640 --> 00:01:43.380
it's not the final push-over-the-finish-line grindy details

00:01:43.380 --> 00:01:44.600
that people want to do.

00:01:44.600 --> 00:01:49.320
And so when it's – I wake up today and we're pushing it forward every day,

00:01:49.320 --> 00:01:51.540
it's awesome.

00:01:51.540 --> 00:01:53.920
And, yeah, and a lot of it is also just like –

00:01:53.920 --> 00:01:57.480
CPython is an awesome project, but it's a big project.

00:01:57.480 --> 00:02:01.680
And getting anything to happen, like you've got to move a big project

00:02:01.680 --> 00:02:05.140
in the direction of something, that takes a lot of political effort.

00:02:05.140 --> 00:02:06.060
It takes a lot of time.

00:02:06.060 --> 00:02:07.820
It takes a lot of hanging around our mailing lists.

00:02:07.820 --> 00:02:10.540
And at some point, if you're just trying to do it on like two hours on a weekend,

00:02:10.540 --> 00:02:11.800
that just doesn't happen.

00:02:11.800 --> 00:02:15.560
But if you can actually say, okay, every morning I'm going to spend an hour

00:02:15.560 --> 00:02:18.400
responding to all the email that I've received about this project,

00:02:18.400 --> 00:02:19.360
well, then you can do it.

00:02:19.360 --> 00:02:21.880
And then you can actually have a meaningful progress.

00:02:21.880 --> 00:02:25.100
And then there's also things like I don't use –

00:02:25.100 --> 00:02:28.180
I have no disrespect whatsoever for anybody who uses Windows.

00:02:28.180 --> 00:02:30.100
I don't use Windows on a day-to-day basis.

00:02:30.100 --> 00:02:33.580
It is, as a weekend project, very hard to get me excited

00:02:33.580 --> 00:02:38.280
about working on Windows app signing as a personal side project.

00:02:38.420 --> 00:02:40.920
And I am going to see no benefit out of that whatsoever.

00:02:40.920 --> 00:02:46.460
But when I've got time for it, a lot of other stuff becomes more plausible

00:02:46.460 --> 00:02:49.280
and more palatable as a thing to look at.

00:02:49.280 --> 00:02:50.160
Yeah.

00:02:50.160 --> 00:02:53.360
I want to let you do an introduction for yourself real quick

00:02:53.360 --> 00:02:55.080
before we dive into it.

00:02:55.080 --> 00:02:57.660
But I want to tie this back to PyScript a little bit as well.

00:02:57.660 --> 00:03:00.140
I think there might be some times that align there.

00:03:00.140 --> 00:03:01.960
There absolutely are, yeah.

00:03:01.960 --> 00:03:03.080
Yeah, I can imagine.

00:03:03.080 --> 00:03:07.680
So for folks who haven't listened over all of the years

00:03:07.680 --> 00:03:11.440
and have a really great memory, tell us, who are you?

00:03:11.440 --> 00:03:13.080
What are you up to these days?

00:03:13.080 --> 00:03:14.560
Give us a bit of a hint already.

00:03:14.560 --> 00:03:16.780
So, hi, I'm Russell.

00:03:16.780 --> 00:03:21.200
I am – in days of yore, I was possibly better known

00:03:21.200 --> 00:03:23.140
for my contributions to the Django project.

00:03:23.140 --> 00:03:26.220
I was a very early contributor or core member of the Django core team.

00:03:26.900 --> 00:03:30.260
I don't do anywhere – well, I basically don't do any Django work at this point.

00:03:30.260 --> 00:03:32.700
I just – my interests have moved away from web stuff generally.

00:03:32.700 --> 00:03:37.460
For about the last 10 years, I have been working on the Beware project,

00:03:37.460 --> 00:03:43.300
which is a collection of tools and libraries to support building

00:03:43.300 --> 00:03:47.420
graphical user interfaces, native graphical user interfaces in Python,

00:03:47.420 --> 00:03:52.300
and targeting that at desktop platforms, so Windows, Linux, macOS,

00:03:52.560 --> 00:03:58.320
but also mobile platforms, iOS and Android, the web as a GUI user interface,

00:03:58.320 --> 00:04:02.000
and more recently also textual console-based applications,

00:04:02.000 --> 00:04:09.040
working on the premise that every platform has a concept of a native interface.

00:04:09.040 --> 00:04:12.380
Now, there is a concept of a button on all of those platforms.

00:04:12.380 --> 00:04:15.240
How you access that button is different on every platform,

00:04:15.660 --> 00:04:21.260
and Beware's goal is to, one, put a clean interface around the outside of that

00:04:21.260 --> 00:04:24.420
so you can have a common API for – I just want a button on the screen

00:04:24.420 --> 00:04:26.460
so when I push the button, the light goes bing.

00:04:26.460 --> 00:04:29.720
One, provide a common cross-platform API for that,

00:04:29.720 --> 00:04:33.460
and then two, provide the mechanisms to say, okay,

00:04:33.460 --> 00:04:36.160
I have written my machine that goes bing with a button.

00:04:36.160 --> 00:04:39.860
I want to give it to someone, and I want to give it to them

00:04:39.860 --> 00:04:44.340
using the platform's app infrastructure.

00:04:44.340 --> 00:04:47.320
I just want to have it on this person's iPhone

00:04:47.320 --> 00:04:51.560
or give it to a Windows user and have them just run it

00:04:51.560 --> 00:04:53.740
without having to go through, okay, well, first,

00:04:53.740 --> 00:04:55.560
you've got to set up a Python virtual environment,

00:04:55.560 --> 00:04:57.160
and then you've got to keep installing it.

00:04:57.160 --> 00:04:59.940
Are you familiar with the terminal?

00:04:59.940 --> 00:05:02.340
Why don't you become familiar with the terminal?

00:05:02.340 --> 00:05:03.280
We'll start there, yeah.

00:05:04.080 --> 00:05:09.640
From my perspective, there are absolutely – as a developer, I need to know that.

00:05:09.640 --> 00:05:12.480
As a Python user, I need to know how that stuff works.

00:05:12.480 --> 00:05:15.860
If I have written a program and I want to give it to someone,

00:05:15.860 --> 00:05:20.160
if they need to know what Python is, I have failed as a developer

00:05:20.160 --> 00:05:22.860
because as an end user, they don't care.

00:05:22.860 --> 00:05:25.520
They just want to install the app the same way as everything.

00:05:25.520 --> 00:05:28.100
They want to double-click on an icon and make the thing work.

00:05:28.100 --> 00:05:30.120
I totally agree with you.

00:05:30.860 --> 00:05:34.740
That's awesome, and I would say if it's not possible

00:05:34.740 --> 00:05:39.840
to have a little colorful native-looking icon either in your dock,

00:05:39.840 --> 00:05:43.720
in your taskbar, in your app launcher on your phone that you touch

00:05:43.720 --> 00:05:48.140
and the thing comes to life, that's not a real app delivery platform.

00:05:48.140 --> 00:05:52.220
Yeah, it is a very powerful language with which you can do

00:05:52.220 --> 00:05:54.320
all sorts of incredible things, but at the end of the day,

00:05:54.320 --> 00:05:56.760
you've got to give that thing to someone to do it

00:05:56.760 --> 00:05:59.860
without giving them a three-year degree in computer science

00:05:59.860 --> 00:06:01.440
before they can actually do the damn thing.

00:06:01.440 --> 00:06:04.760
Sure, and even if they can, they might not want to, right?

00:06:04.760 --> 00:06:05.740
Yeah, exactly.

00:06:05.740 --> 00:06:06.740
I don't want to do that to start.

00:06:06.740 --> 00:06:06.960
It's a barrier.

00:06:06.960 --> 00:06:09.420
Yeah, yeah, I love my web browser.

00:06:09.420 --> 00:06:10.580
I don't want to start it that way.

00:06:10.580 --> 00:06:11.620
Yeah.

00:06:11.620 --> 00:06:16.100
Yeah, so the extension of that then is that particularly

00:06:16.100 --> 00:06:24.240
for the web, for iOS and for Android, there's kind of the foundational question

00:06:24.240 --> 00:06:27.580
then of, well, okay, but how do I run Python on that device at all?

00:06:27.580 --> 00:06:30.540
You know, how do I get Python on my iPhone?

00:06:30.540 --> 00:06:35.440
And I don't just want to have, like, a Python interpreter on my iPhone

00:06:35.440 --> 00:06:38.420
because you don't, like, an iPhone, everything is inside an app,

00:06:38.420 --> 00:06:39.880
so I need to have it inside my app.

00:06:39.880 --> 00:06:41.280
How do I get it inside the app?

00:06:41.320 --> 00:06:44.260
And then when it's inside the app, how do I invoke the code that's there?

00:06:44.260 --> 00:06:45.980
And so on and so on.

00:06:45.980 --> 00:06:49.840
So a lot of the work that's kind of been leading up to this point

00:06:49.840 --> 00:06:54.740
is, like, literally, how to make CPython work on iOS.

00:06:54.740 --> 00:06:56.560
How do I make CPython work on Android?

00:06:56.560 --> 00:06:58.320
How do I make CPython work in the browser?

00:06:58.320 --> 00:06:59.440
Right.

00:06:59.560 --> 00:06:59.880
So, yeah.

00:06:59.880 --> 00:07:01.140
That's awesome.

00:07:01.140 --> 00:07:06.180
A very, very interesting and powerful goal, I think.

00:07:06.180 --> 00:07:11.260
Let's not talk about it just yet, but I think it's going to, it's really,

00:07:11.260 --> 00:07:17.160
it leaves Python open to being not the default choice,

00:07:17.160 --> 00:07:20.880
even though it's a really great programming default choice language.

00:07:20.880 --> 00:07:26.040
Somebody says, I want to get started with programming.

00:07:26.040 --> 00:07:26.440
Awesome.

00:07:26.440 --> 00:07:27.320
You should check out Python.

00:07:27.700 --> 00:07:28.540
Yeah, I want to build an app.

00:07:28.540 --> 00:07:30.440
You shouldn't check out Python, right?

00:07:30.440 --> 00:07:32.580
Like, you don't want that to be the answer, right?

00:07:32.580 --> 00:07:37.460
In this path that you're making, you're hacking away in the forest for us.

00:07:37.460 --> 00:07:38.760
Yeah, exactly.

00:07:38.760 --> 00:07:43.700
One of the stimulus for me working on this, there was a couple,

00:07:43.700 --> 00:07:47.180
but one of them is that my son, who is now first year university,

00:07:47.180 --> 00:07:50.340
but at the time when I was sort of starting, it was late primary school,

00:07:50.340 --> 00:07:54.060
was starting to look at how to program.

00:07:54.860 --> 00:07:57.280
And the device that he had at school was an iPad.

00:07:57.280 --> 00:08:00.840
And he says, okay, well, I'm learning to program.

00:08:00.840 --> 00:08:01.180
Great.

00:08:01.180 --> 00:08:02.600
How do I build an iPad app?

00:08:02.600 --> 00:08:05.100
Well, you don't.

00:08:05.100 --> 00:08:06.320
Like, it's complicated.

00:08:06.320 --> 00:08:07.340
Yeah.

00:08:07.340 --> 00:08:09.460
Have you heard the storyboards?

00:08:09.460 --> 00:08:10.340
It's kind of complicated.

00:08:10.340 --> 00:08:11.820
He's learning.

00:08:11.820 --> 00:08:16.920
You know, then you say, okay, well, but I'm learning Python because Python is a good language

00:08:16.920 --> 00:08:19.940
for teaching people how to write, how to program.

00:08:19.940 --> 00:08:21.220
Okay.

00:08:21.220 --> 00:08:23.400
Well, now I want to write that iPad app.

00:08:23.400 --> 00:08:24.780
Yeah, but you can't.

00:08:24.780 --> 00:08:27.460
So, yeah, maybe you want to, yeah, you've got to learn a different language for that.

00:08:27.460 --> 00:08:28.560
But I don't want to learn a different language.

00:08:28.560 --> 00:08:30.440
I've just, I've only barely got my hands around Python.

00:08:30.440 --> 00:08:33.260
Why do I have to learn another language just to be able to have an app?

00:08:33.340 --> 00:08:33.480
Yeah.

00:08:33.480 --> 00:08:39.040
So, yeah, there's a running sort of semi joke that goes around that Python is the second

00:08:39.040 --> 00:08:40.080
best language for everything.

00:08:40.080 --> 00:08:43.760
And part of it being the second best language for everything is that it needs to be able

00:08:43.760 --> 00:08:51.340
to do all these things, maybe not as well as Swift on an iOS, on an iPhone, or Kotlin

00:08:51.340 --> 00:08:55.560
on an Android machine or whatever, but well enough that you can get something going.

00:08:55.560 --> 00:09:01.360
Yeah, I would be well happy to say it takes an extra 5% of my battery compared to a regular

00:09:01.360 --> 00:09:02.880
app to use a Python app.

00:09:02.960 --> 00:09:03.420
I don't care.

00:09:03.420 --> 00:09:04.340
It's fine.

00:09:04.340 --> 00:09:05.900
But it's not that.

00:09:05.900 --> 00:09:08.120
It's possible, impossible.

00:09:08.120 --> 00:09:09.180
Right?

00:09:09.180 --> 00:09:10.100
That's not a great divide.

00:09:10.100 --> 00:09:11.840
All right.

00:09:11.840 --> 00:09:18.160
Before we dive into this, though, you mentioned that you work on the open source team at Anaconda.

00:09:18.160 --> 00:09:21.460
So, I want to give you a moment to talk a little bit about what that is.

00:09:21.460 --> 00:09:26.180
I had Peter Wang on the show not too long ago, and he's always super fun to talk to.

00:09:27.140 --> 00:09:32.800
And I know that they're putting a lot of support behind PyScript.

00:09:32.800 --> 00:09:37.880
And it sounds like the timing of releasing PyScript and all that is a little bit aligned with

00:09:37.880 --> 00:09:38.980
when you joined.

00:09:38.980 --> 00:09:39.740
Yeah.

00:09:39.740 --> 00:09:41.100
So, maybe talk to us a bit about all this.

00:09:41.100 --> 00:09:42.120
Yeah.

00:09:42.260 --> 00:09:48.560
So, you know, Anaconda took a round of funding a little over three, almost four years ago,

00:09:48.560 --> 00:09:49.160
I think, at this point.

00:09:49.160 --> 00:09:55.700
And part of that was to sort of really start doubling down on the contribution of open source.

00:09:55.920 --> 00:10:03.420
Anaconda is a company who is built upon tools that are open source, most notably Conda,

00:10:03.420 --> 00:10:05.740
but it's not the only piece of it.

00:10:05.740 --> 00:10:07.820
Conda is an open source project.

00:10:07.820 --> 00:10:09.600
Someone needs to maintain it.

00:10:09.600 --> 00:10:15.360
Anaconda is able to make money selling this open source product, this whole Python ecosystem,

00:10:15.360 --> 00:10:22.580
into Fortune 500 companies who need all sorts of legal compliance and standards compliance

00:10:22.580 --> 00:10:26.920
and security reporting and all that kind of stuff that, you know, your student doing a

00:10:26.920 --> 00:10:30.840
high school computer programming degree doesn't care about, but the big end of town does.

00:10:30.840 --> 00:10:36.200
Anaconda is able to make money out of that, but recognizes that the only reason they're

00:10:36.200 --> 00:10:40.420
able to make money doing that is that there is this open source foundation, that Python is

00:10:40.420 --> 00:10:42.060
an open source ecosystem.

00:10:42.060 --> 00:10:48.360
And unless people are maintaining that stuff, Anaconda is not going to have a company in a

00:10:48.360 --> 00:10:51.000
couple of years because everyone's going to move away from Python or do other things

00:10:51.000 --> 00:10:52.520
or find other ways of solving problems.

00:10:52.520 --> 00:10:55.540
And, you know, that ultimately is bad news for Anaconda.

00:10:55.540 --> 00:11:01.760
The other side of it, and sort of the reason why PyScript is interesting, why Anaconda is

00:11:01.760 --> 00:11:06.880
supporting iOS and Android work, is that there is an opportunity here to just literally make the

00:11:06.880 --> 00:11:07.380
Pi bigger.

00:11:07.380 --> 00:11:11.740
That if Anaconda, you know, if someone can come in and say, oh yeah, I want to write my,

00:11:11.740 --> 00:11:15.740
they're at a Fortune 500 company, I want to write my app, I want to write it in Python.

00:11:16.360 --> 00:11:18.620
Okay, well now I can do it on iOS and Android.

00:11:18.620 --> 00:11:23.940
There's now more users for Anaconda's products as a result of this investment that's been made

00:11:23.940 --> 00:11:26.360
in iOS and Android to make it possible at all.

00:11:26.360 --> 00:11:28.800
It is very much a long-term project.

00:11:28.800 --> 00:11:30.920
But like this is iOS and Android stuff.

00:11:30.920 --> 00:11:35.220
Conda as a project does not have particularly good support for iOS and Android.

00:11:35.220 --> 00:11:38.440
Eventually, hopefully not that far off, it will.

00:11:39.120 --> 00:11:42.700
But you don't get to Conda supporting it until Python supports it.

00:11:42.700 --> 00:11:46.840
And you don't get Python supports it unless someone sits down and actually does the hard

00:11:46.840 --> 00:11:51.420
work to make that happen, which is essentially what I was hired to, myself and Malcolm were

00:11:51.420 --> 00:11:51.840
hired to do.

00:11:51.840 --> 00:11:54.400
PyScript fits in a very similar boat.

00:11:54.400 --> 00:11:59.540
You know, the web is undeniably a platform that is everywhere that you can't run Python

00:11:59.540 --> 00:12:02.520
in, or you couldn't run Python in, or it was very hard to run Python in.

00:12:02.940 --> 00:12:08.720
And PyScript as an effort is essentially saying, okay, let's make it as straightforward as possible

00:12:08.720 --> 00:12:15.640
for me to just drop some Python into a browser and do web user interface stuff where instead

00:12:15.640 --> 00:12:19.160
of having to learn JavaScript and learn a whole new ecosystem and learn a whole bunch of new

00:12:19.160 --> 00:12:26.980
set of tools, I can just use Python and open up that whole other ecosystem of places where

00:12:26.980 --> 00:12:30.380
you can run Python code as another place where you might want to do things.

00:12:30.380 --> 00:12:31.180
Yeah.

00:12:31.600 --> 00:12:37.080
And to give people a sense of what's possible with PyScript, it's very, very interesting.

00:12:37.080 --> 00:12:44.380
On iOS, and also on Android, I'm sure I just haven't tried it, you can create progressive

00:12:44.380 --> 00:12:47.020
web apps and then say, save this to my home screen.

00:12:47.020 --> 00:12:51.240
And when it launches, it looks like a native app that you can't really tell that it's not

00:12:51.240 --> 00:12:51.820
a native app.

00:12:51.820 --> 00:12:58.980
I put together a sample when PyScript first came out that had an offline or, you know, offline

00:13:00.260 --> 00:13:03.740
PyScript, all Python written app.

00:13:03.740 --> 00:13:06.020
And it was talking to some APIs out on the internet.

00:13:06.020 --> 00:13:12.140
And even just those early stages, it was like, wow, this really makes things possible.

00:13:12.140 --> 00:13:20.580
The challenge is, I mean, this is the big challenge is people don't discover apps on their mobile

00:13:20.580 --> 00:13:23.420
devices through progressive web apps.

00:13:24.080 --> 00:13:24.280
Right.

00:13:24.280 --> 00:13:26.220
Hence your project.

00:13:26.220 --> 00:13:26.520
Right.

00:13:26.520 --> 00:13:32.880
They, they go to the app store and they click get or buy, and then it shows up on their device.

00:13:32.880 --> 00:13:33.100
Right.

00:13:33.100 --> 00:13:36.580
It's just, it's kind of like back to like, well, if you could create a virtual environment,

00:13:36.580 --> 00:13:37.820
you could run this thing.

00:13:37.820 --> 00:13:42.380
You know, if you can create a progressive web app, I'm a huge fan of them, but it doesn't,

00:13:42.380 --> 00:13:45.020
my fandom doesn't change people's behavior.

00:13:45.020 --> 00:13:45.320
Right.

00:13:46.020 --> 00:13:46.380
Sure.

00:13:46.380 --> 00:13:50.800
I like, but I guess also like to, to defend my own project here, like I'm, I'm a big fan

00:13:50.800 --> 00:13:51.180
of PyScript.

00:13:51.180 --> 00:13:52.140
I love what they're doing.

00:13:52.140 --> 00:13:55.060
There are limits to what you can do in a progressive web app.

00:13:55.060 --> 00:13:59.740
Those limits are getting extended further and further out, but there are things that if you

00:13:59.740 --> 00:14:05.400
want to have access to the entire capabilities of your device directly at the hardware layer,

00:14:05.400 --> 00:14:07.720
you can't do that in a progressive web app.

00:14:07.720 --> 00:14:12.420
You can only do it if you're actually writing to the native APIs and you've got direct hardware

00:14:12.420 --> 00:14:12.820
access.

00:14:13.340 --> 00:14:19.940
There are, the, the web browser sandbox does place some limits on what you can do.

00:14:19.940 --> 00:14:21.240
Do those limits matter?

00:14:21.240 --> 00:14:23.140
That's, that's an open question.

00:14:23.140 --> 00:14:26.860
There are a lot of things that probably should be progressive web apps that are, you know,

00:14:26.860 --> 00:14:28.920
that, that, that, or that could be progressive web apps.

00:14:28.920 --> 00:14:34.500
But that doesn't mean that there's no market for native apps or that PyScript is like, PyScript

00:14:34.500 --> 00:14:38.560
is eventually going to make, beware or native apps completely irrelevant.

00:14:38.560 --> 00:14:39.060
Cause there is.

00:14:39.060 --> 00:14:39.900
It absolutely won't.

00:14:39.900 --> 00:14:40.600
Yeah.

00:14:40.940 --> 00:14:43.940
And, and the other thing is that they actually do compliment each other really well.

00:14:43.940 --> 00:14:50.820
Like, beware does have a PyScript web backend or PyScript based web backend specifically.

00:14:50.820 --> 00:14:53.480
So you can say, okay, I want to build an app.

00:14:53.480 --> 00:14:54.200
It has a button.

00:14:54.200 --> 00:14:56.880
And when I press it, the dialogue button, my dialogue box pops up.

00:14:56.880 --> 00:15:03.320
Nothing about what I just said dictated whether it was a web browser or an iOS app or a desktop

00:15:03.320 --> 00:15:03.620
app.

00:15:03.740 --> 00:15:08.560
I can render that on all of them and then say, okay, well, it starts as a progressive

00:15:08.560 --> 00:15:08.960
web app.

00:15:08.960 --> 00:15:09.960
Cause that's how I want to do it.

00:15:09.960 --> 00:15:12.540
And then I'm going to spend a little bit more effort and actually make it into an, into a

00:15:12.540 --> 00:15:14.380
native app and get it into the iOS app store.

00:15:14.380 --> 00:15:20.080
You can, you can progress along that chain, without, you know, cutting off any options.

00:15:20.080 --> 00:15:21.140
Yeah.

00:15:21.140 --> 00:15:25.360
Oh, I think your, I think your project, the native app side is it's critical.

00:15:25.360 --> 00:15:26.060
Critical.

00:15:26.060 --> 00:15:29.520
I just think there's also a bunch of people out there that say, well, I'm going to build a

00:15:29.520 --> 00:15:32.500
front end interactive front end and have a bunch of, you know, Django rest framework

00:15:32.500 --> 00:15:33.440
or something on the backend.

00:15:33.440 --> 00:15:38.800
So I'll use react or I'll use view and it's why isn't the answer Python, right?

00:15:38.800 --> 00:15:40.880
It's, it's really, really could be Python.

00:15:40.880 --> 00:15:43.440
That's kind of, I think where PyScript has a lot of possibilities.

00:15:43.440 --> 00:15:49.160
And I think that brings us a little bit to one of your keynotes from 2019 where you talked

00:15:49.160 --> 00:15:51.120
about black swan events, right?

00:15:51.120 --> 00:15:52.180
Yes.

00:15:52.180 --> 00:15:56.660
It's a little bit of the same story, but maybe give people a sense of this and we can link

00:15:56.660 --> 00:15:59.360
to this keynote if they want to explore that side of things more.

00:15:59.360 --> 00:16:00.440
Sure.

00:16:00.580 --> 00:16:00.840
Yeah.

00:16:00.840 --> 00:16:00.900
Yeah.

00:16:00.900 --> 00:16:05.620
So the, the idea behind a black swan event, it was a, I'm going to Nicholas.

00:16:05.620 --> 00:16:07.980
Nassim Talib, I believe it was.

00:16:07.980 --> 00:16:08.640
Nassim Talib.

00:16:08.640 --> 00:16:09.020
That's the one.

00:16:09.020 --> 00:16:09.160
Yep.

00:16:09.160 --> 00:16:09.920
I forget his name.

00:16:09.920 --> 00:16:14.140
But he, I identified this idea of what's called a black swan event.

00:16:14.140 --> 00:16:18.480
The reason I use this is I'm from Perth and black swans come from Perth.

00:16:18.480 --> 00:16:21.760
So it's like, it's, it was, it was an interesting tie in for an international keynote.

00:16:21.760 --> 00:16:23.880
You guys actually have black swans all over.

00:16:23.880 --> 00:16:24.240
I got it.

00:16:24.240 --> 00:16:24.620
We have them.

00:16:24.800 --> 00:16:27.660
Like the state emblem of Western Australia is a black swan.

00:16:27.660 --> 00:16:31.120
Like that is, that is literally on our flag.

00:16:31.120 --> 00:16:36.740
So the theory was that like the, the, the Dutch bumped into Western Australia accidentally looking

00:16:36.740 --> 00:16:39.660
for the spice islands in the 1600s.

00:16:39.660 --> 00:16:45.220
And at the time they did that, they knew with absolute certainty that all swans were white.

00:16:45.220 --> 00:16:49.980
And then they bumped into Western Australia and they discovered that all the swans here are black.

00:16:51.160 --> 00:16:59.560
The idea behind a black swan event is a thing you don't see coming that completely changes your view of the world.

00:16:59.560 --> 00:17:04.320
And black swan events are the sorts of things that completely change markets.

00:17:04.320 --> 00:17:14.800
We don't know what you, you know, if you're not looking, if you're not ready for a, an, a cataclysmic change in your ecosystem, then the change happens and you are left behind.

00:17:14.800 --> 00:17:15.620
Yeah.

00:17:15.680 --> 00:17:20.300
I would say, you know, COVID is a good example of what hit people.

00:17:20.300 --> 00:17:22.000
Another one's AI.

00:17:22.000 --> 00:17:23.720
Yeah.

00:17:23.720 --> 00:17:26.320
AI is still, how is that going to impact?

00:17:26.320 --> 00:17:28.160
It's just a little bit less, a little bit less clear.

00:17:28.160 --> 00:17:33.220
And COVID, like we're kind of seeing like the impacts of, of that, whether that's going to have long-term impacts.

00:17:33.220 --> 00:17:35.360
Like some of those things seem to be kind of fading away.

00:17:35.360 --> 00:17:37.460
But the one that I, yeah.

00:17:37.460 --> 00:17:37.700
Yeah.

00:17:37.700 --> 00:17:39.280
Well, yeah, mostly.

00:17:39.280 --> 00:17:44.540
I mean, people, I mean, people still get to say, but like the, the world has shut down.

00:17:45.100 --> 00:17:48.120
And will we, will economies just disappear?

00:17:48.120 --> 00:17:49.880
Level of, oh my gosh.

00:17:49.880 --> 00:17:51.720
It's kind of, that's the history I was thinking of.

00:17:51.720 --> 00:17:51.860
Yeah.

00:17:51.860 --> 00:17:52.120
Yeah.

00:17:52.120 --> 00:18:02.480
The one that I was highlighting for, for, for Python is that Python is a programming language, but it's a programming language that has historically assumed, well, you're running on a laptop, right?

00:18:02.480 --> 00:18:04.080
Like that's where you run computer code.

00:18:04.080 --> 00:18:05.340
You always run computer code on a laptop.

00:18:05.600 --> 00:18:07.740
And then iPhones turned up.

00:18:07.740 --> 00:18:10.180
And now we've got computing in our pocket.

00:18:10.180 --> 00:18:15.300
That is as, as powerful, if not more powerful than the laptops that we had on our desk 10 years ago.

00:18:16.820 --> 00:18:21.240
And Python can't run there, or at least at the time, couldn't really run there.

00:18:21.240 --> 00:18:23.540
So what does that mean for Python?

00:18:23.540 --> 00:18:25.340
Why am I going to learn Python?

00:18:25.340 --> 00:18:35.520
If the, if the, if the computing ecosystem moves to a world where everybody's using phones and tablets, and I can't run Python on a phone or a tablet, why am I going to lose, learn Python?

00:18:35.660 --> 00:18:43.200
Python as an ecosystem has an existential risk there because of this black swan of a change in the way people do computing.

00:18:43.200 --> 00:18:44.000
Yep.

00:18:44.000 --> 00:18:51.260
And at the time I gave that keynote, what I was essentially saying is, okay, as an ecosystem, we need to take a long, hard look at ourselves.

00:18:51.260 --> 00:18:57.660
It's impossible to know what the black swan events are going to be, but we can look at where the ecosystem is now.

00:18:57.660 --> 00:19:03.360
We can look at the trends of things that are happening and we can work out institutionally, what are our risks?

00:19:03.500 --> 00:19:08.820
Like what, what could, what would need to change to make Python a dead ecosystem?

00:19:08.820 --> 00:19:16.540
And the obvious one, the one that I was sort of really pushing at that time, one of, one of which is platforms that we need to support.

00:19:16.540 --> 00:19:20.220
And the second is how do we support this, this software going forward?

00:19:20.220 --> 00:19:25.840
You know, how do we actually guarantee that this, this community driven project continues to be maintained?

00:19:25.840 --> 00:19:29.320
Because if we don't have maintainers, then the code doesn't get written.

00:19:29.320 --> 00:19:30.720
So, yeah.

00:19:30.720 --> 00:19:31.920
Yeah.

00:19:31.920 --> 00:19:33.180
Excellent.

00:19:33.280 --> 00:19:34.580
I recommend people check it out.

00:19:34.580 --> 00:19:35.260
It's on YouTube.

00:19:35.260 --> 00:19:36.680
I will link to it.

00:19:36.680 --> 00:19:38.920
So.

00:19:38.920 --> 00:19:40.140
Scary those five years ago.

00:19:40.140 --> 00:19:41.220
I know.

00:19:41.220 --> 00:19:45.020
I'm like, I feel like that was pretty recent, but no, no.

00:19:45.020 --> 00:19:48.060
That was the last one before COVID, by the way, bringing it full circle.

00:19:48.060 --> 00:19:52.440
Tommy out there asking the audiences in the iOS Pythonistas app.

00:19:52.440 --> 00:19:54.840
It's really good, simple use cases in the past.

00:19:54.840 --> 00:20:02.880
The GUI layer, a bit of a hassle, but like the library modules also could not call some not yet exposed APIs.

00:20:03.060 --> 00:20:08.320
I guess as we get into this, maybe think just people probably know about the Pythonista app.

00:20:08.320 --> 00:20:10.280
I don't know.

00:20:10.280 --> 00:20:10.800
Yeah.

00:20:10.800 --> 00:20:12.020
Yeah.

00:20:12.020 --> 00:20:12.940
It was around.

00:20:12.940 --> 00:20:14.820
And it's not the same idea.

00:20:14.820 --> 00:20:16.380
It's not what you guys are trying to do.

00:20:17.000 --> 00:20:17.380
Yes.

00:20:17.380 --> 00:20:17.400
Yes.

00:20:17.400 --> 00:20:19.980
And no, because I actually worked on Pythonista.

00:20:19.980 --> 00:20:24.860
The reason that Pythonista supports Python 3, I was contracted to do the Python 3 port.

00:20:24.860 --> 00:20:28.620
So the core of that library is essentially the thing that Beware was doing.

00:20:28.620 --> 00:20:31.760
And the reason it was able to move to Python 3 was because of the work that I was doing.

00:20:32.460 --> 00:20:40.880
It is, yeah, it is very much the sort of the Pythonista as an idea is kind of what if idle, but on a phone.

00:20:40.880 --> 00:20:45.620
Like here is a development environment where you can write Python code.

00:20:45.620 --> 00:20:49.820
You have some access to some libraries and some GUI libraries.

00:20:50.220 --> 00:20:56.700
So you can put a button up, but you're not writing, you're not using Pythonista to write an app.

00:20:56.920 --> 00:21:04.520
You're using it to put an interface into a running Pythonista sheet, you know, working environment.

00:21:04.520 --> 00:21:07.740
It is absolutely a way to write Python.

00:21:07.740 --> 00:21:11.540
It is a way to have Python running on your phone.

00:21:11.540 --> 00:21:18.300
But it is not something that's going to push something to the iOS app store so that random other person can buy your app.

00:21:18.300 --> 00:21:25.580
You know, to me, it feels a little bit like shortcuts on iOS in that you could kind of put together some behaviors,

00:21:25.580 --> 00:21:27.320
but you would never try to make an app.

00:21:27.320 --> 00:21:30.920
Yeah, that's not too far from it.

00:21:30.920 --> 00:21:33.120
Except that it's all inside the sound box.

00:21:33.120 --> 00:21:36.440
Yeah, and you could do real Python, which is way better than shortcuts.

00:21:36.440 --> 00:21:42.140
But the kind of the type of thing you accomplish, it feels a little bit like I can go find this thing and run it,

00:21:42.140 --> 00:21:43.700
and it'll do something for me, which is cool.

00:21:43.700 --> 00:21:48.900
But it's not going to be the new Airbnb implementation.

00:21:48.900 --> 00:21:50.520
No, exactly.

00:21:50.520 --> 00:22:01.320
And, like, even, like, I guess, Beware as a project isn't – the intention is not that it would be the next Airbnb as a final product.

00:22:01.320 --> 00:22:09.480
It might, however, be the mock-up of the demo app that you take to your initial, you know, seed funding round to prove, you know,

00:22:09.560 --> 00:22:11.240
here is the idea we've got.

00:22:11.240 --> 00:22:14.740
We've proved it out with some people, just like a small little sample trial, whatever.

00:22:14.740 --> 00:22:21.700
Now give us the money to go and actually hire a team of iOS developers and a team of Android developers to build an absolutely kick-ass,

00:22:21.700 --> 00:22:24.940
optimized, native application of every platform.

00:22:24.940 --> 00:22:25.780
Yeah.

00:22:26.460 --> 00:22:31.040
Maybe a little bit like Playgrounds as well, perhaps, in that regard.

00:22:31.040 --> 00:22:33.180
Yeah, a little bit, I guess, like Playgrounds, yeah.

00:22:33.180 --> 00:22:35.280
Yeah, also a different focus.

00:22:35.280 --> 00:22:39.840
But another comment, maybe, as we dive into this, Joe out there asks us, hey, great project.

00:22:39.840 --> 00:22:41.740
How would you sell this to us?

00:22:41.740 --> 00:22:44.800
And that there's a few other frameworks like WXPython, Kivy.

00:22:44.800 --> 00:22:47.900
WXPython also renders native GUIs.

00:22:47.900 --> 00:22:51.440
How would I sell it?

00:22:51.440 --> 00:22:51.780
Okay.

00:22:51.780 --> 00:22:54.080
Says he, pulling out the sales sheet.

00:22:54.860 --> 00:22:56.120
Let me get my pushback.

00:22:56.120 --> 00:22:56.540
Hold on.

00:22:56.540 --> 00:22:59.600
There are, so there's two, essentially two questions there.

00:22:59.600 --> 00:23:02.500
One is WXPython and one is Kivy.

00:23:02.500 --> 00:23:07.960
The Kivy is a, sort of the two different reasons.

00:23:07.960 --> 00:23:11.620
Kivy does work on iOS and Android and also on the desktop platforms.

00:23:11.620 --> 00:23:16.200
Kivy is taking a very, very distinctly different approach to user interface design.

00:23:16.200 --> 00:23:23.100
So Kivy can run on all those platforms, but the user interface that it puts up is a Kivy user interface.

00:23:23.320 --> 00:23:24.440
It always looks like Kivy.

00:23:24.440 --> 00:23:28.740
And it's like, if you build a macOS app, it will look the same on Windows.

00:23:28.740 --> 00:23:30.080
It'll look the same on GTK.

00:23:30.080 --> 00:23:32.600
And it will look the same, you know, size of window notwithstanding.

00:23:32.600 --> 00:23:34.480
It will look the same on iOS and Android.

00:23:34.480 --> 00:23:38.440
That is a completely viable way to build apps.

00:23:38.440 --> 00:23:41.840
It is not a native user interface.

00:23:42.840 --> 00:23:50.720
The reason, and one of the major reasons that I dislike that as an approach, I'm not in any way saying that Kivy is a bad project.

00:23:50.720 --> 00:23:52.640
It is a different way to build user interfaces.

00:23:52.640 --> 00:23:56.820
And I prefer a different approach, which is to say an actual native button.

00:23:56.820 --> 00:23:59.660
So on macOS, it looks like a macOS app.

00:23:59.660 --> 00:24:01.920
On iOS, it looks like an iOS app.

00:24:02.000 --> 00:24:03.940
On Windows, it looks like a Windows app.

00:24:03.940 --> 00:24:11.820
The downside is that if you need to take screenshots, you've got to have an iOS screenshot and a macOS screenshot and a Windows screenshot.

00:24:13.100 --> 00:24:16.760
The benefit is consistency with the rest of the platform.

00:24:16.760 --> 00:24:20.380
And that might seem like a totally cosmetic thing.

00:24:20.380 --> 00:24:26.260
But one, consistency between applications is a mode of user interface discovery.

00:24:26.260 --> 00:24:33.160
Because if people know this is how a button works on macOS, they know how your platform does it as well, how your app does it as well.

00:24:33.160 --> 00:24:38.840
Rather than having to discover how you have decided to implement menus or buttons or anything else.

00:24:38.940 --> 00:24:44.620
Yeah, one of the really things that stands out, I think, super stark a lot of times is the file open save dialogues.

00:24:44.620 --> 00:24:45.020
Yes.

00:24:45.020 --> 00:24:48.780
It's like, whoa, this is clearly just alien.

00:24:48.780 --> 00:24:56.440
Yeah, and a lot of cases, they are missing the one thing on my platform that makes file dialogues actually useful.

00:24:56.440 --> 00:25:00.040
Because I can do this thing that I can't do in your dialogue.

00:25:00.040 --> 00:25:01.500
Because you've had to build it from scratch.

00:25:01.500 --> 00:25:08.240
And speaking of building from scratch, the other big benefit of a native GUI is that you get all of the platform's native affordances.

00:25:08.780 --> 00:25:13.720
One of the most surprising things, it wasn't necessarily surprising because I understood why I was doing it.

00:25:13.720 --> 00:25:16.800
But things that might be surprising to people who haven't followed along GUI development.

00:25:16.800 --> 00:25:25.940
We have received an inordinate number of very, very enthusiastic comments from blind people writing iOS apps.

00:25:25.940 --> 00:25:32.500
Because an iOS app built with Beware fits in directly with screen readers.

00:25:32.500 --> 00:25:35.860
Because it is using the platform's native accessibility.

00:25:36.560 --> 00:25:41.340
Kivi has not built explicitly native screen reader support into their widgets.

00:25:41.340 --> 00:25:45.480
To the best of my knowledge, or at least all the reports that I'm getting are saying that it's not there.

00:25:45.480 --> 00:25:49.360
Because you have to build it from scratch on every platform.

00:25:49.360 --> 00:25:50.660
And they haven't done that.

00:25:50.660 --> 00:25:52.360
It's a lot of work.

00:25:52.360 --> 00:25:54.560
I'm not underselling how big of a project it is.

00:25:54.660 --> 00:25:58.960
But Beware got it for free because we are using native widgets.

00:25:58.960 --> 00:26:01.360
And that's not an insignificant consideration.

00:26:01.360 --> 00:26:03.880
So that's Kivi.

00:26:03.880 --> 00:26:04.220
Oh, sorry.

00:26:04.220 --> 00:26:05.460
No, no, please go ahead.

00:26:05.460 --> 00:26:07.640
No, I was going to say that's the Kivi.

00:26:07.640 --> 00:26:14.040
So that's the not native user interface but looks the same everywhere versus Beware's using native widgets everywhere.

00:26:14.280 --> 00:26:16.680
The other argument is, okay, but why don't you use WX Windows?

00:26:16.680 --> 00:26:20.920
The reason we don't use WX Windows is WX Windows doesn't run on iOS or Android.

00:26:20.920 --> 00:26:25.380
And trying to make it run on iOS and Android, like I did look into it and it was a little bit crunchy.

00:26:25.380 --> 00:26:29.400
QT apparently works on iOS now.

00:26:29.400 --> 00:26:31.000
It didn't when I started the project.

00:26:32.140 --> 00:26:34.360
But they very much don't want you to write Python.

00:26:34.360 --> 00:26:39.780
And one of the things that Beware is trying to push and Toga as a GUI platform is trying to push is you're writing Python code.

00:26:39.780 --> 00:26:40.680
It looks like Python.

00:26:40.680 --> 00:26:41.920
It tastes like Python.

00:26:41.920 --> 00:26:44.040
If you don't want to write Python, that's fine.

00:26:44.040 --> 00:26:47.320
There are plenty of GUI toolkits out there that don't require you to write Python.

00:26:47.320 --> 00:26:50.580
But Toga is a Python-first GUI toolkit.

00:26:50.580 --> 00:26:52.620
And it looks like, tastes like Python.

00:26:52.620 --> 00:27:01.340
We support, we use, actively use in APIs, iterators and generators and asyncioS syntax and context managers.

00:27:01.700 --> 00:27:08.460
Things that WX Windows as a light wrapper around a C++ framework doesn't really expose.

00:27:08.460 --> 00:27:14.200
Because they are limited by what C++ looks like when you program it.

00:27:14.200 --> 00:27:17.800
And to a set, you also get that to a certain extent in QT as well.

00:27:17.800 --> 00:27:19.360
Or a part QT.

00:27:19.360 --> 00:27:20.580
Yeah, they're both wrappers.

00:27:20.580 --> 00:27:20.820
Yeah.

00:27:20.820 --> 00:27:21.740
Yeah.

00:27:21.740 --> 00:27:22.540
Interesting.

00:27:22.540 --> 00:27:28.300
So let's talk about some of the peps that make this possible, right?

00:27:28.300 --> 00:27:29.320
Yeah.

00:27:29.480 --> 00:27:43.380
There's the foundational, basically adding platforms as a intentionally supported platform to the CPython whole process, right?

00:27:43.380 --> 00:27:48.320
For the core developers working on it from the builds and the deployments and all those kinds of things.

00:27:48.320 --> 00:27:53.100
And so you've got a couple of peps where you're the author of them, which is awesome.

00:27:53.100 --> 00:27:55.100
I'm strictly the author of one.

00:27:55.100 --> 00:27:56.640
Malcolm Smith was the author of the Android one.

00:27:56.640 --> 00:27:57.180
Oh, okay.

00:27:57.180 --> 00:27:57.740
Got it.

00:27:57.740 --> 00:28:01.480
One Android with Malcolm and one iOS with you.

00:28:01.480 --> 00:28:01.740
Okay.

00:28:01.740 --> 00:28:03.440
I see which side fence you come down on.

00:28:03.440 --> 00:28:04.180
I got it.

00:28:04.180 --> 00:28:04.400
Yep.

00:28:04.400 --> 00:28:04.760
No.

00:28:04.760 --> 00:28:05.960
It's all good.

00:28:05.960 --> 00:28:06.540
I'm with you.

00:28:06.540 --> 00:28:06.920
I'm with you.

00:28:06.920 --> 00:28:07.580
All right.

00:28:07.720 --> 00:28:08.840
Tell us about these peps.

00:28:08.840 --> 00:28:12.560
What role they have and their status is final.

00:28:12.560 --> 00:28:14.320
That's good.

00:28:14.320 --> 00:28:14.520
Yep.

00:28:14.520 --> 00:28:15.680
So, yeah.

00:28:15.680 --> 00:28:26.360
So the PEP was essentially formalizing the things that Malcolm and I have been maintaining independently, both of us at the time for like about eight, nine years.

00:28:27.780 --> 00:28:34.960
We had patches, like I was maintaining a set of patches to make CPython run on iOS and I was manually maintaining all those patches.

00:28:34.960 --> 00:28:42.540
And every time a new Python release would come out, I'd have to go and sit down and spend, you know, a couple of months trying to work out, okay, what have they changed this time?

00:28:42.540 --> 00:28:50.800
And, you know, getting all of those, updating all of the PR or all of the code to make it work on a new version of Python.

00:28:51.940 --> 00:29:05.780
In the 3.13 timeframe, so it's, what, September of 2023, I went along to the CPython core team summit in the U.S.

00:29:05.780 --> 00:29:08.420
Sorry, it was in Bono.

00:29:08.420 --> 00:29:14.700
And basically with the intention of I want to form, I want to upstream all these patches.

00:29:14.700 --> 00:29:15.480
We've got these patches.

00:29:15.480 --> 00:29:16.180
They're not huge.

00:29:16.180 --> 00:29:17.580
They're big, but they're not huge.

00:29:17.580 --> 00:29:18.940
I'd like to formalize that.

00:29:18.940 --> 00:29:20.940
And so the outcome of that was what we need is a pep.

00:29:21.040 --> 00:29:38.580
We need a formal description of what it is you're going to do, why it's going to change, what impact that has on the rest of the ecosystem for you to do that, and to formalize a couple of the little details that need to be formally specified in order for the rest of the ecosystem to play nice with this.

00:29:38.580 --> 00:29:42.960
Little details like, what does sys.platform return on an iOS machine?

00:29:42.960 --> 00:29:46.700
Like, it's a really minor detail, but it's a question you've got to answer.

00:29:46.700 --> 00:29:47.820
And it's like, it's an answer.

00:29:47.820 --> 00:29:48.900
Our one is probably wrong.

00:29:48.900 --> 00:29:50.680
Well, yeah, that's the thing.

00:29:50.820 --> 00:29:54.720
It's double on macOS for some historical reasons, but even on iOS.

00:29:54.720 --> 00:29:55.540
Should it be iOS?

00:29:55.540 --> 00:29:57.800
Should it be iOS capitalized?

00:29:57.800 --> 00:29:59.420
Should it be iPhone?

00:29:59.420 --> 00:30:00.680
Should it be iPhone OS?

00:30:00.680 --> 00:30:02.880
Should it be iPhone OS or iPhone simulator?

00:30:02.880 --> 00:30:06.940
All of these are answers that Apple itself uses at various points in their API.

00:30:06.940 --> 00:30:08.260
And what about iPad?

00:30:08.260 --> 00:30:09.120
But you need to have a formal spec.

00:30:09.120 --> 00:30:10.840
Well, an iPad is iPad iOS.

00:30:10.840 --> 00:30:11.620
Is that a different answer?

00:30:11.620 --> 00:30:12.980
And so on.

00:30:13.540 --> 00:30:21.720
And then the one that really matters for that is nailing down what is the platform tag that will be used for packaging purposes?

00:30:21.720 --> 00:30:27.720
So when a wheel, a binary wheel, eventually lands on PyPI, what's the tag?

00:30:27.720 --> 00:30:29.120
Like, what is it?

00:30:29.120 --> 00:30:33.680
For macOS, it's a macOS X underscore 11 underscore ARM 64.

00:30:33.680 --> 00:30:34.800
Okay.

00:30:34.800 --> 00:30:35.960
What is it for iPhone?

00:30:35.960 --> 00:30:37.420
Yeah, maybe we could elaborate.

00:30:37.420 --> 00:30:40.660
Maybe you could elaborate just a little bit on what that even means, right?

00:30:40.700 --> 00:30:43.420
Because before wheels, things were different.

00:30:43.420 --> 00:30:44.140
You would download it.

00:30:44.140 --> 00:30:44.700
You would build it.

00:30:44.700 --> 00:30:46.680
You'd have to have Fortran or some random thing.

00:30:46.680 --> 00:30:51.580
Wheels solved that, but that then created a combinatorial explosion of binary assets, right?

00:30:51.580 --> 00:30:52.660
Why does that matter?

00:30:52.660 --> 00:30:54.360
Why does that matter?

00:30:54.360 --> 00:31:06.180
So the major change with wheels is that it moved from a world where installing a Python package required you to execute code at time of installation.

00:31:07.840 --> 00:31:17.880
And that's not a good idea from a security perspective because you then need to audit all of the code that's going to execute when you install the package.

00:31:17.880 --> 00:31:25.260
And you can't find anything out about the package without running that code or at least auditing the code that's going to run.

00:31:25.260 --> 00:31:35.780
Wheels provide you to say, okay, this is a wheel is basically just a zip file with a bunch of known metadata that describes exactly what is in here.

00:31:35.780 --> 00:31:41.960
But part of that specification is also a binary specification that says what version of CPython is it compatible with?

00:31:41.960 --> 00:31:44.480
What version of the operating system is it compatible with?

00:31:44.480 --> 00:31:47.060
What CPU architecture is it compatible with?

00:31:47.060 --> 00:31:59.000
So that if I look at a wheel that is labeled, for example, macOS 11.0 ARM64, I know that this will run on macOS 11 with an ARM64 CPU.

00:31:59.580 --> 00:32:01.900
There are any number of these tags available.

00:32:01.900 --> 00:32:07.840
And there's differences like a universal 2, which will support both x86 and ARM.

00:32:07.840 --> 00:32:21.040
And on Linux, there's a thing called a mini Linux wheel, which is a specification for specifically what API guarantees does this Linux platform guarantee in terms of what is available in the CPython.

00:32:21.480 --> 00:32:26.900
In terms of the C library, the GNU C library, et cetera, et cetera.

00:32:26.900 --> 00:32:32.660
You have to be able to specify that so that I know when I get this wheel, I know where it will work and how it will work.

00:32:32.660 --> 00:32:36.680
And for the point of view of pip, pip knowing which version should I download?

00:32:36.680 --> 00:32:39.880
I've got an app here that I'm running on my macOS machine.

00:32:39.880 --> 00:32:41.620
Which wheel should I download?

00:32:41.620 --> 00:32:44.980
Go and grab one and resolve it and find out and solve that question.

00:32:45.480 --> 00:32:50.200
Yeah, so without knowing that answer, you don't know how to install wheels, basically.

00:32:50.200 --> 00:32:52.220
Correct.

00:32:52.220 --> 00:33:07.540
Yeah, you've got to, part of the wheel specification is which, if the wheel contains all the pre-compiled components, in order for it to have pre-compiled components, there's an API or an ABI specification there of exactly what symbols am I going to be able to link against?

00:33:07.540 --> 00:33:08.900
What can I assume exists?

00:33:09.320 --> 00:33:11.240
Yeah, will this run on my machine?

00:33:11.240 --> 00:33:12.420
Yeah.

00:33:12.420 --> 00:33:14.160
Will it slip fault or what's going to happen, right?

00:33:14.160 --> 00:33:15.600
Or is it even a Python architecture?

00:33:15.600 --> 00:33:22.460
And we have a similar thing with Python standalone builds that is now part of Astral, which is really great.

00:33:22.460 --> 00:33:26.700
We can just grab the Python we need because we know the platform tags and all that kind of stuff.

00:33:26.700 --> 00:33:31.300
Any difference about the Android one?

00:33:31.300 --> 00:33:34.800
I mean, you obviously need one for each platform, I suppose.

00:33:35.560 --> 00:33:47.860
We do, yeah, basically, and there will be, at some point in the hopefully not too distant future, there will be one for Inscripten as well, just formalizing Inscripten support, which is the Pyodide slash PyScript in the browser version.

00:33:47.860 --> 00:33:51.620
Yeah, you need to have one for every platform.

00:33:51.620 --> 00:34:03.340
I guess the one notable difference between iOS and Android as a PEP is that, in theory, CPython 12 could compile on Android.

00:34:03.340 --> 00:34:12.840
There were some patches which had been applied without going through the formal PEP process on the basis of, well, it doesn't cost us anything to add this code in.

00:34:12.840 --> 00:34:16.600
We're not guaranteeing it's going to work, but it's not breaking anything, so we might as well have it there.

00:34:16.600 --> 00:34:33.000
And so there's one, like, the process of formalizing it did change one notable thing, which is that previously, if you were able to get CPython to compile on Android, and it was possible and realistically it needed some patches, but it could be done,

00:34:33.000 --> 00:34:36.220
sys.platform would return Linux.

00:34:36.920 --> 00:34:43.360
Because technically it is, but not in a way that's even remotely helpful to anyone.

00:34:43.360 --> 00:34:57.900
And so one of the things that the PEP specified, like, yes, it is a Linux kernel, but Linux doesn't help you there because nothing about an Android machine actually behaves like Linux once you're past, like, the kernel level.

00:34:57.900 --> 00:35:00.580
The rest of the thing is what you actually care about.

00:35:00.580 --> 00:35:03.440
And the rest of the libraries you can guarantee is what you care about.

00:35:03.440 --> 00:35:14.800
And so one of the things that the PEP had to specify was, okay, we are changing what sys.platform means on Android because you need to be able to differentiate.

00:35:14.800 --> 00:35:18.540
I am on an Android machine, not just a desktop Linux box.

00:35:18.540 --> 00:35:21.740
And so, yeah, so that was one notable change.

00:35:21.740 --> 00:35:24.240
It was in that PEP that wasn't in the iOS one.

00:35:24.240 --> 00:35:24.920
Interesting.

00:35:26.060 --> 00:35:28.120
You mentioned M-Scripten.

00:35:28.120 --> 00:35:29.980
What an interesting project.

00:35:29.980 --> 00:35:30.300
Yeah.

00:35:30.300 --> 00:35:36.440
It almost looks like it's about AI because it's LLVM, but it has nothing to do with that.

00:35:36.440 --> 00:35:36.740
Yeah.

00:35:36.740 --> 00:35:37.220
Yes.

00:35:37.220 --> 00:35:39.980
It's a different set of LLs altogether.

00:35:39.980 --> 00:35:40.880
Yeah.

00:35:40.880 --> 00:35:53.740
So M-Scripten is kind of the tail end, the current manifestation of a long series of developments that started like 15 years ago.

00:35:53.740 --> 00:36:11.600
Someone worked out that modern web browsers have spent so much time optimizing the JavaScript compilers that there are certain JavaScript constructs that map almost one-to-one to machine code.

00:36:11.600 --> 00:36:27.100
Like you can say, okay, add these two integers in JavaScript or these two numbers in JavaScript that if you know the numbers are integers, will map through the JavaScript jits that are running.

00:36:27.100 --> 00:36:30.540
It will map to a literal, you know, add instruction.

00:36:30.540 --> 00:36:33.240
Like two registers coming together sort of thing.

00:36:33.240 --> 00:36:34.220
Yeah, two registers coming together.

00:36:34.220 --> 00:36:47.100
And so if you restrict yourself to handwriting just that subset of JavaScript, you can essentially write assembler in JavaScript.

00:36:48.180 --> 00:36:59.320
Now, in practice, nobody can actually do that because it's just way too constraining to know that you can only, like you actually have to put the brackets around the outside of here or else the jit won't optimize it in just the right way.

00:36:59.320 --> 00:37:01.260
But that's what compilers are for.

00:37:01.260 --> 00:37:07.140
Compilers are really good at taking a set of arbitrary input and following a set of arbitrary rules to produce a consistent set of output.

00:37:07.140 --> 00:37:18.160
And so this thing called ASM.js was born, which is essentially an input format that could be compiled to a jitable version of JavaScript that would run as a native platform.

00:37:18.160 --> 00:37:26.340
And then from that, you can then get to WASM, which is WebAssembly, which is a formal text specification of the sort of things that ASM.js was working on.

00:37:26.340 --> 00:37:31.680
And then Inscripten is a compiler tool chain that plugs into LLVM.

00:37:31.680 --> 00:37:41.660
So if you've used a compiler like Clang, it is essentially a wrapper around a set of compiler building tools that produces output.

00:37:41.660 --> 00:37:47.180
So you are used to calling GCC or Clang on a C program.

00:37:47.180 --> 00:37:56.980
Clang calls into your C program, compiles it into an LLVM format, and LLVM converts it into actual runnable executables.

00:37:56.980 --> 00:38:08.920
And so it's an LLVM plugin that instead of spitting out macOS-compatible binary executable assembly, it spits out WASM.

00:38:08.920 --> 00:38:12.740
It spits out JavaScript-optimized code that can run in the browser.

00:38:12.740 --> 00:38:15.360
That's all very much high level.

00:38:15.360 --> 00:38:17.680
There's a lot of very, very complicated details that go on in the internals.

00:38:17.680 --> 00:38:28.900
But the endpoint is that Inscripten lets you take any arbitrary C code and compile it to JavaScript that will run in a browser at nearish native speed.

00:38:28.900 --> 00:38:33.420
Good news is that CPython is written in C.

00:38:33.420 --> 00:38:40.980
And so you can compile CPython into a JavaScript version or into this JavaScript subset, and it will run in the browser.

00:38:40.980 --> 00:38:43.180
There's a bunch of other stuff you need to do as well.

00:38:43.180 --> 00:38:47.920
And Inscripten is providing a bunch of other things like guaranteeing a bunch of Unix system calls are available.

00:38:47.920 --> 00:38:50.100
But broadly, that's the idea here.

00:38:50.120 --> 00:38:52.980
So you can take any C code and have it run in the browser.

00:38:52.980 --> 00:38:55.940
And at that point, Python is just C code.

00:38:55.940 --> 00:38:57.680
So all of a sudden...

00:38:57.680 --> 00:38:58.340
Yeah, that's awesome.

00:38:58.340 --> 00:39:06.820
But the best news is, because the browser is everywhere, because JavaScript interpreters are everywhere, you've now got cross-platform binaries.

00:39:06.820 --> 00:39:18.680
You've got a format that you can compile to once, and it will run pretty much everywhere because, like, existentially, every platform that matters has a web browser now, which means it's got the ability to run JavaScript.

00:39:18.940 --> 00:39:25.760
And so JavaScript becomes this cross-platform format without ever actually being JavaScript the language.

00:39:25.760 --> 00:39:29.500
It's just kind of exploiting some weird quirks of the way JavaScript works as a language.

00:39:29.500 --> 00:39:35.760
It's like saying you never write assembly, but kind of still do machine instructions, but you never...

00:39:35.760 --> 00:39:36.960
But you're always writing assembly.

00:39:36.960 --> 00:39:37.740
Yeah, exactly.

00:39:37.740 --> 00:39:39.460
There's a really...

00:39:39.460 --> 00:39:46.920
If you go back, oh, gosh, 12, 13 years, Gary Bernhardt gave a talk at PyCon called The Birth and Death of JavaScript.

00:39:46.920 --> 00:39:48.280
So good.

00:39:48.280 --> 00:39:49.300
It was so good.

00:39:49.300 --> 00:39:51.000
It is hilarious.

00:39:51.000 --> 00:40:02.120
At the time, it was just straight up, oh, this is a funny gag, except that he has accurately predicted the next 15 years of software development in terms of the way everything has gone.

00:40:02.120 --> 00:40:02.360
Yeah.

00:40:02.360 --> 00:40:12.980
And I've never spoken to Gary about it, so I don't know, like, how much of this was just for the giggles and how much of it was accurately, like, this is where things are going.

00:40:12.980 --> 00:40:13.820
Yeah.

00:40:13.820 --> 00:40:17.620
But as it turns out...

00:40:17.620 --> 00:40:23.100
It's really technically well presented and predicted, like you said.

00:40:23.100 --> 00:40:23.300
Yeah.

00:40:23.300 --> 00:40:23.620
Yes.

00:40:23.620 --> 00:40:24.100
It's something.

00:40:24.100 --> 00:40:30.560
And for people who are not familiar with this stuff, like, one of the examples he showed, I don't know if he came up with it or he was just quoting and showing it off.

00:40:30.960 --> 00:40:37.440
But somebody took Mozilla Firefox, I think, and compiled that into script and was running inside of Chrome.

00:40:37.440 --> 00:40:44.480
But then inside the embedded Firefox was running, like, Doom compile, Doom inscription or some crazy 3D.

00:40:44.480 --> 00:40:45.360
I mean, it was wild.

00:40:46.360 --> 00:40:46.800
Yeah.

00:40:46.800 --> 00:40:46.800
Yeah.

00:40:46.800 --> 00:40:46.800
Yeah.

00:40:46.800 --> 00:40:46.820
Yeah.

00:40:46.820 --> 00:40:46.820
Yeah.

00:40:46.820 --> 00:40:46.840
Yeah.

00:40:46.840 --> 00:40:54.540
Like, the list of things you can do once you've got the ability to compile C is truly phenomenal.

00:40:55.320 --> 00:41:04.620
Purely because the C compiler toolchain for all of the flaws of C as a language, C is lingua franca.

00:41:04.620 --> 00:41:06.540
C is where everything is done.

00:41:06.540 --> 00:41:07.940
It's ubiquitous, yeah.

00:41:07.940 --> 00:41:14.700
We're now kind of removing, like, the whole thing with LRVM is essentially we're removing C from the front end, letting you put any language you want on the front.

00:41:14.700 --> 00:41:18.020
But now we can use the same toolchain to target any platform we want.

00:41:18.020 --> 00:41:25.920
And so you divorce the specific language from the toolchain that is producing platform-specific binaries.

00:41:25.920 --> 00:41:27.200
Nice.

00:41:27.200 --> 00:41:28.340
All right.

00:41:28.340 --> 00:41:30.620
Let's talk about some of the projects and get some updates on them.

00:41:30.620 --> 00:41:31.820
I know it's been a while.

00:41:31.820 --> 00:41:32.880
Yes.

00:41:32.880 --> 00:41:37.100
And, you know, you've got a lot of support from Anaconda, which, you know, thank you again.

00:41:37.940 --> 00:41:38.720
Yes, absolutely.

00:41:38.720 --> 00:41:39.600
That's awesome.

00:41:39.600 --> 00:41:44.420
So we'll maybe touch on some of the high-level or most important ones.

00:41:44.420 --> 00:41:44.860
Toga?

00:41:44.860 --> 00:41:48.660
Yeah, so Toga, the cross-platform GUI toolkit.

00:41:48.660 --> 00:41:53.840
So this is the analog of a KIVI or a QT or a WX Windows.

00:41:53.840 --> 00:41:57.540
It's the API that lets you say, I want a window that has a button.

00:41:57.540 --> 00:42:02.300
And when I press the button, the light goes off, whatever you want it to do.

00:42:02.300 --> 00:42:04.180
Put this text in the label or whatever.

00:42:04.180 --> 00:42:04.880
Exactly.

00:42:04.880 --> 00:42:05.400
Exactly.

00:42:06.120 --> 00:42:08.120
So it is cross-platform.

00:42:08.120 --> 00:42:11.560
Pure Python runs cross-platform.

00:42:11.560 --> 00:42:18.300
And by cross-platform, I mean all the desktop platforms, so Windows, macOS, Linux with GTK.

00:42:18.300 --> 00:42:20.240
It runs as a web.

00:42:20.240 --> 00:42:22.160
There's a web backend and a textual backend.

00:42:22.160 --> 00:42:23.820
Both of those are very early prototypes.

00:42:23.820 --> 00:42:26.820
But I can't, like, there are demos I can do that demonstrate that it works.

00:42:26.820 --> 00:42:28.940
And also iOS and Android.

00:42:29.740 --> 00:42:36.420
So essentially anywhere that you might want plausibly to have a user interface, I can give you a user interface purely written in Python.

00:42:37.540 --> 00:42:41.180
We also cover a bunch of hardware services as well.

00:42:41.180 --> 00:42:46.100
So, for example, you can, using a pure Python interface, get a GPS read.

00:42:46.100 --> 00:42:47.480
You can work out where you are at a GPS.

00:42:47.480 --> 00:42:48.900
And we have a native WAP widget.

00:42:48.900 --> 00:42:52.860
So you can say, get a GPS read and put it by center of the map of where I am currently standing.

00:42:53.060 --> 00:42:56.080
And that works on iOS, on Android, on macOS.

00:42:56.080 --> 00:42:57.920
We've got it working on GTK.

00:42:57.920 --> 00:43:01.480
And we've got a PR in flight to make it work on Windows as well, I think.

00:43:01.480 --> 00:43:05.200
That, you know, it just, same code just runs everywhere.

00:43:05.200 --> 00:43:06.660
And just, where am I?

00:43:06.660 --> 00:43:07.300
Give me an answer.

00:43:07.300 --> 00:43:09.700
Give me a ping every time I move a significant distance.

00:43:09.700 --> 00:43:11.880
And also for cameras.

00:43:11.880 --> 00:43:13.000
Similar, similar thing for cameras.

00:43:13.000 --> 00:43:17.440
There is a question out of the audience, which I don't know the answer, but I'll throw that for you.

00:43:17.440 --> 00:43:21.100
Like, is there any more love coming for the Beware web view widget?

00:43:21.100 --> 00:43:22.240
Any chance of?

00:43:23.040 --> 00:43:30.720
Having a case, not what they're referring to with Ceph, but is there more love coming?

00:43:30.720 --> 00:43:33.680
I mean, sure, as soon as somebody wants to pay attention to it.

00:43:33.680 --> 00:43:36.700
Am I actively intending in the very near future to do anything with it?

00:43:36.700 --> 00:43:38.180
Probably not.

00:43:38.180 --> 00:43:43.800
The most likely change that's on the horizon is to close the loop on callbacks.

00:43:43.800 --> 00:43:48.820
So at the moment, you can, from Python, inject arbitrary JavaScript into a web view.

00:43:49.380 --> 00:44:01.440
But you can't have something happen in the JavaScript to trigger an action outside in the Python, which is essentially kind of the last piece of the puzzle you need to have a full kind of electron clone.

00:44:01.440 --> 00:44:01.680
Yeah.

00:44:01.680 --> 00:44:03.020
I was going to say, that feels very electron.

00:44:03.840 --> 00:44:04.140
Yeah.

00:44:04.140 --> 00:44:07.680
We actually have a bunch of tooling in place.

00:44:07.680 --> 00:44:10.720
We call it positron because it's like electron, but positive because it's Python.

00:44:10.720 --> 00:44:11.300
I love it.

00:44:11.300 --> 00:44:12.100
I love it.

00:44:12.180 --> 00:44:12.340
Yeah.

00:44:12.340 --> 00:44:16.200
So we can take a website and turn it into a native app.

00:44:16.200 --> 00:44:24.740
The only thing you can't do is then close the loop back out and call native hardware type stuff back into the Python API.

00:44:24.740 --> 00:44:26.060
Not impossible to do.

00:44:26.060 --> 00:44:28.580
I know exactly how to do it on iOS and macOS.

00:44:28.580 --> 00:44:30.220
I think I know how to do it on GTK.

00:44:30.220 --> 00:44:31.540
I don't know how to do it on Windows.

00:44:32.660 --> 00:44:35.920
So that might happen at some point in the not too distant future.

00:44:35.920 --> 00:44:40.840
Beyond that, oh, Seth, are they referring to the Chromium framework?

00:44:40.840 --> 00:44:46.780
No intention to, but if someone wants to write that up, there's no reason you couldn't be a standalone widget.

00:44:46.780 --> 00:44:57.640
Like this is very much from the sort of the Django days of if there is no, just because something exists doesn't mean it needs to be in the core.

00:44:57.640 --> 00:45:06.360
So if someone wants to write a third party widget that wraps the Chromium embedded framework and turn it into a Toga widget, Toga will support that.

00:45:06.360 --> 00:45:11.040
And if to the extent that if there's something that it makes it a little bit crusty, there's probably a couple of areas where it could be a little bit smoother.

00:45:11.680 --> 00:45:14.540
If there's a way we can make it smoother, I'm totally on board with that.

00:45:14.540 --> 00:45:17.420
Doesn't mean it needs to be in Toga core itself.

00:45:17.420 --> 00:45:21.580
Django has a huge ecosystem of Django compatible plugins.

00:45:21.580 --> 00:45:24.100
Toga very much can be in that same space.

00:45:24.100 --> 00:45:28.300
Everything doesn't have to be in Toga for it to be useful in Toga.

00:45:28.300 --> 00:45:29.360
That's awesome.

00:45:29.360 --> 00:45:29.880
That's good to know.

00:45:29.880 --> 00:45:36.540
So I guess maybe the big updates here are the textual and the web targets for Toga.

00:45:36.540 --> 00:45:36.940
Is that right?

00:45:37.880 --> 00:45:42.880
The biggest changes in the last eight years, I guess, is that those two now exist.

00:45:42.880 --> 00:45:45.440
And obviously, you still need a lot of work.

00:45:45.440 --> 00:45:47.660
But like proof of concept, you can do it.

00:45:47.660 --> 00:45:51.180
And it's really just kind of turn the handle and make more widgets come out.

00:45:51.180 --> 00:45:54.860
The biggest sort of impediment to that at the moment is actually testing.

00:45:54.860 --> 00:46:02.060
One of the changes that has come on since I've been working at Anaconda full time is we've gone and got test coverage.

00:46:02.060 --> 00:46:06.860
We've got 100% test coverage of all of the core and all of the desktop and mobile platforms.

00:46:06.980 --> 00:46:15.020
So we have a very, very solid regression test suite to know that things aren't going to break as a result of this weird little tweak over here that we make.

00:46:15.020 --> 00:46:16.560
We've actually got validation of all that.

00:46:16.560 --> 00:46:22.700
We don't have that yet on web and textual, mostly because of quirks of how those platforms actually run.

00:46:22.700 --> 00:46:26.760
There's a kind of a foundational question we need to answer on the web one in particular.

00:46:26.760 --> 00:46:27.660
Yeah.

00:46:27.660 --> 00:46:29.340
I can imagine how the textual one works.

00:46:29.940 --> 00:46:33.700
What's the runtime look for the web?

00:46:33.700 --> 00:46:35.660
Is that PyScript or is that PyOxid?

00:46:35.660 --> 00:46:37.980
It is PyScript.

00:46:37.980 --> 00:46:38.200
Yeah.

00:46:38.240 --> 00:46:41.440
So it's a briefcase, which I guess we'll get to in a moment.

00:46:41.440 --> 00:46:43.460
But briefcase has the ability to target a web deployment.

00:46:43.460 --> 00:46:50.260
It generates a HTML page that injects a load this wheel.

00:46:50.260 --> 00:46:52.080
And this wheel is your app.

00:46:52.080 --> 00:46:57.940
And it's a, but it's a Python wheel that just contains your code for your running app.

00:46:58.500 --> 00:47:00.660
And yeah, so it's, but it's PyScript that's making that work.

00:47:00.660 --> 00:47:01.820
Yeah.

00:47:01.820 --> 00:47:03.220
PyScript is neat.

00:47:03.220 --> 00:47:04.480
Definitely neat.

00:47:04.480 --> 00:47:07.220
Just the fact that it's opening up these types of things.

00:47:07.220 --> 00:47:08.160
So briefcase.

00:47:08.160 --> 00:47:08.420
Yeah.

00:47:08.420 --> 00:47:10.100
Let's dive a little more into that one.

00:47:10.100 --> 00:47:11.200
Yeah.

00:47:11.200 --> 00:47:14.080
So briefcase is then sort of the other part of the story.

00:47:14.080 --> 00:47:14.940
It's, you know, I've written this out.

00:47:14.940 --> 00:47:14.940
All right.

00:47:14.940 --> 00:47:18.920
Togo gives you the runtime, but you're still in the terminal to launch it or with virtual environments.

00:47:18.920 --> 00:47:19.540
Yeah, exactly.

00:47:19.540 --> 00:47:19.980
All that kind of business, right?

00:47:19.980 --> 00:47:20.360
Yeah.

00:47:20.360 --> 00:47:20.540
Okay.

00:47:20.540 --> 00:47:21.120
Yeah.

00:47:21.120 --> 00:47:27.480
So briefcase is, the scary thing is at the end of the day, briefcase is really just kind of three templates in a trench coat.

00:47:27.900 --> 00:47:31.680
There's not a lot of, like, there's not a lot that it's doing beyond that.

00:47:31.680 --> 00:47:48.380
And also encoding all of the annoying details that are embedded 15 pages deep in Microsoft's how to write an app, you know, documentation around code signing and packaging and building an installer and all of that kind of stuff.

00:47:48.380 --> 00:47:58.880
So on the theory that 99% of Python users have code that runs as Python minus M my app, make that be a macOS app.

00:47:58.880 --> 00:48:00.600
And that's what briefcase does.

00:48:00.600 --> 00:48:06.160
It goes and says, okay, how do I turn this into an icon on my desktop that I can double click and the app will just start.

00:48:06.160 --> 00:48:09.340
And it will include an embedded version of Python.

00:48:09.340 --> 00:48:12.740
So I don't need to tell my end user how to install Python.

00:48:12.740 --> 00:48:17.320
It will be signed and notarized in accordance with Apple's latest specifications.

00:48:17.320 --> 00:48:28.900
It might come inside a DMG because I need to be able to distribute it along with a readme or it might come as a .pkg file because I actually need, like, in the case of non-GUI apps, you actually, like, you want to be able to put something on your path.

00:48:28.900 --> 00:48:33.120
And you have to have, like, a post-install script and pkgs and you do that on macOS.

00:48:33.120 --> 00:48:39.160
Similarly, on Windows, it produces an MSI and it drops a Python embedded and all that kind of stuff.

00:48:39.160 --> 00:48:40.380
Make sure your dependencies are there.

00:48:40.380 --> 00:48:52.040
On macOS, it makes sure that if you install, if I'm building it on ARM machine, the app will still run on x86 because it'll install both versions of both the x86 and the ARM binaries and merge them where they're necessary and do all that kind of stuff.

00:48:52.040 --> 00:48:54.380
So it's all the little fiddly details.

00:48:54.500 --> 00:49:01.900
So it's essentially just running a bunch of command line, like, everything Briefcase does is just a command line tool or rolling out a template.

00:49:01.900 --> 00:49:07.600
If you turn up the verbosity, it will tell you in the prompt, like, this is what I'm running.

00:49:07.600 --> 00:49:14.060
I'm running this command of dmgutil and I'm running this command of the notarize, the notary tool and so on and so on.

00:49:14.060 --> 00:49:15.780
But you don't have to worry about that.

00:49:15.780 --> 00:49:17.760
Like, it's just going to, this is what will encode.

00:49:17.760 --> 00:49:31.100
It'll do it all for you and just spit out either a dmg, a .zip, an MSI, IPA files on iOS, APK files or AAB files on Android, whatever the native platform is.

00:49:31.100 --> 00:49:35.940
And then on Linux, one of the things we've added more recently, we can do flat packs.

00:49:35.940 --> 00:49:47.080
We can do Debian, RPM, PKG files for Arch and Manjuro, like, all of the common packaging formats we try to cover.

00:49:47.080 --> 00:49:50.080
I'm not the only one that I can think of that's notable that we don't cover at the moment.

00:49:50.080 --> 00:49:58.060
We don't do NCS installers on Windows and we don't do snap packages on Linux.

00:49:58.060 --> 00:50:04.020
Not because we can't, just because I've only got two arms and there's a limit to, you know, how much I can practically do.

00:50:04.020 --> 00:50:07.740
If someone wants those, I can point you at the code and show you what you're going to do.

00:50:07.740 --> 00:50:15.240
And like, it's a moderately, if you know the commands you need to run to make a thing happen, I can show you how to plug that into Briefcase.

00:50:15.240 --> 00:50:18.320
And like, Briefcase's infrastructure is designed to be pluggable.

00:50:18.320 --> 00:50:20.320
So it doesn't even need to be in Briefcase.

00:50:20.320 --> 00:50:23.340
You can, again, do it as an external plugin and have it plug into Briefcase.

00:50:23.340 --> 00:50:27.320
So two things I want to ask you about here.

00:50:27.320 --> 00:50:29.860
One, notarization and signing.

00:50:30.260 --> 00:50:36.700
I remember how long ago I built C++ desktop apps and .NET desktop apps.

00:50:36.700 --> 00:50:41.140
And you could just compile them and give them to somebody and let them run it.

00:50:41.140 --> 00:50:44.020
And those sweet days are long gone.

00:50:44.020 --> 00:50:46.480
You know, they'll get flagged with big warnings.

00:50:46.480 --> 00:50:51.060
Like, this looks like a virus because it didn't go through our digital signature system.

00:50:51.060 --> 00:50:53.860
And what a frustrating thing.

00:50:53.860 --> 00:50:55.380
So this has support for that.

00:50:56.200 --> 00:50:56.660
It does.

00:50:56.660 --> 00:50:56.980
Yeah.

00:50:56.980 --> 00:50:58.420
Yeah.

00:50:58.420 --> 00:51:00.660
It turns out there are bad people on the internet.

00:51:00.660 --> 00:51:03.360
And they're willing to do bad things.

00:51:03.360 --> 00:51:04.100
Who knew?

00:51:04.100 --> 00:51:14.640
So yeah, macOS has a bunch of processes for signing all of the binaries in an application and then stamping a, what's called a notarization certificate to the installer to say,

00:51:14.640 --> 00:51:20.740
this is a package in a format that hasn't been modified that I am willing to verify as me as a person.

00:51:20.740 --> 00:51:24.760
This is what the version of the package looks like when it's correctly installed.

00:51:24.760 --> 00:51:26.640
And then if I...

00:51:26.640 --> 00:51:35.800
Sorry, probably in practice, if you want to distribute stuff to Mac and Windows, you probably need to create a developer account and sign these things.

00:51:35.800 --> 00:51:40.840
Unless your users are willing to run with the big scary, this looks unsigned and untrusted.

00:51:40.840 --> 00:51:42.200
We've moved it to the trash.

00:51:42.200 --> 00:51:43.540
Or you can go in there and run it.

00:51:43.620 --> 00:51:43.920
You know what I mean?

00:51:43.920 --> 00:51:44.280
Yeah.

00:51:44.280 --> 00:51:47.200
Like on macOS, it literally has to be at this point.

00:51:47.200 --> 00:51:55.320
You actually can't get away with not getting a developer certificate because the secure stuff on the M1 ship literally will not run.

00:51:55.320 --> 00:51:59.420
You can do cheap and nasty ad hoc signing, which means it will run on my machine.

00:51:59.920 --> 00:52:08.800
But if you want to give it to anybody else, it is now at the point where you've got to go into the settings, explicitly say, I'm willing to trust content that comes from an unknown provider.

00:52:08.800 --> 00:52:15.100
Start the app by pressing option and double click, selecting the option of I'm willing to accept this.

00:52:15.100 --> 00:52:19.220
Like it can be done, but it's like nobody is actually ever going to do that.

00:52:19.880 --> 00:52:26.040
So you basically, yeah, you've got to sign up for a $99 a year developer account and then go through the signing process.

00:52:26.040 --> 00:52:28.540
And signing is a non-trivial activity.

00:52:28.540 --> 00:52:29.600
It is difficult.

00:52:29.600 --> 00:52:31.980
There are like you've got to do things in the right order.

00:52:32.460 --> 00:52:40.440
And there is like even you have to submit the app in a zip format, but you can't just use pkzip or your standard command line zip.

00:52:40.440 --> 00:52:51.280
You've got to use ditto, which is Mac's version of zip, because otherwise file system properties can end up being corrupted because the UTF-18 coding won't go quite reversible in the way.

00:52:51.280 --> 00:52:53.520
It is a nightmare.

00:52:53.520 --> 00:52:55.500
Briefcase solves all of those problems for you.

00:52:55.500 --> 00:53:00.940
It should be as straightforward as just package this thing and sign and it works.

00:53:01.760 --> 00:53:04.360
Similarly, it's not quite as bad on Windows.

00:53:04.360 --> 00:53:08.060
Like Windows will let you install an unsigned binary.

00:53:08.060 --> 00:53:11.020
It just comes up with sort of the, this comes from an unknown developer.

00:53:11.020 --> 00:53:12.380
Are you sure you want to do this?

00:53:12.380 --> 00:53:13.180
And you say, okay.

00:53:13.180 --> 00:53:21.860
But realistically, like people's willingness to click the, this looks like it might be insecure is low and decreasing.

00:53:21.860 --> 00:53:26.100
And so, yeah, you've just got to go get a certificate, sign the app, validate that it's you.

00:53:26.100 --> 00:53:29.800
It's kind of, it's the price of doing app business at this point.

00:53:29.800 --> 00:53:30.520
Yeah.

00:53:30.600 --> 00:53:35.540
I guess it's sort of the equivalent of you have to have SSL to run a website.

00:53:35.540 --> 00:53:36.520
However.

00:53:36.520 --> 00:53:37.000
Exactly.

00:53:37.000 --> 00:53:38.280
It is almost exactly that.

00:53:38.280 --> 00:53:38.940
Yes.

00:53:38.940 --> 00:53:40.260
But we're missing Let's Encrypt.

00:53:40.260 --> 00:53:41.340
We're missing Let's Encrypt.

00:53:41.340 --> 00:53:41.700
Yes.

00:53:41.700 --> 00:53:42.220
That's that part.

00:53:42.260 --> 00:53:42.440
Yeah.

00:53:42.440 --> 00:53:54.500
From the Windows point of view, there is absolutely a window of opportunity to do a Let's Encrypt because Windows doesn't specify who you've got to get your certificate from.

00:53:54.500 --> 00:53:56.980
It just has to be signed by a root certificate that they honor.

00:53:57.420 --> 00:54:00.960
So, like, essentially the instructions in briefcase kind of go get a certificate.

00:54:00.960 --> 00:54:01.720
Where do you get it from?

00:54:01.720 --> 00:54:04.140
You know, here are some options.

00:54:04.140 --> 00:54:04.740
Go have fun.

00:54:05.240 --> 00:54:09.760
So, there is absolutely an opportunity for someone to do a Let's Encrypt here for app signing.

00:54:10.400 --> 00:54:17.940
Unfortunately for Apple, that doesn't apply because Apple does insist that a certificate needs to be issued by them, signed by them, so that they can revoke it.

00:54:18.120 --> 00:54:22.940
And, you know, maybe the EU changes around app distribution will relax that somewhat.

00:54:22.940 --> 00:54:25.500
But at least for the moment, you've got to go through Apple.

00:54:25.500 --> 00:54:25.940
Yeah.

00:54:25.940 --> 00:54:29.340
As salty as I am at the EU about the cookie warnings.

00:54:29.340 --> 00:54:31.060
Yeah.

00:54:31.060 --> 00:54:31.860
Yeah.

00:54:31.860 --> 00:54:37.020
But I do have hope that they can, like, bring some reason to some of the other App Store type behaviors.

00:54:37.020 --> 00:54:38.180
It would certainly be.

00:54:38.180 --> 00:54:39.120
I would not.

00:54:39.120 --> 00:54:40.260
I welcome that development.

00:54:40.260 --> 00:54:42.460
I am waiting to see what happens.

00:54:42.460 --> 00:54:44.700
I had a lot of hope that the App Store stuff.

00:54:45.200 --> 00:54:51.140
Yeah, I had a lot of hope that opening the App Store thing would provide a way to make it easier for Beware to distribute apps.

00:54:51.140 --> 00:54:54.420
But in practice, it doesn't look like that's actually going to happen.

00:54:54.420 --> 00:54:55.720
So, yeah.

00:54:55.720 --> 00:54:57.100
No, it's, yeah.

00:54:57.100 --> 00:54:58.380
Nice try.

00:54:58.380 --> 00:55:03.020
But they squeeze through another crack, basically.

00:55:03.020 --> 00:55:04.520
It is what it is.

00:55:04.520 --> 00:55:05.780
It is what it is.

00:55:05.780 --> 00:55:08.660
The gatekeeper stuff drives me crazy.

00:55:08.660 --> 00:55:11.820
I've had so much trouble getting my mobile apps in the App Store.

00:55:11.820 --> 00:55:14.520
Not for reasons technical, just for reasons of.

00:55:15.100 --> 00:55:15.400
Yeah.

00:55:15.400 --> 00:55:17.880
And I guess that's the thing.

00:55:17.880 --> 00:55:33.660
It's like, I will, to a limited extent, defend the, not so much the gatekeeping aspect of it, but the fact that there is a process involved to protect against completely arbitrary content.

00:55:34.620 --> 00:55:36.240
That side of it is useful.

00:55:37.540 --> 00:55:44.080
But the fact that there is, like, it is that locked down and only from Apple is the part where it becomes a little bit onerous.

00:55:44.080 --> 00:55:47.440
And that there's no competition to make Apple work better, I guess, is the real thing.

00:55:47.440 --> 00:55:47.600
Yeah, yeah.

00:55:47.600 --> 00:55:48.200
And the rent.

00:55:48.200 --> 00:55:49.420
You can't go to a competition.

00:55:49.420 --> 00:55:49.960
Yeah.

00:55:49.960 --> 00:55:51.480
And the rent is a, yeah.

00:55:52.100 --> 00:55:52.720
Yeah, yeah, yeah.

00:55:52.720 --> 00:55:52.880
Yeah.

00:55:52.880 --> 00:55:53.560
From my app there.

00:55:53.560 --> 00:55:56.780
You don't have in-app purchasing.

00:55:56.780 --> 00:55:58.420
Well, I don't want to sell anything in my app.

00:55:58.420 --> 00:56:00.740
I just want to let people view the stuff that we already got online.

00:56:00.740 --> 00:56:02.620
Well, you're going to have to add it.

00:56:03.000 --> 00:56:12.200
So, weeks and weeks of paying developers and stuff to build it just so they can have their few bucks, you know what I mean?

00:56:12.200 --> 00:56:15.180
And it's just like, you have no idea how much pain this is.

00:56:15.180 --> 00:56:16.200
Yeah.

00:56:16.200 --> 00:56:23.980
And, like, I guess I could almost, I don't like it, but I could almost grant them that, you know, the golden rule of, you know, has the gold makes the rules.

00:56:23.980 --> 00:56:25.580
But it's their store.

00:56:25.580 --> 00:56:26.720
They get to decide what's in there.

00:56:26.720 --> 00:56:28.340
But I don't have the option of another store.

00:56:29.180 --> 00:56:34.540
And in particular, the review process is so inscrutable.

00:56:34.540 --> 00:56:37.880
Like, Google is no better in this regard.

00:56:37.880 --> 00:56:41.080
If something goes wrong with your Google application, good luck with that.

00:56:41.080 --> 00:56:48.600
Like, you don't, they don't, for all the money they're taking, they're not providing good customer service.

00:56:48.600 --> 00:56:50.800
They're providing no as a customer service.

00:56:50.800 --> 00:56:51.840
Exactly.

00:56:51.840 --> 00:56:53.140
Yeah, they're both bad.

00:56:53.140 --> 00:56:54.220
I'm not saying Google's good.

00:56:54.220 --> 00:56:55.140
They're both bad.

00:56:55.140 --> 00:56:55.300
Yeah.

00:56:55.300 --> 00:56:56.400
Okay.

00:56:57.440 --> 00:57:02.920
But for a briefcase here, we have, we have the targets that I would expect, Linux, Mac, Windows.

00:57:02.920 --> 00:57:04.060
Yes.

00:57:04.060 --> 00:57:08.520
But iPad, iPhone, Android, tell us about that.

00:57:08.520 --> 00:57:09.960
Even Watch.

00:57:09.960 --> 00:57:14.700
So, we, yeah, so we don't, we don't actually have it working for Watch OS.

00:57:14.700 --> 00:57:19.440
I have a proof of, yeah, I have a proof of concept that it can work on Apple TV.

00:57:19.440 --> 00:57:21.880
I have written a Python application for Apple TV.

00:57:21.880 --> 00:57:23.200
Web deployment.

00:57:23.200 --> 00:57:24.800
Actually, that's that website's out of date.

00:57:24.800 --> 00:57:25.580
I should need to update that.

00:57:25.660 --> 00:57:26.720
We do have web deployments.

00:57:26.720 --> 00:57:28.840
Put that in the proper bullet list, right?

00:57:28.840 --> 00:57:29.160
Yes.

00:57:29.160 --> 00:57:30.520
Yes, it should be in the proper bullet list.

00:57:30.520 --> 00:57:42.140
So, yeah, the, the, the, the submitting to an app store, there are iOS apps, there are Android apps in the Apple and Google app stores that are written with BWare.

00:57:42.920 --> 00:57:44.660
So, you are producing a binary.

00:57:44.660 --> 00:57:48.340
It is signed and validated and then sent to Apple and Apple says, yes, that's fine.

00:57:48.340 --> 00:57:49.560
And Google says, yes, that's fine.

00:57:49.560 --> 00:57:51.000
And it's available for purchase.

00:57:51.000 --> 00:57:51.760
So, yeah.

00:57:51.760 --> 00:57:52.040
Awesome.

00:57:52.040 --> 00:57:56.420
So, what do you get, like an APK for Android and what is the AP for?

00:57:56.420 --> 00:57:57.220
It's an IPA.

00:57:57.220 --> 00:57:58.080
Yeah, it's an IPA.

00:57:58.080 --> 00:57:59.620
But you don't ever see it.

00:57:59.620 --> 00:58:03.580
Like, you kind of, you basically have to, like, for all practical purposes, you have to submit it through Xcode.

00:58:03.760 --> 00:58:09.400
That might be something we can resolve, but I, like, haven't, they don't make it easy to find out how to not use Xcode to do it.

00:58:09.400 --> 00:58:12.080
No, I think you're probably, you're probably committed.

00:58:12.080 --> 00:58:17.620
Even for my Flutter-based app, I've got to go do a build and an app store submission through Xcode.

00:58:17.620 --> 00:58:17.740
Yeah.

00:58:17.740 --> 00:58:18.880
Yeah.

00:58:18.880 --> 00:58:19.560
Which is always fun.

00:58:19.560 --> 00:58:22.000
The tools are there, but yeah.

00:58:22.000 --> 00:58:24.840
But yeah, so you get an AAB for Android.

00:58:24.840 --> 00:58:29.620
You get an, effectively, an IPA, but an Xcode project you can submit for iPhone.

00:58:30.480 --> 00:58:37.240
For web, you get a tarball that is basically upload to your web provider of choice, and it will work.

00:58:37.240 --> 00:58:43.660
And, like, it would end up being similar for Apple TV or WatchOS or Wear OS eventually.

00:58:43.660 --> 00:58:43.900
Awesome.

00:58:43.900 --> 00:58:44.240
So.

00:58:44.240 --> 00:58:50.240
Well, that's really great that you've been making so much progress on this.

00:58:50.240 --> 00:58:54.920
And is it Steven, the other guy you're working with?

00:58:54.920 --> 00:58:55.360
Remind me.

00:58:55.360 --> 00:58:56.540
Malcolm.

00:58:56.540 --> 00:58:58.040
I'm sorry, Malcolm.

00:58:58.040 --> 00:59:00.140
You and Malcolm have been making so much progress.

00:59:00.240 --> 00:59:01.240
That's really, really great.

00:59:01.240 --> 00:59:05.860
And I think only good things are going to come from having the backing of Anaconda.

00:59:05.860 --> 00:59:06.580
So.

00:59:06.580 --> 00:59:07.100
Yeah.

00:59:07.100 --> 00:59:08.240
We've got just a couple of minutes left.

00:59:08.240 --> 00:59:11.740
Like, what do you want to tell people about this project, these projects, how they should

00:59:11.740 --> 00:59:15.340
adopt them, where they're ready for use, and so on.

00:59:15.340 --> 00:59:15.800
Things like that.

00:59:15.800 --> 00:59:19.120
I guess the quick thing I'd say is that we're not done yet.

00:59:19.120 --> 00:59:20.080
There's still more to come.

00:59:21.080 --> 00:59:29.260
Just a week and change ago, PIPI officially started accepting iOS and Android wheels.

00:59:29.260 --> 00:59:31.480
So you can upload an iOS and Android wheel.

00:59:31.480 --> 00:59:36.140
There aren't any on there yet that I'm aware of, but I'm actively working on that just so

00:59:36.140 --> 00:59:37.840
I can prove, hey, look, yes, there's one over there.

00:59:37.840 --> 00:59:38.200
Look at it.

00:59:39.420 --> 00:59:43.760
But part of the reason there's not one there yet is that the tooling to build iOS and Android

00:59:43.760 --> 00:59:44.980
wheels is not quite there.

00:59:44.980 --> 00:59:46.980
And that's what I'm actively working on right now.

00:59:46.980 --> 00:59:52.200
I would be deeply surprised if by the end of this year there aren't multiple high-profile

00:59:52.200 --> 00:59:52.940
projects that have.

00:59:53.020 --> 00:59:59.240
Like, I have the patches for Pillow to, like, literally produce iOS wheels as part of their

00:59:59.240 --> 01:00:00.140
normal release process.

01:00:00.140 --> 01:00:01.020
They haven't accepted.

01:00:01.020 --> 01:00:02.340
They haven't even seen the PRs yet.

01:00:02.340 --> 01:00:05.140
But I'm certainly hoping to work with them.

01:00:05.140 --> 01:00:05.540
Yeah.

01:00:05.540 --> 01:00:06.480
I mean, they know it's coming.

01:00:06.480 --> 01:00:07.340
Hugo knows it's coming.

01:00:07.340 --> 01:00:14.020
So there is a lot of work still to do in terms of getting that patch accepted.

01:00:14.020 --> 01:00:16.280
But at least I know it can be done.

01:00:16.280 --> 01:00:21.720
And more importantly, things like CI build wheels, like the infrastructure for putting a build

01:00:21.720 --> 01:00:26.100
all these wheels as part of CI is something where I have the patch and I'm, like, this

01:00:26.100 --> 01:00:30.180
close to being able to submit a pull request to CI build wheel to say, here's the back end

01:00:30.180 --> 01:00:31.460
to let you generate iOS wheels.

01:00:31.460 --> 01:00:34.140
Similarly, we've got to do all that work for Android as well.

01:00:34.140 --> 01:00:35.960
So there is still a lot of work to come.

01:00:35.960 --> 01:00:42.220
My hope is that sort of by the end of this year, says he, being very hopeful, we'll be in

01:00:42.220 --> 01:00:47.020
a position where, like, anything you can do on a desktop platform, you can basically do

01:00:47.020 --> 01:00:51.640
on iOS and Android as well, with the caveat that there might be, if there's C code

01:00:51.640 --> 01:00:56.440
involved, you might need to actually, like, work out how to compile this thing for iOS

01:00:56.440 --> 01:00:56.900
and Android.

01:00:56.900 --> 01:01:00.140
For a lot of simple projects, it's literally there's nothing you've got to do.

01:01:00.140 --> 01:01:03.160
You've just cranked the handle and make the compiler do its thing.

01:01:03.160 --> 01:01:03.920
Yeah.

01:01:03.920 --> 01:01:05.100
Especially if you have Python.

01:01:05.100 --> 01:01:06.880
Yeah, exactly.

01:01:06.880 --> 01:01:10.680
The other part that I'm sort of playing around with this year as a sort of a background project

01:01:10.680 --> 01:01:16.800
is doing for Enscripten what I did last year, or Malcolm and I did last year for iOS and

01:01:16.800 --> 01:01:19.620
Android, which is get Enscripten up to tier three support.

01:01:19.620 --> 01:01:23.980
So there will be a PEP and official supported platform.

01:01:23.980 --> 01:01:29.900
Like, Enscripten will be an officially supported platform in CPython in the same way that iOS

01:01:29.900 --> 01:01:30.460
and Android are.

01:01:31.020 --> 01:01:36.860
I'm mostly shepherding that as sort of a member of the CPython core team, and Hood

01:01:36.860 --> 01:01:39.400
Chatham is actually doing most of the heavy lifting on that.

01:01:39.400 --> 01:01:44.280
He's a Pydyed maintainer and is involved with PyScript as well to a lesser extent.

01:01:44.280 --> 01:01:49.540
And yeah, so he is working on the patches for that, and I'm kind of shepherding those patches

01:01:49.540 --> 01:01:50.200
into core.

01:01:50.920 --> 01:01:55.480
We are about to stand up and build bot to actually make the kind of the, make sure every pull

01:01:55.480 --> 01:01:58.660
request is validated to make sure it still works on Enscripten, essentially, which is one of

01:01:58.660 --> 01:02:01.800
the big sort of milestones for official platform support.

01:02:01.800 --> 01:02:03.220
Yeah, that's super neat.

01:02:03.220 --> 01:02:05.320
What about CI for people?

01:02:05.320 --> 01:02:05.980
Yeah.

01:02:05.980 --> 01:02:10.360
What about CI for people who want to build wheels for iOS and Android?

01:02:10.360 --> 01:02:13.080
That's essentially where CI build wall comes in.

01:02:13.080 --> 01:02:14.240
So you can do it right now.

01:02:14.240 --> 01:02:21.520
Every time we make a change to Toga, we run a full test suite on iOS, on Android, on macOS,

01:02:21.520 --> 01:02:22.840
and all the other desktop platforms.

01:02:22.840 --> 01:02:25.080
You can use like GitHub Action CI.

01:02:25.080 --> 01:02:29.480
We'll let you start an iPhone simulator and run the tests on that iPhone simulator.

01:02:29.480 --> 01:02:33.080
You can start an Android simulator, and it will run a simulator on those platforms.

01:02:33.080 --> 01:02:39.460
It's like it takes three minutes to start the simulator, but that's just the price of doing

01:02:39.460 --> 01:02:41.100
business for iPhone, basically.

01:02:41.540 --> 01:02:45.680
Yeah, I guess they probably already have CI for iOS and Android, because there's probably

01:02:45.680 --> 01:02:47.440
a ton of mobile projects on there.

01:02:47.440 --> 01:02:50.320
It just, it's kind of unusual to combine it with Python, right?

01:02:50.320 --> 01:02:51.660
Yes, absolutely.

01:02:51.660 --> 01:02:53.780
And so like, you can do it.

01:02:53.780 --> 01:02:55.380
It can, like, you can run those tests.

01:02:55.380 --> 01:02:59.280
There are probably some things that could be done at an institutional level at GitHub to

01:02:59.280 --> 01:03:00.840
make those tests run faster.

01:03:00.840 --> 01:03:06.560
But that's a, you know, now I've just got to convince Microsoft to implement an entirely

01:03:06.560 --> 01:03:08.700
new backend for GitHub Actions.

01:03:09.040 --> 01:03:11.320
And they don't support like Windows on ARM yet.

01:03:11.320 --> 01:03:12.320
So I'm not holding their breath.

01:03:12.320 --> 01:03:13.140
They're going to support iOS.

01:03:13.140 --> 01:03:15.280
Yeah.

01:03:15.280 --> 01:03:16.180
Yeah.

01:03:16.180 --> 01:03:16.800
I hear that.

01:03:16.800 --> 01:03:20.200
One final forward looking question, I suppose.

01:03:20.200 --> 01:03:24.540
What do you see support for MScript in giving us?

01:03:24.540 --> 01:03:29.180
You know, for example, like having the JavaScript stuff, you'd see like, okay, well, great.

01:03:29.180 --> 01:03:30.000
I can run in a browser.

01:03:30.180 --> 01:03:34.360
But well, then Node comes along and now I can run servers on it or I can distribute or there's

01:03:34.360 --> 01:03:34.540
tool.

01:03:34.540 --> 01:03:40.740
There's these sort of ways in which these environments grow unexpectedly, at least for most people,

01:03:40.740 --> 01:03:41.180
I think.

01:03:41.180 --> 01:03:43.460
And how do you think MScript in my...

01:03:43.460 --> 01:03:53.820
So my hope is that what we'll end up seeing is the analog of React and Vue, but for Python.

01:03:53.820 --> 01:04:00.000
So you can right now, or you have been able to write, you know, a Django server-side website,

01:04:00.000 --> 01:04:02.320
pick any other GUI for any other web framework you want.

01:04:02.800 --> 01:04:05.980
You can write your server-side code, excuse me, you write your server-side code completely

01:04:05.980 --> 01:04:06.380
in Python.

01:04:06.380 --> 01:04:07.000
It's great.

01:04:07.000 --> 01:04:13.820
But then you've got to push your code to the front end and you have to write JavaScript on

01:04:13.820 --> 01:04:14.260
the front end.

01:04:14.260 --> 01:04:18.000
And so that's kind of essentially where Node came from is realizing that we've got to write

01:04:18.000 --> 01:04:20.800
this code, like we've got validation code, you've got to run it on the client and run it

01:04:20.800 --> 01:04:21.220
on the server.

01:04:21.220 --> 01:04:26.280
So I can't put Python in the client, so I might as well bring JavaScript back to the server.

01:04:26.280 --> 01:04:27.280
And so...

01:04:27.280 --> 01:04:33.280
And Scripten lets us get Python in...

01:04:33.280 --> 01:04:38.220
...rich Python-first GUI framework.

01:04:38.220 --> 01:04:45.220
...and we're gonna do the same thing.

01:04:45.220 --> 01:04:45.220
So...

01:04:45.220 --> 01:04:47.220
...and we're gonna do the same thing.

01:04:47.220 --> 01:04:48.220
It's not a problem.

01:04:48.220 --> 01:04:49.220
We're gonna do the same thing.

01:04:49.220 --> 01:04:49.220
So...

01:04:49.220 --> 01:04:50.220
We're gonna do the same thing.

01:04:50.220 --> 01:04:51.220
So...

01:04:51.220 --> 01:04:52.220
...and we're gonna do the same thing.

01:04:52.220 --> 01:04:53.220
So, let's do the same thing.

01:04:53.220 --> 01:04:54.220
So, let's do the same thing.

01:04:54.220 --> 01:04:55.220
And we're gonna do the same thing.

01:04:55.220 --> 01:04:56.220
So, let's do the same thing.

01:04:56.220 --> 01:04:57.220
So, let's do the same thing.

01:04:57.220 --> 01:04:59.220
So, let's do the same thing.

01:04:59.220 --> 01:05:01.220
So, let's do the same thing.

01:05:01.220 --> 01:05:03.220
So, let's do the same thing.

01:05:03.220 --> 01:05:05.220
So, let's do the same thing.

01:05:05.220 --> 01:05:06.220
So, let's do the same thing.

01:05:06.220 --> 01:05:07.220
So, let's do the same thing.

01:05:07.220 --> 01:05:08.220
Oh!

01:05:08.220 --> 01:05:23.220
We lost Russell.

01:05:23.220 --> 01:05:27.220
Well, that's probably a good place to call it, folks.

01:05:27.220 --> 01:05:28.220
I'll see if he comes back, though,

01:05:28.220 --> 01:05:29.220
because I want to let him...

01:05:29.220 --> 01:05:31.220
Let him say goodbye.

01:05:31.220 --> 01:05:34.220
I'll see.

01:05:34.220 --> 01:05:35.220
Give him a moment.

01:05:35.220 --> 01:05:37.220
Thanks for all the questions in the chat and stuff.

01:05:37.220 --> 01:05:38.220
That was great.

01:05:38.220 --> 01:05:39.220
Thank you.

01:05:39.220 --> 01:05:40.220
Thank you.

01:05:40.220 --> 01:05:41.220
Thank you.

01:05:41.220 --> 01:05:41.220
Thank you.

01:05:41.220 --> 01:05:41.220
Thank you.

01:05:41.220 --> 01:05:41.220
Thank you.

01:05:41.220 --> 01:05:42.220
Thank you.

01:05:42.220 --> 01:05:42.220
Thank you.

01:05:42.220 --> 01:05:43.220
Thank you.

01:05:43.220 --> 01:05:44.220
Thank you.

01:05:44.220 --> 01:05:44.220
Thank you.

01:05:44.220 --> 01:06:14.200
Thank you.

01:06:14.200 --> 01:06:27.500
All right, folks.

01:06:27.500 --> 01:06:31.660
I'm going to say thanks to Russell for being on the show,

01:06:31.660 --> 01:06:32.860
and thank you all for listening.

01:06:32.860 --> 01:06:33.660
Talk to you all today.

01:06:33.660 --> 01:06:34.280
Bye.

01:06:34.280 --> 01:06:35.280
Bye.

01:06:35.280 --> 01:07:05.260
Thank you.

