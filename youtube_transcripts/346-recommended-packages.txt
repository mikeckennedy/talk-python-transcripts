00:00:00 - Antonio, welcome to Talk Python To Me.

00:00:04 - Hey, Michael, thank you for having me.

00:00:07 - It's fantastic to have you here.

00:00:09 You've done some really cool work to highlight some of the guests and some of the things that they've covered.

00:00:15 And so I feel like this is gonna be a very meta episode where we reflect back on what has come before and what people have recommended.

00:00:25 And you know, we're coming up, it's not quite December yet, but we're coming up on the end of 2021.

00:00:30 And so maybe a look back as in order.

00:00:34 - Yeah, I mean, I think from my point of view, I think it's a way to celebrate the people and celebrate those small packages people are highlighting in there of each of the podcasts.

00:00:47 I think it's lovely.

00:00:48 I think they deserve to have a place somewhere where everyone can contribute and you can go back to history and remember all these two point to three point, and how things have been evolving.

00:01:02 It's just amazing, really.

00:01:03 - Yeah, I agree, thank you.

00:01:06 People have asked like, hey, is there a way I can see answers to those last couple of questions at the end of the show?

00:01:12 Or I ask people for a notable PyPI package or what editor they're using.

00:01:16 And it'd be interesting to see, especially in the editor changing over time, stuff like that.

00:01:23 but at least on the notable PyPI package, you've put together a really cool GitHub repository highlighting at least going back through 2021, mostly I would say, what people have covered.

00:01:35 So during this episode, we're gonna dive into and discuss the highlights of the notable packages that the other guests have put out there.

00:01:43 So that's gonna be great.

00:01:44 Yeah, thank you.

00:01:45 That's awesome. - Great.

00:01:46 - All right, before we get into that though, tell folks how you got into programming in Python.

00:01:51 - Okay, so try to make it quickly.

00:01:54 You know, I grew up in a really humble family, but you know, we have tons of education and Legos, you know?

00:02:02 So see the first time I managed to have something I can really call it that was mine and could do it was when I entered to the university, I still have it, you know?

00:02:12 - Oh, what is that?

00:02:13 Is that a Texas instrument or an HP?

00:02:15 - No, that was HP, you know, at the time was super cool, you know?

00:02:20 So anyway, the point is I start at the university.

00:02:25 I study electronic engineer.

00:02:29 The person who is my wife now, she was studying civil engineer, okay?

00:02:34 So they used to use these old Casio calculators, you know, and they used to have a lot of programs running their libraries. - Yeah, they were not quite computers, but they were almost computers.

00:02:43 They were like, had like a little keyboard on them, right?

00:02:45 - Exactly, you can download the whole application.

00:02:47 And what happened is, you know, to calculate a bridge, a building or whatever, they used to use the calculation.

00:02:52 So I decided to try to get some love out of this and start translating all these programs from this Casio to this HP and helping the other guys in the university.

00:03:12 And that helped me a lot to get really deep into, right?

00:03:17 So straight away, I started programming Visual Basic.

00:03:24 Then in the same university, I have done assembly, C++, the whole thing.

00:03:33 So more recently, once I start after graduation, I have tons of experience with the languages like C# And recently, you know, with Python, you know, and tons others, you know, I just love this really.

00:03:55 It's just an amazing way of do end to end.

00:03:59 Whatever you want to do, you can make it super quickly.

00:04:03 - Yeah, it's all about empowering people to build things quick and get stuff accomplished, right?

00:04:08 Yeah, fantastic.

00:04:11 Boy, I can't even imagine programming from the old Casios to the old HPs, 'cause they were really interesting to program.

00:04:18 They were not like super high level.

00:04:20 - Exactly, but in terms of the for loops and the inputs and the logic, and once you get the stuff, then it's easy to switch between languages, right?

00:04:31 I mean, this has been amazing.

00:04:33 And what is funny is the way how I went through Python, there was around, I remember quite clear, I was finishing my master dissertation.

00:04:47 I was doing some deep learning work at the time.

00:04:54 Once I was finishing, one of my colleagues, he told me, hey, Google just released something called TensorFlow.

00:05:03 I was like, hm?

00:05:04 I went there, look at the web page.

00:05:08 I couldn't understand the syntax.

00:05:10 I was, what is this?

00:05:11 And my colleagues say, no, that's Python.

00:05:16 Yeah, but TensorFlow, the API is a bit different.

00:05:22 Anyway, so I remember two weeks after that, I took a flight from Moscow to Barcelona.

00:05:31 And on my flight, I installed the application to learn Python.

00:05:36 And that's it.

00:05:37 Once I landed, I could do the one-to-one translation.

00:05:42 So after that moment, that's it.

00:05:45 Everything, backhand, pushing also front end, gluing everything, beautiful integrations.

00:05:52 And what I think is the most important is the time you save.

00:05:56 That is just amazing.

00:05:58 If you want to get out an MVP, a Minimum Variable Product, if you want to prove value, I think Python is probably the best way how to do it.

00:06:08 In a couple of weeks or days, you can get out, something out and prove it.

00:06:13 It doesn't work, you know, just fail fast.

00:06:16 Don't wait one year, right, you know, to show the value.

00:06:19 Then, you know, you can improve as you go.

00:06:22 So it's just amazing.

00:06:24 - Yeah, fantastic.

00:06:25 I've been doing a ton of programming lately, rewriting some e-commerce stuff and other things.

00:06:30 And yeah, I've been enjoying being deep in the code lately and just appreciating how quick you can move.

00:06:35 That's fantastic.

00:06:37 All right, so are you ready to dive into these things?

00:06:39 There's no real format other than just the chronological order that it came out, right?

00:06:44 - Yeah, let's go.

00:06:45 - All right, well, maybe quickly introduce your GitHub repo that you created that obviously is gonna be in the show notes.

00:06:52 People, I'm sure you wouldn't mind if other people contributed content back to the repo, right?

00:06:59 - Absolutely, you know, I mean, if you, you know, I see what I'm doing right now is, you know, Usually I listen to the podcast when I'm commuting to work.

00:07:08 So I wait to listen to everything, to understand the context and everything, and then go there and have a brunch and do the modification for the new episode.

00:07:23 If you guys want to, feel free to do a fork at the new episode and contribute.

00:07:31 Stray away, I will be more than happy to get compliments.

00:07:36 And if anyone can help me to go back to the years, it's fine.

00:07:40 I promise I will put it, because I have--

00:07:43 most of the tools is automated.

00:07:46 It's all about going back and doing some cleanup.

00:07:51 So as you publish the text, the transcripts--

00:07:59 >>Victor: The transcripts, yeah, right.

00:08:00 So I'm trying to use a bit of NLP, you know, to try to get what's the package, you know.

00:08:06 Having this, that's really one of the reason why also I tried to do it, right?

00:08:09 Try to get it.

00:08:10 It's not that right, but you know, if anyone wants to, you know, do this cool stuff, why not?

00:08:15 - Yeah, sure.

00:08:15 The, actually the transcripts are all published to GitHub just as text files.

00:08:21 So if people want to go at them, they don't have to scrape the web or anything.

00:08:24 They can literally just fork it and pull them down.

00:08:27 Maybe I'll put that in the show notes as well.

00:08:29 - Yeah, so you created this repository and basically for each episode, at least the recent ones, you go through and you highlight what was the episode, when it was published, who was the guest, those kinds of things.

00:08:42 But the whole point is to show, well, what did that guest answer, those guests, if it's a set of panelists, what did they answer to the notable PyPI package that people should check out?

00:08:55 - Exactly.

00:08:56 - All right.

00:08:57 And then it's there, we try to keep a small description, I mean, and the links for those packages.

00:09:04 So great, so should we?

00:09:07 - Yeah, let's dive in.

00:09:08 So episode 342 was the recent one published.

00:09:13 We actually recorded some between, we've recorded them, but not released any episodes.

00:09:20 So as far as like what's on the podcast is concerned, 342 at the time of recording is the most recent one.

00:09:27 That was Guy Tallarico talking about Python in architecture and construction.

00:09:34 All right, what did he give a shout out to?

00:09:37 - You know, I mean, Pythonic, you know, I know this is, you know, it's quite famous, that package, you know, many people are using it.

00:09:45 I didn't know about it, you know, so it's pretty cool because, right, so you want to do an automation for something, you know, let's say that you have a small Arduino or Raspberry, you want to keep something in the house.

00:10:01 I don't know, if you detect something on your camera, go and turn on the lights or whatever, or if this is stock market and in this indicators, this is happening, go and sell and buy.

00:10:13 - Yeah.

00:10:14 - It's perfect, it's just amazing.

00:10:16 - Oh yeah, this is really neat.

00:10:19 So it's like a graphical designer for running code in a Docker container or on Raspberry Pi.

00:10:28 Yeah, or you run it there and then it writes.

00:10:32 Does it actually write Python code?

00:10:33 I don't know, I haven't tried it, but.

00:10:36 - I haven't tried, you know, because I was just listening yesterday to, what I will say that, you know, it seems to be quite visual, you drag and drop, seems to be that you drag and drop, make things, and then, you know, the whole logic may be there.

00:10:48 So we need to explore it, you know?

00:10:51 I think this can do pretty cool stuff at home, you know?

00:10:54 I don't know, like Halloween, you know?

00:10:56 Go to take the face, you know?

00:10:57 Have your whatever, your cronkas, or you know, just tuck in, you know, your...

00:11:02 - When the kid comes in a costume, see what kind of costume it is and pick the right video to play for them.

00:11:08 That'd be awesome. - Exactly.

00:11:09 - Yeah, so, "Pythonic, graphical Python programming for trading and automation." Yeah, I love it.

00:11:15 We always need more graphical type of stuff in Python.

00:11:19 I think of the places where it could get a little more strength and support and features, building UIs and doing things in a UI oriented way.

00:11:28 I'm all for it.

00:11:29 Right, yeah, that's an excellent one, okay.

00:11:33 - Yeah, exactly.

00:11:34 Then the previous one was Beck.

00:11:37 So he was telling us about the UMAP, Uniform Manifold Approximation and Projection.

00:11:46 In a nutshell is, whatever we have so much data in so many dimensions, you know.

00:11:53 Usually, you know, I work with real-time, multi-dimensional real-time data and whatever you need to analyze it, whatever you need to understand, you know, how they cluster together, this is beautiful.

00:12:05 You know what I mean?

00:12:06 Just load your data sets, run it, and then you can have a dimensional reduction on the data set and you can plot it and you can see things you were not able to see before on the data, you know, also plotting, you know you don't need to plot the, you know, whatever millions of records, you know, you will just do the dimension reduction and it's easy to understand a bit more about the data.

00:12:34 It's just beautiful.

00:12:35 - Yeah.

00:12:36 - Those are there on the data science, you know it's, I didn't know about this one either.

00:12:39 - Yeah. I didn't know about this one either.

00:12:40 This looks fantastic.

00:12:41 Uniform manifold approximations and projections.

00:12:46 Yeah. This is not a world that I actually get a chance to spend a whole lot of time in, but yeah, it sounds to me like a little bit of the world that you're working in though, this is the thing that's relevant, right?

00:12:58 - Exactly, yes.

00:12:59 - Yeah, cool.

00:13:01 So you get all these like nice visualizations of the data or like how it's grouped and a lot of nice visual aspects like color plus-

00:13:11 - Exactly, so basically you can get clusters out of your data and from out of there, then is when you start working with the data, right?

00:13:18 So I don't know, you want to detect something out of a lot of noise, so you can really, you know, separate noise from the data, for example.

00:13:27 Or if you want to classify a bunch of text, so you want to do something different, you know, and find other ways how to see these in a smaller data sets, in 2D data sets, you know, that's the way, it's just how I see it.

00:13:44 - Yeah, very cool.

00:13:45 And of course, this is a recommendation from Bex Toychev, who talked, he's all into Kaggle and Kaggle competitions.

00:13:54 He talked about 25 pandas functions you didn't know existed with probability 0.8, which I thought was a nice--

00:14:02 - He was, yeah, the title was really good, yes.

00:14:05 - The title was really good.

00:14:06 Yeah, so this is a perfect follow-on to like, you've got this data in a data frame and let's try to understand it a little bit, right?

00:14:14 - Cool, cool.

00:14:15 All right, number 340.

00:14:18 This was Anthony Shaw.

00:14:20 - Anthony, we love you, man.

00:14:22 - Yeah, man.

00:14:23 - Thank you so much for everything what you guys are doing.

00:14:25 It's just amazing.

00:14:26 - Yeah, he's doing tons of good work.

00:14:28 So what did he talk about?

00:14:30 - Great, so, you know, so he told us about this package, three packages.

00:14:36 So the first one was the Tortoise RM.

00:14:40 This one is an easy asyncio ORM.

00:14:45 I try, it's pretty, I mean, the API is really simple and clean, you know, and this is what stand out from the rest of the ORMs, which are currently starting to support asyncio.

00:15:02 So it is a good try, okay?

00:15:07 - Yeah, I think so too.

00:15:08 It's certainly simple to use, right?

00:15:10 It's if you've used Django ORM or if you've used SQLAlchemy, it should feel really natural to that.

00:15:18 And then whenever you do the work, I guess it's worth pointing out this looks like an active record design pattern ORM where you operate directly on the documents as opposed to a unit of work, which is SQLAlchemy where you like create a session, do a bunch of stuff and then save it.

00:15:35 So you would go, like if you created a tournament object, you could just say tournament.save, but because it's async first, you say await tournament.save.

00:15:44 If you wanna create one, you say await tournament.create and you pass the data or same thing for the queries and so on.

00:15:51 So if you're using any framework like FastAPI or Court to make Flask async or anything that's basically async first, right?

00:16:00 Async is almost entirely about scaling the time you wait, not trying to do stuff in parallel in Python for the moment at least.

00:16:09 In databases are where we wait, right?

00:16:11 We wait on databases all day.

00:16:12 That's like what a lot of apps just do.

00:16:15 - Exactly, I'm modding that example, you know, it's using SQLite.

00:16:19 So here you go, simple, clean, beautiful API, ready to go, you know, it's just, you just print it.

00:16:27 - Yeah, awesome.

00:16:28 So Anthony wasn't content to suggest just one, was he?

00:16:32 - No, just three of them.

00:16:34 Let's dive into the next two, but let's just probably quickly on top of this, why not to use the same idea and apply this for MongoDB?

00:16:43 Here you go.

00:16:44 So simple.

00:16:46 So this, I'm not sure how to pronounce Vinny.

00:16:50 - Vinny.

00:16:51 - Vinny, yeah.

00:16:52 - I think Vinny.

00:16:53 - Yeah, so that's something I will suggest to the people who are the owner of the repositories, try to put how they want us to...

00:17:05 How about this, a little play button just next to the name.

00:17:08 We just hit play and it's the creator of the project saying the name.

00:17:13 I think that would be great.

00:17:14 Because sometimes it's clear, but sometimes it's not clear what part should be an acronym and what part should be tried to say out.

00:17:24 Like, theoretically, this could be Bean IE.

00:17:27 And it's not, it's Beanie, I believe.

00:17:29 But you don't know that all the time if I look at it, right?

00:17:33 So have another play button.

00:17:34 Yes, I'm all for this.

00:17:35 - Exactly.

00:17:36 - I often criticize places saying, if you are anything to do with graphs, UI, whatever, you should have a picture on your site 'cause a lot of them don't.

00:17:46 And I think this is another good suggestion.

00:17:48 Let's have some.

00:17:49 - Yeah, the pictures guys, put something, please.

00:17:51 You know, it makes so visual.

00:17:53 And if you don't have the small logo, you know, I don't know, maybe a small screenshot of animation of how it works, it helps a lot, you know?

00:18:01 - Exactly.

00:18:02 - To have a good start.

00:18:03 - Tony out in the audience says, "I agree regarding the pronunciation." All right, we already got three votes for this idea.

00:18:08 I do think it helps that the icon is a hat, like the Beanie hat, so I think that's gonna help.

00:18:13 - So there will be a challenge for our GitHub team, let's see how quickly they can release such a small enhancement.

00:18:21 Let's see, let's give it a try.

00:18:22 - Yeah, so Beanie is an ODM, like an ORM, but when you don't have relations and you have documents, you change the R to a D.

00:18:29 It's an asynchronous Python ODM for MongoDB based on motor, which is MongoDB's async Python library and Pydantic.

00:18:39 So if you want to talk to MongoDB using async and await and you want your things you exchange with it to be Pydantic models, all of that sounds great to me.

00:18:48 - Beautiful.

00:18:50 - Yeah, so it looks really cool.

00:18:52 I'm using MongoDB of course for talk Python and Talk Python Training, all those things.

00:18:56 And I'm using Mongo engine.

00:18:58 I would certainly consider using this for it, but I'd already created it, you know, five years before it existed.

00:19:04 So that's one of the problems, right?

00:19:06 - Exactly, you know, I mean, but for someone who is starting, if Anthony is recommending it for a reason, so I will go and take a look at that.

00:19:15 - Yeah, and just sort of a foreshadowing, in a couple of episodes, I'm gonna have Roman Wright, the creator of Beanie on here to talk about Beanie.

00:19:23 So we'll dive more into it in a future episode.

00:19:26 Yeah, yeah, yeah.

00:19:27 So we'll get into the details.

00:19:29 All right, and then Happy.

00:19:30 Exactly, the last one, you know, so this is pretty good, you know, so basically it's a SQL host scanner, so a dictionary attack tool.

00:19:42 So you can pass a filter of series of passwords, you know, and length and give it a try, allow it to find vulnerabilities, you know, it's just amazing.

00:19:54 type of tools you can't imagine how useful starting the enterprise you know there are a ton of them running every single day every single second try to you know security teams trying to hundreds of databases trying to find out what's going on yeah yeah hundreds of them set up and who knows who knows who set them up and if they configured them correctly and so it'll just hammer away for known usernames and passwords and defaults and all kinds of stuff, right?

00:20:24 And then list out the ones that it finds, which is good.

00:20:27 - Great.

00:20:30 - Yeah, very good.

00:20:31 Okay, so that was the three from Anthony Shaw.

00:20:34 Thank you, Anthony.

00:20:36 And then we had the Guido van Rossum and Mark Shannon to talk about performance. - No time, eh?

00:20:42 - Yeah, that was great.

00:20:43 - I'm guessing, you know, I mean, I'm not sure Guido will really, and Mark will suggest any package, but I really love see both of them joining and sharing the job they're doing.

00:20:58 I think it's amazing.

00:20:59 I have a question for them and also Anthony, how what they're doing, it will work all together, times will say, but we really appreciate the work.

00:21:11 - Mark, Shannon and Guido are working on is different than Pidgin and what Anthony Shaw's working on, which is different than Sam Gross's work on Cinder and so on, not Cinder on the no-gil, sorry.

00:21:26 Cinder is done by Dino Phelan.

00:21:28 So there's just all these projects of people doing stuff.

00:21:31 It'd be great if they could find some common ground to amplify that.

00:21:35 - Exactly, you know, whatever they can do is really welcome.

00:21:38 I'm sure the community will appreciate it.

00:21:41 And each of them have a different use cases and they will hit a limit.

00:21:45 So let's see, whatever support they need, community is here really to help.

00:21:50 - Yeah, right on.

00:21:51 All right, next back in October, middle October, we had episode 338 using CI Build Wheel to manage the scikit-hep packages.

00:22:02 And I learned a bunch of stuff about just how to properly build Python packages from Henry Scheiner, the guest there.

00:22:10 That was a lot of fun.

00:22:11 What was the thing he recommended?

00:22:12 Right, so Plotix.

00:22:15 Guys, if you love CLI, like I do, go and do everything there on your console, period.

00:22:24 You want to plot a time series, you want to plot your stock markets, you want the price and you want to do extra things, that's the tool.

00:22:32 I didn't know, it's so, so-

00:22:35 - This is crazy.

00:22:35 - So cool.

00:22:37 - Yeah, 100% Python.

00:22:39 And basically it plots directly to your terminal.

00:22:41 So if you wanted to do something like matplotlib, even the syntax it says is similar.

00:22:46 If you want like a bar graph or some bar, some like distribution curves or even a picture, it will literally put that in the terminal.

00:22:58 - Just amazing.

00:22:59 - This is awesome.

00:23:01 Do you have some kind of use for this with the projects that you're doing where-

00:23:04 - Yeah, usually, you know, I mean, even when you are logging things, you know, If you want to do full debugging of something and you want to understand what is going on and you want to show it right there, this is beautiful.

00:23:20 You can understand, I don't know, some data.

00:23:23 So you don't need to really get out of your application and go to, I don't know, a notebook and play there.

00:23:30 You can enable that flag for you to debug it and stay away, right there.

00:23:34 It's just amazing, really.

00:23:36 - Yeah, over on Python Bytes, we spoke about this thing called, here's another one where we need the pronunciation, jute, jute, J-U-T, I don't know.

00:23:48 And what it does is this one will let you take the output of a, basically take a Jupyter notebook and let you put that into, and basically view the notebook in the terminal, which is pretty awesome.

00:24:05 So this one is like, But you don't really get the graphs and stuff for that, right?

00:24:10 You get like the basic output.

00:24:12 >> Yeah, that's exactly.

00:24:13 >> Where those are the graphs.

00:24:14 >> I just see the cells, yes.

00:24:15 That's good.

00:24:16 >> Yeah, yeah.

00:24:17 So all very good.

00:24:18 >> But this one gives you then the plot right there, you know, using the ASCII just.

00:24:22 >> I wonder, since the syntax is really similar to matplotlib, I wonder if there could be some add-on to jute that says, if you see a matplotlib, you know, stub it out with plot text.

00:24:34 That'd be awesome.

00:24:35 All right, well.

00:24:36 >> Time to try.

00:24:37 >> Time to try.

00:24:38 - All right, well, thank you for that, Henry.

00:24:40 And then we had a panel of Waylon Walker, Yatun Dadada, and even Danov talking about Kedro, which is one of these like frameworks for managing data science, almost like a pipeline, but a little bit larger than that.

00:24:55 Do you do anything like that?

00:24:56 Do you use like Kedro or Luigi or Airflow or any of those things?

00:25:01 - Not really on job wise, but personal use, yes.

00:25:07 Okay.

00:25:08 We'll go through that one down there.

00:25:10 But what is interesting is, you know, in the two packages they recommended.

00:25:16 So one, you know, the first one was the fssspec.

00:25:21 - Yeah, here's another one that could use some help.

00:25:24 I think it's fssspec.

00:25:26 - Okay, here you go.

00:25:27 - I think it's file systems spec.

00:25:29 Yeah, yeah, actually.

00:25:30 - You know, when I listen to-

00:25:31 - This could be a little hint.

00:25:32 A little hint.

00:25:33 - And this is the thing, you know, when I listen to Pulsecast, I was like, OK, so I needed to come here and read it like two times to try to get exactly what is aiming from this one.

00:25:45 It's quite valuable library.

00:25:47 I mean, treat all the files.

00:25:51 It doesn't matter if it's in your desktop, in the cloud, or whatever location.

00:25:56 Have a simple API to go and handle the files.

00:26:00 It's just amazing.

00:26:01 I didn't know.

00:26:02 I work a lot with pandas data frame, for example.

00:26:05 Even when it's not data-related, data science-related, I used to get the help of all the C underlying the pandas, the non-Py.

00:26:21 If I want to do a high-sql query, I use pandas.

00:26:26 I usually don't go through the ORM, and the reason is the speed.

00:26:32 You go and check, and you can do the insert, So you can do things through the pandas pretty quickly, you know, and these things are all in the backend, you know, helping to do that.

00:26:44 It's just amazing.

00:26:46 - Yeah, it's super cool.

00:26:47 If you want to write the file sources that are not actually file sources, then this is a really, really good one for that.

00:26:55 So people can look through the docs, but also out there, let's see, I was hoping somewhere there's like a list of all the different things.

00:27:06 And I know-

00:27:07 - The files they support, exactly.

00:27:09 - Yeah, yeah, yeah.

00:27:10 But there's things like databases, Excel, all those kind of things.

00:27:14 - Yeah, exactly.

00:27:15 It makes anything to behave like a file, you know?

00:27:19 A simple API that handle, you know, everything, whatever have to do with data, they will do it in, you know, so simple, you know?

00:27:28 With the URL, with the pattern.

00:27:29 - It all uses the with open syntax, right?

00:27:33 - Amazing, amazing.

00:27:35 - Yeah, here's a little example of like, FSSpec open some URL to some place, could be S3 or wherever, and then you just use it as a file, like as a file object, which is great.

00:27:47 And then obviously this one was from that episode with William Walker, who happens to be the audience.

00:27:53 Hey William, or Waylon, sorry.

00:27:55 It says, "Yes, FSSpec does not get enough love." Yes, thanks Waylon.

00:27:58 - Amazing, exactly, you know, and that's the reason of this repository.

00:28:01 We need to keep it there, you know, people should take a look, that's it simple.

00:28:04 - Yeah, and that's why I started asking that question.

00:28:07 I'm like, all right, I know there's things like this that I've never heard of, that I should be hearing of.

00:28:12 And then the other one was Dynaconf.

00:28:14 And I think we got to FS spec 'cause Dynaconf used it potentially, I believe.

00:28:19 - So this one, you know, really, I didn't know this.

00:28:24 That's the beauty of Python.

00:28:26 There is one library, one package force to do everything, right?

00:28:31 So this one is an easy way how to do safety loaders, you know, as I put it there on steroids.

00:28:39 So it doesn't matter if you have a BY, INI, JSON, you know, other formats, just, you will handle it.

00:28:47 Period, you know, forget about what is out there.

00:28:50 Super easy to use.

00:28:53 - Yeah, and it has like support for environments like development versus testing versus production.

00:29:01 And also you can keep the secrets, the file for the secrets, the file for the--

00:29:05 the settings for the secrets and the settings in the normal settings.

00:29:09 Well designed.

00:29:11 Plugins for Django and Flask, talks to HashiCorp Vault for some of the secrets, and so on.

00:29:16 Yeah, this is quite neat.

00:29:18 And it makes good use of emoji in its output.

00:29:21 So I always appreciate a good emoji in that.

00:29:24 I do, yeah.

00:29:26 I know, it's so small, but it just makes me smile and there's a little color, a little pizazz.

00:29:31 So yeah, really good.

00:29:33 All right, and that takes us on to something that has been getting a ton of attention lately is Will McGugan's work, episode 333, "Terminal Magic with Rich and Textual." - Rich and textual.

00:29:47 I mean, thank you guys.

00:29:48 You know, I mean, it's just a piece of great work, you know, they have done.

00:29:54 You know, during the podcast, mentioned about this object explorer.

00:30:01 >> Yeah.

00:30:01 >> So quite cool.

00:30:04 Get your object and just explore it.

00:30:10 It feel like if you were in your IDD, simple.

00:30:16 >> Yeah. So what I used to do is I would type print out dir of object, dir parentheses object, and it'll show you basically the dictionary of functions and fields and just all the attributes and whatnot.

00:30:34 This is way better.

00:30:35 Like imagine something like, I don't know if this is actually using Rich.

00:30:41 Let me look real quick here.

00:30:43 Yep, this is based itself upon Rich.

00:30:45 So imagine Rich was used to build like a beautiful UI that you could arrow, you know, list out stuff.

00:30:53 You could search through and arrow through and select things and yeah, this is fantastic, right?

00:30:59 - And that will be the reason why we have the Textual.

00:31:02 The other one that we're talking about is just, is the same, right?

00:31:06 So using both Rich and Textual, you can do these type of things, yeah.

00:31:12 - Yeah, Rich lets you write really awesome stuff to the terminal like progress bars and tables and colored syntax, highlighted JSON and whatnot.

00:31:23 And then textual kind of allows you to lay out different parts of the screen.

00:31:27 So you can have like a thing docked to the left and then fill the rest of the terminal with the output as you select the thing on the left.

00:31:33 Yeah, perfect.

00:31:35 That's kind of what this is for DIR, but way, way better.

00:31:39 I love it.

00:31:40 - Exactly.

00:31:41 - Awesome.

00:31:42 All right.

00:31:43 So on to, we're all the way back to middle of September with episode 335, Gene Editing with Python.

00:31:50 And our guest here was David Born.

00:31:52 And he talked about one that I hadn't heard of, but I'm sure some people could definitely use in the DevOps space.

00:31:59 - So AWS and also, you know, the rest of the cloud providers, you know, Google and everyone else, they have such a beautiful APIs to integrate with their systems.

00:32:12 And this is one of them, right?

00:32:13 So, so many things you can do with, you know, That's it, you know, I mean, I really love the way how all these cloud providers are enabling all these APIs to do absolutely everything, you know?

00:32:33 - Yeah, I mean, you hear of like one of the things that makes cloud computing special.

00:32:40 Like there used to be the joke, let me see if I can find that, cloud computing, just like just someone else's server or something like that, right?

00:32:49 There was that joke and, oh man, I'm not finding it on the quick search here, but there was this joke that, you know what, it's the cloud, it really is just someone else's server.

00:32:57 But one of the real big differences is that you can program against this thing.

00:33:02 Like I remember way back when we were doing some e-commerce stuff and some software stuff, we went to Rackspace and we requested that they provision a server.

00:33:12 And like several days later, a human had said, "Yes, Michael, here's your server we made for you." And that was great back then, but with the cloud, it's all about programming against the infrastructure, like infrastructure as code type of thing.

00:33:26 And this cloud development kit that David suggested was all about, well, here's the Python API to program AWS basically, right?

00:33:37 - Mind blowing, you know, I mean, if you see, you know, the implementation, I mean, the impact on the enterprise, these type of APIs, you know, and the ability to do it through Python It's just neat.

00:33:51 - Yeah, it's super cool.

00:33:52 Yeah, it's not a thing that I do very much.

00:33:54 I do have some APIs that work against our servers for like, if everything goes right, zero downtime deployment on like Git push type of things, but not to the degree that like the cloud development kit won't do, right?

00:34:09 You could do way, way more stuff than what I got going on.

00:34:12 All right, and then David also suggested Luigi.

00:34:15 - Luigi.

00:34:16 - Okay, I mean, this is the whole, when I listen this name, Luigi, I remember my wife, her family is Italian.

00:34:26 So, you know.

00:34:27 - Fantastic.

00:34:28 - See what this does, this does everything, right?

00:34:30 This is the biggest spaghetti, right?

00:34:31 It's workflow management, task scheduling, dependency resolution, everything in one place.

00:34:40 - You can have the visualizer for all the, like the dependency graphs and whatnot, right?

00:34:46 And this is really good because, you know, like Dask style, you know, you can do the whole, you define through functions how your workflow will work.

00:34:55 And as things start completing, you reach to the end, to the completion, you know, they can be quite isolated, they can be near to you, far away, you know, in the cloud or another providers, and then you can reach your end goal and know when things fail or know when things are completed.

00:35:12 I mean, applications--

00:35:14 - Some awareness to where that particular job is making it through, 'cause you can see what part's finished, what part is still working, what's waiting on what.

00:35:23 Yeah, it's very cool.

00:35:24 - Exactly, exactly.

00:35:25 You know, who wants to do, again, home automation?

00:35:27 Who wants to do, you know, enterprise, you know, completing your workflows?

00:35:32 Here you go.

00:35:32 And then you have a bit of nice user interface, web interface.

00:35:37 You have all in one stop.

00:35:41 That's it.

00:35:42 - Yeah.

00:35:42 - And for people out there who are all about Python, which is the audience basically, everything in Luigi is Python instead of XML configuration or similar external files like think YAML, JSON, whatever, the dependency graph is specified within Python, which is pretty cool.

00:36:00 - Right.

00:36:01 - Yeah, and I think this one came out of Spotify, if I recall correctly.

00:36:04 - Yes, exactly, yes.

00:36:05 And this is something I really love from the tech companies.

00:36:08 Their management have understood that, you know, they can work together with the open source community, we help them, and back to my position as an enterprise, I can use it, right?

00:36:25 So it's just really a call from every single company who have something that can be open source, go ahead and do it.

00:36:34 You are going to get so much out of it.

00:36:40 - Yeah, you know, worst case, nobody cares.

00:36:43 Best case, you find other people who are passionate about this thing that you built, and then they'll help you improve it, you know, without any effort from you, right?

00:36:52 Like that's awesome for a company to have other people help work on the code.

00:36:55 - Exactly, they find the box for you, you know, they help you with the commutation, it's a win-to-win situation.

00:37:00 - Yeah, exactly.

00:37:01 There's so many of these things that companies have to build not because it's their core value proposition, It's just that, well, we needed a thing to schedule some stuff, so we figured that out.

00:37:13 But like, it's not what makes Spotify special, right?

00:37:16 So they don't need to hide and protect it, right?

00:37:18 Put it out there, that's great.

00:37:20 All right, next episode, going back to September 18th, September 9th on the recording, I guess, we talked about the planetary, Microsoft Planetary Computer, which is like basically cloud computing for people researching climate change and similar geospatial stuff.

00:37:42 That was Rob Emanuel and Tom Augsburger.

00:37:46 Thanks guys.

00:37:46 - Rob and Tom, thank you for sharing.

00:37:48 I think this is, you know, we need so much of this, you know, in those days.

00:37:52 I think it's well deserved, you know, this type of contribution from, you know, if any big company can, you know, just go ahead.

00:38:01 Don't wait, you know.

00:38:02 - Yeah, absolutely.

00:38:04 And so the thing that they recommended, I can't remember, I think it was Tom, but I'm not 100% sure it was Seaborn, which also I saw back when we were talking about the one that Bex recommended, which was the UMAP one that also was, had a bunch of examples in Seaborn, yeah, so.

00:38:26 - Yeah, usually in the data science world, you know, Seaborn is really used.

00:38:31 You can do everything with Matplot.

00:38:34 I don't like how it looks like.

00:38:36 I know many people will come back to me and say, no, no, no, you haven't tried X and Y on set.

00:38:40 I know, but out of the shelf, that's it.

00:38:44 Seaborn just--

00:38:45 - Look how incredible this joint plot looks.

00:38:48 Like if people go to the gallery and just kind of scroll through this hexagonal joint plot, some of these, it's not just showing you the data, but it's like, wow, that's publication level beauty right there, right?

00:39:01 - Really nice, really simple.

00:39:03 I mean, you get the same that you get out of Matplot, but I will say, you know, it's like comparing the old Android with the Apple, you know, with the iPhone, you know, I'm Android guy, right?

00:39:16 So guys, I'm Windows guy as well, you know, I use, you know, myself, you know, I use Linux through my Windows for subsystems, you know, so.

00:39:25 But anyway, but that's a big competition, you know, yeah, you can do things pretty good in Matplot, but there's so many things out there, which out of the shelf, it looks beautiful.

00:39:35 You know, it also have a nice API, easy to use.

00:39:40 One stop for beautiful visualizations.

00:39:42 - Yeah, absolutely.

00:39:43 Tony on the audience says Seaborn is great.

00:39:45 So another vote for that as well.

00:39:47 All right, back to the perfect threes, episode 333.

00:39:52 I thought this was a really fun episode.

00:39:54 The state of data science in 2021 was Stan Siebert from Anaconda.

00:39:59 - See, so, wow.

00:40:02 The NumPy and Spicey on GPU is, I think, is a great achievement for so many things we use day to day.

00:40:15 I mean, every time you guys are talking to your phones and you are--

00:40:19 even when you are not doing anything, the camera is watching you, the whole thing.

00:40:24 There is so much happening out there, thanks to the use of the GPUs at the time.

00:40:29 It's still used.

00:40:31 So the cuPy, cuPy, allowed to get that array and process through GPU.

00:40:42 I mean, it's pretty good.

00:40:44 And the beauty of this library is that it's used for so many others that help everything to go on a steroid.

00:40:54 >>Yeah, so cuPy comes from CUDA in Python, so I'm guessing Coupie is NumPy, SciPy compatible array library for GPU accelerated computing with Python.

00:41:07 There's a lot of qualifiers there, but that basically means if you're doing stuff with NumPy, you can throw this at it instead of happening on your CPU, it'll happen on CUDA cores on say your NVIDIA 3080, which is an insane amount of computation.

00:41:21 - Wow.

00:41:24 - Yeah, very cool.

00:41:25 Do you guys use GPUs for anything?

00:41:27 Yes, in the industry, mostly it's used for the seismic processing.

00:41:33 It's a big size of images.

00:41:38 That's usually where Linux is in the energy industry, most of them.

00:41:44 You have to do all this 3D graphics, all this processing from all these surveys data.

00:41:52 All this may be used.

00:41:56 - Yeah, fantastic.

00:41:57 I would love to see things come along that are a little more interchangeable.

00:42:04 Or like the CUDA stuff is fantastic, but CUDA is just NVIDIA.

00:42:08 And we've got AMD with Radeon, we've got the new, my new laptop's got like 16 neural cores or something like that, I can't remember exactly.

00:42:20 But we all are getting these systems laying around And it's very hard to get a hold of the GeForce GPUs.

00:42:27 So I'd love to see like whatever GPU you want to bring or neural engine you want to bring, but I totally understand that that doesn't always work so easily.

00:42:36 All right, the next episode is a very popular one.

00:42:42 One of the most popular ones we've had recently called a robust Python with Patrick Viafore.

00:42:47 Yeah, yeah.

00:42:48 And so he talked about Stevador, - Stibidor, managing dynamic plugins for Python apps.

00:42:55 - See, when I was listening to this podcast, I was regretting so much time I wasted in my life.

00:43:02 (laughing)

00:43:03 - I built this whole thing that existed.

00:43:04 - Working on my, you know, add-ons, you know, my plugins, you know.

00:43:10 This is just so simple.

00:43:13 That's it.

00:43:14 And at runtime, you know, forget about doing imports and, you know, your new file and the whole thing.

00:43:18 I need to go and, no, no, no, no, no.

00:43:20 Stop doing this.

00:43:21 guys, there is a solution.

00:43:23 That's the one.

00:43:24 - Yeah, cool.

00:43:25 So basically if you wanna build a plugin system for your code and make, for your app and make things interchangeable and whatnot, Steve Dore looks really good for that.

00:43:36 Very nice.

00:43:36 Back to August, summertime, episode 331 with Lucas Lenga.

00:43:45 - Lucas, thank you so much.

00:43:47 I mean, it's to everyone, right?

00:43:49 But you know, also to you, you know, I use black so much, you know, I know that all the things you are today, you know, going on today, you didn't mention black, but, you know, we decided to add it here.

00:44:02 - Yeah.

00:44:03 - Incompromising code for matter, you know, is that helps so much with people's relationship, I guess, you know, more than beautiful Python, no more fighting, you know, that's it, just get agreement.

00:44:15 Everyone use black, that's the setting by default.

00:44:18 - Yeah, it's one of the things where you can just take that whole debate and conversation out of different people's hands.

00:44:26 It's not who is the most unmovable in the team or loudest in the team or whatever.

00:44:35 Look, we're just going to agree the community said black is close enough.

00:44:39 Maybe no one's gonna be 100% happy with how things format, but it's just gonna happen automatically.

00:44:45 And we're not gonna worry about code formatting anymore.

00:44:47 and it's good to go.

00:44:48 And I think that's fantastic.

00:44:50 - I will change the name, you know, the description, the uncompromising code for matter by, you know, the frictionless, frictionless code for matter.

00:44:59 I mean, this is just beautiful.

00:45:01 - Yeah, and you have people using different tools.

00:45:03 Some people using PyCharm, some people using VS Code, some people using an Emacs or whatever.

00:45:07 And if you say, clean up this code, what that means to those different systems, especially because you can customize every little detail, right?

00:45:16 like I want a space here, but not a space there.

00:45:19 Those all become merge, not necessarily conflicts, but changes just because somebody cleaned up the code, but there's not a meaningful change on that line.

00:45:26 So doing something like black in a pre-commit hook means you're not gonna get those little weird changes just because the tooling decided to have a different opinion.

00:45:36 - Change the form of that, yeah.

00:45:38 - Yeah, Douglas out in the audience says, "Thumbs up to black, right on." - Yeah, exactly.

00:45:44 - Yeah, you're starting to see it be brought to other things as well.

00:45:47 Like it just got integrated into Jupyter Notebooks, I believe.

00:45:51 - Oh yes, yes.

00:45:53 - Or no, I have, I always get this wrong.

00:45:55 It now has support to point it at a Jupyter Notebook and have it format that.

00:45:59 So very cool.

00:46:00 - Okay, that's the way how it work, okay.

00:46:03 - I'm pretty sure I may have reversed it twice in my mind, but I think that that's how the PR suggested that it's gonna work.

00:46:10 Okay, so episode 333, this was a fun one.

00:46:12 a group of Jarek, Kaxel and Leah talking about Apache Airflow, which is another one of these workflow pipeline things in Python.

00:46:22 Yeah, so I think I actually, did I actually get a chance to ask them a question this one?

00:46:29 I might have run out of time.

00:46:30 - No, you know, that's the reason why, you know, sometimes I used to, you know, when I'm managed to get it, because you know, my time zone with you guys, when I'm there, you know, and you're getting to the end, I usually try to get that small comment on the chat of YouTube, just to remind people, don't miss the equation, it's quite important.

00:46:49 It was missed here, but anyway, amazing library again for data pipelines.

00:46:55 - Yeah, Apache Webflow looks really nice.

00:46:58 - You can do your scheduling and monitor.

00:47:02 - I think it's pretty similar to how we described Luigi.

00:47:06 I think there's a lot of similarities.

00:47:07 - But a bit more, a more, you know, data focus, you know, quite use a lot on the data science war, yes.

00:47:15 - Yeah, absolutely.

00:47:17 It has all these integrations, which is nice, right?

00:47:19 Like if you wanna plug into other data sources, you don't have to necessarily program against them, you just grab one of those integrations and run.

00:47:27 All right, episode 329, I had my friend Richard Campbell back on there.

00:47:32 We talked about renewable energy.

00:47:33 He's always fun to dive into the geek out episodes, but given the topic we were covering, it didn't really make sense to have a question and we were out of time.

00:47:41 - Exactly, exactly.

00:47:42 - Thanks Richard, but no question, maybe I'll get one from you next time we do something like that.

00:47:47 Episode 328, Piccolo, another ORM and also one of the async ones, which is fun.

00:47:58 But the package, this is Daniel Townsend, the package was not Piccolo, that was the topic.

00:48:03 The package is Pydantic.

00:48:05 - Identic, okay, amazing.

00:48:07 This is one of the, one of the, these really good packages, you know, out there.

00:48:14 Data validation, that's it.

00:48:19 - Yeah, I think it really is.

00:48:22 I don't know if it doesn't get enough love or not, but it deserves a lot of love, let's say that.

00:48:26 So it's, it does really beautiful importing and transformation of data.

00:48:32 So if you're receiving data from a file, Or if maybe you're receiving it from an API and the data is not super cleaned up, this thing will do its best to, one, either automatically clean it up or two, it will tell you precisely what's wrong with it.

00:48:51 So like, suppose you're getting a JSON document back and it has a list of things and the third thing in the list is not parsable as a date time or something crazy like that.

00:49:04 it'll tell you the third thing in the list couldn't be converted to a date time rather than exception in valid format, right?

00:49:11 It's beautiful, right?

00:49:12 So that's one of the things that's lovely.

00:49:15 The other thing is it uses type annotations in really meaningful ways.

00:49:20 So if you have a, like the example on the website says, here's a user with an ID colon int.

00:49:26 That means there's no specified default and the data provided must provide an int because it's not an optional int, It must provide an ID.

00:49:34 There's a name, which is equal to John Doe.

00:49:36 So you don't have to provide one.

00:49:38 There's a default.

00:49:38 And because the default's a string, name is a string.

00:49:42 But there's a signup that may or may not have a value.

00:49:44 So it's an optional date time.

00:49:46 And all of those things factor into the transformation and the parsing and whatnot, right?

00:49:50 Yeah.

00:49:54 Super nice.

00:49:55 And the other thing is it works with FastAPI to define the open, the open, API, the swagger stuff.

00:50:05 So for example, let me see if I can find.

00:50:07 Created a FastAPI over at weather.talkpython.fm because I had been using some other weather API for a course and of course they changed.

00:50:20 They used to be free and now they're not free.

00:50:22 And so I'm like, well, if I got to rewrite this course, I'm not gonna depend on somebody else's API again.

00:50:30 So it'll answer questions like, what is the weather or whatever, right?

00:50:33 But you can also go to, I say docs, just go to slash docs and you get like, oh, here's all the data that'll be exchanged.

00:50:41 And here's, it's gonna return some forecast, which has a wind, which has a speed, which is a number and an integer.

00:50:48 And all of this is automatic from Pydantic being plugged into FastAPI.

00:50:53 It's beautiful.

00:50:54 - It's just amazing.

00:50:55 You know, I mean, that's the thing, you know, That's how you glue these libraries, these packages together, you know, what makes the magic.

00:51:02 Some of them are really beautiful by itself, you know, when you just start using all together and then you put on top, whatever, rich if you want to have a beautiful output on the CLI or whatever.

00:51:10 So that's...

00:51:11 - Absolutely.

00:51:14 Frolian out in the audience says, "Pydantic, it's one of those packages "that makes my work successful without Flare." Yeah, just... - Exactly.

00:51:21 - Just makes it easy.

00:51:22 We're just gonna do that. - All right.

00:51:24 - All right.

00:51:25 Let's see.

00:51:26 How we doing Tom?

00:51:27 We got time for a couple more there.

00:51:29 - A couple of more, we weren't able to finish all, but you know, you guys are getting, you know, what's the, what we're trying to do here.

00:51:35 - So we're on July now.

00:51:37 I think I'm gonna predict we can make it to May and then we're gonna run out of time.

00:51:40 But this episode was really cool.

00:51:42 I thought also episode 327, little automation tools, because I think it speaks to so many people who are not necessarily, oh, I'm like chief senior software architect at Instagram or whatever.

00:51:54 Like everyone can use these.

00:51:56 We had Rivers Cuomo from Weezer.

00:51:59 We had Jay Miller, we had Kim Van Wick and Rusty Gregory on in the panelists here.

00:52:04 And that was super fun.

00:52:06 - Amazing.

00:52:08 So they introduce PipX.

00:52:12 Have you tried?

00:52:13 - I didn't try.

00:52:14 - I use PipX all the time.

00:52:15 I love PipX.

00:52:16 - Oh, nice. - So good.

00:52:17 - Okay.

00:52:18 I use a version of ManaMan, but you know, it's so simple, you know?

00:52:22 they have this small GIF on their GitHub repository.

00:52:27 Go install it and then just do everything against the PIPX.

00:52:32 - Yeah, so I heard about PIPX when it first came out and that was, I'm trying to remember, Chad Smith, I believe, was telling me about it.

00:52:46 And it was just an individual project and now it's part of PyPA, which is the Python packaging authority.

00:52:53 So it's become sort of official.

00:52:55 And people use Homebrew for macOS, they use App for Ubuntu and Chocolaty for Windows.

00:53:03 And that installs all sorts of tools.

00:53:05 But if you want something like, I need to install a tool that I can run, and it just happens to be based on Python, well then PipX is that equivalent, right?

00:53:14 Because there's a lot of programs and tools out there that are awesome that you want from Python For example, like Black, I want to run Black against a thing, but my program doesn't depend on it.

00:53:26 So it doesn't necessarily need to be installed in that virtual environment, but instead, I just need it on my system.

00:53:32 Exactly. So go install it and run that application in your isolated environment. Just beautiful.

00:53:38 - Super smart. - Yeah.

00:53:39 Wayland says, "I use PipX for so many things.

00:53:41 Instable Playbooks, Kedro, install many personal repos." One that I use it for is Glances.

00:53:48 I'll show you some stuff that calls to be used for that's not as interesting.

00:53:52 So this is a fantastic, fantastic tool.

00:53:55 Like you get, if you ever use top to figure out what's going on in your server, the way you spell top is G-L-A-N-C-E-S, glances, that's what you should type.

00:54:06 It is so much better, but it's a Python library.

00:54:08 So pip x install glances, and it gets its own environment with its own dependencies in there, and it doesn't mess up.

00:54:15 Also, there's recently TipTop, I believe is also based on Rich.

00:54:21 But if you check this one out, this one also looks like a really interesting one where it's like Glances, it gives you a terminal UI about your server, but this one has running graphs.

00:54:35 So running graphs of the CPU across the cores, by the way, like if you've got a four core, eight hyperthreaded core machine, it'll give you eight graphs.

00:54:44 And then like graphs of memory, network graphs, plus your process stuff.

00:54:48 So like all of these things are perfect candidates for installing with PipX.

00:54:54 - Excellent.

00:54:54 - Another one, Pie joke.

00:54:57 So if you just need some jokes, you can just PipX install Pie jokes and then just type pie joke anytime you want and you get something great to come out.

00:55:09 - Yeah, I've tried that.

00:55:10 - Yeah, that's a good one.

00:55:12 Anyway, PipX is a very good one.

00:55:14 All right, so that was, I don't remember who on there recommended that one, but that was a really good one.

00:55:18 All right, let's see.

00:55:22 We had Mike Driscoll on to talk about building desktop apps with DevEx Python.

00:55:28 And of course he does a lot of stuff integrating with things like Excel and with PDFs and stuff.

00:55:36 So what was the one he recommended?

00:55:40 - So open a BY Excel.

00:55:44 So you need to work with Excel, pretty nice API.

00:55:48 I usually do it straight away with Pandas.

00:55:54 I make it even simpler.

00:55:56 - I think Pandas internally might use OpenPyXL as well.

00:56:02 - Exactly.

00:56:03 I haven't, I didn't check, but most probably.

00:56:06 Okay.

00:56:07 So go and read and write Excel.

00:56:09 You go and select your ranges.

00:56:11 what is your book inside, your spreadsheets, and super neat.

00:56:19 At the end, go read it, put it in a table, do your loops, do your calculations, and then process your data.

00:56:28 - Yeah, yeah, absolutely.

00:56:30 And I think you could even do like formulas and formatting and other stuff through here.

00:56:36 So with like-- - Yeah, you have full control of Excel.

00:56:38 - Yeah, with like pandas, you can put data out pretty easy and stuff.

00:56:42 But if you wanna say like, I want this one bold, stuff like that, I think this is more the level you gotta work at, which is cool.

00:56:50 All right, MicroPython and StrictPython.

00:56:54 I don't know if this is a joint episode or a battle.

00:56:58 Actually, it turned out to be kind of a joint episode.

00:57:00 I talked to Scott and Damian, specifically because they had done a ton of work where CircuitPython and MicroPython had merged a lot of the differences that they'd been working on together back into like a more uniform code base.

00:57:16 So they talked about HTTPpy, I'm gonna guess on that name there.

00:57:22 - Yeah, exactly.

00:57:23 So what they were, - What is this one?

00:57:25 - Yeah, so that one is the Python base for easy requests, okay?

00:57:33 You know, day to day I spend 99% of my time on Windows.

00:57:37 Sometimes, I don't know, due to my enterprise policies, I can do a C-core.

00:57:45 This is an easy way how to achieve that.

00:57:49 If you need to do a wget command and you're on Windows, for example, that's the way.

00:57:54 Super simple.

00:57:56 >> Yeah, that's cool. It's based on Python.

00:57:58 One of the things I think is neat about it is it has a specification file.

00:58:04 So instead of like putting, you know, dash D, here's a key value thing I wanna pass dash D, here's another, and here's the URL and so on.

00:58:13 You just create one of these configuration files and then you say, make the request that's stored in that file and off it goes, right?

00:58:21 - Exactly.

00:58:22 - That's neat.

00:58:23 Yeah, that's really neat.

00:58:25 While we're on that, another one that I like, not sure I could phonetically distinguish it.

00:58:32 - Okay.

00:58:33 is HTTP IE pronounced, I believe, HTTP, HTTPI as well.

00:58:38 This one is super neat as well.

00:58:42 And one of the things that I really liked about it, is this the same thing?

00:58:48 I think so.

00:58:49 Let's go to GitHub.

00:58:51 But certainly the Python project, I'll go like this.

00:58:56 Over here.

00:58:58 This is also kind of like a curl, But what's really cool about it is when you make requests, you just type HTTP or HTTPS and you give it a URL and it'll print out like the headers and the cookies that it got back, colorized in your terminal.

00:59:15 It'll do a pretty printing a JSON and code formatting, even like code highlighting your HTML that might come back.

00:59:23 So, yeah, it's so good.

00:59:25 If you think curl or W get, like put it down, go to HCPI.

00:59:31 And the one I'm recommending is HTTPIE, not HTTPY, which is also good.

00:59:40 And it has it, I really love this sort of configuration file as well.

00:59:44 So I see super value in both of them.

00:59:46 But yeah, neat.

00:59:48 Very good recommendation.

00:59:51 Let's see.

00:59:52 Gatorade powered Python APIs.

00:59:57 - APIs.

00:59:58 - Yeah.

00:59:58 - Oh, that was in, yeah.

00:59:59 - This is such an interesting one because Rob Senra, they worked on this project called the GX Switch Patch from Gatorade, which is like a thing you put on your arm and then you work out and then you analyze it with Python.

01:00:13 It's incredible.

01:00:14 - Really nice.

01:00:16 - Yeah. - Really nice.

01:00:17 - So coming back around, he suggested Rich.

01:00:21 - Rich, here you go.

01:00:23 So one of the, you know, I think probably favorites of 2021, you know?

01:00:28 - Yeah, I would say too. - You have mentioned really amazing library.

01:00:33 You know, I really love just to go, you know, from rich import prints and that's it, you know.

01:00:38 You get straight away a different feel and look on working with your CLI, so.

01:00:45 - Yeah, absolutely.

01:00:46 All right, let's see.

01:00:50 Let's say, I'm gonna say we have time for one.

01:00:52 - Yes, exactly. - One more.

01:00:53 It's probably time to wrap it up, - Yeah, I'm gonna go back to the book.

01:00:57 So how far are we?

01:00:58 We made it to the middle of June, 2021.

01:01:00 All right.

01:01:01 - Not bad, not bad.

01:01:02 - Yeah, not bad.

01:01:03 This is Itamar Turner-Trauring.

01:01:05 I had him on to talk about best practices for Docker in production, kind of in quotes for Python developers.

01:01:13 And that was fun.

01:01:14 And he talked about a lot of things, but his package was Py03.

01:01:18 Tell us about Py03.

01:01:20 No, Py03 is missing.

01:01:22 I'm gonna have to search for it.

01:01:22 - Oh, billing is broken?

01:01:24 Wait.

01:01:25 - Hold on.

01:01:25 All right, there we go.

01:01:27 Rust bindings for the Python interpreter.

01:01:32 What do we got going on here?

01:01:34 - So, I mean, for this one, if using Python from Rust, you know, I remember one time I was looking at some source code where they were in C-char embedding assembly or embedding another programming language running that on site and doing the whole thing. Similar, I didn't know. I think at this moment it's obvious, right? But I didn't realize that you can do this, the Rust binding for Python.

01:02:09 So I don't know. I haven't used Rust, but I'm guessing they're supposed to be most probably one of these type of wrappers, you know, bindings for so many other languages.

01:02:23 - Yeah. - I'm not aware of.

01:02:24 - I haven't really used Rust either, but if I had to go back to a low-level language like C, I would prefer to not go back to C, which I used to do. I would rather go to something like Rust, like a modern C-level language, I guess, is probably the way. Yeah, so py03 will let you write a native Python module in Rust.

01:02:48 So if you need to make a certain part of your Python code go really fast and be more native, I guess that's an option or in reverse, you can embed Python into a Rust binary.

01:03:00 And I guess from there run Python code within your Rust app.

01:03:04 - So for everyone out there, you know, once you listen to the podcast, you know, if you know about similar library for other, you know, to do bindings for other languages, just please share it, you know?

01:03:21 I mean, it's so nice.

01:03:23 I mean, it makes things so good.

01:03:27 We need to start now probably just jumping and grabbing up because of the time I guess, right?

01:03:32 - That's right.

01:03:33 Oh, there's so many more good ones.

01:03:35 We got Alpine, Numba, Rich again, FastAPI, Flask SQLAlchemy, and on and on and on, but-

01:03:42 - And on and on, yeah, exactly.

01:03:43 Wow. - Yeah.

01:03:44 So guys, it's there.

01:03:46 Just go and take a look.

01:03:47 I promise now in December, I will take some leave.

01:03:50 I will take two or three days to go back to the previous years and try to put everything out there.

01:03:59 Please take a look at this one.

01:04:00 Please contribute.

01:04:01 If you see something wrong, go ahead.

01:04:04 Super welcome to receive contributions there.

01:04:07 >>Yeah, thank you.

01:04:08 That's awesome.

01:04:09 People can definitely add to the work that you put here.

01:04:12 This is great.

01:04:13 Thank you for doing that.

01:04:14 That's really neat.

01:04:15 Now, of course, before you get out of here, you've got to face the two questions, right?

01:04:19 So if you're going to write some Python code these days, Antonio, what editor are you using?

01:04:25 - Day-to-day is VS Code.

01:04:30 However, you know, when I found super easy to use Google Collapse notebooks.

01:04:39 So I'm kind of divided, right?

01:04:40 So I don't need to, you know, sometimes just getting to use code to do something small and check and plot is not useful.

01:04:49 Now, so I'm divided, right?

01:04:51 So when I'm working with projects, small or large, straight away through this code, love the integration with GitHub, with containers, everything, everything in a single user interface.

01:05:08 And when I have to do a small web scraping do a small data manipulation or whatever, I straightaway go to the Google Colab notebooks and do it right there.

01:05:20 I have the link, I can share it with colleagues or friends and it makes my life quite easy.

01:05:26 - All the online notebooks world, there's so many.

01:05:28 - All of them, all of them, absolutely all of them.

01:05:30 - So many.

01:05:32 Are you familiar with the dot command on GitHub repos?

01:05:35 - Oh yes, it's just amazing.

01:05:37 - If you're on any GitHub repos and you just literally press dot, Is that still-- oh, you've got to be logged in to do that.

01:05:43 >> Yeah, you need to be logged in to do that.

01:05:44 >> But anyway, you know, it's the same as this user code.dev, basically.

01:05:47 >> Exactly, exactly.

01:05:48 You know, if they manage to do this--

01:05:50 >> Oh, not code.dev, dscode.dev.

01:05:51 >> --dscode, yeah.

01:05:52 So if they manage to do this, I'm sure there will be this small enhancement for the pronunciation of the packages won't be a big deal on GitHub, I guess.

01:06:01 So--

01:06:02 >> Yeah, yeah, pretty cool.

01:06:03 >> --but this one is just amazing.

01:06:05 Press dots and open your VS Code, right there with all your settings.

01:06:09 Absolutely. I try to not be logged into the browser I'm sharing on the stream.

01:06:14 I don't want to influence whatever shows up. All right. And then notable PyPI package. Let's put something on to your repo from you about the repo. That'd be very meta.

01:06:25 It's just good. So recently I was, you know, my daughter, she wants to be YouTuber when she She grew up, she's still too young.

01:06:36 But anyway, I wanted to help her and do some automation of from creating the videos all the way to posting this to YouTube.

01:06:48 And it takes time for editing and everything, so I wanted to get some help.

01:06:55 So I was trying to see if there was any way using NLP to get a summary of any big web page?

01:07:02 I don't know.

01:07:02 You want to do a small video.

01:07:04 You want to do small research.

01:07:06 That's it.

01:07:07 Or you want to digest some news.

01:07:09 So you install this library called Sumi, S-U-M-I.

01:07:16 You basically put the URL of the web page or the PDF.

01:07:20 You want to summarize how many paragraphs, how many lines, you want to get out of this.

01:07:26 And 95, 98% of the job is amazing.

01:07:31 I would say 100% of the time is really good.

01:07:37 - Simple library and command line utility for extracting summary from HTML pages and plain text.

01:07:44 So interesting. - So for example, right?

01:07:45 So you go to your transcript of the podcast and you say, okay, give me the most relevant 50 lines out of the transcript of, you know, Talk back to me, podcast.

01:07:57 And that's it.

01:07:59 You can print it out and get in a quick way and extract some useful information.

01:08:09 And the next one is related to the same.

01:08:11 So I think this is not using the official way.

01:08:20 I hope they don't get penalized for me.

01:08:23 So it's called GTTS, Google Text-to-Speech.

01:08:28 - Okay, Google Text-to-Speech, okay.

01:08:31 - So this one is, again, Python libraries that interface with the Google Translate API, and then you get the mp3.

01:08:42 So something I was using these two, gluing these two together, right?

01:08:46 So go get the summary, okay?

01:08:49 Obviously, you know, Somebody will help you to get the context.

01:08:53 You would like to do the proper referencing and citation and everything.

01:08:58 And then for each paragraph, you can get the MP3 and put this on top of the video.

01:09:04 And then go back and having tools like with these workflows tools, like Luigi, go and kick everything and then upload it to YouTube in one go, fully automated.

01:09:18 It's just beautiful.

01:09:19 you know how everything is, it can be done, you know, everything can be glued together.

01:09:25 Anyway, for those out there who want to try, you know, these two are pretty neat.

01:09:29 - Yeah, that is really cool.

01:09:32 Awesome, that sounds like a lot of fun stuff to play with.

01:09:36 I love the automation.

01:09:37 I love the summarizing.

01:09:40 That's, I really liked that one.

01:09:42 That's great, so cool.

01:09:43 Good recommendations on both of these.

01:09:46 and we now have a new thing to put into that GitHub repo.

01:09:50 - That's good, that's good, so yeah.

01:09:51 - All right, well, Antonio, thank you so much for being here.

01:09:56 I mean, final call to action.

01:09:57 People wanna check out this project you've created.

01:09:59 What do they do?

01:10:00 - Please, just, you know, we'll just click, you know, down there on the podcast, you know, to the link.

01:10:07 - Yeah, definitely, obviously I'll link to that.

01:10:09 It's the main thing.

01:10:10 - Contribute, you know, if you can, If you like it, don't forget to give us a start.

01:10:18 Contribute.

01:10:19 If you see anything wrong, please just welcome.

01:10:23 Suggestions are welcome.

01:10:24 And if I miss anything, any of the packages, for those who were in the podcast also as well, just go through and give us a bit of contribution there.

01:10:37 So I promise to finalize all of them from episode number one by the end of this year.

01:10:43 And after that, we'll try to do a few cool stuff there.

01:10:47 So data could be retrieved as a JSON, just try to make it more accessible for the people.

01:10:53 - Oh yeah, that'd be cool.

01:10:54 - Probably next.

01:10:56 And next probably we can do the how over the time, if we can record which was the notable, the favorite editor and the times and see how things change over the time, have a really nice graph of how these codes start coming up.

01:11:12 - Oh yeah. - And quite charm as well.

01:11:13 - There's a lot of ways to gather all this up and like turn it into computer legible data and do all sorts of fun stuff.

01:11:20 - Exactly.

01:11:21 Is second one call for action is, everyone's celebrating Thanksgiving.

01:11:26 Yeah, for those who are still live, so listening the live streaming, wish you a really beautiful holiday.

01:11:36 For those listening to the podcast, I hope you really have a good time with families and friends.

01:11:44 If you want to reach me out, as usual, I'm on Twitter.

01:11:48 I try to be nice on Twitter.

01:11:51 I used to put everything on LinkedIn, most of my technical parts there.

01:11:59 But anyway, I'm reachable.

01:12:00 If we didn't have time to talk about IoT, If there is anyone out there who have pretty cool applications, hardwares, where you can go and deploy containers all the way to the edge, I will be super interested to hear from those individuals and companies and packages and everything out there.

01:12:25 That's kind of my day-to-day job.

01:12:27 So please--

01:12:30 >>Sounds fun.

01:12:30 >>--reach out.

01:12:32 Right on, I'll be sure to put all your contact info in the show notes.

01:12:35 So thank you so much for being here.

01:12:37 Thank you for creating this GitHub repo and thanks for the look back to kind of highlighting the last half year of what people have talked about.

01:12:45 It's been a lot of fun.

01:12:46 - Great, thank you for having me, Michael.

01:12:49 - Thanks, yeah.

01:12:50 - See you guys. - Yeah, bye.

01:12:52 - Bye.

