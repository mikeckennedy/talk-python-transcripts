WEBVTT

00:00:01.400 --> 00:00:05.340
Dr. Katherine Nelson, welcome to Talk Pythonry. Awesome to have you here.

00:00:06.090 --> 00:00:06.460
Thank you. Thank you.

00:00:06.460 --> 00:00:07.740
So excited to talk about notebooks

00:00:07.740 --> 00:00:11.460
and production and all these things. It's been fantastic.

00:00:12.960 --> 00:00:17.160
Yeah, it's great to be here. Thank you for inviting me on the show. I'm a big fan of the podcast.

00:00:17.700 --> 00:00:18.520
Oh, thank you so much.

00:00:18.760 --> 00:00:18.940
Yeah.

00:00:19.180 --> 00:00:28.240
Yeah, I'm happy to have you on the show. I really am a fan of helping data scientists move beyond just the playing around with the data science tools.

00:00:29.040 --> 00:00:32.340
And by playing around, I mean like exploring data or building stuff just for yourself.

00:00:33.300 --> 00:00:34.900
I don't know how many people know.

00:00:35.300 --> 00:00:37.120
I'm going to talk about it a little bit, but not very much.

00:00:38.380 --> 00:00:47.540
My very first programming job was writing software in C++ of all languages for a scientific research lab and company.

00:00:48.440 --> 00:00:49.480
And so I would talk

00:00:49.480 --> 00:00:54.980
to a lot of scientists and cognitive scientists mostly who would be working in MATLAB.

00:00:55.640 --> 00:00:55.700
And

00:00:55.700 --> 00:00:56.220
they'd go,

00:00:56.320 --> 00:00:57.540
here's what I have in MATLAB.

00:00:58.140 --> 00:01:01.500
make that a C++ program that integrates with this other thing

00:01:01.960 --> 00:01:04.580
or implement this algorithm in this other tool or whatever.

00:01:05.379 --> 00:01:08.720
And it was always an amazing experience,

00:01:08.840 --> 00:01:12.260
but also like, oh, if it was just written a little bit better,

00:01:12.360 --> 00:01:14.480
you could iterate on this a lot more.

00:01:14.540 --> 00:01:16.160
You could experiment with this a lot more.

00:01:16.220 --> 00:01:17.880
You could try this in different situations

00:01:18.200 --> 00:01:20.700
instead of just this, it wasn't a notebook at the time,

00:01:20.880 --> 00:01:24.100
but the MATLAB, whatever those things are called, those projects,

00:01:25.000 --> 00:01:28.080
They're similar in style to that, I think.

00:01:29.200 --> 00:01:31.260
Yeah, so I've actually been on a similar journey

00:01:31.600 --> 00:01:34.640
because before I was a data scientist, I was a geologist.

00:01:35.460 --> 00:01:38.480
And my first programming experience was in MATLAB.

00:01:39.620 --> 00:01:40.180
And

00:01:40.180 --> 00:01:41.480
I've taken that journey.

00:01:42.400 --> 00:01:50.340
But it was thanks to a really nice conversation I had early in my career.

00:01:50.660 --> 00:01:55.040
I was the only data scientist working on the team of developers, designers, and so on.

00:01:56.100 --> 00:02:03.080
And I had a conversation with a teammate when I was like, do I really need to learn all this stuff?

00:02:03.190 --> 00:02:04.780
I can write code that gets the job done.

00:02:05.440 --> 00:02:05.880
But he was like,

00:02:05.940 --> 00:02:10.660
if you write better code, you can do more data science faster.

00:02:11.700 --> 00:02:19.180
And that comment really started me on the journey I've taken towards writing my book,

00:02:19.540 --> 00:02:28.320
towards feeling that I wanted to help data scientists write better code.

00:02:29.320 --> 00:02:29.580
Yeah.

00:02:30.920 --> 00:02:32.100
It's interesting to live it, right?

00:02:32.320 --> 00:02:32.460
Not

00:02:32.460 --> 00:02:32.800
just

00:02:32.800 --> 00:02:36.520
read about, oh, we should be probably using Git or whatever,

00:02:36.700 --> 00:02:36.800
but

00:02:36.800 --> 00:02:38.380
be

00:02:38.380 --> 00:02:39.240
down in it.

00:02:40.900 --> 00:02:45.080
It sounds like you've come from this non-rigorous background

00:02:45.340 --> 00:02:45.420
and

00:02:45.420 --> 00:02:46.080
working more

00:02:46.080 --> 00:02:46.680
towards that.

00:02:48.160 --> 00:02:50.040
You've probably seen and

00:02:50.040 --> 00:02:50.560
experienced a

00:02:50.560 --> 00:02:55.420
lot of things like, oh, now I see why people care about source control or now I see why

00:02:55.420 --> 00:02:56.060
people care

00:02:56.060 --> 00:02:58.780
about single responsibility functions or whatever.

00:02:59.400 --> 00:03:00.740
It's a different type of rigor.

00:03:01.480 --> 00:03:03.460
So there's the scientific rigor

00:03:03.460 --> 00:03:04.180
where you're

00:03:04.180 --> 00:03:12.500
going through that process and testing your hypothesis, but you're not necessarily writing scalable codes to do that.

00:03:12.660 --> 00:03:14.220
The scientific rigor is there.

00:03:14.960 --> 00:03:19.860
But then there's the software principles that are a different type of standardization.

00:03:20.680 --> 00:03:21.340
Yeah, absolutely.

00:03:22.540 --> 00:03:30.920
All right, well, before we dive into moving from exploratory data to production data science and scaling notebooks,

00:03:32.000 --> 00:03:33.400
give us a quick bit of background on yourself.

00:03:35.080 --> 00:03:37.760
Yeah, so I

00:03:37.760 --> 00:03:42.280
have been in, I was a data scientist for about 10 years.

00:03:44.520 --> 00:03:49.260
2015 and I've always had a strong focus on the machine learning side of things.

00:03:51.480 --> 00:04:00.220
Until 2023, I worked for SAP Concur as a principal data scientist and dealing with production NLP models there.

00:04:01.140 --> 00:04:08.000
I left there to finish writing my second book, which is software engineering for data scientists.

00:04:08.760 --> 00:04:27.360
And now I'm self-employed doing a whole mix of things from developer relations contracting work through AI consultancy startups, some writing work, and also continuing my personal journey from data science towards software engineering.

00:04:27.610 --> 00:04:32.980
So I don't even know whether I'd call myself a data scientist at the moment.

00:04:33.610 --> 00:04:35.860
Yep, doing a whole mix of things.

00:04:36.620 --> 00:04:38.000
I don't know what you would call it either.

00:04:38.160 --> 00:04:41.020
but it sounds super interesting like

00:04:41.020 --> 00:04:43.000
yeah one of the problems

00:04:43.000 --> 00:04:45.740
with working at large companies is

00:04:45.740 --> 00:04:49.900
you kind of get pigeonholed not just into one thing but one part of one thing you know

00:04:49.900 --> 00:04:50.300
and it

00:04:50.320 --> 00:04:50.720
sounds like you're

00:04:50.720 --> 00:04:56.280
you get to explore a lot of the very exciting and rapidly changing parts of the

00:04:56.380 --> 00:04:57.340
industry so super cool

00:04:57.340 --> 00:05:05.400
definitely i'm i i'm not great at specializing in any particular one thing

00:05:05.480 --> 00:05:11.200
And I used to see that as a downside, but now I see that as a huge strength to be able to

00:05:11.200 --> 00:05:12.080
generalize and

00:05:12.080 --> 00:05:12.900
pick up new things.

00:05:13.640 --> 00:05:14.580
Yeah, absolutely.

00:05:15.280 --> 00:05:19.760
And like I alluded to in the intro, before I was a data scientist, I was a geologist.

00:05:20.340 --> 00:05:24.120
So I did an undergrad and PhD in geology.

00:05:24.560 --> 00:05:36.980
I worked in the oil industry for a little bit and then transitioned to data science in 2015 when I was struggling to find good jobs in geology.

00:05:38.520 --> 00:05:41.640
Machine learning, data science were just becoming a big thing.

00:05:41.770 --> 00:05:46.480
There were a ton of good options for transitioning from one to the other.

00:05:46.880 --> 00:05:48.680
So many good courses and so on.

00:05:48.900 --> 00:05:52.380
So, yeah, I improved my Python programming.

00:05:52.440 --> 00:05:57.920
I learned a bunch about machine learning and I made that jump into tech and it's just be it was

00:05:57.960 --> 00:06:02.440
just a great move it's worked out it's I really really enjoy what I do

00:06:02.440 --> 00:06:04.360
yeah oh that's fantastic

00:06:05.040 --> 00:06:08.700
and you know one drawback less outside work right

00:06:08.700 --> 00:06:10.280
yeah you don't get a you don't get to

00:06:10.280 --> 00:06:10.440
go to

00:06:10.620 --> 00:06:12.980
Greenland or wherever and yep

00:06:12.980 --> 00:06:17.459
yep I do miss that but living in the Pacific Northwest I do get

00:06:17.600 --> 00:06:18.780
outdoors a lot of the time.

00:06:19.420 --> 00:06:20.940
Yeah, I know. I love it up here.

00:06:21.479 --> 00:06:21.840
All

00:06:21.840 --> 00:06:23.200
right, before we move on, really just one

00:06:23.530 --> 00:06:25.320
quick logistical thing. Could you just move the

00:06:25.430 --> 00:06:26.920
mic down just like a half

00:06:27.630 --> 00:06:28.500
inch, just a tiny bit?

00:06:29.560 --> 00:06:29.920
Yeah,

00:06:30.020 --> 00:06:30.260
it's perfect.

00:06:31.000 --> 00:06:33.100
Just picking up a little background noise.

00:06:33.500 --> 00:06:33.660
All right.

00:06:35.740 --> 00:06:36.800
This is the live version, folks.

00:06:37.100 --> 00:06:38.080
We'll edit this out of the recording version.

00:06:40.840 --> 00:06:41.020
Okay.

00:06:41.860 --> 00:06:42.060
So,

00:06:43.380 --> 00:06:45.000
let's talk, I guess, let's talk

00:06:45.120 --> 00:06:46.480
PyCon first, okay?

00:06:47.080 --> 00:06:47.440
Because

00:06:47.900 --> 00:06:54.960
Yes. You just had your talk. Do you know this is up on YouTube yet? Have

00:06:54.960 --> 00:06:55.380
you seen this?

00:06:55.380 --> 00:06:57.280
I do. It just came up a couple of days ago.

00:06:57.740 --> 00:06:58.280
Yeah, absolutely.

00:06:58.680 --> 00:06:59.020
Such

00:06:59.020 --> 00:07:08.160
a quick turnaround because when we're recording this late May, PyCon was finished 10 days ago, so super fresh.

00:07:08.640 --> 00:07:15.980
Yeah, this is a lot better than previously because I think last year, maybe the year before, it was three or four months until

00:07:15.980 --> 00:07:16.580
the talks came

00:07:16.580 --> 00:07:16.740
out.

00:07:16.840 --> 00:07:18.020
And it was like, we

00:07:18.020 --> 00:07:22.920
talked to people, oh, it was a great talk, but we can't really share it with anyone who didn't already go to it, you know?

00:07:22.980 --> 00:07:23.240
Yes.

00:07:24.370 --> 00:07:27.220
So I saw your talk and I thought, oh, this sounds super interesting.

00:07:27.650 --> 00:07:29.000
I want to talk to Catherine about it.

00:07:29.260 --> 00:07:34.260
And I think there's a lot of interesting stories around it.

00:07:34.380 --> 00:07:40.060
But before we get into the topic of what you're covering there, like, let's just talk PyCon.

00:07:40.260 --> 00:07:40.800
How was the experience?

00:07:41.500 --> 00:07:42.680
Oh, PyCon is the best.

00:07:43.000 --> 00:07:51.760
it is just like one of the friendliest conferences I go to I was so happy to get a talk accepted this

00:07:51.900 --> 00:08:00.540
time around um I had previously got a talk accepted in 2020 so I got the notification in

00:08:00.910 --> 00:08:06.740
like February January February 2020 and I was like oh great I can't wait to stand up on stage

00:08:07.020 --> 00:08:12.740
and meet all the people and then obviously it was all it was all virtual I sat in my

00:08:13.340 --> 00:08:21.240
home office I recorded my talk so so nice to finally be able to have that experience

00:08:22.040 --> 00:08:29.680
and it's just such a supportive environment everyone's very friendly um the questions that

00:08:29.680 --> 00:08:36.120
I had at the end of the talk were were really good questions really positive and then a bunch

00:08:36.120 --> 00:08:40.840
of people came up to me after the talk and they're like oh yeah i really enjoyed that and

00:08:40.840 --> 00:08:41.960
just

00:08:41.960 --> 00:08:42.580
that

00:08:42.669 --> 00:08:45.520
kind of atmosphere you really don't get at every conference

00:08:45.520 --> 00:08:48.720
no it's really different to do it in

00:08:48.900 --> 00:08:49.500
person you

00:08:49.500 --> 00:08:50.020
really get

00:08:50.020 --> 00:08:55.640
a lot of a lot more it's a lot more gratifying to do it i think because you

00:08:55.650 --> 00:08:58.960
can you can see the effect you have on people when you're

00:08:58.960 --> 00:08:59.540
doing some

00:08:59.540 --> 00:09:01.459
sort of zoom presentation or

00:09:01.480 --> 00:09:08.260
podcast, you know, you're speaking to zero or one people in effect, right? And you don't realize

00:09:09.280 --> 00:09:15.220
the reach it has, right? But yeah, that's great. What a weird time 2020 was, huh?

00:09:15.760 --> 00:09:17.320
So weird. So weird. I'm

00:09:17.320 --> 00:09:18.620
so glad that we're back to

00:09:18.620 --> 00:09:23.500
meeting people in person and getting to go to

00:09:23.500 --> 00:09:31.440
all the other talks at PyCon. And I think that for me, the advantage of it is I tend to go to a

00:09:31.500 --> 00:09:33.740
there that I don't know very much about.

00:09:34.720 --> 00:09:39.560
So I can just, there's such a huge range of things to learn about.

00:09:39.880 --> 00:09:45.740
So everything from like what visualizations you can do in a browser with Python

00:09:46.340 --> 00:09:52.960
to improvements that are being made right at the deep levels of the language,

00:09:53.400 --> 00:09:53.560
like

00:09:53.560 --> 00:09:54.320
improving

00:09:54.320 --> 00:09:55.340
the speed and so on.

00:09:55.600 --> 00:09:56.720
So, yeah.

00:09:57.140 --> 00:10:00.620
Yeah, and just to be there with the people creating Python

00:10:00.640 --> 00:10:01.080
and creating

00:10:01.080 --> 00:10:03.220
the libraries and so on, you know,

00:10:03.520 --> 00:10:05.760
seeing with the maintainers and the companies creating all

00:10:05.760 --> 00:10:06.140
this stuff.

00:10:06.300 --> 00:10:08.320
It's a super neat experience.

00:10:08.890 --> 00:10:09.000
Yeah.

00:10:09.360 --> 00:10:09.520
All right.

00:10:10.880 --> 00:10:13.460
Also, let's talk about your books a bit.

00:10:13.840 --> 00:10:13.900
Yes.

00:10:14.030 --> 00:10:18.720
So this talk sort of comes from your newer book, right?

00:10:18.920 --> 00:10:19.580
Absolutely, yes.

00:10:19.780 --> 00:10:22.400
But maybe we'll – hey, 2020 is great.

00:10:22.600 --> 00:10:23.420
Let's go back to 2020.

00:10:23.600 --> 00:10:23.840
Yes.

00:10:24.540 --> 00:10:25.660
Tell us about this one first.

00:10:26.060 --> 00:10:26.820
Tell people about your books.

00:10:27.300 --> 00:10:27.520
Mm-hmm.

00:10:27.960 --> 00:10:31.440
So this first book is Building Machine Learning Pipelines

00:10:31.640 --> 00:10:33.760
that I co-authored with Hannah's Hapke,

00:10:34.010 --> 00:10:35.420
and we released that in 2020.

00:10:35.770 --> 00:10:40.400
And it's all about how to build production machine learning systems

00:10:40.760 --> 00:10:41.480
with TensorFlow.

00:10:42.340 --> 00:10:47.120
So how you go from, you've done the experiments,

00:10:47.230 --> 00:10:48.760
you have a working machine learning model.

00:10:49.050 --> 00:10:52.620
How do you deploy that in a way that's standardized,

00:10:53.380 --> 00:10:56.960
scalable, reproducible, and automated?

00:10:57.680 --> 00:11:13.660
So it's based on TensorFlow Extended, which is a project from Google that helps you to basically one button, press one button, and then your machine learning model would import the data.

00:11:13.780 --> 00:11:19.400
You check that the data was what you expect it to be, train that model, and then deploy it into production.

00:11:20.660 --> 00:11:21.060
And at

00:11:21.060 --> 00:11:25.520
the time we wrote this book, that was really the only technology that lets you do that.

00:11:26.560 --> 00:11:28.280
Since then, there's a lot more have come along.

00:11:28.640 --> 00:11:31.260
Like AWS has their own solution.

00:11:32.020 --> 00:11:32.980
MLflow is a big one.

00:11:34.820 --> 00:11:37.400
But 2020, this was a really new thing.

00:11:37.700 --> 00:11:42.460
So we wanted to explain the principles of this.

00:11:44.280 --> 00:11:45.180
Yeah, very neat.

00:11:45.560 --> 00:11:46.000
Well, that's

00:11:46.000 --> 00:11:46.900
the

00:11:46.900 --> 00:11:47.500
thing with good ideas.

00:11:47.700 --> 00:11:48.240
They catch on.

00:11:48.600 --> 00:11:49.380
Yes, absolutely.

00:11:49.960 --> 00:11:50.200
All right.

00:11:50.720 --> 00:11:51.440
Okay, one more thing.

00:11:51.510 --> 00:11:52.420
I gave you bad advice.

00:11:52.740 --> 00:11:54.340
Move the mic up above your mouth, not below.

00:11:55.180 --> 00:11:55.300
Okay.

00:11:55.360 --> 00:11:55.500
I

00:11:55.500 --> 00:11:55.760
apologize.

00:11:56.980 --> 00:11:57.480
How's that?

00:11:57.560 --> 00:11:57.660
Good.

00:11:58.120 --> 00:11:58.620
Yeah, it's great.

00:12:01.060 --> 00:12:01.180
Yeah.

00:12:01.540 --> 00:12:01.980
So, okay.

00:12:03.140 --> 00:12:03.920
That's book number one.

00:12:04.340 --> 00:12:05.100
That's book number one.

00:12:06.060 --> 00:12:10.260
To be fair, I think TensorFlow is still a super important library, right?

00:12:10.540 --> 00:12:10.780
It's

00:12:10.780 --> 00:12:11.000
still relevant.

00:12:11.020 --> 00:12:11.840
100%, yes.

00:12:12.080 --> 00:12:12.860
Yeah, absolutely.

00:12:14.180 --> 00:12:14.440
Okay.

00:12:15.580 --> 00:12:17.820
On to software engineering for data scientists.

00:12:18.520 --> 00:12:19.100
Tell us about this.

00:12:19.180 --> 00:12:22.300
This is where this idea of this talk came from, right?

00:12:22.880 --> 00:12:23.540
Yeah, absolutely.

00:12:23.600 --> 00:12:31.440
the notebooks talk is an expansion of one of the chapters in this book. So software engineering for

00:12:31.480 --> 00:12:39.720
data scientists is based on advice that I was giving my mentees in my previous job. And it's

00:12:40.020 --> 00:12:42.100
also the book that I wanted to read when I was

00:12:42.100 --> 00:12:43.380
transitioning into data

00:12:43.380 --> 00:12:44.000
science myself.

00:12:45.360 --> 00:12:53.560
So it tries to answer the questions like, what is a test? Why should I use one? How do I make

00:12:53.580 --> 00:13:03.000
code more efficient what even is an api like all these things that i as a someone not coming from

00:13:03.050 --> 00:13:09.960
any kind of software software engineering background was facing as i was transitioning

00:13:10.230 --> 00:13:12.360
into a job in the tech industry

00:13:12.360 --> 00:13:13.840
and it's

00:13:13.840 --> 00:13:17.180
something that's often missed in data science intro courses

00:13:17.500 --> 00:13:18.680
or degrees.

00:13:19.760 --> 00:13:21.940
There is so much to learn in data science.

00:13:22.310 --> 00:13:27.640
You go from data analysis, statistics, data visualization,

00:13:28.170 --> 00:13:31.780
you pick up some SQL, you pick up machine learning.

00:13:32.070 --> 00:13:36.340
It feels like this fire hose of dozens and dozens of things

00:13:36.350 --> 00:13:37.300
you need to learn.

00:13:37.840 --> 00:13:39.740
And then someone's like, oh, by the way,

00:13:39.750 --> 00:13:43.940
you need to integrate this into a piece of software as well.

00:13:44.520 --> 00:13:48.980
So I felt like this is a real pain point for a lot of people.

00:13:50.120 --> 00:13:51.060
And there wasn't

00:13:51.060 --> 00:13:51.720
anything that

00:13:51.720 --> 00:14:00.600
really served them from, you know, when I started to read around about code quality, I'd very quickly get into examples in Java.

00:14:01.000 --> 00:14:03.220
I'd be looking at web development examples.

00:14:03.980 --> 00:14:06.400
There wasn't anything that I could relate to in my job.

00:14:07.260 --> 00:14:08.480
So I decided to write it.

00:14:09.420 --> 00:14:09.640
Cool.

00:14:10.620 --> 00:14:12.580
Yeah, first you got to learn it yourself and then you got to

00:14:12.580 --> 00:14:12.900
write it.

00:14:13.420 --> 00:14:15.500
I think this is really, really valuable.

00:14:17.480 --> 00:14:18.220
Thank you.

00:14:20.500 --> 00:14:29.060
As much as we can do to help people come into the data science side and software side and just feel like they belong,

00:14:29.320 --> 00:14:32.980
because it's so easy to just feel like you're banging your head against the wall.

00:14:33.400 --> 00:14:33.860
You're like,

00:14:33.940 --> 00:14:37.660
what do you mean dependencies are incompatible?

00:14:37.720 --> 00:14:38.420
What do you mean?

00:14:38.920 --> 00:14:39.140
Yes.

00:14:39.960 --> 00:14:41.500
Like there's a Git merge conflict.

00:14:41.620 --> 00:14:42.740
I didn't even want to use Git.

00:14:42.820 --> 00:14:44.060
what is this horrible thing, right?

00:14:44.880 --> 00:14:45.380
And just

00:14:45.380 --> 00:14:46.400
battling against it.

00:14:46.540 --> 00:14:49.480
So putting something out there

00:14:49.580 --> 00:14:51.720
to sort of be the roadmap for people to follow.

00:14:52.240 --> 00:14:52.520
It's great.

00:14:53.140 --> 00:14:55.940
And I think even though the title is Data Scientists,

00:14:56.260 --> 00:14:58.880
I think it will be useful

00:14:59.120 --> 00:15:00.840
to a much broader set of people than that.

00:15:01.120 --> 00:15:02.940
Because what I ended up writing,

00:15:03.320 --> 00:15:05.880
it has some things that are specific to data science,

00:15:06.200 --> 00:15:08.820
like how you write a test for machine learning.

00:15:09.140 --> 00:15:12.780
But I could also have probably titled it

00:15:12.800 --> 00:15:14.800
a friendly introduction to software engineering.

00:15:15.260 --> 00:15:17.920
So like anyone who's not a software engineer

00:15:18.140 --> 00:15:18.820
is their job title,

00:15:19.820 --> 00:15:21.520
but wants to learn more about those principles

00:15:21.640 --> 00:15:22.860
would probably benefit from it.

00:15:23.340 --> 00:15:23.880
Yeah, cool.

00:15:24.960 --> 00:15:26.740
I think a lot of that stuff's not really taught

00:15:27.340 --> 00:15:28.420
in universities either.

00:15:28.900 --> 00:15:30.860
I know there's computer science degrees, obviously,

00:15:31.640 --> 00:15:34.680
but a lot of times it's more theoretical, right?

00:15:34.900 --> 00:15:35.120
Yes.

00:15:35.120 --> 00:15:36.200
And it doesn't really end

00:15:36.200 --> 00:15:36.760
up with like,

00:15:37.380 --> 00:15:39.140
this is how you do a pull request type of,

00:15:39.480 --> 00:15:41.140
you know, conversations rather than,

00:15:41.820 --> 00:15:43.320
He's how you implement a database in Lisp.

00:15:43.820 --> 00:15:43.980
That's your

00:15:43.980 --> 00:15:44.220
homework.

00:15:44.330 --> 00:15:44.860
That's great.

00:15:45.880 --> 00:15:48.540
That was my CS experience for my CS class.

00:15:49.980 --> 00:15:50.160
Okay.

00:15:52.199 --> 00:15:53.740
So let's talk notebooks.

00:15:54.380 --> 00:15:59.480
And I think I want to start where you started with your talk,

00:15:59.850 --> 00:16:04.120
in that before we talk about the challenges with notebooks,

00:16:04.840 --> 00:16:08.420
things you need to do to move maybe beyond notebooks in certain circumstances,

00:16:09.000 --> 00:16:11.040
how about we give some love to notebooks?

00:16:12.060 --> 00:16:12.500
you talk

00:16:12.500 --> 00:16:13.940
about

00:16:13.940 --> 00:16:17.520
how great they are and how useful they are in the circumstances they're supposed to

00:16:17.550 --> 00:16:19.460
be used right i

00:16:19.460 --> 00:16:26.160
love notebooks for exploring for the very initial stages of a project particularly a

00:16:26.520 --> 00:16:31.540
data-driven project where you want to you want to take a look at some data you want to

00:16:32.360 --> 00:16:37.719
play around with it you you don't know exactly where you're going to end up with that project

00:16:37.740 --> 00:16:45.760
at all you want the flexibility of being able to play and explore and notebooks are fantastic for

00:16:45.800 --> 00:16:51.620
this because you you have that instant feedback from the code you're writing to what effect has

00:16:51.620 --> 00:16:57.960
that had on the data and you can make whatever visualizations you want you can look at whatever

00:16:58.300 --> 00:17:05.760
piece of data you feel like so they're fantastic for that initial stage where you don't know where

00:17:05.680 --> 00:17:08.459
you're going to end up but you want you want to look around

00:17:08.459 --> 00:17:14.459
yeah but but they do have some

00:17:14.720 --> 00:17:23.680
challenges yes and that makes them difficult to reuse you know kind of like i opened i opened

00:17:23.800 --> 00:17:26.740
this show with right like you've got all the stuff in in

00:17:26.740 --> 00:17:28.940
one file potentially effectively

00:17:31.100 --> 00:17:35.440
Jupyter notebooks in particular suffer from order of operations.

00:17:36.400 --> 00:17:36.540
Yes.

00:17:37.600 --> 00:17:39.140
Variability, right?

00:17:39.180 --> 00:17:41.460
You can run them top to bottom, or you can kind of bump around.

00:17:41.900 --> 00:17:44.420
I changed that cell and re-ran it, then I ran two more down.

00:17:44.420 --> 00:17:45.880
I went down a ways and wrote a new one,

00:17:46.040 --> 00:17:48.760
but something in the middle didn't take those changes, right?

00:17:48.860 --> 00:17:49.480
Things like this.

00:17:50.800 --> 00:17:54.180
They're a fantastic tool, but they're not the right tool for everything.

00:17:54.980 --> 00:17:58.420
If you want something that you're going to run repeatedly

00:17:58.860 --> 00:18:00.820
and in an automated fashion,

00:18:01.520 --> 00:18:02.700
that's not what they're designed for.

00:18:04.400 --> 00:18:09.280
People, there are sometimes moves to put notebooks in production,

00:18:10.540 --> 00:18:13.040
and there's a few projects all about this,

00:18:13.140 --> 00:18:15.080
like NB Dev is one.

00:18:16.200 --> 00:18:21.140
I know that Netflix make a huge thing out of putting notebooks in production,

00:18:22.520 --> 00:18:26.640
But I'm going to say I'm not a fan of that.

00:18:27.320 --> 00:18:27.880
Yeah, yeah, yeah.

00:18:28.420 --> 00:18:28.500
Yeah.

00:18:29.960 --> 00:18:30.600
And I'm not either.

00:18:30.760 --> 00:18:33.040
I think it's the right tool for the right job.

00:18:33.620 --> 00:18:33.720
Yes.

00:18:33.840 --> 00:18:34.140
You know?

00:18:34.520 --> 00:18:37.960
And they just weren't designed for that.

00:18:38.340 --> 00:18:41.820
There are some attempts to rethink how some of this goes.

00:18:42.020 --> 00:18:46.100
Like, for example, I had the folks from Marimo on,

00:18:48.740 --> 00:18:52.260
which it tries to resist being run out of order.

00:18:52.720 --> 00:18:55.680
you can either set it up so you can't run stuff out of order

00:18:55.880 --> 00:18:59.120
because it'll understand cell dependencies and rerun them if needed

00:18:59.820 --> 00:19:01.840
or at least it'll show you

00:19:02.110 --> 00:19:03.860
if you say that's going to be too slow

00:19:04.180 --> 00:19:06.480
it'll at least show you stuff is stale and so on

00:19:08.940 --> 00:19:09.820
so that's

00:19:09.820 --> 00:19:10.000
cool

00:19:10.070 --> 00:19:10.960
I think it's going to be interesting

00:19:11.220 --> 00:19:14.940
but the truth is people are using Jupyter

00:19:15.560 --> 00:19:16.500
almost entirely these

00:19:16.500 --> 00:19:16.680
days

00:19:18.740 --> 00:19:21.399
and I just learned about Marimo at PyCon

00:19:21.420 --> 00:19:22.820
It sounds really cool.

00:19:23.220 --> 00:19:24.880
I had a quick look into that.

00:19:24.960 --> 00:19:25.360
I think

00:19:25.360 --> 00:19:26.460
that's

00:19:26.460 --> 00:19:27.100
a great option.

00:19:27.920 --> 00:19:36.140
And another option is refactoring from a notebook into a regular Python script.

00:19:37.700 --> 00:19:38.140
I agree.

00:19:38.340 --> 00:19:41.980
I think that's the final skill, right?

00:19:41.980 --> 00:19:50.960
And that lets you work more closely as a data scientist person, work more closely with software engineering and so on if you're integrating with a larger team.

00:19:51.160 --> 00:19:51.360
rather

00:19:51.360 --> 00:19:52.240
than like,

00:19:52.560 --> 00:19:53.000
here's our notebook.

00:19:53.120 --> 00:19:54.240
You guys figure out how to run it.

00:19:54.260 --> 00:19:55.520
Like, oh, this is a new fancy notebook

00:19:55.620 --> 00:19:56.460
that runs slightly better.

00:19:56.580 --> 00:19:58.280
It's like, but still, how do I work with this again?

00:19:58.960 --> 00:20:01.460
Right, but you kind of work more

00:20:01.720 --> 00:20:04.420
the Python script level and so on.

00:20:04.720 --> 00:20:11.400
Okay, so I want to maybe talk a bit about

00:20:11.960 --> 00:20:15.820
what are some of the software engineering concepts

00:20:16.340 --> 00:20:17.780
that you feel like data scientists

00:20:18.020 --> 00:20:19.520
should be paying attention to?

00:20:20.500 --> 00:20:26.620
Because, you know, you use the phrase, like, the firehose of information sort of thing.

00:20:26.720 --> 00:20:27.200
And I think

00:20:27.200 --> 00:20:35.540
when you're coming into this, you're like, well, okay, I realize I need to up my game to be a little more, you know, software side rigorous with things.

00:20:36.440 --> 00:20:37.240
But I can't do everything.

00:20:38.200 --> 00:20:45.600
I can't boil the ocean and learn all the advanced programming concepts and all the DevOps and all these things.

00:20:45.840 --> 00:20:49.540
So what are the few things that people should really start paying attention to first?

00:20:50.740 --> 00:20:58.100
so I think I'm going to break this down into tools that you want to be aware of

00:20:58.100 --> 00:20:59.440
and

00:20:59.440 --> 00:21:00.480
the

00:21:02.679 --> 00:21:09.000
let's call it the mindset the strategies and the like how you want to think about things

00:21:10.120 --> 00:21:13.880
I'll talk about the strategies first because that's going to inform the tools

00:21:16.759 --> 00:21:26.260
so a lot of people in a in a data scientist role their their job is to explore and discover

00:21:27.020 --> 00:21:35.940
and come up with new ideas test hypotheses so like oh what happens if we do this can we test

00:21:39.520 --> 00:21:43.680
in what way will our users react if we change this thing?

00:21:46.100 --> 00:21:50.080
But when you're moving more towards code

00:21:50.180 --> 00:21:51.400
that's going to go into production,

00:21:51.680 --> 00:21:53.800
that's going to be run and used repeatedly,

00:21:55.040 --> 00:21:57.920
you've got to think about how to standardise that

00:21:58.640 --> 00:22:00.980
and how to automate that,

00:22:01.860 --> 00:22:04.080
how to make it efficient,

00:22:04.520 --> 00:22:07.900
how to make it run well in a big system.

00:22:09.270 --> 00:22:12.760
So that's a real change in mindset that you have to go through.

00:22:14.960 --> 00:22:17.700
So software engineers have a ton of tools

00:22:17.870 --> 00:22:20.680
that will help you write that code

00:22:20.680 --> 00:22:23.680
that is more robust, more reproducible.

00:22:25.800 --> 00:22:29.040
A huge one is learning how to test your code

00:22:29.620 --> 00:22:33.020
to make sure that your code is doing what you want it to do.

00:22:34.060 --> 00:22:38.500
learning to use version control so that you can share your code

00:22:38.680 --> 00:22:42.000
so that other people can pick it up and use it.

00:22:44.860 --> 00:22:48.520
Yeah, and also learning to refactor your code

00:22:48.590 --> 00:22:50.760
and being happy with that process.

00:22:51.340 --> 00:22:54.620
And obviously tests are going to play into this as well

00:22:54.780 --> 00:22:58.140
so that you can be sure that when you change your code,

00:22:58.200 --> 00:23:00.880
it didn't break something that you were relying on.

00:23:01.460 --> 00:23:03.540
Yeah, I totally agree with that.

00:23:04.820 --> 00:23:06.300
let's talk to those backwards

00:23:07.020 --> 00:23:07.200
so

00:23:07.200 --> 00:23:08.740
one challenge that I see

00:23:09.880 --> 00:23:10.240
that

00:23:11.040 --> 00:23:12.200
I think would be tricky

00:23:13.120 --> 00:23:14.900
so I have this notebook

00:23:15.300 --> 00:23:15.660
and it's

00:23:15.660 --> 00:23:16.180
all just

00:23:16.180 --> 00:23:16.780
top to bottom

00:23:17.220 --> 00:23:18.580
immediate execution code

00:23:18.640 --> 00:23:19.800
and I want to test it

00:23:22.200 --> 00:23:24.620
it seems challenging to me

00:23:24.740 --> 00:23:26.100
how do I run that

00:23:26.840 --> 00:23:27.880
in a unit test

00:23:29.400 --> 00:23:29.780
is a

00:23:29.780 --> 00:23:30.560
unit test

00:23:30.840 --> 00:23:32.739
even the right thing

00:23:33.200 --> 00:23:33.300
if

00:23:33.300 --> 00:23:34.840
your

00:23:34.840 --> 00:23:37.960
notebook is carrying out many tasks in one go,

00:23:39.620 --> 00:23:42.040
do you want to break out those tasks first

00:23:43.400 --> 00:23:46.860
rather than test the whole thing in one go?

00:23:47.180 --> 00:23:48.300
I think you almost have to

00:23:48.430 --> 00:23:48.580
because

00:23:48.580 --> 00:23:49.340
otherwise, how

00:23:49.340 --> 00:23:50.280
do you test it enough

00:23:50.280 --> 00:23:52.200
to make

00:23:52.200 --> 00:23:52.360
sure?

00:23:52.400 --> 00:23:54.000
I mean, I guess you could say, what's the final answer?

00:23:54.960 --> 00:23:55.540
27, okay.

00:23:55.940 --> 00:23:58.000
Long as we keep getting 27 for the final answer,

00:23:58.050 --> 00:23:59.000
we can keep, you know,

00:23:59.120 --> 00:24:01.620
that's not necessarily catching all the details there, right?

00:24:02.180 --> 00:24:04.720
As long as there's only one way of getting to 27, then

00:24:04.720 --> 00:24:05.660
you're fine.

00:24:07.540 --> 00:24:09.680
Or it's a true or false at the end or something

00:24:09.680 --> 00:24:09.840
like

00:24:09.840 --> 00:24:10.080
that.

00:24:10.210 --> 00:24:11.620
Buy the company, don't buy the company.

00:24:14.860 --> 00:24:15.660
Not always the same.

00:24:16.150 --> 00:24:19.860
So I guess that stepping back a bit,

00:24:20.540 --> 00:24:24.420
then that means we need to break our code, break our notebook,

00:24:25.260 --> 00:24:28.200
take the code within the notebook, and break it into pieces,

00:24:28.430 --> 00:24:30.540
sort of assess what is going on there.

00:24:31.560 --> 00:24:31.940
what

00:24:31.940 --> 00:24:33.280
are the actual steps right

00:24:33.280 --> 00:24:34.440
and in

00:24:34.440 --> 00:24:39.600
your talk you're like here's you go through actually an

00:24:39.620 --> 00:24:41.100
example with penguins right and you're like okay

00:24:41.100 --> 00:24:42.020
what is

00:24:42.020 --> 00:24:44.140
this notebook actually doing in its steps

00:24:44.820 --> 00:24:50.340
because it's doing not just one thing it's doing like everything needed to get penguin classification

00:24:50.800 --> 00:24:51.160
running right

00:24:51.160 --> 00:24:57.239
yeah that's right i did a little example of um given the data sets predict the

00:24:57.260 --> 00:25:04.180
penguin species and the notebook in that talk goes from downloading the data to cleaning the data

00:25:06.320 --> 00:25:10.040
feature engineering for a machine learning model training that machine learning model

00:25:10.720 --> 00:25:19.720
and then making a prediction on new code so that's like that you can really break down into those

00:25:20.160 --> 00:25:25.840
steps and i i love just drawing diagrams and flow charts if i have a big complex notebook to figure

00:25:25.840 --> 00:25:33.440
out what all the steps are and this is kind of this ends up being kind of backwards from what

00:25:34.379 --> 00:25:39.840
you might do in an in the engineering world because there you probably start from knowing

00:25:40.000 --> 00:25:44.240
what steps you're going to do and then writing the code accordingly

00:25:44.240 --> 00:25:46.500
but

00:25:46.500 --> 00:25:48.320
here in in the data world

00:25:48.740 --> 00:25:52.900
you don't necessarily know what the outcome of your project is going to be

00:25:53.940 --> 00:25:57.860
and a lot of projects will not produce a result

00:25:58.000 --> 00:26:01.320
that you even want to use and deploy into production.

00:26:01.700 --> 00:26:04.120
So you don't need to go through the process

00:26:04.260 --> 00:26:08.040
of making well-engineered code

00:26:08.280 --> 00:26:10.460
until you know that the project has legs,

00:26:10.560 --> 00:26:11.260
it's going to go somewhere.

00:26:13.540 --> 00:26:15.240
It's almost like the reverse.

00:26:15.980 --> 00:26:18.580
You play around, you play around,

00:26:18.640 --> 00:26:19.960
and it evolves, and you iterate,

00:26:20.140 --> 00:26:21.720
and then you're like, okay, this.

00:26:22.380 --> 00:26:22.560
Yes.

00:26:23.420 --> 00:26:28.660
but as you point out in the talk it's it's not just a matter of going okay we'll take that and

00:26:28.660 --> 00:26:32.180
we'll put that into functions it's like there might be parts that are irrelevant

00:26:32.180 --> 00:26:33.280
or little

00:26:33.520 --> 00:26:39.140
exploratory pieces that aren't actually germane to the thing you care about productizing

00:26:39.140 --> 00:26:40.340
yes and

00:26:40.340 --> 00:26:40.560
so

00:26:40.680 --> 00:26:42.680
on right so you it's

00:26:42.680 --> 00:26:43.920
kind of a an

00:26:43.920 --> 00:26:45.380
assessment you have to go through right

00:26:45.380 --> 00:26:47.299
you really have to

00:26:47.920 --> 00:26:53.500
go away and take a step back and then come back and take a fresh look at your code and then

00:26:54.320 --> 00:27:00.100
because you might have this like incredibly complex notebook but then you have to be like oh

00:27:00.660 --> 00:27:07.200
what is this actually doing here how do i start to break that down so i think what i did in the

00:27:07.360 --> 00:27:12.819
talk was i gave a checklist for how to do that so that that feels like a useful way to start

00:27:13.680 --> 00:27:17.380
thinking about it to go from that amorphous massive code

00:27:17.700 --> 00:27:21.720
to something that you can then factor into functions

00:27:22.220 --> 00:27:25.240
and then start building that up.

00:27:26.760 --> 00:27:31.420
And I like to go through and then just decide

00:27:31.640 --> 00:27:33.400
what all the functions are going to be

00:27:34.000 --> 00:27:35.240
based on that code in the notebook

00:27:35.720 --> 00:27:38.620
before I actually transfer the code over.

00:27:39.340 --> 00:27:40.779
And that helps me think through

00:27:40.880 --> 00:27:43.280
what steps are going to be happening.

00:27:44.320 --> 00:27:45.820
And then I think about the inputs

00:27:46.080 --> 00:27:48.660
and the outputs of each of those functions

00:27:49.100 --> 00:27:55.520
to make sure that the data is taking the correct journey,

00:27:55.980 --> 00:27:59.320
that the types of the inputs and outputs are going to match,

00:27:59.780 --> 00:28:01.780
that it's all going to work together as one bigger system.

00:28:03.080 --> 00:28:05.460
I think one of the things that would make that easier

00:28:06.000 --> 00:28:09.260
or a lot harder is how well-structured your notebook

00:28:09.260 --> 00:28:10.180
is, right?

00:28:10.340 --> 00:28:11.000
Are

00:28:11.000 --> 00:28:14.800
you using little headers to say, here's what I'm doing in the next three cells?

00:28:14.890 --> 00:28:21.580
And then another markdown header that says, okay, now we're cleaning the data and here's the various operations and why?

00:28:21.630 --> 00:28:26.660
Or is it just lots of stuff or even maybe multiple things per cell, right?

00:28:26.670 --> 00:28:26.860
Like

00:28:26.860 --> 00:28:27.780
there's a lot of ways

00:28:27.780 --> 00:28:30.100
in which good data science practices

00:28:30.100 --> 00:28:32.020
will aid

00:28:32.020 --> 00:28:34.600
you, prepare you for this process, right?

00:28:34.920 --> 00:28:35.440
Absolutely.

00:28:35.860 --> 00:28:44.840
And this kind of thing is also hugely useful if you're going to hand your notebook over to someone else at any point or if someone else is going to work on this notebook.

00:28:45.160 --> 00:28:50.420
Just having that little bit of documentation to give those hints for what it's doing.

00:28:52.700 --> 00:29:01.320
Yeah. The original vision, as I remember it being described for notebooks, is sort of literate programming

00:29:01.320 --> 00:29:02.060
where the

00:29:02.060 --> 00:29:13.280
code is like storytelling and then there's the code and describing what's happening. But I think in practice, a lot of people just use it as a scratch pad. You know what I mean?

00:29:14.080 --> 00:29:14.840
Yep, yep.

00:29:15.480 --> 00:29:17.480
And you'll definitely see that style of programming

00:29:18.320 --> 00:29:20.420
if people are writing tutorials in notebooks

00:29:20.660 --> 00:29:24.460
or they're deliberately setting them out as documentation.

00:29:24.780 --> 00:29:25.940
And that works great.

00:29:26.160 --> 00:29:27.860
That's another fantastic use for a notebook.

00:29:28.920 --> 00:29:29.940
Yeah, it definitely does.

00:29:30.920 --> 00:29:33.860
Okay, so what you're recommending is,

00:29:34.900 --> 00:29:36.520
and what you just show in your talk,

00:29:36.540 --> 00:29:40.600
is actually go and create a Python file,.py file,

00:29:41.160 --> 00:29:41.740
And put

00:29:41.740 --> 00:29:45.260
just stub functions in there for each thing,

00:29:46.399 --> 00:29:48.700
each category of things or each step of things

00:29:48.720 --> 00:29:50.560
that you've identified in the notebook.

00:29:51.340 --> 00:29:52.460
And not actually move the code.

00:29:52.620 --> 00:29:54.000
Just put pass.

00:29:54.560 --> 00:29:57.340
If you want to confuse people, put triple dot, dot, dot, dot.

00:29:57.380 --> 00:29:59.020
And that actually serves the same function.

00:29:59.960 --> 00:30:00.460
Whatever, right?

00:30:00.480 --> 00:30:03.740
Just leave them empty so that you get all that structure laid out.

00:30:03.840 --> 00:30:07.220
And then when you're happy with it, start moving your code over.

00:30:08.000 --> 00:30:08.280
Yes.

00:30:08.940 --> 00:30:12.880
And this seems like a manual, time-consuming process.

00:30:13.360 --> 00:30:16.060
It's like, why can't we automate this?

00:30:16.940 --> 00:30:23.340
But I feel that going through that process really helps me change hats

00:30:23.700 --> 00:30:28.480
from my exploratory hats to my production hats

00:30:29.020 --> 00:30:33.820
so that I'm really thinking about what this code is going to do.

00:30:34.720 --> 00:30:37.919
So I think baking that into your project plan

00:30:37.940 --> 00:30:42.160
that you're going to spend the time to actually think through

00:30:43.500 --> 00:30:46.180
what your code is going to do when it's run repeatedly

00:30:46.280 --> 00:30:50.340
in a production setting is key to success here.

00:30:52.280 --> 00:30:52.620
It is.

00:30:52.960 --> 00:30:56.880
What do you think about multiple Python files

00:30:57.200 --> 00:31:00.780
for different sections of the code or just one?

00:31:02.499 --> 00:31:04.400
What's your rule of thumb there?

00:31:05.540 --> 00:31:08.320
It's going to depend very much on the project for that.

00:31:08.460 --> 00:31:13.060
If it's small and simple, one file seems fine.

00:31:13.400 --> 00:31:20.320
If there's an obvious hierarchy, if there's some functions that are associated together,

00:31:20.540 --> 00:31:23.260
then putting those into their own separate file seems helpful.

00:31:24.020 --> 00:31:28.080
If there's helper functions that are going to get called in multiple places,

00:31:28.460 --> 00:31:31.960
then breaking those out into their own separate Python file.

00:31:32.520 --> 00:31:33.820
That seems like a good strategy.

00:31:34.400 --> 00:31:35.540
Yeah, it definitely does.

00:31:36.840 --> 00:31:40.360
I guess you want to keep in mind, well, what's the goal, right?

00:31:40.620 --> 00:31:40.860
Is it

00:31:40.860 --> 00:31:41.900
just to

00:31:41.900 --> 00:31:43.300
make it something I can run in another,

00:31:43.980 --> 00:31:46.420
in the context of, say, an API call?

00:31:46.880 --> 00:31:51.400
Or are you trying to create a library that someone else can reuse this code

00:31:51.580 --> 00:31:54.220
throughout different places, right?

00:31:54.320 --> 00:31:55.460
That's probably part of the consideration.

00:31:55.900 --> 00:31:56.960
Definitely, definitely.

00:31:57.240 --> 00:31:59.260
What are your goals with this code?

00:31:59.600 --> 00:31:59.740
Yeah.

00:32:03.200 --> 00:32:13.740
Okay, so in your example, we talked about some of the tools, right?

00:32:13.920 --> 00:32:18.600
You talked about, let's see, I guess it's worth pointing out,

00:32:18.760 --> 00:32:21.160
this example you talked about, it's actually available on GitHub,

00:32:21.780 --> 00:32:23.980
slides, code, and so on, so I'll link to that.

00:32:24.620 --> 00:32:30.320
But you talked about two tools in particular to help do this conversion,

00:32:30.580 --> 00:32:35.020
although it sounds to me like maybe you almost want to just manually do it,

00:32:35.100 --> 00:32:38.120
but maybe one is a step towards another.

00:32:38.260 --> 00:32:41.840
But you talked about NB Convert and Jupytext.

00:32:42.460 --> 00:32:43.240
Yeah, that's right.

00:32:43.880 --> 00:32:44.900
Yeah, tell us about these tools.

00:32:45.460 --> 00:32:51.420
These are definitely helpful because they're very simple to use.

00:32:51.860 --> 00:32:56.880
Install them and run them with just one line in the command line,

00:32:57.140 --> 00:33:02.300
and then they will convert your Jupyter Notebook to a script

00:33:02.590 --> 00:33:12.560
and strip out all the JSON that's in the back of the Notebook file.

00:33:13.960 --> 00:33:17.300
So if you have a really simple Notebook

00:33:17.300 --> 00:33:19.280
and you do just want to run the whole thing,

00:33:19.960 --> 00:33:23.200
then you're pretty much done with these tools.

00:33:24.360 --> 00:33:30.420
And that also helps you with the manual copying and pasting process that I'm talking about.

00:33:30.840 --> 00:33:38.260
So they're a good halfway house between the notebook and refactored script.

00:33:39.560 --> 00:33:43.060
Yeah, I feel like it might be easier to just export everything to a

00:33:43.060 --> 00:33:43.280
Python

00:33:43.280 --> 00:33:43.640
file.

00:33:43.900 --> 00:33:45.780
At the top of it, write those stub functions.

00:33:46.540 --> 00:33:46.860
And then go

00:33:46.860 --> 00:33:49.520
and just move the pieces in rather than trying

00:33:49.520 --> 00:33:50.380
to copy

00:33:50.380 --> 00:33:51.140
out of cells.

00:33:52.020 --> 00:33:52.220
Exactly.

00:33:52.240 --> 00:33:54.760
and mark down sections and then, you know what I mean?

00:33:54.800 --> 00:33:56.340
Like trying to reformat plus,

00:33:56.520 --> 00:33:59.800
like this will get it into the destination format, I guess.

00:34:00.360 --> 00:34:00.620
Yes.

00:34:01.640 --> 00:34:03.360
And talking about copying and pasting,

00:34:03.740 --> 00:34:08.399
it leads us on to talking about why you might want to write tests

00:34:08.520 --> 00:34:09.600
at the same time as this.

00:34:11.240 --> 00:34:11.720
Yeah.

00:34:13.780 --> 00:34:16.460
You want to know that each of these new functions that you're making

00:34:16.780 --> 00:34:18.580
is doing what you expect it to do.

00:34:19.120 --> 00:34:27.399
So it's a pretty nice workflow to just write the unit tests for each of these functions at the same time as you're copying and pasting that code over.

00:34:28.139 --> 00:34:30.220
And then you know when you've left a line behind.

00:34:32.440 --> 00:34:32.620
Yeah.

00:34:32.899 --> 00:34:35.780
You know, I'm going to go back a little bit on my earlier

00:34:35.780 --> 00:34:36.100
statement.

00:34:36.120 --> 00:34:42.500
I said I think it's really difficult to take this imperative immediate execution code from notebooks and test them.

00:34:42.820 --> 00:34:48.379
but I think you could probably do something like put an assert cell into the notebook

00:34:49.879 --> 00:34:51.740
right after the step you want to take.

00:34:52.050 --> 00:34:52.460
So if you're

00:34:52.460 --> 00:34:53.080
like, these three

00:34:53.080 --> 00:34:55.659
cells are going to be basically this function,

00:34:56.659 --> 00:34:57.040
just do

00:34:57.040 --> 00:34:59.940
a B to put a cell below it,

00:35:00.320 --> 00:35:02.980
and then write the assert that you would have in your unit test there,

00:35:03.660 --> 00:35:04.180
and then move

00:35:04.180 --> 00:35:04.980
them over to the test.

00:35:05.060 --> 00:35:06.260
I think you could actually make that work.

00:35:06.880 --> 00:35:07.500
Yeah, that's nice.

00:35:07.650 --> 00:35:12.780
And that's also really helping you break things down into the steps

00:35:12.800 --> 00:35:17.280
put into your functions because you're thinking about like here is a point where I want to

00:35:17.460 --> 00:35:19.420
stop and see what's happened.

00:35:21.040 --> 00:35:21.180
Yeah.

00:35:21.600 --> 00:35:21.660
Yeah,

00:35:21.760 --> 00:35:22.100
absolutely.

00:35:23.420 --> 00:35:29.720
I suppose it's worth pointing out that NB convert is not just to get Python as an executable

00:35:29.900 --> 00:35:35.680
script, but you can get markdown, restructured text, reveal JS for presentation, the LaTeX,

00:35:36.160 --> 00:35:40.900
PDFs, like it's, this is just one of its features, but it's a tool that applies here, right?

00:35:41.380 --> 00:35:41.720
Yes.

00:35:42.140 --> 00:35:42.640
Yeah, absolutely.

00:35:42.740 --> 00:35:58.960
And similar with Jupytext, but with that one, you can pair your notebook and your export so that when you update the notebook, the linked script also updates, which is really neat.

00:35:59.840 --> 00:35:59.980
Yeah.

00:36:01.839 --> 00:36:11.960
I see there's a certain type of comment, I guess, comment percent percent type of thing, which comes out of Jupytext.

00:36:12.660 --> 00:36:13.160
Is

00:36:13.160 --> 00:36:16.180
that understood by VS Code and PyCharm?

00:36:16.240 --> 00:36:17.120
I feel like it is.

00:36:18.220 --> 00:36:20.920
It almost treats those as cells or something.

00:36:23.060 --> 00:36:23.620
I can't remember.

00:36:23.920 --> 00:36:26.520
I think that

00:36:26.520 --> 00:36:29.840
might actually give a little bit more hint to the editor.

00:36:30.740 --> 00:36:33.700
I don't really necessarily want to derail us and try to play with it right now.

00:36:34.820 --> 00:36:37.580
So what you can do is you talked about these paired notebooks.

00:36:38.020 --> 00:36:38.160
So

00:36:38.160 --> 00:36:39.920
in addition to just getting the Python script,

00:36:41.080 --> 00:36:43.720
you can set it up to be paired.

00:36:43.870 --> 00:36:48.100
So if you go into JupyterLab and say pair notebook with something,

00:36:49.560 --> 00:36:51.300
then as the notebook changes,

00:36:51.680 --> 00:36:55.060
it'll basically probably just overwrite the output.

00:36:56.020 --> 00:36:56.180
Yep.

00:36:56.440 --> 00:36:57.620
Python file, something like that.

00:36:58.180 --> 00:36:58.300
Yep.

00:36:59.440 --> 00:37:01.500
Yeah, they sync with each other.

00:37:02.600 --> 00:37:07.020
So the Python script updates when you update the notebook.

00:37:08.400 --> 00:37:08.660
Okay.

00:37:08.870 --> 00:37:09.960
I wonder if it goes the other way.

00:37:10.320 --> 00:37:10.780
Yeah, I don't know.

00:37:11.360 --> 00:37:12.360
That would be good, right?

00:37:13.220 --> 00:37:13.320
Yeah.

00:37:13.940 --> 00:37:15.220
Anyway, that's a super cool feature.

00:37:15.570 --> 00:37:17.680
So if you're, I guess it only really applies

00:37:17.880 --> 00:37:24.000
if you're willing to kind of live with that output, right?

00:37:24.200 --> 00:37:25.720
You don't want to restructure

00:37:25.790 --> 00:37:26.720
and completely change

00:37:26.720 --> 00:37:27.540
the Python file,

00:37:27.700 --> 00:37:29.060
but you're like, I just need this thing

00:37:29.060 --> 00:37:30.220
to have a Python version.

00:37:30.920 --> 00:37:31.120
Yes.

00:37:31.490 --> 00:37:31.980
Yeah, exactly.

00:37:32.720 --> 00:37:34.800
They're really neat tools that I wasn't aware of

00:37:34.910 --> 00:37:36.860
until I started researching for this talk.

00:37:37.700 --> 00:37:37.880
Yeah.

00:37:38.440 --> 00:37:40.240
And they both are quite neat.

00:37:42.940 --> 00:37:47.260
where do you see AI in this process?

00:37:48.360 --> 00:37:50.320
Because I, you know what I mean?

00:37:50.640 --> 00:37:51.740
Like you're

00:37:51.740 --> 00:37:58.680
working, doing a lot of how do I build tools that use LLMs and

00:37:58.680 --> 00:37:59.060
so on.

00:37:59.900 --> 00:38:04.400
But a ton of the data science and software development space is like,

00:38:04.540 --> 00:38:07.640
how do I use LLMs to write code for me?

00:38:08.660 --> 00:38:14.460
So, for example, one of the things you show a lot of is here's your stub functions

00:38:14.800 --> 00:38:18.460
and let's put some nice documentation for it and then write your code for it.

00:38:19.240 --> 00:38:24.940
Could you, say, have some kind of copilot type thing?

00:38:26.060 --> 00:38:29.300
Look at just the code you copy and go, document this for me.

00:38:29.760 --> 00:38:33.720
Write me Python doc strings for this function or whatever.

00:38:35.180 --> 00:38:40.440
Yeah, and I think that's, like with many LLM questions,

00:38:41.839 --> 00:38:45.680
it's how do you know what to ask for

00:38:46.270 --> 00:38:48.400
unless you've actually gone through that process yourself

00:38:48.690 --> 00:38:49.900
and you know why it's valuable?

00:38:51.140 --> 00:38:55.040
So if you're coming to this fresh

00:38:55.320 --> 00:39:00.460
without having previous, well, like more engineering experience,

00:39:01.620 --> 00:39:03.860
how do you know that you should ask it for documentation?

00:39:04.480 --> 00:39:06.520
How do you know that doc strings exist?

00:39:09.860 --> 00:39:15.080
And I think this can work if you're in the situation

00:39:15.090 --> 00:39:18.960
where it's quite obvious what your documentation should be

00:39:19.280 --> 00:39:23.340
and there's no caveats, there's no special cases

00:39:23.430 --> 00:39:25.940
that you need to actually communicate to someone.

00:39:26.620 --> 00:39:26.820
So

00:39:26.820 --> 00:39:28.900
it's

00:39:28.900 --> 00:39:30.000
definitely useful,

00:39:32.220 --> 00:39:37.520
but it's also very easy to generate a lot of these things and then not go back

00:39:37.720 --> 00:39:41.680
and actually check that it's communicating what you want it to.

00:39:42.760 --> 00:39:44.880
Yeah. Yeah. I can just,

00:39:46.520 --> 00:39:50.680
it's easy to have it just tell you how it's doing things instead of why,

00:39:52.080 --> 00:39:55.300
or, you know, it's, it doesn't necessarily always get that right, but.

00:39:56.660 --> 00:39:58.940
So it's, I would, for me, it's definitely,

00:40:00.560 --> 00:40:07.800
a help but then I have to kind of force myself to go back and check that it is actually

00:40:08.960 --> 00:40:14.960
the point that I want to make in this documentation or that it's test if I ask an LLM to write a test

00:40:15.100 --> 00:40:21.460
for me is it actually testing what I care about in this function or is it just writing some

00:40:22.640 --> 00:40:27.639
generic test that so that I can say well there's a test but it doesn't test anything that's actually

00:40:28.420 --> 00:40:33.460
a useful input that's actually a potential thing that could go wrong with this code.

00:40:34.100 --> 00:40:37.860
Yeah. And there's always the danger if you have the LLM write the code and the test together.

00:40:38.700 --> 00:40:39.340
It'll just

00:40:39.340 --> 00:40:43.120
make it so the tests pass, not necessarily so the tests are testing the thing

00:40:43.140 --> 00:40:43.960
you care about, right?

00:40:44.660 --> 00:40:45.720
You said the tests have

00:40:45.720 --> 00:40:48.660
to pass, so now they pass. You didn't notice they

00:40:48.740 --> 00:40:51.760
actually changed in a way that no longer validates what you care about.

00:40:52.100 --> 00:40:53.479
Yeah. Just update the test

00:40:53.500 --> 00:40:53.940
till it passes.

00:40:54.880 --> 00:41:02.940
I do fear that this kind of stuff is going to create an expertise gap,

00:41:03.720 --> 00:41:04.160
chasm or

00:41:04.160 --> 00:41:08.880
whatever, where there's the people who were forced to do it because these tools didn't

00:41:09.040 --> 00:41:15.600
exist will have this tribal knowledge of here's how you do this and here's why you do it. And a

00:41:15.740 --> 00:41:22.099
lot of people who are in a hurry, especially, I'm not a programmer. I'll just have this tool help me

00:41:22.120 --> 00:41:27.180
write the tests because I'm worried about the science or worried actually about the code or

00:41:27.360 --> 00:41:32.220
whatever. And then five years down in your career, you're like, well, I've never actually written the

00:41:32.340 --> 00:41:36.960
tests, you know, and I think it's going to be a challenge. It's not just a challenge for

00:41:37.200 --> 00:41:41.880
programming or data science. It's a challenge for education. It's a challenge for so many

00:41:42.700 --> 00:41:45.820
aspects of society. But, you know, while we're on the topic of data science.

00:41:46.880 --> 00:41:53.720
Definitely. It's a huge challenge. How do you know what to ask it for if you haven't lived that process yourself?

00:41:54.260 --> 00:41:58.220
And how do you know whether the answers are correct if you haven't gone through it yourself?

00:41:59.100 --> 00:42:05.260
So, yeah, for more senior people, it's a hugely powerful tool and you can get a lot more done.

00:42:05.880 --> 00:42:11.900
But how you gain that expertise, like you say, without going through that, that's a challenge.

00:42:12.260 --> 00:42:12.420
It

00:42:12.420 --> 00:42:12.900
is a challenge.

00:42:13.300 --> 00:42:14.200
People often

00:42:14.200 --> 00:42:23.380
make the analogy comparison of calculators and math. There's some similarities, but I think it's a different scale.

00:42:25.440 --> 00:42:26.600
what I wonder

00:42:27.050 --> 00:42:28.180
is if we might see

00:42:28.800 --> 00:42:30.700
different interfaces to

00:42:31.060 --> 00:42:32.080
LLMs that help with this

00:42:32.540 --> 00:42:34.880
so just having chat is not

00:42:35.120 --> 00:42:36.900
necessarily what we

00:42:37.000 --> 00:42:38.740
want the best interface

00:42:39.100 --> 00:42:40.440
for an LLM to write

00:42:41.160 --> 00:42:42.740
code I've no idea what

00:42:43.400 --> 00:42:44.860
I would love someone to invent

00:42:45.160 --> 00:42:46.000
something that kind of

00:42:47.000 --> 00:42:48.480
helps you review

00:42:48.960 --> 00:42:49.680
and helps you

00:42:51.240 --> 00:42:52.479
learn that process

00:42:52.500 --> 00:42:57.440
but still have the increase in speed and productivity that you can get within LLM.

00:42:58.240 --> 00:42:58.420
Yeah.

00:42:59.430 --> 00:42:59.840
Well, whatever.

00:43:00.360 --> 00:43:02.000
It's going to be an interesting time.

00:43:02.320 --> 00:43:03.220
That's for sure, isn't it?

00:43:03.600 --> 00:43:03.960
Yes.

00:43:04.240 --> 00:43:05.760
It's going to be a very interesting time.

00:43:06.980 --> 00:43:12.620
So another thing that strikes me as that there's going to be a tension here

00:43:13.740 --> 00:43:18.100
has to do with what makes notebooks special in the first place, right?

00:43:18.240 --> 00:43:27.920
Notebooks are about exploring data and sort of free form and just let me try this, let me try that.

00:43:28.300 --> 00:43:29.600
Be an experimental and fluid.

00:43:30.600 --> 00:43:35.940
And this process, while not completely removing that, does solidify it quite a bit.

00:43:36.100 --> 00:43:37.600
We're down to these five steps.

00:43:37.720 --> 00:43:38.760
It takes these arguments.

00:43:39.840 --> 00:43:46.400
And maybe as an experienced software developer, you're ready to just refactor this code and keep working on it.

00:43:46.440 --> 00:43:50.640
But I can see earlier stage people as being a challenge.

00:43:50.800 --> 00:43:52.600
Like, well, now I can no longer just play with the data

00:43:52.720 --> 00:43:55.800
and just I can't do like df.head and see what the heck it is.

00:43:55.920 --> 00:43:56.960
Like, it's lost to me.

00:43:58.220 --> 00:44:02.720
So what do you think about this tension between, you know,

00:44:02.780 --> 00:44:07.820
the notebook freedom and the more rigorous software side of things?

00:44:08.820 --> 00:44:12.700
I would see it as different phases of a data science project.

00:44:13.780 --> 00:44:18.420
And not all data science projects will even make it to this stage.

00:44:19.560 --> 00:44:26.640
So some, the exploratory process, that might give you your answers.

00:44:27.190 --> 00:44:31.140
That might be your project is done while you're still in notebook land.

00:44:32.620 --> 00:44:42.560
And in some situations, you'll hand over to a development team to go through the process of taking your code into a production environment.

00:44:42.920 --> 00:44:58.240
So there's going to be – so depending on the makeup of the team and your exact job role, you might not – you're going to break out of this process at a different point.

00:44:58.820 --> 00:44:59.020
Sure.

00:44:59.920 --> 00:45:00.080
Okay.

00:45:00.260 --> 00:45:00.400
I

00:45:00.400 --> 00:45:05.820
think thinking about it in terms of a different phase of the project is useful.

00:45:06.980 --> 00:45:10.840
So you go through the exploratory process

00:45:11.000 --> 00:45:13.540
and you've done all that you need to do

00:45:13.600 --> 00:45:16.400
of viewing the data, of exploring the data.

00:45:16.560 --> 00:45:19.860
You know what is in your data set.

00:45:20.000 --> 00:45:21.800
You're really familiar with it.

00:45:22.720 --> 00:45:26.000
And then hopefully you can move to that stage

00:45:26.000 --> 00:45:28.420
where you don't need to be looking at it

00:45:28.540 --> 00:45:29.320
in quite the same way.

00:45:30.840 --> 00:45:34.439
But you should also be using your tests

00:45:34.440 --> 00:45:39.720
and your debugger to check that your data is what it needs to be

00:45:39.820 --> 00:45:42.160
when you move to this next step.

00:45:42.280 --> 00:45:43.880
But you probably need to do that less

00:45:44.520 --> 00:45:47.980
because you've done that exploratory work to figure out what there is

00:45:47.980 --> 00:45:50.320
and what you need to use in the final project.

00:45:53.320 --> 00:45:56.140
I phrase it as a negative, like you're giving up the stuff.

00:45:56.660 --> 00:46:01.100
I think maybe we should rethink about it as like a positive.

00:46:01.240 --> 00:46:02.500
I was listening to you talk and I'm like,

00:46:02.660 --> 00:46:04.720
well, when you get to this stage,

00:46:05.060 --> 00:46:07.260
it's kind of like your project has succeeded.

00:46:08.100 --> 00:46:08.320
Exactly.

00:46:08.540 --> 00:46:08.960
In the sense

00:46:08.960 --> 00:46:10.880
like you've done all you need to do,

00:46:11.040 --> 00:46:12.780
now it's ready to put it to use.

00:46:13.260 --> 00:46:13.560
Yes.

00:46:14.040 --> 00:46:16.080
Let's put this in the hands of some users.

00:46:16.300 --> 00:46:17.580
Let's put it on prime time.

00:46:17.820 --> 00:46:19.340
Let's share it with different teams.

00:46:20.060 --> 00:46:20.640
Yeah, exactly.

00:46:20.900 --> 00:46:21.220
So

00:46:21.220 --> 00:46:22.140
see it as a celebration,

00:46:22.480 --> 00:46:25.740
not like I'm losing my freedom or whatever,

00:46:26.160 --> 00:46:27.380
you know, to just keep exploring.

00:46:28.060 --> 00:46:29.300
I think that's pretty cool.

00:46:30.480 --> 00:46:32.120
Similar to maybe legacy code.

00:46:32.420 --> 00:46:35.540
I know people lament, like, oh, I've got this thing,

00:46:35.720 --> 00:46:40.100
and it's so badly written, and it's so convoluted,

00:46:41.179 --> 00:46:43.240
but it's so important we have to still use it.

00:46:43.290 --> 00:46:46.380
Like, well, that's also kind of like a success story,

00:46:46.590 --> 00:46:49.520
even if it's a bit of a hassle in some of the ways.

00:46:50.100 --> 00:46:52.400
Yeah, if your code has that much longevity,

00:46:52.630 --> 00:46:53.920
it's clearly doing something right.

00:46:54.519 --> 00:46:55.540
Exactly. Celebrate that.

00:46:57.140 --> 00:46:57.520
Celebrate it.

00:46:57.720 --> 00:47:03.400
Okay, let's talk DevOps, ML Ops a little bit.

00:47:05.180 --> 00:47:09.980
What are your thoughts on later, right?

00:47:10.070 --> 00:47:11.180
So I've written this code.

00:47:11.300 --> 00:47:12.260
Maybe I've trained some models

00:47:12.600 --> 00:47:14.220
or put in some algorithms in place.

00:47:16.080 --> 00:47:20.140
How do you keep it working, keep it running, monitor it?

00:47:20.360 --> 00:47:21.320
What are your thoughts around this?

00:47:22.940 --> 00:47:25.960
I'm a big proponent of standardization.

00:47:26.860 --> 00:47:30.560
So if your company has many machine learning models,

00:47:30.980 --> 00:47:34.520
then picking some kind of standardized framework,

00:47:34.840 --> 00:47:36.780
putting them into production is huge.

00:47:37.080 --> 00:47:41.540
It's so easy to just have ad hoc code for each model

00:47:42.280 --> 00:47:45.500
and then it becomes extremely hard to maintain.

00:47:45.800 --> 00:47:51.240
You can't keep track of what many models are doing.

00:47:51.940 --> 00:47:54.900
So picking one of the popular frameworks

00:47:54.920 --> 00:47:57.280
and putting it into production is key here.

00:47:57.800 --> 00:48:02.040
And those will come with things like validating your data

00:48:02.120 --> 00:48:06.380
to make sure that your new training data has the same statistics as the old one.

00:48:07.180 --> 00:48:11.060
You can set up automated analysis so that you know that

00:48:12.080 --> 00:48:15.100
if your production model has dipped below some certain threshold,

00:48:15.400 --> 00:48:18.340
you can trigger a retraining loop.

00:48:19.540 --> 00:48:29.920
Being able to automate it and sort of step back from the manual process of training and deploying the model is huge here, I think.

00:48:30.660 --> 00:48:32.000
Yeah, observability.

00:48:32.960 --> 00:48:33.080
Yes.

00:48:33.220 --> 00:48:33.880
And those sorts of things.

00:48:34.560 --> 00:48:35.600
So when you say picking

00:48:35.600 --> 00:48:36.240
one of the frameworks,

00:48:36.600 --> 00:48:37.240
what frameworks

00:48:37.240 --> 00:48:37.740
are we talking?

00:48:38.780 --> 00:48:45.440
So TensorFlow Extended, MLflow, AWS, SageMaker.

00:48:46.320 --> 00:48:48.400
There may well be others these days as well.

00:48:49.000 --> 00:49:06.880
Okay. Yeah, something that comes with this all built in. So the ML ops side of things basically becomes operating TensorFlow Extended or operating SageMaker. And then if something goes wrong, then you can maybe go back to the data scientists

00:49:06.880 --> 00:49:08.020
and

00:49:08.020 --> 00:49:16.720
say, it looks like it's not relevant to the data that we're working with, right? Or something along those lines, right? It's drifted

00:49:16.720 --> 00:49:17.500
or...

00:49:17.520 --> 00:49:18.240
Yeah, yeah.

00:49:19.120 --> 00:49:23.360
If it's sort of a simple, oh, our data has changed slightly,

00:49:24.280 --> 00:49:26.880
then you can hopefully just trigger a retraining loop.

00:49:27.000 --> 00:49:31.320
But then other times you might be like, oh, our customers have suddenly decided

00:49:31.580 --> 00:49:35.200
to behave totally differently because of some external event.

00:49:35.380 --> 00:49:37.140
We need to get back to the drawing board with this.

00:49:37.700 --> 00:49:40.000
Or we've decided to add in a new feature.

00:49:40.280 --> 00:49:42.340
This feature isn't quite what we wanted.

00:49:42.600 --> 00:49:43.860
Let's change this up a bit.

00:49:46.680 --> 00:50:08.940
But I think one of the biggest tools in the MLOps toolkit is just being, just remaining cynical about what your machine learning model is doing and expecting it to fail in unexpected ways and give examples, give answers that you have no idea that have failed in ways that you never even thought of.

00:50:09.170 --> 00:50:10.120
It's going to keep happening.

00:50:10.780 --> 00:50:11.080
Yeah.

00:50:12.520 --> 00:50:19.340
What about understanding code running in Linux or in containers or stuff like that?

00:50:19.500 --> 00:50:26.880
I can easily see a lot of folks coming from non-software backgrounds going, I already didn't know what the terminal was.

00:50:27.080 --> 00:50:32.220
How am I supposed to work with containers inside of Linux machines or something like that?

00:50:33.960 --> 00:50:35.620
Yeah, that's a great question.

00:50:36.880 --> 00:50:38.140
I don't have an answer for you.

00:50:38.140 --> 00:50:40.280
I'm just curious what your thoughts are, you know, because it's hard.

00:50:40.720 --> 00:50:41.400
It is hard.

00:50:46.040 --> 00:50:46.860
I don't know

00:50:47.220 --> 00:50:48.120
for me personally

00:50:49.840 --> 00:50:51.300
I assume that these things

00:50:51.440 --> 00:50:51.840
are learnable

00:50:53.120 --> 00:50:53.800
there's going

00:50:53.800 --> 00:50:54.080
to be

00:50:54.940 --> 00:50:56.900
you might have to play around with these things

00:50:57.120 --> 00:50:58.960
and read three different types

00:50:59.040 --> 00:51:01.020
of documentation before it starts to make sense

00:51:01.420 --> 00:51:02.980
but there are a lot of

00:51:03.220 --> 00:51:04.920
resources out there to get you from

00:51:05.560 --> 00:51:06.920
not knowing how these things

00:51:07.200 --> 00:51:08.740
work, them seeming like magic

00:51:09.100 --> 00:51:10.960
to being able

00:51:10.980 --> 00:51:13.500
to use them in the way that you want to.

00:51:14.100 --> 00:51:14.220
Yeah.

00:51:15.460 --> 00:51:15.940
Yeah, good advice.

00:51:16.140 --> 00:51:20.060
I think I would say to folks something to the effect of

00:51:23.140 --> 00:51:26.580
if you see other people who look like they understand this really well

00:51:26.620 --> 00:51:28.040
and you're like, well, those people just know it.

00:51:28.160 --> 00:51:30.360
And I'm always confused or whatever.

00:51:31.880 --> 00:51:34.480
Almost all those people got there by taking little steps,

00:51:34.860 --> 00:51:38.060
failing, reading the documentation, adding one more little skill.

00:51:38.200 --> 00:51:39.960
Okay, now I can figure out what the size of files

00:51:40.520 --> 00:51:41.740
over at SSH.

00:51:41.800 --> 00:51:42.640
Okay, next.

00:51:43.120 --> 00:51:45.620
And you just work your way through

00:51:46.280 --> 00:51:47.520
little periods of frustration

00:51:48.620 --> 00:51:49.020
until

00:51:49.020 --> 00:51:49.840
you get there.

00:51:49.940 --> 00:51:50.620
And it can look,

00:51:51.440 --> 00:51:53.560
you look down the road at people who have made,

00:51:54.240 --> 00:51:55.400
sort of made the whole transition

00:51:55.600 --> 00:51:56.940
or they really understand that all well.

00:51:57.000 --> 00:51:57.920
And it's like, well, how do they,

00:51:58.320 --> 00:51:59.500
there's no way I can do that.

00:51:59.640 --> 00:51:59.920
I just,

00:52:00.200 --> 00:52:00.880
that's

00:52:00.880 --> 00:52:02.380
beyond, it's not.

00:52:02.640 --> 00:52:04.440
It's just, you gotta be willing

00:52:04.440 --> 00:52:05.260
to take the little steps

00:52:07.120 --> 00:52:08.900
and embrace the frustration

00:52:09.620 --> 00:52:11.360
because on the other side is a new skill.

00:52:12.480 --> 00:52:15.880
And I think if you are one of these people with that expertise,

00:52:16.240 --> 00:52:20.760
then remembering that you didn't used to have that knowledge

00:52:21.300 --> 00:52:23.940
and being open to answering the questions of people

00:52:24.000 --> 00:52:25.980
who are just getting into that,

00:52:26.900 --> 00:52:29.800
it would be great if more people would be able to remember that.

00:52:30.560 --> 00:52:31.500
Yeah, I absolutely agree.

00:52:31.780 --> 00:52:32.700
Don't say it's a dumb question.

00:52:33.340 --> 00:52:34.040
There are no dumb

00:52:34.040 --> 00:52:34.420
questions.

00:52:34.760 --> 00:52:39.580
Yes, but remember that you had that same dumb question 10 years ago

00:52:39.600 --> 00:52:40.860
or something like that, absolutely.

00:52:44.200 --> 00:52:45.300
You talked about these different frameworks

00:52:46.180 --> 00:52:47.140
and potentially others.

00:52:48.000 --> 00:52:48.500
How do you pick?

00:52:55.840 --> 00:52:57.180
Sometimes there's not even a choice

00:52:57.350 --> 00:53:00.480
because your company is already using AWS

00:53:00.940 --> 00:53:01.920
for storing the data.

00:53:02.550 --> 00:53:04.420
Yeah, that's fair because you said, like,

00:53:04.520 --> 00:53:06.400
if you're going to standardize on one,

00:53:06.530 --> 00:53:06.640
if

00:53:06.640 --> 00:53:07.440
they've already standardized,

00:53:07.730 --> 00:53:08.960
like, well, you pick that one.

00:53:09.280 --> 00:53:30.340
Yes. So that's probably the simplest way of choosing. But I think you've got to, it involves putting some thoughts into the project at the start and being like, okay, what's going to be the scope of our machine learning in this company?

00:53:31.040 --> 00:53:39.240
are we expecting to have like 50 different models doing different things and but a lot of the time

00:53:39.400 --> 00:53:44.420
it's you don't know this is going to be successful until you start doing it so

00:53:44.420 --> 00:53:45.480
yeah you

00:53:45.480 --> 00:53:45.880
get to a

00:53:46.100 --> 00:53:51.060
situation where you already have a few models they're starting to become successful um then

00:53:51.160 --> 00:53:55.760
you suddenly you need to transfer them all onto some framework.

00:53:59.080 --> 00:54:07.380
I think sort of checking that they do all the things that are important in your use case.

00:54:07.720 --> 00:54:13.980
So if you expect to be needing to retrain your model very frequently, then something

00:54:14.000 --> 00:54:15.280
that makes that easy.

00:54:16.220 --> 00:54:23.100
If it's really important that your model gives some specific answers in some specific case,

00:54:23.260 --> 00:54:25.900
then good observability is very important.

00:54:27.780 --> 00:54:28.320
Yeah, absolutely.

00:54:28.740 --> 00:54:33.340
Okay, so I just, I'm a huge fan of awesome lists.

00:54:33.760 --> 00:54:34.740
I'm kind of

00:54:34.740 --> 00:54:39.600
a sucker for listicles in general, but awesome lists are cool.

00:54:40.140 --> 00:54:45.760
So I just found an awesome ML Ops list.

00:54:46.680 --> 00:54:47.640
And I'll put that in the show notes.

00:54:47.760 --> 00:54:49.540
People can go around.

00:54:51.260 --> 00:54:52.200
It looks really cool.

00:54:52.380 --> 00:54:53.880
I mean, I just found it, so I don't know.

00:54:54.060 --> 00:54:55.920
But I'll put that in there as a resource.

00:54:56.040 --> 00:55:01.040
People can use that to start the research journey, I guess.

00:55:01.300 --> 00:55:01.660
What do you think?

00:55:02.320 --> 00:55:02.720
Yeah, definitely.

00:55:03.120 --> 00:55:08.340
I'd also recommend the ML Ops community, which was a big Slack workspace

00:55:08.360 --> 00:55:10.220
of people talking about all things

00:55:10.420 --> 00:55:12.280
MRUps. It's a good place

00:55:12.300 --> 00:55:12.780
to get into.

00:55:15.000 --> 00:55:15.800
Yeah. Absolutely.

00:55:16.680 --> 00:55:16.960
Okay.

00:55:17.540 --> 00:55:19.820
I want to talk to you about one more thing.

00:55:20.700 --> 00:55:20.880
Maybe.

00:55:23.460 --> 00:55:24.280
No, I think that

00:55:24.800 --> 00:55:25.360
might be it.

00:55:26.540 --> 00:55:26.660
So,

00:55:28.680 --> 00:55:30.200
yeah, we're getting near the end,

00:55:30.320 --> 00:55:32.020
so I guess we should just wrap it up.

00:55:33.040 --> 00:55:34.240
Did you want to give away a copy

00:55:34.280 --> 00:55:35.940
of your book? We're trying tentatively,

00:55:36.500 --> 00:55:36.600
maybe?

00:55:37.040 --> 00:55:38.320
Yes, I will have

00:55:38.320 --> 00:55:42.400
some e-book copies of software engineering for data scientists

00:55:42.780 --> 00:55:45.480
to give away to listeners of this show.

00:55:46.180 --> 00:55:49.080
I guess we'll put out the details with the

00:55:49.080 --> 00:55:49.360
podcast.

00:55:49.780 --> 00:55:50.400
Yeah, we'll figure it out.

00:55:50.400 --> 00:55:51.740
And I'll put it in the show notes,

00:55:51.900 --> 00:55:55.820
which will eventually find their way to the YouTube live stream

00:55:56.580 --> 00:55:57.720
once I get that turned around.

00:55:58.780 --> 00:56:02.600
But, yeah, if you want to get a free copy of the book,

00:56:03.120 --> 00:56:04.480
I imagine there's limited copies,

00:56:04.620 --> 00:56:06.140
so you'll have to act soon when you hear

00:56:06.140 --> 00:56:06.540
this episode

00:56:06.540 --> 00:56:06.880
come out.

00:56:06.940 --> 00:56:08.220
But I'll put in some kind of instructions.

00:56:08.320 --> 00:56:09.980
into the show notes and you can check that out.

00:56:10.760 --> 00:56:12.860
Yeah, maybe we'll put the names into a hat

00:56:12.910 --> 00:56:15.940
and pick out however many copies I'm able to give out.

00:56:16.460 --> 00:56:16.800
Exactly.

00:56:17.030 --> 00:56:18.420
So here's what I propose.

00:56:18.820 --> 00:56:21.740
I think what we're going to do is we're going to create a notebook,

00:56:22.030 --> 00:56:23.160
figure out how to pick all the names,

00:56:23.480 --> 00:56:27.660
we're going to then productize it, put it into TensorFlow Extended,

00:56:28.260 --> 00:56:31.380
train an LLM, and then we're going to let it pick the winners.

00:56:31.640 --> 00:56:32.200
How's that sound?

00:56:32.560 --> 00:56:33.060
That sounds

00:56:33.060 --> 00:56:33.400
perfect.

00:56:34.559 --> 00:56:35.640
Totally, totally easy.

00:56:36.260 --> 00:56:36.680
I love it.

00:56:39.000 --> 00:56:39.320
All right.

00:56:39.640 --> 00:56:47.900
Well, let's close things out with maybe a little advice for people who are coming into the space.

00:56:48.060 --> 00:56:52.120
They've been using notebooks for exploratory type of work generally.

00:56:52.880 --> 00:57:00.500
What do you tell them to maybe take their notebooks to the next level or take their code out of notebooks into the Python to do the next thing?

00:57:01.560 --> 00:57:09.560
Yeah, I think it's like, I think my message here is please share your code with other people,

00:57:09.860 --> 00:57:19.040
share what your code can do with the world and make your code so that it is easy for other people

00:57:19.400 --> 00:57:26.780
to use, so that it is robust, so that it's reproducible and just encouraging people to

00:57:26.800 --> 00:57:34.060
put that time in to refactor and improve their codes because it is very worthwhile and it's not

00:57:34.110 --> 00:57:35.420
as hard as you think it's going to be

00:57:35.420 --> 00:57:39.060
no i i think that's great advice and i would just throw out also

00:57:39.340 --> 00:57:42.580
that if you're not familiar with it if you've been working in notebooks a lot of times

00:57:44.960 --> 00:57:53.000
the more software oriented editors are often very very good at algorithmically refactoring your code

00:57:53.160 --> 00:57:58.040
You highlight a bet and go, make that a function, and it'll do it without making mistakes.

00:57:59.240 --> 00:58:03.280
It might not be the result you ended up actually wanted, but it will do it without mistakes.

00:58:03.380 --> 00:58:08.360
And so you can leverage some of these tools to sort of keep it to be, make it less error-prone.

00:58:10.280 --> 00:58:16.420
Yeah, that's a great strategy and can prompt some ideas for how you might want to move from one to the other.

00:58:16.620 --> 00:58:20.640
And you can accept those or you can be like, oh, no, actually, I wanted it to do this.

00:58:20.800 --> 00:58:22.220
So, yeah, great starting point.

00:58:22.320 --> 00:58:22.820
Control Z.

00:58:23.140 --> 00:58:23.540
No, I don't want

00:58:23.540 --> 00:58:23.980
that anymore.

00:58:24.340 --> 00:58:25.380
I changed my mind.

00:58:25.520 --> 00:58:26.080
That looks bad.

00:58:26.980 --> 00:58:27.860
But at least you don't waste time on it.

00:58:27.980 --> 00:58:28.200
All right.

00:58:28.250 --> 00:58:32.320
Well, Catherine, thank you so much for being here, sharing your ideas.

00:58:32.650 --> 00:58:38.020
I will link to your talk if people want to see the PyCon version as well.

00:58:38.320 --> 00:58:40.260
So thanks for the excellent ideas.

00:58:41.140 --> 00:58:41.600
Thanks for being here.

00:58:42.160 --> 00:58:42.520
Thanks.

00:58:42.720 --> 00:58:43.720
This has been a lot of fun.

00:58:44.240 --> 00:58:44.820
Great conversation.

00:58:45.480 --> 00:58:45.880
Yeah, bye-bye.

00:58:46.180 --> 00:58:46.460
Bye.

