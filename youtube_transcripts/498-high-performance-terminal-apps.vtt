WEBVTT

00:00:00.001 --> 00:00:03.240
Will, welcome back to Talk Python to Me.

00:00:03.240 --> 00:00:04.360
It's great to talk with you.

00:00:04.360 --> 00:00:06.000
Thank you. It's good to be here again.

00:00:06.000 --> 00:00:09.080
Yeah. It's going to be really fun.

00:00:09.080 --> 00:00:13.040
I've built some really cool apps with Rich,

00:00:13.040 --> 00:00:15.640
and we're going to talk about Rich and Textual.

00:00:15.640 --> 00:00:18.480
Probably a little more on the Textual side this time around,

00:00:18.480 --> 00:00:25.720
but still, a very cool revolution you're bringing to the terminal.

00:00:25.720 --> 00:00:30.320
Yeah. A very quiet but pretty revolution. I like it.

00:00:30.320 --> 00:00:32.120
Indeed. Okay.

00:00:32.120 --> 00:00:34.960
So we want to talk about Textual.

00:00:34.960 --> 00:00:39.360
You wrote a cool article called Algorithms for High Performance Terminal Apps,

00:00:39.360 --> 00:00:41.080
which I thought would be fun to dive in,

00:00:41.080 --> 00:00:44.240
but we're going to also keep it more of a broad-ranging conversation.

00:00:44.240 --> 00:00:46.200
At the start of all that,

00:00:46.200 --> 00:00:50.600
it's been a little while since I've had you on the show.

00:00:50.600 --> 00:00:55.440
Again, tell people who maybe haven't listened to that episode or episodes,

00:00:55.440 --> 00:00:56.680
who you are.

00:00:56.680 --> 00:00:59.480
Sure. My name is Wilma Guggen.

00:00:59.480 --> 00:01:02.400
I'm a software developer, Python developer,

00:01:02.400 --> 00:01:05.080
probably like most of your listeners.

00:01:05.080 --> 00:01:08.920
I achieved a certain amount of infamy

00:01:08.920 --> 00:01:12.280
when I built this library called Rich,

00:01:12.280 --> 00:01:13.800
which a lot of people use.

00:01:13.800 --> 00:01:15.800
If you see some fancy output in your terminal,

00:01:15.800 --> 00:01:17.120
that might have been me.

00:01:17.120 --> 00:01:20.600
And I founded a startup called Textualize,

00:01:20.600 --> 00:01:25.640
which is all about improving the developer experience in the terminal.

00:01:25.640 --> 00:01:27.560
And I'm sure we'll discuss Textual,

00:01:27.560 --> 00:01:30.240
which is my other Python library in this show.

00:01:30.240 --> 00:01:32.240
Yeah, absolutely.

00:01:33.240 --> 00:01:35.120
I'm super excited for it.

00:01:35.120 --> 00:01:39.400
And is this close to the one year anniversary for Textual?

00:01:39.400 --> 00:01:40.880
Is that...

00:01:40.880 --> 00:01:42.400
It was an anniversary of some sort,

00:01:42.400 --> 00:01:46.280
because we're going to talk about one of your articles.

00:01:47.480 --> 00:01:51.840
It's actually closer to three years since I founded Textualize.

00:01:51.840 --> 00:01:52.960
Oh, no, you know, it's not anniversary.

00:01:52.960 --> 00:01:54.440
It's the 1.0 milestone.

00:01:54.440 --> 00:01:55.120
Oh, right. Yeah.

00:01:55.120 --> 00:01:57.600
1.0 year, the 1.0 version.

00:01:57.600 --> 00:01:58.720
There we go.

00:01:58.720 --> 00:01:59.080
Yeah.

00:01:59.080 --> 00:02:00.720
That's what I was thinking.

00:02:00.720 --> 00:02:01.320
Yeah.

00:02:01.320 --> 00:02:04.320
So Textual follows Semver,

00:02:04.320 --> 00:02:06.520
which I imagine people are familiar with.

00:02:06.520 --> 00:02:08.960
When you're on the zero version,

00:02:08.960 --> 00:02:12.000
you have a bit of flexibility and you can make breaking changes.

00:02:12.000 --> 00:02:13.040
We try not to,

00:02:13.040 --> 00:02:16.240
but you can make breaking changes and it gives you a bit of freedom

00:02:16.240 --> 00:02:18.760
early on to play around with things.

00:02:18.760 --> 00:02:20.200
But we,

00:02:20.200 --> 00:02:24.280
some people stick to zero ver just forever,

00:02:24.280 --> 00:02:25.840
which is fine if that's what you do.

00:02:25.840 --> 00:02:27.800
But when you go to 1.0,

00:02:27.800 --> 00:02:29.120
it advertises to people that

00:02:29.120 --> 00:02:31.840
this is stable.

00:02:31.840 --> 00:02:33.000
You can rely on the interface,

00:02:33.000 --> 00:02:37.600
not changing too quickly.

00:02:37.600 --> 00:02:39.880
And it being kind of,

00:02:39.880 --> 00:02:41.760
if there are any changes, it's well documented.

00:02:41.760 --> 00:02:45.000
So it's, if you followed along,

00:02:45.000 --> 00:02:48.200
it's a very modest release from the last zero version

00:02:48.200 --> 00:02:50.720
to the 1.0 version.

00:02:50.720 --> 00:02:52.360
But it says to the world,

00:02:52.360 --> 00:02:54.720
hey, we think Textualize is ready.

00:02:54.720 --> 00:02:56.680
You can start using it in production,

00:02:56.680 --> 00:02:58.960
even though you could probably have been using it in production

00:02:58.960 --> 00:02:59.920
for a year.

00:02:59.920 --> 00:03:01.360
I'm sure that you could have.

00:03:01.360 --> 00:03:02.080
I'm sure you could have.

00:03:02.080 --> 00:03:05.920
Are you familiar with zero ver.org?

00:03:05.920 --> 00:03:09.360
The number, the numeral zero ver.org?

00:03:09.360 --> 00:03:10.720
Have you seen this?

00:03:10.720 --> 00:03:12.000
No, I didn't.

00:03:12.000 --> 00:03:14.560
I thought it was just an aspect of Semver.

00:03:14.560 --> 00:03:15.520
I didn't realize it was.

00:03:15.520 --> 00:03:17.840
It is absolutely an aspect of Semver.

00:03:17.840 --> 00:03:20.560
But this, I can't remember who put this together.

00:03:20.560 --> 00:03:21.520
Does it say at the bottom?

00:03:22.320 --> 00:03:23.840
Let's see about the about page.

00:03:23.840 --> 00:03:26.960
Publish.

00:03:26.960 --> 00:03:27.760
Yeah, that's what I thought.

00:03:27.760 --> 00:03:28.880
I thought it was Mahmoud Hashemi.

00:03:28.880 --> 00:03:29.840
Amazing.

00:03:29.840 --> 00:03:30.720
Yeah.

00:03:30.720 --> 00:03:32.800
So Mahmoud put this together.

00:03:32.800 --> 00:03:35.120
And basically, it calls out.

00:03:36.240 --> 00:03:41.840
I think it's a little contrarian to, you know, there's a lot of, especially larger companies

00:03:41.840 --> 00:03:46.960
that have rules about what version you're allowed to use and is software ready enough.

00:03:46.960 --> 00:03:49.440
If it's a .3, we can't use it.

00:03:49.440 --> 00:03:50.000
It's not ready.

00:03:50.000 --> 00:03:53.920
Not until it's a 1.0 or a 2.0 or something along those lines.

00:03:53.920 --> 00:03:54.240
Right.

00:03:54.240 --> 00:04:04.320
And so this is the popular projects that are still really, really low in their versions.

00:04:04.320 --> 00:04:06.720
It says, "Welcome to Semver 0.0.1."

00:04:06.720 --> 00:04:12.640
And if you go down here, it says like, "Look, React Native is 0.78."

00:04:12.640 --> 00:04:13.520
Right, right.

00:04:13.520 --> 00:04:13.760
Yeah.

00:04:13.760 --> 00:04:14.960
Even though it's 10 years old.

00:04:14.960 --> 00:04:18.320
Hugo, which I use for my blog and love it.

00:04:18.320 --> 00:04:20.400
It's got 77,000 GitHub stars.

00:04:20.400 --> 00:04:22.960
It was first released 12 years ago.

00:04:22.960 --> 00:04:25.520
More than a decade long.

00:04:25.520 --> 00:04:26.080
Yeah.

00:04:26.080 --> 00:04:29.040
It's still 0.something.

00:04:29.040 --> 00:04:31.200
Let's see if there's some that are really extreme.

00:04:31.200 --> 00:04:31.680
Yeah.

00:04:31.680 --> 00:04:37.280
I think the problem is that non-software developers have a different idea of what versions mean.

00:04:37.280 --> 00:04:39.040
Yes, I know.

00:04:39.040 --> 00:04:40.800
We know that they're for about compatibility.

00:04:40.800 --> 00:04:47.440
But when you're marketing it, 1.0 is like, you advertise it, you make a splash about it.

00:04:47.440 --> 00:04:48.640
That's when it's actually out.

00:04:48.640 --> 00:04:49.200
You can use it.

00:04:49.200 --> 00:04:51.120
The other one is just like a toy, right?

00:04:51.120 --> 00:04:51.120
Yeah.

00:04:51.120 --> 00:04:53.680
And then boom, 2.0.

00:04:53.680 --> 00:04:54.240
Yeah.

00:04:54.240 --> 00:04:54.800
Yeah.

00:04:54.800 --> 00:04:54.800
Let's see.

00:04:54.800 --> 00:04:54.800
Yeah.

00:04:54.800 --> 00:04:58.080
NeoVim, 0.10.

00:04:58.080 --> 00:05:01.520
scikit-learn, it's 15 years old.

00:05:01.520 --> 00:05:02.480
It's 0.17.

00:05:02.480 --> 00:05:06.720
But so I think I totally hear what you're saying, right?

00:05:06.720 --> 00:05:08.800
About like, yes, this...

00:05:08.800 --> 00:05:11.360
And I think we both agree, like what this should mean.

00:05:11.360 --> 00:05:20.080
If your thing is 0.17, probably that means there's a good chance that there might be some

00:05:20.080 --> 00:05:22.160
adaptations to the API.

00:05:22.160 --> 00:05:22.960
Mm-hmm.

00:05:22.960 --> 00:05:29.360
At the same time, if you're scikit-learn and you've been around for 15 years, it might be

00:05:29.360 --> 00:05:31.920
time to bump that to something over 0.17.

00:05:31.920 --> 00:05:33.040
You know what I mean?

00:05:33.040 --> 00:05:34.240
What do you think?

00:05:34.240 --> 00:05:35.040
It's...

00:05:35.040 --> 00:05:40.240
I think it's the developer-led projects, the ones which are just a bunch of developers releasing

00:05:40.240 --> 00:05:41.920
open source.

00:05:41.920 --> 00:05:44.400
We developers don't like to make too much promises.

00:05:44.400 --> 00:05:45.440
Exactly.

00:05:45.440 --> 00:05:47.200
If we were to put a 1.0 on it...

00:05:47.200 --> 00:05:50.880
Who's going to be on the hook for making that 1.0 and then they're stuck with it, right?

00:05:50.880 --> 00:05:51.280
Exactly.

00:05:51.280 --> 00:05:51.840
Yeah.

00:05:51.840 --> 00:05:55.920
We know that 1.0 is not going to be perfect and bug-free.

00:05:55.920 --> 00:06:02.880
So we don't necessarily want to be on the hook for it not being perfect.

00:06:02.880 --> 00:06:04.000
Yeah, I know.

00:06:04.000 --> 00:06:08.560
At the same time, you're on the hook to not change scikit-learn at this point anyway.

00:06:08.560 --> 00:06:08.560
Yeah.

00:06:08.560 --> 00:06:10.000
You know what I mean?

00:06:10.000 --> 00:06:14.000
And I'm only picking on them because I know they're so well-loved in the community and they're

00:06:15.280 --> 00:06:19.680
very, very common. Unlike say, Ruff, which is on this list, but Ruff is pretty new.

00:06:19.680 --> 00:06:24.160
Anyway, I think I'll put this in the show notes.

00:06:24.160 --> 00:06:24.720
ZeroVer.

00:06:24.720 --> 00:06:25.600
Thanks.

00:06:25.600 --> 00:06:26.720
That was really fun.

00:06:26.720 --> 00:06:30.480
So let's talk about terminals.

00:06:30.480 --> 00:06:32.800
Terminal revolution.

00:06:32.800 --> 00:06:34.640
I think there's a...

00:06:34.640 --> 00:06:37.120
It's a pretty interesting time for terminals.

00:06:37.120 --> 00:06:43.280
Both the application that runs your terminal, as well as

00:06:44.560 --> 00:06:52.400
closer to what you're doing, building applications that are like CLI apps or 2e apps, as we'll

00:06:52.400 --> 00:06:54.000
coin the term.

00:06:54.000 --> 00:06:54.960
No, you've coined the term.

00:06:54.960 --> 00:06:57.040
We'll tell people about the term if they don't know.

00:06:57.040 --> 00:06:58.720
Right?

00:06:58.720 --> 00:07:00.480
I mean, we've got Warp.

00:07:00.480 --> 00:07:02.160
We've got GhostTTY.

00:07:02.160 --> 00:07:03.280
I don't know how you say it.

00:07:03.280 --> 00:07:03.840
Ghostity.

00:07:03.840 --> 00:07:05.440
Whatever.

00:07:05.440 --> 00:07:08.960
A bunch of other options coming along for terminals that are...

00:07:10.000 --> 00:07:11.760
make being in the terminal nicer.

00:07:11.760 --> 00:07:12.080
Yeah.

00:07:12.080 --> 00:07:18.480
And I think also draw people into wanting to build apps that run in that space rather than

00:07:18.480 --> 00:07:19.440
try to get away from it.

00:07:19.440 --> 00:07:19.840
Right?

00:07:19.840 --> 00:07:20.160
Yeah.

00:07:20.160 --> 00:07:28.560
It's not macOS where it's just the default Z shell with no history and it's like white with

00:07:28.560 --> 00:07:32.560
weird fonts or CMD on Windows where you're like, what is this thing?

00:07:32.560 --> 00:07:34.560
What are your thoughts on this?

00:07:34.560 --> 00:07:38.960
I mean, first of all, maybe just on the apps that run, do you have a favorite terminal app

00:07:38.960 --> 00:07:39.360
that you run?

00:07:39.360 --> 00:07:43.760
I've been using iTerm for the last few years.

00:07:43.760 --> 00:07:44.880
It's kind of my daily driver.

00:07:46.160 --> 00:07:47.280
But there's a few other good ones.

00:07:47.280 --> 00:07:52.480
There's Alacrity and Kitty and then GhostTTY or GhostTTY.

00:07:52.480 --> 00:07:53.040
I'm not sure.

00:07:53.040 --> 00:07:54.480
That's the new kid on the block.

00:07:54.480 --> 00:07:55.360
It is the new kid on the block.

00:07:55.360 --> 00:07:56.240
And it is very good.

00:07:56.240 --> 00:07:57.760
It is very good indeed.

00:07:57.760 --> 00:08:00.960
But I like iTerm's feature set.

00:08:00.960 --> 00:08:06.320
It's not the fastest, but it's fairly reliable and it's got lots of other features.

00:08:06.320 --> 00:08:07.280
Do you...

00:08:07.280 --> 00:08:08.480
I played around with...

00:08:08.480 --> 00:08:09.520
Yeah, sorry, Guy.

00:08:09.520 --> 00:08:12.000
I played around with Warp.dev as well.

00:08:13.680 --> 00:08:19.360
I think that's a little too unconventional for me at the moment.

00:08:19.360 --> 00:08:21.920
They've done some very cool stuff though.

00:08:21.920 --> 00:08:24.000
So yeah, there's a lot of innovation there.

00:08:24.000 --> 00:08:24.560
It is really...

00:08:24.560 --> 00:08:25.360
It takes some good news to you.

00:08:25.360 --> 00:08:27.040
That's the one I've been using last year or so.

00:08:27.040 --> 00:08:28.720
And I really, really enjoyed it.

00:08:28.720 --> 00:08:36.000
It does very cool things like, for example, if I'm on my computer and then I SSH into another

00:08:36.000 --> 00:08:40.960
computer and then in that computer, I Docker exec something into a Docker

00:08:42.080 --> 00:08:48.800
Docker system, a Docker container, Warp will say, "Would you like to apply the Warp shell

00:08:48.800 --> 00:08:52.080
to this Docker container instead of whatever it does, SA?"

00:08:52.080 --> 00:08:53.440
It might not even have Bash, right?

00:08:53.440 --> 00:08:54.560
It might just be SA.

00:08:54.560 --> 00:08:55.840
So you just hit a button and it goes, whoop.

00:08:55.840 --> 00:09:02.480
It adapts and basically become kind of like in memory, installs itself into that container

00:09:02.480 --> 00:09:03.200
temporarily, right?

00:09:03.200 --> 00:09:05.840
That sets all the settings and stuff.

00:09:05.840 --> 00:09:09.200
So it's a long ways from cmd.exe.

00:09:09.200 --> 00:09:13.360
I guess it's worth putting out to people out there on Windows.

00:09:13.360 --> 00:09:17.840
If you're not using Windows Terminal, please.

00:09:17.840 --> 00:09:20.720
Right?

00:09:20.720 --> 00:09:22.080
You need to use Windows Terminal.

00:09:22.080 --> 00:09:25.440
It's such an improvement over...

00:09:25.440 --> 00:09:27.280
Massive improvement.

00:09:27.280 --> 00:09:28.480
Right.

00:09:28.480 --> 00:09:30.480
I mean, you probably run into this all the time, right?

00:09:30.480 --> 00:09:31.120
Yeah.

00:09:31.120 --> 00:09:35.920
And the solution, if someone tries something in the terminal, they use this retro textual

00:09:35.920 --> 00:09:36.960
and it doesn't work properly.

00:09:36.960 --> 00:09:41.360
I first say, have you tried downloading Windows Terminal?

00:09:41.360 --> 00:09:47.040
And 99% of the time, it not only fixes it, but it makes it look beautiful.

00:09:47.040 --> 00:09:47.600
Yeah.

00:09:47.600 --> 00:09:49.760
I mean, hats off to Microsoft.

00:09:49.760 --> 00:09:56.240
They didn't change the terminal for decades, but when they did, they made a very good job of it.

00:09:56.240 --> 00:09:57.680
Yeah.

00:09:57.680 --> 00:09:58.320
It took a while.

00:09:58.320 --> 00:10:01.600
I don't know if it's the default yet.

00:10:01.600 --> 00:10:02.160
You know what I mean?

00:10:02.160 --> 00:10:07.360
I'm not sure what's actually presented if you kind of pull up the start menu.

00:10:07.360 --> 00:10:11.760
It's a very strange architecture.

00:10:11.760 --> 00:10:15.200
You can pull up cmd.exe.

00:10:16.480 --> 00:10:18.720
That's what I've been used to calling it because it has it in the title bar.

00:10:18.720 --> 00:10:25.520
If you send it some magic codes, you can switch it into essentially Windows Terminal.

00:10:25.520 --> 00:10:30.480
It'll process escape sequences like it does on Mac.

00:10:30.480 --> 00:10:31.840
Okay.

00:10:31.840 --> 00:10:33.280
And Linux.

00:10:33.280 --> 00:10:40.640
So the actual window you see is just kind of like a window onto the thing which renders the terminal.

00:10:40.640 --> 00:10:43.600
So you can get Windows.

00:10:43.600 --> 00:10:52.640
You might already have Windows Terminal even if you don't get the experience, but software can switch it into this mode, which makes it work really well.

00:10:52.640 --> 00:10:52.640
I had no idea.

00:10:52.640 --> 00:10:52.640
That's cool.

00:10:52.640 --> 00:10:52.640
Yeah.

00:10:52.640 --> 00:10:53.120
Okay.

00:10:53.120 --> 00:10:53.680
Yeah.

00:10:53.680 --> 00:10:55.680
It's probably the same core for both of them or something, right?

00:10:55.680 --> 00:10:56.800
Yeah, exactly.

00:10:56.800 --> 00:11:02.640
The architecture is very component based and you can switch it at runtime.

00:11:02.640 --> 00:11:09.680
Yeah, that's very Microsoft.

00:11:09.680 --> 00:11:10.240
Yeah.

00:11:11.680 --> 00:11:13.280
Is there a code that you can put to embed?

00:11:13.280 --> 00:11:19.040
Like if you can split the panes and then you can embed Excel on one side maybe and then SharePoint on the other?

00:11:19.040 --> 00:11:20.240
I haven't found it.

00:11:20.240 --> 00:11:20.880
I'm just kidding.

00:11:20.880 --> 00:11:22.560
I just feel like that's something I can do.

00:11:22.560 --> 00:11:23.520
I wouldn't be surprised.

00:11:23.520 --> 00:11:23.920
Yeah.

00:11:23.920 --> 00:11:24.720
I wouldn't either.

00:11:24.720 --> 00:11:26.000
I wouldn't either.

00:11:26.000 --> 00:11:31.840
Are you a fan of modifying your shell, I guess?

00:11:31.840 --> 00:11:38.560
Like, oh, my ZSH or oh, my posh or Starship or any of these?

00:11:38.560 --> 00:11:39.600
Yeah.

00:11:39.600 --> 00:11:41.200
To change the prompt.

00:11:41.200 --> 00:11:41.440
Yeah.

00:11:41.440 --> 00:11:43.680
I do have, I can't remember which one I use now.

00:11:43.680 --> 00:11:45.760
It's not, is it Starship?

00:11:45.760 --> 00:11:46.880
Yeah.

00:11:46.880 --> 00:11:48.320
Yeah.

00:11:48.320 --> 00:11:49.920
It's fairly minimal.

00:11:49.920 --> 00:11:59.280
It tells me the branch, the get branch I'm working on, the version of Python that's running and the version of the application I'm working on.

00:11:59.920 --> 00:12:02.240
So that's really nice.

00:12:02.240 --> 00:12:04.400
Oh, it'll tell you the version of the application you're working on?

00:12:04.400 --> 00:12:07.520
Yeah, it says v1.0.0.0.

00:12:07.520 --> 00:12:11.360
So it's somehow pulled out the version from Textile, I guess.

00:12:11.360 --> 00:12:12.400
Oh, wow.

00:12:12.400 --> 00:12:13.680
That's pretty cool.

00:12:13.680 --> 00:12:18.560
I guess if it's in a repo and it knows that repo is a package, it can figure out what version it is.

00:12:18.560 --> 00:12:19.840
But that's still pretty neat.

00:12:19.840 --> 00:12:20.320
I guess.

00:12:20.320 --> 00:12:23.440
I mean, inspect pyproject.toml, I'm guessing.

00:12:23.440 --> 00:12:24.080
Yeah.

00:12:24.080 --> 00:12:25.280
Yeah.

00:12:25.280 --> 00:12:25.760
I don't know.

00:12:25.760 --> 00:12:26.800
It's magic and it works.

00:12:26.800 --> 00:12:29.680
So don't delve too deeply.

00:12:29.680 --> 00:12:30.960
Yeah.

00:12:30.960 --> 00:12:42.400
The whole reason I'm bringing this up, it might feel like a little bit of a diversion, but when people think about terminal apps and just being in the terminal and somebody says, oh, God, I hate the terminal.

00:12:44.000 --> 00:12:44.720
It's so bad.

00:12:44.720 --> 00:12:44.880
It's so bad.

00:12:44.880 --> 00:12:45.920
I can't stand it.

00:12:45.920 --> 00:12:59.120
It usually means they're not adopting some of these really magical tools, regardless of whether you adopt Starship or oh, my ZSH or warp or whatever.

00:13:00.560 --> 00:13:03.280
You get a dramatically different experience, right?

00:13:03.280 --> 00:13:03.680
Yeah.

00:13:03.680 --> 00:13:06.000
It's infinitely customizable.

00:13:06.000 --> 00:13:09.520
The terminal and the shell and various other software.

00:13:09.520 --> 00:13:14.080
So you can get the kind of experience that you want out of a terminal.

00:13:14.080 --> 00:13:17.920
People get very comfortable with their terminal environment.

00:13:17.920 --> 00:13:23.120
It feels like an old pair of shoes.

00:13:23.120 --> 00:13:26.480
You know, it's just that comfortable.

00:13:26.480 --> 00:13:30.160
I guess it depends what tools you use as well.

00:13:30.160 --> 00:13:41.920
For example, if you're a Neo Vim or an Emacs type person, you're in the terminal even way, way more than, say, for me, for example, uses PyCharm and other tools.

00:13:41.920 --> 00:13:42.320
Yeah.

00:13:42.320 --> 00:13:47.280
You know, I only dip in and out when I'm working on code for that kind of stuff.

00:13:47.280 --> 00:13:48.240
Yeah.

00:13:48.240 --> 00:13:53.120
For me, I'm switching between terminal and VS Code most of the day.

00:13:53.120 --> 00:13:54.880
So I've got both open.

00:13:54.880 --> 00:13:59.200
I write some code and I switch back to terminal and run said code.

00:13:59.200 --> 00:14:00.880
So I'm in both.

00:14:00.880 --> 00:14:03.520
Yeah.

00:14:03.520 --> 00:14:08.640
But funnily enough, I never got into editors that run inside the terminal.

00:14:10.080 --> 00:14:14.800
I do like all the fancy graphics that VS Code can give you that terminal couldn't.

00:14:14.800 --> 00:14:15.840
Yeah.

00:14:15.840 --> 00:14:19.440
That matters less to other people, but I like it.

00:14:19.440 --> 00:14:19.920
You know what?

00:14:19.920 --> 00:14:30.560
When I started out doing programming, I started out doing a lot of work on silicon graphics, mainframes, doing Emacs on Onyx workstations and stuff like that.

00:14:30.560 --> 00:14:37.520
And I was happy as a clam to get out of there as quick as possible to get out of.

00:14:37.520 --> 00:14:39.840
I'm like, can I get some better tools than this?

00:14:40.720 --> 00:14:42.800
And yeah, I don't know.

00:14:42.800 --> 00:14:50.640
I'm on the GUI side as well, but I feel like kind of like the terminal.

00:14:50.640 --> 00:14:53.120
If you don't customize your terminal, it's not a great experience.

00:14:53.120 --> 00:15:00.240
If you don't really commit to learning all the hotkeys of your GUI app, well, it feels like, well, I got to use this mouse.

00:15:00.240 --> 00:15:00.800
It's all clunky.

00:15:00.800 --> 00:15:02.080
But like I almost never use the mouse.

00:15:02.080 --> 00:15:02.640
You know what I mean?

00:15:02.640 --> 00:15:02.960
Yeah.

00:15:02.960 --> 00:15:04.400
Even though I'm in the GUI app, right?

00:15:04.400 --> 00:15:06.320
They just customize the hotkeys.

00:15:06.320 --> 00:15:06.480
Yeah.

00:15:06.480 --> 00:15:09.280
I think you can get very proficient in both.

00:15:09.280 --> 00:15:18.160
You know, I've seen people using a terminal and they use Emacs or Vim and their fingers just fly through it.

00:15:18.160 --> 00:15:19.120
And they're very proficient.

00:15:19.120 --> 00:15:19.120
No.

00:15:19.120 --> 00:15:21.440
But the same thing in VS Code.

00:15:21.440 --> 00:15:30.880
If you know your editor and you know the shortcut keys and you don't reach for the mouse very often, you can be just as proficient, really.

00:15:32.000 --> 00:15:36.960
At Textualize we had a policy if you use whatever you want to use to edit code.

00:15:36.960 --> 00:15:43.360
Because if you take a developer who uses Vim and then force them to use code, they will not be happy.

00:15:43.360 --> 00:15:47.120
And they will not be as efficient at all.

00:15:47.120 --> 00:15:48.400
Yeah.

00:15:48.400 --> 00:15:49.200
Yeah.

00:15:49.200 --> 00:15:50.720
That's a really tricky balance, right?

00:15:50.720 --> 00:15:53.520
You want to let people work where they're comfortable, for sure.

00:15:53.520 --> 00:15:53.920
Mm.

00:15:53.920 --> 00:15:55.920
Yeah.

00:15:55.920 --> 00:15:56.320
All right.

00:15:56.320 --> 00:16:02.240
Well, I think that's a good transition to TUI.

00:16:02.240 --> 00:16:04.400
What are TUIs?

00:16:04.400 --> 00:16:05.440
Why do people build them?

00:16:05.440 --> 00:16:07.120
I know we talked about this in the last episode.

00:16:07.120 --> 00:16:09.760
We won't totally necessarily rehash it.

00:16:09.760 --> 00:16:13.840
But there are some, if people haven't seen it, there are some incredible applications.

00:16:13.840 --> 00:16:19.120
And we will see some built in Textual that run in the terminal.

00:16:19.120 --> 00:16:21.360
Yeah, sure.

00:16:21.360 --> 00:16:24.560
So TUI stands for Text Use Interface.

00:16:25.440 --> 00:16:28.160
I don't actually like that term anymore.

00:16:28.160 --> 00:16:28.880
Okay.

00:16:28.880 --> 00:16:30.560
What would you like?

00:16:30.560 --> 00:16:35.840
Well, the thing is, the TUIs that you build with Textual are also GUIs.

00:16:35.840 --> 00:16:38.640
It's a very simplified form of graphics.

00:16:38.640 --> 00:16:42.960
But we've got lines and corners.

00:16:42.960 --> 00:16:44.880
And you've got like a mouse that you can move around.

00:16:44.880 --> 00:16:47.440
So it is rendered with text.

00:16:47.440 --> 00:16:50.400
But it works just like a GUI.

00:16:51.760 --> 00:16:58.000
I guess it's like a little bit like saying a web browser is a document-based UI.

00:16:58.000 --> 00:16:59.520
Yeah.

00:16:59.520 --> 00:17:01.680
It is technically correct, but not.

00:17:01.680 --> 00:17:08.560
And we're having this whole video live stream recording across the internet, across the world

00:17:08.560 --> 00:17:10.640
in a web browser.

00:17:10.640 --> 00:17:12.480
And there's only a little text on the screen, right?

00:17:12.480 --> 00:17:13.360
Yeah.

00:17:13.360 --> 00:17:14.400
Yeah, exactly.

00:17:14.400 --> 00:17:19.520
So the term TUI is stuck, but it's just a GUI that runs in your terminal.

00:17:19.520 --> 00:17:23.040
Well, I think originally it was pretty text-based.

00:17:23.040 --> 00:17:23.520
It was.

00:17:23.520 --> 00:17:26.400
The advanced version might be a progress bar, right?

00:17:26.400 --> 00:17:27.440
Or emojis.

00:17:27.440 --> 00:17:28.000
Or color.

00:17:28.000 --> 00:17:29.200
Yeah, exactly.

00:17:29.200 --> 00:17:33.520
So those are technically text, but it looks like images.

00:17:33.520 --> 00:17:35.440
So you've got emoji.

00:17:35.440 --> 00:17:39.760
You can have lots of like, I'm looking at my Starship prompt.

00:17:39.760 --> 00:17:41.520
And it's got like a snake because it's in Python.

00:17:41.520 --> 00:17:42.480
And that kind of stuff.

00:17:42.480 --> 00:17:45.920
That is technically text, but it is graphical.

00:17:45.920 --> 00:17:51.520
And progress bars, you create a bar using characters.

00:17:51.520 --> 00:17:53.120
But essentially you're creating an image.

00:17:53.120 --> 00:17:58.560
So I think the distinction between like text-user interface and graphical-user interface

00:17:59.520 --> 00:18:01.120
is fuzzy now.

00:18:01.120 --> 00:18:04.800
If you say TUI, I'll know what you're talking about.

00:18:04.800 --> 00:18:07.120
But I just don't like the term.

00:18:07.120 --> 00:18:08.720
I don't think it's as clear.

00:18:08.720 --> 00:18:11.520
I'm not sure we even need the distinction.

00:18:11.520 --> 00:18:13.280
Yeah, I hear you.

00:18:13.280 --> 00:18:14.400
Are you familiar with BTOP?

00:18:14.400 --> 00:18:15.280
Have you seen this app?

00:18:15.280 --> 00:18:17.840
Yeah, that's really, really pretty.

00:18:17.840 --> 00:18:19.120
I like the fading effect.

00:18:19.120 --> 00:18:27.920
I mean, this app has just crazy amounts of graphics.

00:18:27.920 --> 00:18:30.720
And it's all written in the terminal with live updating.

00:18:30.720 --> 00:18:33.600
I don't know how many graphs, but many, many graphs.

00:18:33.600 --> 00:18:36.880
Interesting thing about BTOP.

00:18:36.880 --> 00:18:42.400
I think most people who run it don't run it because they really need to keep an eye

00:18:42.400 --> 00:18:46.720
on the performance of their course and file system, etc.

00:18:46.720 --> 00:18:50.400
I think a lot of them run it because it's retro cool.

00:18:50.400 --> 00:18:52.480
It's retro cool.

00:18:52.480 --> 00:18:54.080
It looks cool.

00:18:54.080 --> 00:18:58.800
It looks like how you thought computers were going to look.

00:18:58.800 --> 00:19:01.440
Yeah, I'm going to be a programmer and a hacker.

00:19:01.440 --> 00:19:02.800
I'm going to be a super tech guy.

00:19:02.800 --> 00:19:04.800
This, yeah, you know what?

00:19:04.800 --> 00:19:06.960
It could be, this could be a movie UI.

00:19:06.960 --> 00:19:09.360
You know how when you're watching a movie, they're like,

00:19:10.080 --> 00:19:14.640
they, for whatever reason, won't run macOS or Windows.

00:19:14.640 --> 00:19:19.760
They come up with some weird variation that's got weird graphics.

00:19:19.760 --> 00:19:22.800
And they have some dialogue like, excuse me, I've got to hack the Gibson.

00:19:22.800 --> 00:19:23.280
Okay, done.

00:19:23.280 --> 00:19:24.480
Exactly.

00:19:24.480 --> 00:19:25.760
And they put up something.

00:19:25.760 --> 00:19:26.640
Oh my God.

00:19:26.640 --> 00:19:27.680
This is Visual Basic.

00:19:27.680 --> 00:19:28.640
I know Visual Basic.

00:19:28.640 --> 00:19:29.760
I'm going to get his IP address.

00:19:29.760 --> 00:19:30.640
It's like, what?

00:19:30.640 --> 00:19:31.440
Yeah.

00:19:31.440 --> 00:19:31.840
No, no.

00:19:31.840 --> 00:19:33.360
Oh boy.

00:19:33.360 --> 00:19:38.560
Anyway, I think just, you know, this is a really, really cool example of pushing way, way, way beyond.

00:19:38.560 --> 00:19:40.960
This is a graphical user interface.

00:19:40.960 --> 00:19:42.960
This is not a textual user interface, right?

00:19:42.960 --> 00:19:43.920
Exactly.

00:19:43.920 --> 00:19:47.200
I mean, technically it is text, but it's also graphical.

00:19:47.200 --> 00:19:47.600
Yeah.

00:19:47.600 --> 00:19:47.920
Yeah.

00:19:47.920 --> 00:19:48.720
Yeah.

00:19:48.720 --> 00:19:48.800
Yeah.

00:19:48.800 --> 00:19:51.520
So we have two things that you guys make.

00:19:51.520 --> 00:19:54.160
We've got textual and rich.

00:19:54.160 --> 00:19:57.440
And maybe it's worth talking about rich for a moment since that's the foundation.

00:19:57.440 --> 00:19:59.120
Sure.

00:19:59.520 --> 00:19:59.840
Okay.

00:19:59.840 --> 00:20:05.680
So rich basically formats data in a very pleasing to the eye way.

00:20:05.680 --> 00:20:12.800
You know, you can print say a Python dict and it'll format with an indentation.

00:20:12.800 --> 00:20:14.400
It'll colorize strings and things.

00:20:14.400 --> 00:20:21.680
And you can print things like tables quite effortlessly, syntax highlighted code,

00:20:21.680 --> 00:20:26.240
and you can use up to 16.7 million colors.

00:20:27.040 --> 00:20:34.720
Essentially it was a toolkit to prettify terminal output with as little effort as possible.

00:20:34.720 --> 00:20:38.800
And it's all kind of integrated.

00:20:38.800 --> 00:20:46.640
So you can put syntax highlighted text inside a table or a progress bar inside a cell.

00:20:46.640 --> 00:20:48.640
And everything kind of works together.

00:20:48.640 --> 00:20:51.120
So it's a single coherent system.

00:20:51.120 --> 00:20:54.000
Because some of this stuff existed prior to rich.

00:20:54.000 --> 00:20:56.800
But they were written by different authors.

00:20:56.800 --> 00:20:59.200
And they weren't designed to be to work together.

00:20:59.200 --> 00:21:00.080
Right.

00:21:00.080 --> 00:21:01.040
Maybe there's a table,

00:21:01.040 --> 00:21:06.720
a table one by one person and then a progress bar by another.

00:21:06.720 --> 00:21:09.280
And they didn't really work the same or integrate or things like that.

00:21:09.280 --> 00:21:09.520
Yeah.

00:21:10.320 --> 00:21:10.880
Exactly.

00:21:10.880 --> 00:21:11.280
Exactly.

00:21:11.280 --> 00:21:17.360
So it meant that terminal output was still quite basic.

00:21:17.360 --> 00:21:22.880
When color was used, it would colorize a single line or something like that.

00:21:22.880 --> 00:21:31.280
And it still, it helped, but it wasn't great for parsing, visually parsing that information.

00:21:32.240 --> 00:21:36.800
But rich gave you that ability that when you write output, it is readable.

00:21:36.800 --> 00:21:45.440
I think prior to that, we developers kind of built up this skill of staring at monochrome

00:21:45.440 --> 00:21:48.320
text with funny characters and numbers.

00:21:48.320 --> 00:21:48.320
Yeah.

00:21:48.320 --> 00:21:53.440
And somehow pulling out meaningful information out of that.

00:21:53.440 --> 00:21:55.280
And it took years to develop.

00:21:55.280 --> 00:22:02.000
But hopefully now we don't need to, you know, because you can write things to the terminal

00:22:02.000 --> 00:22:05.120
that looks much like the output you'd get in a browser.

00:22:05.120 --> 00:22:08.160
It's formatted and readable and colorful.

00:22:08.160 --> 00:22:09.360
Yeah.

00:22:09.360 --> 00:22:14.160
You know, one thing that might be worth talking about is the live updates.

00:22:14.160 --> 00:22:17.680
Like live tables and stuff.

00:22:19.040 --> 00:22:19.360
Yeah.

00:22:19.360 --> 00:22:24.080
So, in rich, you can create a live object.

00:22:24.080 --> 00:22:25.360
That's what the class is called.

00:22:25.360 --> 00:22:31.920
And basically, it clears the screen and it writes that output and then you can refresh it.

00:22:31.920 --> 00:22:39.600
It can do that quickly, like 20 times a second or, or less, depending on how much data you've got.

00:22:39.600 --> 00:22:45.440
So you can create, animations, you can create dashboards, you can create like,

00:22:46.160 --> 00:22:48.640
like a scrolling list of, of text.

00:22:48.640 --> 00:22:52.960
Um, it, but it was kind of, it was limited.

00:22:52.960 --> 00:22:57.360
Um, because all it could do is update, information regularly.

00:22:57.360 --> 00:22:58.240
It wasn't interactive.

00:22:58.240 --> 00:23:04.560
Uh, you couldn't click, or scroll or even, you know, detect key presses.

00:23:04.560 --> 00:23:07.120
It was purely for, updating information.

00:23:07.120 --> 00:23:11.840
It's kind of like, a very rudimentary predecessor of textual.

00:23:14.720 --> 00:23:20.960
Another thing that's interesting is what's the frame rate of, of a terminal.

00:23:20.960 --> 00:23:25.920
You know, people think of it just kind of scrolling text and printing out text and you see it kind

00:23:25.920 --> 00:23:31.680
of going by and you're like, ah, well, that's kind of how, how the UI must be, but you can actually

00:23:31.680 --> 00:23:33.040
push these things pretty far, right?

00:23:33.040 --> 00:23:41.680
Uh, you can, the interesting thing is I don't think anyone who sat down to develop a terminal was

00:23:41.680 --> 00:23:44.880
thinking in terms of frames per second.

00:23:44.880 --> 00:23:52.000
Um, you know, they were just, they want to optimize, the text output so that if you,

00:23:52.000 --> 00:23:55.520
if you cut a large file, it didn't take forever to scroll through.

00:23:55.520 --> 00:23:56.080
Right.

00:23:56.080 --> 00:23:57.840
Or didn't flicker around or something.

00:23:57.840 --> 00:23:58.400
Yeah.

00:23:58.400 --> 00:23:58.960
Yeah.

00:23:58.960 --> 00:23:59.280
Yeah.

00:23:59.280 --> 00:24:06.640
And, later on people like myself and, and others, were creating, animations and things.

00:24:06.640 --> 00:24:09.040
And they're thinking, well, how fast, how fast can I push this?

00:24:09.040 --> 00:24:11.280
And it turns out pretty fast.

00:24:11.280 --> 00:24:17.120
Um, because the terminals use like your, your GPU, to render the text.

00:24:18.080 --> 00:24:22.480
And you could, if you send it text fast enough, it'll keep up mostly.

00:24:22.480 --> 00:24:28.800
And I found that 60 frames a second, is, is completely workable on, on most terminals.

00:24:28.800 --> 00:24:33.280
Um, you don't really need that for most apps.

00:24:33.280 --> 00:24:39.280
Um, because, if you're scrolling text, you can only move character at a time.

00:24:39.280 --> 00:24:43.120
It's not pixel perfect because it's like a, kind of like a grid.

00:24:43.120 --> 00:24:50.240
Um, so if you want to scroll at 60 frames a second, you'd have to move 60 lines in a second.

00:24:50.240 --> 00:24:53.360
But, which takes are just kind of whiz by.

00:24:53.360 --> 00:24:53.920
Yeah.

00:24:53.920 --> 00:24:55.040
It gets blurry anyway.

00:24:55.040 --> 00:24:55.920
Yeah.

00:24:55.920 --> 00:25:02.000
Um, so it can do 60 frames a second, which sometimes fun for animation effects.

00:25:02.000 --> 00:25:04.400
Um, but generally you don't need it.

00:25:04.400 --> 00:25:08.880
Um, you know, you can update 10 frames a second and it'll look

00:25:08.880 --> 00:25:10.240
it'll look nice and smooth.

00:25:10.240 --> 00:25:12.560
But it's nice to know that you can.

00:25:12.560 --> 00:25:18.160
I've got, we've got a ridiculous demo, which creates some, really colorful gradient

00:25:18.160 --> 00:25:20.800
and then rotates it at 60 frames a second.

00:25:20.800 --> 00:25:21.760
Wow.

00:25:21.760 --> 00:25:24.080
And it looks very cool.

00:25:24.080 --> 00:25:28.000
It's, it would be a terrible in an actual app because it just burned your retina.

00:25:28.000 --> 00:25:29.680
Um, but it is possible.

00:25:29.680 --> 00:25:31.040
Yeah.

00:25:31.040 --> 00:25:36.240
Reminds me of the early days when computers just started having VGA and stuff and people

00:25:36.240 --> 00:25:38.880
come out with amazing graphical.

00:25:38.880 --> 00:25:41.120
What do they call them?

00:25:41.120 --> 00:25:42.160
I can't remember what they call them.

00:25:42.160 --> 00:25:45.440
Anyway, I think I was thinking demos as well.

00:25:45.440 --> 00:25:45.600
Yeah.

00:25:45.600 --> 00:25:46.720
I think that is what they call them.

00:25:46.720 --> 00:25:49.600
And you would, we would download them off of BBSs and watch them.

00:25:49.600 --> 00:25:50.880
We're just like, wow, it's so good.

00:25:50.880 --> 00:25:54.000
And my 46 DX, I can't believe it's, it could do it.

00:25:54.000 --> 00:25:54.800
It's so smooth.

00:25:54.800 --> 00:25:56.160
Yeah.

00:25:56.160 --> 00:25:57.040
They were amazing.

00:25:57.040 --> 00:25:57.440
Right.

00:25:57.440 --> 00:26:01.680
Similar deal with the terminals that the manufacturer of those devices back then,

00:26:01.680 --> 00:26:10.320
probably didn't have graphical animations or games in mind when they were building those

00:26:10.320 --> 00:26:10.720
computers.

00:26:10.720 --> 00:26:15.120
But then you got some interested parties who were willing to like experiment and they actually

00:26:15.120 --> 00:26:19.920
managed to like make it do things, which the manufacturer just never intended.

00:26:19.920 --> 00:26:20.960
The same thing with the terminal.

00:26:20.960 --> 00:26:28.480
No one ever sat down and created a system to display 16.7 million colors at 60 frames a second.

00:26:30.000 --> 00:26:34.240
It was other people that just tried that and got it to work.

00:26:34.240 --> 00:26:41.120
So it's an amazing amount of creativity and freedom and working and stuff like that,

00:26:41.120 --> 00:26:44.240
which I kind of missed from the old days because now computers are so fast and so powerful.

00:26:44.240 --> 00:26:44.640
I know.

00:26:44.640 --> 00:26:46.320
People don't have to even worry about it, do they?

00:26:46.320 --> 00:26:47.040
Yeah.

00:26:47.040 --> 00:26:49.200
You don't.

00:26:49.200 --> 00:26:53.920
So I think let's, I want to kind of work through this, you have this live demo,

00:26:53.920 --> 00:26:58.320
the official textual demo, which you can install.

00:26:58.320 --> 00:26:59.280
Let me go.

00:26:59.280 --> 00:27:00.000
I think I'm at the next.

00:27:00.000 --> 00:27:00.640
No.

00:27:00.640 --> 00:27:05.200
So if I click on it, it tells me how to get it.

00:27:05.200 --> 00:27:11.520
Props for the install step here, the UVX.

00:27:11.520 --> 00:27:13.040
Are you a UV convert?

00:27:13.040 --> 00:27:14.560
Are you a UV fan these days?

00:27:14.560 --> 00:27:16.000
I am.

00:27:16.000 --> 00:27:16.960
I am a fan.

00:27:16.960 --> 00:27:17.280
Yeah.

00:27:17.280 --> 00:27:22.880
I mean, that I think is a killer app that you can send someone a fairly short command line

00:27:22.880 --> 00:27:24.800
and they can run your project.

00:27:24.800 --> 00:27:29.360
The Python, it says --Python 3.12.

00:27:29.360 --> 00:27:37.280
That was because at the time it wouldn't install a version of Python that can run on.

00:27:37.280 --> 00:27:39.280
I think Astral's working on that.

00:27:39.280 --> 00:27:46.640
So I think in the future, maybe now you could just do UVX textual hyphen demo and then it would just run.

00:27:46.640 --> 00:27:54.640
But even so, I think that's a beautiful way of allowing people to test your code with very little barriers.

00:27:54.640 --> 00:27:55.680
Yeah.

00:27:55.680 --> 00:27:58.080
Especially the script stuff now.

00:27:59.600 --> 00:28:06.000
You can just hit the single script and put the dependencies at the top and just say, you know, UV run.

00:28:06.000 --> 00:28:10.720
I can't remember exact syntax, but basically you can embed what it needs to run just as a comment.

00:28:10.720 --> 00:28:12.000
And it'll run.

00:28:12.000 --> 00:28:13.040
That's excellent.

00:28:13.040 --> 00:28:13.360
Yeah.

00:28:13.360 --> 00:28:17.040
It's no harder than it needs to be, which is great.

00:28:17.040 --> 00:28:20.480
It's very clear what it does and it works very well.

00:28:20.480 --> 00:28:21.920
It's the kind of computing that you want.

00:28:21.920 --> 00:28:26.960
You don't want to have to send someone a page of instructions and say,

00:28:26.960 --> 00:28:30.800
go and download this software and then write this into your configuration file.

00:28:30.800 --> 00:28:31.680
Yeah.

00:28:31.680 --> 00:28:33.360
That's just a headache.

00:28:33.360 --> 00:28:35.040
I don't want to deal with that ever again.

00:28:35.040 --> 00:28:37.440
I just want to send people a UVX, blah, and they're done.

00:28:37.440 --> 00:28:38.880
I agree.

00:28:38.880 --> 00:28:39.840
I agree.

00:28:39.840 --> 00:28:43.440
If you have UVX, you're good to go, right?

00:28:43.440 --> 00:28:45.920
You don't even have to have Python.

00:28:45.920 --> 00:28:48.240
And you also don't have to worry about the version of Python.

00:28:48.240 --> 00:28:49.600
So these are all good things.

00:28:49.600 --> 00:28:53.200
So let's run it and let's see what happens here.

00:28:53.200 --> 00:28:56.320
There's a lot going on in this demo.

00:28:56.320 --> 00:29:00.400
Chris May out of the audience gives you props for making it so easy to run.

00:29:00.400 --> 00:29:05.520
And Hugo says, I can drop the Python.

00:29:05.520 --> 00:29:10.080
As you imagined, I can just say UVX textual demo and I'll probably get 13.1.

00:29:10.080 --> 00:29:11.040
Let's see.

00:29:11.040 --> 00:29:14.080
Something's happening.

00:29:14.080 --> 00:29:17.600
I think it worked if you had that version of Python.

00:29:17.600 --> 00:29:22.160
But if you didn't have the correct version of Python, it would sometimes fail.

00:29:22.160 --> 00:29:23.360
But got it.

00:29:23.360 --> 00:29:24.160
Maybe they fixed it.

00:29:24.160 --> 00:29:24.480
Yeah.

00:29:24.480 --> 00:29:25.040
Maybe.

00:29:25.040 --> 00:29:25.040
Maybe.

00:29:25.040 --> 00:29:25.040
Maybe.

00:29:25.040 --> 00:29:35.120
So when this thing pulls up, it looks very much like a web browser.

00:29:36.080 --> 00:29:43.680
With the main difference, I think that there's not a lot of pictures as in true graphics, right?

00:29:43.680 --> 00:29:52.320
But if you imagine like a really nicely styled website that maybe use color and emoji and CSS,

00:29:52.320 --> 00:29:55.200
but just light on graphics, right?

00:29:55.200 --> 00:29:55.440
Yeah.

00:29:55.440 --> 00:29:56.640
I feel like, what would you say?

00:29:56.640 --> 00:29:58.560
Like that's kind of the extent?

00:29:58.560 --> 00:29:59.520
It is.

00:29:59.520 --> 00:30:04.640
It's kind of like a minimal web interface that focuses on typography.

00:30:04.640 --> 00:30:06.240
I do want to point out.

00:30:06.240 --> 00:30:07.040
Because you only got one font.

00:30:07.040 --> 00:30:07.680
Yeah.

00:30:07.680 --> 00:30:07.920
Yeah.

00:30:07.920 --> 00:30:08.960
Exactly.

00:30:08.960 --> 00:30:09.840
You can't.

00:30:09.840 --> 00:30:10.080
Yeah.

00:30:10.960 --> 00:30:15.760
But as we'll see, you can actually do graphics pretty well.

00:30:15.760 --> 00:30:17.840
Yeah.

00:30:17.840 --> 00:30:23.280
If you see the numbers up at the top, there's nothing in the terminal that displays it.

00:30:23.280 --> 00:30:24.880
Most people are saying so they won't know.

00:30:24.880 --> 00:30:26.480
But at the top, it says version.

00:30:26.480 --> 00:30:28.000
Then it says 1, 0, 0.

00:30:28.000 --> 00:30:30.320
GitHub stars, 27.2,000.

00:30:30.320 --> 00:30:32.160
How many forks and so on.

00:30:32.160 --> 00:30:34.640
But those are colored differently.

00:30:34.640 --> 00:30:35.440
They look different.

00:30:35.440 --> 00:30:35.680
Okay.

00:30:35.680 --> 00:30:36.640
Now tell us about the numbers.

00:30:36.640 --> 00:30:37.600
Yeah.

00:30:37.600 --> 00:30:37.760
Sure.

00:30:37.760 --> 00:30:41.360
So they're taller and wider than the rest of the text.

00:30:41.360 --> 00:30:45.760
But there is no alternative font in the terminal.

00:30:45.760 --> 00:30:50.160
Those numbers are made up of other characters, box drawing characters.

00:30:50.160 --> 00:30:53.040
So you've got like a vertical line, a horizontal line.

00:30:53.040 --> 00:30:55.840
You've got a curved corner.

00:30:55.840 --> 00:30:57.280
You've got like a T section.

00:30:57.280 --> 00:31:02.560
And you can assemble that and make it display something that looks like numbers.

00:31:02.560 --> 00:31:02.960
Interesting.

00:31:02.960 --> 00:31:05.520
It does look like numbers.

00:31:05.520 --> 00:31:06.080
It looks great.

00:31:06.080 --> 00:31:08.960
You've got the little subscript for the thousands.

00:31:08.960 --> 00:31:10.080
The K, the kilo.

00:31:10.080 --> 00:31:11.040
Kilosars.

00:31:11.040 --> 00:31:11.680
Kilosars.

00:31:11.680 --> 00:31:12.400
I don't know.

00:31:12.400 --> 00:31:12.640
Yeah.

00:31:12.640 --> 00:31:12.640
Yeah.

00:31:12.640 --> 00:31:16.000
It's a, if I remember correctly, it's a two by three.

00:31:16.000 --> 00:31:17.280
No, sorry.

00:31:17.280 --> 00:31:19.440
Three by three grid of characters.

00:31:19.440 --> 00:31:29.840
And I had to hand edit this in Python by cut and pasting the box characters from Wikipedia to assemble numbers.

00:31:29.840 --> 00:31:31.600
And I discovered the numbers work quite well.

00:31:31.600 --> 00:31:33.680
The numbers look like numbers.

00:31:33.680 --> 00:31:34.480
Oh, great.

00:31:34.480 --> 00:31:36.000
And I've also got hex digits.

00:31:36.000 --> 00:31:37.520
So I've got A, B, C, D, E, F.

00:31:37.520 --> 00:31:42.960
I tried to keep going, but I found that some characters didn't work at all.

00:31:42.960 --> 00:31:44.480
Like an X.

00:31:44.480 --> 00:31:49.600
There's no diagonal cross piece in these Unicode characters.

00:31:49.600 --> 00:31:53.200
So it was an X just became impossible with a three by three grid.

00:31:53.200 --> 00:31:55.920
But for numbers, it works beautifully.

00:31:55.920 --> 00:31:56.960
Yeah.

00:31:56.960 --> 00:31:57.440
Yeah.

00:31:57.440 --> 00:31:57.920
Very interesting.

00:31:57.920 --> 00:32:04.240
A little bit like a classical alarm clock where the numbers, it's like a seven digit display.

00:32:04.240 --> 00:32:04.480
Yeah.

00:32:04.480 --> 00:32:04.720
Yeah.

00:32:04.720 --> 00:32:05.440
Yes, exactly.

00:32:05.440 --> 00:32:06.000
Yeah.

00:32:06.000 --> 00:32:06.960
Very similar.

00:32:06.960 --> 00:32:07.280
Exactly.

00:32:07.280 --> 00:32:08.240
Cool.

00:32:08.240 --> 00:32:09.200
All right.

00:32:09.200 --> 00:32:19.120
So if you run the demo, it comes up with comments that show you or sort of a walkthrough of what's possible in these little boxes.

00:32:19.120 --> 00:32:20.320
And it says, look, you can go.

00:32:20.320 --> 00:32:22.320
You can scroll it.

00:32:22.320 --> 00:32:24.000
You can scroll it with your mouse.

00:32:24.000 --> 00:32:26.560
It scrolls that section.

00:32:26.560 --> 00:32:28.880
It says, you want to go to the next one.

00:32:28.880 --> 00:32:30.640
Hit tab.

00:32:30.640 --> 00:32:32.000
Hit enter to open it up.

00:32:33.040 --> 00:32:43.280
It's even though it kind of like we were talking, even though it's a user interface, like with scroll bars and I can grab the scroll bar and go to it and I can click on the things and so on.

00:32:43.280 --> 00:32:47.360
It's also very keyboard friendly.

00:32:47.360 --> 00:32:48.560
Right.

00:32:48.560 --> 00:32:55.680
This is probably a super important aspect of building these types of applications in the terminal because people expect that.

00:32:55.680 --> 00:32:55.920
Right.

00:32:55.920 --> 00:32:57.920
Yeah, very much so.

00:32:57.920 --> 00:33:03.040
So a lot of text was inspired by web development because I was a web developer for

00:33:03.440 --> 00:33:07.760
for many years and there's a lot of work being done in interfaces in the web world.

00:33:07.760 --> 00:33:12.080
Lots of work, you know, loads of developers working on it for for years.

00:33:12.080 --> 00:33:18.320
I want to bring some of that to terminal, but I also didn't want to lose what made the terminal interesting.

00:33:18.320 --> 00:33:24.240
Terminal is a very keyboard focused thing.

00:33:24.240 --> 00:33:28.160
So I want textual apps to also be very keyboard focused.

00:33:28.160 --> 00:33:31.600
The mouse is terrific for discovering things.

00:33:32.160 --> 00:33:34.800
You know, I can move around and there's tool tips, etc.

00:33:34.800 --> 00:33:37.680
You can click those links so I can press the key.

00:33:37.680 --> 00:33:42.720
But if you want to use an app regularly, you'll want to learn the keys.

00:33:42.720 --> 00:33:44.400
So it is very focused.

00:33:44.400 --> 00:33:47.680
You can use the keyboard for for everything.

00:33:47.680 --> 00:33:52.480
You know, there's in the footer that displays all the main keys.

00:33:52.480 --> 00:33:56.720
You can also use tab and shift tab to move around the various elements.

00:33:56.720 --> 00:33:58.320
You can use up down to scroll.

00:33:58.320 --> 00:34:04.880
So you could get by without ever using the term without ever using the mouse.

00:34:04.880 --> 00:34:09.440
And it's there if you need it, but you don't have to.

00:34:09.440 --> 00:34:12.000
Yeah, that's incredible.

00:34:12.000 --> 00:34:15.520
It's got code highlighting.

00:34:15.520 --> 00:34:18.000
It's got a lot of different things.

00:34:18.000 --> 00:34:21.040
You know, for people who maybe want to get started with this.

00:34:21.280 --> 00:34:22.080
I think there's two.

00:34:22.080 --> 00:34:24.160
Well, let's say three.

00:34:24.160 --> 00:34:26.480
Three things that are worth looking at.

00:34:26.480 --> 00:34:29.680
One, you actually said you're a web developer.

00:34:29.680 --> 00:34:32.000
So you must have been a fan of view source, right?

00:34:32.000 --> 00:34:33.760
Oh, yeah.

00:34:33.760 --> 00:34:34.000
Yeah.

00:34:34.000 --> 00:34:36.240
So you added you basically added view source.

00:34:36.240 --> 00:34:37.280
That's right.

00:34:37.280 --> 00:34:38.000
This is a while.

00:34:38.000 --> 00:34:38.160
Right.

00:34:38.160 --> 00:34:40.240
You type you type C.

00:34:40.240 --> 00:34:43.680
It says so at the bottom and that pulls up the source of the current page,

00:34:43.680 --> 00:34:46.640
just like you would at my website, any website.

00:34:46.640 --> 00:34:46.880
Right.

00:34:46.880 --> 00:34:47.840
Yeah.

00:34:47.840 --> 00:34:52.720
I want people to realize that the code behind it is not that complex.

00:34:52.720 --> 00:34:54.320
But actually, it looks like complex.

00:34:54.320 --> 00:34:57.520
What you're viewing at the moment is actually Markdown,

00:34:57.520 --> 00:35:02.000
which you might think that's quite hard to render Markdown in the terminal.

00:35:02.000 --> 00:35:04.240
And while it is, but we've done it for you.

00:35:04.240 --> 00:35:10.400
So you just embed a widget and somewhere in the code, it'll say yield Markdown.

00:35:10.400 --> 00:35:14.000
And then it'll have the contents and it'll just Markdown.

00:35:14.000 --> 00:35:16.960
And you see there's a code block there with syntax highlight code.

00:35:16.960 --> 00:35:18.800
Yeah.

00:35:18.800 --> 00:35:21.760
Well, that's the magic of these libraries, right?

00:35:21.760 --> 00:35:25.200
It's hard once for you and then it's easy for other people.

00:35:25.200 --> 00:35:26.560
Yeah.

00:35:26.560 --> 00:35:27.040
We suffer.

00:35:27.040 --> 00:35:27.680
So you don't have to.

00:35:27.680 --> 00:35:29.120
Exactly.

00:35:29.120 --> 00:35:34.000
I feel like the most, the biggest example of that in the Python space is

00:35:34.000 --> 00:35:35.840
Jupyter notebooks, right?

00:35:35.840 --> 00:35:37.680
All that interactivity and all that stuff.

00:35:37.680 --> 00:35:41.760
People are writing TypeScript and JavaScript and all these kinds of things.

00:35:41.760 --> 00:35:46.800
You know, it's for, you know, Plotly and the other plotting UI things.

00:35:46.800 --> 00:35:52.640
And that's so Python people can write Python code and not write, you know,

00:35:52.640 --> 00:35:53.680
they're not creating websites.

00:35:53.680 --> 00:35:56.000
They're just typing in a notebook and they get interactive things.

00:35:56.000 --> 00:35:56.240
Right.

00:35:56.240 --> 00:36:00.400
But yeah, that's probably the biggest take one for the team sort of deal.

00:36:00.400 --> 00:36:01.040
Yeah.

00:36:01.040 --> 00:36:03.600
So there's a lot of work under the hood.

00:36:03.600 --> 00:36:09.840
And a lot of people that use Jupyter notebooks, that's their only knowledge of Python.

00:36:09.840 --> 00:36:12.160
They think Python is Jupyter and Jupyter is Python.

00:36:12.160 --> 00:36:14.640
And that's fine.

00:36:14.640 --> 00:36:20.320
And it's a tool and it gives them access to all this stuff, which would be very hard otherwise.

00:36:20.320 --> 00:36:20.880
Yeah.

00:36:20.880 --> 00:36:23.520
So yeah, I think Jupyter is a great example of that.

00:36:23.520 --> 00:36:24.520
Yeah.

00:36:24.520 --> 00:36:30.640
Out in the audience, we have David points out JP term.

00:36:30.640 --> 00:36:32.320
Are you familiar with JP term?

00:36:32.320 --> 00:36:32.640
Yes.

00:36:32.640 --> 00:36:34.400
Is that David Brokert?

00:36:34.400 --> 00:36:35.040
Yeah.

00:36:35.040 --> 00:36:35.120
Yeah.

00:36:35.120 --> 00:36:35.520
Yeah.

00:36:35.520 --> 00:36:35.520
Yeah.

00:36:35.520 --> 00:36:35.520
Yeah.

00:36:35.520 --> 00:36:45.040
The successor of MB term and it's Jupyter, Jupyter lab in the terminal.

00:36:45.040 --> 00:36:46.240
Amazing.

00:36:46.240 --> 00:36:46.480
Yeah.

00:36:46.480 --> 00:36:48.400
It's gone full circle.

00:36:48.400 --> 00:36:51.760
It's like the inception movie.

00:36:51.760 --> 00:36:53.120
It really is.

00:36:53.120 --> 00:36:54.000
Right.

00:36:54.000 --> 00:36:54.560
Yeah.

00:36:54.560 --> 00:36:57.520
But you can embed the textual app inside Jupyter.

00:36:57.520 --> 00:37:02.560
So you can have J term working in a textual app inside Jupyter.

00:37:02.560 --> 00:37:05.200
That's also displaying another notebook.

00:37:05.200 --> 00:37:06.240
Yeah.

00:37:06.240 --> 00:37:07.200
Incredible.

00:37:07.200 --> 00:37:08.000
All right.

00:37:08.000 --> 00:37:17.520
So if we go to the terminal where I got this running and anyone else up there listening,

00:37:17.520 --> 00:37:19.200
wants to check this out, just run it.

00:37:19.200 --> 00:37:27.280
And I was starting to say there's three places you should check out before I got kind of starstruck

00:37:27.280 --> 00:37:28.000
with a view code.

00:37:28.000 --> 00:37:29.120
Okay.

00:37:29.120 --> 00:37:34.400
So I think there's probably the best place to get started is to look at the widgets.

00:37:34.400 --> 00:37:38.160
I don't know what you think, but just like, well, what can this framework do in terms of

00:37:38.160 --> 00:37:40.160
what are the building blocks is that you can look at the widgets.

00:37:40.160 --> 00:37:44.080
And then once you decide, okay, this is pretty interesting.

00:37:44.080 --> 00:37:48.160
I think people should check out the projects because there are some, some pretty interesting

00:37:48.160 --> 00:37:48.480
things.

00:37:48.480 --> 00:37:51.680
I know we've covered them on Python bytes that are built on top of textual.

00:37:51.680 --> 00:37:58.880
And then just to talk about the graphics, what is this, this game?

00:37:58.880 --> 00:38:03.600
This is a game in inverted commas.

00:38:03.600 --> 00:38:06.640
It's got different names.

00:38:06.640 --> 00:38:09.200
Sliding tile puzzle.

00:38:09.200 --> 00:38:10.880
I think it's the most common thing.

00:38:10.880 --> 00:38:11.840
You've probably seen it before.

00:38:11.840 --> 00:38:14.880
You got, you got a square.

00:38:14.880 --> 00:38:18.240
The square is made up of lots of little tiles and there's one space and you can move a,

00:38:18.640 --> 00:38:20.320
square into that one space.

00:38:20.320 --> 00:38:23.520
And the goal is to like reassemble the image.

00:38:23.520 --> 00:38:27.360
But for here, I've used code.

00:38:27.360 --> 00:38:33.520
So you've got all these tiles with code on it and you got to reassemble it into actual working

00:38:33.520 --> 00:38:37.200
code, which I think is what most people think developers do.

00:38:38.080 --> 00:38:39.280
This is how we make code.

00:38:39.280 --> 00:38:41.520
Just by sliding these tiles around.

00:38:41.520 --> 00:38:42.000
Yeah.

00:38:42.000 --> 00:38:42.400
Yeah.

00:38:42.400 --> 00:38:47.760
I remember one of my daughters, I can't remember which one was like, saw me typing out code.

00:38:48.480 --> 00:38:50.000
What are you doing?

00:38:50.000 --> 00:38:50.560
What is that?

00:38:50.560 --> 00:38:53.840
I'm like, work on this project, this program, this website.

00:38:53.840 --> 00:38:55.760
That's what websites look like.

00:38:55.760 --> 00:38:56.000
Okay.

00:38:56.000 --> 00:38:57.520
Yeah.

00:38:57.520 --> 00:38:59.760
My wife calls it the gibberish.

00:38:59.760 --> 00:39:01.520
She says, are you working on the gibberish?

00:39:01.520 --> 00:39:02.000
Yeah, I am.

00:39:02.000 --> 00:39:02.240
Yes.

00:39:03.280 --> 00:39:04.160
That's incredible.

00:39:04.160 --> 00:39:05.600
That's an amazing way to put it.

00:39:05.600 --> 00:39:06.960
Yeah.

00:39:06.960 --> 00:39:13.200
I was just thinking the other day, the incredible power of text.

00:39:13.200 --> 00:39:15.440
Right?

00:39:15.440 --> 00:39:20.720
You think of all these systems, the internet, Linux configuration, source code,

00:39:20.720 --> 00:39:25.360
design through all of that is just words, right?

00:39:25.360 --> 00:39:28.640
It's not working with GUIs and all that stuff.

00:39:28.640 --> 00:39:30.560
It's just typing it out.

00:39:30.560 --> 00:39:32.240
Text is very important.

00:39:32.240 --> 00:39:38.880
I quite like websites that skew graphics and have just kind of like typography based thing.

00:39:38.880 --> 00:39:42.960
I find you can more easily extract information you need.

00:39:42.960 --> 00:39:48.880
But most websites these days you go to and they've loads of ads, loads of image,

00:39:48.880 --> 00:39:50.080
they pop in and out.

00:39:50.080 --> 00:39:52.960
The text seems almost secondary.

00:39:52.960 --> 00:39:57.920
So I'm a big fan of just text in general.

00:39:58.560 --> 00:39:59.040
Yeah.

00:39:59.040 --> 00:39:59.360
Same.

00:39:59.360 --> 00:40:00.720
All right.

00:40:00.720 --> 00:40:01.600
So people can play the game.

00:40:01.600 --> 00:40:02.880
That's kind of interesting.

00:40:02.880 --> 00:40:03.120
Right?

00:40:03.120 --> 00:40:08.320
Like I said, I think where maybe it's more interesting is talking about the widgets.

00:40:08.320 --> 00:40:13.040
And when I look at this, you know what this reminds me of is it reminds me of if I were

00:40:13.040 --> 00:40:21.520
to go over here and type Bulma and go, which Bulma is a very refreshing CSS framework that

00:40:22.080 --> 00:40:31.920
doesn't require build tools and shaking and web pack and all that junk or like tailwind or tailwind

00:40:31.920 --> 00:40:34.880
is kind of a pain to work with, but it's also super beautiful.

00:40:34.880 --> 00:40:36.160
Right?

00:40:36.160 --> 00:40:42.800
When I look at this, the widgets, it feels very much similar to that.

00:40:42.800 --> 00:40:43.040
Right?

00:40:43.040 --> 00:40:44.880
I'm sure people have checked out CSS frameworks.

00:40:44.880 --> 00:40:46.400
Yeah.

00:40:46.400 --> 00:40:46.800
Yeah.

00:40:46.800 --> 00:40:47.680
That's...

00:40:47.680 --> 00:40:47.920
Yeah.

00:40:47.920 --> 00:40:48.000
Yeah.

00:40:48.000 --> 00:40:48.320
Tell us.

00:40:48.320 --> 00:40:48.800
Tell us about it.

00:40:48.800 --> 00:40:50.160
Yeah.

00:40:50.160 --> 00:40:56.960
So, I mean, I'm, you know, again, coming from the web, I want to have a web-like experience

00:40:56.960 --> 00:40:58.240
because everybody's familiar with the web.

00:40:58.240 --> 00:41:01.200
It's like you can sit someone down on a website and they'll be able to use it.

00:41:01.200 --> 00:41:03.040
I wanted the same thing for terminal apps.

00:41:03.040 --> 00:41:09.760
You know, some terminal apps have a bad reputation and have been hard to use and it's mostly deserved.

00:41:09.760 --> 00:41:12.160
Like, you know, how do you quit Vim?

00:41:12.160 --> 00:41:14.160
It's a running joke.

00:41:14.160 --> 00:41:16.240
I know how to quit Vim.

00:41:16.240 --> 00:41:17.520
You reboot your computer.

00:41:17.520 --> 00:41:18.720
Everybody knows that.

00:41:18.720 --> 00:41:19.120
Come on.

00:41:19.120 --> 00:41:20.240
Exactly.

00:41:20.240 --> 00:41:24.640
But I wanted like an interface that people were very, very familiar with.

00:41:24.640 --> 00:41:30.160
So, this is actually in alphabetical order, but I think buttons was actually one of the first thing I developed.

00:41:30.160 --> 00:41:34.960
Because the terminal doesn't give you anything for free.

00:41:34.960 --> 00:41:41.760
The terminal is just text with escape sequences for color and style, like italic, bold, etc.

00:41:41.760 --> 00:41:44.880
But there's no escape sequence for a button.

00:41:44.880 --> 00:41:48.000
The most simplest atomic user interface thing.

00:41:48.000 --> 00:41:48.640
No.

00:41:48.640 --> 00:41:51.280
A button with a bit of text that you click.

00:41:51.280 --> 00:41:53.520
There's nothing in the terminal spec for that.

00:41:54.240 --> 00:41:55.600
So, you have to start from scratch.

00:41:55.600 --> 00:41:58.320
And we built this button.

00:41:58.320 --> 00:41:59.360
It's amazing.

00:41:59.360 --> 00:42:00.480
It looks buttony.

00:42:00.480 --> 00:42:04.640
It even has like a 3D sort of raised effect and stuff.

00:42:04.640 --> 00:42:05.440
Yeah.

00:42:05.440 --> 00:42:08.480
So, there's like a lighter color at the top and a dark color at the bottom.

00:42:08.480 --> 00:42:13.360
And it looks like a classic windows raised button.

00:42:13.360 --> 00:42:17.200
Imagine if this light is like coming from the top and illuminating the top edge.

00:42:17.200 --> 00:42:20.560
Some people don't like them.

00:42:22.320 --> 00:42:25.040
I think one of the reasons is it has to take up three characters.

00:42:25.040 --> 00:42:27.680
In order to get that effect, you have to take up three lines.

00:42:27.680 --> 00:42:29.120
I see.

00:42:29.120 --> 00:42:31.120
So, it creates quite a chunky button.

00:42:31.120 --> 00:42:33.600
It looks like a button, but it's chunky.

00:42:33.600 --> 00:42:38.160
But you can style it very trivially to be like one line long.

00:42:38.160 --> 00:42:41.600
So, your button can just be as tall as it needs to be.

00:42:41.600 --> 00:42:43.440
Nice.

00:42:43.440 --> 00:42:44.320
Yeah.

00:42:44.320 --> 00:42:44.880
These are great.

00:42:44.880 --> 00:42:46.880
And we've got other things.

00:42:46.880 --> 00:42:47.040
Yeah.

00:42:47.040 --> 00:42:50.960
I was thinking as you were talking about the primitives you have to work with.

00:42:50.960 --> 00:42:59.440
You know, I was thinking of pretty much every 3D rendered thing that people see, you know, video games and others as well.

00:42:59.440 --> 00:43:00.160
animations.

00:43:00.160 --> 00:43:01.360
They're just triangles.

00:43:01.360 --> 00:43:02.240
Right?

00:43:02.240 --> 00:43:03.440
There's just a bunch of triangles.

00:43:03.440 --> 00:43:03.600
Yeah.

00:43:03.600 --> 00:43:12.880
It's just so insane that you think that thing that looks like a real forest, every single thing on the screen is some weird triangle with a texture and stuff applied to it.

00:43:12.880 --> 00:43:14.000
But a lot of them.

00:43:14.000 --> 00:43:14.400
Lots of triangles.

00:43:14.400 --> 00:43:14.640
Yeah.

00:43:14.640 --> 00:43:15.120
Lots.

00:43:15.120 --> 00:43:15.920
Yeah.

00:43:15.920 --> 00:43:21.120
You can't think too hard about how fast things are happening on graphics cards because your mind will melt.

00:43:21.120 --> 00:43:22.560
It's like there's so much going on.

00:43:22.560 --> 00:43:22.560
Yeah.

00:43:22.560 --> 00:43:24.320
You've got check boxes.

00:43:24.320 --> 00:43:25.040
Right at all.

00:43:25.040 --> 00:43:26.160
Yep.

00:43:26.160 --> 00:43:26.160
Yeah.

00:43:26.160 --> 00:43:26.160
Yeah.

00:43:26.160 --> 00:43:26.560
Yeah.

00:43:26.560 --> 00:43:26.720
Yeah.

00:43:26.720 --> 00:43:27.520
Radio buttons.

00:43:27.520 --> 00:43:28.080
Yeah.

00:43:28.080 --> 00:43:28.560
Yeah.

00:43:28.560 --> 00:43:29.760
Radio buttons, which are great.

00:43:29.760 --> 00:43:31.680
A lot of the things that people might think about.

00:43:31.680 --> 00:43:32.320
Data tables.

00:43:32.320 --> 00:43:35.280
You know, this is, if you're doing data science.

00:43:35.280 --> 00:43:40.560
I think one of the things worth talking about, because when we talk about some of the performance things,

00:43:42.480 --> 00:43:46.960
there's a lot of this within that within that, right?

00:43:46.960 --> 00:43:50.160
Like in your data table.

00:43:50.160 --> 00:43:54.080
So this whole UI, I can scroll up and down and see all the different widgets.

00:43:54.080 --> 00:43:59.920
But then when I get to the data table section, I can scroll horizontally and vertically within the data table itself.

00:43:59.920 --> 00:44:00.720
Right?

00:44:00.720 --> 00:44:01.440
Yeah.

00:44:01.440 --> 00:44:04.560
You can also press control A and that will maximize it.

00:44:04.560 --> 00:44:07.520
Oh, yeah.

00:44:07.520 --> 00:44:09.200
Very cool.

00:44:09.200 --> 00:44:10.160
I didn't even know about that.

00:44:10.720 --> 00:44:15.760
Yeah, this is a nice feature, which I think websites should have and goodies in general.

00:44:15.760 --> 00:44:18.640
I remember Windows used to suffer from this.

00:44:18.640 --> 00:44:23.280
You'd get like a dialogue where you had to enter a lot of text, but the dialogue was this size.

00:44:23.280 --> 00:44:26.240
And you weren't allowed to resize it.

00:44:26.240 --> 00:44:27.360
You can't resize it.

00:44:27.360 --> 00:44:28.720
Yeah.

00:44:28.720 --> 00:44:31.120
You tap over and hope you hit the right button that you can't see.

00:44:31.120 --> 00:44:32.560
Yeah.

00:44:32.560 --> 00:44:42.080
So I added a shortcut key which can maximize anything that's which is focused, make it resize it to the size of the screen.

00:44:42.080 --> 00:44:44.400
Nice.

00:44:44.400 --> 00:44:44.720
Okay.

00:44:46.400 --> 00:44:50.880
So in the interest of time, let's go and talk about projects real quick.

00:44:50.880 --> 00:44:58.720
I think one of the things that probably can inspire people a lot is some of these projects here.

00:44:58.720 --> 00:45:03.840
If you go to the project section, you've got a couple that are super nice here.

00:45:03.840 --> 00:45:11.360
For example, I would say this posting I know by Darren Burns is pretty interesting.

00:45:11.360 --> 00:45:13.440
Yeah.

00:45:13.440 --> 00:45:14.560
Like Postman, right?

00:45:14.560 --> 00:45:17.280
Like an HTTP client, but entirely in your terminal.

00:45:17.280 --> 00:45:18.080
Tell people about this.

00:45:18.080 --> 00:45:18.720
This is great.

00:45:18.720 --> 00:45:19.600
Yeah.

00:45:19.600 --> 00:45:26.080
This is something that Darren Burns built and he's a developer of Textual Winning developers.

00:45:26.080 --> 00:45:27.600
And he made a fantastic job of this.

00:45:27.600 --> 00:45:29.440
This is not a textualized project.

00:45:29.440 --> 00:45:36.240
But basically it's Postman, which is a tool for making HTTP requests.

00:45:36.240 --> 00:45:44.640
You might use it if you're developing an API and you want to experiment and you don't want to have to build all the tooling to talk to your API.

00:45:44.640 --> 00:45:49.600
You can just go straight into this interface and experiment and play around with it.

00:45:49.600 --> 00:45:50.320
Yeah.

00:45:50.320 --> 00:45:51.520
I did that two days ago.

00:45:51.520 --> 00:45:52.560
Yeah.

00:45:52.560 --> 00:45:55.280
And it's super useful.

00:45:55.280 --> 00:45:59.200
And the fact is in the terminal is completely appropriate for this kind of application because

00:45:59.200 --> 00:46:03.440
that's where you're going to be a lot of the time.

00:46:03.440 --> 00:46:04.800
It just seems to be the right place.

00:46:04.800 --> 00:46:11.200
If you have your app in a browser, it can take you out of your flow if you're developing and then

00:46:11.200 --> 00:46:13.200
and having to switch over a window.

00:46:13.200 --> 00:46:18.000
But having it all on the terminal is super useful.

00:46:18.000 --> 00:46:24.480
And this project has sort of grown in feature set and I think it's comparable to some

00:46:24.480 --> 00:46:26.720
much, much larger projects, including Postman.

00:46:26.720 --> 00:46:27.520
Yeah.

00:46:27.520 --> 00:46:27.920
Nice.

00:46:27.920 --> 00:46:29.440
And open source, right?

00:46:29.440 --> 00:46:30.720
Open source.

00:46:30.720 --> 00:46:30.960
Yeah.

00:46:30.960 --> 00:46:31.440
Yeah.

00:46:31.440 --> 00:46:32.080
Cool.

00:46:32.080 --> 00:46:37.680
What other ones do you want to give a quick shout out to?

00:46:37.680 --> 00:46:41.600
Well, yeah, we'll go through them there.

00:46:41.600 --> 00:46:44.960
We've got memory that was written by Bloomberg.

00:46:44.960 --> 00:46:49.760
They were an early adopter of Textual and it's kind of a memory profiler.

00:46:49.760 --> 00:46:56.560
So it can run your Python application and it can pinpoint exactly what's taken up too much memory.

00:46:56.560 --> 00:47:01.760
Or if you've got a leak, you know, you're in a loop and you're reserving objects, you don't know about it.

00:47:02.560 --> 00:47:08.720
It can alert you to that, which would be very hard to actually debug without any kind of tool.

00:47:08.720 --> 00:47:12.640
So that's a fantastic project.

00:47:12.640 --> 00:47:12.800
Yeah.

00:47:13.680 --> 00:47:17.280
I had them on not too long ago to talk about it.

00:47:17.280 --> 00:47:18.880
And yeah, this is a super cool project.

00:47:18.880 --> 00:47:24.880
I think also just graphically, it's pretty neat, right?

00:47:24.880 --> 00:47:26.080
Yeah.

00:47:26.080 --> 00:47:34.000
It displays all the information that you need right there in the terminal in a nice way.

00:47:34.000 --> 00:47:40.080
I mean, I can imagine a previous version of something like this writing out a big spew of

00:47:40.080 --> 00:47:46.000
JSON, which you've then got to study to figure it out.

00:47:46.000 --> 00:47:48.400
We've saved a CSV file.

00:47:48.400 --> 00:47:49.120
Now you can look at it.

00:47:49.120 --> 00:47:49.840
It's like, oh, great.

00:47:49.840 --> 00:47:51.280
Yeah, exactly.

00:47:51.280 --> 00:47:56.640
But if you can look at it in a graphical form in a nice table, you can like visually parse

00:47:56.640 --> 00:47:57.920
information much quicker.

00:47:57.920 --> 00:47:59.680
So you can pinpoint things.

00:47:59.680 --> 00:48:00.320
Yeah.

00:48:00.320 --> 00:48:05.680
I mean, we talked a little bit around this, but another huge benefit of these types of UIs

00:48:05.680 --> 00:48:15.840
with textual is the ability to run them remotely on servers and other, or on a Raspberry Pi or on

00:48:15.840 --> 00:48:21.040
things that are embedded types of stuff that you just only access through the terminal, right?

00:48:21.040 --> 00:48:21.600
Yeah.

00:48:21.600 --> 00:48:29.120
Like if you wanted to do memory on your web server, you probably don't want to just open

00:48:29.120 --> 00:48:35.440
up a bunch of ports and start serving a parallel HTTP request over it or something, right?

00:48:35.440 --> 00:48:39.120
But if you SSH in and you just run this GUI that's updating, it's really nice, right?

00:48:39.120 --> 00:48:40.960
Yeah, exactly.

00:48:40.960 --> 00:48:43.680
There's some, you don't even need to have a desktop.

00:48:43.680 --> 00:48:46.720
You don't need to run a server.

00:48:46.720 --> 00:48:50.240
And like I said, you don't need to like set your firewall to allow a particular port and then

00:48:50.240 --> 00:48:51.120
configure the application.

00:48:51.120 --> 00:48:54.240
All that's gone because it's a text interface.

00:48:54.240 --> 00:48:58.720
You just need to have a shell SSH into the server and then run it.

00:48:58.720 --> 00:49:04.000
And you can see this nice interface there because it is just purely text.

00:49:04.480 --> 00:49:06.720
And there's not much text involved.

00:49:06.720 --> 00:49:09.920
You'd be surprised about text that needs to be sent over the wire.

00:49:09.920 --> 00:49:11.840
It's surprisingly minimal.

00:49:11.840 --> 00:49:16.800
If you compared it to a YouTube video of the lowest quality, I don't know what the

00:49:16.800 --> 00:49:19.040
lowest quality is, like 120p or something.

00:49:19.040 --> 00:49:20.320
480p.

00:49:20.320 --> 00:49:21.040
Yeah, yeah.

00:49:21.040 --> 00:49:23.440
360 by 240 or something.

00:49:23.440 --> 00:49:23.920
Who knows?

00:49:23.920 --> 00:49:29.280
Yeah, that would be vastly more data than like a text interface like this.

00:49:29.280 --> 00:49:32.000
Yeah, even if it's madly updating.

00:49:32.000 --> 00:49:32.240
Yeah.

00:49:32.240 --> 00:49:35.840
I mean, you could actually, you could if you want to push it.

00:49:35.840 --> 00:49:40.640
Like if I was to run this ridiculous demo with a spinning gradient at 60 frames a second

00:49:40.640 --> 00:49:49.440
and setting the screen size to ridiculous, it might turn into a video, but for most interfaces.

00:49:50.320 --> 00:49:56.560
But is it probably applicable for like GZip transfer as well?

00:49:56.560 --> 00:49:58.320
You know, text compresses really well?

00:49:58.320 --> 00:49:58.720
I don't know.

00:49:58.720 --> 00:49:59.760
True.

00:49:59.760 --> 00:50:00.240
True.

00:50:00.240 --> 00:50:00.800
Potentially.

00:50:00.800 --> 00:50:02.320
It depends what you're rendering.

00:50:02.320 --> 00:50:03.440
I don't know what SSH does.

00:50:03.440 --> 00:50:04.400
I don't know.

00:50:04.400 --> 00:50:04.880
Maybe it does.

00:50:04.880 --> 00:50:08.080
I would think it compresses.

00:50:08.080 --> 00:50:10.800
Compresses and encrypts.

00:50:10.800 --> 00:50:12.160
Yeah, I would hope so.

00:50:12.160 --> 00:50:12.480
But yeah.

00:50:12.480 --> 00:50:12.640
Yeah.

00:50:12.640 --> 00:50:14.880
Well, compression should be cheaper than the encryption.

00:50:14.880 --> 00:50:17.040
So yeah, why not go ahead and compress it while you're at it, right?

00:50:17.040 --> 00:50:17.680
Exactly, yeah.

00:50:17.680 --> 00:50:18.960
Yeah, yeah, yeah.

00:50:18.960 --> 00:50:20.960
Okay.

00:50:20.960 --> 00:50:24.240
So somewhere in here, we've pulled up so many things.

00:50:24.240 --> 00:50:27.600
I pulled up your article that I wanted to talk about as well.

00:50:27.600 --> 00:50:29.120
So let's talk about this.

00:50:29.120 --> 00:50:34.880
This was your, you said you wanted to write an article for sort of celebrate the 1.0 milestone

00:50:34.880 --> 00:50:35.520
for textual.

00:50:35.520 --> 00:50:40.160
And the article was called algorithms for high performance terminal apps.

00:50:40.160 --> 00:50:42.720
And I thought there was just some fun things to pull out of here.

00:50:42.720 --> 00:50:45.280
So I thought we could maybe talk through some of them.

00:50:45.280 --> 00:50:47.360
Yeah, sure.

00:50:47.360 --> 00:50:54.560
So there's lots of interesting technical problems to solve with textual and lots of

00:50:54.560 --> 00:50:57.440
cool solutions.

00:50:57.440 --> 00:51:02.640
And by so far, I rarely have the chance to talk to anyone about it because it's one of these things

00:51:02.640 --> 00:51:03.520
that's kind of under the hood.

00:51:03.520 --> 00:51:04.160
It just works.

00:51:04.160 --> 00:51:05.120
Yeah.

00:51:05.120 --> 00:51:07.360
So there's nothing to discuss.

00:51:07.360 --> 00:51:11.520
So I wrote this blog post to describe some of the cool things that go on.

00:51:11.520 --> 00:51:17.120
The most core part of textual is the compositor.

00:51:18.080 --> 00:51:20.240
This takes all the widgets.

00:51:20.240 --> 00:51:26.720
If you've got an interface, it might have a data table, button, checkboxes.

00:51:26.720 --> 00:51:32.000
And there might be loads of those and it might be able to scroll through it.

00:51:32.000 --> 00:51:36.800
And textual has to take all those widgets and assemble them into a single update.

00:51:36.800 --> 00:51:41.680
Because there's nothing in the terminal that does a kind of a tiling window manager.

00:51:41.680 --> 00:51:44.400
You just write text to the terminal.

00:51:44.960 --> 00:51:51.840
So the software has to create this illusion that you've got windows and things that are overlapping.

00:51:51.840 --> 00:51:53.920
And that's essentially what the compositor does.

00:51:53.920 --> 00:51:55.200
That's great.

00:51:55.200 --> 00:51:57.200
And you've got transparency.

00:51:57.200 --> 00:51:58.560
Sort of.

00:51:58.560 --> 00:52:00.080
Oh my goodness.

00:52:00.080 --> 00:52:02.320
Yeah, it's kind of magical.

00:52:02.320 --> 00:52:04.320
It's like it shouldn't be possible in the terminal.

00:52:04.320 --> 00:52:05.520
No, it should not be possible.

00:52:05.520 --> 00:52:06.160
It cheats.

00:52:06.160 --> 00:52:12.400
You're not seeing true transparency because the terminal is not capable of it.

00:52:12.400 --> 00:52:21.760
You can't put like an X on top of an A and then see the X translucently with the A in the background.

00:52:21.760 --> 00:52:25.680
But you can change background colors.

00:52:25.680 --> 00:52:34.560
So if you put something on top of background, you can calculate the transparency on top of the widget underneath it.

00:52:34.560 --> 00:52:38.240
So you can create the illusion of background of transparency.

00:52:38.240 --> 00:52:43.840
And that's something that the compositor does as well.

00:52:43.840 --> 00:52:44.640
Yeah.

00:52:44.640 --> 00:52:46.880
Is textual pure Python?

00:52:46.880 --> 00:52:48.720
Pure Python.

00:52:48.720 --> 00:52:48.880
Yeah.

00:52:48.880 --> 00:52:49.840
Wow.

00:52:51.040 --> 00:52:55.920
I had thought that at some point we would have to write something in Rust.

00:52:55.920 --> 00:53:01.840
And I bought a couple of Rust books, which I haven't read yet.

00:53:01.840 --> 00:53:09.280
But every time I got to a point where this is a bit too slow, I found a very good optimization in Python.

00:53:09.280 --> 00:53:12.400
So it turns out that it's just not necessary.

00:53:12.400 --> 00:53:18.720
I mean, if we were to write some core code in Rust, I don't think we'd get a marvelous speed up.

00:53:18.720 --> 00:53:22.800
We might get 5%, 10% if we're lucky for a lot of effort.

00:53:22.800 --> 00:53:28.160
But since it runs on a lowly Raspberry Pi, it's not been necessary.

00:53:28.160 --> 00:53:30.080
Python's been more than fast enough.

00:53:30.080 --> 00:53:30.720
Yeah.

00:53:30.720 --> 00:53:35.360
And you can just ride on the coattails of the faster CPython team.

00:53:36.240 --> 00:53:36.880
Oh yeah.

00:53:36.880 --> 00:53:36.960
Yeah.

00:53:36.960 --> 00:53:37.840
I mean, yeah.

00:53:37.840 --> 00:53:38.320
That helps.

00:53:38.320 --> 00:53:41.200
Like a new version comes along, we can say textual just got 10% faster.

00:53:41.200 --> 00:53:46.160
Textual has some sort of concurrency framework too, right?

00:53:46.160 --> 00:53:47.600
Yeah.

00:53:47.600 --> 00:53:58.080
So it's based on async.io and every widget from a button to a text area to a checkbox runs an async.io task.

00:53:58.080 --> 00:54:03.040
So all these things are running concurrently, potentially updating the state.

00:54:03.760 --> 00:54:10.000
And textual will update things accordingly to the schedule of the widgets.

00:54:10.000 --> 00:54:14.000
You might have a widget which, say, updates 10 times a second.

00:54:14.000 --> 00:54:16.960
Another widget which updates when you press a key.

00:54:16.960 --> 00:54:21.280
And another widget which updates infrequently.

00:54:21.280 --> 00:54:30.080
And textual will combine those updates into a single update so that it looks clean.

00:54:30.080 --> 00:54:31.040
It doesn't flicker.

00:54:31.040 --> 00:54:33.360
And it can--

00:54:33.360 --> 00:54:38.640
It's what does the magic of updating things.

00:54:38.640 --> 00:54:39.920
Yeah.

00:54:39.920 --> 00:54:40.240
Awesome.

00:54:40.240 --> 00:54:41.840
That's super neat.

00:54:41.840 --> 00:54:48.880
I think UI frameworks and async.io, async and await, they make a lot of sense, right?

00:54:48.880 --> 00:54:50.160
It's event-driven stuff.

00:54:50.160 --> 00:54:55.520
And so you can, instead of pulling or whatever, you just say, I'm going to wait till this thing

00:54:55.520 --> 00:54:57.520
has some kind of event and then I'll work on it.

00:54:57.520 --> 00:55:00.400
And if that doesn't have an event, I'm going to go work on something else.

00:55:00.400 --> 00:55:01.280
Yeah, it's pretty cool.

00:55:01.280 --> 00:55:02.160
Yeah, exactly.

00:55:02.160 --> 00:55:06.400
It's funny that async.io was obviously-- you can tell by the name it wasn't intended to

00:55:06.400 --> 00:55:10.720
build user interfaces, whether in the terminal or not.

00:55:10.720 --> 00:55:18.960
It was built for I/O, but it's very good at handling concurrency of any kind, including

00:55:18.960 --> 00:55:21.360
text user interfaces.

00:55:21.360 --> 00:55:23.600
So I'm a big fan of async.io.

00:55:23.600 --> 00:55:25.200
It's not perfect.

00:55:25.200 --> 00:55:29.120
There are a bunch of gotchas which come up in our support channels.

00:55:29.120 --> 00:55:35.280
For instance, someone will be playing around with textual and will say, well, I'm going to need

00:55:35.280 --> 00:55:36.880
some long-running tasks.

00:55:36.880 --> 00:55:39.280
So I'll simulate this by putting a sleep pin.

00:55:39.280 --> 00:55:40.400
We'll do like sleep 10.

00:55:40.400 --> 00:55:42.880
And then the whole app just locks up.

00:55:42.880 --> 00:55:43.520
I can't believe it.

00:55:43.520 --> 00:55:43.920
Exactly.

00:55:43.920 --> 00:55:49.200
So it's not perfect, but there is no perfect solution to concurrency.

00:55:49.200 --> 00:55:56.480
But I think it's as good as it can be with the current level of technology, I think.

00:55:56.480 --> 00:55:57.200
Yeah.

00:55:57.200 --> 00:55:57.440
Yeah.

00:55:57.440 --> 00:55:58.480
Yeah.

00:55:58.480 --> 00:55:58.880
Very neat.

00:55:58.880 --> 00:56:01.600
Free-threaded Python.

00:56:01.600 --> 00:56:03.680
Have you played with this?

00:56:03.680 --> 00:56:05.520
Is it going to influence that kind of thing?

00:56:05.520 --> 00:56:08.240
I think so.

00:56:08.240 --> 00:56:11.680
There's a whole lot of cool things that free-threaded Python can do.

00:56:11.680 --> 00:56:16.080
We've kind of convinced ourselves that we didn't need that kind of level of concurrency,

00:56:16.080 --> 00:56:19.760
you know, for like a web application or something, because it's linear.

00:56:19.760 --> 00:56:20.960
No, but you do.

00:56:20.960 --> 00:56:20.960
Yeah.

00:56:20.960 --> 00:56:26.000
And the I/O gives you concurrency in a sense, because you're waiting for the I/O.

00:56:26.000 --> 00:56:26.960
Yeah.

00:56:26.960 --> 00:56:33.200
But I think free-threaded Python, I think we need a better abstraction for concurrency.

00:56:33.920 --> 00:56:34.160
Yeah.

00:56:34.160 --> 00:56:34.240
Yeah.

00:56:34.240 --> 00:56:34.720
Yeah.

00:56:34.720 --> 00:56:35.120
Yeah.

00:56:35.120 --> 00:56:48.720
I think it should be the same as async/io.

00:56:48.720 --> 00:56:49.760
It should be async and await.

00:56:49.760 --> 00:56:55.600
And there should be some item marriage between them where like you don't really know as you're

00:56:55.600 --> 00:56:56.480
consuming it, you know?

00:56:56.480 --> 00:56:57.920
Yeah.

00:56:57.920 --> 00:57:01.360
Unfortunately, async/io is single-threaded.

00:57:01.360 --> 00:57:06.720
You can use multiple threads, but you've got to consciously write the code.

00:57:06.720 --> 00:57:06.880
Yeah.

00:57:06.880 --> 00:57:13.440
I would like to see an async/io where it just distributed work across the cores.

00:57:13.440 --> 00:57:15.920
If it's I/O based, just keep it on the same thread.

00:57:15.920 --> 00:57:19.440
But if it's computational based, then like you're going to need to just put it on another

00:57:19.440 --> 00:57:21.520
thread and give me a future sort of thing to await.

00:57:21.520 --> 00:57:22.720
Yeah.

00:57:22.720 --> 00:57:23.200
We don't care.

00:57:23.200 --> 00:57:23.680
Yeah.

00:57:23.680 --> 00:57:24.240
Absolutely.

00:57:24.240 --> 00:57:24.640
Yeah.

00:57:24.640 --> 00:57:29.520
So I think in the future we're probably going to get something like that because I think

00:57:29.520 --> 00:57:34.560
freestethered Python is so valuable that people are going to want to use it more and they're

00:57:34.560 --> 00:57:36.960
going to build these better abstractions.

00:57:36.960 --> 00:57:45.200
So I imagine in a year or two, I don't know, maybe less, we'll have an async/io that's

00:57:45.200 --> 00:57:47.200
free-threaded or something like it.

00:57:47.200 --> 00:57:48.000
Yeah.

00:57:48.000 --> 00:57:51.840
We say that we don't need it for web apps because we can just scale them out, right?

00:57:51.840 --> 00:57:54.400
We'll just run four of them, four worker processes.

00:57:54.400 --> 00:57:57.360
But there's a big memory cost to running.

00:57:57.360 --> 00:58:02.160
Well, I've got 16 cores, so I'm going to run 16 worker processes, right?

00:58:02.160 --> 00:58:02.720
Yeah.

00:58:02.720 --> 00:58:04.000
They each take half a gig.

00:58:04.000 --> 00:58:06.320
All of a sudden you're like, "It gigs just for this."

00:58:06.320 --> 00:58:07.520
Yeah.

00:58:07.520 --> 00:58:10.480
Just so I can get computational parallelism, right?

00:58:10.480 --> 00:58:11.440
Yeah.

00:58:11.440 --> 00:58:11.920
Which is not-

00:58:11.920 --> 00:58:12.320
Exactly.

00:58:12.320 --> 00:58:18.800
I mean, yeah, the io gets you a lot of the way there, but sometimes you accidentally create

00:58:18.800 --> 00:58:24.160
CPU bound code, which would run very, very poorly.

00:58:24.160 --> 00:58:29.440
But if we had, if we're using all our threads efficiently, then that should be easier.

00:58:29.440 --> 00:58:30.480
It should be easier.

00:58:30.480 --> 00:58:30.720
Yeah.

00:58:30.720 --> 00:58:33.280
You know, it's super easy.

00:58:33.280 --> 00:58:40.720
Like, "Oh, I've got an ORM and I'm going to return 20,000 things that I'm parsing into Pydantic

00:58:40.720 --> 00:58:41.840
objects for FastAPI."

00:58:41.840 --> 00:58:45.760
All of a sudden, like the most of the work is the serialization that's computational.

00:58:45.760 --> 00:58:46.480
Anyway, all right.

00:58:46.480 --> 00:58:46.480
So, yeah.

00:58:46.480 --> 00:58:46.480
Awesome.

00:58:46.480 --> 00:58:48.640
Let's get back to this.

00:58:48.640 --> 00:58:50.640
But I think that's super interesting.

00:58:50.640 --> 00:58:52.720
We could do a whole another hour on that probably.

00:58:52.720 --> 00:58:57.440
So, one of the things in here you talked about is thinking in segments and not

00:58:57.440 --> 00:59:02.800
characters or stuff for drawing terminal lines.

00:59:02.800 --> 00:59:06.800
Let's talk about that because I really want to talk about the switching the primitive idea you got,

00:59:06.800 --> 00:59:08.160
but I think this is a good setup.

00:59:08.160 --> 00:59:09.760
Yeah, sure.

00:59:09.760 --> 00:59:15.040
So, people who aren't familiar with inner workings of terminals might look at terminals

00:59:15.040 --> 00:59:18.400
and think it's like a two-dimensional array of characters.

00:59:18.400 --> 00:59:21.680
Because it does seem like that.

00:59:21.680 --> 00:59:28.720
And if you're building a text lab, you might think so you could compose a screen full of text,

00:59:29.440 --> 00:59:33.040
like a bitmap, as if the characters were pixels.

00:59:33.040 --> 00:59:39.200
And the developers would be like, stuff we're very familiar with, we could easily build that

00:59:39.200 --> 00:59:42.400
and create stuff with it.

00:59:42.400 --> 00:59:48.240
But the problem is that terminals aren't two-dimensional arrays of characters.

00:59:48.240 --> 00:59:54.080
And it's for one reason is that some characters take up twice as much space as others.

00:59:54.080 --> 00:59:59.360
Chinese, Japanese, and Korean text typically take up two characters because their characters are

01:00:00.080 --> 01:00:05.280
more complex. They deliver more information in a single character, so they have to be wider.

01:00:05.280 --> 01:00:12.080
There's also emoji, which many emojis can take up twice as much space.

01:00:12.080 --> 01:00:15.040
Try to have the snake emoji.

01:00:15.040 --> 01:00:18.320
Exactly. I think that might be two.

01:00:18.320 --> 01:00:20.320
I don't know how wide it is.

01:00:20.320 --> 01:00:25.600
Some emoji are one, like a smiley face or something, but some emoji are two.

01:00:26.480 --> 01:00:32.080
And if you were to treat it like a two-dimensional ray, it kind of falls apart at that point because

01:00:32.080 --> 01:00:37.040
you know, if you subtract one from the y coordinate, it's not directly above

01:00:37.040 --> 01:00:40.160
the original coordinate.

01:00:41.200 --> 01:00:49.680
So in situations like that, rather than trying to fudge things into the primitive that you first thought of,

01:00:49.680 --> 01:00:57.600
you can come up with a new primitive, a new way that represents the very lowest common denominator of

01:00:57.600 --> 01:00:58.400
thing you want to do.

01:00:59.280 --> 01:01:02.000
And for textual that turned out to be segments.

01:01:02.000 --> 01:01:07.200
So rather than a character, it's like a pixel, we use a segment.

01:01:07.200 --> 01:01:11.840
A segment is a string, any number of characters, plus a style.

01:01:12.880 --> 01:01:17.920
And by assembling these segments, you can represent anything in the UI.

01:01:17.920 --> 01:01:24.800
And all the operations which are done are kind of built on segments.

01:01:24.800 --> 01:01:30.400
So I call this switching the primitive because the original primitive was like a character as a pixel,

01:01:30.400 --> 01:01:32.000
which didn't work.

01:01:32.000 --> 01:01:37.840
If you were to, you could use that to, with a bunch of fudges to build on top of it.

01:01:37.840 --> 01:01:39.760
But you might find that it falls apart.

01:01:39.760 --> 01:01:42.560
Things which should be straightforward, suddenly become really complicated.

01:01:42.560 --> 01:01:45.520
And that's because as developers, we tend to layer

01:01:45.520 --> 01:01:48.960
primitives on top of other operations.

01:01:49.440 --> 01:01:55.520
And if the very foundational primitive doesn't represent your problem very well,

01:01:55.520 --> 01:01:57.280
then it can fall apart.

01:01:57.280 --> 01:02:02.320
So the switch from pixels to segments worked very well with textual.

01:02:02.320 --> 01:02:05.920
And textual is essentially a segment processing engine.

01:02:05.920 --> 01:02:10.880
Everything the compositor does takes in a bunch of segments, manipulates them,

01:02:10.880 --> 01:02:15.600
spits out new segments, and then those get turned into escape sequences.

01:02:15.600 --> 01:02:17.600
Yeah, very cool.

01:02:17.600 --> 01:02:22.800
I think this idea of switching the primitive.

01:02:22.800 --> 01:02:27.680
People who are new to programming or new to Python, especially programming,

01:02:27.680 --> 01:02:30.640
I have a hard time.

01:02:30.640 --> 01:02:32.240
I see the code.

01:02:32.240 --> 01:02:35.360
I look at someone else's code, and I see the code, and it makes sense.

01:02:35.360 --> 01:02:39.440
But then when I sit down with a blank screen and try to solve a problem, I'm stuck.

01:02:39.440 --> 01:02:40.720
I don't know what to do.

01:02:40.720 --> 01:02:45.360
And this switching the primitive concept of like, we looked at it this way,

01:02:45.360 --> 01:02:48.000
and it just seems so complicated and intractable.

01:02:48.000 --> 01:02:52.880
And then I decided to rejigger maybe the data structures and how we organize stuff

01:02:52.880 --> 01:02:53.760
and how we combine them.

01:02:53.760 --> 01:02:56.400
And boom, it just unlocks simplicity, actually.

01:02:56.400 --> 01:02:59.520
Kind of like going back to our triangles and graphics.

01:02:59.520 --> 01:03:01.600
It's like, well, if you think in pixels,

01:03:01.600 --> 01:03:03.760
3D game engines are impossible.

01:03:04.480 --> 01:03:06.320
With ray tracing and lighting and shadows.

01:03:06.320 --> 01:03:10.240
You think in triangles, all of a sudden, it unlocks it, right?

01:03:10.240 --> 01:03:11.600
And this sounds a little bit similar.

01:03:11.600 --> 01:03:14.320
And I think that's a pretty valuable lesson for people to take.

01:03:14.320 --> 01:03:16.080
That's exactly right.

01:03:16.080 --> 01:03:22.000
So if you had a game engine and the only function it had was like put pixel,

01:03:22.000 --> 01:03:27.120
it would be a nightmare to build anything but the most trivial games.

01:03:27.120 --> 01:03:32.080
But the primitive of a triangle means you can build 3D anything.

01:03:32.080 --> 01:03:33.200
So that is the primitive.

01:03:33.200 --> 01:03:33.440
Yeah.

01:03:33.440 --> 01:03:35.040
And they have angles, so they have reflection.

01:03:35.040 --> 01:03:36.480
And so they have all sorts of stuff.

01:03:36.480 --> 01:03:36.800
Yeah.

01:03:36.800 --> 01:03:38.000
Yeah.

01:03:38.000 --> 01:03:42.480
Something similar came up when Darren was building the text area.

01:03:42.480 --> 01:03:47.200
So the text area has lots of operations like insert a new line,

01:03:47.200 --> 01:03:55.440
delete a character, delete a line, delete a paragraph, cut and paste, etc.

01:03:56.160 --> 01:04:00.240
And the primitive for that boiled down to a very, very simple primitive.

01:04:00.240 --> 01:04:03.040
And that was replace a range of text with new text.

01:04:03.040 --> 01:04:10.240
It's like anything you can do to a text area comes down to that primitive of a range plus new text.

01:04:10.240 --> 01:04:14.160
Like to delete something, you replace a range with an empty string.

01:04:14.160 --> 01:04:23.040
To insert something, you replace a range with like the insertion character, like a new line,

01:04:23.040 --> 01:04:24.480
plus the previous string.

01:04:24.480 --> 01:04:27.920
So everything boils down to like one very simple primitive.

01:04:27.920 --> 01:04:33.120
And once you find the right primitive, bigger problems become much, much easier.

01:04:33.120 --> 01:04:34.000
Yeah.

01:04:34.000 --> 01:04:35.760
A hundred percent.

01:04:35.760 --> 01:04:36.320
Absolutely.

01:04:36.320 --> 01:04:37.760
It's amazing the way it works.

01:04:37.760 --> 01:04:39.680
So we'll get short on time.

01:04:39.680 --> 01:04:45.840
We got to pick one more, one more lesson from here that you want to, I want to talk about maybe.

01:04:47.120 --> 01:04:50.320
The spatial map was quite interesting.

01:04:50.320 --> 01:04:50.960
Yeah, yeah.

01:04:50.960 --> 01:04:51.520
I think so too.

01:04:51.520 --> 01:04:52.800
A bit further down.

01:04:52.800 --> 01:04:53.120
Yeah.

01:04:53.120 --> 01:04:59.680
So one of the problems we had in textual when interfaces get complex, we've got lots and lots of

01:04:59.680 --> 01:05:00.800
widgets.

01:05:00.800 --> 01:05:03.360
Some of them are visible and some of them are not.

01:05:03.360 --> 01:05:04.480
Some of them are scrolled off.

01:05:04.480 --> 01:05:06.320
They're still there in memory.

01:05:06.320 --> 01:05:07.600
We know exactly where they are.

01:05:07.600 --> 01:05:14.240
And when we come to render that, the most obvious way to do that is to step through them in a for loop

01:05:14.240 --> 01:05:15.920
for widgets in all widgets.

01:05:15.920 --> 01:05:17.840
Do stuff to widget.

01:05:18.960 --> 01:05:26.880
But that means we're iterating over all the widgets every single time, even if they aren't visible.

01:05:26.880 --> 01:05:31.120
So the spatial map is attempt to optimize that.

01:05:31.120 --> 01:05:36.240
Basically, it's a very quick way of deciding which the widgets are on screen and which the widgets are

01:05:36.240 --> 01:05:37.840
currently scrolled off.

01:05:37.840 --> 01:05:41.920
So we literally don't need to even loop through the scrolled off widgets.

01:05:42.880 --> 01:05:51.040
And the way we did that briefly is we kind of logically separated the terminal into a grid.

01:05:51.040 --> 01:05:59.760
There's a step where you go through and assign every widget to the grid squares that it might overlap with.

01:05:59.760 --> 01:06:02.480
Small widgets might be right inside a grid square.

01:06:02.480 --> 01:06:05.920
Some may overlap one or two or more.

01:06:05.920 --> 01:06:12.240
And then once we've got that information, it's very easy to pick out which widgets are visible

01:06:12.240 --> 01:06:14.640
and exclude which widgets aren't.

01:06:14.640 --> 01:06:19.280
Because we can take the screen, figure out which of the grid squares it covers.

01:06:19.280 --> 01:06:21.920
And then we can go through those grid squares.

01:06:21.920 --> 01:06:24.400
And there's probably just a handful of them.

01:06:24.400 --> 01:06:28.000
And each of those grid squares is associated with a list of widgets which are under that.

01:06:28.000 --> 01:06:30.640
You can combine that with a set.

01:06:30.640 --> 01:06:36.560
And then very quickly, you reduce that problem domain from being potentially unbounded very large to

01:06:36.560 --> 01:06:38.160
very small.

01:06:38.160 --> 01:06:40.880
Some of the widgets might actually not be visible.

01:06:40.880 --> 01:06:44.320
They might actually be in a grid square which is off the edge of the screen.

01:06:44.320 --> 01:06:49.440
But we can just loop through those and discard those ones.

01:06:49.440 --> 01:06:53.440
But that's a much smaller operation than looping through every widget.

01:06:53.440 --> 01:06:54.800
Yeah, interesting.

01:06:54.800 --> 01:06:57.840
You talked about it's fast enough in Python.

01:06:57.840 --> 01:07:01.200
It's this kind of stuff that makes it fast enough in Python.

01:07:01.200 --> 01:07:01.600
Yeah.

01:07:01.600 --> 01:07:08.480
If you rewrote this in some other native compiled language, it would be faster to go through every

01:07:08.480 --> 01:07:09.120
single one of them.

01:07:09.120 --> 01:07:14.080
But you're still potentially processing a tremendous number of things.

01:07:14.080 --> 01:07:16.400
You get the compositor and overlap and all those kinds of things.

01:07:16.400 --> 01:07:18.560
And you're really worried about stuff that's way off the screen.

01:07:18.560 --> 01:07:20.880
Instead of going, we're going to rewrite it.

01:07:20.880 --> 01:07:24.960
You can just think, let me think about the right data structures and the right algorithms.

01:07:24.960 --> 01:07:25.520
Exactly.

01:07:25.520 --> 01:07:26.080
And so on.

01:07:26.080 --> 01:07:26.320
Yeah.

01:07:26.880 --> 01:07:29.840
I would love it if Python just got so ridiculously fast.

01:07:29.840 --> 01:07:31.360
You don't have to worry about that.

01:07:31.360 --> 01:07:34.320
And I'll take any speed improvements to give.

01:07:34.320 --> 01:07:40.000
But the optimizations you can produce yourself just by having the right algorithm,

01:07:40.000 --> 01:07:46.560
they tend to outweigh the benefits you could get from, say, running it in C.

01:07:46.560 --> 01:07:50.880
If I had to re-implement that in C, it would obviously be faster.

01:07:50.880 --> 01:07:53.600
But it would still be much faster to have that algorithm.

01:07:53.600 --> 01:07:55.280
Yeah, exactly.

01:07:55.280 --> 01:07:55.280
Plus the--

01:07:55.280 --> 01:07:55.280
Plus the--

01:07:55.280 --> 01:08:03.760
I'll take my order of O squared versus your O factorial versus N squared.

01:08:03.760 --> 01:08:04.480
You know what I mean?

01:08:04.480 --> 01:08:04.720
Yeah.

01:08:04.720 --> 01:08:04.720
Yeah.

01:08:04.720 --> 01:08:05.760
Exactly.

01:08:05.760 --> 01:08:09.760
Eventually, it's going to lose on N factorial no matter what you do, right?

01:08:09.760 --> 01:08:10.320
Yeah.

01:08:10.320 --> 01:08:12.960
I mean, Python wins because of the speed of development.

01:08:12.960 --> 01:08:14.240
We know it's not the runtime speed.

01:08:14.240 --> 01:08:15.120
Yeah, absolutely.

01:08:15.120 --> 01:08:16.880
The runtime speed is OK most of the time.

01:08:16.880 --> 01:08:20.720
But it's the speed of development, the fact that you have got more time to pick the right

01:08:20.720 --> 01:08:21.200
algorithm.

01:08:21.200 --> 01:08:22.320
Yeah.

01:08:22.320 --> 01:08:25.680
It means it's not as slow as people might think.

01:08:25.680 --> 01:08:26.240
Yeah, absolutely.

01:08:26.240 --> 01:08:27.920
It doesn't get too complicated.

01:08:27.920 --> 01:08:29.120
Yeah.

01:08:29.120 --> 01:08:35.200
Thinking about this, I think there's a lot of parallels back to game engines that I think

01:08:35.200 --> 01:08:35.680
about a lot.

01:08:35.680 --> 01:08:41.680
Like the game engines have this thing called oct trees, like basically break stuff into eight

01:08:41.680 --> 01:08:42.160
squares.

01:08:42.160 --> 01:08:43.520
And you say, well, which--

01:08:43.520 --> 01:08:44.080
Yeah.

01:08:44.080 --> 01:08:47.920
--which I'm looking for a thing if it's going to say intersect with this, right?

01:08:47.920 --> 01:08:48.080
Yeah.

01:08:48.080 --> 01:08:49.200
For business like for hit detection and stuff.

01:08:49.200 --> 01:08:51.840
Like, well, is it in this half of this world or that half?

01:08:51.840 --> 01:08:51.840
Yeah.

01:08:51.840 --> 01:08:52.400
Well, it's in this half.

01:08:52.400 --> 01:08:52.560
Okay.

01:08:52.560 --> 01:08:55.840
Well, we're not even going to compare it against half of the things in the world that are that

01:08:55.840 --> 01:08:56.000
half.

01:08:56.000 --> 01:08:56.400
Exactly.

01:08:56.400 --> 01:08:57.760
Now, break that into hash, right?

01:08:57.760 --> 01:09:04.080
Like you can super quickly go, I have a million objects on the screen, but I can determine if this

01:09:04.080 --> 01:09:07.520
thing hits it with five comparisons or something like that.

01:09:07.520 --> 01:09:07.840
You know what I mean?

01:09:07.840 --> 01:09:08.720
With just the right data.

01:09:08.720 --> 01:09:09.280
That's exactly it.

01:09:09.280 --> 01:09:10.320
It's super interesting.

01:09:10.320 --> 01:09:10.560
Yeah.

01:09:10.560 --> 01:09:11.120
Yeah.

01:09:11.120 --> 01:09:15.840
And it's probably no coincidence that I used to work in video games.

01:09:15.840 --> 01:09:16.800
Oh, did you?

01:09:16.800 --> 01:09:17.200
Okay.

01:09:17.200 --> 01:09:17.600
Yeah.

01:09:17.600 --> 01:09:18.080
Yeah.

01:09:18.080 --> 01:09:19.600
So that was kind of my mindset.

01:09:19.600 --> 01:09:21.680
It's like reducing the problem.

01:09:21.680 --> 01:09:23.680
And textual is quite a lot like a video game.

01:09:23.680 --> 01:09:28.000
If you imagine like a 2D video game that's got lots of sprites that are over here, we don't

01:09:28.000 --> 01:09:28.800
want to worry about those.

01:09:28.800 --> 01:09:29.200
Yeah.

01:09:29.200 --> 01:09:31.440
Replace sprites with widgets.

01:09:31.440 --> 01:09:32.880
And it's pretty much the same problem.

01:09:32.880 --> 01:09:33.120
Yeah, yeah.

01:09:33.120 --> 01:09:33.280
Exactly.

01:09:33.280 --> 01:09:34.480
It's the same kind of mindset.

01:09:34.480 --> 01:09:35.840
It certainly is.

01:09:35.840 --> 01:09:41.120
All right, well, I think we're going to need to just kind of wrap it up here because I think

01:09:41.120 --> 01:09:42.080
we're getting short on time.

01:09:42.080 --> 01:09:47.360
Let's leave everyone with roadmap.

01:09:47.360 --> 01:09:50.640
Where, you know, you've hit this 1.0 milestone with textual.

01:09:50.640 --> 01:09:52.400
Where are things going?

01:09:52.400 --> 01:09:54.400
Okay.

01:09:54.400 --> 01:09:57.520
So there's a whole bunch of features which I want to implement.

01:09:57.520 --> 01:10:01.840
I mean, textual is usable as now.

01:10:01.840 --> 01:10:03.200
You can build fantastic apps.

01:10:03.200 --> 01:10:06.000
But there are a few things where we don't have parity with web apps.

01:10:06.000 --> 01:10:10.800
Something I've implemented on a feature branch is arbitrary text selection.

01:10:10.800 --> 01:10:16.720
So, you know, on a website, you can just draw your mouse over text you want to select.

01:10:16.720 --> 01:10:19.520
That didn't work well with 2E's.

01:10:21.200 --> 01:10:26.320
If the terminal did it, the terminal doesn't understand the logical separation of widgets.

01:10:26.320 --> 01:10:32.800
It would just copy all the text on that line, which might get parts of one widget and parts of another.

01:10:32.800 --> 01:10:37.920
So I've implemented arbitrary text selection, which seems to work quite well.

01:10:37.920 --> 01:10:39.360
And it's such a fundamental feature.

01:10:39.360 --> 01:10:42.720
I think it'll make textual more useful.

01:10:42.720 --> 01:10:54.640
Yeah, I guess if you've got a UI in textual and you're like, I need to get that and paste it into another document or search it, you know, highlight the map, the address to put in a map or something.

01:10:54.640 --> 01:10:54.800
Right?

01:10:54.800 --> 01:10:55.680
Yeah.

01:10:55.680 --> 01:11:01.440
And things like, you know, if you're using textual to talk to an LLM, an LLM writes some code.

01:11:01.440 --> 01:11:05.280
You don't want to transcribe that code visually.

01:11:05.280 --> 01:11:05.920
Yeah.

01:11:05.920 --> 01:11:09.920
And so now we can be able to like, we can select the entire code.

01:11:09.920 --> 01:11:13.120
You could add a button, but it's very convenient to drag.

01:11:13.920 --> 01:11:16.480
So that's something that's coming, coming very soon.

01:11:16.480 --> 01:11:17.440
Awesome.

01:11:17.440 --> 01:11:21.920
And yeah, there's a whole bunch of features I've got, which I'll be working on.

01:11:21.920 --> 01:11:24.000
Yeah.

01:11:24.000 --> 01:11:24.800
Watch this space.

01:11:24.800 --> 01:11:26.720
Excellent.

01:11:26.720 --> 01:11:30.000
And PR is accepted contributions accepted.

01:11:30.000 --> 01:11:32.160
Very much so.

01:11:32.160 --> 01:11:32.480
Yep.

01:11:32.480 --> 01:11:37.040
Um, there's a big pile of them there, but, I tend to work on a big feature.

01:11:37.040 --> 01:11:41.440
I didn't spend a few days going through the PRs and I love to have PRs.

01:11:41.440 --> 01:11:45.280
It means that people are like very interested and it saves me time, of course.

01:11:45.280 --> 01:11:50.080
Um, if someone else is fixing bugs and writing code, then it's a great thing.

01:11:50.080 --> 01:11:51.200
Awesome.

01:11:51.200 --> 01:11:52.240
All right.

01:11:52.240 --> 01:11:56.960
Well, thanks for coming on, giving us an update on textual and all the stuff that you guys built.

01:11:56.960 --> 01:11:58.560
It's super valuable to people.

01:11:58.560 --> 01:11:59.840
Always a pleasure.

01:11:59.840 --> 01:12:00.400
Thank you very much.

01:12:00.400 --> 01:12:00.640
Yeah.

01:12:00.640 --> 01:12:01.280
You bet.

01:12:01.280 --> 01:12:01.680
See you later.

01:12:01.680 --> 01:12:04.960
Bye bye.

