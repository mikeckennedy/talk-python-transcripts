WEBVTT

00:00:00.000 --> 00:00:01.000
- Hey, Cliff.


00:00:01.000 --> 00:00:03.000
- Hey, Michael, how's it going?


00:00:03.000 --> 00:00:04.000
- Going very well.


00:00:04.000 --> 00:00:07.000
Happy to have you here on the YouTube channel


00:00:07.000 --> 00:00:10.000
and on the podcast in just a second.


00:00:10.000 --> 00:00:12.000
People out there watching,


00:00:12.000 --> 00:00:15.000
throw your thoughts and comments into the live stream.


00:00:15.000 --> 00:00:17.000
I can already see Sam is on top of it.


00:00:17.000 --> 00:00:19.000
Been waiting for the PyCon video,


00:00:19.000 --> 00:00:21.000
this talk to get released.


00:00:21.000 --> 00:00:25.000
Well, I know I've been waiting as well, Sean,


00:00:25.000 --> 00:00:29.000
but we're here to get this info out for you sooner or later.


00:00:29.000 --> 00:00:30.080
and throw out for you sooner.


00:00:30.080 --> 00:00:33.840
So let's, Cliff, let's jump in the podcast.


00:00:33.840 --> 00:00:35.600
Cliff, welcome to Talk, yeah,


00:00:35.600 --> 00:00:37.400
Cliff, welcome to Talk Python To Me.


00:00:37.400 --> 00:00:39.200
- It's good to be here.


00:00:39.200 --> 00:00:41.040
Thank you very much for having me.


00:00:41.040 --> 00:00:42.720
- It is good to have you here


00:00:42.720 --> 00:00:44.840
and it's good to have you back.


00:00:44.840 --> 00:00:47.200
You've been on the show a couple of times,


00:00:47.200 --> 00:00:50.740
way back when you talked about shipping software to users.


00:00:50.740 --> 00:00:55.200
And then also not so long ago, a little while ago,


00:00:55.200 --> 00:00:57.280
we talked about running Python in production


00:00:57.280 --> 00:00:59.080
And those were a bunch of fun shows


00:00:59.080 --> 00:01:02.800
and really excited to now talk about secrets.


00:01:02.800 --> 00:01:06.960
Although it does pose a bit of a problem.


00:01:06.960 --> 00:01:09.680
If we talk about secrets, are they still secret?


00:01:09.680 --> 00:01:15.680
- That is an interesting epistemological question,


00:01:15.680 --> 00:01:17.640
but luckily that's not the question


00:01:17.640 --> 00:01:19.520
that we need to answer today.


00:01:19.520 --> 00:01:22.560
'Cause the kinds of secrets we're gonna talk about


00:01:22.560 --> 00:01:24.760
are the ones that are meaningless.


00:01:24.760 --> 00:01:28.080
They are by definition, not very interesting to humans,


00:01:28.080 --> 00:01:29.760
but to computers.


00:01:29.760 --> 00:01:30.600
- Yes, they are.


00:01:30.600 --> 00:01:34.040
They're both for you to access your database


00:01:34.040 --> 00:01:37.860
and cryptocurrency people to get cheaper crypto mining.


00:01:37.860 --> 00:01:39.920
- Yep.


00:01:39.920 --> 00:01:40.740
- Depending on which way it goes,


00:01:40.740 --> 00:01:41.800
if you do it right or wrong.


00:01:41.800 --> 00:01:45.080
So before we get into that though,


00:01:45.080 --> 00:01:46.560
let's just do a quick catch up.


00:01:46.560 --> 00:01:49.600
It's been, gosh, at least a year


00:01:49.600 --> 00:01:51.760
since you've been on the show, a little bit more.


00:01:51.760 --> 00:01:53.560
So what have you been up to?


00:01:53.560 --> 00:01:54.880
What are you doing these days?


00:01:54.880 --> 00:01:58.440
- Yeah, so I am nominally independent now.


00:01:58.440 --> 00:02:03.040
I am trying to make a career out of having good ideas


00:02:03.040 --> 00:02:05.180
and putting them on the internet.


00:02:05.180 --> 00:02:06.360
Worked for a lot of different companies,


00:02:06.360 --> 00:02:07.720
doing a lot of different things.


00:02:07.720 --> 00:02:09.120
Now I am making my own app.


00:02:09.120 --> 00:02:10.920
I'm making an app called Pomodorobros,


00:02:10.920 --> 00:02:13.020
which is a terrible name that I'm sure you can't spell,


00:02:13.020 --> 00:02:16.280
but I'm sure we'll have some links in the show notes


00:02:16.280 --> 00:02:17.280
to get to that,


00:02:17.280 --> 00:02:21.800
which is a ADHD time blindness assistance app.


00:02:21.800 --> 00:02:28.360
assistance app. And so on the one hand, I'm kind of leaning


00:02:28.360 --> 00:02:31.440
into the neurodiversity thing. I have ADHD, and I'm kind of


00:02:31.440 --> 00:02:36.040
trying to help other people with it as well. But also, it is


00:02:36.040 --> 00:02:39.000
written entirely in Python. I'm working on the Mac version


00:02:39.000 --> 00:02:40.960
first, but there'll be other versions later. And it's all


00:02:40.960 --> 00:02:45.680
open source. And so I have a Patreon at patreon.com/creatorglyph


00:02:45.680 --> 00:02:49.840
which has just terrible reward tiers. Hopefully, I'll improve


00:02:49.840 --> 00:02:52.160
of those soon, but the idea is if you


00:02:52.160 --> 00:02:54.240
want to support various open source libraries


00:02:54.240 --> 00:02:56.600
that I'm working on maintaining, we'll


00:02:56.600 --> 00:02:59.560
talk about a couple of new ones that I've released recently


00:02:59.560 --> 00:03:02.520
in this podcast.


00:03:02.520 --> 00:03:06.360
If you want to support the random stuff that I do,


00:03:06.360 --> 00:03:07.600
now you can.


00:03:07.600 --> 00:03:08.560
And so we'll see.


00:03:08.560 --> 00:03:09.760
People have been telling me for years


00:03:09.760 --> 00:03:11.260
that they love the stuff that I do,


00:03:11.260 --> 00:03:14.920
so I guess we'll find out if they, in fact, do.


00:03:14.920 --> 00:03:16.240
>> Well, congratulations.


00:03:16.240 --> 00:03:17.200
That's really awesome.


00:03:17.200 --> 00:03:25.040
somebody doing independent stuff myself, I know how rewarding it is, but also how stressful


00:03:25.040 --> 00:03:26.600
it is, especially early days.


00:03:26.600 --> 00:03:27.600
>> Yep.


00:03:27.600 --> 00:03:30.400
It is equal parts harrowing and amazing.


00:03:30.400 --> 00:03:31.400
>> Yes.


00:03:31.400 --> 00:03:32.880
That's well said.


00:03:32.880 --> 00:03:33.880
Well said.


00:03:33.880 --> 00:03:37.640
So, yeah, certainly we will link to those in the show notes.


00:03:37.640 --> 00:03:40.480
You give me the links, I'll throw them in there for people.


00:03:40.480 --> 00:03:45.580
You said something interesting that I don't hear a lot of people say that I actually wish


00:03:45.580 --> 00:03:51.340
I heard more often was I'm working on a macOS version and the words Python


00:03:51.340 --> 00:03:57.340
So this is actually more kind of dovetails with what we're going to be talking about today in an interesting way


00:03:57.340 --> 00:04:03.300
Which is that one of the things that I want to be doing with my independent work is kind of letting people


00:04:03.300 --> 00:04:06.260
program their own computers and


00:04:06.260 --> 00:04:12.040
Part of that is like a lot of people use Macs. So I'm working on Mac desktop stuff


00:04:12.040 --> 00:04:18.400
I hope to do some mobile stuff later. I also want to do Linux and Windows desktop versions of this app and then of others


00:04:18.400 --> 00:04:22.440
And because I think that it's we've lost touch with that a little bit


00:04:22.440 --> 00:04:27.240
You know, yeah, we all do stuff in the cloud these days particularly in Python


00:04:27.240 --> 00:04:29.840
But Python's so versatile and you can use in so many places


00:04:29.840 --> 00:04:34.880
And the way that that sort of dovetails with what we're gonna be talking about today is that?


00:04:34.880 --> 00:04:39.140
it's also a neglected part of the security story because


00:04:39.720 --> 00:04:47.180
No matter how great all of your cloud security is using AWS secrets manager and hashing Corp vault and you know all kinds of cloud


00:04:47.180 --> 00:04:54.120
security stuff it all kind of terminates at your computer if your computer is not secure if the


00:04:54.120 --> 00:05:00.900
Secrets that you have locally in your possession are not properly managed then all the cloud stuff


00:05:00.900 --> 00:05:03.020
Like you're doing it from your computer


00:05:03.020 --> 00:05:05.740
So that computer had better be secure and if it's not


00:05:06.300 --> 00:05:09.980
that kind of flows outward towards everything else if you're a developer or


00:05:09.980 --> 00:05:13.020
assistant men, so


00:05:13.020 --> 00:05:15.460
so yeah, so so the


00:05:15.460 --> 00:05:18.540
Two libraries that we're gonna be talking about today are also both


00:05:18.540 --> 00:05:22.700
They're a little bit more traditional kind of console text things, but they are


00:05:22.700 --> 00:05:26.420
Designed to be run on your computer and not on the cloud


00:05:26.420 --> 00:05:33.700
Yeah, absolutely. It's a lot of interesting things for like how do you secure secrets?


00:05:34.540 --> 00:05:38.180
connection strings and whatnot on your machine, right?


00:05:38.180 --> 00:05:39.500
- Mm-hmm, yeah.


00:05:39.500 --> 00:05:42.300
So, and as far as the other sort of desktop programming stuff,


00:05:42.300 --> 00:05:44.340
we do not have time to get into that today,


00:05:44.340 --> 00:05:46.020
but you can definitely follow my blog


00:05:46.020 --> 00:05:48.060
for more interesting details about how--


00:05:48.060 --> 00:05:50.580
- Right, are you willing to share a quick


00:05:50.580 --> 00:05:53.260
what GUI framework you're using sort of thing


00:05:53.260 --> 00:05:55.500
and how are you packaging it up?


00:05:55.500 --> 00:05:58.020
- So I wrote a little tool called Encrust


00:05:58.020 --> 00:05:59.660
that does some of the code signing stuff.


00:05:59.660 --> 00:06:02.660
I'm packaging it with Py to app right now.


00:06:02.660 --> 00:06:06.020
And for GUI framework, I'm just using PyObjective-C


00:06:06.020 --> 00:06:07.980
and writing all of the GUI by hand


00:06:07.980 --> 00:06:09.900
as like a traditional Mac app.


00:06:09.900 --> 00:06:11.940
I plan to redo the GUI for each platform


00:06:11.940 --> 00:06:15.100
'cause Pomodoro Bros is a thing


00:06:15.100 --> 00:06:17.220
that needs to be a local Mac app,


00:06:17.220 --> 00:06:19.500
like it can, or a local desktop app rather.


00:06:19.500 --> 00:06:22.540
And so I really want to get the UI


00:06:22.540 --> 00:06:25.380
very kind of finely tuned per platform.


00:06:25.380 --> 00:06:27.060
And so cross-platform GUI toolkits


00:06:27.060 --> 00:06:29.500
don't really do some of the stuff that I need to do.


00:06:29.500 --> 00:06:32.060
So, and that's kind of part of the point


00:06:32.060 --> 00:06:36.200
I want to make with it is it's actually not that hard to just like write things


00:06:36.200 --> 00:06:39.860
multiple times. The Python lets you keep all the logic and a nice kind of core.


00:06:39.860 --> 00:06:43.400
And then if you need to call some native APIs,


00:06:43.400 --> 00:06:44.720
Python can do that pretty much everywhere.


00:06:44.720 --> 00:06:47.560
Okay. Well, very interesting approach.


00:06:47.560 --> 00:06:51.920
I think one of the things that's held me back from going, Oh,


00:06:51.920 --> 00:06:55.880
I'm going to use Tkinter or a GDK or whatever. It's just like, Oh,


00:06:55.880 --> 00:06:58.760
but it just doesn't really look like it belongs here that much.


00:06:58.760 --> 00:07:02.600
It looks kind of like it belongs here, but not really.


00:07:02.600 --> 00:07:04.460
And that, I don't know, some people don't mind that.


00:07:04.460 --> 00:07:06.960
To me, it's just, I'm not a big fan.


00:07:06.960 --> 00:07:08.800
So I'm looking forward to this.


00:07:08.800 --> 00:07:10.880
It sounds great.


00:07:10.880 --> 00:07:12.800
- Cool, maybe you can have me on again to talk about it


00:07:12.800 --> 00:07:14.200
when it's closer to done.


00:07:14.200 --> 00:07:15.040
- Yeah, absolutely.


00:07:15.040 --> 00:07:16.240
It'd be fun to talk about, you know,


00:07:16.240 --> 00:07:19.040
sort of going through and building,


00:07:19.040 --> 00:07:23.200
how you built it and some lessons that you've learned, right?


00:07:23.200 --> 00:07:26.800
Also, I'm working on some desktop apps now and it's,


00:07:26.800 --> 00:07:28.920
It's not as easy as it used to be.


00:07:28.920 --> 00:07:30.460
It's like, oh, this one's not signed.


00:07:30.460 --> 00:07:33.420
And so it won't open because macOS gatekeeper


00:07:33.420 --> 00:07:35.440
says it's probably dangerous.


00:07:35.440 --> 00:07:37.120
And you're just like, ah, it's...


00:07:37.120 --> 00:07:38.840
I used to be able to just hand out an app, all right?


00:07:38.840 --> 00:07:40.800
We can't have nice things because of people.


00:07:40.800 --> 00:07:42.600
And I guess that's pretty much a great lead


00:07:42.600 --> 00:07:46.620
into this entire talk, because if we could have nice things,


00:07:46.620 --> 00:07:48.360
we wouldn't even need this talk, would we?


00:07:48.360 --> 00:07:49.200
- Exactly.


00:07:49.200 --> 00:07:53.200
- I guess it's worth mentioning that I reached out to you


00:07:53.200 --> 00:07:55.680
and I had you on the show here


00:07:55.680 --> 00:07:58.880
because you gave a talk at PyCon,


00:07:58.880 --> 00:08:00.520
how to keep a secret.


00:08:00.520 --> 00:08:03.200
And what is it today?


00:08:03.200 --> 00:08:06.640
It's May 24th, so a month and two days.


00:08:06.640 --> 00:08:09.200
And I was kind of looking forward


00:08:09.200 --> 00:08:11.400
to watching all these on YouTube and they're not out yet.


00:08:11.400 --> 00:08:14.680
So how about we have a podcast episode about it


00:08:14.680 --> 00:08:17.120
and share that with everyone.


00:08:17.120 --> 00:08:20.040
So I'm looking forward to kind of doing


00:08:20.040 --> 00:08:23.440
the audio conversational version of your talk.


00:08:23.440 --> 00:08:25.140
- How did your talk go there?


00:08:25.140 --> 00:08:26.480
- I thought it went great.


00:08:26.480 --> 00:08:28.880
There was pretty good response in the audience.


00:08:28.880 --> 00:08:30.560
One of the things I did, which I would recommend


00:08:30.560 --> 00:08:34.300
for other conference attendees and speakers in the future


00:08:34.300 --> 00:08:38.480
is whenever anybody came up to me and said, great talk,


00:08:38.480 --> 00:08:41.680
which is very nice, I appreciate it when people do that.


00:08:41.680 --> 00:08:45.800
What I didn't just say thanks, I said, thank you.


00:08:45.800 --> 00:08:49.080
And how is this gonna affect your behavior going forward?


00:08:49.080 --> 00:08:52.680
what did you learn from the talk that's going to change what you do? And a lot of people had


00:08:52.680 --> 00:08:56.840
specific things that they were going to change about their workflows or their kind of personal


00:08:56.840 --> 00:09:00.520
security. And so that was telling me, I think this is an important message to get out there.


00:09:00.520 --> 00:09:05.240
And I think that it's something that every developer should know about. So the fact that


00:09:05.240 --> 00:09:08.840
people were really learning from it, I thought was the best metric for success.


00:09:08.840 --> 00:09:17.400
- Yeah. It's got a lot of small lessons for many people. And I suspect most people are not doing


00:09:17.400 --> 00:09:21.920
all of these things. So even if you're like, yes, of course, I


00:09:21.920 --> 00:09:25.720
keep, you know, I don't put secrets into my source code, or


00:09:25.720 --> 00:09:29.480
do you? But there's something else. I'm sure there's


00:09:29.480 --> 00:09:33.920
something for everyone here. So yeah, let's, let's kick things


00:09:33.920 --> 00:09:40.320
off by talking about what you mean by secrets, right? What


00:09:40.320 --> 00:09:42.120
what are we talking about here specifically?


00:09:42.720 --> 00:09:48.720
So the main kind of secret that I'm talking about is a token type of secret.


00:09:48.720 --> 00:09:55.020
Whenever you use an API on the web, they'll give you like a little hex key,


00:09:55.020 --> 00:09:58.220
usually a short string that lets you access it.


00:09:58.220 --> 00:10:05.220
Cryptographic secrets, like if you have some encrypted blob that's stored in block storage,


00:10:05.220 --> 00:10:09.220
you might have a crypto key that's a similar kind of thing.


00:10:09.220 --> 00:10:13.060
for your HTTPS certificates, you've got like, you know,


00:10:13.060 --> 00:10:16.300
private RSA key or something or ECTSA key that's a little bit


00:10:16.300 --> 00:10:21.060
longer, but still kind of a text file that's no more than 20


00:10:21.060 --> 00:10:26.060
lines. And so all of those secrets are kind of are


00:10:26.060 --> 00:10:28.660
interesting. And I wanted to talk about them in particular,


00:10:28.660 --> 00:10:33.340
because the way that security works just on computers


00:10:33.340 --> 00:10:37.340
generally, is that all of your other security, all of the other


00:10:37.340 --> 00:10:42.540
bigger secrets you want to keep the confidential documents, the media files or whatever it is that


00:10:42.540 --> 00:10:50.940
you're securing, your database, your user accounts, all of that stuff is secured by a smaller secret.


00:10:50.940 --> 00:10:56.780
And so these secrets generally represent some kind of authority, like a thing that you can do


00:10:56.780 --> 00:11:02.300
in the cloud. Even cryptographic ones are kind of like the authority to decrypt another secret.


00:11:03.020 --> 00:11:25.620
And so that's, and in particular, the reason that the restriction of the scope of this discussion to those smaller secrets is interesting, is because those smaller secrets don't have like a lot of interesting storage requirements, like they just, they're very small. And it's really about how you secure them, not so much about how you manage like a huge scale of them.


00:11:26.820 --> 00:11:34.900
Yeah, also, if you're going to, say, encrypt huge blobs of data, usually what you actually


00:11:34.900 --> 00:11:40.820
need to get back to it is just the encryption key, which is often pretty small, right? So


00:11:40.820 --> 00:11:48.100
even if the actual data is large, usually the thing that is the access to it is also small.


00:11:48.100 --> 00:11:49.480
Right.


00:11:49.480 --> 00:11:52.900
What you said you were not covering?


00:11:52.900 --> 00:11:56.420
So yeah, there's a bunch of encryption and that kind of stuff, right?


00:11:56.420 --> 00:12:00.420
Yeah, there's a lot of other security stuff that you need to do.


00:12:00.420 --> 00:12:05.420
Like I touched briefly in the talk on disk encryption.


00:12:05.420 --> 00:12:09.420
We can talk about that in a little bit, but it's mostly not about that.


00:12:09.420 --> 00:12:15.420
In particular, like there's been a lot of discussion lately about end-to-end encrypted messaging between people.


00:12:15.420 --> 00:12:17.420
And I'm not really talking about that either.


00:12:17.420 --> 00:12:20.420
This is really about securing your applications.


00:12:20.420 --> 00:12:25.700
it's a lot of these techniques have to do with how you get your secrets, not just


00:12:25.700 --> 00:12:30.300
secured for you, but like into your Python code in a way which keeps them


00:12:30.300 --> 00:12:35.980
secure kind of on the whole journey from typing them in to using them in a


00:12:35.980 --> 00:12:36.980
production application.


00:12:36.980 --> 00:12:43.220
Yeah, for sure. I was as you're talking, I'm thinking, this problem is only


00:12:43.220 --> 00:12:47.860
getting worse, right? We're only consuming more API's in our code, and


00:12:47.860 --> 00:12:52.100
we're only stitching together more backends of cloud systems.


00:12:52.100 --> 00:12:53.320
Right.


00:12:53.320 --> 00:12:54.040
Yeah.


00:12:54.040 --> 00:12:54.560
And it's a little


00:12:54.560 --> 00:12:54.760
right.


00:12:54.760 --> 00:12:55.340
Code for a while.


00:12:55.340 --> 00:12:57.860
I have to like, it used to be, well, what's your database connection


00:12:57.860 --> 00:12:58.060
street?


00:12:58.060 --> 00:12:58.600
All right, we're good.


00:12:58.600 --> 00:12:59.400
We're done.


00:12:59.400 --> 00:13:00.460
That's what you store, right?


00:13:00.460 --> 00:13:01.220
How do we store that?


00:13:01.220 --> 00:13:04.960
well, and if you were doing something really esoteric, you would have like


00:13:04.960 --> 00:13:09.480
a Twilio API key, so you could send like SMS messages and now you've got like


00:13:09.480 --> 00:13:14.580
your billing provider and your, your database provider and your cloud and


00:13:15.220 --> 00:13:20.540
your user, you know, your customer relationship management API and your


00:13:20.540 --> 00:13:25.020
email service, it's just like, there's an API key for everything. And the scale of


00:13:25.020 --> 00:13:29.140
this stuff is like, really, if you do this sort of simple thing that all the


00:13:29.140 --> 00:13:32.300
tutorials show you to do for each of these services, you end up in a complete


00:13:32.300 --> 00:13:37.340
mess with like, basically no security on anything. So yeah, that's and that's why


00:13:37.340 --> 00:13:41.740
I wanted to talk about this at this point, because we need that security.


00:13:42.220 --> 00:13:44.220
Yeah, we definitely do.


00:13:44.220 --> 00:13:48.220
So I want to start out a little bit like you did with your talk,


00:13:48.220 --> 00:13:51.500
although not the same.


00:13:51.500 --> 00:13:55.660
I want to start out with something that maybe gets people's attention,


00:13:55.660 --> 00:13:57.660
that might make them worry a little.


00:13:57.660 --> 00:14:02.380
And that's this project that has gone unmaintained


00:14:02.380 --> 00:14:06.500
and has been shut down, I think, because it was a little too much


00:14:06.500 --> 00:14:09.060
on the edge of what really you should be doing.


00:14:09.060 --> 00:14:10.660
And it's called Shugit.


00:14:10.660 --> 00:14:15.660
Shigit is a CLI thing, I'm not exactly sure.


00:14:15.660 --> 00:14:21.900
Yeah, basically a little app you can run,


00:14:21.900 --> 00:14:23.420
a little CI that you can run


00:14:23.420 --> 00:14:25.620
that will show you secrets in Git code,


00:14:25.620 --> 00:14:26.780
in code in Git repository.


00:14:26.780 --> 00:14:28.180
So you can look at your own,


00:14:28.180 --> 00:14:31.140
but for a while they were running this website


00:14:31.140 --> 00:14:36.680
called like shigit.com or something, like secret.


00:14:37.820 --> 00:14:41.220
And it was just a live stream of just all the secrets


00:14:41.220 --> 00:14:43.820
that were being committed to public repositories,


00:14:43.820 --> 00:14:45.260
just screaming by.


00:14:45.260 --> 00:14:48.460
And it's going by so fast that you really can't read it.


00:14:48.460 --> 00:14:51.300
And this is just the public,


00:14:51.300 --> 00:14:53.800
here's all the things being uploaded.


00:14:53.800 --> 00:14:57.060
These are all these API keys, database connection strings,


00:14:57.060 --> 00:14:58.340
et cetera, that we've been talking about


00:14:58.340 --> 00:15:00.140
that are just, you shouldn't be doing an,


00:15:00.140 --> 00:15:01.780
oh my gosh, look at this, right?


00:15:01.780 --> 00:15:03.940
Like this has got to grab people's attention.


00:15:03.940 --> 00:15:05.740
- Right, and this isn't,


00:15:05.740 --> 00:15:12.300
It's worth noting that this feed is not people accidentally committing their secrets to the improper kind of


00:15:12.300 --> 00:15:18.140
Secure place in their organization where they like accidentally push to a private git repo


00:15:18.140 --> 00:15:21.500
This is only showing you public repos with


00:15:21.500 --> 00:15:25.100
Api like valid api keys being committed to them. So


00:15:25.100 --> 00:15:31.980
if you know you can imagine within organizations, there's probably 10 times as much traffic where stuff is being shared too broadly


00:15:32.060 --> 00:15:38.460
Oh, yeah, people at least know they shouldn't do this and they still are like they might think it's okay in their private repos, right?


00:15:38.460 --> 00:15:40.780
Right. Exactly. It's just easier. Yeah. Yeah. Yeah


00:15:40.780 --> 00:15:43.740
Fantastic. Okay


00:15:43.740 --> 00:15:44.700
so


00:15:44.700 --> 00:15:49.660
you also pointed out right before we hit record that github has a more


00:15:49.660 --> 00:15:56.220
Constructive official way of doing this as well. You want to tell people about the github secret alerts


00:15:56.220 --> 00:16:01.500
yeah, I I don't know a whole lot about this except that it is a feed


00:16:01.500 --> 00:16:05.040
that also produces a lot of data,


00:16:05.040 --> 00:16:07.560
but there are secret scanning alerts.


00:16:07.560 --> 00:16:13.360
And I believe it's also only for public repositories.


00:16:13.360 --> 00:16:17.780
There might be some enterprise stuff that I have not used.


00:16:17.780 --> 00:16:20.700
Like you can, yeah, so as it says on the page, I guess,


00:16:20.700 --> 00:16:22.980
organizations using GitHub Enterprise Cloud with a license


00:16:22.980 --> 00:16:25.640
for GitHub advanced security can also enable secret scanning


00:16:25.640 --> 00:16:29.780
for users on their private and internal repositories.


00:16:31.000 --> 00:16:54.520
But yeah, this is something that if you're running an open source project, or you have a corporate GitHub account, you should probably look into just to understand like, how to manage these alerts, how to get them and what to do if people are accidentally checking in secrets to your repository, because you may have to worry about open source PRs, including other people's API keys, if they were like testing something out with your tool,


00:16:54.920 --> 00:17:00.600
you right that's more likely even as you might have a placeholder enter API key here don't


00:17:00.600 --> 00:17:05.080
commit it and someone commits it in a PR right something like that yeah yeah so don't do that


00:17:05.080 --> 00:17:08.920
don't don't put a place to paste something in a file that's actually checked into git but


00:17:08.920 --> 00:17:14.920
it is uh i think that it's also important not to shame people too much for doing this like


00:17:14.920 --> 00:17:20.520
what one of the points of of showcasing these tools is to say like hey people are like leaking


00:17:20.520 --> 00:17:25.800
secrets constantly, you should be aware that it's a serious problem. The other is, people


00:17:25.800 --> 00:17:30.560
are doing this constantly. It's a really easy kind of mistake to make. And so if you do


00:17:30.560 --> 00:17:35.560
it or if some junior engineer on your team pushes some secrets to GitHub, you know, don't


00:17:35.560 --> 00:17:40.000
shame them. It's not a dumb thing to do. It's incredibly easy to screw up in this way. And,


00:17:40.000 --> 00:17:44.000
you know, we should we should help each other build better processes. So let's, you know,


00:17:44.000 --> 00:17:47.480
so don't, don't feel like it's a thing to mock or laugh at.


00:17:47.480 --> 00:17:54.880
So you're not suggesting that GitHub adopts a new kind of badge, like a secret teller badge or something if you're caught doing this?


00:17:54.880 --> 00:17:57.580
I think let's not gamify that in either direction.


00:17:57.580 --> 00:18:01.380
Like, it's a hard enough conversation already.


00:18:01.380 --> 00:18:14.380
It is. Well, and it can happen even if you know you shouldn't. Maybe you understand the security, but you don't, you're not good with Git and you accidentally over commit stuff and you're like, oh, whoops.


00:18:14.380 --> 00:18:18.220
Yep, that's a very common way that it can happen.


00:18:18.220 --> 00:18:21.020
And even if you are very familiar with Git


00:18:21.020 --> 00:18:22.480
and you know not to do this


00:18:22.480 --> 00:18:24.520
and all of the projects that you've set up


00:18:24.520 --> 00:18:25.700
are set up properly,


00:18:25.700 --> 00:18:27.940
you might find yourself in an unfamiliar repository


00:18:27.940 --> 00:18:30.340
assuming that something is Git-ignored and it's not.


00:18:30.340 --> 00:18:32.740
You know, there's lots of different ways it can happen.


00:18:32.740 --> 00:18:33.580
- Yeah, yeah.


00:18:33.580 --> 00:18:37.620
So I guess if you're running an open source project,


00:18:37.620 --> 00:18:39.620
it's probably worth turning on


00:18:39.620 --> 00:18:42.260
or at least looking into the secret scanning


00:18:42.260 --> 00:18:44.740
that GitHub has, if it's on GitHub, right?


00:18:44.740 --> 00:18:46.120
- Yeah. - So, yeah.


00:18:46.120 --> 00:18:49.700
And if you wanna startle yourself,


00:18:49.700 --> 00:18:51.020
just check out the link,


00:18:51.020 --> 00:18:53.580
the animated GIF in the Shigit repository.


00:18:53.580 --> 00:18:58.900
All right, so as we start our conversation


00:18:58.900 --> 00:19:01.860
about the different secrets, the pitfalls,


00:19:01.860 --> 00:19:03.220
and how we might keep them,


00:19:03.220 --> 00:19:09.420
you told, this was a really creative presentation at PyCon,


00:19:10.140 --> 00:19:12.380
and you presented it through by way of,


00:19:12.380 --> 00:19:14.320
mostly by way of storytelling.


00:19:14.320 --> 00:19:16.340
- Well, thank you for saying so.


00:19:16.340 --> 00:19:17.160
- Was it Gerald?


00:19:17.160 --> 00:19:18.000
Yes, of course.


00:19:18.000 --> 00:19:19.420
Was it Gerald who was your?


00:19:19.420 --> 00:19:20.620
- Jethro, Jethro.


00:19:20.620 --> 00:19:22.300
- Jethro is the protagonist.


00:19:22.300 --> 00:19:23.200
Yes, got it.


00:19:23.200 --> 00:19:27.280
- So yeah, I,


00:19:27.280 --> 00:19:31.540
so there's this practice in security engineering,


00:19:31.540 --> 00:19:34.500
which I'm sure a lot of your listeners would have heard of,


00:19:34.500 --> 00:19:36.580
which is called threat modeling.


00:19:36.580 --> 00:19:38.920
And threat modeling can be a bit dry


00:19:38.920 --> 00:19:41.960
because it's really just repeating these same scenarios


00:19:41.960 --> 00:19:46.080
over and over and over again with slight things changed.


00:19:46.080 --> 00:19:48.220
And so I thought a good way to frame that


00:19:48.220 --> 00:19:50.220
would be like a time loop story


00:19:50.220 --> 00:19:52.700
where our protagonist is running this service


00:19:52.700 --> 00:19:55.080
and every time through the time loop,


00:19:55.080 --> 00:19:58.700
his service gets pwned and taken down


00:19:58.700 --> 00:20:01.000
via some kind of compromise of secrets


00:20:01.000 --> 00:20:03.480
and he wakes up and has to do it all again


00:20:03.480 --> 00:20:05.200
and try to secure things properly.


00:20:06.200 --> 00:20:10.880
So that's where we get started.


00:20:10.880 --> 00:20:13.040
Yeah, for sure.


00:20:13.040 --> 00:20:13.540
Yeah.


00:20:13.540 --> 00:20:15.540
And one of the things I also kind of called out


00:20:15.540 --> 00:20:18.000
is I should mention this here too.


00:20:18.000 --> 00:20:19.880
It can be a little bit stressful listening


00:20:19.880 --> 00:20:21.120
to all these different things.


00:20:21.120 --> 00:20:24.440
So this isn't exactly a content warning,


00:20:24.440 --> 00:20:26.880
like a really serious, heavy stuff.


00:20:26.880 --> 00:20:29.760
But be aware that even if it sounds kind of light and fun


00:20:29.760 --> 00:20:32.880
and informative, if you find yourself ideating


00:20:32.880 --> 00:20:35.800
on these same ideas of like, oh no, all of, you know,


00:20:35.800 --> 00:20:37.160
this could go wrong, this could go wrong,


00:20:37.160 --> 00:20:37.980
or this could go wrong.


00:20:37.980 --> 00:20:40.040
Like that is kind of just what security engineering


00:20:40.040 --> 00:20:42.840
is like, but also it can kind of drive you crazy.


00:20:42.840 --> 00:20:45.380
So like, don't let yourself get trapped


00:20:45.380 --> 00:20:47.120
in cycles of anxiety.


00:20:47.120 --> 00:20:49.360
Just be aware that, you know, you kind of have to do


00:20:49.360 --> 00:20:52.240
your best and like make a reasonable effort,


00:20:52.240 --> 00:20:53.800
but you're never gonna get everything perfect.


00:20:53.800 --> 00:20:57.080
So, and in fact, I'll spoil the story a little bit


00:20:57.080 --> 00:20:59.600
since we're not quite going through it in order here.


00:20:59.600 --> 00:21:01.600
That's really the twist at the end of the talk


00:21:01.600 --> 00:21:08.800
that Jethro needs to like just put forward a good effort across the board for managing his secrets


00:21:08.800 --> 00:21:14.240
and not, you know, absolutely perfectly defend against every attack, but also not to defend


00:21:14.240 --> 00:21:17.760
against each attack piecemeal, kind of onesie-twosie, just like, "Oh, I'll address this


00:21:17.760 --> 00:21:21.600
thing and then I'll address that thing and then I'll address that thing." It's like, think about


00:21:21.600 --> 00:21:29.040
your whole process. So yeah, so I guess we should dive into what those actual specific attacks are.


00:21:29.040 --> 00:21:33.420
- Well, before we do that, one thing that I thought


00:21:33.420 --> 00:21:35.500
was really nice that you pointed out is,


00:21:35.500 --> 00:21:40.580
at least for me, when I feel like I'm putting a website


00:21:40.580 --> 00:21:42.580
up there, I feel like, oh my goodness,


00:21:42.580 --> 00:21:45.320
what have I forgotten?


00:21:45.320 --> 00:21:50.540
But you point out that there's a lot of people


00:21:50.540 --> 00:21:52.420
on your side, right?


00:21:52.420 --> 00:21:55.260
There's the operating system vendors,


00:21:55.260 --> 00:21:57.220
the open source maintainers,


00:21:58.060 --> 00:21:59.500
want to riff on that a bit?


00:21:59.500 --> 00:22:05.580
Sure. Yes. This is also important to remember because so for


00:22:05.580 --> 00:22:09.900
example, just to like, some one attack that's been in the news a


00:22:09.900 --> 00:22:14.020
lot lately is typo squatting and software supply chain attacks,


00:22:14.020 --> 00:22:17.100
right? Like somebody uploading something malicious to pi pi


00:22:17.100 --> 00:22:21.740
somebody uploading, you know, pad Nass instead of pandas, and


00:22:21.740 --> 00:22:25.500
you tie, you know, fat finger the name in pip, and then Oh,


00:22:25.500 --> 00:22:28.500
know, you're like running code from some attacker. And that is


00:22:28.500 --> 00:22:31.260
a threat. And you know, there, you should be concerned about


00:22:31.260 --> 00:22:34.380
it, you should mitigate it in your code. All of the different


00:22:34.380 --> 00:22:36.380
ways to do that are like a little bit out of scope for this


00:22:36.380 --> 00:22:40.340
discussion. But also, it's important to remember that a lot


00:22:40.340 --> 00:22:44.780
of these attacks are things that it's hard to demonstrate in like


00:22:44.780 --> 00:22:51.020
a quick, like, you know, circa 2007, type sniffing your


00:22:51.020 --> 00:22:53.620
Facebook password off the wire, like, hey, look at this, like


00:22:53.620 --> 00:23:00.460
immediate attack where I've got all of your stuff. The and


00:23:00.460 --> 00:23:06.220
they're difficult to demonstrate because PyPI is actively scanning


00:23:06.220 --> 00:23:09.100
for these types of packages, they're actively responding to


00:23:09.100 --> 00:23:11.020
reports, there are lots of people, there are lots of


00:23:11.020 --> 00:23:14.940
security researchers developing tools, some of them kind of over


00:23:14.940 --> 00:23:18.100
aggressively running them against the index to take up a


00:23:18.100 --> 00:23:20.540
little too much too many resources. But there are lots of


00:23:20.540 --> 00:23:25.040
people doing things to defend you against each one of these attacks.


00:23:25.040 --> 00:23:28.880
And so the simplistic version of them will rarely work out of the box.


00:23:28.880 --> 00:23:33.880
the, the threat from typo squatting is a race condition.


00:23:33.880 --> 00:23:37.360
It's that somebody uploads a malicious package that doesn't look malicious


00:23:37.360 --> 00:23:40.760
enough to get automatically caught in these various ways.


00:23:40.760 --> 00:23:43.520
that doesn't get immediately flagged.


00:23:43.520 --> 00:23:47.360
It's not popular enough to like be installed on a lot of people's machines.


00:23:47.720 --> 00:23:54.200
and that you happen to do the typo in the window where it's still up before the admins have taken it down.


00:23:54.200 --> 00:24:00.100
That is a real threat, but it is not that as serious as like,


00:24:00.100 --> 00:24:02.740
"Oh, it's just a free-for-all. Anybody can upload anything anywhere."


00:24:02.740 --> 00:24:04.040
Like, there's a lot of security.


00:24:04.040 --> 00:24:10.780
There's the, not just the PyPI admins, but the distributors of all of the libraries on PyPI that you use


00:24:10.780 --> 00:24:15.580
are developing better processes on the teams that do uploading.


00:24:15.580 --> 00:24:20.100
PyPI now has orgs. And so we're doing like projects are starting to gather


00:24:20.100 --> 00:24:23.940
into organizations to apply more consistent security rules for uploading


00:24:23.940 --> 00:24:28.100
across the board. So there's lots of work that's going on. I happen to know a


00:24:28.100 --> 00:24:32.740
lot about PyPI, but your operating system vendor also is like, yeah, you


00:24:32.740 --> 00:24:37.820
could run some malware and that would really ruin your day. But you know,


00:24:37.820 --> 00:24:44.860
Apple, Microsoft, Google, Red Hat, none of them want their operating system to


00:24:44.860 --> 00:24:49.180
be implicated in the attacks, so they're constantly hardening their applications,


00:24:49.180 --> 00:24:54.820
hardening their APIs, developing secure APIs that developers can use to prevent


00:24:54.820 --> 00:24:58.580
certain attacks. Different platforms are kind of at different stages of maturity


00:24:58.580 --> 00:25:02.140
there and have kind of different security features, but they're all trying


00:25:02.140 --> 00:25:05.260
their best to prevent the worst case from happening. And so you're not like


00:25:05.260 --> 00:25:10.660
alone in this fight, you need to model your own threats and use the tools that


00:25:10.660 --> 00:25:14.340
you've been provided in ways that are kind of helpful, but you don't have to


00:25:14.820 --> 00:25:19.300
do everything yourself, you don't have to worry that you're kind of besieged with and you're the


00:25:19.300 --> 00:25:24.980
only defender. You're actually in a pretty big crowd of defenders and we all got to share knowledge


00:25:24.980 --> 00:25:29.140
with each other to try to help each other out. That's interesting. You know, we are, you know,


00:25:29.140 --> 00:25:35.060
there's a big concern about supply chain attacks and, you know, open source building blocks and


00:25:35.060 --> 00:25:44.020
but it is a bit of a herd immunity type of thing, right? Yeah. If something comes in pretty soon,


00:25:44.020 --> 00:25:49.860
if it at all starts to gain any popularity, people are going to notice and it'll get beat down. So


00:25:49.860 --> 00:25:57.380
it's scary, but it's maybe not as likely to broadly affect the ecosystem.


00:25:57.380 --> 00:26:06.500
Right. And that doesn't mean that you can give up on this work or put it off as some kind of


00:26:06.500 --> 00:26:12.020
gold plating that you're going to do later, but it does mean that you can kind of moderate the


00:26:12.020 --> 00:26:14.000
the amount of energy that you put in. And the way that you


00:26:14.000 --> 00:26:16.820
should think about it as an individual as an app developer


00:26:16.820 --> 00:26:20.600
is like, you should be trying to figure out what your


00:26:20.600 --> 00:26:24.580
responsibility is, and handle your part of the responsibility.


00:26:24.580 --> 00:26:29.060
Don't try to like, you know, think about every threat and


00:26:29.060 --> 00:26:32.900
become a like a vulnerability researcher in order to secure


00:26:32.900 --> 00:26:35.260
your application, like let those people, there's a lot of people


00:26:35.260 --> 00:26:37.300
doing that stuff, let them do their job and just kind of


00:26:37.300 --> 00:26:40.100
figure out, okay, what do you need to do? Because obviously,


00:26:40.140 --> 00:26:45.140
No matter how great the defenses are, if you don't use them, if you're not, you know, properly


00:26:45.140 --> 00:26:49.580
secure in your own processes, then it doesn't, it doesn't matter.


00:26:49.580 --> 00:26:54.340
Like you can easily if you're pushing your, you know, root cloud keys to GitHub in a public


00:26:54.340 --> 00:26:57.740
repo, all of the security of the world's not going to help you.


00:26:57.740 --> 00:27:01.060
Yeah, it's not gonna be great.


00:27:01.060 --> 00:27:02.060
Yeah.


00:27:02.060 --> 00:27:08.780
So you said there's even a PEP to help solve this PEP 541.


00:27:08.780 --> 00:27:09.780
What is about 541?


00:27:09.780 --> 00:27:13.780
>> Oh, I forget the exact specifics.


00:27:13.780 --> 00:27:14.780
>> It is...


00:27:14.780 --> 00:27:21.780
>> Oh, yeah, so that, that 541 is actually a little bit broader than just like typo squatting.


00:27:21.780 --> 00:27:30.100
It's about how PyPI like retains names, how they deal with trademark dispute resolution.


00:27:30.100 --> 00:27:35.900
You know, it outlines some of the responsibilities of package maintainers.


00:27:35.900 --> 00:27:40.620
So for example, like one of the typosquatting or one of the attacks against supply chains


00:27:40.620 --> 00:27:46.740
is if you use a vanity domain name for your PyPI account, and then you let the domain


00:27:46.740 --> 00:27:51.220
name lapse, and then somebody like registers the domain name, now they have access to your


00:27:51.220 --> 00:27:53.340
account because they can do a password reset.


00:27:53.340 --> 00:27:59.020
And so there are various responsibilities that you have, like you have to be reachable.


00:27:59.020 --> 00:28:02.360
If your project has been abandoned, the index might take it away, right?


00:28:02.360 --> 00:28:04.860
Like they might shut it down, they might freeze it.


00:28:04.860 --> 00:28:10.700
And there are, this PEP kind of lays out a bunch of processes for various things.


00:28:10.700 --> 00:28:16.340
And one of them is, you know, how things get taken down, how projects become invalid, what


00:28:16.340 --> 00:28:18.700
a typosquat is.


00:28:18.700 --> 00:28:25.620
And so it's an even broader project than just the security of typosquatting, and or even


00:28:25.620 --> 00:28:27.500
broader than supply chain security.


00:28:27.500 --> 00:28:30.720
It's like the whole supply chain shebang.


00:28:30.720 --> 00:28:33.940
And there will probably be more PEPs in this area in the future, I think.


00:28:33.940 --> 00:28:43.460
Yeah, I would imagine. Yeah. So for example, if I had Michael.com and I registered on my account was


00:28:43.460 --> 00:28:49.060
Michael or me at Michael.com and then I didn't that that went away someone else could buy


00:28:49.060 --> 00:28:55.620
Michael.com for who knows how much and then do a password reset and they they control all of my


00:28:55.620 --> 00:29:00.180
super important open source projects on there. Yeah. And then they can immediately do uploads,


00:29:00.180 --> 00:29:02.180
which is kind of a problem.


00:29:02.180 --> 00:29:04.820
Right. That might not be awesome.


00:29:04.820 --> 00:29:07.820
Okay, so that's PEP 5.4.1. Got it.


00:29:07.820 --> 00:29:11.820
Let's see, what else?


00:29:11.820 --> 00:29:18.020
Yeah, so it was all about threat modeling, right?


00:29:18.020 --> 00:29:20.020
And you basically come through and you say,


00:29:20.020 --> 00:29:22.020
"Okay, well, first we're going to write some code,


00:29:22.020 --> 00:29:24.020
and then let's just push it to the cloud."


00:29:24.020 --> 00:29:26.020
And...


00:29:26.020 --> 00:29:28.020
To the cloud, it says...


00:29:28.020 --> 00:29:32.460
Yeah. Uh oh. You can't, you can't run your website, right?


00:29:32.460 --> 00:29:36.300
So the first thing you got to talk about when you talk about secrets is,


00:29:36.300 --> 00:29:38.420
human generated secrets.


00:29:38.420 --> 00:29:41.740
The ones like your passwords that you actually have to remember and type in


00:29:41.740 --> 00:29:46.060
with your fingers. don't ever share those.


00:29:46.060 --> 00:29:48.100
If you're sharing passwords between accounts,


00:29:48.100 --> 00:29:53.380
if you've got like a LinkedIn account that has been around for a decade,


00:29:53.380 --> 00:29:55.460
that's probably been in a breach.


00:29:55.500 --> 00:30:00.720
a breach, even if it hasn't been in a breach. Oh, yeah, I, for


00:30:00.720 --> 00:30:03.540
those who are not on the live stream, Michael is now typing


00:30:03.540 --> 00:30:07.560
have I been pwned, which is a great tool that you can use to


00:30:07.560 --> 00:30:11.960
see if your passwords have been in a previous breach. And


00:30:11.960 --> 00:30:16.980
spoiler alert, yes, they have. So what you should see the first


00:30:16.980 --> 00:30:19.440
lesson is like you should be using a password manager,


00:30:19.440 --> 00:30:23.400
because that's the kind of absolute root of your security.


00:30:23.400 --> 00:30:26.240
you have your kind of vault password


00:30:26.240 --> 00:30:28.940
for your password manager.


00:30:28.940 --> 00:30:31.220
You need to be able to remember that,


00:30:31.220 --> 00:30:33.520
you need to generate that securely.


00:30:33.520 --> 00:30:35.080
And then you should let your password manager


00:30:35.080 --> 00:30:37.200
actually generate all of the passwords


00:30:37.200 --> 00:30:40.660
for all of the different sites and apps that you use,


00:30:40.660 --> 00:30:43.980
because you don't wanna be sharing those between them.


00:30:43.980 --> 00:30:46.960
Because inevitably, if you share a password


00:30:46.960 --> 00:30:50.120
between 10 sites, one of them will get breached,


00:30:50.120 --> 00:30:57.320
like for sure. And then all of the others can be breached later by anybody who can,


00:30:57.320 --> 00:31:03.000
you know, buy that data dump on the dark web or, you know, access that information. So


00:31:03.000 --> 00:31:08.880
I actually wrote like one of the tools that I released during this talk at PyCon is called


00:31:08.880 --> 00:31:15.480
the pin pal, which is kind of to help people adopt a password manager. One of the challenging


00:31:15.480 --> 00:31:20.120
things about adopting a password manager, especially if you haven't got one already,


00:31:20.120 --> 00:31:26.920
is you really need to generate a long secure password and you have to memorize it. And


00:31:26.920 --> 00:31:33.360
you really can't forget that because this is something that happened to Jethro. You


00:31:33.360 --> 00:31:37.800
have to think about not just confidentiality, but there's this thing called the CIA triad


00:31:37.800 --> 00:31:43.960
where you've got confidentiality, integrity and availability of your service. And if you


00:31:43.960 --> 00:31:47.260
get hacked and people steal your secrets, then they can access


00:31:47.260 --> 00:31:50.580
your cloud and it's game over. But if you forget all of your


00:31:50.580 --> 00:31:54.040
passwords, and you can't access your cloud, it's just as equally


00:31:54.040 --> 00:31:57.760
game over. So you have to like, do that memorization, you should


00:31:57.760 --> 00:32:01.680
ideally also change your, your root password once every couple


00:32:01.680 --> 00:32:05.060
of years, you shouldn't change it too frequently, like policies


00:32:05.060 --> 00:32:07.720
that make you rotate every 90 days or whatever are just a kind


00:32:07.720 --> 00:32:12.020
of relic of a bygone time and not a very good idea. But you


00:32:12.020 --> 00:32:15.580
shouldn't keep it forever. And that process can be difficult


00:32:15.580 --> 00:32:21.060
because you need to memorize it. And because password managers


00:32:21.060 --> 00:32:23.540
try to be convenient, they're not prompting you for all the


00:32:23.540 --> 00:32:26.360
time. So pin pal is this thing that kind of like sets up a


00:32:26.360 --> 00:32:29.620
spaced repetition process where it's like gradually generating


00:32:29.620 --> 00:32:34.180
the password over time. It just kind of prompts you over and


00:32:34.180 --> 00:32:39.220
over for like, here's the first word it generates it, it asks


00:32:39.220 --> 00:32:41.580
you to kind of read it back to it. It's a little console tool


00:32:41.580 --> 00:32:47.880
that you like put in your prompt to see if it's time to do a memorization pass.


00:32:47.880 --> 00:32:52.340
But you can use Pinpal, memorize the password before you get the password manager,


00:32:52.340 --> 00:32:54.500
make sure you've got it thoroughly memorized.


00:32:54.500 --> 00:32:57.220
And then you don't have to worry so much about like,


00:32:57.220 --> 00:33:00.780
oh, where was that little piece of paper that I put in my wallet that has the password in it?


00:33:00.780 --> 00:33:04.140
Because like, it's been a week and now I have to enter my master password again.


00:33:04.140 --> 00:33:11.300
Pinpal can kind of get that part of the inconvenience of adopting a password manager in the first place out of the way.


00:33:11.300 --> 00:33:15.180
And so I've made it as easy as I possibly can for you.


00:33:15.180 --> 00:33:17.700
I know that that's the one thing that like gets people stuck.


00:33:17.700 --> 00:33:19.340
And so now you have no excuse.


00:33:19.340 --> 00:33:20.660
Gotta get a password manager right now.


00:33:20.660 --> 00:33:24.740
- I absolutely, totally recommend a password manager.


00:33:24.740 --> 00:33:27.020
And I personally use one password,


00:33:27.020 --> 00:33:28.900
but I'm also a big fan of Bitwarden.


00:33:28.900 --> 00:33:31.820
Props to the open source side of Bitwarden.


00:33:31.820 --> 00:33:32.640
That's pretty cool.


00:33:32.640 --> 00:33:34.780
And the pricing for the pro version is like a,


00:33:34.780 --> 00:33:36.980
you know, a couple of dollars a year


00:33:36.980 --> 00:33:38.900
or something ridiculously small.


00:33:40.000 --> 00:33:43.580
So it's, they're good alternate or good options.


00:33:43.580 --> 00:33:45.760
- Yeah, Dashlane is also pretty good.


00:33:45.760 --> 00:33:47.520
Full disclosure, that was actually started


00:33:47.520 --> 00:33:50.040
by my cousin in France, oddly enough.


00:33:50.040 --> 00:33:50.880
- No kidding.


00:33:50.880 --> 00:33:54.200
- Yeah, it's a little weird aside there.


00:33:54.200 --> 00:33:58.200
I don't believe he works there anymore, but yeah.


00:33:58.200 --> 00:34:00.240
And so those options are all good.


00:34:00.240 --> 00:34:02.520
I would avoid LastPass.


00:34:02.520 --> 00:34:05.780
If you've been using LastPass, that's fine.


00:34:05.780 --> 00:34:08.800
It's still way better that like, again,


00:34:08.800 --> 00:34:11.300
it can be easy to catastrophize security.


00:34:11.300 --> 00:34:13.460
Like LastPass had a bunch of breaches


00:34:13.460 --> 00:34:15.840
and the breaches were like worse than they said


00:34:15.840 --> 00:34:19.300
and their security, like they used a lower iterations


00:34:19.300 --> 00:34:22.000
on their key derivation function than they should have.


00:34:22.000 --> 00:34:23.960
And so there's all these issues with LastPass,


00:34:23.960 --> 00:34:27.520
but like if you had been using LastPass


00:34:27.520 --> 00:34:30.500
when they got breached, you're still in way better shape


00:34:30.500 --> 00:34:33.840
than if you had been trying to like memorize--


00:34:33.840 --> 00:34:36.640
- Just reusing your passwords, yeah.


00:34:36.640 --> 00:34:39.720
- Yeah, one of the big, I think, big no-nos of LastPass,


00:34:39.720 --> 00:34:42.960
other than also the low iteration,


00:34:42.960 --> 00:34:45.320
the folding account,


00:34:45.320 --> 00:34:50.360
was that a lot of stuff is stored in plain text.


00:34:50.360 --> 00:34:53.960
So like the URL of the place for which the password goes to


00:34:53.960 --> 00:34:56.680
is stored in plain text so that the hackers


00:34:56.680 --> 00:34:58.000
could go through the dump and go,


00:34:58.000 --> 00:35:01.280
okay, well, just show me all the Bank of America ones.


00:35:01.280 --> 00:35:04.000
Let's just work on that for a while, right?


00:35:04.000 --> 00:35:06.460
- Yeah, they definitely had an architecture


00:35:06.460 --> 00:35:08.980
that was like bad for no reason.


00:35:08.980 --> 00:35:10.300
Like there's no reason that they should,


00:35:10.300 --> 00:35:11.140
those that stuff.


00:35:11.140 --> 00:35:12.220
- I totally agree.


00:35:12.220 --> 00:35:15.500
So yeah, people would choose the last pass if they want,


00:35:15.500 --> 00:35:17.700
but there's a bit warden one password.


00:35:17.700 --> 00:35:19.460
That's where my heart lives.


00:35:19.460 --> 00:35:21.020
And I would certainly recommend it.


00:35:21.020 --> 00:35:23.460
I did have one, have I been poned up?


00:35:23.460 --> 00:35:24.620
And I would just like to point out,


00:35:24.620 --> 00:35:27.140
the question is, have I possibly, right?


00:35:27.140 --> 00:35:28.100
I can tell you the very,


00:35:28.100 --> 00:35:30.940
it has a list of most recent breaches.


00:35:30.940 --> 00:35:35.220
This Luxottica one here was 77 million.


00:35:35.220 --> 00:35:37.460
I just got a notification that I was in that one.


00:35:37.460 --> 00:35:40.340
That's like literally the most recent one.


00:35:40.340 --> 00:35:43.140
And here's what drives me nuts about these things,


00:35:43.140 --> 00:35:44.200
this bit of a sidebar.


00:35:44.200 --> 00:35:45.700
So nothing you can do about it,


00:35:45.700 --> 00:35:48.380
but it's maybe about the, you give it your best shot


00:35:48.380 --> 00:35:50.220
and you can just only do so much.


00:35:50.220 --> 00:35:56.980
I am in this breach because I went to my eye doctor


00:35:56.980 --> 00:35:59.340
and my health provider,


00:35:59.340 --> 00:36:01.900
they subcontracted to Luxottica


00:36:01.900 --> 00:36:05.220
to get my glasses created.


00:36:05.220 --> 00:36:09.060
Luxottica was hacked and therefore my information,


00:36:09.060 --> 00:36:11.180
I'd never even heard of this company


00:36:11.180 --> 00:36:14.260
or interacted with them and yet here we are, right?


00:36:14.260 --> 00:36:17.320
And so, you know, do your best, but don't go crazy.


00:36:17.320 --> 00:36:19.880
- Yep.


00:36:19.880 --> 00:36:21.540
- Okay.


00:36:21.540 --> 00:36:22.360
- So, okay.


00:36:22.360 --> 00:36:23.980
- I guess you have more control over, right?


00:36:23.980 --> 00:36:25.940
But I guess one of your very first recommendations


00:36:25.940 --> 00:36:29.300
was use a pass manager or use something like PenPal


00:36:29.300 --> 00:36:33.380
to help not forget your password to your password.


00:36:33.380 --> 00:36:37.300
And sort of the lesson is the CIA triad,


00:36:37.300 --> 00:36:39.540
like availability is also important,


00:36:39.540 --> 00:36:41.260
not just the other two security bits,


00:36:41.260 --> 00:36:44.340
but if you can't get to it anymore, that's still a problem.


00:36:44.340 --> 00:36:45.980
- Yep. - Yeah.


00:36:45.980 --> 00:36:47.980
- So don't be your own worst attacker.


00:36:47.980 --> 00:36:51.220
- Exactly.


00:36:51.220 --> 00:36:53.540
- So yeah, and I guess one of the other major things


00:36:53.540 --> 00:36:57.060
I wanted to talk about here,


00:36:57.060 --> 00:37:02.060
that's part of this story is that the documentation,


00:37:02.060 --> 00:37:06.080
so Jethro follows the docs on a lot of different things


00:37:06.080 --> 00:37:08.660
that he's looking at.


00:37:08.660 --> 00:37:10.040
And a lot of those docs,


00:37:10.040 --> 00:37:11.260
and this is kind of the inspiration


00:37:11.260 --> 00:37:12.200
for the talk in the first place,


00:37:12.200 --> 00:37:17.200
was that many, many APIs are documented by saying,


00:37:17.200 --> 00:37:20.540
here's some code,


00:37:20.540 --> 00:37:24.320
and here's where you paste the string of your API key.


00:37:24.320 --> 00:37:25.980
And big companies do this.


00:37:25.980 --> 00:37:28.460
Stripe does this, DigitalOcean does this.


00:37:28.460 --> 00:37:31.860
It's not a unusual thing.


00:37:31.860 --> 00:37:34.540
It's not a thing that only kind of low security


00:37:34.540 --> 00:37:36.100
uninteresting APIs do.


00:37:36.100 --> 00:37:37.700
The idea is they're writing the docs


00:37:37.700 --> 00:37:40.460
assuming that you kind of have some secret


00:37:40.460 --> 00:37:41.820
management strategy to begin with,


00:37:41.820 --> 00:37:44.180
that you know your API token is really sensitive.


00:37:44.180 --> 00:37:47.380
And so obviously you won't follow their example directly,


00:37:47.380 --> 00:37:51.260
but like as seen from the GitHub stream of,


00:37:51.260 --> 00:37:54.700
you know, constant secrets being pushed to public repos,


00:37:54.700 --> 00:37:57.460
A lot of people don't know that.


00:37:57.460 --> 00:37:59.300
And there shouldn't be any shame in not knowing that.


00:37:59.300 --> 00:38:01.900
Like if the docs say, put this string here,


00:38:01.900 --> 00:38:04.500
and you're like, okay, I'm gonna put that string there.


00:38:04.500 --> 00:38:09.380
There's no way that you could have like,


00:38:09.380 --> 00:38:12.660
somehow known in advance if you're a novice coder,


00:38:12.660 --> 00:38:15.540
that, oh, if you put that string there, like they said,


00:38:15.540 --> 00:38:18.140
then all of your money will be stolen


00:38:18.140 --> 00:38:21.900
and your servers, attackers will move thousands of servers


00:38:21.900 --> 00:38:23.300
to mine cryptocurrency.


00:38:23.300 --> 00:38:46.180
So one of the things that calls to action here is if you're maintaining those docs, if you're leading people down that path, please, like, at least mention that this token is extremely sensitive, at least explain that people should be looking somewhere else for documentation of what to do.


00:38:46.180 --> 00:38:50.380
And like in Python, it's actually quite easy


00:38:50.380 --> 00:38:51.220
to know what to do.


00:38:51.220 --> 00:38:52.140
It's use key ring,


00:38:52.140 --> 00:38:55.460
like exactly how you configure key ring


00:38:55.460 --> 00:38:56.300
and what you do with it,


00:38:56.300 --> 00:38:58.100
we can talk about in a minute or two.


00:38:58.100 --> 00:39:03.300
But from the perspective of like an application


00:39:03.300 --> 00:39:04.860
loading something from the example,


00:39:04.860 --> 00:39:07.380
from the perspective of like a code example


00:39:07.380 --> 00:39:09.060
that you wanna put on a website,


00:39:09.060 --> 00:39:12.580
just never tell users to put a string directly in the code.


00:39:12.580 --> 00:39:15.640
The string in your code is obviously


00:39:15.640 --> 00:39:17.960
never the user's like actual API key,


00:39:17.960 --> 00:39:19.960
they're gonna have to edit it anyway.


00:39:19.960 --> 00:39:21.640
So in the example code,


00:39:21.640 --> 00:39:24.360
just import keyring into a keyring.getpassword.


00:39:24.360 --> 00:39:26.400
And they can replace that with their key


00:39:26.400 --> 00:39:28.340
as easily as they can replace a string,


00:39:28.340 --> 00:39:29.960
but at least you're calling out there,


00:39:29.960 --> 00:39:32.600
oh, hey, this is like a piece of data


00:39:32.600 --> 00:39:34.840
that has to be managed in a particular way.


00:39:34.840 --> 00:39:36.880
Here's how you manage it in Python


00:39:36.880 --> 00:39:39.920
is you call the keyring.getpassword API.


00:39:39.920 --> 00:39:43.280
So the keyring module is like very simple.


00:39:43.280 --> 00:39:45.600
It's basically just a wrapper around a function


00:39:45.600 --> 00:39:52.180
returns a string. But by centralizing that function, all


00:39:52.180 --> 00:39:56.340
of the myriad nuances of what exactly like how exactly to get


00:39:56.340 --> 00:39:59.180
that string, how's it encrypted? Where's it stored? Whatever can


00:39:59.180 --> 00:40:00.940
be kind of pushed out of the application.


00:40:00.940 --> 00:40:07.920
Yeah, so let's talk about k ring a little bit. It's a Python


00:40:07.920 --> 00:40:12.900
library that you can use. And you can say, basically, save a


00:40:12.900 --> 00:40:18.820
secret or get a secret. It calls it a password. I kind of would like it to not be password


00:40:18.820 --> 00:40:22.820
because what if it's an API token for that? I don't know. It seems a little, what if it's


00:40:22.820 --> 00:40:24.820
a connection string? I don't know.


00:40:24.820 --> 00:40:31.260
Yeah, it's a little bit like, it was definitely written quickly and saw just a crazy amount


00:40:31.260 --> 00:40:36.100
of adoption and we're kind of just stuck with that naming now. I agree that it's not the


00:40:36.100 --> 00:40:42.220
best, but it's fine. Any secret token that you treat this way is kind of functionally


00:40:42.220 --> 00:40:45.700
a password. So the terminology is a little confusing, but it's


00:40:45.700 --> 00:40:45.940
fine.


00:40:45.940 --> 00:40:49.700
Yeah, so regardless of whether it's an API key or a password or


00:40:49.700 --> 00:40:54.420
a connection string, you can say keyring.setpassword, or


00:40:54.420 --> 00:40:58.260
keyring.getpassword. And that's pretty much the API, right?


00:40:58.260 --> 00:41:02.180
Yeah. And the nice thing about it is that there's a there can


00:41:02.180 --> 00:41:04.460
be a lot of complexity in how it's configured. But the


00:41:04.460 --> 00:41:07.460
default, if you just like pip install keyring, and you start


00:41:07.460 --> 00:41:11.460
using it on a desktop machine, Windows, Linux, macOS doesn't


00:41:11.460 --> 00:41:17.820
matter. It by default will use your platform's default secret


00:41:17.820 --> 00:41:22.060
store, which is kind of the best that you can do without any


00:41:22.060 --> 00:41:27.060
additional configuration. And ironically enough, for the talk,


00:41:27.060 --> 00:41:30.900
I really wanted to talk about like, how this works on every


00:41:30.900 --> 00:41:33.860
platform, I kind of figured that every platform was like


00:41:33.860 --> 00:41:38.680
equivalently secure. And I kind of hate being a shill for a you


00:41:38.680 --> 00:41:41.800
know, trillion dollar corporation, but like Apple does


00:41:41.800 --> 00:41:46.160
this so much better than either of the other major desktop


00:41:46.160 --> 00:41:52.600
platforms, because on the Mac, you've got like, intra user


00:41:52.600 --> 00:41:56.240
security boundaries. So like your there's apps are generally


00:41:56.240 --> 00:41:58.360
sandboxed on the Mac if they come from the App Store, if


00:41:58.360 --> 00:42:01.720
they've opted in. Even if they're not sandboxed, there's a


00:42:01.720 --> 00:42:05.160
lot of things that they can't do. Like if you may have noticed


00:42:05.160 --> 00:42:15.320
If you use a Mac, if you try to like run a Python program on like a file on your desktop or in your documents folder, it'll like pop up a dialogue and say like, Hey, this program is trying to access this thing.


00:42:15.320 --> 00:42:28.280
Secrets or something like that, where when an app tries to access a secret, it, you have to not just say yes, but you have to like enter your account, your login password again.


00:42:28.520 --> 00:42:31.560
And you can choose to either allow it temporarily or permanently.


00:42:31.560 --> 00:42:47.320
And you can then go in and configure it to say like, oh, this like I know I said that I this app could access its own secrets, but like, actually, I want to be prompted every time. So like, for example, my pi pi keys, if I use twine or, you know,


00:42:48.920 --> 00:42:52.460
flit to upload a package to PyPI, I always get a password


00:42:52.460 --> 00:42:55.660
prompt because my PyPI token is not stored anywhere on my file


00:42:55.660 --> 00:43:00.340
system. It's and the key that's stored in my Mac key ring is


00:43:00.340 --> 00:43:03.980
like, locked, it's not allowed to be automatically accessed by


00:43:03.980 --> 00:43:07.900
anything. And that adds a little bit of friction versus something


00:43:07.900 --> 00:43:10.880
like PyPI package uploads, like you want to have that friction


00:43:10.880 --> 00:43:16.100
there you don't, it's not very frequently used. Now on Windows


00:43:16.100 --> 00:43:24.060
and Linux, you still get like some protection against offline attacks, you get protection against other users, like if you share a


00:43:24.060 --> 00:43:33.460
computer or you're on a Windows, like, you know, a corporate laptop where things are executed under, like administrative tasks


00:43:33.460 --> 00:43:40.580
are executed by your company under different users. It'll be protected from that it'll be protected when you're not logged in.


00:43:41.260 --> 00:44:10.960
And on Linux, oddly enough, you can lock your credential locker, but like only the whole thing. And then anytime any app needs to do anything, it's like, Hey, do you want to unlock this again? And so like your mail client will be checking your mail, and it'll constantly be saying like, Hey, do you want to unlock this, but nevertheless, it is still locked in a way that like, if you step away from your computer, if the, you know, screensaver is on, I think it will generally kind of lock it for you. So it provides as much protection as it can, given the way the


00:44:10.960 --> 00:44:15.920
platform works without any additional inconvenience. Like


00:44:15.920 --> 00:44:20.440
if you use key ring, and you and you just kind of use it in the


00:44:20.440 --> 00:44:23.200
default mode, you get a bunch of extra security, and it's all for


00:44:23.200 --> 00:44:26.640
free, like you don't have to think about it. It'll just work.


00:44:26.640 --> 00:44:28.880
You then get a little


00:44:28.880 --> 00:44:32.600
comfortable. I'm pretty comfortable just putting true


00:44:32.600 --> 00:44:37.200
secrets into macOS keychain, for example, I feel like you


00:44:37.200 --> 00:44:39.840
know, that's, that's a pretty safe, it's probably better than


00:44:39.840 --> 00:44:41.700
a source file, a text file.


00:44:41.700 --> 00:44:43.780
Yes, it's definitely better than a text file.


00:44:43.780 --> 00:44:44.760
And it's better than a text.


00:44:44.760 --> 00:44:47.820
It's, I mean, it's way better than a text file in your get repo.


00:44:47.820 --> 00:44:53.160
It's still much better than a text file, like in your home directory, like a lot


00:44:53.160 --> 00:44:59.620
of the less irresponsible code documentation tends to tell you to like put your keys


00:44:59.620 --> 00:45:06.000
uh, into like dot this app dot CFG in your home directory or something.


00:45:06.460 --> 00:45:22.940
And that's like kind of okay, like any software that can steal stuff out of your home directory is probably already, you know, got a lot of control of your computer. But it's still better to put it in key ring. If you can.


00:45:24.780 --> 00:45:54.580
Right. Well, I my assumption about most malware type of things is it's going to take it's going to be 100% automated, right? There's, I imagine there's very few, I'm just going to remotely log into each computer and go hunting for secrets more like it's going to look for well known things much like if, if you tail the log of your website, you're going to see some things acts trying to access slash WP admin dot PHP, even if it's not a PHP site, like that's, they just got the things they look


00:45:54.580 --> 00:45:56.660
and they're gonna go through their processes


00:45:56.660 --> 00:45:58.860
to gather secrets and access.


00:45:58.860 --> 00:46:03.860
And I guess the less standard, the less obvious it is


00:46:03.860 --> 00:46:06.020
to get a hold of it, probably the better.


00:46:06.020 --> 00:46:10.260
- Yeah, and I mean, it's easy to kind of trick yourself


00:46:10.260 --> 00:46:11.900
into thinking like, oh, I should just put everything


00:46:11.900 --> 00:46:13.660
in like really weird locations


00:46:13.660 --> 00:46:16.620
and like the automation won't find it.


00:46:16.620 --> 00:46:19.060
Quite often the automation like does kind of scrape


00:46:19.060 --> 00:46:21.180
through every file it can get access to


00:46:21.180 --> 00:46:22.620
'cause it doesn't cost them anything.


00:46:22.620 --> 00:46:23.980
They can just like read every file.


00:46:23.980 --> 00:46:25.660
It's your processor, it's your processing.


00:46:25.660 --> 00:46:28.300
Maybe just run Shaget on every Git repo


00:46:28.300 --> 00:46:30.700
you can find on your computer.


00:46:30.700 --> 00:46:31.200
Right.


00:46:31.200 --> 00:46:38.340
So it's better to put all your eggs in one basket


00:46:38.340 --> 00:46:39.940
and really watch that basket.


00:46:39.940 --> 00:46:42.980
And that's what the keyring approach is.


00:46:42.980 --> 00:46:47.620
But it also, beyond just the protection against malware,


00:46:47.620 --> 00:46:50.780
there's also a level of management that you can do.


00:46:50.780 --> 00:46:54.820
it puts by using your platform's default key ring


00:46:54.820 --> 00:46:57.920
or encrypted store,


00:46:57.920 --> 00:46:59.740
there are platform specific APIs


00:46:59.740 --> 00:47:01.240
for like enumerating secrets.


00:47:01.240 --> 00:47:03.460
And so if you're trying to do an inventory of like,


00:47:03.460 --> 00:47:05.260
what secrets are on my computer,


00:47:05.260 --> 00:47:06.640
having them in there is nice


00:47:06.640 --> 00:47:08.300
'cause you don't have to go hunting around for them.


00:47:08.300 --> 00:47:10.460
It gives you as a defender a little bit of an advantage


00:47:10.460 --> 00:47:11.980
'cause you know what you're defending against,


00:47:11.980 --> 00:47:13.380
you know, oh, hey,


00:47:13.380 --> 00:47:14.880
this secret shouldn't be on this computer.


00:47:14.880 --> 00:47:16.500
This should really be like only,


00:47:16.500 --> 00:47:18.460
you know, on this one server over here.


00:47:19.340 --> 00:47:22.540
So using key ring also gets you that.


00:47:22.540 --> 00:47:24.260
It also gets you this configurability


00:47:24.260 --> 00:47:26.300
'cause like once you actually put your code


00:47:26.300 --> 00:47:27.440
into production in the cloud,


00:47:27.440 --> 00:47:31.300
it's not going to have access to your local key ring


00:47:31.300 --> 00:47:32.140
on your Mac.


00:47:32.140 --> 00:47:35.360
- It's gonna be a certain deadlock of your app


00:47:35.360 --> 00:47:36.200
if it pops up.


00:47:36.200 --> 00:47:39.060
Can this website access the key chain?


00:47:39.060 --> 00:47:40.700
Use touch ID allow.


00:47:40.700 --> 00:47:42.460
It's probably not gonna work in production.


00:47:42.460 --> 00:47:46.300
- Right, so you have to use an alternate key ring back end


00:47:46.300 --> 00:47:49.220
to on your server.


00:47:49.220 --> 00:47:50.940
And that is a little bit awkward.


00:47:50.940 --> 00:47:53.340
And that sometimes turns people off and they're just like, ah, I'll just use a


00:47:53.340 --> 00:47:53.860
config file.


00:47:53.860 --> 00:47:58.380
But there are ways to configure like, and they're actually documented like right on


00:47:58.380 --> 00:48:01.420
the key ring, web page.


00:48:01.420 --> 00:48:05.940
Like you can, it talks about key rings dot crypt file, which is this like extra


00:48:05.940 --> 00:48:09.580
backend that you can get that, store stuff in an encrypted file.


00:48:09.580 --> 00:48:13.660
Key rings dot all includes like just a plain text file.


00:48:13.660 --> 00:48:17.540
If, if you know that on your server, you have like a secure place to put a text


00:48:17.540 --> 00:48:20.780
file, because the server is going to need to be accessing the


00:48:20.780 --> 00:48:23.660
secret over and over again, you can just say, Okay, I'm going to


00:48:23.660 --> 00:48:26.220
configure the back end as part of this Docker container, like


00:48:26.220 --> 00:48:29.900
it's just going to read this file from this volume. And


00:48:29.900 --> 00:48:32.900
that's the keyring back end I'm using. But again, that's all


00:48:32.900 --> 00:48:37.500
configuration. So you you write your app to just use keyring.


00:48:37.500 --> 00:48:41.580
And then after the fact, when you're setting up your


00:48:41.580 --> 00:48:45.500
deployments, you can select what the most appropriate back end is.


00:48:45.740 --> 00:49:11.240
And in fact, one of the things I talked about during the talk was I, as I was trying to find like the super secure way to like disable access to secrets on Windows and Linux, and I didn't find it, I actually wrote my own key ring back end to demonstrate how you would do this that does the encryption with the key ring protocol or the sorry, the client to authenticate or protocol on a UB key or web auth key.


00:49:12.380 --> 00:49:15.080
It's called token ring, you can pip install token ring.


00:49:15.080 --> 00:49:20.420
And it works on Linux, it works on macOS,


00:49:20.420 --> 00:49:23.420
it works on Windows, and it requires you


00:49:23.420 --> 00:49:27.860
to be seated at your computer with your YubiKey plugged in


00:49:27.860 --> 00:49:31.700
in order to use this like keyring backend.


00:49:31.700 --> 00:49:32.540
So by configuring--


00:49:32.540 --> 00:49:37.540
- So when your Python code hits keyring.getpassword,


00:49:37.540 --> 00:49:39.780
the next thing that has to happen before that returns,


00:49:39.780 --> 00:49:41.820
you have to touch the YubiKey.


00:49:41.820 --> 00:49:42.660
- Right.


00:49:42.660 --> 00:49:48.160
And so this is also a good example of how like,


00:49:48.160 --> 00:49:50.060
this was a cool project.


00:49:50.060 --> 00:49:52.780
It was fun to play around with that API.


00:49:52.780 --> 00:49:55.600
I had some smarter security people than me look at it


00:49:55.600 --> 00:49:58.020
to make sure I wasn't releasing something super unsafe


00:49:58.020 --> 00:49:59.380
just for a laugh.


00:49:59.380 --> 00:50:01.420
So I think it is definitely usable.


00:50:01.420 --> 00:50:04.820
But it's also an example of a keyring backend


00:50:04.820 --> 00:50:06.580
that you would not always want to use, right?


00:50:06.580 --> 00:50:09.140
Like this is for your super, you know,


00:50:09.140 --> 00:50:11.180
high security secrets.


00:50:11.180 --> 00:50:13.660
It doesn't even have support for multiple YubiKeys.


00:50:13.660 --> 00:50:15.780
So again, you gotta think about availability,


00:50:15.780 --> 00:50:17.220
like anything you put into this,


00:50:17.220 --> 00:50:19.320
you probably wanna back up somewhere else,


00:50:19.320 --> 00:50:23.060
but it is a relatively convenient thing.


00:50:23.060 --> 00:50:24.100
You just have to kind of touch it


00:50:24.100 --> 00:50:26.860
with your finger to unlock it,


00:50:26.860 --> 00:50:28.800
but it's also really, really secure.


00:50:28.800 --> 00:50:30.620
So like some of your secrets,


00:50:30.620 --> 00:50:32.060
you might wanna put into this backend


00:50:32.060 --> 00:50:34.420
to make sure that there's no way for software


00:50:34.420 --> 00:50:36.020
to access them automatically.


00:50:36.020 --> 00:50:38.060
There's no way that malware running on your computer


00:50:38.060 --> 00:50:40.580
is gonna be able to just like Hoover them up.


00:50:40.580 --> 00:50:44.460
anytime you see a prompt for a, you know,


00:50:44.460 --> 00:50:46.460
authenticator touch that you weren't expecting,


00:50:46.460 --> 00:50:48.860
that's like a real eyebrow raise moment.


00:50:48.860 --> 00:50:52.980
And so, but, you know,


00:50:52.980 --> 00:50:56.640
Token Ring is just kind of my example of one of these things.


00:50:56.640 --> 00:50:58.740
There are dozens of other keyring backends


00:50:58.740 --> 00:51:01.700
that you can use for either different levels of security


00:51:01.700 --> 00:51:03.100
on your own machine.


00:51:03.100 --> 00:51:05.880
Although honestly, the platform encrypted stores


00:51:05.880 --> 00:51:08.580
are generally pretty good, like for a default,


00:51:08.580 --> 00:51:11.740
But you can also use alternate backends


00:51:11.740 --> 00:51:13.820
for different cloud secret providers.


00:51:13.820 --> 00:51:15.940
Like I believe HVAC,


00:51:15.940 --> 00:51:19.260
which is a HashiCorp Vault backend.


00:51:19.260 --> 00:51:20.500
I haven't actually used HVAC,


00:51:20.500 --> 00:51:22.580
so I'm not totally sure how it works,


00:51:22.580 --> 00:51:25.220
but I believe it actually has a key ring backend,


00:51:25.220 --> 00:51:28.580
which is only one like tiny part of what it does,


00:51:28.580 --> 00:51:33.580
but it can turn a vault into a key ring for you, I think.


00:51:33.580 --> 00:51:35.980
If it can't, then the adapter to do so


00:51:35.980 --> 00:51:38.300
would be very trivial to write.


00:51:38.300 --> 00:51:40.380
But that's the idea is that you write your code to use keyring


00:51:40.380 --> 00:51:41.540
and then wherever you deploy it,


00:51:41.540 --> 00:51:43.140
you can figure it to use the keyring


00:51:43.140 --> 00:51:44.580
that's appropriate to that context.


00:51:44.580 --> 00:51:45.620
- Right, right, right.


00:51:45.620 --> 00:51:49.080
One of the interesting ones is the Bitwarden backend,


00:51:49.080 --> 00:51:50.620
which is kind of nice.


00:51:50.620 --> 00:51:51.940
- Right, I was actually a little disappointed


00:51:51.940 --> 00:51:53.420
because I'm a big 1Password fan.


00:51:53.420 --> 00:51:54.940
I don't use Bitwarden personally.


00:51:54.940 --> 00:51:56.660
And I was like, "Oh, but there's a CLI.


00:51:56.660 --> 00:51:58.220
Like they could have made one."


00:51:58.220 --> 00:52:00.620
And I'm sure somebody eventually will.


00:52:00.620 --> 00:52:03.420
- Yeah, I think it's also worth just a quick pointing out


00:52:03.420 --> 00:52:08.420
that both 1Password and Bitwarden come with CLIs.


00:52:08.420 --> 00:52:12.140
So that is an option, right?


00:52:12.140 --> 00:52:17.140
And 1Password even can be an SSH daemon


00:52:17.140 --> 00:52:18.720
for some of that as well.


00:52:18.720 --> 00:52:23.460
So those are both options for ways


00:52:23.460 --> 00:52:25.180
that your app can directly interact


00:52:25.180 --> 00:52:26.580
with your password manager.


00:52:26.580 --> 00:52:29.260
And it doesn't have to necessarily be the one


00:52:29.260 --> 00:52:30.160
that you use, right?


00:52:30.160 --> 00:52:32.420
For example, you and I are 1Password people,


00:52:32.420 --> 00:52:35.180
but maybe our app is a Bitwarden person.


00:52:35.180 --> 00:52:37.500
- Right, yeah, it's all about separating


00:52:37.500 --> 00:52:40.420
that like software authorship thing


00:52:40.420 --> 00:52:42.640
from the user experience, right?


00:52:42.640 --> 00:52:44.900
Like the user should be able to select their own key ring.


00:52:44.900 --> 00:52:47.980
And it almost sounds like a little bit trivial


00:52:47.980 --> 00:52:50.200
to say just use key ring and it'll all work,


00:52:50.200 --> 00:52:52.420
but like it's that separation


00:52:52.420 --> 00:52:53.480
that you're trying to achieve,


00:52:53.480 --> 00:52:56.100
is that you want code that can be configured


00:52:56.100 --> 00:52:57.740
to be as secure as it needs to be


00:52:57.740 --> 00:52:59.980
and has like good defaults for most people.


00:53:01.300 --> 00:53:04.780
- Okay, all right, so there's a couple more lessons in here.


00:53:04.780 --> 00:53:08.180
If you're a doc writer, don't encourage people


00:53:08.180 --> 00:53:12.620
to put their API token straight in the source code


00:53:12.620 --> 00:53:14.140
and you shame a few well-known companies


00:53:14.140 --> 00:53:17.560
saying it's not just that, but yeah.


00:53:17.560 --> 00:53:23.420
- Yeah, so that was like the biggest lesson,


00:53:23.420 --> 00:53:27.260
but some other things here is that,


00:53:27.260 --> 00:53:30.340
or sorry, another call to action here


00:53:30.340 --> 00:53:34.220
is that you really want to think about,


00:53:34.220 --> 00:53:36.740
think about that time loop that you're in, right?


00:53:36.740 --> 00:53:39.620
Like what are all of the different attacks


00:53:39.620 --> 00:53:42.700
could impact you, write them down,


00:53:42.700 --> 00:53:46.340
think about how, what you wanna be secure against,


00:53:46.340 --> 00:53:48.620
the talk when it's out on YouTube


00:53:48.620 --> 00:53:50.660
kind of goes through them in order


00:53:50.660 --> 00:53:55.340
and can maybe when it comes out, you can have a listen.


00:53:55.340 --> 00:54:00.340
But once you've written that down,


00:54:00.340 --> 00:54:04.980
stick to it and make sure that your processes are such


00:54:04.980 --> 00:54:07.600
that it's really easy to do all of the defenses


00:54:07.600 --> 00:54:10.140
that you have selected that are like relevant to you


00:54:10.140 --> 00:54:11.560
and to your application.


00:54:11.560 --> 00:54:14.660
Like doing threat modeling is a great way


00:54:14.660 --> 00:54:16.700
to draw a line around that anxiety


00:54:16.700 --> 00:54:18.460
about like how secure are my secrets?


00:54:18.460 --> 00:54:21.820
Like if it's all just vibes and like,


00:54:21.820 --> 00:54:24.340
oh, you think about this one news story one day


00:54:24.340 --> 00:54:26.660
and then you write some security that like defends


00:54:26.660 --> 00:54:28.060
against that one particular thing,


00:54:28.060 --> 00:54:31.460
or you like do something on your laptop one day


00:54:31.460 --> 00:54:32.760
that's in a more secure way,


00:54:32.760 --> 00:54:35.900
but you don't like encode that as a process


00:54:35.900 --> 00:54:39.340
or something that you do repeatedly for each new secret.


00:54:39.340 --> 00:54:42.620
Like, as you said, close to the top of the show here,


00:54:42.620 --> 00:54:46.060
like we're all using a zillion APIs now.


00:54:46.060 --> 00:54:51.060
So if you think of a good way to access your Stripe API key,


00:54:51.060 --> 00:54:54.000
and then next week you have to add Braintree support,


00:54:54.000 --> 00:54:56.840
and then the week after that, you have to add,


00:54:56.840 --> 00:54:57.920
you know, open AI, right?


00:54:57.920 --> 00:55:00.100
Like as you add each one,


00:55:00.100 --> 00:55:02.900
you need to be doing things the same way,


00:55:02.900 --> 00:55:06.280
both so that you can correctly implement


00:55:06.280 --> 00:55:10.380
your security controls for each new thing,


00:55:10.380 --> 00:55:14.220
but also so that once you've implemented them,


00:55:14.220 --> 00:55:15.680
when you want to enhance them,


00:55:15.680 --> 00:55:19.140
when you grow to a certain size,


00:55:19.140 --> 00:55:20.680
you start getting more attacks,


00:55:20.680 --> 00:55:21.680
you start getting, you know,


00:55:21.680 --> 00:55:25.440
facing new, more difficult threats as your bigger target,


00:55:25.440 --> 00:55:28.440
you have to be able to upgrade and you want to be able to


00:55:28.440 --> 00:55:32.240
upgrade all of your secrets management at once as easily as


00:55:32.240 --> 00:55:34.320
you can. And there are other things outside the scope of


00:55:34.320 --> 00:55:36.800
what we're talking about today. Like, you also need to be able


00:55:36.800 --> 00:55:40.120
to like rotate those secrets, which is a whole other mess. I


00:55:40.120 --> 00:55:44.400
mean, that's what tools like HashiCorps vault can like help


00:55:44.400 --> 00:55:50.080
manage that part of the process. But yeah, so the call to action


00:55:50.080 --> 00:55:53.500
for like doc writers and framework authors is like,


00:55:53.500 --> 00:55:55.140
don't document things the wrong way,


00:55:55.140 --> 00:55:56.400
don't provide bad defaults,


00:55:56.400 --> 00:55:58.740
you use key ring if you're doing Python stuff,


00:55:58.740 --> 00:56:01.180
but the call to action for like app maintainers


00:56:01.180 --> 00:56:06.180
and people operating services is do some threat modeling,


00:56:06.180 --> 00:56:09.220
write it down and do everything the same way.


00:56:09.220 --> 00:56:11.660
Like the more that it's all funneled


00:56:11.660 --> 00:56:14.260
through that choke point of key ring


00:56:14.260 --> 00:56:16.660
and of your documented security processes,


00:56:16.660 --> 00:56:18.900
the more that when you have to make it better,


00:56:18.900 --> 00:56:26.460
it will not be a giant pain of like trawling through all of your code and all of your libraries and trying to figure out where things even are.


00:56:26.460 --> 00:56:44.740
You'll just be able to look at your, you know, the code that's accessing the secret and say like, Oh, well, we're gonna switch from like, you know, our sort of homegrown thing to some to vault or to Amazon secret store or, you know, the Google Cloud equivalent or, you know,


00:56:44.760 --> 00:56:47.000
DigitalOcean has a thing, everybody's got their own


00:56:47.000 --> 00:56:48.560
secret storage thing, there's a bunch of products


00:56:48.560 --> 00:56:50.760
in this area, and when you adopt one,


00:56:50.760 --> 00:56:53.260
you want that process to be as smooth as possible.


00:56:53.260 --> 00:56:57.520
- It's also probably a bit of a friction.


00:56:57.520 --> 00:56:58.800
I always think about, you know,


00:56:58.800 --> 00:57:01.480
how do you encourage people to do the right thing?


00:57:01.480 --> 00:57:04.000
In a way, you discourage them as you add friction


00:57:04.000 --> 00:57:08.100
and you make it harder to do the right thing, right?


00:57:08.100 --> 00:57:09.780
So if the right thing is to,


00:57:09.780 --> 00:57:11.680
you figure out a way to manage one of your secrets,


00:57:11.680 --> 00:57:14.680
well, make it easy to bring on another API,


00:57:14.680 --> 00:57:19.320
make it easy to basically get in there and change that


00:57:19.320 --> 00:57:20.440
and work with that system.


00:57:20.440 --> 00:57:24.320
Yeah.


00:57:24.320 --> 00:57:25.240
All right, let's see.


00:57:25.240 --> 00:57:28.360
We're getting short on time, but what other lessons do we have?


00:57:28.360 --> 00:57:30.600
Talk a bit about where do we put some of these things.


00:57:30.600 --> 00:57:32.920
You did also point out that there's--


00:57:32.920 --> 00:57:41.400
beyond the keyring stuff is you do have some stuff for like AWS


00:57:41.400 --> 00:57:46.080
secrets in particular. And I suppose there's probably other


00:57:46.080 --> 00:57:49.120
ones as well, right? Like what we talked about so far, mostly


00:57:49.120 --> 00:57:53.600
is security on your computer or security on the one server that


00:57:53.600 --> 00:58:00.060
you go and run your app or the cluster of servers. But you


00:58:00.060 --> 00:58:03.520
know, what about GitHub automation? Things like that,


00:58:03.520 --> 00:58:03.840
right?


00:58:03.840 --> 00:58:08.720
Right. So there's, there's various tools. The two that I


00:58:08.760 --> 00:58:12.960
talked about in my talk are there's a tool called AWS vault.


00:58:12.960 --> 00:58:15.100
There's another one called gimme AWS creds,


00:58:15.100 --> 00:58:20.120
which make it more secure to store your AWS credentials in particular.


00:58:20.120 --> 00:58:24.800
Cause those are pretty in the same way that like your computer is the root of


00:58:24.800 --> 00:58:26.820
security for like everything.


00:58:26.820 --> 00:58:28.600
And that's where all your secrets are ultimately stored.


00:58:28.600 --> 00:58:33.320
Your AWS account is like kind of the root of your security for AWS for all of


00:58:33.320 --> 00:58:36.160
your cloud resources if you're using them. So it's that,


00:58:36.240 --> 00:58:41.520
it's good to focus more on like the specific things that have a lot of power.


00:58:41.520 --> 00:58:44.720
Those also can reduce the power,


00:58:44.720 --> 00:58:49.380
like have roles that have like less permission that isn't just like your cloud


00:58:49.380 --> 00:58:51.000
root API key for everything.


00:58:51.000 --> 00:58:57.720
And so there's those, there's also like GitHub, it has a secrets


00:58:57.720 --> 00:59:01.760
system, which is effectively just injecting environment variables.


00:59:03.200 --> 00:59:06.840
but it stores them in a way that like keeps them out of your repo.


00:59:06.840 --> 00:59:10.200
It puts them in a place that again, you can enumerate,


00:59:10.200 --> 00:59:14.360
you can see all of the secrets that are provisioned against your particular


00:59:14.360 --> 00:59:18.080
repository. It manages access control for like, you know,


00:59:18.080 --> 00:59:22.600
public open source PRS can't like immediately access all those secrets cause


00:59:22.600 --> 00:59:23.080
they're running.


00:59:23.080 --> 00:59:26.480
Like they have to be run in a way that indicates that like an admin has kind of


00:59:26.480 --> 00:59:31.360
seen that something is going to happen. so they only run on like your,


00:59:31.440 --> 00:59:35.440
your main branch or things like that.


00:59:35.440 --> 00:59:37.880
So it's good, whatever,


00:59:37.880 --> 00:59:39.600
it's a little difficult to talk about these.


00:59:39.600 --> 00:59:40.440
And this is one of the reasons


00:59:40.440 --> 00:59:42.280
that I focus so heavily on your local computer,


00:59:42.280 --> 00:59:45.420
both because it's kind of the base of this pyramid,


00:59:45.420 --> 00:59:49.240
but also because you really have to do that research


00:59:49.240 --> 00:59:51.160
on your own because you have to know


00:59:51.160 --> 00:59:54.600
what services you're using and what tools are available


00:59:54.600 --> 00:59:58.320
to manage certain secrets within them.


00:59:58.320 --> 01:00:00.580
And keyring is so important


01:00:00.580 --> 01:00:02.860
because it's the thing that gives you


01:00:02.860 --> 01:00:04.580
the joint of flexibility to say like,


01:00:04.580 --> 01:00:06.540
oh, well, when it's running in GitHub,


01:00:06.540 --> 01:00:07.740
it's gonna be in an end var,


01:00:07.740 --> 01:00:08.980
and it's gonna be in this end var,


01:00:08.980 --> 01:00:11.600
and I'm gonna write a key ring back, and it knows that.


01:00:11.600 --> 01:00:14.060
- Interesting, yeah, key ring sounds like


01:00:14.060 --> 01:00:16.180
a really important piece of this story.


01:00:16.180 --> 01:00:18.380
- Yeah, I mean, it is, in the Python world,


01:00:18.380 --> 01:00:22.580
it really is like the beginning of every story


01:00:22.580 --> 01:00:24.140
about improving your security is,


01:00:24.140 --> 01:00:26.140
okay, now that you're using key ring, you can,


01:00:26.140 --> 01:00:27.560
and then there's like the next thing,


01:00:27.560 --> 01:00:28.940
and there's a bunch of directions you can go in,


01:00:28.940 --> 01:00:30.900
depending on if it's your local computer,


01:00:30.900 --> 01:00:33.820
if it's the cloud, if it's like a dedicated server,


01:00:33.820 --> 01:00:36.220
if it's an embedded device, right?


01:00:36.220 --> 01:00:39.020
There's all different ways that you could go,


01:00:39.020 --> 01:00:41.460
but it kind of all starts with like acknowledging


01:00:41.460 --> 01:00:43.420
that you're gonna need that flexibility.


01:00:43.420 --> 01:00:47.020
And honestly, you could write your own version of keyring.


01:00:47.020 --> 01:00:49.020
You know, all it is a function


01:00:49.020 --> 01:00:50.260
that like looks at a config file


01:00:50.260 --> 01:00:51.780
and figures out what other function to call.


01:00:51.780 --> 01:00:54.460
But because it's the standard one,


01:00:54.460 --> 01:00:58.100
like it is a social convention that is very powerful


01:00:58.100 --> 01:01:01.300
because you really don't want to write all of your own backends for everything.


01:01:01.300 --> 01:01:03.740
Right. It's about the integration with the other systems,


01:01:03.740 --> 01:01:08.700
about integrating with the Bitwarden CLI and with macOS keychain and doing all


01:01:08.700 --> 01:01:09.780
those things. Right. Yeah.


01:01:09.780 --> 01:01:10.500
Right. Yeah.


01:01:10.500 --> 01:01:13.140
And those good defaults are really important because like integrating with the


01:01:13.140 --> 01:01:17.420
macOS keychain is not easy and keyring just does it all for you. So,


01:01:17.420 --> 01:01:21.420
yeah. Yeah. one thing I also wanted to, this is kind of a minor point,


01:01:21.420 --> 01:01:21.780
but I just,


01:01:21.780 --> 01:01:24.820
I really want to toss it in there because I feel like it's rarely,


01:01:26.260 --> 01:01:31.180
covered, which is environment variables have kind of taken over in the cloud,


01:01:31.180 --> 01:01:34.360
like that they're the standard way that a lot of services expect you to inject


01:01:34.360 --> 01:01:38.660
stuff. so I can't say like, don't use,


01:01:38.660 --> 01:01:43.580
and VARs like it's just, that's not feasible, but when you can avoid them,


01:01:43.580 --> 01:01:46.900
like if you can get your credentials stored some other way,


01:01:46.900 --> 01:01:48.180
like in a text file or whatever,


01:01:48.180 --> 01:01:51.540
try to stick to that because


01:01:51.540 --> 01:01:55.660
and VARs are really easy to accidentally dump in a debugging session.


01:01:55.660 --> 01:02:00.300
Like you can just type and it'll dump out everything and a lot of like CI builds or


01:02:00.300 --> 01:02:07.060
you know debug log uploaders will just like kind of dump out the environment because it's useful to know and


01:02:07.060 --> 01:02:10.080
filtering secrets out of that is a whole like


01:02:10.080 --> 01:02:14.360
Discipline that you have to develop and like a lot of tools that do debug like sentry


01:02:14.360 --> 01:02:17.340
Will have like a lot of code to do that filtering


01:02:17.340 --> 01:02:21.020
But it's best if you could just put the secrets where the secrets go


01:02:21.020 --> 01:02:23.840
so like one idiom that you could use is like you can put a


01:02:24.360 --> 01:02:27.440
crypto key in your environment variable, which can't do


01:02:27.440 --> 01:02:30.540
anything but like decrypt the text file. And so that key is


01:02:30.540 --> 01:02:34.160
kind of useless outside the CI, whatever. And so you just like,


01:02:34.160 --> 01:02:38.000
indirect it so that the actual secret is stored in a place that


01:02:38.000 --> 01:02:40.400
is not just going to be dumped in every debug log.


01:02:40.400 --> 01:02:44.800
But with the danger of maybe giving away too much, that's


01:02:44.800 --> 01:02:48.120
what I do. I have a I have a one encryption key that's pretty


01:02:48.120 --> 01:02:52.600
long and a really high level of encryption of the actual secret


01:02:52.600 --> 01:02:56.040
somewhere else. And for me to add another secret, another API


01:02:56.040 --> 01:02:59.200
endpoint as well to add it to this file, and then re encrypt


01:02:59.200 --> 01:03:02.640
it, you know, it doesn't, it's sort of the same process. So


01:03:02.640 --> 01:03:06.320
it's not like, well, these API's are encrypted that way. And the


01:03:06.320 --> 01:03:08.840
database connection is encrypted that way. It's like, here's the


01:03:08.840 --> 01:03:13.520
file that's got all the info in it. And then it's highly


01:03:13.520 --> 01:03:14.000
encrypted.


01:03:14.000 --> 01:03:16.960
Yeah. And that's exactly what I want to encourage people to do.


01:03:16.960 --> 01:03:19.840
Put all your eggs in one basket and then watch the basket.


01:03:21.560 --> 01:03:23.420
Passwords go in the password manager,


01:03:23.420 --> 01:03:25.300
crypto stuff goes in the file.


01:03:25.300 --> 01:03:27.300
Please, please, please don't let it get exposed.


01:03:27.300 --> 01:03:28.420
Okay.


01:03:28.420 --> 01:03:30.800
Yeah, let's wrap up this conversation


01:03:30.800 --> 01:03:32.960
with a bit of a summary


01:03:32.960 --> 01:03:35.460
from what you take away from your talk here.


01:03:35.460 --> 01:03:39.600
- Yeah, so I think we've hammered home,


01:03:39.600 --> 01:03:41.940
you know, you should use a password manager.


01:03:41.940 --> 01:03:45.140
You should make sure that your master passwords


01:03:45.140 --> 01:03:48.080
for that password manager are backed up.


01:03:48.080 --> 01:03:50.660
One thing we didn't cover today,


01:03:50.660 --> 01:03:55.400
but it's pretty big in the talk is like, you should trust the autofill on your password manager because like a


01:03:55.400 --> 01:04:02.080
Lot of phishing attacks will make a very convincing website that will trick even the most seasoned security people


01:04:02.080 --> 01:04:08.220
So like just if it doesn't autofill close the window type the URL by hand make sure it autofills


01:04:08.220 --> 01:04:14.980
You should I think people often see that well, this is just the password managers incomplete


01:04:14.980 --> 01:04:16.580
So it's not helping me with this website


01:04:16.580 --> 01:04:21.860
Like that should be a super big red flag if the password manager is not suggesting to autofill.


01:04:21.860 --> 01:04:26.100
Yeah. And one of my favorite things about 1Password is that they have been getting progressively more


01:04:26.100 --> 01:04:32.180
aggressive about making it super annoying to like disable that. Like now when you do,


01:04:32.180 --> 01:04:36.340
if you try to autofill with 1Password in the wrong app or the wrong website,


01:04:36.340 --> 01:04:41.460
it now pops up a dialogue that's like, "Do you want to like add this URL? Do you want to fill


01:04:41.460 --> 01:04:44.860
this once or was this a mistake? Like it will it will ask you


01:04:44.860 --> 01:04:50.700
every time if you, you know, try to force it to. But obviously,


01:04:50.700 --> 01:04:52.740
like copy paste kind of circumvents all those


01:04:52.740 --> 01:04:56.300
protections. So like never ever use copy paste always try to get


01:04:56.300 --> 01:05:01.060
it to autofill. You should use full disk encryption. Like just


01:05:01.060 --> 01:05:07.220
turn on file vaulter. What's the Microsoft bitlocker? Yeah. Or DM


01:05:07.220 --> 01:05:11.380
crypt I think is the Linux one like you should the technology


01:05:11.380 --> 01:05:16.420
now is pretty much free. It doesn't really cost much in the way of performance. And it


01:05:16.420 --> 01:05:21.660
gives you peace of mind if your laptop gets stolen, which is sadly a thing that, speaking


01:05:21.660 --> 01:05:27.900
of GitHub credentials leaking constantly, laptops are stolen every day. So you should


01:05:27.900 --> 01:05:31.520
make encrypted backups. You should make sure you have a restore plan because availability


01:05:31.520 --> 01:05:38.260
is really important. Obviously, use keyring, use keyring, use keyring. And pick an appropriate


01:05:38.260 --> 01:05:42.980
back end for the level of security that you need in each place where your code is deployed.


01:05:42.980 --> 01:05:49.220
Yeah, absolutely. All right. Well, Cliff, thanks for thinking about all this for everyone


01:05:49.220 --> 01:05:56.980
and giving us a list. And I think people will really enjoy your storytelling when the PyCon


01:05:56.980 --> 01:06:01.380
video eventually comes out. Yeah, I can't wait to start sending people over to the YouTube video.


01:06:01.380 --> 01:06:06.740
I was pretty proud of how it went. It's my first talk in quite a while because I don't know if you


01:06:06.740 --> 01:06:09.500
You know, this, but the last few years have been a little,


01:06:09.500 --> 01:06:11.540
a little stressful for everybody.


01:06:11.540 --> 01:06:13.220
(laughing)


01:06:13.220 --> 01:06:14.060
- A lot of stuff,


01:06:14.060 --> 01:06:17.140
it scrambles up the whole conference track,


01:06:17.140 --> 01:06:19.460
conference circuit a little bit, yes.


01:06:19.460 --> 01:06:22.500
All right, before we get out of here,


01:06:22.500 --> 01:06:24.580
let's give you a chance to give a shout out


01:06:24.580 --> 01:06:25.680
to a PyPI package.


01:06:25.680 --> 01:06:28.400
I mean, feel free to pick Keyring if you want one more time


01:06:28.400 --> 01:06:30.060
or something else that you think is kind of awesome


01:06:30.060 --> 01:06:31.260
people should check out.


01:06:31.260 --> 01:06:36.580
- Wow, that's, that's always tough.


01:06:36.580 --> 01:06:39.700
I remember I know that this question is coming every time I


01:06:39.700 --> 01:06:40.740
want to spot guess.


01:06:40.740 --> 01:06:43.780
I'll see like word, the choices are getting harder because we're


01:06:43.780 --> 01:06:47.980
up to 456,000 packages on pipe. Yeah, how nuts is that?


01:06:47.980 --> 01:06:52.860
Yeah, that's it's, there's a lot out there. I guess I should


01:06:52.860 --> 01:06:56.760
take this as an opportunity to like, Oh, you know what,


01:06:56.760 --> 01:06:59.580
actually, I do have a self promotion thing that I should


01:06:59.580 --> 01:07:03.140
put in here that is not, we did not talk about at all today,


01:07:03.540 --> 01:07:04.640
which is date type.


01:07:04.640 --> 01:07:08.940
A date type is another little package that I wrote.


01:07:08.940 --> 01:07:14.240
And it's a workaround for like one specific bug in the standard library,


01:07:14.240 --> 01:07:19.380
um, which is that, dates are assignable to,


01:07:19.380 --> 01:07:25.840
uh, like dates and date times are considered equivalent because they are,


01:07:25.840 --> 01:07:30.020
uh, one subclass is the other.


01:07:30.460 --> 01:07:34.740
And this will make it so that you can't assign a date time to a date.


01:07:34.740 --> 01:07:36.660
Cause they don't actually, they're not compatible.


01:07:36.660 --> 01:07:38.340
They're not Lispcoff substitutable.


01:07:38.340 --> 01:07:42.460
And it will also give you separate types for naive and aware date times.


01:07:42.460 --> 01:07:43.540
So you can't mix those up.


01:07:43.540 --> 01:07:47.460
it is not actually a library.


01:07:47.460 --> 01:07:50.980
It looks like a library and I guess it does have one function in it, but what


01:07:50.980 --> 01:07:53.500
it actually is, is a bunch of abstract.


01:07:53.500 --> 01:07:56.380
Protocol like type stubs.


01:07:56.380 --> 01:07:59.440
And so the actual at runtime, there's still date times, everything


01:07:59.440 --> 01:08:00.300
works exactly the same.


01:08:00.300 --> 01:08:02.000
It doesn't change how your code behaves at all.


01:08:02.000 --> 01:08:04.140
But by importing from DateType instead of DateTime,


01:08:04.140 --> 01:08:07.880
you get this extra mypy type safety.


01:08:07.880 --> 01:08:09.760
- Excellent. All right, very cool.


01:08:09.760 --> 01:08:11.240
- So that, and also Rich,


01:08:11.240 --> 01:08:13.960
'cause like that text UI stuff is amazing,


01:08:13.960 --> 01:08:15.760
but I feel like everybody talks about that one.


01:08:15.760 --> 01:08:17.200
- Right, which is awesome.


01:08:17.200 --> 01:08:20.120
Will's doing a good job over there with that, for sure.


01:08:20.120 --> 01:08:21.920
All right, final question.


01:08:21.920 --> 01:08:23.640
If you're gonna work on DateType


01:08:23.640 --> 01:08:25.160
or any of these other projects,


01:08:25.160 --> 01:08:27.240
what editor are you using these days?


01:08:27.240 --> 01:08:32.240
I use Emacs as I have for nigh on 30 years now.


01:08:32.240 --> 01:08:36.120
- You prefer to have an operating system for your editor?


01:08:36.120 --> 01:08:38.160
- You know, I don't treat it as an OS.


01:08:38.160 --> 01:08:39.680
I feel like a lot of people, you know,


01:08:39.680 --> 01:08:41.320
kind of live inside Emacs all the time.


01:08:41.320 --> 01:08:42.520
And I use Emacs for a lot.


01:08:42.520 --> 01:08:45.200
I think I love the text editing facilities.


01:08:45.200 --> 01:08:48.560
Every time I kind of try to drop into like VS Code


01:08:48.560 --> 01:08:50.920
or one of the, you know, new cool text editors,


01:08:50.920 --> 01:08:55.360
I always like, the IDE stuff is often nicer than Emacs,


01:08:55.360 --> 01:08:58.960
but the text editing itself, like the number of motions,


01:08:58.960 --> 01:09:01.960
the kinds of things you can do to like select a word,


01:09:01.960 --> 01:09:04.680
select a function, select a lines, you know,


01:09:04.680 --> 01:09:07.080
select a sentence, rewrap a paragraph.


01:09:07.080 --> 01:09:08.760
There's all these things that you do


01:09:08.760 --> 01:09:12.760
as you're just working with text in Emacs.


01:09:12.760 --> 01:09:15.720
So it's like a, it's a text editor


01:09:15.720 --> 01:09:19.600
in a way that few other IDEs are really text editors.


01:09:19.600 --> 01:09:22.760
- Yeah, I feel like Vim is a little more interchangeable.


01:09:22.760 --> 01:09:24.400
- Yeah, I-- - A lot of the editors


01:09:24.400 --> 01:09:26.560
have Vim bindings, right?


01:09:26.560 --> 01:09:30.240
- I've used Vim, I actually kind of took a break


01:09:30.240 --> 01:09:31.960
from Emacs for about two years at one point


01:09:31.960 --> 01:09:34.240
and switched entirely to Vim.


01:09:34.240 --> 01:09:38.040
But my Vim config has been slowly breaking over the years.


01:09:38.040 --> 01:09:40.360
So I actually deleted the whole thing last year


01:09:40.360 --> 01:09:44.120
and I've been trying to get into NeoVim,


01:09:44.120 --> 01:09:44.960
but there's a little bit of a,


01:09:44.960 --> 01:09:48.000
like it's a different world, so I haven't--


01:09:48.000 --> 01:09:48.960
- Yeah. - Haven't managed


01:09:48.960 --> 01:09:50.400
to get into it.


01:09:50.400 --> 01:09:51.440
- Very cool.


01:09:51.440 --> 01:09:53.320
All right, well, final call to action for people


01:09:53.320 --> 01:09:55.120
who are now maybe a little bit nervous


01:09:55.120 --> 01:09:57.120
and thinking about how they should


01:09:57.120 --> 01:09:58.960
treat their secrets differently.


01:09:58.960 --> 01:10:01.360
- Yeah, I mean, I think that that's a good point.


01:10:01.360 --> 01:10:02.720
They might be a little nervous.


01:10:02.720 --> 01:10:04.920
Relax, it's gonna be okay.


01:10:04.920 --> 01:10:06.320
That's my call to action.


01:10:06.320 --> 01:10:08.620
And use keyring and don't write docs


01:10:08.620 --> 01:10:11.060
that tell people to paste stuff into their source code.


01:10:11.060 --> 01:10:14.960
But mostly just relax and take this methodically.


01:10:14.960 --> 01:10:16.840
Nobody's attacking you right now.


01:10:16.840 --> 01:10:19.420
It's very easy to get worked up about security


01:10:19.420 --> 01:10:24.300
think like, "Oh no, all of these attacks, all this horrible stuff could happen."


01:10:24.300 --> 01:10:28.300
But really, today's the same as yesterday.


01:10:28.300 --> 01:10:31.860
You just need to start adding those defenses a little bit at a time.


01:10:31.860 --> 01:10:32.860
Absolutely.


01:10:32.860 --> 01:10:33.860
Well, thanks again for being on the show.


01:10:33.860 --> 01:10:35.300
It was great to catch up with you.


01:10:35.300 --> 01:10:36.300
Thanks so much for having me.


01:10:36.300 --> 01:10:37.300
This was great.


01:10:37.300 --> 01:10:38.300
Yeah, you bet.

