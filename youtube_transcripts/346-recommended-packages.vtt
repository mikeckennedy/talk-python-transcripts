WEBVTT

00:00:00.000 --> 00:00:04.800
- Antonio, welcome to Talk Python To Me.


00:00:04.800 --> 00:00:07.000
- Hey, Michael, thank you for having me.


00:00:07.000 --> 00:00:09.360
- It's fantastic to have you here.


00:00:09.360 --> 00:00:12.840
You've done some really cool work to highlight


00:00:12.840 --> 00:00:15.020
some of the guests and some of the things


00:00:15.020 --> 00:00:15.940
that they've covered.


00:00:15.940 --> 00:00:19.080
And so I feel like this is gonna be a very meta episode


00:00:19.080 --> 00:00:24.080
where we reflect back on what has come before


00:00:24.080 --> 00:00:25.480
and what people have recommended.


00:00:25.480 --> 00:00:28.080
And you know, we're coming up, it's not quite December yet,


00:00:28.080 --> 00:00:30.920
but we're coming up on the end of 2021.


00:00:30.920 --> 00:00:34.060
And so maybe a look back as in order.


00:00:34.060 --> 00:00:38.520
- Yeah, I mean, I think from my point of view,


00:00:38.520 --> 00:00:40.860
I think it's a way to celebrate the people


00:00:40.860 --> 00:00:43.400
and celebrate those small packages


00:00:43.400 --> 00:00:47.440
people are highlighting in there of each of the podcasts.


00:00:47.440 --> 00:00:48.520
I think it's lovely.


00:00:48.520 --> 00:00:51.400
I think they deserve to have a place somewhere


00:00:51.400 --> 00:00:53.160
where everyone can contribute


00:00:53.160 --> 00:00:55.040
and you can go back to history


00:00:55.040 --> 00:00:59.880
and remember all these two point to three point,


00:00:59.880 --> 00:01:02.600
and how things have been evolving.


00:01:02.600 --> 00:01:03.840
It's just amazing, really.


00:01:03.840 --> 00:01:06.360
- Yeah, I agree, thank you.


00:01:06.360 --> 00:01:07.320
People have asked like,


00:01:07.320 --> 00:01:09.480
hey, is there a way I can see answers


00:01:09.480 --> 00:01:12.440
to those last couple of questions at the end of the show?


00:01:12.440 --> 00:01:14.920
Or I ask people for a notable PyPI package


00:01:14.920 --> 00:01:16.620
or what editor they're using.


00:01:16.620 --> 00:01:18.320
And it'd be interesting to see,


00:01:18.320 --> 00:01:20.880
especially in the editor changing over time,


00:01:20.880 --> 00:01:23.400
stuff like that.


00:01:23.400 --> 00:01:25.680
but at least on the notable PyPI package,


00:01:25.680 --> 00:01:28.040
you've put together a really cool GitHub repository


00:01:28.040 --> 00:01:32.080
highlighting at least going back through 2021,


00:01:32.080 --> 00:01:35.200
mostly I would say, what people have covered.


00:01:35.200 --> 00:01:37.880
So during this episode, we're gonna dive into


00:01:37.880 --> 00:01:41.720
and discuss the highlights of the notable packages


00:01:41.720 --> 00:01:43.480
that the other guests have put out there.


00:01:43.480 --> 00:01:44.320
So that's gonna be great.


00:01:44.320 --> 00:01:45.160
Yeah, thank you.


00:01:45.160 --> 00:01:46.960
That's awesome. - Great.


00:01:46.960 --> 00:01:49.240
- All right, before we get into that though,


00:01:49.240 --> 00:01:51.800
tell folks how you got into programming in Python.


00:01:51.800 --> 00:01:54.880
- Okay, so try to make it quickly.


00:01:54.880 --> 00:01:58.280
You know, I grew up in a really humble family,


00:01:58.280 --> 00:02:02.520
but you know, we have tons of education and Legos, you know?


00:02:02.520 --> 00:02:06.120
So see the first time I managed to have something


00:02:06.120 --> 00:02:09.620
I can really call it that was mine and could do it


00:02:09.620 --> 00:02:11.280
was when I entered to the university,


00:02:11.280 --> 00:02:12.880
I still have it, you know?


00:02:12.880 --> 00:02:13.920
- Oh, what is that?


00:02:13.920 --> 00:02:15.880
Is that a Texas instrument or an HP?


00:02:15.880 --> 00:02:17.800
- No, that was HP, you know,


00:02:17.800 --> 00:02:20.480
at the time was super cool, you know?


00:02:20.480 --> 00:02:25.480
So anyway, the point is I start at the university.


00:02:25.480 --> 00:02:29.800
I study electronic engineer.


00:02:29.800 --> 00:02:31.320
The person who is my wife now,


00:02:31.320 --> 00:02:34.160
she was studying civil engineer, okay?


00:02:34.160 --> 00:02:37.600
So they used to use these old Casio calculators,


00:02:37.600 --> 00:02:40.120
you know, and they used to have a lot of programs


00:02:40.120 --> 00:02:40.960
running their libraries. - Yeah, they were not


00:02:40.960 --> 00:02:43.600
quite computers, but they were almost computers.


00:02:43.600 --> 00:02:44.440
They were like,


00:02:44.440 --> 00:02:45.640
had like a little keyboard on them, right?


00:02:45.640 --> 00:02:47.600
- Exactly, you can download the whole application.


00:02:47.600 --> 00:02:48.520
And what happened is, you know,


00:02:48.520 --> 00:02:50.680
to calculate a bridge, a building or whatever,


00:02:50.680 --> 00:02:52.000
they used to use the calculation.


00:02:52.000 --> 00:02:57.000
So I decided to try to get some love out of this


00:02:57.000 --> 00:03:03.720
and start translating all these programs


00:03:03.720 --> 00:03:07.880
from this Casio to this HP


00:03:07.880 --> 00:03:12.160
and helping the other guys in the university.


00:03:12.160 --> 00:03:17.160
And that helped me a lot to get really deep into, right?


00:03:17.460 --> 00:03:24.140
So straight away, I started programming Visual Basic.


00:03:24.140 --> 00:03:32.340
Then in the same university, I have done assembly, C++,


00:03:32.340 --> 00:03:33.300
the whole thing.


00:03:33.300 --> 00:03:40.620
So more recently, once I start after graduation,


00:03:40.620 --> 00:03:45.900
I have tons of experience with the languages like C#


00:03:45.900 --> 00:03:50.900
And recently, you know, with Python, you know,


00:03:50.900 --> 00:03:55.780
and tons others, you know, I just love this really.


00:03:55.780 --> 00:03:59.640
It's just an amazing way of do end to end.


00:03:59.640 --> 00:04:03.420
Whatever you want to do, you can make it super quickly.


00:04:03.420 --> 00:04:05.980
- Yeah, it's all about empowering people


00:04:05.980 --> 00:04:08.740
to build things quick and get stuff accomplished, right?


00:04:08.740 --> 00:04:11.440
Yeah, fantastic.


00:04:11.440 --> 00:04:14.220
Boy, I can't even imagine programming


00:04:14.220 --> 00:04:16.780
from the old Casios to the old HPs,


00:04:16.780 --> 00:04:18.740
'cause they were really interesting to program.


00:04:18.740 --> 00:04:20.700
They were not like super high level.


00:04:20.700 --> 00:04:23.420
- Exactly, but in terms of the for loops


00:04:23.420 --> 00:04:24.980
and the inputs and the logic,


00:04:24.980 --> 00:04:27.540
and once you get the stuff,


00:04:27.540 --> 00:04:31.700
then it's easy to switch between languages, right?


00:04:31.700 --> 00:04:33.180
I mean, this has been amazing.


00:04:33.180 --> 00:04:38.180
And what is funny is the way how I went through Python,


00:04:38.180 --> 00:04:43.180
there was around, I remember quite clear,


00:04:43.180 --> 00:04:47.140
I was finishing my master dissertation.


00:04:47.140 --> 00:04:54.020
I was doing some deep learning work at the time.


00:04:54.020 --> 00:04:59.100
Once I was finishing, one of my colleagues, he told me,


00:04:59.100 --> 00:05:03.020
hey, Google just released something called TensorFlow.


00:05:03.020 --> 00:05:04.620
I was like, hm?


00:05:04.620 --> 00:05:08.380
I went there, look at the web page.


00:05:08.380 --> 00:05:10.420
I couldn't understand the syntax.


00:05:10.420 --> 00:05:11.660
I was, what is this?


00:05:11.660 --> 00:05:16.580
And my colleagues say, no, that's Python.


00:05:16.580 --> 00:05:22.740
Yeah, but TensorFlow, the API is a bit different.


00:05:22.740 --> 00:05:27.180
Anyway, so I remember two weeks after that,


00:05:27.180 --> 00:05:31.940
I took a flight from Moscow to Barcelona.


00:05:31.940 --> 00:05:34.740
And on my flight, I installed the application


00:05:34.740 --> 00:05:36.700
to learn Python.


00:05:36.700 --> 00:05:37.540
And that's it.


00:05:37.540 --> 00:05:42.140
Once I landed, I could do the one-to-one translation.


00:05:42.140 --> 00:05:45.980
So after that moment, that's it.


00:05:45.980 --> 00:05:49.660
Everything, backhand, pushing also front end,


00:05:49.660 --> 00:05:52.780
gluing everything, beautiful integrations.


00:05:52.780 --> 00:05:54.900
And what I think is the most important


00:05:54.900 --> 00:05:56.380
is the time you save.


00:05:56.380 --> 00:05:58.620
That is just amazing.


00:05:58.620 --> 00:06:03.460
If you want to get out an MVP, a Minimum Variable Product,


00:06:03.460 --> 00:06:06.220
if you want to prove value, I think


00:06:06.220 --> 00:06:08.740
Python is probably the best way how to do it.


00:06:08.740 --> 00:06:11.260
In a couple of weeks or days, you can get out,


00:06:11.260 --> 00:06:13.260
something out and prove it.


00:06:13.260 --> 00:06:16.660
It doesn't work, you know, just fail fast.


00:06:16.660 --> 00:06:19.940
Don't wait one year, right, you know, to show the value.


00:06:19.940 --> 00:06:22.400
Then, you know, you can improve as you go.


00:06:22.400 --> 00:06:24.300
So it's just amazing.


00:06:24.300 --> 00:06:25.300
- Yeah, fantastic.


00:06:25.300 --> 00:06:27.820
I've been doing a ton of programming lately,


00:06:27.820 --> 00:06:30.340
rewriting some e-commerce stuff and other things.


00:06:30.340 --> 00:06:34.220
And yeah, I've been enjoying being deep in the code lately


00:06:34.220 --> 00:06:35.700
and just appreciating how quick you can move.


00:06:35.700 --> 00:06:37.200
That's fantastic.


00:06:37.200 --> 00:06:39.560
All right, so are you ready to dive into these things?


00:06:39.560 --> 00:06:42.000
There's no real format other than just the


00:06:42.000 --> 00:06:44.560
chronological order that it came out, right?


00:06:44.560 --> 00:06:45.480
- Yeah, let's go.


00:06:45.480 --> 00:06:48.920
- All right, well, maybe quickly introduce


00:06:48.920 --> 00:06:50.720
your GitHub repo that you created


00:06:50.720 --> 00:06:52.840
that obviously is gonna be in the show notes.


00:06:52.840 --> 00:06:55.000
People, I'm sure you wouldn't mind


00:06:55.000 --> 00:06:59.520
if other people contributed content back to the repo, right?


00:06:59.520 --> 00:07:02.160
- Absolutely, you know, I mean, if you, you know,


00:07:02.160 --> 00:07:04.520
I see what I'm doing right now is, you know,


00:07:04.520 --> 00:07:08.720
Usually I listen to the podcast when I'm commuting to work.


00:07:08.720 --> 00:07:11.600
So I wait to listen to everything,


00:07:11.600 --> 00:07:13.200
to understand the context and everything,


00:07:13.200 --> 00:07:17.680
and then go there and have a brunch


00:07:17.680 --> 00:07:23.640
and do the modification for the new episode.


00:07:23.640 --> 00:07:29.760
If you guys want to, feel free to do a fork at the new episode


00:07:29.760 --> 00:07:31.760
and contribute.


00:07:31.760 --> 00:07:36.760
Stray away, I will be more than happy to get compliments.


00:07:36.760 --> 00:07:40.360
And if anyone can help me to go back to the years, it's fine.


00:07:40.360 --> 00:07:43.080
I promise I will put it, because I have--


00:07:43.080 --> 00:07:46.400
most of the tools is automated.


00:07:46.400 --> 00:07:51.640
It's all about going back and doing some cleanup.


00:07:51.640 --> 00:07:59.200
So as you publish the text, the transcripts--


00:07:59.200 --> 00:08:00.800
>>Victor: The transcripts, yeah, right.


00:08:00.800 --> 00:08:03.280
So I'm trying to use a bit of NLP,


00:08:03.280 --> 00:08:06.000
you know, to try to get what's the package, you know.


00:08:06.000 --> 00:08:07.760
Having this, that's really one of the reason


00:08:07.760 --> 00:08:09.080
why also I tried to do it, right?


00:08:09.080 --> 00:08:10.480
Try to get it.


00:08:10.480 --> 00:08:11.520
It's not that right, but you know,


00:08:11.520 --> 00:08:15.000
if anyone wants to, you know, do this cool stuff, why not?


00:08:15.000 --> 00:08:15.840
- Yeah, sure.


00:08:15.840 --> 00:08:19.880
The, actually the transcripts are all published to GitHub


00:08:19.880 --> 00:08:21.560
just as text files.


00:08:21.560 --> 00:08:22.840
So if people want to go at them,


00:08:22.840 --> 00:08:24.560
they don't have to scrape the web or anything.


00:08:24.560 --> 00:08:27.400
They can literally just fork it and pull them down.


00:08:27.400 --> 00:08:29.860
Maybe I'll put that in the show notes as well.


00:08:29.860 --> 00:08:31.940
- Yeah, so you created this repository


00:08:31.940 --> 00:08:36.580
and basically for each episode, at least the recent ones,


00:08:36.580 --> 00:08:39.940
you go through and you highlight what was the episode,


00:08:39.940 --> 00:08:41.300
when it was published, who was the guest,


00:08:41.300 --> 00:08:42.140
those kinds of things.


00:08:42.140 --> 00:08:44.400
But the whole point is to show,


00:08:44.400 --> 00:08:47.020
well, what did that guest answer,


00:08:47.020 --> 00:08:49.580
those guests, if it's a set of panelists,


00:08:49.580 --> 00:08:54.140
what did they answer to the notable PyPI package


00:08:54.140 --> 00:08:55.940
that people should check out?


00:08:55.940 --> 00:08:56.780
- Exactly.


00:08:56.780 --> 00:08:57.620
- All right.


00:08:57.620 --> 00:09:00.460
And then it's there, we try to keep a small description,


00:09:00.460 --> 00:09:04.900
I mean, and the links for those packages.


00:09:04.900 --> 00:09:07.660
So great, so should we?


00:09:07.660 --> 00:09:08.700
- Yeah, let's dive in.


00:09:08.700 --> 00:09:13.700
So episode 342 was the recent one published.


00:09:13.700 --> 00:09:16.800
We actually recorded some between,


00:09:16.800 --> 00:09:20.700
we've recorded them, but not released any episodes.


00:09:20.700 --> 00:09:23.820
So as far as like what's on the podcast is concerned,


00:09:23.820 --> 00:09:27.500
342 at the time of recording is the most recent one.


00:09:27.500 --> 00:09:31.340
That was Guy Tallarico talking about Python


00:09:31.340 --> 00:09:34.280
in architecture and construction.


00:09:34.280 --> 00:09:37.420
All right, what did he give a shout out to?


00:09:37.420 --> 00:09:39.620
- You know, I mean, Pythonic, you know,


00:09:39.620 --> 00:09:42.980
I know this is, you know, it's quite famous,


00:09:42.980 --> 00:09:45.900
that package, you know, many people are using it.


00:09:45.900 --> 00:09:47.340
I didn't know about it, you know,


00:09:47.340 --> 00:09:49.460
so it's pretty cool because, right,


00:09:49.460 --> 00:09:52.580
so you want to do an automation for something, you know,


00:09:52.580 --> 00:09:57.060
let's say that you have a small Arduino


00:09:57.060 --> 00:10:01.940
or Raspberry, you want to keep something in the house.


00:10:01.940 --> 00:10:04.220
I don't know, if you detect something on your camera,


00:10:04.220 --> 00:10:07.780
go and turn on the lights or whatever,


00:10:07.780 --> 00:10:11.500
or if this is stock market and in this indicators,


00:10:11.500 --> 00:10:13.860
this is happening, go and sell and buy.


00:10:13.860 --> 00:10:14.700
- Yeah.


00:10:14.700 --> 00:10:16.380
- It's perfect, it's just amazing.


00:10:16.380 --> 00:10:19.840
- Oh yeah, this is really neat.


00:10:19.840 --> 00:10:24.840
So it's like a graphical designer for running code


00:10:25.600 --> 00:10:28.360
in a Docker container or on Raspberry Pi.


00:10:28.360 --> 00:10:32.160
Yeah, or you run it there and then it writes.


00:10:32.160 --> 00:10:33.800
Does it actually write Python code?


00:10:33.800 --> 00:10:36.280
I don't know, I haven't tried it, but.


00:10:36.280 --> 00:10:37.640
- I haven't tried, you know,


00:10:37.640 --> 00:10:40.800
because I was just listening yesterday to,


00:10:40.800 --> 00:10:42.000
what I will say that, you know,


00:10:42.000 --> 00:10:43.240
it seems to be quite visual,


00:10:43.240 --> 00:10:44.680
you drag and drop,


00:10:44.680 --> 00:10:46.920
seems to be that you drag and drop, make things,


00:10:46.920 --> 00:10:48.960
and then, you know, the whole logic may be there.


00:10:48.960 --> 00:10:51.040
So we need to explore it, you know?


00:10:51.040 --> 00:10:54.240
I think this can do pretty cool stuff at home, you know?


00:10:54.240 --> 00:10:56.200
I don't know, like Halloween, you know?


00:10:56.200 --> 00:10:57.920
Go to take the face, you know?


00:10:57.920 --> 00:10:59.560
Have your whatever, your cronkas,


00:10:59.560 --> 00:11:02.220
or you know, just tuck in, you know, your...


00:11:02.220 --> 00:11:04.840
- When the kid comes in a costume,


00:11:04.840 --> 00:11:06.440
see what kind of costume it is


00:11:06.440 --> 00:11:08.040
and pick the right video to play for them.


00:11:08.040 --> 00:11:09.180
That'd be awesome. - Exactly.


00:11:09.180 --> 00:11:12.360
- Yeah, so, "Pythonic, graphical Python programming


00:11:12.360 --> 00:11:14.480
for trading and automation."


00:11:14.480 --> 00:11:15.640
Yeah, I love it.


00:11:15.640 --> 00:11:19.360
We always need more graphical type of stuff in Python.


00:11:19.360 --> 00:11:22.320
I think of the places where it could get


00:11:22.320 --> 00:11:24.960
a little more strength and support and features,


00:11:24.960 --> 00:11:28.360
building UIs and doing things in a UI oriented way.


00:11:28.360 --> 00:11:29.340
I'm all for it.


00:11:29.340 --> 00:11:33.200
Right, yeah, that's an excellent one, okay.


00:11:33.200 --> 00:11:34.640
- Yeah, exactly.


00:11:34.640 --> 00:11:37.480
Then the previous one was Beck.


00:11:37.480 --> 00:11:42.480
So he was telling us about the UMAP,


00:11:42.480 --> 00:11:46.640
Uniform Manifold Approximation and Projection.


00:11:46.640 --> 00:11:51.640
In a nutshell is, whatever we have so much data


00:11:51.680 --> 00:11:53.960
in so many dimensions, you know.


00:11:53.960 --> 00:11:56.240
Usually, you know, I work with real-time,


00:11:56.240 --> 00:11:57.880
multi-dimensional real-time data


00:11:57.880 --> 00:12:00.840
and whatever you need to analyze it,


00:12:00.840 --> 00:12:02.000
whatever you need to understand, you know,


00:12:02.000 --> 00:12:05.000
how they cluster together, this is beautiful.


00:12:05.000 --> 00:12:06.440
You know what I mean?


00:12:06.440 --> 00:12:09.560
Just load your data sets, run it,


00:12:09.560 --> 00:12:13.560
and then you can have a dimensional reduction


00:12:13.560 --> 00:12:16.880
on the data set and you can plot it


00:12:16.880 --> 00:12:20.800
and you can see things you were not able to see before


00:12:20.800 --> 00:12:23.000
on the data, you know, also plotting, you know


00:12:23.000 --> 00:12:26.400
you don't need to plot the, you know, whatever millions


00:12:26.400 --> 00:12:29.040
of records, you know, you will just do the dimension


00:12:29.040 --> 00:12:33.240
reduction and it's easy to understand a bit more


00:12:33.240 --> 00:12:34.060
about the data.


00:12:34.060 --> 00:12:35.400
It's just beautiful.


00:12:35.400 --> 00:12:36.240
- Yeah.


00:12:36.240 --> 00:12:37.560
- Those are there on the data science, you know


00:12:37.560 --> 00:12:39.440
it's, I didn't know about this one either.


00:12:39.440 --> 00:12:40.800
- Yeah. I didn't know about this one either.


00:12:40.800 --> 00:12:41.880
This looks fantastic.


00:12:41.880 --> 00:12:46.360
Uniform manifold approximations and projections.


00:12:46.360 --> 00:12:48.740
Yeah. This is not a world that I actually get a chance


00:12:48.740 --> 00:12:51.740
to spend a whole lot of time in, but yeah,


00:12:51.740 --> 00:12:54.140
it sounds to me like a little bit of the world


00:12:54.140 --> 00:12:55.940
that you're working in though,


00:12:55.940 --> 00:12:58.620
this is the thing that's relevant, right?


00:12:58.620 --> 00:12:59.540
- Exactly, yes.


00:12:59.540 --> 00:13:01.260
- Yeah, cool.


00:13:01.260 --> 00:13:05.260
So you get all these like nice visualizations of the data


00:13:05.260 --> 00:13:09.700
or like how it's grouped and a lot of nice visual aspects


00:13:09.700 --> 00:13:11.180
like color plus-


00:13:11.180 --> 00:13:14.900
- Exactly, so basically you can get clusters


00:13:14.900 --> 00:13:16.740
out of your data and from out of there,


00:13:16.740 --> 00:13:18.980
then is when you start working with the data, right?


00:13:18.980 --> 00:13:22.140
So I don't know, you want to detect something


00:13:22.140 --> 00:13:24.660
out of a lot of noise, so you can really, you know,


00:13:24.660 --> 00:13:27.860
separate noise from the data, for example.


00:13:27.860 --> 00:13:31.820
Or if you want to classify a bunch of text,


00:13:31.820 --> 00:13:33.860
so you want to do something different, you know,


00:13:33.860 --> 00:13:38.860
and find other ways how to see these in a smaller data sets,


00:13:38.860 --> 00:13:42.860
in 2D data sets, you know, that's the way,


00:13:42.860 --> 00:13:44.700
it's just how I see it.


00:13:44.700 --> 00:13:45.860
- Yeah, very cool.


00:13:45.860 --> 00:13:48.740
And of course, this is a recommendation


00:13:48.740 --> 00:13:51.900
from Bex Toychev, who talked,


00:13:51.900 --> 00:13:54.700
he's all into Kaggle and Kaggle competitions.


00:13:54.700 --> 00:13:57.300
He talked about 25 pandas functions


00:13:57.300 --> 00:14:00.540
you didn't know existed with probability 0.8,


00:14:00.540 --> 00:14:02.100
which I thought was a nice--


00:14:02.100 --> 00:14:05.060
- He was, yeah, the title was really good, yes.


00:14:05.060 --> 00:14:06.540
- The title was really good.


00:14:06.540 --> 00:14:08.220
Yeah, so this is a perfect follow-on


00:14:08.220 --> 00:14:10.220
to like, you've got this data in a data frame


00:14:10.220 --> 00:14:12.780
and let's try to understand it a little bit, right?


00:14:14.600 --> 00:14:15.440
- Cool, cool.


00:14:15.440 --> 00:14:18.340
All right, number 340.


00:14:18.340 --> 00:14:20.420
This was Anthony Shaw.


00:14:20.420 --> 00:14:22.020
- Anthony, we love you, man.


00:14:22.020 --> 00:14:23.260
- Yeah, man.


00:14:23.260 --> 00:14:24.540
- Thank you so much for everything


00:14:24.540 --> 00:14:25.860
what you guys are doing.


00:14:25.860 --> 00:14:26.700
It's just amazing.


00:14:26.700 --> 00:14:28.860
- Yeah, he's doing tons of good work.


00:14:28.860 --> 00:14:30.700
So what did he talk about?


00:14:30.700 --> 00:14:31.860
- Great, so, you know,


00:14:31.860 --> 00:14:36.500
so he told us about this package, three packages.


00:14:36.500 --> 00:14:40.380
So the first one was the Tortoise RM.


00:14:40.380 --> 00:14:45.380
This one is an easy asyncio ORM.


00:14:45.380 --> 00:14:52.820
I try, it's pretty, I mean, the API is really simple


00:14:52.820 --> 00:14:56.780
and clean, you know, and this is what stand out


00:14:56.780 --> 00:14:58.820
from the rest of the ORMs,


00:14:58.820 --> 00:15:02.820
which are currently starting to support asyncio.


00:15:02.820 --> 00:15:07.620
So it is a good try, okay?


00:15:07.620 --> 00:15:08.660
- Yeah, I think so too.


00:15:08.660 --> 00:15:10.860
It's certainly simple to use, right?


00:15:10.860 --> 00:15:15.860
It's if you've used Django ORM or if you've used SQLAlchemy,


00:15:15.860 --> 00:15:18.140
it should feel really natural to that.


00:15:18.140 --> 00:15:22.260
And then whenever you do the work,


00:15:22.260 --> 00:15:25.260
I guess it's worth pointing out this looks like


00:15:25.260 --> 00:15:28.140
an active record design pattern ORM


00:15:28.140 --> 00:15:30.380
where you operate directly on the documents


00:15:30.380 --> 00:15:32.500
as opposed to a unit of work, which is SQLAlchemy


00:15:32.500 --> 00:15:33.500
where you like create a session,


00:15:33.500 --> 00:15:35.300
do a bunch of stuff and then save it.


00:15:35.300 --> 00:15:37.380
So you would go, like if you created a tournament object,


00:15:37.380 --> 00:15:39.500
you could just say tournament.save,


00:15:39.500 --> 00:15:41.940
but because it's async first,


00:15:41.940 --> 00:15:44.500
you say await tournament.save.


00:15:44.500 --> 00:15:47.020
If you wanna create one, you say await tournament.create


00:15:47.020 --> 00:15:48.620
and you pass the data


00:15:48.620 --> 00:15:51.500
or same thing for the queries and so on.


00:15:51.500 --> 00:15:55.820
So if you're using any framework like FastAPI or Court


00:15:55.820 --> 00:15:57.940
to make Flask async or anything


00:15:57.940 --> 00:16:00.220
that's basically async first, right?


00:16:00.220 --> 00:16:06.300
Async is almost entirely about scaling the time you wait,


00:16:06.300 --> 00:16:08.440
not trying to do stuff in parallel in Python


00:16:08.440 --> 00:16:09.660
for the moment at least.


00:16:09.660 --> 00:16:11.660
In databases are where we wait, right?


00:16:11.660 --> 00:16:12.860
We wait on databases all day.


00:16:12.860 --> 00:16:15.540
That's like what a lot of apps just do.


00:16:15.540 --> 00:16:17.020
- Exactly, I'm modding that example,


00:16:17.020 --> 00:16:19.500
you know, it's using SQLite.


00:16:19.500 --> 00:16:23.580
So here you go, simple, clean, beautiful API,


00:16:23.580 --> 00:16:27.740
ready to go, you know, it's just, you just print it.


00:16:27.740 --> 00:16:28.600
- Yeah, awesome.


00:16:28.600 --> 00:16:32.780
So Anthony wasn't content to suggest just one, was he?


00:16:32.780 --> 00:16:34.220
- No, just three of them.


00:16:34.220 --> 00:16:36.180
Let's dive into the next two,


00:16:36.180 --> 00:16:39.660
but let's just probably quickly on top of this,


00:16:39.660 --> 00:16:43.660
why not to use the same idea and apply this for MongoDB?


00:16:43.660 --> 00:16:44.500
Here you go.


00:16:44.500 --> 00:16:46.220
So simple.


00:16:46.220 --> 00:16:50.860
So this, I'm not sure how to pronounce Vinny.


00:16:50.860 --> 00:16:51.700
- Vinny.


00:16:51.700 --> 00:16:52.520
- Vinny, yeah.


00:16:52.520 --> 00:16:53.580
- I think Vinny.


00:16:53.580 --> 00:16:57.140
- Yeah, so that's something I will suggest to the people


00:16:57.140 --> 00:16:59.740
who are the owner of the repositories,


00:16:59.740 --> 00:17:03.660
try to put how they want us to...


00:17:05.100 --> 00:17:08.780
How about this, a little play button just next to the name.


00:17:08.780 --> 00:17:13.140
We just hit play and it's the creator of the project saying the name.


00:17:13.140 --> 00:17:14.780
I think that would be great.


00:17:14.780 --> 00:17:20.620
Because sometimes it's clear, but sometimes it's not clear


00:17:20.620 --> 00:17:24.340
what part should be an acronym and what part should be tried to say out.


00:17:24.340 --> 00:17:27.740
Like, theoretically, this could be Bean IE.


00:17:27.740 --> 00:17:29.820
And it's not, it's Beanie, I believe.


00:17:29.820 --> 00:17:33.660
But you don't know that all the time if I look at it, right?


00:17:33.660 --> 00:17:34.420
So have another play button.


00:17:34.420 --> 00:17:35.540
Yes, I'm all for this.


00:17:35.540 --> 00:17:36.380
- Exactly.


00:17:36.380 --> 00:17:38.920
- I often criticize places saying,


00:17:38.920 --> 00:17:43.020
if you are anything to do with graphs, UI, whatever,


00:17:43.020 --> 00:17:45.460
you should have a picture on your site


00:17:45.460 --> 00:17:46.540
'cause a lot of them don't.


00:17:46.540 --> 00:17:48.260
And I think this is another good suggestion.


00:17:48.260 --> 00:17:49.100
Let's have some.


00:17:49.100 --> 00:17:51.700
- Yeah, the pictures guys, put something, please.


00:17:51.700 --> 00:17:53.100
You know, it makes so visual.


00:17:53.100 --> 00:17:55.700
And if you don't have the small logo, you know,


00:17:55.700 --> 00:17:58.460
I don't know, maybe a small screenshot of animation


00:17:58.460 --> 00:18:01.820
of how it works, it helps a lot, you know?


00:18:01.820 --> 00:18:02.660
- Exactly.


00:18:02.660 --> 00:18:03.660
- To have a good start.


00:18:03.660 --> 00:18:04.740
- Tony out in the audience says,


00:18:04.740 --> 00:18:06.700
"I agree regarding the pronunciation."


00:18:06.700 --> 00:18:08.620
All right, we already got three votes for this idea.


00:18:08.620 --> 00:18:11.300
I do think it helps that the icon is a hat,


00:18:11.300 --> 00:18:13.780
like the Beanie hat, so I think that's gonna help.


00:18:13.780 --> 00:18:17.340
- So there will be a challenge for our GitHub team,


00:18:17.340 --> 00:18:19.380
let's see how quickly they can release


00:18:19.380 --> 00:18:21.300
such a small enhancement.


00:18:21.300 --> 00:18:22.780
Let's see, let's give it a try.


00:18:22.780 --> 00:18:26.180
- Yeah, so Beanie is an ODM, like an ORM,


00:18:26.180 --> 00:18:28.340
but when you don't have relations and you have documents,


00:18:28.340 --> 00:18:29.980
you change the R to a D.


00:18:29.980 --> 00:18:33.180
It's an asynchronous Python ODM for MongoDB


00:18:33.180 --> 00:18:37.880
based on motor, which is MongoDB's async Python library


00:18:37.880 --> 00:18:39.180
and Pydantic.


00:18:39.180 --> 00:18:42.760
So if you want to talk to MongoDB using async and await


00:18:42.760 --> 00:18:44.980
and you want your things you exchange with it


00:18:44.980 --> 00:18:48.480
to be Pydantic models, all of that sounds great to me.


00:18:48.480 --> 00:18:50.460
- Beautiful.


00:18:50.460 --> 00:18:52.380
- Yeah, so it looks really cool.


00:18:52.380 --> 00:18:54.520
I'm using MongoDB of course for talk Python


00:18:54.520 --> 00:18:56.420
and Talk Python Training, all those things.


00:18:56.420 --> 00:18:58.360
And I'm using Mongo engine.


00:18:58.360 --> 00:19:01.400
I would certainly consider using this for it,


00:19:01.400 --> 00:19:03.140
but I'd already created it, you know,


00:19:03.140 --> 00:19:04.400
five years before it existed.


00:19:04.400 --> 00:19:06.380
So that's one of the problems, right?


00:19:06.380 --> 00:19:07.480
- Exactly, you know, I mean,


00:19:07.480 --> 00:19:09.340
but for someone who is starting,


00:19:09.340 --> 00:19:11.860
if Anthony is recommending it for a reason,


00:19:11.860 --> 00:19:15.140
so I will go and take a look at that.


00:19:15.140 --> 00:19:19.180
- Yeah, and just sort of a foreshadowing,


00:19:19.180 --> 00:19:20.480
in a couple of episodes,


00:19:20.480 --> 00:19:21.780
I'm gonna have Roman Wright,


00:19:21.780 --> 00:19:23.800
the creator of Beanie on here to talk about Beanie.


00:19:23.800 --> 00:19:26.220
So we'll dive more into it in a future episode.


00:19:26.220 --> 00:19:27.060
Yeah, yeah, yeah.


00:19:27.060 --> 00:19:29.760
So we'll get into the details.


00:19:29.760 --> 00:19:30.940
All right, and then Happy.


00:19:30.940 --> 00:19:42.940
Exactly, the last one, you know, so this is pretty good, you know, so basically it's a SQL host scanner, so a dictionary attack tool.


00:19:42.940 --> 00:19:54.940
So you can pass a filter of series of passwords, you know, and length and give it a try, allow it to find vulnerabilities, you know, it's just amazing.


00:19:54.940 --> 00:20:01.100
type of tools you can't imagine how useful starting the enterprise you know there are a ton of them


00:20:01.100 --> 00:20:07.500
running every single day every single second try to you know security teams trying to hundreds of


00:20:07.500 --> 00:20:13.020
databases trying to find out what's going on yeah yeah hundreds of them set up and who knows


00:20:13.020 --> 00:20:19.100
who knows who set them up and if they configured them correctly and so it'll just hammer away


00:20:20.140 --> 00:20:23.500
for known usernames and passwords and defaults


00:20:23.500 --> 00:20:24.620
and all kinds of stuff, right?


00:20:24.620 --> 00:20:27.940
And then list out the ones that it finds, which is good.


00:20:27.940 --> 00:20:30.140
- Great.


00:20:30.140 --> 00:20:31.060
- Yeah, very good.


00:20:31.060 --> 00:20:34.620
Okay, so that was the three from Anthony Shaw.


00:20:34.620 --> 00:20:36.220
Thank you, Anthony.


00:20:36.220 --> 00:20:39.900
And then we had the Guido van Rossum and Mark Shannon


00:20:39.900 --> 00:20:42.580
to talk about performance. - No time, eh?


00:20:42.580 --> 00:20:43.420
- Yeah, that was great.


00:20:43.420 --> 00:20:45.460
- I'm guessing, you know, I mean,


00:20:45.460 --> 00:20:47.740
I'm not sure Guido will really,


00:20:47.740 --> 00:20:51.740
and Mark will suggest any package,


00:20:51.740 --> 00:20:55.780
but I really love see both of them joining


00:20:55.780 --> 00:20:58.140
and sharing the job they're doing.


00:20:58.140 --> 00:20:59.240
I think it's amazing.


00:20:59.240 --> 00:21:03.740
I have a question for them and also Anthony,


00:21:03.740 --> 00:21:08.500
how what they're doing, it will work all together,


00:21:08.500 --> 00:21:11.340
times will say, but we really appreciate the work.


00:21:11.340 --> 00:21:13.740
- Mark, Shannon and Guido are working on


00:21:13.740 --> 00:21:17.100
is different than Pidgin and what Anthony Shaw's working on,


00:21:17.100 --> 00:21:21.980
which is different than Sam Gross's work on Cinder


00:21:21.980 --> 00:21:26.820
and so on, not Cinder on the no-gil, sorry.


00:21:26.820 --> 00:21:28.860
Cinder is done by Dino Phelan.


00:21:28.860 --> 00:21:31.180
So there's just all these projects of people doing stuff.


00:21:31.180 --> 00:21:34.340
It'd be great if they could find some common ground


00:21:34.340 --> 00:21:35.940
to amplify that.


00:21:35.940 --> 00:21:38.940
- Exactly, you know, whatever they can do is really welcome.


00:21:38.940 --> 00:21:41.220
I'm sure the community will appreciate it.


00:21:41.220 --> 00:21:43.260
And each of them have a different use cases


00:21:43.260 --> 00:21:45.380
and they will hit a limit.


00:21:45.380 --> 00:21:48.420
So let's see, whatever support they need,


00:21:48.420 --> 00:21:50.180
community is here really to help.


00:21:50.180 --> 00:21:51.700
- Yeah, right on.


00:21:51.700 --> 00:21:55.460
All right, next back in October, middle October,


00:21:55.460 --> 00:21:59.140
we had episode 338 using CI Build Wheel


00:21:59.140 --> 00:22:02.100
to manage the scikit-hep packages.


00:22:02.100 --> 00:22:04.140
And I learned a bunch of stuff


00:22:04.140 --> 00:22:07.820
about just how to properly build Python packages


00:22:07.820 --> 00:22:10.060
from Henry Scheiner, the guest there.


00:22:10.060 --> 00:22:11.140
That was a lot of fun.


00:22:11.140 --> 00:22:12.980
What was the thing he recommended?


00:22:12.980 --> 00:22:15.420
Right, so Plotix.


00:22:15.420 --> 00:22:19.280
Guys, if you love CLI, like I do,


00:22:19.280 --> 00:22:24.540
go and do everything there on your console, period.


00:22:24.540 --> 00:22:26.220
You want to plot a time series,


00:22:26.220 --> 00:22:28.100
you want to plot your stock markets,


00:22:28.100 --> 00:22:32.100
you want the price and you want to do extra things,


00:22:32.100 --> 00:22:32.940
that's the tool.


00:22:32.940 --> 00:22:35.020
I didn't know, it's so, so-


00:22:35.020 --> 00:22:35.940
- This is crazy.


00:22:35.940 --> 00:22:37.380
- So cool.


00:22:37.380 --> 00:22:39.100
- Yeah, 100% Python.


00:22:39.100 --> 00:22:41.920
And basically it plots directly to your terminal.


00:22:41.920 --> 00:22:44.360
So if you wanted to do something like matplotlib,


00:22:44.360 --> 00:22:46.680
even the syntax it says is similar.


00:22:46.680 --> 00:22:49.880
If you want like a bar graph or some bar,


00:22:49.880 --> 00:22:54.880
some like distribution curves or even a picture,


00:22:54.880 --> 00:22:58.440
it will literally put that in the terminal.


00:22:58.440 --> 00:22:59.280
- Just amazing.


00:22:59.280 --> 00:23:01.720
- This is awesome.


00:23:01.720 --> 00:23:02.800
Do you have some kind of use for this


00:23:02.800 --> 00:23:04.960
with the projects that you're doing where-


00:23:04.960 --> 00:23:07.960
- Yeah, usually, you know, I mean,


00:23:07.960 --> 00:23:10.320
even when you are logging things, you know,


00:23:10.320 --> 00:23:13.400
If you want to do full debugging of something


00:23:13.400 --> 00:23:15.680
and you want to understand what is going on


00:23:15.680 --> 00:23:18.100
and you want to show it right there,


00:23:18.100 --> 00:23:20.200
this is beautiful.


00:23:20.200 --> 00:23:23.940
You can understand, I don't know, some data.


00:23:23.940 --> 00:23:26.960
So you don't need to really get out of your application


00:23:26.960 --> 00:23:30.400
and go to, I don't know, a notebook and play there.


00:23:30.400 --> 00:23:32.520
You can enable that flag for you to debug it


00:23:32.520 --> 00:23:34.960
and stay away, right there.


00:23:34.960 --> 00:23:36.220
It's just amazing, really.


00:23:36.220 --> 00:23:40.200
- Yeah, over on Python Bytes,


00:23:40.200 --> 00:23:43.120
we spoke about this thing called,


00:23:43.120 --> 00:23:45.080
here's another one where we need the pronunciation,


00:23:45.080 --> 00:23:48.720
jute, jute, J-U-T, I don't know.


00:23:48.720 --> 00:23:52.560
And what it does is this one will let you take the output


00:23:52.560 --> 00:23:56.840
of a, basically take a Jupyter notebook


00:23:56.840 --> 00:23:59.820
and let you put that into,


00:23:59.820 --> 00:24:04.040
and basically view the notebook in the terminal,


00:24:04.040 --> 00:24:05.560
which is pretty awesome.


00:24:05.560 --> 00:24:08.840
So this one is like,


00:24:08.840 --> 00:24:10.880
But you don't really get the graphs and stuff for that, right?


00:24:10.880 --> 00:24:12.200
You get like the basic output.


00:24:12.200 --> 00:24:13.200
>> Yeah, that's exactly.


00:24:13.200 --> 00:24:14.200
>> Where those are the graphs.


00:24:14.200 --> 00:24:15.200
>> I just see the cells, yes.


00:24:15.200 --> 00:24:16.200
That's good.


00:24:16.200 --> 00:24:17.200
>> Yeah, yeah.


00:24:17.200 --> 00:24:18.200
So all very good.


00:24:18.200 --> 00:24:22.360
>> But this one gives you then the plot right there, you know, using the ASCII just.


00:24:22.360 --> 00:24:26.360
>> I wonder, since the syntax is really similar to matplotlib, I wonder if there could be


00:24:26.360 --> 00:24:33.520
some add-on to jute that says, if you see a matplotlib, you know, stub it out with plot


00:24:33.520 --> 00:24:34.520
text.


00:24:34.520 --> 00:24:35.520
That'd be awesome.


00:24:35.520 --> 00:24:36.520
All right, well.


00:24:36.520 --> 00:24:37.520
>> Time to try.


00:24:37.520 --> 00:24:38.520
>> Time to try.


00:24:38.520 --> 00:24:40.000
- All right, well, thank you for that, Henry.


00:24:40.000 --> 00:24:43.280
And then we had a panel of Waylon Walker,


00:24:43.280 --> 00:24:47.960
Yatun Dadada, and even Danov talking about Kedro,


00:24:47.960 --> 00:24:49.860
which is one of these like frameworks


00:24:49.860 --> 00:24:52.940
for managing data science, almost like a pipeline,


00:24:52.940 --> 00:24:55.480
but a little bit larger than that.


00:24:55.480 --> 00:24:56.620
Do you do anything like that?


00:24:56.620 --> 00:24:59.840
Do you use like Kedro or Luigi or Airflow


00:24:59.840 --> 00:25:01.440
or any of those things?


00:25:01.440 --> 00:25:06.440
- Not really on job wise, but personal use, yes.


00:25:07.120 --> 00:25:08.440
Okay.


00:25:08.440 --> 00:25:10.680
We'll go through that one down there.


00:25:10.680 --> 00:25:12.720
But what is interesting is, you know,


00:25:12.720 --> 00:25:16.680
in the two packages they recommended.


00:25:16.680 --> 00:25:21.680
So one, you know, the first one was the fssspec.


00:25:21.680 --> 00:25:24.480
- Yeah, here's another one that could use some help.


00:25:24.480 --> 00:25:26.960
I think it's fssspec.


00:25:26.960 --> 00:25:27.800
- Okay, here you go.


00:25:27.800 --> 00:25:29.480
- I think it's file systems spec.


00:25:29.480 --> 00:25:30.520
Yeah, yeah, actually.


00:25:30.520 --> 00:25:31.360
- You know, when I listen to-


00:25:31.360 --> 00:25:32.180
- This could be a little hint.


00:25:32.180 --> 00:25:33.020
A little hint.


00:25:33.020 --> 00:25:33.860
- And this is the thing, you know,


00:25:33.860 --> 00:25:35.400
when I listen to Pulsecast, I was like,


00:25:35.400 --> 00:25:40.320
OK, so I needed to come here and read it like two times


00:25:40.320 --> 00:25:45.800
to try to get exactly what is aiming from this one.


00:25:45.800 --> 00:25:47.600
It's quite valuable library.


00:25:47.600 --> 00:25:51.080
I mean, treat all the files.


00:25:51.080 --> 00:25:54.360
It doesn't matter if it's in your desktop,


00:25:54.360 --> 00:25:56.960
in the cloud, or whatever location.


00:25:56.960 --> 00:26:00.480
Have a simple API to go and handle the files.


00:26:00.480 --> 00:26:01.600
It's just amazing.


00:26:01.600 --> 00:26:02.240
I didn't know.


00:26:02.240 --> 00:26:05.160
I work a lot with pandas data frame, for example.


00:26:05.160 --> 00:26:10.160
Even when it's not data-related, data science-related,


00:26:10.160 --> 00:26:17.720
I used to get the help of all the C


00:26:17.720 --> 00:26:21.520
underlying the pandas, the non-Py.


00:26:21.520 --> 00:26:26.520
If I want to do a high-sql query, I use pandas.


00:26:26.520 --> 00:26:30.560
I usually don't go through the ORM,


00:26:30.560 --> 00:26:32.280
and the reason is the speed.


00:26:32.280 --> 00:26:34.560
You go and check, and you can do the insert,


00:26:34.560 --> 00:26:38.560
So you can do things through the pandas pretty quickly,


00:26:38.560 --> 00:26:42.040
you know, and these things are all in the backend,


00:26:42.040 --> 00:26:44.160
you know, helping to do that.


00:26:44.160 --> 00:26:46.160
It's just amazing.


00:26:46.160 --> 00:26:47.440
- Yeah, it's super cool.


00:26:47.440 --> 00:26:50.320
If you want to write the file sources


00:26:50.320 --> 00:26:52.800
that are not actually file sources,


00:26:52.800 --> 00:26:55.520
then this is a really, really good one for that.


00:26:55.520 --> 00:26:59.800
So people can look through the docs,


00:26:59.800 --> 00:27:02.040
but also out there, let's see,


00:27:02.040 --> 00:27:04.000
I was hoping somewhere there's like a list


00:27:04.000 --> 00:27:06.240
of all the different things.


00:27:06.240 --> 00:27:07.080
And I know-


00:27:07.080 --> 00:27:09.480
- The files they support, exactly.


00:27:09.480 --> 00:27:10.320
- Yeah, yeah, yeah.


00:27:10.320 --> 00:27:14.120
But there's things like databases, Excel,


00:27:14.120 --> 00:27:14.960
all those kind of things.


00:27:14.960 --> 00:27:15.780
- Yeah, exactly.


00:27:15.780 --> 00:27:19.120
It makes anything to behave like a file, you know?


00:27:19.120 --> 00:27:21.800
A simple API that handle, you know,


00:27:21.800 --> 00:27:24.320
everything, whatever have to do with data,


00:27:24.320 --> 00:27:28.320
they will do it in, you know, so simple, you know?


00:27:28.320 --> 00:27:29.160
With the URL, with the pattern.


00:27:29.160 --> 00:27:33.880
- It all uses the with open syntax, right?


00:27:33.880 --> 00:27:35.320
- Amazing, amazing.


00:27:35.320 --> 00:27:38.380
- Yeah, here's a little example of like,


00:27:38.380 --> 00:27:41.600
FSSpec open some URL to some place,


00:27:41.600 --> 00:27:42.680
could be S3 or wherever,


00:27:42.680 --> 00:27:45.460
and then you just use it as a file,


00:27:45.460 --> 00:27:47.460
like as a file object, which is great.


00:27:47.460 --> 00:27:50.880
And then obviously this one was from that episode


00:27:50.880 --> 00:27:53.140
with William Walker, who happens to be the audience.


00:27:53.140 --> 00:27:55.040
Hey William, or Waylon, sorry.


00:27:55.040 --> 00:27:57.680
It says, "Yes, FSSpec does not get enough love."


00:27:57.680 --> 00:27:58.520
Yes, thanks Waylon.


00:27:58.520 --> 00:27:59.360
- Amazing, exactly, you know,


00:27:59.360 --> 00:28:01.080
and that's the reason of this repository.


00:28:01.080 --> 00:28:02.200
We need to keep it there, you know,


00:28:02.200 --> 00:28:04.920
people should take a look, that's it simple.


00:28:04.920 --> 00:28:07.080
- Yeah, and that's why I started asking that question.


00:28:07.080 --> 00:28:09.520
I'm like, all right, I know there's things like this


00:28:09.520 --> 00:28:12.500
that I've never heard of, that I should be hearing of.


00:28:12.500 --> 00:28:14.400
And then the other one was Dynaconf.


00:28:14.400 --> 00:28:16.160
And I think we got to FS spec


00:28:16.160 --> 00:28:19.840
'cause Dynaconf used it potentially, I believe.


00:28:19.840 --> 00:28:24.840
- So this one, you know, really, I didn't know this.


00:28:24.840 --> 00:28:26.440
That's the beauty of Python.


00:28:26.440 --> 00:28:29.520
There is one library, one package force


00:28:29.520 --> 00:28:31.520
to do everything, right?


00:28:31.520 --> 00:28:36.520
So this one is an easy way how to do safety loaders,


00:28:36.520 --> 00:28:39.580
you know, as I put it there on steroids.


00:28:39.580 --> 00:28:43.180
So it doesn't matter if you have a BY, INI, JSON,


00:28:43.180 --> 00:28:47.580
you know, other formats, just, you will handle it.


00:28:47.580 --> 00:28:50.860
Period, you know, forget about what is out there.


00:28:50.860 --> 00:28:53.680
Super easy to use.


00:28:53.680 --> 00:28:57.100
- Yeah, and it has like support for environments


00:28:57.100 --> 00:29:01.340
like development versus testing versus production.


00:29:01.340 --> 00:29:03.140
And also you can keep the secrets,


00:29:03.140 --> 00:29:05.700
the file for the secrets, the file for the--


00:29:05.700 --> 00:29:07.820
the settings for the secrets and the settings


00:29:07.820 --> 00:29:09.860
in the normal settings.


00:29:09.860 --> 00:29:11.620
Well designed.


00:29:11.620 --> 00:29:15.100
Plugins for Django and Flask, talks to HashiCorp Vault


00:29:15.100 --> 00:29:16.940
for some of the secrets, and so on.


00:29:16.940 --> 00:29:18.940
Yeah, this is quite neat.


00:29:18.940 --> 00:29:21.700
And it makes good use of emoji in its output.


00:29:21.700 --> 00:29:24.620
So I always appreciate a good emoji in that.


00:29:24.620 --> 00:29:26.940
I do, yeah.


00:29:26.940 --> 00:29:29.140
I know, it's so small, but it just makes me smile


00:29:29.140 --> 00:29:31.500
and there's a little color, a little pizazz.


00:29:31.500 --> 00:29:33.100
So yeah, really good.


00:29:33.100 --> 00:29:36.380
All right, and that takes us on to something


00:29:36.380 --> 00:29:38.540
that has been getting a ton of attention lately


00:29:38.540 --> 00:29:40.700
is Will McGugan's work,


00:29:40.700 --> 00:29:44.620
episode 333, "Terminal Magic with Rich and Textual."


00:29:44.620 --> 00:29:47.060
- Rich and textual.


00:29:47.060 --> 00:29:48.620
I mean, thank you guys.


00:29:48.620 --> 00:29:53.340
You know, I mean, it's just a piece of great work,


00:29:53.340 --> 00:29:54.580
you know, they have done.


00:29:54.580 --> 00:29:56.980
You know, during the podcast,


00:29:58.460 --> 00:30:01.260
mentioned about this object explorer.


00:30:01.260 --> 00:30:01.740
>> Yeah.


00:30:01.740 --> 00:30:04.820
>> So quite cool.


00:30:04.820 --> 00:30:10.460
Get your object and just explore it.


00:30:10.460 --> 00:30:16.100
It feel like if you were in your IDD, simple.


00:30:16.100 --> 00:30:24.980
>> Yeah. So what I used to do is I would type print out dir of object,


00:30:24.980 --> 00:30:26.900
dir parentheses object,


00:30:26.900 --> 00:30:31.240
and it'll show you basically the dictionary of functions


00:30:31.240 --> 00:30:34.320
and fields and just all the attributes and whatnot.


00:30:34.320 --> 00:30:35.500
This is way better.


00:30:35.500 --> 00:30:38.200
Like imagine something like,


00:30:38.200 --> 00:30:41.000
I don't know if this is actually using Rich.


00:30:41.000 --> 00:30:43.060
Let me look real quick here.


00:30:43.060 --> 00:30:45.600
Yep, this is based itself upon Rich.


00:30:45.600 --> 00:30:50.600
So imagine Rich was used to build like a beautiful UI


00:30:50.600 --> 00:30:53.320
that you could arrow, you know, list out stuff.


00:30:53.320 --> 00:30:55.800
You could search through and arrow through


00:30:55.800 --> 00:30:59.080
and select things and yeah, this is fantastic, right?


00:30:59.080 --> 00:31:02.360
- And that will be the reason why we have the Textual.


00:31:02.360 --> 00:31:05.720
The other one that we're talking about is just,


00:31:05.720 --> 00:31:06.560
is the same, right?


00:31:06.560 --> 00:31:10.200
So using both Rich and Textual,


00:31:10.200 --> 00:31:12.920
you can do these type of things, yeah.


00:31:12.920 --> 00:31:15.480
- Yeah, Rich lets you write really awesome stuff


00:31:15.480 --> 00:31:19.600
to the terminal like progress bars and tables


00:31:19.600 --> 00:31:23.320
and colored syntax, highlighted JSON and whatnot.


00:31:23.320 --> 00:31:26.160
And then textual kind of allows you to lay out


00:31:26.160 --> 00:31:27.380
different parts of the screen.


00:31:27.380 --> 00:31:29.280
So you can have like a thing docked to the left


00:31:29.280 --> 00:31:31.480
and then fill the rest of the terminal with the output


00:31:31.480 --> 00:31:33.440
as you select the thing on the left.


00:31:33.440 --> 00:31:35.480
Yeah, perfect.


00:31:35.480 --> 00:31:39.440
That's kind of what this is for DIR, but way, way better.


00:31:39.440 --> 00:31:40.280
I love it.


00:31:40.280 --> 00:31:41.100
- Exactly.


00:31:41.100 --> 00:31:42.100
- Awesome.


00:31:42.100 --> 00:31:43.380
All right.


00:31:43.380 --> 00:31:46.920
So on to, we're all the way back to middle of September


00:31:46.920 --> 00:31:50.920
with episode 335, Gene Editing with Python.


00:31:50.920 --> 00:31:52.600
And our guest here was David Born.


00:31:52.600 --> 00:31:55.420
And he talked about one that I hadn't heard of,


00:31:55.420 --> 00:31:57.780
but I'm sure some people could definitely use


00:31:57.780 --> 00:31:59.240
in the DevOps space.


00:31:59.240 --> 00:32:03.840
- So AWS and also, you know,


00:32:03.840 --> 00:32:06.380
the rest of the cloud providers, you know,


00:32:06.380 --> 00:32:07.420
Google and everyone else,


00:32:07.420 --> 00:32:10.780
they have such a beautiful APIs


00:32:10.780 --> 00:32:12.740
to integrate with their systems.


00:32:12.740 --> 00:32:13.940
And this is one of them, right?


00:32:13.940 --> 00:32:18.940
So, so many things you can do with, you know,


00:32:22.300 --> 00:32:25.340
That's it, you know, I mean, I really love the way


00:32:25.340 --> 00:32:30.340
how all these cloud providers are enabling all these APIs


00:32:30.340 --> 00:32:33.900
to do absolutely everything, you know?


00:32:33.900 --> 00:32:37.060
- Yeah, I mean, you hear of like one of the things


00:32:37.060 --> 00:32:40.040
that makes cloud computing special.


00:32:40.040 --> 00:32:41.380
Like there used to be the joke,


00:32:41.380 --> 00:32:43.700
let me see if I can find that, cloud computing,


00:32:43.700 --> 00:32:48.380
just like just someone else's server


00:32:48.380 --> 00:32:49.500
or something like that, right?


00:32:49.500 --> 00:32:51.420
There was that joke and, oh man,


00:32:51.420 --> 00:32:53.300
I'm not finding it on the quick search here,


00:32:53.300 --> 00:32:54.580
but there was this joke that, you know what,


00:32:54.580 --> 00:32:57.400
it's the cloud, it really is just someone else's server.


00:32:57.400 --> 00:32:58.880
But one of the real big differences


00:32:58.880 --> 00:33:02.120
is that you can program against this thing.


00:33:02.120 --> 00:33:05.220
Like I remember way back when we were doing


00:33:05.220 --> 00:33:07.960
some e-commerce stuff and some software stuff,


00:33:07.960 --> 00:33:11.500
we went to Rackspace and we requested


00:33:11.500 --> 00:33:12.980
that they provision a server.


00:33:12.980 --> 00:33:15.220
And like several days later, a human had said,


00:33:15.220 --> 00:33:18.640
"Yes, Michael, here's your server we made for you."


00:33:18.640 --> 00:33:20.520
And that was great back then,


00:33:20.520 --> 00:33:23.200
but with the cloud, it's all about programming


00:33:23.200 --> 00:33:24.240
against the infrastructure,


00:33:24.240 --> 00:33:26.400
like infrastructure as code type of thing.


00:33:26.400 --> 00:33:29.200
And this cloud development kit that David suggested


00:33:29.200 --> 00:33:32.920
was all about, well, here's the Python API


00:33:32.920 --> 00:33:37.120
to program AWS basically, right?


00:33:37.120 --> 00:33:39.000
- Mind blowing, you know, I mean,


00:33:39.000 --> 00:33:42.360
if you see, you know, the implementation,


00:33:42.360 --> 00:33:45.200
I mean, the impact on the enterprise,


00:33:45.200 --> 00:33:46.880
these type of APIs, you know,


00:33:46.880 --> 00:33:49.400
and the ability to do it through Python


00:33:49.400 --> 00:33:51.600
It's just neat.


00:33:51.600 --> 00:33:52.840
- Yeah, it's super cool.


00:33:52.840 --> 00:33:54.800
Yeah, it's not a thing that I do very much.


00:33:54.800 --> 00:33:57.840
I do have some APIs that work against our servers


00:33:57.840 --> 00:34:00.440
for like, if everything goes right,


00:34:00.440 --> 00:34:05.000
zero downtime deployment on like Git push type of things,


00:34:05.000 --> 00:34:07.040
but not to the degree that like


00:34:07.040 --> 00:34:09.000
the cloud development kit won't do, right?


00:34:09.000 --> 00:34:12.320
You could do way, way more stuff than what I got going on.


00:34:12.320 --> 00:34:15.920
All right, and then David also suggested Luigi.


00:34:15.920 --> 00:34:16.760
- Luigi.


00:34:16.760 --> 00:34:20.400
- Okay, I mean, this is the whole,


00:34:20.400 --> 00:34:22.800
when I listen this name, Luigi,


00:34:22.800 --> 00:34:26.440
I remember my wife, her family is Italian.


00:34:26.440 --> 00:34:27.280
So, you know.


00:34:27.280 --> 00:34:28.120
- Fantastic.


00:34:28.120 --> 00:34:30.280
- See what this does, this does everything, right?


00:34:30.280 --> 00:34:31.800
This is the biggest spaghetti, right?


00:34:31.800 --> 00:34:36.180
It's workflow management, task scheduling,


00:34:36.180 --> 00:34:40.640
dependency resolution, everything in one place.


00:34:40.640 --> 00:34:42.400
- You can have the visualizer for all the,


00:34:42.400 --> 00:34:46.200
like the dependency graphs and whatnot, right?


00:34:46.200 --> 00:34:48.100
And this is really good because, you know,


00:34:48.100 --> 00:34:51.780
like Dask style, you know, you can do the whole,


00:34:51.780 --> 00:34:55.580
you define through functions how your workflow will work.


00:34:55.580 --> 00:34:57.760
And as things start completing,


00:34:57.760 --> 00:35:00.140
you reach to the end, to the completion, you know,


00:35:00.140 --> 00:35:01.440
they can be quite isolated,


00:35:01.440 --> 00:35:04.940
they can be near to you, far away, you know,


00:35:04.940 --> 00:35:06.460
in the cloud or another providers,


00:35:06.460 --> 00:35:08.940
and then you can reach your end goal


00:35:08.940 --> 00:35:12.540
and know when things fail or know when things are completed.


00:35:12.540 --> 00:35:14.660
I mean, applications--


00:35:14.660 --> 00:35:17.940
- Some awareness to where that particular job


00:35:17.940 --> 00:35:19.460
is making it through,


00:35:19.460 --> 00:35:20.940
'cause you can see what part's finished,


00:35:20.940 --> 00:35:23.580
what part is still working, what's waiting on what.


00:35:23.580 --> 00:35:24.420
Yeah, it's very cool.


00:35:24.420 --> 00:35:25.260
- Exactly, exactly.


00:35:25.260 --> 00:35:27.820
You know, who wants to do, again, home automation?


00:35:27.820 --> 00:35:29.980
Who wants to do, you know, enterprise,


00:35:29.980 --> 00:35:32.020
you know, completing your workflows?


00:35:32.020 --> 00:35:32.860
Here you go.


00:35:32.860 --> 00:35:36.140
And then you have a bit of nice user interface,


00:35:36.140 --> 00:35:37.340
web interface.


00:35:37.340 --> 00:35:41.100
You have all in one stop.


00:35:41.100 --> 00:35:42.020
That's it.


00:35:42.020 --> 00:35:42.940
- Yeah.


00:35:42.940 --> 00:35:45.260
- And for people out there who are all about Python,


00:35:45.260 --> 00:35:47.940
which is the audience basically,


00:35:47.940 --> 00:35:51.060
everything in Luigi is Python instead of XML configuration


00:35:51.060 --> 00:35:55.140
or similar external files like think YAML,


00:35:55.140 --> 00:35:57.660
JSON, whatever, the dependency graph is specified


00:35:57.660 --> 00:36:00.500
within Python, which is pretty cool.


00:36:00.500 --> 00:36:01.600
- Right.


00:36:01.600 --> 00:36:03.540
- Yeah, and I think this one came out of Spotify,


00:36:03.540 --> 00:36:04.380
if I recall correctly.


00:36:04.380 --> 00:36:05.220
- Yes, exactly, yes.


00:36:05.220 --> 00:36:08.420
And this is something I really love from the tech companies.


00:36:08.420 --> 00:36:11.700
Their management have understood that, you know,


00:36:12.740 --> 00:36:17.740
they can work together with the open source community,


00:36:17.740 --> 00:36:24.020
we help them, and back to my position as an enterprise,


00:36:24.020 --> 00:36:25.460
I can use it, right?


00:36:25.460 --> 00:36:30.220
So it's just really a call from every single company


00:36:30.220 --> 00:36:33.740
who have something that can be open source,


00:36:33.740 --> 00:36:34.900
go ahead and do it.


00:36:34.900 --> 00:36:39.220
You are going to get so much out of it.


00:36:40.860 --> 00:36:43.840
- Yeah, you know, worst case, nobody cares.


00:36:43.840 --> 00:36:47.200
Best case, you find other people who are passionate


00:36:47.200 --> 00:36:48.560
about this thing that you built,


00:36:48.560 --> 00:36:50.320
and then they'll help you improve it,


00:36:50.320 --> 00:36:52.240
you know, without any effort from you, right?


00:36:52.240 --> 00:36:53.640
Like that's awesome for a company


00:36:53.640 --> 00:36:55.680
to have other people help work on the code.


00:36:55.680 --> 00:36:56.960
- Exactly, they find the box for you,


00:36:56.960 --> 00:36:58.920
you know, they help you with the commutation,


00:36:58.920 --> 00:37:00.840
it's a win-to-win situation.


00:37:00.840 --> 00:37:01.760
- Yeah, exactly.


00:37:01.760 --> 00:37:05.640
There's so many of these things that companies have to build


00:37:05.640 --> 00:37:09.320
not because it's their core value proposition,


00:37:09.320 --> 00:37:11.240
It's just that, well, we needed a thing


00:37:11.240 --> 00:37:13.160
to schedule some stuff, so we figured that out.


00:37:13.160 --> 00:37:16.800
But like, it's not what makes Spotify special, right?


00:37:16.800 --> 00:37:18.840
So they don't need to hide and protect it, right?


00:37:18.840 --> 00:37:20.680
Put it out there, that's great.


00:37:20.680 --> 00:37:25.680
All right, next episode, going back to September 18th,


00:37:25.680 --> 00:37:29.120
September 9th on the recording, I guess,


00:37:29.120 --> 00:37:32.240
we talked about the planetary,


00:37:32.240 --> 00:37:33.520
Microsoft Planetary Computer,


00:37:33.520 --> 00:37:35.820
which is like basically cloud computing


00:37:35.820 --> 00:37:38.760
for people researching climate change


00:37:38.760 --> 00:37:42.640
and similar geospatial stuff.


00:37:42.640 --> 00:37:46.000
That was Rob Emanuel and Tom Augsburger.


00:37:46.000 --> 00:37:46.840
Thanks guys.


00:37:46.840 --> 00:37:48.280
- Rob and Tom, thank you for sharing.


00:37:48.280 --> 00:37:51.440
I think this is, you know, we need so much of this,


00:37:51.440 --> 00:37:52.840
you know, in those days.


00:37:52.840 --> 00:37:55.560
I think it's well deserved, you know,


00:37:55.560 --> 00:37:57.440
this type of contribution from, you know,


00:37:57.440 --> 00:38:01.800
if any big company can, you know, just go ahead.


00:38:01.800 --> 00:38:02.840
Don't wait, you know.


00:38:02.840 --> 00:38:04.240
- Yeah, absolutely.


00:38:04.240 --> 00:38:06.480
And so the thing that they recommended,


00:38:06.480 --> 00:38:08.880
I can't remember, I think it was Tom,


00:38:08.880 --> 00:38:10.720
but I'm not 100% sure it was Seaborn,


00:38:10.720 --> 00:38:14.040
which also I saw back when we were talking


00:38:14.040 --> 00:38:18.760
about the one that Bex recommended,


00:38:18.760 --> 00:38:23.480
which was the UMAP one that also was,


00:38:23.480 --> 00:38:26.880
had a bunch of examples in Seaborn, yeah, so.


00:38:26.880 --> 00:38:28.800
- Yeah, usually in the data science world,


00:38:28.800 --> 00:38:31.920
you know, Seaborn is really used.


00:38:31.920 --> 00:38:34.280
You can do everything with Matplot.


00:38:34.280 --> 00:38:36.200
I don't like how it looks like.


00:38:36.200 --> 00:38:38.080
I know many people will come back to me and say,


00:38:38.080 --> 00:38:40.320
no, no, no, you haven't tried X and Y on set.


00:38:40.320 --> 00:38:44.240
I know, but out of the shelf, that's it.


00:38:44.240 --> 00:38:45.560
Seaborn just--


00:38:45.560 --> 00:38:48.000
- Look how incredible this joint plot looks.


00:38:48.000 --> 00:38:49.280
Like if people go to the gallery


00:38:49.280 --> 00:38:54.280
and just kind of scroll through this hexagonal joint plot,


00:38:54.280 --> 00:38:56.920
some of these, it's not just showing you the data,


00:38:56.920 --> 00:39:00.080
but it's like, wow, that's publication level beauty


00:39:00.080 --> 00:39:01.760
right there, right?


00:39:01.760 --> 00:39:03.560
- Really nice, really simple.


00:39:03.560 --> 00:39:07.520
I mean, you get the same that you get out of Matplot,


00:39:07.520 --> 00:39:10.080
but I will say, you know,


00:39:10.080 --> 00:39:14.480
it's like comparing the old Android with the Apple,


00:39:14.480 --> 00:39:15.960
you know, with the iPhone, you know,


00:39:15.960 --> 00:39:16.960
I'm Android guy, right?


00:39:16.960 --> 00:39:18.800
So guys, I'm Windows guy as well, you know,


00:39:18.800 --> 00:39:20.720
I use, you know, myself, you know,


00:39:20.720 --> 00:39:25.720
I use Linux through my Windows for subsystems, you know, so.


00:39:25.720 --> 00:39:28.640
But anyway, but that's a big competition, you know,


00:39:28.640 --> 00:39:31.000
yeah, you can do things pretty good in Matplot,


00:39:31.000 --> 00:39:33.160
but there's so many things out there,


00:39:33.160 --> 00:39:35.600
which out of the shelf, it looks beautiful.


00:39:35.600 --> 00:39:40.160
You know, it also have a nice API, easy to use.


00:39:40.160 --> 00:39:42.920
One stop for beautiful visualizations.


00:39:42.920 --> 00:39:43.760
- Yeah, absolutely.


00:39:43.760 --> 00:39:45.360
Tony on the audience says Seaborn is great.


00:39:45.360 --> 00:39:47.060
So another vote for that as well.


00:39:47.060 --> 00:39:52.520
All right, back to the perfect threes, episode 333.


00:39:52.520 --> 00:39:54.300
I thought this was a really fun episode.


00:39:54.300 --> 00:39:56.440
The state of data science in 2021


00:39:56.440 --> 00:39:59.100
was Stan Siebert from Anaconda.


00:39:59.100 --> 00:40:01.620
- See, so, wow.


00:40:02.640 --> 00:40:09.360
The NumPy and Spicey on GPU is, I think,


00:40:09.360 --> 00:40:15.080
is a great achievement for so many things we use day to day.


00:40:15.080 --> 00:40:18.080
I mean, every time you guys are talking to your phones


00:40:18.080 --> 00:40:19.760
and you are--


00:40:19.760 --> 00:40:21.640
even when you are not doing anything,


00:40:21.640 --> 00:40:24.200
the camera is watching you, the whole thing.


00:40:24.200 --> 00:40:26.440
There is so much happening out there,


00:40:26.440 --> 00:40:29.640
thanks to the use of the GPUs at the time.


00:40:29.640 --> 00:40:31.080
It's still used.


00:40:31.080 --> 00:40:39.720
So the cuPy, cuPy, allowed to get that array


00:40:39.720 --> 00:40:42.160
and process through GPU.


00:40:42.160 --> 00:40:44.840
I mean, it's pretty good.


00:40:44.840 --> 00:40:47.160
And the beauty of this library is


00:40:47.160 --> 00:40:51.200
that it's used for so many others that help everything


00:40:51.200 --> 00:40:54.400
to go on a steroid.


00:40:54.400 --> 00:40:59.200
>>Yeah, so cuPy comes from CUDA in Python,


00:40:59.200 --> 00:41:04.080
so I'm guessing Coupie is NumPy, SciPy compatible


00:41:04.080 --> 00:41:07.880
array library for GPU accelerated computing with Python.


00:41:07.880 --> 00:41:09.080
There's a lot of qualifiers there,


00:41:09.080 --> 00:41:12.620
but that basically means if you're doing stuff with NumPy,


00:41:12.620 --> 00:41:15.560
you can throw this at it instead of happening on your CPU,


00:41:15.560 --> 00:41:19.400
it'll happen on CUDA cores on say your NVIDIA 3080,


00:41:19.400 --> 00:41:21.860
which is an insane amount of computation.


00:41:21.860 --> 00:41:24.560
- Wow.


00:41:24.560 --> 00:41:25.380
- Yeah, very cool.


00:41:25.380 --> 00:41:27.400
Do you guys use GPUs for anything?


00:41:27.400 --> 00:41:33.000
Yes, in the industry, mostly it's used for the seismic processing.


00:41:33.000 --> 00:41:38.200
It's a big size of images.


00:41:38.200 --> 00:41:44.680
That's usually where Linux is in the energy industry, most of them.


00:41:44.680 --> 00:41:48.960
You have to do all this 3D graphics,


00:41:48.960 --> 00:41:52.840
all this processing from all these surveys data.


00:41:52.840 --> 00:41:56.120
All this may be used.


00:41:56.120 --> 00:41:57.720
- Yeah, fantastic.


00:41:57.720 --> 00:42:01.220
I would love to see things come along


00:42:01.220 --> 00:42:04.360
that are a little more interchangeable.


00:42:04.360 --> 00:42:06.300
Or like the CUDA stuff is fantastic,


00:42:06.300 --> 00:42:08.900
but CUDA is just NVIDIA.


00:42:08.900 --> 00:42:11.700
And we've got AMD with Radeon,


00:42:11.700 --> 00:42:16.700
we've got the new, my new laptop's got like 16 neural cores


00:42:16.700 --> 00:42:20.100
or something like that, I can't remember exactly.


00:42:20.100 --> 00:42:22.880
But we all are getting these systems laying around


00:42:22.880 --> 00:42:27.880
And it's very hard to get a hold of the GeForce GPUs.


00:42:27.880 --> 00:42:32.280
So I'd love to see like whatever GPU you want to bring


00:42:32.280 --> 00:42:33.560
or neural engine you want to bring,


00:42:33.560 --> 00:42:35.220
but I totally understand that


00:42:35.220 --> 00:42:36.960
that doesn't always work so easily.


00:42:36.960 --> 00:42:42.060
All right, the next episode is a very popular one.


00:42:42.060 --> 00:42:44.000
One of the most popular ones we've had recently


00:42:44.000 --> 00:42:47.920
called a robust Python with Patrick Viafore.


00:42:47.920 --> 00:42:48.760
Yeah, yeah.


00:42:48.760 --> 00:42:51.800
And so he talked about Stevador,


00:42:51.800 --> 00:42:55.680
- Stibidor, managing dynamic plugins for Python apps.


00:42:55.680 --> 00:42:58.640
- See, when I was listening to this podcast,


00:42:58.640 --> 00:43:02.200
I was regretting so much time I wasted in my life.


00:43:02.200 --> 00:43:03.040
(laughing)


00:43:03.040 --> 00:43:04.440
- I built this whole thing that existed.


00:43:04.440 --> 00:43:06.520
- Working on my, you know,


00:43:06.520 --> 00:43:10.520
add-ons, you know, my plugins, you know.


00:43:10.520 --> 00:43:13.240
This is just so simple.


00:43:13.240 --> 00:43:14.080
That's it.


00:43:14.080 --> 00:43:16.320
And at runtime, you know, forget about doing imports


00:43:16.320 --> 00:43:18.440
and, you know, your new file and the whole thing.


00:43:18.440 --> 00:43:20.320
I need to go and, no, no, no, no, no.


00:43:20.320 --> 00:43:21.280
Stop doing this.


00:43:21.280 --> 00:43:23.160
guys, there is a solution.


00:43:23.160 --> 00:43:24.520
That's the one.


00:43:24.520 --> 00:43:25.440
- Yeah, cool.


00:43:25.440 --> 00:43:27.740
So basically if you wanna build a plugin system


00:43:27.740 --> 00:43:30.000
for your code and make,


00:43:30.000 --> 00:43:34.160
for your app and make things interchangeable and whatnot,


00:43:34.160 --> 00:43:36.120
Steve Dore looks really good for that.


00:43:36.120 --> 00:43:36.960
Very nice.


00:43:36.960 --> 00:43:40.920
Back to August, summertime,


00:43:40.920 --> 00:43:45.920
episode 331 with Lucas Lenga.


00:43:45.920 --> 00:43:47.280
- Lucas, thank you so much.


00:43:47.280 --> 00:43:49.280
I mean, it's to everyone, right?


00:43:49.280 --> 00:43:50.720
But you know, also to you, you know,


00:43:50.720 --> 00:43:52.240
I use black so much, you know,


00:43:52.240 --> 00:43:55.780
I know that all the things you are today,


00:43:55.780 --> 00:43:57.600
you know, going on today,


00:43:57.600 --> 00:44:00.440
you didn't mention black, but, you know,


00:44:00.440 --> 00:44:02.360
we decided to add it here.


00:44:02.360 --> 00:44:03.200
- Yeah.


00:44:03.200 --> 00:44:05.580
- Incompromising code for matter, you know,


00:44:05.580 --> 00:44:09.740
is that helps so much with people's relationship, I guess,


00:44:09.740 --> 00:44:12.600
you know, more than beautiful Python, no more fighting,


00:44:12.600 --> 00:44:15.320
you know, that's it, just get agreement.


00:44:15.320 --> 00:44:18.520
Everyone use black, that's the setting by default.


00:44:18.520 --> 00:44:20.880
- Yeah, it's one of the things where you can just


00:44:20.880 --> 00:44:23.720
take that whole debate and conversation


00:44:23.720 --> 00:44:26.760
out of different people's hands.


00:44:26.760 --> 00:44:28.800
It's not who is the most


00:44:28.800 --> 00:44:35.400
unmovable in the team or loudest in the team or whatever.


00:44:35.400 --> 00:44:36.760
Look, we're just going to agree


00:44:36.760 --> 00:44:39.240
the community said black is close enough.


00:44:39.240 --> 00:44:42.920
Maybe no one's gonna be 100% happy with how things format,


00:44:42.920 --> 00:44:45.280
but it's just gonna happen automatically.


00:44:45.280 --> 00:44:47.880
And we're not gonna worry about code formatting anymore.


00:44:47.880 --> 00:44:48.720
and it's good to go.


00:44:48.720 --> 00:44:50.640
And I think that's fantastic.


00:44:50.640 --> 00:44:53.000
- I will change the name, you know, the description,


00:44:53.000 --> 00:44:55.800
the uncompromising code for matter by, you know,


00:44:55.800 --> 00:44:59.120
the frictionless, frictionless code for matter.


00:44:59.120 --> 00:45:01.600
I mean, this is just beautiful.


00:45:01.600 --> 00:45:03.600
- Yeah, and you have people using different tools.


00:45:03.600 --> 00:45:06.120
Some people using PyCharm, some people using VS Code,


00:45:06.120 --> 00:45:07.760
some people using an Emacs or whatever.


00:45:07.760 --> 00:45:09.880
And if you say, clean up this code,


00:45:09.880 --> 00:45:11.880
what that means to those different systems,


00:45:11.880 --> 00:45:14.000
especially because you can customize


00:45:14.000 --> 00:45:16.560
every little detail, right?


00:45:16.560 --> 00:45:19.340
like I want a space here, but not a space there.


00:45:19.340 --> 00:45:21.880
Those all become merge, not necessarily conflicts,


00:45:21.880 --> 00:45:24.240
but changes just because somebody cleaned up the code,


00:45:24.240 --> 00:45:26.280
but there's not a meaningful change on that line.


00:45:26.280 --> 00:45:29.360
So doing something like black in a pre-commit hook


00:45:29.360 --> 00:45:33.240
means you're not gonna get those little weird changes


00:45:33.240 --> 00:45:34.640
just because the tooling decided


00:45:34.640 --> 00:45:36.640
to have a different opinion.


00:45:36.640 --> 00:45:38.320
- Change the form of that, yeah.


00:45:38.320 --> 00:45:41.120
- Yeah, Douglas out in the audience says,


00:45:41.120 --> 00:45:43.080
"Thumbs up to black, right on."


00:45:43.080 --> 00:45:44.920
- Yeah, exactly.


00:45:44.920 --> 00:45:46.200
- Yeah, you're starting to see it be brought


00:45:46.200 --> 00:45:47.160
to other things as well.


00:45:47.160 --> 00:45:50.760
Like it just got integrated into Jupyter Notebooks,


00:45:50.760 --> 00:45:51.960
I believe.


00:45:51.960 --> 00:45:53.600
- Oh yes, yes.


00:45:53.600 --> 00:45:55.720
- Or no, I have, I always get this wrong.


00:45:55.720 --> 00:45:58.880
It now has support to point it at a Jupyter Notebook


00:45:58.880 --> 00:45:59.800
and have it format that.


00:45:59.800 --> 00:46:00.680
So very cool.


00:46:00.680 --> 00:46:03.040
- Okay, that's the way how it work, okay.


00:46:03.040 --> 00:46:06.280
- I'm pretty sure I may have reversed it twice in my mind,


00:46:06.280 --> 00:46:08.840
but I think that that's how the PR suggested


00:46:08.840 --> 00:46:10.000
that it's gonna work.


00:46:10.000 --> 00:46:12.600
Okay, so episode 333, this was a fun one.


00:46:12.600 --> 00:46:16.960
a group of Jarek, Kaxel and Leah


00:46:16.960 --> 00:46:19.000
talking about Apache Airflow,


00:46:19.000 --> 00:46:20.560
which is another one of these


00:46:20.560 --> 00:46:22.960
workflow pipeline things in Python.


00:46:22.960 --> 00:46:27.000
Yeah, so I think I actually,


00:46:27.000 --> 00:46:29.280
did I actually get a chance to ask them a question this one?


00:46:29.280 --> 00:46:30.200
I might have run out of time.


00:46:30.200 --> 00:46:31.920
- No, you know, that's the reason why, you know,


00:46:31.920 --> 00:46:33.240
sometimes I used to, you know,


00:46:33.240 --> 00:46:34.800
when I'm managed to get it,


00:46:34.800 --> 00:46:37.400
because you know, my time zone with you guys,


00:46:37.400 --> 00:46:38.600
when I'm there, you know,


00:46:38.600 --> 00:46:39.840
and you're getting to the end,


00:46:39.840 --> 00:46:42.860
I usually try to get that small comment


00:46:42.860 --> 00:46:47.520
on the chat of YouTube, just to remind people,


00:46:47.520 --> 00:46:49.480
don't miss the equation, it's quite important.


00:46:49.480 --> 00:46:51.200
It was missed here, but anyway,


00:46:51.200 --> 00:46:55.880
amazing library again for data pipelines.


00:46:55.880 --> 00:46:58.000
- Yeah, Apache Webflow looks really nice.


00:46:58.000 --> 00:47:02.800
- You can do your scheduling and monitor.


00:47:02.800 --> 00:47:06.680
- I think it's pretty similar to how we described Luigi.


00:47:06.680 --> 00:47:07.520
I think there's a lot of similarities.


00:47:07.520 --> 00:47:11.460
- But a bit more, a more, you know, data focus, you know,


00:47:11.460 --> 00:47:15.760
quite use a lot on the data science war, yes.


00:47:15.760 --> 00:47:17.160
- Yeah, absolutely.


00:47:17.160 --> 00:47:19.160
It has all these integrations, which is nice, right?


00:47:19.160 --> 00:47:22.920
Like if you wanna plug into other data sources,


00:47:22.920 --> 00:47:24.920
you don't have to necessarily program against them,


00:47:24.920 --> 00:47:27.360
you just grab one of those integrations and run.


00:47:27.360 --> 00:47:29.960
All right, episode 329,


00:47:29.960 --> 00:47:32.180
I had my friend Richard Campbell back on there.


00:47:32.180 --> 00:47:33.760
We talked about renewable energy.


00:47:33.760 --> 00:47:36.480
He's always fun to dive into the geek out episodes,


00:47:36.480 --> 00:47:38.720
but given the topic we were covering,


00:47:38.720 --> 00:47:40.160
it didn't really make sense to have a question


00:47:40.160 --> 00:47:41.000
and we were out of time.


00:47:41.000 --> 00:47:42.800
- Exactly, exactly.


00:47:42.800 --> 00:47:44.440
- Thanks Richard, but no question,


00:47:44.440 --> 00:47:46.720
maybe I'll get one from you next time


00:47:46.720 --> 00:47:47.920
we do something like that.


00:47:47.920 --> 00:47:52.060
Episode 328, Piccolo,


00:47:52.060 --> 00:47:58.200
another ORM and also one of the async ones, which is fun.


00:47:58.200 --> 00:48:00.480
But the package, this is Daniel Townsend,


00:48:00.480 --> 00:48:03.320
the package was not Piccolo, that was the topic.


00:48:03.320 --> 00:48:04.880
The package is Pydantic.


00:48:05.760 --> 00:48:07.760
- Identic, okay, amazing.


00:48:07.760 --> 00:48:10.640
This is one of the, one of the,


00:48:10.640 --> 00:48:14.440
these really good packages, you know, out there.


00:48:14.440 --> 00:48:19.760
Data validation, that's it.


00:48:19.760 --> 00:48:22.040
- Yeah, I think it really is.


00:48:22.040 --> 00:48:23.760
I don't know if it doesn't get enough love or not,


00:48:23.760 --> 00:48:26.000
but it deserves a lot of love, let's say that.


00:48:26.000 --> 00:48:31.000
So it's, it does really beautiful importing


00:48:31.000 --> 00:48:32.520
and transformation of data.


00:48:32.520 --> 00:48:34.520
So if you're receiving data from a file,


00:48:34.520 --> 00:48:39.020
Or if maybe you're receiving it from an API


00:48:39.020 --> 00:48:42.060
and the data is not super cleaned up,


00:48:42.060 --> 00:48:44.780
this thing will do its best to,


00:48:44.780 --> 00:48:47.140
one, either automatically clean it up


00:48:47.140 --> 00:48:51.900
or two, it will tell you precisely what's wrong with it.


00:48:51.900 --> 00:48:55.840
So like, suppose you're getting a JSON document back


00:48:55.840 --> 00:48:57.900
and it has a list of things


00:48:57.900 --> 00:49:00.420
and the third thing in the list


00:49:00.420 --> 00:49:03.020
is not parsable as a date time


00:49:03.020 --> 00:49:04.420
or something crazy like that.


00:49:04.420 --> 00:49:06.860
it'll tell you the third thing in the list


00:49:06.860 --> 00:49:08.700
couldn't be converted to a date time


00:49:08.700 --> 00:49:11.260
rather than exception in valid format, right?


00:49:11.260 --> 00:49:12.400
It's beautiful, right?


00:49:12.400 --> 00:49:15.100
So that's one of the things that's lovely.


00:49:15.100 --> 00:49:17.700
The other thing is it uses type annotations


00:49:17.700 --> 00:49:20.180
in really meaningful ways.


00:49:20.180 --> 00:49:23.580
So if you have a, like the example on the website says,


00:49:23.580 --> 00:49:26.080
here's a user with an ID colon int.


00:49:26.080 --> 00:49:28.740
That means there's no specified default


00:49:28.740 --> 00:49:31.660
and the data provided must provide an int


00:49:31.660 --> 00:49:33.100
because it's not an optional int,


00:49:33.100 --> 00:49:34.660
It must provide an ID.


00:49:34.660 --> 00:49:36.700
There's a name, which is equal to John Doe.


00:49:36.700 --> 00:49:38.140
So you don't have to provide one.


00:49:38.140 --> 00:49:38.980
There's a default.


00:49:38.980 --> 00:49:42.120
And because the default's a string, name is a string.


00:49:42.120 --> 00:49:44.860
But there's a signup that may or may not have a value.


00:49:44.860 --> 00:49:46.260
So it's an optional date time.


00:49:46.260 --> 00:49:48.880
And all of those things factor into the transformation


00:49:48.880 --> 00:49:50.640
and the parsing and whatnot, right?


00:49:50.640 --> 00:49:54.820
Yeah.


00:49:54.820 --> 00:49:55.660
Super nice.


00:49:55.660 --> 00:49:57.900
And the other thing is it works with FastAPI


00:49:57.900 --> 00:49:59.280
to define the open,


00:49:59.280 --> 00:50:01.420
the open,


00:50:01.420 --> 00:50:05.060
API, the swagger stuff.


00:50:05.060 --> 00:50:07.100
So for example, let me see if I can find.


00:50:07.100 --> 00:50:14.060
Created a FastAPI over at weather.talkpython.fm


00:50:14.060 --> 00:50:16.940
because I had been using some other weather API


00:50:16.940 --> 00:50:20.300
for a course and of course they changed.


00:50:20.300 --> 00:50:22.500
They used to be free and now they're not free.


00:50:22.500 --> 00:50:26.660
And so I'm like, well, if I got to rewrite this course,


00:50:26.660 --> 00:50:30.020
I'm not gonna depend on somebody else's API again.


00:50:30.020 --> 00:50:31.460
So it'll answer questions like,


00:50:31.460 --> 00:50:33.260
what is the weather or whatever, right?


00:50:33.260 --> 00:50:36.440
But you can also go to, I say docs,


00:50:36.440 --> 00:50:39.540
just go to slash docs and you get like,


00:50:39.540 --> 00:50:41.780
oh, here's all the data that'll be exchanged.


00:50:41.780 --> 00:50:44.940
And here's, it's gonna return some forecast,


00:50:44.940 --> 00:50:46.620
which has a wind, which has a speed,


00:50:46.620 --> 00:50:48.600
which is a number and an integer.


00:50:48.600 --> 00:50:51.740
And all of this is automatic from Pydantic


00:50:51.740 --> 00:50:53.220
being plugged into FastAPI.


00:50:53.220 --> 00:50:54.340
It's beautiful.


00:50:54.340 --> 00:50:55.180
- It's just amazing.


00:50:55.180 --> 00:50:56.580
You know, I mean, that's the thing, you know,


00:50:56.580 --> 00:50:59.340
That's how you glue these libraries,


00:50:59.340 --> 00:51:02.380
these packages together, you know, what makes the magic.


00:51:02.380 --> 00:51:04.060
Some of them are really beautiful by itself,


00:51:04.060 --> 00:51:05.900
you know, when you just start using all together


00:51:05.900 --> 00:51:07.380
and then you put on top, whatever,


00:51:07.380 --> 00:51:09.740
rich if you want to have a beautiful output


00:51:09.740 --> 00:51:10.940
on the CLI or whatever.


00:51:10.940 --> 00:51:11.780
So that's...


00:51:11.780 --> 00:51:14.420
- Absolutely.


00:51:14.420 --> 00:51:16.340
Frolian out in the audience says,


00:51:16.340 --> 00:51:17.900
"Pydantic, it's one of those packages


00:51:17.900 --> 00:51:20.260
"that makes my work successful without Flare."


00:51:20.260 --> 00:51:21.500
Yeah, just... - Exactly.


00:51:21.500 --> 00:51:22.340
- Just makes it easy.


00:51:22.340 --> 00:51:24.220
We're just gonna do that. - All right.


00:51:24.220 --> 00:51:25.420
- All right.


00:51:25.420 --> 00:51:26.500
Let's see.


00:51:26.500 --> 00:51:27.340
How we doing Tom?


00:51:27.340 --> 00:51:29.040
We got time for a couple more there.


00:51:29.040 --> 00:51:31.260
- A couple of more, we weren't able to finish all,


00:51:31.260 --> 00:51:33.260
but you know, you guys are getting, you know,


00:51:33.260 --> 00:51:35.460
what's the, what we're trying to do here.


00:51:35.460 --> 00:51:37.060
- So we're on July now.


00:51:37.060 --> 00:51:39.220
I think I'm gonna predict we can make it to May


00:51:39.220 --> 00:51:40.200
and then we're gonna run out of time.


00:51:40.200 --> 00:51:42.580
But this episode was really cool.


00:51:42.580 --> 00:51:46.020
I thought also episode 327, little automation tools,


00:51:46.020 --> 00:51:48.380
because I think it speaks to so many people


00:51:48.380 --> 00:51:52.540
who are not necessarily, oh, I'm like chief senior


00:51:52.540 --> 00:51:54.660
software architect at Instagram or whatever.


00:51:54.660 --> 00:51:56.740
Like everyone can use these.


00:51:56.740 --> 00:51:59.660
We had Rivers Cuomo from Weezer.


00:51:59.660 --> 00:52:02.060
We had Jay Miller, we had Kim Van Wick


00:52:02.060 --> 00:52:04.940
and Rusty Gregory on in the panelists here.


00:52:04.940 --> 00:52:06.780
And that was super fun.


00:52:06.780 --> 00:52:08.620
- Amazing.


00:52:08.620 --> 00:52:12.180
So they introduce PipX.


00:52:12.180 --> 00:52:13.420
Have you tried?


00:52:13.420 --> 00:52:14.500
- I didn't try.


00:52:14.500 --> 00:52:15.780
- I use PipX all the time.


00:52:15.780 --> 00:52:16.940
I love PipX.


00:52:16.940 --> 00:52:17.780
- Oh, nice. - So good.


00:52:17.780 --> 00:52:18.620
- Okay.


00:52:18.620 --> 00:52:20.260
I use a version of ManaMan, but you know,


00:52:20.260 --> 00:52:22.140
it's so simple, you know?


00:52:22.140 --> 00:52:27.000
they have this small GIF on their GitHub repository.


00:52:27.000 --> 00:52:32.900
Go install it and then just do everything against the PIPX.


00:52:32.900 --> 00:52:39.820
- Yeah, so I heard about PIPX when it first came out


00:52:39.820 --> 00:52:43.900
and that was, I'm trying to remember,


00:52:43.900 --> 00:52:46.080
Chad Smith, I believe, was telling me about it.


00:52:46.080 --> 00:52:49.860
And it was just an individual project


00:52:49.860 --> 00:52:51.660
and now it's part of PyPA,


00:52:51.660 --> 00:52:53.260
which is the Python packaging authority.


00:52:53.260 --> 00:52:55.820
So it's become sort of official.


00:52:55.820 --> 00:53:00.060
And people use Homebrew for macOS,


00:53:00.060 --> 00:53:03.900
they use App for Ubuntu and Chocolaty for Windows.


00:53:03.900 --> 00:53:05.740
And that installs all sorts of tools.


00:53:05.740 --> 00:53:06.780
But if you want something like,


00:53:06.780 --> 00:53:09.740
I need to install a tool that I can run,


00:53:09.740 --> 00:53:12.540
and it just happens to be based on Python,


00:53:12.540 --> 00:53:14.820
well then PipX is that equivalent, right?


00:53:14.820 --> 00:53:18.940
Because there's a lot of programs and tools out there


00:53:18.940 --> 00:53:21.460
that are awesome that you want from Python


00:53:21.460 --> 00:53:24.300
For example, like Black, I want to run Black against a thing,


00:53:24.300 --> 00:53:26.220
but my program doesn't depend on it.


00:53:26.220 --> 00:53:30.340
So it doesn't necessarily need to be installed in that virtual environment,


00:53:30.340 --> 00:53:32.500
but instead, I just need it on my system.


00:53:32.500 --> 00:53:36.100
Exactly. So go install it and run that application


00:53:36.100 --> 00:53:38.740
in your isolated environment. Just beautiful.


00:53:38.740 --> 00:53:39.740
- Super smart. - Yeah.


00:53:39.740 --> 00:53:41.820
Wayland says, "I use PipX for so many things.


00:53:41.820 --> 00:53:45.340
Instable Playbooks, Kedro, install many personal repos."


00:53:45.340 --> 00:53:47.780
One that I use it for is Glances.


00:53:48.940 --> 00:53:51.340
I'll show you some stuff that calls to be used for


00:53:51.340 --> 00:53:52.500
that's not as interesting.


00:53:52.500 --> 00:53:55.800
So this is a fantastic, fantastic tool.


00:53:55.800 --> 00:53:58.880
Like you get, if you ever use top to figure out


00:53:58.880 --> 00:54:01.080
what's going on in your server,


00:54:01.080 --> 00:54:04.960
the way you spell top is G-L-A-N-C-E-S,


00:54:04.960 --> 00:54:06.220
glances, that's what you should type.


00:54:06.220 --> 00:54:08.980
It is so much better, but it's a Python library.


00:54:08.980 --> 00:54:12.440
So pip x install glances, and it gets its own environment


00:54:12.440 --> 00:54:15.720
with its own dependencies in there, and it doesn't mess up.


00:54:15.720 --> 00:54:18.620
Also, there's recently TipTop,


00:54:18.620 --> 00:54:21.720
I believe is also based on Rich.


00:54:21.720 --> 00:54:24.280
But if you check this one out,


00:54:24.280 --> 00:54:28.240
this one also looks like a really interesting one


00:54:28.240 --> 00:54:29.880
where it's like Glances,


00:54:29.880 --> 00:54:33.600
it gives you a terminal UI about your server,


00:54:33.600 --> 00:54:35.920
but this one has running graphs.


00:54:35.920 --> 00:54:39.640
So running graphs of the CPU across the cores, by the way,


00:54:39.640 --> 00:54:40.920
like if you've got a four core,


00:54:40.920 --> 00:54:43.200
eight hyperthreaded core machine,


00:54:43.200 --> 00:54:44.960
it'll give you eight graphs.


00:54:44.960 --> 00:54:46.960
And then like graphs of memory, network graphs,


00:54:46.960 --> 00:54:48.200
plus your process stuff.


00:54:48.200 --> 00:54:51.520
So like all of these things are perfect candidates


00:54:51.520 --> 00:54:54.080
for installing with PipX.


00:54:54.080 --> 00:54:54.920
- Excellent.


00:54:54.920 --> 00:54:55.740
- Another one,


00:54:55.740 --> 00:54:57.920
Pie joke.


00:54:57.920 --> 00:55:01.680
So if you just need some jokes,


00:55:01.680 --> 00:55:04.000
you can just PipX install Pie jokes


00:55:04.000 --> 00:55:06.080
and then just type pie joke anytime you want


00:55:06.080 --> 00:55:09.520
and you get something great to come out.


00:55:09.520 --> 00:55:10.920
- Yeah, I've tried that.


00:55:10.920 --> 00:55:12.840
- Yeah, that's a good one.


00:55:12.840 --> 00:55:14.320
Anyway, PipX is a very good one.


00:55:14.320 --> 00:55:16.320
All right, so that was, I don't remember who on there


00:55:16.320 --> 00:55:18.960
recommended that one, but that was a really good one.


00:55:18.960 --> 00:55:22.000
All right, let's see.


00:55:22.000 --> 00:55:25.120
We had Mike Driscoll on to talk about


00:55:25.120 --> 00:55:28.040
building desktop apps with DevEx Python.


00:55:28.040 --> 00:55:29.800
And of course he does a lot of stuff


00:55:29.800 --> 00:55:36.160
integrating with things like Excel and with PDFs and stuff.


00:55:36.160 --> 00:55:40.000
So what was the one he recommended?


00:55:40.000 --> 00:55:44.000
- So open a BY Excel.


00:55:44.000 --> 00:55:48.060
So you need to work with Excel, pretty nice API.


00:55:48.060 --> 00:55:54.140
I usually do it straight away with Pandas.


00:55:54.140 --> 00:55:56.540
I make it even simpler.


00:55:56.540 --> 00:56:02.140
- I think Pandas internally might use OpenPyXL as well.


00:56:02.140 --> 00:56:03.220
- Exactly.


00:56:03.220 --> 00:56:06.300
I haven't, I didn't check, but most probably.


00:56:06.300 --> 00:56:07.140
Okay.


00:56:07.140 --> 00:56:09.460
So go and read and write Excel.


00:56:09.460 --> 00:56:11.260
You go and select your ranges.


00:56:11.260 --> 00:56:16.260
what is your book inside, your spreadsheets,


00:56:16.260 --> 00:56:19.460
and super neat.


00:56:19.460 --> 00:56:22.380
At the end, go read it, put it in a table,


00:56:22.380 --> 00:56:24.300
do your loops, do your calculations,


00:56:24.300 --> 00:56:28.340
and then process your data.


00:56:28.340 --> 00:56:30.640
- Yeah, yeah, absolutely.


00:56:30.640 --> 00:56:33.140
And I think you could even do like formulas


00:56:33.140 --> 00:56:36.180
and formatting and other stuff through here.


00:56:36.180 --> 00:56:37.380
So with like-- - Yeah, you have full


00:56:37.380 --> 00:56:38.300
control of Excel.


00:56:38.300 --> 00:56:39.940
- Yeah, with like pandas,


00:56:39.940 --> 00:56:42.860
you can put data out pretty easy and stuff.


00:56:42.860 --> 00:56:45.820
But if you wanna say like, I want this one bold,


00:56:45.820 --> 00:56:49.500
stuff like that, I think this is more the level


00:56:49.500 --> 00:56:50.720
you gotta work at, which is cool.


00:56:50.720 --> 00:56:54.300
All right, MicroPython and StrictPython.


00:56:54.300 --> 00:56:58.040
I don't know if this is a joint episode or a battle.


00:56:58.040 --> 00:57:00.000
Actually, it turned out to be kind of a joint episode.


00:57:00.000 --> 00:57:04.760
I talked to Scott and Damian,


00:57:04.760 --> 00:57:07.760
specifically because they had done a ton of work


00:57:07.760 --> 00:57:10.680
where CircuitPython and MicroPython


00:57:10.680 --> 00:57:12.560
had merged a lot of the differences


00:57:12.560 --> 00:57:13.760
that they'd been working on together


00:57:13.760 --> 00:57:16.520
back into like a more uniform code base.


00:57:16.520 --> 00:57:20.960
So they talked about HTTPpy,


00:57:20.960 --> 00:57:22.700
I'm gonna guess on that name there.


00:57:22.700 --> 00:57:23.840
- Yeah, exactly.


00:57:23.840 --> 00:57:25.320
So what they were, - What is this one?


00:57:25.320 --> 00:57:29.000
- Yeah, so that one is the Python base


00:57:29.000 --> 00:57:33.120
for easy requests, okay?


00:57:33.120 --> 00:57:37.660
You know, day to day I spend 99% of my time on Windows.


00:57:37.660 --> 00:57:39.780
Sometimes, I don't know,


00:57:39.780 --> 00:57:41.780
due to my enterprise policies,


00:57:41.780 --> 00:57:45.380
I can do a C-core.


00:57:45.380 --> 00:57:49.460
This is an easy way how to achieve that.


00:57:49.460 --> 00:57:52.700
If you need to do a wget command and you're on Windows,


00:57:52.700 --> 00:57:54.420
for example, that's the way.


00:57:54.420 --> 00:57:56.180
Super simple.


00:57:56.180 --> 00:57:58.980
>> Yeah, that's cool. It's based on Python.


00:57:58.980 --> 00:58:01.660
One of the things I think is neat about it is it


00:58:01.660 --> 00:58:04.140
has a specification file.


00:58:04.140 --> 00:58:08.500
So instead of like putting, you know, dash D,


00:58:08.500 --> 00:58:11.100
here's a key value thing I wanna pass dash D,


00:58:11.100 --> 00:58:13.980
here's another, and here's the URL and so on.


00:58:13.980 --> 00:58:16.940
You just create one of these configuration files


00:58:16.940 --> 00:58:18.300
and then you say, make the request


00:58:18.300 --> 00:58:21.040
that's stored in that file and off it goes, right?


00:58:21.040 --> 00:58:22.780
- Exactly.


00:58:22.780 --> 00:58:23.600
- That's neat.


00:58:23.600 --> 00:58:25.460
Yeah, that's really neat.


00:58:25.460 --> 00:58:27.760
While we're on that, another one that I like,


00:58:27.760 --> 00:58:32.820
not sure I could phonetically distinguish it.


00:58:32.820 --> 00:58:33.660
- Okay.


00:58:33.660 --> 00:58:38.660
is HTTP IE pronounced, I believe, HTTP, HTTPI as well.


00:58:38.660 --> 00:58:42.300
This one is super neat as well.


00:58:42.300 --> 00:58:44.900
And one of the things that I really liked about it,


00:58:44.900 --> 00:58:48.060
is this the same thing?


00:58:48.060 --> 00:58:49.980
I think so.


00:58:49.980 --> 00:58:51.300
Let's go to GitHub.


00:58:51.300 --> 00:58:56.580
But certainly the Python project, I'll go like this.


00:58:56.580 --> 00:58:58.620
Over here.


00:58:58.620 --> 00:59:02.900
This is also kind of like a curl,


00:59:02.900 --> 00:59:05.220
But what's really cool about it is when you make requests,


00:59:05.220 --> 00:59:08.660
you just type HTTP or HTTPS and you give it a URL


00:59:08.660 --> 00:59:11.820
and it'll print out like the headers


00:59:11.820 --> 00:59:13.580
and the cookies that it got back,


00:59:13.580 --> 00:59:15.660
colorized in your terminal.


00:59:15.660 --> 00:59:18.740
It'll do a pretty printing a JSON and code formatting,


00:59:18.740 --> 00:59:23.500
even like code highlighting your HTML that might come back.


00:59:23.500 --> 00:59:25.780
So, yeah, it's so good.


00:59:25.780 --> 00:59:30.780
If you think curl or W get, like put it down, go to HCPI.


00:59:31.500 --> 00:59:36.500
And the one I'm recommending is HTTPIE, not HTTPY,


00:59:36.500 --> 00:59:40.100
which is also good.


00:59:40.100 --> 00:59:42.740
And it has it, I really love this sort of


00:59:42.740 --> 00:59:44.040
configuration file as well.


00:59:44.040 --> 00:59:46.100
So I see super value in both of them.


00:59:46.100 --> 00:59:48.900
But yeah, neat.


00:59:48.900 --> 00:59:51.980
Very good recommendation.


00:59:51.980 --> 00:59:52.820
Let's see.


00:59:52.820 --> 00:59:57.180
Gatorade powered Python APIs.


00:59:57.180 --> 00:59:58.020
- APIs.


00:59:58.020 --> 00:59:58.860
- Yeah.


00:59:58.860 --> 00:59:59.700
- Oh, that was in, yeah.


00:59:59.700 --> 01:00:03.240
- This is such an interesting one because Rob Senra,


01:00:03.240 --> 01:00:07.860
they worked on this project called the GX Switch Patch


01:00:07.860 --> 01:00:11.400
from Gatorade, which is like a thing you put on your arm


01:00:11.400 --> 01:00:13.900
and then you work out and then you analyze it with Python.


01:00:13.900 --> 01:00:14.820
It's incredible.


01:00:14.820 --> 01:00:16.580
- Really nice.


01:00:16.580 --> 01:00:17.780
- Yeah. - Really nice.


01:00:17.780 --> 01:00:21.580
- So coming back around, he suggested Rich.


01:00:21.580 --> 01:00:23.260
- Rich, here you go.


01:00:23.260 --> 01:00:26.140
So one of the, you know, I think probably favorites


01:00:26.140 --> 01:00:28.020
of 2021, you know?


01:00:28.020 --> 01:00:31.180
- Yeah, I would say too. - You have mentioned


01:00:31.180 --> 01:00:33.060
really amazing library.


01:00:33.060 --> 01:00:35.260
You know, I really love just to go, you know,


01:00:35.260 --> 01:00:38.520
from rich import prints and that's it, you know.


01:00:38.520 --> 01:00:42.140
You get straight away a different feel and look


01:00:42.140 --> 01:00:45.120
on working with your CLI, so.


01:00:45.120 --> 01:00:46.440
- Yeah, absolutely.


01:00:46.440 --> 01:00:50.180
All right, let's see.


01:00:50.180 --> 01:00:52.620
Let's say, I'm gonna say we have time for one.


01:00:52.620 --> 01:00:53.900
- Yes, exactly. - One more.


01:00:53.900 --> 01:00:56.220
It's probably time to wrap it up,


01:00:56.220 --> 01:00:57.460
- Yeah, I'm gonna go back to the book.


01:00:57.460 --> 01:00:58.300
So how far are we?


01:00:58.300 --> 01:01:00.580
We made it to the middle of June, 2021.


01:01:00.580 --> 01:01:01.420
All right.


01:01:01.420 --> 01:01:02.240
- Not bad, not bad.


01:01:02.240 --> 01:01:03.080
- Yeah, not bad.


01:01:03.080 --> 01:01:05.100
This is Itamar Turner-Trauring.


01:01:05.100 --> 01:01:08.820
I had him on to talk about best practices


01:01:08.820 --> 01:01:10.580
for Docker in production,


01:01:10.580 --> 01:01:13.300
kind of in quotes for Python developers.


01:01:13.300 --> 01:01:14.220
And that was fun.


01:01:14.220 --> 01:01:15.740
And he talked about a lot of things,


01:01:15.740 --> 01:01:18.820
but his package was Py03.


01:01:18.820 --> 01:01:20.580
Tell us about Py03.


01:01:20.580 --> 01:01:22.140
No, Py03 is missing.


01:01:22.140 --> 01:01:22.980
I'm gonna have to search for it.


01:01:22.980 --> 01:01:24.180
- Oh, billing is broken?


01:01:24.180 --> 01:01:25.020
Wait.


01:01:25.020 --> 01:01:25.840
- Hold on.


01:01:25.840 --> 01:01:27.540
All right, there we go.


01:01:27.540 --> 01:01:32.160
Rust bindings for the Python interpreter.


01:01:32.160 --> 01:01:34.320
What do we got going on here?


01:01:34.320 --> 01:01:37.560
- So, I mean, for this one,


01:01:37.560 --> 01:01:43.340
if using Python from Rust, you know,


01:01:43.340 --> 01:01:46.500
I remember one time I was looking at some source code


01:01:46.500 --> 01:01:51.500
where they were in C-char embedding assembly


01:01:51.500 --> 01:01:54.460
or embedding another programming language


01:01:54.460 --> 01:02:00.860
running that on site and doing the whole thing. Similar, I didn't know. I think at this moment


01:02:00.860 --> 01:02:09.500
it's obvious, right? But I didn't realize that you can do this, the Rust binding for Python.


01:02:09.500 --> 01:02:18.300
So I don't know. I haven't used Rust, but I'm guessing they're supposed to be most probably


01:02:18.300 --> 01:02:23.020
one of these type of wrappers, you know, bindings for so many other languages.


01:02:23.020 --> 01:02:24.380
- Yeah. - I'm not aware of.


01:02:24.380 --> 01:02:29.020
- I haven't really used Rust either, but if I had to go back to a low-level language


01:02:29.020 --> 01:02:35.180
like C, I would prefer to not go back to C, which I used to do. I would rather go to something like


01:02:35.180 --> 01:02:44.300
Rust, like a modern C-level language, I guess, is probably the way. Yeah, so py03 will let you


01:02:45.420 --> 01:02:48.080
write a native Python module in Rust.


01:02:48.080 --> 01:02:51.020
So if you need to make a certain part of your Python code


01:02:51.020 --> 01:02:56.020
go really fast and be more native, I guess that's an option


01:02:56.020 --> 01:03:00.880
or in reverse, you can embed Python into a Rust binary.


01:03:00.880 --> 01:03:04.900
And I guess from there run Python code within your Rust app.


01:03:04.900 --> 01:03:09.140
- So for everyone out there, you know,


01:03:09.140 --> 01:03:10.700
once you listen to the podcast, you know,


01:03:10.700 --> 01:03:15.400
if you know about similar library for other, you know,


01:03:15.400 --> 01:03:19.720
to do bindings for other languages,


01:03:19.720 --> 01:03:21.520
just please share it, you know?


01:03:21.520 --> 01:03:23.480
I mean, it's so nice.


01:03:23.480 --> 01:03:27.640
I mean, it makes things so good.


01:03:27.640 --> 01:03:29.640
We need to start now probably just jumping


01:03:29.640 --> 01:03:32.880
and grabbing up because of the time I guess, right?


01:03:32.880 --> 01:03:33.720
- That's right.


01:03:33.720 --> 01:03:35.080
Oh, there's so many more good ones.


01:03:35.080 --> 01:03:38.400
We got Alpine, Numba, Rich again,


01:03:38.400 --> 01:03:42.120
FastAPI, Flask SQLAlchemy, and on and on and on, but-


01:03:42.120 --> 01:03:43.640
- And on and on, yeah, exactly.


01:03:43.640 --> 01:03:44.560
Wow. - Yeah.


01:03:44.560 --> 01:03:46.360
So guys, it's there.


01:03:46.360 --> 01:03:47.320
Just go and take a look.


01:03:47.320 --> 01:03:50.520
I promise now in December, I will take some leave.


01:03:50.520 --> 01:03:52.600
I will take two or three days to go back


01:03:52.600 --> 01:03:59.240
to the previous years and try to put everything out there.


01:03:59.240 --> 01:04:00.480
Please take a look at this one.


01:04:00.480 --> 01:04:01.920
Please contribute.


01:04:01.920 --> 01:04:04.120
If you see something wrong, go ahead.


01:04:04.120 --> 01:04:07.600
Super welcome to receive contributions there.


01:04:07.600 --> 01:04:08.720
>>Yeah, thank you.


01:04:08.720 --> 01:04:09.440
That's awesome.


01:04:09.440 --> 01:04:12.280
People can definitely add to the work that you put here.


01:04:12.280 --> 01:04:13.520
This is great.


01:04:13.520 --> 01:04:14.520
Thank you for doing that.


01:04:14.520 --> 01:04:15.360
That's really neat.


01:04:15.360 --> 01:04:17.360
Now, of course, before you get out of here,


01:04:17.360 --> 01:04:19.880
you've got to face the two questions, right?


01:04:19.880 --> 01:04:22.920
So if you're going to write some Python code these days,


01:04:22.920 --> 01:04:25.920
Antonio, what editor are you using?


01:04:25.920 --> 01:04:30.320
- Day-to-day is VS Code.


01:04:30.320 --> 01:04:34.400
However, you know, when I found super easy


01:04:34.400 --> 01:04:39.140
to use Google Collapse notebooks.


01:04:39.140 --> 01:04:40.860
So I'm kind of divided, right?


01:04:40.860 --> 01:04:41.800
So I don't need to, you know,


01:04:41.800 --> 01:04:46.240
sometimes just getting to use code to do something small


01:04:46.240 --> 01:04:49.680
and check and plot is not useful.


01:04:49.680 --> 01:04:51.960
Now, so I'm divided, right?


01:04:51.960 --> 01:04:54.760
So when I'm working with projects,


01:04:54.760 --> 01:04:58.640
small or large, straight away through this code,


01:04:58.640 --> 01:05:00.560
love the integration with GitHub,


01:05:00.560 --> 01:05:04.480
with containers, everything,


01:05:04.480 --> 01:05:08.640
everything in a single user interface.


01:05:08.640 --> 01:05:11.520
And when I have to do a small web scraping


01:05:11.520 --> 01:05:14.440
do a small data manipulation or whatever,


01:05:14.440 --> 01:05:18.880
I straightaway go to the Google Colab notebooks


01:05:18.880 --> 01:05:20.480
and do it right there.


01:05:20.480 --> 01:05:23.000
I have the link, I can share it with colleagues or friends


01:05:23.000 --> 01:05:26.160
and it makes my life quite easy.


01:05:26.160 --> 01:05:28.640
- All the online notebooks world, there's so many.


01:05:28.640 --> 01:05:30.920
- All of them, all of them, absolutely all of them.


01:05:30.920 --> 01:05:32.120
- So many.


01:05:32.120 --> 01:05:35.320
Are you familiar with the dot command on GitHub repos?


01:05:35.320 --> 01:05:37.000
- Oh yes, it's just amazing.


01:05:37.000 --> 01:05:38.320
- If you're on any GitHub repos


01:05:38.320 --> 01:05:40.600
and you just literally press dot,


01:05:40.600 --> 01:05:43.140
Is that still-- oh, you've got to be logged in to do that.


01:05:43.140 --> 01:05:44.980
>> Yeah, you need to be logged in to do that.


01:05:44.980 --> 01:05:46.700
>> But anyway, you know, it's the same as this user code.dev,


01:05:46.700 --> 01:05:47.260
basically.


01:05:47.260 --> 01:05:48.500
>> Exactly, exactly.


01:05:48.500 --> 01:05:50.220
You know, if they manage to do this--


01:05:50.220 --> 01:05:51.820
>> Oh, not code.dev, dscode.dev.


01:05:51.820 --> 01:05:52.740
>> --dscode, yeah.


01:05:52.740 --> 01:05:55.600
So if they manage to do this, I'm


01:05:55.600 --> 01:05:58.340
sure there will be this small enhancement


01:05:58.340 --> 01:06:00.020
for the pronunciation of the packages


01:06:00.020 --> 01:06:01.940
won't be a big deal on GitHub, I guess.


01:06:01.940 --> 01:06:02.620
So--


01:06:02.620 --> 01:06:03.660
>> Yeah, yeah, pretty cool.


01:06:03.660 --> 01:06:05.040
>> --but this one is just amazing.


01:06:05.040 --> 01:06:07.100
Press dots and open your VS Code,


01:06:07.100 --> 01:06:09.460
right there with all your settings.


01:06:09.460 --> 01:06:14.740
Absolutely. I try to not be logged into the browser I'm sharing on the stream.


01:06:14.740 --> 01:06:21.300
I don't want to influence whatever shows up. All right. And then notable PyPI package. Let's put


01:06:21.300 --> 01:06:25.780
something on to your repo from you about the repo. That'd be very meta.


01:06:25.780 --> 01:06:31.940
It's just good. So recently I was, you know, my daughter, she wants to be YouTuber when she


01:06:31.940 --> 01:06:36.020
She grew up, she's still too young.


01:06:36.020 --> 01:06:40.100
But anyway, I wanted to help her and do some automation


01:06:40.100 --> 01:06:46.220
of from creating the videos all the way to posting this


01:06:46.220 --> 01:06:48.660
to YouTube.


01:06:48.660 --> 01:06:53.500
And it takes time for editing and everything,


01:06:53.500 --> 01:06:55.580
so I wanted to get some help.


01:06:55.580 --> 01:06:58.620
So I was trying to see if there was any way using NLP


01:06:58.620 --> 01:07:02.420
to get a summary of any big web page?


01:07:02.420 --> 01:07:02.940
I don't know.


01:07:02.940 --> 01:07:04.820
You want to do a small video.


01:07:04.820 --> 01:07:06.260
You want to do small research.


01:07:06.260 --> 01:07:07.300
That's it.


01:07:07.300 --> 01:07:09.540
Or you want to digest some news.


01:07:09.540 --> 01:07:16.580
So you install this library called Sumi, S-U-M-I.


01:07:16.580 --> 01:07:20.420
You basically put the URL of the web page or the PDF.


01:07:20.420 --> 01:07:24.580
You want to summarize how many paragraphs, how many lines,


01:07:24.580 --> 01:07:26.380
you want to get out of this.


01:07:26.380 --> 01:07:31.380
And 95, 98% of the job is amazing.


01:07:31.380 --> 01:07:37.220
I would say 100% of the time is really good.


01:07:37.220 --> 01:07:40.220
- Simple library and command line utility


01:07:40.220 --> 01:07:44.260
for extracting summary from HTML pages and plain text.


01:07:44.260 --> 01:07:45.680
So interesting. - So for example, right?


01:07:45.680 --> 01:07:48.900
So you go to your transcript of the podcast


01:07:48.900 --> 01:07:53.780
and you say, okay, give me the most relevant 50 lines


01:07:53.780 --> 01:07:55.500
out of the transcript of, you know,


01:07:55.500 --> 01:07:57.660
Talk back to me, podcast.


01:07:57.660 --> 01:07:59.020
And that's it.


01:07:59.020 --> 01:08:05.300
You can print it out and get in a quick way


01:08:05.300 --> 01:08:09.060
and extract some useful information.


01:08:09.060 --> 01:08:11.380
And the next one is related to the same.


01:08:11.380 --> 01:08:20.180
So I think this is not using the official way.


01:08:20.180 --> 01:08:23.340
I hope they don't get penalized for me.


01:08:23.340 --> 01:08:28.340
So it's called GTTS, Google Text-to-Speech.


01:08:28.340 --> 01:08:31.140
- Okay, Google Text-to-Speech, okay.


01:08:31.140 --> 01:08:34.340
- So this one is, again,


01:08:34.340 --> 01:08:35.700
Python libraries that interface


01:08:35.700 --> 01:08:38.940
with the Google Translate API,


01:08:38.940 --> 01:08:42.140
and then you get the mp3.


01:08:42.140 --> 01:08:44.860
So something I was using these two,


01:08:44.860 --> 01:08:46.300
gluing these two together, right?


01:08:46.300 --> 01:08:49.820
So go get the summary, okay?


01:08:49.820 --> 01:08:51.140
Obviously, you know,


01:08:51.140 --> 01:08:53.340
Somebody will help you to get the context.


01:08:53.340 --> 01:08:57.020
You would like to do the proper referencing and citation


01:08:57.020 --> 01:08:58.300
and everything.


01:08:58.300 --> 01:09:01.500
And then for each paragraph, you can get the MP3


01:09:01.500 --> 01:09:04.620
and put this on top of the video.


01:09:04.620 --> 01:09:08.860
And then go back and having tools


01:09:08.860 --> 01:09:12.580
like with these workflows tools, like Luigi,


01:09:12.580 --> 01:09:15.820
go and kick everything and then upload it


01:09:15.820 --> 01:09:18.460
to YouTube in one go, fully automated.


01:09:18.460 --> 01:09:19.860
It's just beautiful.


01:09:19.860 --> 01:09:22.460
you know how everything is, it can be done,


01:09:22.460 --> 01:09:25.260
you know, everything can be glued together.


01:09:25.260 --> 01:09:27.220
Anyway, for those out there who want to try,


01:09:27.220 --> 01:09:29.780
you know, these two are pretty neat.


01:09:29.780 --> 01:09:32.340
- Yeah, that is really cool.


01:09:32.340 --> 01:09:36.900
Awesome, that sounds like a lot of fun stuff to play with.


01:09:36.900 --> 01:09:37.900
I love the automation.


01:09:37.900 --> 01:09:40.660
I love the summarizing.


01:09:40.660 --> 01:09:42.100
That's, I really liked that one.


01:09:42.100 --> 01:09:43.580
That's great, so cool.


01:09:43.580 --> 01:09:46.100
Good recommendations on both of these.


01:09:46.100 --> 01:09:50.140
and we now have a new thing to put into that GitHub repo.


01:09:50.140 --> 01:09:51.940
- That's good, that's good, so yeah.


01:09:51.940 --> 01:09:56.260
- All right, well, Antonio, thank you so much for being here.


01:09:56.260 --> 01:09:57.460
I mean, final call to action.


01:09:57.460 --> 01:09:59.720
People wanna check out this project you've created.


01:09:59.720 --> 01:10:00.780
What do they do?


01:10:00.780 --> 01:10:04.420
- Please, just, you know, we'll just click, you know,


01:10:04.420 --> 01:10:07.620
down there on the podcast, you know, to the link.


01:10:07.620 --> 01:10:09.280
- Yeah, definitely, obviously I'll link to that.


01:10:09.280 --> 01:10:10.120
It's the main thing.


01:10:10.120 --> 01:10:11.920
- Contribute, you know, if you can,


01:10:13.860 --> 01:10:18.580
If you like it, don't forget to give us a start.


01:10:18.580 --> 01:10:19.460
Contribute.


01:10:19.460 --> 01:10:23.500
If you see anything wrong, please just welcome.


01:10:23.500 --> 01:10:24.500
Suggestions are welcome.


01:10:24.500 --> 01:10:27.860
And if I miss anything, any of the packages,


01:10:27.860 --> 01:10:30.380
for those who were in the podcast also as well,


01:10:30.380 --> 01:10:37.860
just go through and give us a bit of contribution there.


01:10:37.860 --> 01:10:40.500
So I promise to finalize all of them


01:10:40.500 --> 01:10:43.840
from episode number one by the end of this year.


01:10:43.840 --> 01:10:47.760
And after that, we'll try to do a few cool stuff there.


01:10:47.760 --> 01:10:50.480
So data could be retrieved as a JSON,


01:10:50.480 --> 01:10:53.560
just try to make it more accessible for the people.


01:10:53.560 --> 01:10:54.400
- Oh yeah, that'd be cool.


01:10:54.400 --> 01:10:56.320
- Probably next.


01:10:56.320 --> 01:10:59.800
And next probably we can do the how over the time,


01:10:59.800 --> 01:11:03.240
if we can record which was the notable,


01:11:03.240 --> 01:11:06.140
the favorite editor and the times


01:11:06.140 --> 01:11:07.960
and see how things change over the time,


01:11:07.960 --> 01:11:12.560
have a really nice graph of how these codes start coming up.


01:11:12.560 --> 01:11:13.400
- Oh yeah. - And quite charm as well.


01:11:13.400 --> 01:11:15.440
- There's a lot of ways to gather all this up


01:11:15.440 --> 01:11:18.960
and like turn it into computer legible data


01:11:18.960 --> 01:11:20.400
and do all sorts of fun stuff.


01:11:20.400 --> 01:11:21.720
- Exactly.


01:11:21.720 --> 01:11:23.800
Is second one call for action is,


01:11:23.800 --> 01:11:26.760
everyone's celebrating Thanksgiving.


01:11:26.760 --> 01:11:29.280
Yeah, for those who are still live,


01:11:29.280 --> 01:11:32.120
so listening the live streaming,


01:11:32.120 --> 01:11:36.920
wish you a really beautiful holiday.


01:11:36.920 --> 01:11:41.120
For those listening to the podcast, I hope you really


01:11:41.120 --> 01:11:44.320
have a good time with families and friends.


01:11:44.320 --> 01:11:48.880
If you want to reach me out, as usual, I'm on Twitter.


01:11:48.880 --> 01:11:51.200
I try to be nice on Twitter.


01:11:51.200 --> 01:11:53.720
I used to put everything on LinkedIn,


01:11:53.720 --> 01:11:59.160
most of my technical parts there.


01:11:59.160 --> 01:12:00.400
But anyway, I'm reachable.


01:12:00.400 --> 01:12:03.040
If we didn't have time to talk about IoT,


01:12:03.040 --> 01:12:10.440
If there is anyone out there who have pretty cool applications,


01:12:10.440 --> 01:12:14.520
hardwares, where you can go and deploy containers all the way


01:12:14.520 --> 01:12:18.280
to the edge, I will be super interested to hear


01:12:18.280 --> 01:12:22.760
from those individuals and companies and packages


01:12:22.760 --> 01:12:25.640
and everything out there.


01:12:25.640 --> 01:12:27.880
That's kind of my day-to-day job.


01:12:27.880 --> 01:12:30.000
So please--


01:12:30.000 --> 01:12:30.840
>>Sounds fun.


01:12:30.840 --> 01:12:32.280
>>--reach out.


01:12:32.280 --> 01:12:34.760
Right on, I'll be sure to put all your contact info


01:12:34.760 --> 01:12:35.600
in the show notes.


01:12:35.600 --> 01:12:37.480
So thank you so much for being here.


01:12:37.480 --> 01:12:40.600
Thank you for creating this GitHub repo


01:12:40.600 --> 01:12:42.120
and thanks for the look back


01:12:42.120 --> 01:12:44.080
to kind of highlighting the last half year


01:12:44.080 --> 01:12:45.680
of what people have talked about.


01:12:45.680 --> 01:12:46.840
It's been a lot of fun.


01:12:46.840 --> 01:12:49.320
- Great, thank you for having me, Michael.


01:12:49.320 --> 01:12:50.240
- Thanks, yeah.


01:12:50.240 --> 01:12:52.280
- See you guys. - Yeah, bye.


01:12:52.280 --> 01:12:53.120
- Bye.

