WEBVTT

00:00:00.000 --> 00:00:02.600
- Guy, welcome to Talk Python.


00:00:02.600 --> 00:00:04.240
- Thanks, happy to be here.


00:00:04.240 --> 00:00:06.240
- Yeah, it's fantastic to have you here.


00:00:06.240 --> 00:00:10.320
Really excited to talk about buildings and architecture


00:00:10.320 --> 00:00:14.320
and that kind of stuff just permeates our lives, right?


00:00:14.320 --> 00:00:17.000
That's, you walk around, you go to cities,


00:00:17.000 --> 00:00:19.120
you marvel at the large buildings,


00:00:19.120 --> 00:00:22.400
go to someone's house and it's this beautiful place.


00:00:22.400 --> 00:00:24.920
Really nice to see all that starts


00:00:24.920 --> 00:00:27.120
with good architecture and design, right?


00:00:27.120 --> 00:00:28.680
- Yeah, that's right.


00:00:28.680 --> 00:00:29.720
- That's right.


00:00:29.720 --> 00:00:31.820
Where we live, where we work, pretty much


00:00:31.820 --> 00:00:35.320
most of our lives we'll spend inside


00:00:35.320 --> 00:00:36.500
some sort of structure.


00:00:36.500 --> 00:00:38.880
- Exactly.


00:00:38.880 --> 00:00:39.700
Exactly, cool.


00:00:39.700 --> 00:00:40.680
Well, we're gonna talk about that.


00:00:40.680 --> 00:00:42.240
Before we get into that though,


00:00:42.240 --> 00:00:43.360
let's just start with your story.


00:00:43.360 --> 00:00:45.920
How'd you get into programming in Python?


00:00:45.920 --> 00:00:48.840
- Yeah, it was a bit of a long journey to Python.


00:00:48.840 --> 00:00:51.600
My, I think my first experience with programming


00:00:51.600 --> 00:00:54.840
was actually with a Lego Mindstorm.


00:00:54.840 --> 00:00:56.040
I don't know if you're familiar with it.


00:00:56.040 --> 00:00:56.880
- Yeah.


00:00:56.880 --> 00:00:58.360
A little robot thing, right?


00:00:58.360 --> 00:01:00.360
You can program those with Python, can't you?


00:01:00.360 --> 00:01:02.280
- Yeah, I don't know what it looks like these days.


00:01:02.280 --> 00:01:03.600
I guess when I got it,


00:01:03.600 --> 00:01:06.480
it was maybe in my early teenage years or something.


00:01:06.480 --> 00:01:07.840
And at the time they had something


00:01:07.840 --> 00:01:10.640
that was similar to MIT's Scratch,


00:01:10.640 --> 00:01:13.760
kind of block play.


00:01:13.760 --> 00:01:14.680
So I did a little bit of that.


00:01:14.680 --> 00:01:19.680
And then later I tried to learn Visual Basic 6,


00:01:19.680 --> 00:01:22.720
I think also in my early teenage years.


00:01:22.720 --> 00:01:24.680
And that was fun.


00:01:24.680 --> 00:01:27.600
I built a couple little personal projects.


00:01:27.600 --> 00:01:31.920
- You know what, I feel like we still don't have something


00:01:31.920 --> 00:01:33.840
to take the place of Visual Basic 6.


00:01:33.840 --> 00:01:34.680
- Yeah, yeah.


00:01:34.680 --> 00:01:35.800
- Do you think so?


00:01:35.800 --> 00:01:39.920
I mean, I look around at all the different UI platforms,


00:01:39.920 --> 00:01:43.080
whether that's the stuff we have in Python,


00:01:43.080 --> 00:01:44.480
or whether that's Swift,


00:01:44.480 --> 00:01:47.080
or whether that's .NET with WPF,


00:01:47.080 --> 00:01:50.080
or whatever else you wanna talk about,


00:01:50.080 --> 00:01:52.560
nothing is as easy as,


00:01:52.560 --> 00:01:54.860
I want these buttons here in a text box in a list,


00:01:54.860 --> 00:01:57.240
and I double click it, and I write three lines of code,


00:01:57.240 --> 00:01:58.520
and that happens, right?


00:01:58.520 --> 00:02:01.200
- Yeah, the environment has changed, right?


00:02:01.200 --> 00:02:03.480
'Cause before there were just desktop apps, right?


00:02:03.480 --> 00:02:05.200
You would build it and that's it.


00:02:05.200 --> 00:02:07.960
And now you have to think about, you know,


00:02:07.960 --> 00:02:12.320
even if React has made it as easy to build front end app,


00:02:12.320 --> 00:02:14.640
you still have to deal with something else for styling.


00:02:14.640 --> 00:02:16.240
And then you have to figure it out, you know,


00:02:16.240 --> 00:02:17.760
how are you going to serve the data?


00:02:17.760 --> 00:02:19.600
Or are you going to deploy it to?


00:02:19.600 --> 00:02:22.320
- I mean, I'm not saying VB6 is the pinnacle


00:02:22.320 --> 00:02:24.000
of what we could design, right?


00:02:24.000 --> 00:02:26.400
It's not going to win massive design awards,


00:02:26.400 --> 00:02:30.020
but wow, could people get stuff done quickly


00:02:30.020 --> 00:02:31.680
with that framework?


00:02:31.680 --> 00:02:32.520
- Yeah, and I mean, I never--


00:02:32.520 --> 00:02:34.120
- You did a little bit there, huh?


00:02:34.120 --> 00:02:35.040
- Yeah, I never got too deep,


00:02:35.040 --> 00:02:36.920
but it was an extension of a robotics course


00:02:36.920 --> 00:02:39.400
that I was taking, so we were building these little UIs


00:02:39.400 --> 00:02:42.080
and then clicking around and having the robot move


00:02:42.080 --> 00:02:45.580
or something, so it was very, very basic UI.


00:02:45.580 --> 00:02:48.240
But what was interesting is, you know, at the time,


00:02:48.240 --> 00:02:50.560
I grew up in Brazil, and at the time I was still there,


00:02:50.560 --> 00:02:53.240
and I wanted to get really deep,


00:02:53.240 --> 00:02:55.840
but there was a bit of a language barrier, I think.


00:02:55.840 --> 00:02:57.520
You know, this was also, you know, pre-Google.


00:02:57.520 --> 00:02:59.900
So trying to learn how to program


00:02:59.900 --> 00:03:02.800
while also not knowing how to speak English,


00:03:02.800 --> 00:03:05.880
I actually feel like it slowed me down a bit.


00:03:05.880 --> 00:03:07.120
- Yeah, I can imagine.


00:03:07.120 --> 00:03:10.120
I've always had a lot of both respect


00:03:10.120 --> 00:03:12.140
and I guess a little bit of sympathy


00:03:12.140 --> 00:03:15.000
for people who are non-native English speakers,


00:03:15.000 --> 00:03:17.220
especially people who didn't particularly


00:03:17.220 --> 00:03:20.400
speak English super well,


00:03:20.400 --> 00:03:23.880
but then had to program with for loops and while loops


00:03:23.880 --> 00:03:25.600
and true and false and ints.


00:03:25.600 --> 00:03:29.280
And it's just like, if, you know,


00:03:29.280 --> 00:03:31.960
maybe if you're with a language that's not that different,


00:03:31.960 --> 00:03:34.040
it's not that hard, but you know,


00:03:34.040 --> 00:03:36.920
if you're like Chinese or even Portuguese,


00:03:36.920 --> 00:03:39.680
it's, you know, why do you have to program


00:03:39.680 --> 00:03:40.920
all these foreign words?


00:03:40.920 --> 00:03:44.720
It just seems crazy to me that that's how it's been, right?


00:03:44.720 --> 00:03:47.440
- Yeah, and also the, you know, the resources,


00:03:47.440 --> 00:03:50.320
even today with, you know, post Google era


00:03:50.320 --> 00:03:52.400
or during the Google era, you can, you know,


00:03:52.400 --> 00:03:56.880
If you search for some sort of engineering problem in English or in Portuguese, I can


00:03:56.880 --> 00:04:02.920
guarantee you, you're going to get a much bigger pool of answers and resources in English.


00:04:02.920 --> 00:04:03.920
- Yes.


00:04:03.920 --> 00:04:07.560
- Yes, that was a little bit of a barrier.


00:04:07.560 --> 00:04:11.040
In fact, what actually happened is I never really progressed and I just went on to other


00:04:11.040 --> 00:04:12.040
things.


00:04:12.040 --> 00:04:15.440
- Maybe this programming thing is not for me.


00:04:15.440 --> 00:04:17.560
- Yes, I don't know.


00:04:17.560 --> 00:04:20.560
I just kind of didn't really get it, never really clicked,


00:04:20.560 --> 00:04:22.440
and then I moved on to other things,


00:04:22.440 --> 00:04:26.400
and I ended up pursuing a degree in architecture,


00:04:26.400 --> 00:04:28.400
you know, to talk a little bit about it,


00:04:28.400 --> 00:04:30.600
but it was a little bit of kind of a gap,


00:04:30.600 --> 00:04:33.240
and then I think it was just, you know,


00:04:33.240 --> 00:04:34.400
during my college years,


00:04:34.400 --> 00:04:37.080
I tried getting into a little bit of web development,


00:04:37.080 --> 00:04:39.960
you know, played around with ActionScript,


00:04:39.960 --> 00:04:42.440
you know, Flash, I think that's what it was called, right?


00:04:42.440 --> 00:04:45.400
It was like JavaScript-like, instead of Flash.


00:04:45.400 --> 00:04:47.440
And then within architecture,


00:04:47.440 --> 00:04:51.460
I got a little bit into visual programming,


00:04:51.460 --> 00:04:54.440
which it's, I guess, a more sophisticated version


00:04:54.440 --> 00:04:57.880
of Scratch, but similar to what 3ds Max


00:04:57.880 --> 00:04:59.800
uses to compose material,


00:04:59.800 --> 00:05:02.600
this idea that you can kind of connect flows


00:05:02.600 --> 00:05:04.300
into each other visually.


00:05:04.300 --> 00:05:07.140
And that's used pretty extensively in architecture still.


00:05:07.140 --> 00:05:09.400
And that was kind of my gateway back


00:05:09.400 --> 00:05:12.400
into programming in some ways.


00:05:12.400 --> 00:05:14.960
And then a couple of years later,


00:05:14.960 --> 00:05:17.160
I actually practiced architecture for,


00:05:17.160 --> 00:05:19.000
I think about five or six years.


00:05:19.000 --> 00:05:21.560
And at the time I was trying to figure out


00:05:21.560 --> 00:05:23.000
how I could change careers.


00:05:23.000 --> 00:05:25.740
And I was just, I had this kind of itch.


00:05:25.740 --> 00:05:27.360
I just really wanted to write code


00:05:27.360 --> 00:05:29.840
and I couldn't figure out how to kind of break it.


00:05:29.840 --> 00:05:32.920
And I ended up doing this process of changing careers.


00:05:32.920 --> 00:05:34.120
I actually took a year off


00:05:34.120 --> 00:05:37.560
and spend every kind of breathing minute I had


00:05:37.560 --> 00:05:39.120
trying to learn how to code.


00:05:39.120 --> 00:05:40.520
And surprisingly--


00:05:40.520 --> 00:05:43.400
- Was that on your own or did you go to a university?


00:05:43.400 --> 00:05:45.240
- No, it was just on my own.


00:05:45.240 --> 00:05:46.720
literally like Googled, you know,


00:05:46.720 --> 00:05:48.720
what language should I learn first?


00:05:48.720 --> 00:05:52.760
You know, and this was like 2014, I think, 15.


00:05:52.760 --> 00:05:55.600
And I actually picked Ruby first, you know.


00:05:55.600 --> 00:05:58.000
This was, you know, Ruby on Rails,


00:05:58.000 --> 00:05:59.660
golden years, I guess.


00:05:59.660 --> 00:06:03.040
And I started with Ruby and after a couple weeks,


00:06:03.040 --> 00:06:05.160
I just didn't enjoy it that much.


00:06:05.160 --> 00:06:07.380
I was getting confused with some of the basic


00:06:07.380 --> 00:06:09.000
kind of building blocks.


00:06:09.000 --> 00:06:10.680
And I decided to try Python


00:06:10.680 --> 00:06:13.600
and it was just kind of smooth sailing.


00:06:13.600 --> 00:06:16.360
I mean, I guess as smooth as it can be learning by yourself.


00:06:16.360 --> 00:06:17.680
- Yeah, yeah, sure.


00:06:17.680 --> 00:06:20.760
- But I felt like even the basic grammar,


00:06:20.760 --> 00:06:22.080
it would just kind of stick.


00:06:22.080 --> 00:06:23.520
I didn't have to keep going back and say,


00:06:23.520 --> 00:06:26.600
oh, how do you do for loop again?


00:06:26.600 --> 00:06:29.680
I found that it was always a bit stickier with me,


00:06:29.680 --> 00:06:33.800
not having to think about where some semicolons would go.


00:06:33.800 --> 00:06:36.680
It was just easier and smoother


00:06:36.680 --> 00:06:39.160
and more enjoyable for me in general.


00:06:39.160 --> 00:06:40.400
- For sure.


00:06:40.400 --> 00:06:45.400
- Well, I gave VB a lot of positive praise


00:06:45.400 --> 00:06:47.260
a little bit ago.


00:06:47.260 --> 00:06:51.000
I think also that language is a really interesting example


00:06:51.000 --> 00:06:55.000
of how to try to be like Python, but not do it well.


00:06:55.000 --> 00:07:00.000
So with JavaScript or C#


00:07:00.000 --> 00:07:01.740
or a lot of these languages,


00:07:01.740 --> 00:07:03.640
you have all these symbols on the screen,


00:07:03.640 --> 00:07:06.560
especially the static languages, C#, Java, C++, right?


00:07:06.560 --> 00:07:09.560
Semi-colons, angle brackets, you know, parentheses,


00:07:09.560 --> 00:07:12.160
all sorts of stuff all over the place.


00:07:12.160 --> 00:07:14.720
And then there's languages like Python that say,


00:07:14.720 --> 00:07:15.560
you know, you don't need that.


00:07:15.560 --> 00:07:16.680
You don't need all these symbols.


00:07:16.680 --> 00:07:18.160
Let's just go and write it.


00:07:18.160 --> 00:07:19.640
And, you know, VB is like that, right?


00:07:19.640 --> 00:07:20.680
There's no semi-colons.


00:07:20.680 --> 00:07:21.800
There's not that many symbols,


00:07:21.800 --> 00:07:26.240
but it's like, everything is begin for, end for,


00:07:26.240 --> 00:07:29.000
like, it's just, it's the worst possible.


00:07:29.000 --> 00:07:31.560
It's like, they still need the closing curly braces


00:07:31.560 --> 00:07:32.440
and stuff like that,


00:07:32.440 --> 00:07:33.800
but they don't want to put a curly brace.


00:07:33.800 --> 00:07:36.760
So they make you type like a huge long word,


00:07:36.760 --> 00:07:37.720
which is just crazy.


00:07:37.720 --> 00:07:40.400
And somehow Python struck that smooth balance


00:07:40.400 --> 00:07:42.920
of not having all that stuff,


00:07:42.920 --> 00:07:45.400
but not giving up too much as well.


00:07:45.400 --> 00:07:50.400
- Yeah, and also the boilerplate that's required,


00:07:50.400 --> 00:07:53.680
I think I had tried doing some C# as well,


00:07:53.680 --> 00:07:56.700
and you open up the simplest example you can find,


00:07:56.700 --> 00:08:00.240
and it's class, void, public,


00:08:00.240 --> 00:08:02.200
and you're like, wait, what is public?


00:08:02.200 --> 00:08:07.120
I haven't gotten to understand classes or access


00:08:07.120 --> 00:08:07.960
and things like that.


00:08:07.960 --> 00:08:10.240
And it's really overwhelming.


00:08:10.240 --> 00:08:12.480
And in Python, it's like, even the class,


00:08:12.480 --> 00:08:14.440
it takes a little bit when you're learning,


00:08:14.440 --> 00:08:17.120
but you can just, here's a function


00:08:17.120 --> 00:08:18.440
that's inside of this object,


00:08:18.440 --> 00:08:20.600
and it's much easier to understand,


00:08:20.600 --> 00:08:22.760
I think, as a beginner, it's gonna ramp up.


00:08:22.760 --> 00:08:25.880
- I think it's a big testament


00:08:25.880 --> 00:08:28.120
that you can be really effective with Python


00:08:28.120 --> 00:08:31.720
with a super, like a very partial understanding


00:08:31.720 --> 00:08:33.520
of what Python is or how it works, right?


00:08:33.520 --> 00:08:36.180
You can not even be aware that half of the stuff exists,


00:08:36.180 --> 00:08:38.280
and you can still get along just fine.


00:08:38.280 --> 00:08:39.660
So that's pretty awesome.


00:08:39.660 --> 00:08:45.080
So let's dive into the main topic, buildings, architecture.


00:08:45.080 --> 00:08:48.260
So I've seen some of the presentations you've given


00:08:48.260 --> 00:08:51.880
and it sounds to me like this is a industry


00:08:51.880 --> 00:08:56.880
that's ripe for more programming, automation, empowerment.


00:08:56.880 --> 00:09:00.360
You know, I always say that programming is a superpower


00:09:00.360 --> 00:09:03.280
for people who are not programmers, right?


00:09:03.280 --> 00:09:06.840
if you're an architect versus an architect who programs,


00:09:06.840 --> 00:09:09.480
the programming architect can do way more, right?


00:09:09.480 --> 00:09:12.320
And it sounds to me like this area


00:09:12.320 --> 00:09:15.200
is kind of open for more of that.


00:09:15.200 --> 00:09:16.960
- Yeah, yeah, absolutely.


00:09:16.960 --> 00:09:18.520
- Yeah, give us the background.


00:09:18.520 --> 00:09:20.400
It starts with pictures and drawings


00:09:20.400 --> 00:09:22.400
and blueprints type things, right?


00:09:22.400 --> 00:09:23.520
- Yeah, yeah, exactly.


00:09:23.520 --> 00:09:26.240
So I mean, I guess I should just preface this


00:09:26.240 --> 00:09:28.200
with the fact that I've been outside the industry


00:09:28.200 --> 00:09:31.000
for about four years now,


00:09:31.000 --> 00:09:33.400
just doing more traditional software development.


00:09:33.400 --> 00:09:37.160
So I may be a little bit of the loop on some changes,


00:09:37.160 --> 00:09:40.920
but in general, the time I spent in the industry,


00:09:40.920 --> 00:09:42.720
what you would see is that


00:09:42.720 --> 00:09:45.560
it's still a pretty kind of analog industry.


00:09:45.560 --> 00:09:47.120
And there are parts that are improving,


00:09:47.120 --> 00:09:48.840
there are parts that are very advanced.


00:09:48.840 --> 00:09:52.120
I mean, we do still manage to build incredible buildings,


00:09:52.120 --> 00:09:54.280
but there's this weird kind of tension where


00:09:54.280 --> 00:09:58.200
people are coming up with these design concepts


00:09:58.200 --> 00:10:02.200
and figured out what the building is going to look like,


00:10:02.200 --> 00:10:03.480
what spaces you're going to need.


00:10:03.480 --> 00:10:05.360
And then kind of at the other end,


00:10:05.360 --> 00:10:08.760
you have people standing on their,


00:10:08.760 --> 00:10:12.680
like literally cutting material and assembling things.


00:10:12.680 --> 00:10:14.840
And then there's this big kind of gap in the middle


00:10:14.840 --> 00:10:17.200
of how you go from one thing to another.


00:10:17.200 --> 00:10:20.760
And that's kind of the meat of architecture.


00:10:20.760 --> 00:10:25.680
So my experience was primarily in medium and large buildings


00:10:25.680 --> 00:10:29.920
And it's actually just very labor intensive,


00:10:29.920 --> 00:10:32.440
you know, labor as far as software,


00:10:32.440 --> 00:10:34.800
not the hands-on labor for architects,


00:10:34.800 --> 00:10:37.680
but it was just a lot of work


00:10:37.680 --> 00:10:40.200
that goes into designing a big building.


00:10:40.200 --> 00:10:42.200
You know, so if you have a, I don't know,


00:10:42.200 --> 00:10:43.920
one of the office buildings I worked on,


00:10:43.920 --> 00:10:47.280
you know, 150,000 square feet, six story or something.


00:10:47.280 --> 00:10:49.920
And, you know, someone had come up with a design,


00:10:49.920 --> 00:10:51.780
okay, it's going to look like this.


00:10:51.780 --> 00:10:52.620
And it was very, you know,


00:10:52.620 --> 00:10:54.480
conceptual design kind of massive.


00:10:54.480 --> 00:10:58.400
And then you have to turn into a real project


00:10:58.400 --> 00:11:03.400
with faucets that work and lights and sprinklers.


00:11:03.400 --> 00:11:04.480
- Exactly.


00:11:04.480 --> 00:11:06.000
When you think, well, let me rephrase that.


00:11:06.000 --> 00:11:07.880
When I think of architecture,


00:11:07.880 --> 00:11:12.260
I think of the overall feel of it, right?


00:11:12.260 --> 00:11:14.440
Is it flowing?


00:11:14.440 --> 00:11:15.720
Does it have sharp edges?


00:11:15.720 --> 00:11:17.080
Does it feel modern?


00:11:17.080 --> 00:11:18.920
And so on.


00:11:18.920 --> 00:11:21.880
I have a picture here on the screen for us to look at


00:11:21.880 --> 00:11:26.800
that's this sort of wood structure, it's light and airy.


00:11:26.800 --> 00:11:30.880
And sure, that's architecture, but it sounds like,


00:11:30.880 --> 00:11:34.240
and so are the support beams, so is the plumbing,


00:11:34.240 --> 00:11:37.400
so is the light switch and where they go,


00:11:37.400 --> 00:11:42.400
and just way more detail than just the general skeleton


00:11:42.400 --> 00:11:43.880
or structure out there.


00:11:43.880 --> 00:11:46.460
- Yeah, and like which part of the plywood


00:11:46.460 --> 00:11:47.960
is gonna go in which direction,


00:11:47.960 --> 00:11:50.880
like on your kitchen counter or something.


00:11:50.880 --> 00:11:53.780
like that level of detail, but what you're showing here,


00:11:53.780 --> 00:11:55.700
it's kind of what you see in school


00:11:55.700 --> 00:11:58.140
and what you get really excited about in school.


00:11:58.140 --> 00:11:59.300
And then when you start working,


00:11:59.300 --> 00:12:01.560
you realize that there's only a few people


00:12:01.560 --> 00:12:03.060
that get to do this type of work.


00:12:03.060 --> 00:12:06.320
And the majority of the people are just, you know,


00:12:06.320 --> 00:12:11.220
kind of doing coordination and working on, you know,


00:12:11.220 --> 00:12:13.940
lots of kind of drawings and coordination


00:12:13.940 --> 00:12:15.280
between different trades.


00:12:15.280 --> 00:12:17.540
But, you know, of course that does happen,


00:12:17.540 --> 00:12:23.780
but a big chunk of the work is just figuring out how to coordinate and assemble drawings.


00:12:23.780 --> 00:12:30.900
So if you imagine, a lot of this work is done on kind of traditional desktop applications.


00:12:30.900 --> 00:12:37.660
So if you're familiar with Autodesk, the biggest ones in the US are AutoCAD, Revit.


00:12:37.660 --> 00:12:42.180
Those are more... Revit is very like architecture and kind of building focused.


00:12:42.180 --> 00:12:46.740
AutoCAD is more generic, drawing and drafting.


00:12:46.740 --> 00:12:52.340
And then you have other players like MacNeil, they do kind of 3D modeling,


00:12:52.340 --> 00:12:56.440
and it's used all the way from small jewelry design and boats all the way to buildings,


00:12:56.440 --> 00:12:58.400
but more at the conceptual stage.


00:12:58.400 --> 00:13:04.500
And Revit is kind of the big dog as far as like building documentation.


00:13:04.500 --> 00:13:06.660
And there's this interesting process because at the same time,


00:13:06.660 --> 00:13:09.120
you are coming up with the building at large scale, right?


00:13:09.120 --> 00:13:11.600
Like what you see there, this kind of mass in.


00:13:11.600 --> 00:13:14.080
you have to zoom in all the way to,


00:13:14.080 --> 00:13:17.100
what is it gonna look like,


00:13:17.100 --> 00:13:20.600
the light cove in a bathroom, for example,


00:13:20.600 --> 00:13:23.280
and you might have to cut a section through that in detail.


00:13:23.280 --> 00:13:26.320
And there's this weird process we are still in


00:13:26.320 --> 00:13:29.360
where buildings are designed half in 3D and half in 2D.


00:13:29.360 --> 00:13:33.560
So you do some 3D and then you get sort of these views,


00:13:33.560 --> 00:13:35.160
but then you might do a projection.


00:13:35.160 --> 00:13:37.360
You're like, oh, we need to see just this wall


00:13:37.360 --> 00:13:40.160
or just the floor, how it's gonna look.


00:13:40.160 --> 00:13:42.240
this case where it needs a drawing of like,


00:13:42.240 --> 00:13:43.700
what does it look like if I cut through here?


00:13:43.700 --> 00:13:45.560
And you literally draw in 2D


00:13:45.560 --> 00:13:47.720
and you have to assemble these big drawing sets


00:13:47.720 --> 00:13:50.600
that are references, you know, that show the 3D and say,


00:13:50.600 --> 00:13:51.840
okay, if you were to cut through this,


00:13:51.840 --> 00:13:52.860
here's what you would see.


00:13:52.860 --> 00:13:55.560
And oftentimes they're not even like the same model.


00:13:55.560 --> 00:13:58.440
You're just trying to make this thing look, you know,


00:13:58.440 --> 00:13:59.280
coordinated.


00:13:59.280 --> 00:14:01.080
- How often does it go wrong?


00:14:01.080 --> 00:14:02.120
- Oh, pretty often.


00:14:02.120 --> 00:14:03.180
Yeah, pretty often.


00:14:03.180 --> 00:14:05.380
So one of the things that's done,


00:14:05.380 --> 00:14:07.240
usually there's a tool called Navisworks


00:14:07.240 --> 00:14:08.520
is one of the ones that's used,


00:14:08.520 --> 00:14:10.000
that's for clash detection.


00:14:10.000 --> 00:14:12.440
So, 'cause not only you have the architects,


00:14:12.440 --> 00:14:14.640
but you also have these trades coming together, right?


00:14:14.640 --> 00:14:17.760
So you have separate models for the architecture,


00:14:17.760 --> 00:14:21.280
like walls and floors and things like that.


00:14:21.280 --> 00:14:23.840
And then you have the structural engineer


00:14:23.840 --> 00:14:25.800
as a separate model with all the steel


00:14:25.800 --> 00:14:29.720
or concrete structure, and maybe the MEP,


00:14:29.720 --> 00:14:32.560
mechanical, electrical employment folks


00:14:32.560 --> 00:14:35.380
have a separate model, and then they all get linked.


00:14:35.380 --> 00:14:37.500
And in the end, you may have like, you know,


00:14:37.500 --> 00:14:39.440
a duck going through a light fixture,


00:14:39.440 --> 00:14:42.240
or things cutting through wall


00:14:42.240 --> 00:14:44.040
and you actually have to do clash detections


00:14:44.040 --> 00:14:45.800
and trying to figure out places


00:14:45.800 --> 00:14:48.880
where the model may not have a valid condition.


00:14:48.880 --> 00:14:51.380
- Yeah, I can imagine.


00:14:51.380 --> 00:14:57.640
So this Revit app is largely a .NET C# desktop application.


00:14:57.640 --> 00:15:00.360
Is that right?


00:15:00.360 --> 00:15:01.520
- Yeah, correct.


00:15:01.520 --> 00:15:05.800
- Yeah, and so if you want a programmer to work with it,


00:15:05.800 --> 00:15:06.620
what do you do?


00:15:06.620 --> 00:15:08.440
Do you do that in C#?


00:15:08.440 --> 00:15:10.820
- Yeah, so Revit's been around for a while,


00:15:10.820 --> 00:15:14.580
and I'm not sure when it started.


00:15:14.580 --> 00:15:16.000
I don't think it was from the very beginning,


00:15:16.000 --> 00:15:18.960
but at some point they released an API.


00:15:18.960 --> 00:15:21.200
And without this API,


00:15:21.200 --> 00:15:23.740
you can do everything through the UI, right?


00:15:23.740 --> 00:15:24.880
So you can click around


00:15:24.880 --> 00:15:29.000
and you can basically achieve everything you need to.


00:15:29.000 --> 00:15:30.000
And through the API,


00:15:30.000 --> 00:15:32.520
you can sort of automate everything that's visible


00:15:32.520 --> 00:15:34.120
and sometimes a little bit more.


00:15:34.120 --> 00:15:37.380
But the idea is that, for example,


00:15:37.380 --> 00:15:40.640
One of the first tasks I automated in Revit


00:15:40.640 --> 00:15:44.360
was I was working on really large office buildings,


00:15:44.360 --> 00:15:46.100
and each room would get a tag


00:15:46.100 --> 00:15:47.620
with the name of the room,


00:15:47.620 --> 00:15:50.020
and I would have to literally drag this tag on.


00:15:50.020 --> 00:15:52.380
And then sometimes as the building moved,


00:15:52.380 --> 00:15:53.980
things would get kind of out of place,


00:15:53.980 --> 00:15:56.540
and you wanted the tags to be kind of centered nicely.


00:15:56.540 --> 00:15:57.980
And you would literally have to go around


00:15:57.980 --> 00:15:59.140
and move around these tags.


00:15:59.140 --> 00:16:00.540
And one of the first--


00:16:00.540 --> 00:16:01.660
- For hundreds of rooms, right?


00:16:01.660 --> 00:16:05.100
That sounds like not a fun, good use of your time.


00:16:05.100 --> 00:16:07.000
- Oh, no, definitely not at all.


00:16:07.000 --> 00:16:09.600
And yeah, one of the first automations I built


00:16:09.600 --> 00:16:12.640
was this tool that would just go automatically room by room


00:16:12.640 --> 00:16:14.200
and make sure that the tag was in the center.


00:16:14.200 --> 00:16:16.000
So we just kind of figured out the delta


00:16:16.000 --> 00:16:17.840
between the center of the room and where the tag was


00:16:17.840 --> 00:16:19.080
and like slide it.


00:16:19.080 --> 00:16:22.520
And I actually had at the company that I worked at a time,


00:16:22.520 --> 00:16:25.280
I had a system that would measure the use of tools


00:16:25.280 --> 00:16:26.940
and that tool would just get used


00:16:26.940 --> 00:16:28.820
like hundreds of times a day.


00:16:28.820 --> 00:16:31.280
So you imagine every time someone clicked that button,


00:16:31.280 --> 00:16:33.760
you know, the amount of time you would see these architects


00:16:33.760 --> 00:16:35.680
like going around and moving these tags


00:16:35.680 --> 00:16:37.040
to get them centered.


00:16:37.040 --> 00:16:38.840
And just little things like that,


00:16:38.840 --> 00:16:42.080
very kind of monotonous, boring,


00:16:42.080 --> 00:16:44.280
not very impressive.


00:16:44.280 --> 00:16:45.120
- Yeah, but those are the kinds of things that you can--


00:16:45.120 --> 00:16:47.000
- I just spend a lot of time on the day to day.


00:16:47.000 --> 00:16:50.200
- Yeah, but you can easily apply code to those


00:16:50.200 --> 00:16:52.640
and really make people's lives better.


00:16:52.640 --> 00:16:54.820
And it sounds like hundreds of people's lives better


00:16:54.820 --> 00:16:58.880
by not making them fiddle with stupid labels all the time,


00:16:58.880 --> 00:17:01.560
but you just push a button, right?


00:17:01.560 --> 00:17:05.160
So while these can be programmed in C#,


00:17:05.160 --> 00:17:07.460
there's a Python angle, right?


00:17:07.460 --> 00:17:08.600
- Yeah.


00:17:08.600 --> 00:17:10.440
Yeah, so there's a couple of different ways


00:17:10.440 --> 00:17:11.320
that Python comes in.


00:17:11.320 --> 00:17:13.120
I think Revit itself does support


00:17:13.120 --> 00:17:15.640
some sort of Python automation,


00:17:15.640 --> 00:17:18.980
but it's, again, it's a bit bulky,


00:17:18.980 --> 00:17:20.780
difficult to use, difficult to debug.


00:17:20.780 --> 00:17:24.720
So one of the main ways that it's used these days,


00:17:24.720 --> 00:17:25.880
there's this project,


00:17:25.880 --> 00:17:28.220
and I've actually become really good friends


00:17:28.220 --> 00:17:29.360
with the maintainer,


00:17:29.360 --> 00:17:31.480
but there's this project called PyRevit.


00:17:31.480 --> 00:17:34.400
And the idea is that when you write Python,


00:17:34.400 --> 00:17:41.960
you get used to things being sort of Pythonic or more elegant, and it's easy to do, right?


00:17:41.960 --> 00:17:47.040
So what he was trying to do is how can we have this kind of experience building automations


00:17:47.040 --> 00:17:54.320
within Revit? So instead of having to compile my C# add-in, how can I kind of just pop up


00:17:54.320 --> 00:17:59.920
the script, click a button, and have it run my Python code? And that's essentially what


00:17:59.920 --> 00:18:07.960
he built. So initially it was using only Iron Python because that's the way it integrates


00:18:07.960 --> 00:18:12.400
within the Revit environment since it's .NET. You would essentially use an Iron Python,


00:18:12.400 --> 00:18:15.920
you could interact directly with Revit through the common language runtime.


00:18:15.920 --> 00:18:22.400
Right. So tell us a bit about Iron Python. I suspect many people do know about it. This


00:18:22.400 --> 00:18:29.440
came originally out of a project at Microsoft, I think was this Dino Veland? I can't remember.


00:18:29.440 --> 00:18:30.520
- Yeah, that's what I've heard.


00:18:30.520 --> 00:18:33.080
I've interacted with the maintainers a couple times


00:18:33.080 --> 00:18:34.280
over the last few years,


00:18:34.280 --> 00:18:37.280
and the impression I've had is that there was one or two


00:18:37.280 --> 00:18:39.720
people kind of trying to get this going,


00:18:39.720 --> 00:18:41.680
but it's not very active.


00:18:41.680 --> 00:18:46.040
And I think the three release wasn't until,


00:18:46.040 --> 00:18:48.960
oh yeah, it shows there it's still in alpha, actually.


00:18:48.960 --> 00:18:51.360
At the time when I was using it, it was still on 2.7.


00:18:51.360 --> 00:18:54.320
You know, it's been stuck there for a long time.


00:18:54.320 --> 00:18:55.600
- At least it's making progress.


00:18:55.600 --> 00:18:58.440
I mean, here's a release in 2021 on it, so that's good.


00:18:58.440 --> 00:19:04.560
- Yes. You know, one of the things, I'm not too familiar with it, but I remember hearing


00:19:04.560 --> 00:19:10.120
from the PyRevit maintainer that they actually ended up using this other project called Python.net.


00:19:10.120 --> 00:19:13.600
- Yes. - And, you know, Iron Python is essentially


00:19:13.600 --> 00:19:20.600
a Python interpreter that, you know, it's written in C#, and Python.net does something


00:19:20.600 --> 00:19:25.360
kind of different. It actually allows you to use CPython but interact with the .net


00:19:25.360 --> 00:19:29.360
side and I don't quite remember how he worked but I know he got it to work and he was able


00:19:29.360 --> 00:19:32.880
to get CPython applications running inside of Revit as well.


00:19:32.880 --> 00:19:41.440
>> Right. So Iron Python is a Python interpreter but instead of having the interpreter implemented


00:19:41.440 --> 00:19:47.560
in C the way that the one that we're all mostly familiar with is, it's implemented on top


00:19:47.560 --> 00:19:55.320
of .NET. And yeah, that was Dino Vilanda double check. So nice job on that, Dino. It's implemented


00:19:55.320 --> 00:19:58.040
on top of the .NET CLR runtime,


00:19:58.040 --> 00:19:59.560
and it's its own little thing,


00:19:59.560 --> 00:20:01.640
and this thing called the dynamic language runtime,


00:20:01.640 --> 00:20:05.800
which means integration with .NET is super easy,


00:20:05.800 --> 00:20:07.660
because it's already running in .NET.


00:20:07.660 --> 00:20:10.240
It's equivalent to saying integration with C is easy on


00:20:10.240 --> 00:20:13.760
CPython because it's already effectively running in C.


00:20:13.760 --> 00:20:17.360
I guess that's probably a pretty natural way to go because if you're


00:20:17.360 --> 00:20:21.360
trying to integrate with a C#.NET library,


00:20:21.360 --> 00:20:25.200
you got to somehow get that thing in and do something with it.


00:20:25.200 --> 00:20:28.020
So I could see why they would go with Iron Python first.


00:20:28.020 --> 00:20:31.460
But yeah, I've sort of heard that Python.net,


00:20:31.460 --> 00:20:36.300
it seems a little bit more CPython friendly, I guess.


00:20:36.300 --> 00:20:40.540
- Yeah, I think one of the issues with Iron Python project


00:20:40.540 --> 00:20:44.020
is that it's kind of impossible to maintain.


00:20:44.020 --> 00:20:46.580
Like how do you keep up with all the changes


00:20:46.580 --> 00:20:50.340
and releases of CPython and rebuild them from scratch


00:20:50.340 --> 00:20:52.440
in C#?


00:20:52.440 --> 00:20:55.060
I would imagine it would take a huge amount of time


00:20:55.060 --> 00:20:59.460
and resources to keep that project going in the same pace.


00:20:59.460 --> 00:21:01.240
- Yeah, so here looking at python.net,


00:21:01.240 --> 00:21:05.020
we've got, it supports 2.7, but also 3.5, 3.6, 3.7,


00:21:05.020 --> 00:21:07.540
and 3.8, which is not 3.9 and 3.10,


00:21:07.540 --> 00:21:11.100
but it sure is better than alpha support for 3.4.


00:21:11.100 --> 00:21:15.900
- Yeah, do you know how it actually,


00:21:15.900 --> 00:21:16.820
what it actually does?


00:21:16.820 --> 00:21:17.660
How does it get to--


00:21:17.660 --> 00:21:21.420
- I have no, I have not learned enough about python.net


00:21:21.420 --> 00:21:24.020
to know how it works, but it's, yeah,


00:21:24.020 --> 00:21:26.620
It looks pretty neat though, doesn't it?


00:21:26.620 --> 00:21:28.120
- Yeah, but I think it's just,


00:21:28.120 --> 00:21:31.060
you're able to operate in CPython,


00:21:31.060 --> 00:21:33.240
but kind of import common language runtime


00:21:33.240 --> 00:21:38.140
and talk to your .NET DLLs in the same way you would


00:21:38.140 --> 00:21:40.780
from Iron Python.


00:21:40.780 --> 00:21:41.700
So it's pretty nice. - Yeah, you get


00:21:41.700 --> 00:21:43.420
very foreign looking code.


00:21:43.420 --> 00:21:47.160
Import CLR from system.winstos.forms, import form,


00:21:47.160 --> 00:21:49.540
which is something you would expect to see


00:21:49.540 --> 00:21:52.460
in a .NET project, not in a Python project.


00:21:52.460 --> 00:21:53.860
- Yeah, you know, but there's actually,


00:21:53.860 --> 00:21:54.860
that's one interesting thing


00:21:54.860 --> 00:21:56.180
that I've seen happen quite a bit


00:21:56.180 --> 00:21:59.260
because people within this industry


00:21:59.260 --> 00:22:02.140
ended up using Iron Python quite a bit.


00:22:02.140 --> 00:22:04.180
I know there's a few projects out there


00:22:04.180 --> 00:22:06.580
for building UIs in Python,


00:22:06.580 --> 00:22:09.100
but I've actually seen quite a few projects


00:22:09.100 --> 00:22:13.220
with like desktop UIs basically built using .NET


00:22:13.220 --> 00:22:14.060
because it has--


00:22:14.060 --> 00:22:14.900
- Interesting.


00:22:14.900 --> 00:22:16.860
- What is it, WinForms?


00:22:16.860 --> 00:22:18.620
I forgot what the other one was.


00:22:18.620 --> 00:22:21.940
- WinForms is the one that's like the modern-ish VB.


00:22:21.940 --> 00:22:25.540
I say modern-ish because I think they kind of stopped


00:22:25.540 --> 00:22:30.220
advancing that in something like 2008,


00:22:30.220 --> 00:22:31.820
I think is when they stopped advancing it.


00:22:31.820 --> 00:22:33.180
So it's not like super modern,


00:22:33.180 --> 00:22:36.460
but it's way more modern than VB6 was.


00:22:36.460 --> 00:22:38.380
So yeah, there's that and there's WPF


00:22:38.380 --> 00:22:39.220
and then some weird variants.


00:22:39.220 --> 00:22:43.140
- Yeah, WPF is the more current one, right?


00:22:43.140 --> 00:22:45.340
- Yeah, also way harder to use.


00:22:45.340 --> 00:22:46.180
- Yeah.


00:22:46.180 --> 00:22:47.340
- But yeah, more modern one, yeah.


00:22:47.340 --> 00:22:51.100
Yeah, so what you're saying is you've seen some people


00:22:51.100 --> 00:22:53.580
write Python code that then will do stuff like this


00:22:53.580 --> 00:22:57.260
to put that kind of UI on the screen, right?


00:22:57.260 --> 00:22:58.260
Okay.


00:22:58.260 --> 00:23:01.220
- Yeah, and even PyRev itself had quite a few


00:23:01.220 --> 00:23:03.100
kind of UI components, and they were all just using


00:23:03.100 --> 00:23:06.900
standard .NET stuff, but writing in Python.


00:23:06.900 --> 00:23:10.540
And what's interesting too is, in addition to PyRev,


00:23:10.540 --> 00:23:12.660
there's a few other projects, and one of them


00:23:12.660 --> 00:23:16.780
I had worked on that was called Revit Python Wrapper,


00:23:16.780 --> 00:23:19.900
and there's another one called Revitron,


00:23:19.900 --> 00:23:21.800
which all have kind of similar idea,


00:23:21.800 --> 00:23:25.140
which is like, I want to have the Python experience,


00:23:25.140 --> 00:23:28.980
but, you know, using this other kind of stack.


00:23:28.980 --> 00:23:31.720
So the idea for Revit Python wrapper is that


00:23:31.720 --> 00:23:35.400
the Revit API, it's this very, very bulky,


00:23:35.400 --> 00:23:39.380
you know, C# API, it's enormous.


00:23:39.380 --> 00:23:42.060
- You can make it do its thing in Python,


00:23:42.060 --> 00:23:46.200
but you work with the type names and the function names


00:23:46.200 --> 00:23:48.640
and stuff straight out of the .NET world, right?


00:23:48.640 --> 00:23:50.480
which is clearly not Pythonic.


00:23:50.480 --> 00:23:53.080
- Yeah, so your code doesn't look or feel like Python.


00:23:53.080 --> 00:23:55.400
And then the interfaces and kind of the APIs


00:23:55.400 --> 00:23:56.680
for the libraries are weird.


00:23:56.680 --> 00:23:59.040
So like, if I want to just, you know, query, you know,


00:23:59.040 --> 00:24:02.280
this model for a wall, I would have to like build this


00:24:02.280 --> 00:24:05.320
object, you know, in this kind of like builder pattern.


00:24:05.320 --> 00:24:06.160
- Oh gosh, okay.


00:24:06.160 --> 00:24:07.520
- You know, it's very strange.


00:24:07.520 --> 00:24:08.800
Like it doesn't feel like Python.


00:24:08.800 --> 00:24:11.640
So when I started writing that, I would, you know,


00:24:11.640 --> 00:24:14.560
build these little functions that would take the C# code


00:24:14.560 --> 00:24:17.840
and give me like a Python-like call that I could make.


00:24:17.840 --> 00:24:20.160
And that's what this project came out from,


00:24:20.160 --> 00:24:22.120
was this idea that I wanted to wrap everything


00:24:22.120 --> 00:24:24.680
that didn't feel Pythonic to make it feel like--


00:24:24.680 --> 00:24:26.160
- So you wrote your own,


00:24:26.160 --> 00:24:29.160
like your PyRevit wrapper a little bit


00:24:29.160 --> 00:24:31.480
that would then make it easier, right?


00:24:31.480 --> 00:24:32.960
And make it feel more natural?


00:24:32.960 --> 00:24:33.780
And then you--


00:24:33.780 --> 00:24:36.240
- Yeah, so at the time I was writing Python code


00:24:36.240 --> 00:24:37.680
and the PyRevit was sort of,


00:24:37.680 --> 00:24:40.240
it was kind of the environment.


00:24:40.240 --> 00:24:42.460
So the idea for PyRevit is you could literally


00:24:42.460 --> 00:24:46.720
just save this .py file in a folder and put a PNG icon


00:24:46.720 --> 00:24:49.240
and it would sort of load it up that file


00:24:49.240 --> 00:24:51.020
and add it to the Revit ribbon


00:24:51.020 --> 00:24:52.300
so someone could click on it.


00:24:52.300 --> 00:24:54.820
And when he clicked, it would load your source code


00:24:54.820 --> 00:24:57.020
and feed it into the Iron Python engine.


00:24:57.020 --> 00:24:59.500
So it would just help you kind of, you know,


00:24:59.500 --> 00:25:01.660
establish this environment


00:25:01.660 --> 00:25:03.700
and you didn't have to compile, you know,


00:25:03.700 --> 00:25:05.700
an add-in and restart Revit.


00:25:05.700 --> 00:25:08.900
And then Revit Python wrapper was that


00:25:08.900 --> 00:25:10.280
every script that I had,


00:25:10.280 --> 00:25:12.580
I would just import Revit Python wrapper


00:25:12.580 --> 00:25:14.460
and then just say, you know,


00:25:15.700 --> 00:25:18.640
collector type equals wall, and it would query


00:25:18.640 --> 00:25:20.660
for every wall in the model.


00:25:20.660 --> 00:25:23.160
And I stopped working on this project for a while,


00:25:23.160 --> 00:25:25.020
and then I recently ran into this Revitron,


00:25:25.020 --> 00:25:27.940
which is a much more kind of sophisticated version,


00:25:27.940 --> 00:25:29.320
but essentially the same idea.


00:25:29.320 --> 00:25:32.880
People wanted to write very clean Python,


00:25:32.880 --> 00:25:35.740
but operate kind of on top of the Revit API


00:25:35.740 --> 00:25:40.120
without having to deal with the non-Python look and feel.


00:25:40.120 --> 00:25:42.060
- Interesting, okay, yeah.


00:25:43.620 --> 00:25:46.300
And even has its own CLI.


00:25:46.300 --> 00:25:47.860
- Oh yeah, yeah.


00:25:47.860 --> 00:25:50.540
- I guess it integrates with the PyRevit CLI, right?


00:25:50.540 --> 00:25:53.820
So one of the things that's interesting about this,


00:25:53.820 --> 00:25:57.540
this PyRevit, which if I go farther than a back,


00:25:57.540 --> 00:26:02.020
I'll find it, is that you can use Python


00:26:02.020 --> 00:26:06.660
to build these little toolbar buttons or widgets, right?


00:26:06.660 --> 00:26:08.180
- Yeah.


00:26:08.180 --> 00:26:10.420
- And the way you do it is, as you sort of described,


00:26:10.420 --> 00:26:15.420
there's this super convention of all these directory,


00:26:15.420 --> 00:26:17.220
this directory structure, right?


00:26:17.220 --> 00:26:20.020
Like if you put this file there


00:26:20.020 --> 00:26:22.220
and then the Python file in like some location


00:26:22.220 --> 00:26:24.820
that can, it'll trigger the discovery


00:26:24.820 --> 00:26:27.940
that'll then create like some kind of icon


00:26:27.940 --> 00:26:29.620
and action in there, right?


00:26:29.620 --> 00:26:30.780
Maybe tell us about that a bit.


00:26:30.780 --> 00:26:32.060
- Yeah, and under the hood,


00:26:32.060 --> 00:26:33.700
if you were to write this in C#,


00:26:33.700 --> 00:26:35.420
there would be a whole bunch of boilerplate


00:26:35.420 --> 00:26:36.760
that you would have to add


00:26:36.760 --> 00:26:38.860
for how those buttons get instantiated


00:26:38.860 --> 00:26:40.020
and loaded into the UI.


00:26:40.020 --> 00:26:43.120
And one thing that I've sort of witnessed,


00:26:43.120 --> 00:26:45.360
seen PyRevit project grow,


00:26:45.360 --> 00:26:48.800
you know, I was one of the kind of early users, adopters,


00:26:48.800 --> 00:26:53.440
and it was this huge barrier


00:26:53.440 --> 00:26:55.400
for people who wanted to automate Revit


00:26:55.400 --> 00:26:57.680
because you had to learn C#


00:26:57.680 --> 00:27:00.960
and the add-ins were difficult to build.


00:27:00.960 --> 00:27:03.640
You know, it was just this big kind of--


00:27:03.640 --> 00:27:05.600
- You probably had to learn interfaces


00:27:05.600 --> 00:27:07.520
and how to implement them and all that kind of stuff.


00:27:07.520 --> 00:27:12.520
And you had to go around the compile settings


00:27:12.520 --> 00:27:14.920
and think around with it to get it to work.


00:27:14.920 --> 00:27:17.040
And you had to compile for different versions of Revit.


00:27:17.040 --> 00:27:19.240
And it was really difficult, at least for me.


00:27:19.240 --> 00:27:21.280
Maybe it's easier for some people.


00:27:21.280 --> 00:27:24.640
By Revit, you could literally just duplicate this folder


00:27:24.640 --> 00:27:27.920
and open a new Python file, start messing with it.


00:27:27.920 --> 00:27:29.720
And every time you click, it would rerun.


00:27:29.720 --> 00:27:31.680
You wouldn't even have to reload anything


00:27:31.680 --> 00:27:33.160
'cause you would just read the source code


00:27:33.160 --> 00:27:35.080
and feed it to the iron Python interpreter.


00:27:35.080 --> 00:27:35.960
So for the first time,


00:27:35.960 --> 00:27:39.120
I felt like I had this ability to kind of iterate quickly


00:27:39.120 --> 00:27:41.920
and explore and test things out.


00:27:41.920 --> 00:27:45.280
So it was a totally different experience.


00:27:45.280 --> 00:27:47.840
- Yeah, that's great.


00:27:47.840 --> 00:27:51.480
I'm looking at the code sample here for PyRivet,


00:27:51.480 --> 00:27:54.640
the create your first command example.


00:27:54.640 --> 00:27:56.600
And I see exactly what you're talking about


00:27:56.600 --> 00:28:00.800
with this sort of C# abstractions


00:28:00.800 --> 00:28:02.360
leaking into the Python world, right?


00:28:02.360 --> 00:28:04.040
- Yeah, there's definitely a little bit.


00:28:04.040 --> 00:28:04.880
- Yeah, 'cause it says,


00:28:04.880 --> 00:28:06.280
oh, look how easy it is to build this.


00:28:06.280 --> 00:28:07.420
You just drop this in this here


00:28:07.420 --> 00:28:11.520
and you put your Python file in the folder


00:28:11.520 --> 00:28:14.380
that is like your button where it contains your icons.


00:28:14.380 --> 00:28:19.260
And then you write capital DB, capital, you know,


00:28:19.260 --> 00:28:22.360
capital F filtered, capital E element, capital collector.


00:28:22.360 --> 00:28:24.940
So filtered element collector of da da da, right?


00:28:24.940 --> 00:28:29.640
It's real similar to what you would expect


00:28:29.640 --> 00:28:32.300
from that language.


00:28:32.300 --> 00:28:36.420
that language is idioms and not Python idioms, right?


00:28:36.420 --> 00:28:39.420
- Yeah, Python wrapper, I started wrapping these classes.


00:28:39.420 --> 00:28:41.300
So for example, the filtered element collector,


00:28:41.300 --> 00:28:43.140
I mean, that's a pretty long name


00:28:43.140 --> 00:28:45.400
that I wouldn't give it to a Python class usually.


00:28:45.400 --> 00:28:47.800
So I just called it the collector


00:28:47.800 --> 00:28:49.340
and I created a class


00:28:49.340 --> 00:28:51.140
that wrapped the filtered element collector.


00:28:51.140 --> 00:28:52.740
So instead of writing something like this,


00:28:52.740 --> 00:28:57.140
you would say, you know, collector type equals wall


00:28:57.140 --> 00:28:59.220
and you could write, you know, wall as a, you know,


00:28:59.220 --> 00:29:01.380
as an enum and you would sort of,


00:29:01.380 --> 00:29:03.980
basically output this code that you're seeing there.


00:29:03.980 --> 00:29:06.020
But the problem is you can't really avoid it


00:29:06.020 --> 00:29:07.980
because even though you wrapped collector,


00:29:07.980 --> 00:29:11.420
there are like 8,000 other like C# classes


00:29:11.420 --> 00:29:13.820
that I'm not going to wrap them individually.


00:29:13.820 --> 00:29:15.660
So like eventually it just kind of leaks.


00:29:15.660 --> 00:29:18.700
You just can't, you can't do the whole thing.


00:29:18.700 --> 00:29:20.160
- Yeah, somewhere there's some function


00:29:20.160 --> 00:29:21.620
you can't get in front of


00:29:21.620 --> 00:29:23.700
and it returns one of these things.


00:29:23.700 --> 00:29:24.540
- Yeah, exactly.


00:29:24.540 --> 00:29:25.360
- And there it is, right?


00:29:25.360 --> 00:29:26.200
Exactly.


00:29:26.200 --> 00:29:27.980
- And I tried, you know, I tried at some point,


00:29:27.980 --> 00:29:29.040
I had these, you know,


00:29:30.100 --> 00:29:34.740
wrappers that would take the return and wrap those into some sort of generic wrapper, and


00:29:34.740 --> 00:29:38.980
it would get so complicated, and people that, you know, they couldn't figure out what it was doing,


00:29:38.980 --> 00:29:44.260
so that's why that Revit Python project ended up just kind of being abandoned at some point,


00:29:44.260 --> 00:29:49.380
and I wasn't as involved with it anymore, so it just kind of sat there, but that was the idea.


00:29:49.380 --> 00:29:54.900
If you look at an example for that one, you see that it looks a lot more Python-like.


00:29:56.100 --> 00:29:58.740
Yeah, yeah, absolutely.


00:29:58.740 --> 00:30:01.940
Let's find a quick example, maybe.


00:30:01.940 --> 00:30:06.540
I'm going to check out the test.


00:30:06.540 --> 00:30:08.860
How's that?


00:30:08.860 --> 00:30:11.940
Yeah, I'm clearly seeing stuff that looks more like Python


00:30:11.940 --> 00:30:12.440
in here.


00:30:12.440 --> 00:30:13.300
It's fantastic, right?


00:30:13.300 --> 00:30:16.020
Like, you know, variable names.


00:30:16.020 --> 00:30:18.380
Another thing that you spoke about that--


00:30:18.380 --> 00:30:21.140
I don't even know what you were doing to solve this,


00:30:21.140 --> 00:30:24.220
but you said that you had to somehow adapt to things


00:30:24.220 --> 00:30:27.700
like out parameters and ref parameters,


00:30:27.700 --> 00:30:30.500
which is a certain way to have a,


00:30:30.500 --> 00:30:32.860
instead of doing pass by value,


00:30:32.860 --> 00:30:35.060
so you can actually modify the reference itself


00:30:35.060 --> 00:30:36.300
in the parameter.


00:30:36.300 --> 00:30:40.020
It's a little bit like passing a pointer to a pointer


00:30:40.020 --> 00:30:41.860
in C or something like that,


00:30:41.860 --> 00:30:44.860
where you can change the pointer itself inside the function.


00:30:44.860 --> 00:30:48.980
What did they do in Python to deal with that?


00:30:48.980 --> 00:30:49.820
Let's see.


00:30:49.820 --> 00:30:51.340
I don't know how to do that in Python.


00:30:51.340 --> 00:30:52.580
- Python has a special,


00:30:52.580 --> 00:30:53.660
I don't remember cause it's been a while.


00:30:53.660 --> 00:30:55.460
- Oh, okay, so in Iron Python,


00:30:55.460 --> 00:30:57.300
there's like an out or something, okay.


00:30:57.300 --> 00:31:01.160
- Yeah, so you import some special Iron Python object


00:31:01.160 --> 00:31:04.520
and that becomes your reference and you pass that.


00:31:04.520 --> 00:31:09.160
So, you know, Iron Python has these weird kind of ways


00:31:09.160 --> 00:31:10.900
of handling those differences.


00:31:10.900 --> 00:31:14.020
What's difficult is that it's a very niche thing.


00:31:14.020 --> 00:31:16.600
So when you run into a problem with those,


00:31:16.600 --> 00:31:18.020
there's not a whole lot of people


00:31:18.020 --> 00:31:19.980
like trying to solve this, you know?


00:31:19.980 --> 00:31:22.140
So it's always a little bit difficult too.


00:31:22.140 --> 00:31:24.780
I've had that sort of scenario before


00:31:24.780 --> 00:31:28.220
and it's not very often fun.


00:31:28.220 --> 00:31:31.220
And I remember specifically one time


00:31:31.220 --> 00:31:33.300
there was something I was trying to do with this code


00:31:33.300 --> 00:31:38.300
and it just was not responding in any way that I expected.


00:31:38.300 --> 00:31:41.020
And I was at my wits end.


00:31:41.020 --> 00:31:42.300
I'm like, I'm just gonna Google this.


00:31:42.300 --> 00:31:44.460
I'm just gonna just find whatever I can.


00:31:44.460 --> 00:31:46.780
And the only answer I could find was a blog post


00:31:46.780 --> 00:31:48.140
I wrote about it six months ago.


00:31:48.140 --> 00:31:49.840
I'm like, well, that's it.


00:31:49.840 --> 00:31:50.680
We're done.


00:31:50.680 --> 00:31:51.740
There's no hope for me now.


00:31:51.740 --> 00:31:54.620
'Cause I'm sure I've tried, I can't do it.


00:31:54.620 --> 00:31:56.620
The only thing I can find is some dumb blog post


00:31:56.620 --> 00:31:58.400
that didn't really answer the question I wrote about it.


00:31:58.400 --> 00:31:59.240
So here we go.


00:31:59.240 --> 00:32:02.220
So tell me, yeah, so tell me about it.


00:32:02.220 --> 00:32:03.540
Yeah, go ahead.


00:32:03.540 --> 00:32:05.900
- On Iron Python, a couple of times I had issues.


00:32:05.900 --> 00:32:08.840
My only resource was to go into the GitHub project


00:32:08.840 --> 00:32:10.180
and actually post an issue.


00:32:10.180 --> 00:32:13.360
And I said, you know, here's a Stack Overflow question.


00:32:13.360 --> 00:32:16.820
No responses, I'm completely at lost here, you know?


00:32:16.820 --> 00:32:20.860
- Yeah, well, that's such one of the such a big challenge


00:32:20.860 --> 00:32:24.220
of using one of these or the niche interpreters


00:32:24.220 --> 00:32:28.060
or runtimes because when you need help,


00:32:28.060 --> 00:32:30.940
there's no one to help you.


00:32:30.940 --> 00:32:34.980
And if it comes down to some little weird internal behavior,


00:32:34.980 --> 00:32:36.500
right, that behavior might be different.


00:32:36.500 --> 00:32:38.100
And just 'cause people, they'll tell you,


00:32:38.100 --> 00:32:39.340
well, this is how it works in CPython.


00:32:39.340 --> 00:32:40.180
You're like, well, I know,


00:32:40.180 --> 00:32:42.380
but that's not how it works for me right now.


00:32:42.380 --> 00:32:43.220
- Right.


00:32:43.220 --> 00:32:44.040
- Can you help me?


00:32:44.040 --> 00:32:45.660
Like, no, I don't know anything about that, right?


00:32:45.660 --> 00:32:46.700
It's a challenge.


00:32:46.700 --> 00:32:48.540
- Yeah, and if you're trying to, you know,


00:32:48.540 --> 00:32:51.180
post a reproducible example in Stack Overflow


00:32:51.180 --> 00:32:53.660
and you have to have Revit open, for example,


00:32:53.660 --> 00:32:54.880
to execute this.


00:32:54.880 --> 00:32:58.800
If you're trying to deal with some nuance of Iron Python


00:32:58.800 --> 00:33:02.060
within this environment, it's really, really difficult.


00:33:02.060 --> 00:33:03.300
- Oh my gosh.


00:33:03.300 --> 00:33:05.900
Yeah, I can see why you would wanna get away from it.


00:33:05.900 --> 00:33:08.940
I'm guessing that Python.net makes this easier,


00:33:08.940 --> 00:33:11.180
but maybe it's still the same.


00:33:11.180 --> 00:33:12.020
I'm not entirely sure.


00:33:12.020 --> 00:33:13.900
I would like to learn more about that one, but--


00:33:13.900 --> 00:33:15.220
- Yeah, same here.


00:33:15.220 --> 00:33:16.500
- Yeah.


00:33:16.500 --> 00:33:17.340
Let's see.


00:33:17.340 --> 00:33:20.500
I just want to say, hey, Bhavani said,


00:33:20.500 --> 00:33:23.140
finally could catch up on the live stream here.


00:33:23.140 --> 00:33:24.020
Big fan of Python.


00:33:24.020 --> 00:33:26.060
And just people listening, if you


00:33:26.060 --> 00:33:28.820
get the chance to be grateful to drop by the live stream we


00:33:28.820 --> 00:33:31.940
do on YouTube, just go to talkpython.fm/youtube.


00:33:31.940 --> 00:33:33.020
YouTube can be part of it.


00:33:33.020 --> 00:33:36.220
It's always fun to get input from everyone out there.


00:33:36.220 --> 00:33:37.300
All right.


00:33:37.300 --> 00:33:40.420
Give us some examples of the types of things


00:33:40.420 --> 00:33:45.220
that you are able to do with Python and automated Revit.


00:33:45.220 --> 00:33:45.920
There's a talk.


00:33:45.920 --> 00:33:47.740
I'll go ahead and link to the talk that you gave


00:33:47.740 --> 00:33:52.000
at a meetup in San Francisco at Pine, Pine-sla?


00:33:52.000 --> 00:33:53.440
Hopefully I'm saying that correctly.


00:33:53.440 --> 00:33:54.280
- Yeah, that's right.


00:33:54.280 --> 00:33:56.240
- Yeah, and you talked about,


00:33:56.240 --> 00:33:57.240
there's a lot of nice graphics,


00:33:57.240 --> 00:33:58.600
and you talked a lot about what you've done


00:33:58.600 --> 00:34:02.000
at various projects and stuff.


00:34:02.000 --> 00:34:03.520
Give us some concrete examples.


00:34:03.520 --> 00:34:05.300
Like, it's all great in practice


00:34:05.300 --> 00:34:06.320
to say you could automate stuff,


00:34:06.320 --> 00:34:08.420
but like, what did you actually do?


00:34:08.420 --> 00:34:11.720
- Yeah, so there was a lot of those kind of very boring,


00:34:11.720 --> 00:34:14.680
you know, automate and moving tags type of thing.


00:34:14.680 --> 00:34:17.360
Some of the other bigger projects I worked on,


00:34:17.360 --> 00:34:19.440
at the time I was working at WeWork.


00:34:19.440 --> 00:34:23.600
- This is the fast growth time of WeWork as well, right?


00:34:23.600 --> 00:34:25.680
- Yeah, yeah, that's right.


00:34:25.680 --> 00:34:30.120
So, when I joined WeWork, it was a relatively small team.


00:34:30.120 --> 00:34:34.200
I think the built-in information modeling team,


00:34:34.200 --> 00:34:35.640
which is the team that I had joined,


00:34:35.640 --> 00:34:38.940
had just a handful, like four, five people.


00:34:38.940 --> 00:34:42.120
And I think the company as a whole was maybe 800.


00:34:42.120 --> 00:34:44.280
And when I left four years later,


00:34:44.280 --> 00:34:46.680
they were at around 10,000 employees.


00:34:46.680 --> 00:34:47.520
- Oh my gosh.


00:34:47.520 --> 00:34:50.060
- And then the building department,


00:34:50.060 --> 00:34:52.480
the design building and design department,


00:34:52.480 --> 00:34:55.460
initially was open in one or two buildings a month.


00:34:55.460 --> 00:34:59.920
And by the time I left, they were open in 25 or 30.


00:34:59.920 --> 00:35:04.400
So, all other kind of,


00:35:04.400 --> 00:35:07.160
we were drama side of what happened within the company,


00:35:07.160 --> 00:35:10.120
within the kind of design and architecture department,


00:35:10.120 --> 00:35:12.320
it was just, it was really interesting to see.


00:35:12.320 --> 00:35:13.160
- Yeah.


00:35:14.080 --> 00:35:17.160
Because traditionally, companies build in buildings,


00:35:17.160 --> 00:35:18.940
they're doing that as a service.


00:35:18.940 --> 00:35:21.800
So they're an architecture office that you hire.


00:35:21.800 --> 00:35:23.520
And WeWork was one of those examples


00:35:23.520 --> 00:35:26.480
where you had this kind of vertical integration.


00:35:26.480 --> 00:35:28.640
They were the owners, they were the operators,


00:35:28.640 --> 00:35:30.680
they were the designers, they were the builders,


00:35:30.680 --> 00:35:35.000
they even bought, they acquired a general contractor.


00:35:35.000 --> 00:35:37.840
So you had this huge opportunity to optimize


00:35:37.840 --> 00:35:38.960
and to integrate.


00:35:38.960 --> 00:35:40.840
So some of the things that we did,


00:35:40.840 --> 00:35:42.640
like one of the projects I worked there


00:35:42.640 --> 00:35:47.640
was related to integrating data from the earlier design


00:35:47.640 --> 00:35:51.280
process into everything that would happen downstream.


00:35:51.280 --> 00:35:55.360
So for example, as designers were working on buildings


00:35:55.360 --> 00:35:57.640
and trying to get them through the approval process,


00:35:57.640 --> 00:36:01.880
as soon as this project was starting to materialize,


00:36:01.880 --> 00:36:05.080
we wanted to get those spaces fed


00:36:05.080 --> 00:36:07.040
into the sales pipeline.


00:36:07.040 --> 00:36:09.640
So we would actually build Revit integrations


00:36:09.640 --> 00:36:13.880
that would extract data from these models


00:36:13.880 --> 00:36:16.040
and feed them to other parts of the company.


00:36:16.040 --> 00:36:17.080
So one of them was related to--


00:36:17.080 --> 00:36:18.640
- Interesting.


00:36:18.640 --> 00:36:20.400
- Yeah, to figure out how many offices


00:36:20.400 --> 00:36:21.720
are going to be in this building,


00:36:21.720 --> 00:36:24.800
how big are they, how many desks are in each one,


00:36:24.800 --> 00:36:26.600
and essentially integrate that, for example,


00:36:26.600 --> 00:36:29.080
with Salesforce so that the sales team


00:36:29.080 --> 00:36:31.560
could start selling them.


00:36:31.560 --> 00:36:34.280
We did things with supply chain as well.


00:36:34.280 --> 00:36:37.480
So we have logistics company that would be trying


00:36:37.480 --> 00:36:40.800
to orchestrate shipment off, for example,


00:36:40.800 --> 00:36:43.500
these chairs and couches that you see in the photo,


00:36:43.500 --> 00:36:45.660
they would need to be placed at warehouses


00:36:45.660 --> 00:36:47.780
and then delivered to buildings before opening.


00:36:47.780 --> 00:36:50.960
And they turned these buildings around really quickly.


00:36:50.960 --> 00:36:55.960
So it was really important that they had kind of insight.


00:36:55.960 --> 00:36:59.420
So as people were designing these buildings,


00:36:59.420 --> 00:37:02.580
we could actually start quantifying what was being used,


00:37:02.580 --> 00:37:04.100
what was going to be assigned,


00:37:04.100 --> 00:37:07.460
and then get the data sort of out of the model,


00:37:07.460 --> 00:37:08.860
which is not very, you know,


00:37:08.860 --> 00:37:10.660
it's essentially a file that sits there


00:37:10.660 --> 00:37:13.180
and we would use Python, for example,


00:37:13.180 --> 00:37:14.540
to quantify these things,


00:37:14.540 --> 00:37:16.420
pull the data out and then, you know,


00:37:16.420 --> 00:37:17.900
send them on to other platforms.


00:37:17.900 --> 00:37:20.280
So it's sort of a little bit of kind of data wrangling.


00:37:20.280 --> 00:37:23.660
- Yeah, it's like JIT interior design,


00:37:23.660 --> 00:37:25.500
just in time, right?


00:37:25.500 --> 00:37:27.140
We're gonna need this here by Tuesday,


00:37:27.140 --> 00:37:28.980
so we're gonna automate it.


00:37:28.980 --> 00:37:30.900
So one of the things you have to do


00:37:30.900 --> 00:37:31.860
is you have to figure out how,


00:37:31.860 --> 00:37:37.060
maybe describe for, I'm sure not everyone's been inside of a WeWork before, give us a quick sense


00:37:37.060 --> 00:37:41.140
of what is the inside of a WeWork look like? - Yeah, so WeWork...


00:37:41.140 --> 00:37:45.540
- Or a lot of these co-working spaces, but WeWork is probably one of the bigger ones.


00:37:45.540 --> 00:37:54.980
- Yeah, so WeWork, they would take empty floor spaces and they would use sort of storefronts,


00:37:54.980 --> 00:38:01.140
kind of glass their storefronts and subdivide them into small offices, as small as a single desk,


00:38:01.140 --> 00:38:07.220
or a little cubicle, and they could be as big as 15 or 20 person office.


00:38:07.220 --> 00:38:10.500
And they were really efficient in how they kind of packed these desks.


00:38:10.500 --> 00:38:13.140
And they would do it in a way that it was very efficient for them.


00:38:13.140 --> 00:38:19.060
They would pack these offices really close, but then they would create these really nice,


00:38:19.060 --> 00:38:25.540
beautiful, shared common spaces. So when you would walk into WeWork, you would often see these very


00:38:25.540 --> 00:38:30.300
kind of slick hip spaces, well-designed music playing.


00:38:30.300 --> 00:38:36.220
So it was this kind of nice experience, this cool kitchen, coffee area.


00:38:36.220 --> 00:38:39.220
And I think they were really good at it.


00:38:39.220 --> 00:38:44.040
I got to work out of WeWorks for many years, and it was a really nice change from my previous


00:38:44.040 --> 00:38:45.740
kind of office environment.


00:38:45.740 --> 00:38:49.660
So even as a product, I actually really enjoy what they were building.


00:38:49.660 --> 00:38:50.660
>> Nice.


00:38:50.660 --> 00:38:54.260
Yeah, so one of the things you spoke about is setting up some automation to figure out,


00:38:54.260 --> 00:38:57.100
well, how should we lay out these tables,


00:38:57.100 --> 00:39:00.420
either this open space, like just hangout area tables,


00:39:00.420 --> 00:39:04.820
or like the co-working desks,


00:39:04.820 --> 00:39:07.260
or there's some parts that have like glass,


00:39:07.260 --> 00:39:10.060
clear glass separators, so you have some sort of quiet,


00:39:10.060 --> 00:39:12.180
but it's still, they've all gotta be laid out, right?


00:39:12.180 --> 00:39:14.320
And you can say, okay, if we adjust the walls like this


00:39:14.320 --> 00:39:17.980
or do that, then here's the arrangement, right?


00:39:17.980 --> 00:39:22.660
- Yeah, a couple of my coworkers were trying to figure out


00:39:22.660 --> 00:39:27.020
how to automate this so that as architects are taking this kind of big floor plate and


00:39:27.020 --> 00:39:30.660
they're slicing it, they're generally trying to figure out how the circulation is going


00:39:30.660 --> 00:39:34.700
to work. And then you build these kind of long blocks, and then you're going to start


00:39:34.700 --> 00:39:38.340
subdividing them to offices. And then as you start subdividing them, and then you've got


00:39:38.340 --> 00:39:42.300
to figure out how the desks are going to work. And then you have columns. So actually like


00:39:42.300 --> 00:39:47.740
laying them out and getting kind of an efficient algorithm can be kind of time consuming. So


00:39:47.740 --> 00:39:51.820
some folks from the data and research team,


00:39:51.820 --> 00:39:53.040
they were writing algorithms.


00:39:53.040 --> 00:39:56.420
And the first one that I saw was actually written in Python.


00:39:56.420 --> 00:40:01.500
And I think it was served like using a Flask API,


00:40:01.500 --> 00:40:04.220
but the idea is that you could pass it a polygon


00:40:04.220 --> 00:40:05.700
and you would apply these rules


00:40:05.700 --> 00:40:10.020
about how you can lay out desks within this kind of polygon.


00:40:10.020 --> 00:40:12.180
You would say, the door is here,


00:40:12.180 --> 00:40:14.020
do your best to lay out desks.


00:40:14.020 --> 00:40:15.380
And you would try to do that.


00:40:15.380 --> 00:40:18.300
It was fairly straightforward math.


00:40:18.300 --> 00:40:21.260
It wasn't artificial intelligence


00:40:21.260 --> 00:40:22.740
or some sort of machine learning.


00:40:22.740 --> 00:40:25.340
It was actually pretty straightforward brute force,


00:40:25.340 --> 00:40:27.700
if I start laying these out along the edges.


00:40:27.700 --> 00:40:29.580
But they were really interesting.


00:40:29.580 --> 00:40:32.220
They did some really interesting research on that.


00:40:32.220 --> 00:40:33.340
- Yeah, that's cool.


00:40:33.340 --> 00:40:35.540
A lot of nice examples of what you can do


00:40:35.540 --> 00:40:38.000
with a little bit of Python, a little bit of automation,


00:40:38.000 --> 00:40:41.300
even if you've got to somehow mash that together


00:40:41.300 --> 00:40:44.500
with a .NET or I guess if it was a Java API,


00:40:44.500 --> 00:40:47.940
you could use Jython or some other thing like that, right?


00:40:47.940 --> 00:40:49.620
- Yeah, and this one specifically,


00:40:49.620 --> 00:40:52.340
the way we got around it is by actually building it


00:40:52.340 --> 00:40:57.340
as an API and have a C# add-in called API


00:40:57.340 --> 00:40:58.860
to do the calculation.


00:40:58.860 --> 00:41:01.980
So that way we didn't have to deal with it.


00:41:01.980 --> 00:41:04.220
- Nice, yeah, that's perfect.


00:41:04.220 --> 00:41:07.540
All right, and then let's talk about this other thing


00:41:07.540 --> 00:41:11.740
that you've been working on, aec.works,


00:41:11.740 --> 00:41:15.260
which is Architectural Engineering and Construction Works.


00:41:15.260 --> 00:41:16.500
And tell us a bit about this project.


00:41:16.500 --> 00:41:20.660
This is a website you built for like raising the visibility


00:41:20.660 --> 00:41:22.500
of cool companies in the space.


00:41:22.500 --> 00:41:23.620
- Yeah, yeah, definitely.


00:41:23.620 --> 00:41:26.680
So this actually started as, you know,


00:41:26.680 --> 00:41:28.740
when I was an engineer at WeWork,


00:41:28.740 --> 00:41:32.780
and I was kind of seeing a lot of really interesting


00:41:32.780 --> 00:41:34.780
companies kind of start to show up


00:41:34.780 --> 00:41:39.780
and try to build either software products,


00:41:39.820 --> 00:41:45.200
or kind of try to take a technology and build a new kind of companies within AC


00:41:45.200 --> 00:41:48.500
that were trying to use technology in some interesting way.


00:41:48.500 --> 00:41:54.340
And I started keeping a list of it, you know, a Google sheet or airtable form or something.


00:41:54.340 --> 00:41:57.880
And this list started growing, so it started with four and five,


00:41:57.880 --> 00:42:00.000
and eventually I had 20 or 30 of them,


00:42:00.000 --> 00:42:04.120
and I would often share them in different kind of community forums.


00:42:04.120 --> 00:42:08.920
And then I thought it would be interesting if I could somehow make that available


00:42:08.920 --> 00:42:12.240
and maybe even so that people could contribute and edit them.


00:42:12.240 --> 00:42:14.820
So basically build this out.


00:42:14.820 --> 00:42:17.580
It's a Django,


00:42:17.580 --> 00:42:19.900
somewhat traditional Django app,


00:42:19.900 --> 00:42:23.480
except that on the front end instead of using templates,


00:42:23.480 --> 00:42:25.160
I just use Vue.js.


00:42:25.160 --> 00:42:26.920
So it's front end,


00:42:26.920 --> 00:42:29.400
back end separation type project.


00:42:29.400 --> 00:42:31.680
The idea is that you can create


00:42:31.680 --> 00:42:34.960
these entries that represent these different companies or products,


00:42:34.960 --> 00:42:36.920
and then it just displays them.


00:42:36.920 --> 00:42:39.600
It's pretty simple, nothing really crazy.


00:42:39.600 --> 00:42:41.880
- Nice, yeah, I will highlight a couple


00:42:41.880 --> 00:42:42.920
just to give people a sense,


00:42:42.920 --> 00:42:44.120
but there's a way to come here and say,


00:42:44.120 --> 00:42:47.340
suggest a company that's doing innovative work here, right?


00:42:47.340 --> 00:42:48.320
So if people are out there like,


00:42:48.320 --> 00:42:49.440
why is my company out here?


00:42:49.440 --> 00:42:50.800
Well, there's a button, right?


00:42:50.800 --> 00:42:52.160
- Yeah, exactly.


00:42:52.160 --> 00:42:54.620
- All right, so just briefly,


00:42:54.620 --> 00:42:57.680
let's talk about two of them that are maybe noteworthy.


00:42:57.680 --> 00:43:00.360
One right at the top of the moment


00:43:00.360 --> 00:43:02.760
that says, it's called Speckle.


00:43:02.760 --> 00:43:05.120
And let's see, it says,


00:43:05.120 --> 00:43:09.840
engineers, designers, and hackers in the entire organization rely on us for interoperability


00:43:09.840 --> 00:43:18.160
and automation. So it's like source control, collaboration, versioning, notification for


00:43:18.160 --> 00:43:24.720
architectural construction folks. - Yeah, it's a little bit like, you know,


00:43:24.720 --> 00:43:30.480
AC, architecture engineering construction, you know, data wrangling on steroids, right? So,


00:43:30.480 --> 00:43:34.800
you know, when you're, you know, if you're working with software, you can pretty much


00:43:34.800 --> 00:43:41.360
always just like make a JSON and pass it around, right? And you can, as long as you can get


00:43:41.360 --> 00:43:46.380
at least some basic data types. Now, if you have to pass around a wall, it's much more


00:43:46.380 --> 00:43:51.880
difficult than just passing around a string. And what type of wall is it? Where is it located?


00:43:51.880 --> 00:43:57.080
How big it is? It's complicated. So you have all these different desktop applications,


00:43:57.080 --> 00:44:01.680
and I've highlighted some that are used primarily within architecture, like Revit, for example.


00:44:01.680 --> 00:44:05.880
there's all these other applications for other disciplines within the construction


00:44:05.880 --> 00:44:07.280
engineering industry.


00:44:07.280 --> 00:44:10.800
>> Right, some of the ones they highlight are like Unity, Civil 3D,


00:44:10.800 --> 00:44:14.080
E tabs, Blender, Unreal, that kind of stuff, yeah?


00:44:14.080 --> 00:44:15.680
>> Yeah. >> Yeah.


00:44:15.680 --> 00:44:18.080
>> So yeah, the first time Speckle came around,


00:44:18.080 --> 00:44:23.720
I believe it was like an academic project, came out of Europe.


00:44:23.720 --> 00:44:26.920
And what they would do is they would build, for example, an add-in for


00:44:26.920 --> 00:44:28.480
one of these platforms.


00:44:28.480 --> 00:44:31.360
and they would output some sort of serialization


00:44:31.360 --> 00:44:32.920
off these objects.


00:44:32.920 --> 00:44:34.400
And then they would build an add-in


00:44:34.400 --> 00:44:37.240
for another of these desktop apps


00:44:37.240 --> 00:44:39.840
that could read that JSON object


00:44:39.840 --> 00:44:42.400
and deserialize it back into this architectural


00:44:42.400 --> 00:44:45.660
or engineering, whatever, structural beam or something.


00:44:45.660 --> 00:44:48.200
So it was about building all these connectors


00:44:48.200 --> 00:44:49.940
that would plug into these environments


00:44:49.940 --> 00:44:53.720
that weren't very easy to interop data.


00:44:53.720 --> 00:44:54.700
- Right, right.


00:44:54.700 --> 00:44:57.400
- And on top of it, you would have a web platform.


00:44:57.400 --> 00:44:59.520
I think they call it like streams or something.


00:44:59.520 --> 00:45:02.180
And that way you could take data from one thing


00:45:02.180 --> 00:45:03.520
and plug it into another,


00:45:03.520 --> 00:45:05.200
kind of see them all online together


00:45:05.200 --> 00:45:06.940
and share them, for example.


00:45:06.940 --> 00:45:08.760
So there's some really interesting ideas


00:45:08.760 --> 00:45:10.920
about collaborating, tracking them.


00:45:10.920 --> 00:45:12.120
And that's only possible


00:45:12.120 --> 00:45:14.440
because you take them out of these desktop apps


00:45:14.440 --> 00:45:16.600
because a lot of them are not really built


00:45:16.600 --> 00:45:19.440
for this type of collaboration


00:45:19.440 --> 00:45:21.000
or this type of data sharing.


00:45:21.000 --> 00:45:24.400
- Yeah, that's a really interesting idea.


00:45:24.400 --> 00:45:28.580
Like these things do not support any sort of interoperability,


00:45:28.580 --> 00:45:31.580
but if we can just get stuff in and out of any one of them,


00:45:31.580 --> 00:45:33.540
we could be that middle ground, right?


00:45:33.540 --> 00:45:35.140
Yeah, so I don't know a ton about this.


00:45:35.140 --> 00:45:37.420
I really basically just skim the website


00:45:37.420 --> 00:45:38.860
and watch their explainer video,


00:45:38.860 --> 00:45:42.700
but it seems like some pretty cool open source stuff


00:45:42.700 --> 00:45:43.780
for people in this space.


00:45:43.780 --> 00:45:45.940
So they could check that out, right?


00:45:45.940 --> 00:45:47.700
- Yeah, and what's exciting about them


00:45:47.700 --> 00:45:49.620
is that they're actually open source too.


00:45:49.620 --> 00:45:52.420
So, you know, a lot of software in AC


00:45:52.420 --> 00:45:56.060
is they're big companies and they're paid,


00:45:56.060 --> 00:45:58.980
and there's not a lot of example of successful


00:45:58.980 --> 00:46:01.700
open source companies, essentially.


00:46:01.700 --> 00:46:05.300
They've actually been able to become a real company


00:46:05.300 --> 00:46:07.880
with employees and raise money, and they're open source,


00:46:07.880 --> 00:46:10.460
so it's really interesting to see them trying to build


00:46:10.460 --> 00:46:13.260
a successful open source model within the industry.


00:46:13.260 --> 00:46:14.420
- Yeah, absolutely.


00:46:14.420 --> 00:46:18.100
Pradhvana on the livestream says,


00:46:18.100 --> 00:46:23.100
two double high fives for Django, for your alpha.


00:46:23.100 --> 00:46:24.660
AEC, that works.


00:46:24.660 --> 00:46:26.820
All right, so that's Speckle, which is cool.


00:46:26.820 --> 00:46:29.800
And then also Ladybug, Ladybug tools.


00:46:29.800 --> 00:46:32.160
- Yeah, Ladybug is incredible too.


00:46:32.160 --> 00:46:34.460
Ladybug's been around for a while.


00:46:34.460 --> 00:46:35.300
I don't know how long,


00:46:35.300 --> 00:46:38.940
but it was actually one of my first experiences,


00:46:38.940 --> 00:46:40.860
one of the first times I got exposed to open source


00:46:40.860 --> 00:46:42.780
within AEC industry as well.


00:46:42.780 --> 00:46:46.780
But it's essentially, it started,


00:46:46.780 --> 00:46:49.700
It was a bunch of Python tools that would help you


00:46:49.700 --> 00:46:52.020
do kind of environmental analysis.


00:46:52.020 --> 00:46:56.020
And they would basically use like weather data


00:46:56.020 --> 00:46:58.460
and some existing products.


00:46:58.460 --> 00:47:01.060
I forgot that it's been a while since I used this,


00:47:01.060 --> 00:47:02.940
but they would essentially wrap around


00:47:02.940 --> 00:47:06.680
these heavier duty programs that could actually do


00:47:06.680 --> 00:47:10.700
like daylight simulation or like solar analysis,


00:47:10.700 --> 00:47:14.340
but they would build an interface in Python


00:47:14.340 --> 00:47:15.860
that you could use within,


00:47:15.860 --> 00:47:18.080
or Revit wasn't too much later,


00:47:18.080 --> 00:47:20.820
but Rhino and some of these other AC applications.


00:47:20.820 --> 00:47:23.020
And the outcome of it was that


00:47:23.020 --> 00:47:23.940
you would basically,


00:47:23.940 --> 00:47:25.900
it would allow any kind of architect,


00:47:25.900 --> 00:47:28.880
students to essentially take any type of building


00:47:28.880 --> 00:47:30.900
that they were designing and actually run


00:47:30.900 --> 00:47:32.980
and see what does this building look like


00:47:32.980 --> 00:47:34.220
throughout the year?


00:47:34.220 --> 00:47:35.440
What does sun hit?


00:47:35.440 --> 00:47:37.060
Or what does light look like inside?


00:47:37.060 --> 00:47:39.900
And actually render these analytical kind of drawings


00:47:39.900 --> 00:47:41.000
from it.


00:47:41.000 --> 00:47:42.260
So it was really interesting.


00:47:42.260 --> 00:47:46.820
made all of that accessible to a lot of people that wouldn't have been able to otherwise.


00:47:46.820 --> 00:47:49.780
I think it was entirely written in Python for a long time.


00:47:49.780 --> 00:47:54.580
Yeah, it says cross-platform, Ladybug tools, it's written in Python, which can be run almost


00:47:54.580 --> 00:48:00.340
anywhere, and plugged into any geometry engine, which is great. And then it talks about having


00:48:00.340 --> 00:48:06.260
some visual aspects of harnessing the capabilities of CAD to produce a variety of interactive 3D


00:48:06.260 --> 00:48:11.460
graphics, which producing cool interactive graphics in Python is always fun. But this one's


00:48:11.460 --> 00:48:12.900
Python's also free and open source.


00:48:12.900 --> 00:48:14.140
- Yep, that's right.


00:48:14.140 --> 00:48:16.140
I think they've received some grants


00:48:16.140 --> 00:48:19.340
from the Department of Energy or something like that.


00:48:19.340 --> 00:48:21.160
They're pretty well supported.


00:48:21.160 --> 00:48:25.100
- Yeah, and it's 99.8% Python.


00:48:25.100 --> 00:48:28.140
A lot of Python and 0.2% other.


00:48:28.140 --> 00:48:29.820
- It's probably marked down.


00:48:29.820 --> 00:48:32.420
- I'm guessing it's the one shell script


00:48:32.420 --> 00:48:34.980
and the requirements.txt here, so.


00:48:34.980 --> 00:48:36.180
- Yeah, that's right.


00:48:36.180 --> 00:48:37.020
- Pretty awesome, all right.


00:48:37.020 --> 00:48:40.020
So all that stuff is super neat.


00:48:40.020 --> 00:48:43.620
the work that you're doing here to shine a light


00:48:43.620 --> 00:48:45.300
on the different ways we can automate stuff.


00:48:45.300 --> 00:48:47.220
You know, we've in architecture,


00:48:47.220 --> 00:48:51.020
we've got Revit and then the PyRevit


00:48:51.020 --> 00:48:54.320
and the Python Revit wrapper,


00:48:54.320 --> 00:48:57.100
and then RevTron, you said.


00:48:57.100 --> 00:48:59.660
And then also these open source connectors


00:48:59.660 --> 00:49:02.240
and interoperability platforms are all super neat.


00:49:02.240 --> 00:49:04.260
I do wanna talk to you about one other thing


00:49:04.260 --> 00:49:06.380
that doesn't have a super clear connection,


00:49:06.380 --> 00:49:08.900
but is also, it sounds like it came out of your time


00:49:08.900 --> 00:49:12.420
that we work, the stuff you did with Airtable.


00:49:12.420 --> 00:49:13.260
Is that right?


00:49:13.260 --> 00:49:14.780
- Yeah, yeah, that's right.


00:49:14.780 --> 00:49:17.060
- So Airtable is something that I've seen


00:49:17.060 --> 00:49:18.860
and I've had people tell me that,


00:49:18.860 --> 00:49:20.380
oh, you definitely have to work with Airtable.


00:49:20.380 --> 00:49:22.860
It's amazing, it's like Sheets or Excel,


00:49:22.860 --> 00:49:26.180
but way nicer, or things like that.


00:49:26.180 --> 00:49:28.420
Tell us, tell people out there,


00:49:28.420 --> 00:49:30.100
Airtable's this commercial product, right?


00:49:30.100 --> 00:49:32.140
Tell us about this and then we'll get


00:49:32.140 --> 00:49:34.740
to some Python-sided things in a moment.


00:49:34.740 --> 00:49:37.980
- Yeah, I'm a huge fan of Airtable.


00:49:37.980 --> 00:49:41.100
pretty much since the first time I've sort of run into it,


00:49:41.100 --> 00:49:43.940
I've been a user and I use it for everything,


00:49:43.940 --> 00:49:45.460
personal projects, work,


00:49:45.460 --> 00:49:50.220
but I define it as this kind of Google Sheets meet


00:49:50.220 --> 00:49:51.680
relational database.


00:49:51.680 --> 00:49:54.420
And I think there are other products like it,


00:49:54.420 --> 00:49:57.580
but I find their table just really kind of a joy to use.


00:49:57.580 --> 00:50:01.020
- Yeah, I also feel like there's a Trello Kanban board


00:50:01.020 --> 00:50:04.060
aspect of it as well, right?


00:50:04.060 --> 00:50:07.640
- Yeah, they've been adding quite a few kind of like views


00:50:07.640 --> 00:50:10.560
and tooling on top of the underlying data.


00:50:10.560 --> 00:50:13.820
So there's some interesting things you can do.


00:50:13.820 --> 00:50:18.780
It's not as sort of pure of a kind of tracker as Trello is,


00:50:18.780 --> 00:50:21.720
but you can basically build a Trello-like interface


00:50:21.720 --> 00:50:23.320
and there's a Kanban mode.


00:50:23.320 --> 00:50:25.880
So you can, whatever your roles are,


00:50:25.880 --> 00:50:27.600
if you have certain fields,


00:50:27.600 --> 00:50:30.840
so for example, you could maybe have a table


00:50:30.840 --> 00:50:33.120
with like apartments you're listing, for example,


00:50:33.120 --> 00:50:35.480
and maybe you have a column that is the status,


00:50:35.480 --> 00:50:37.440
whether you've visited them or not.


00:50:37.440 --> 00:50:40.320
And in Google Sheet, you would maybe type it


00:50:40.320 --> 00:50:42.000
or do like a data validation.


00:50:42.000 --> 00:50:43.500
In Airtable, you can actually say,


00:50:43.500 --> 00:50:46.400
this is a field that links to this other table


00:50:46.400 --> 00:50:48.260
and here are the options that I want.


00:50:48.260 --> 00:50:51.680
And you can kind of create truly kind of relational data,


00:50:51.680 --> 00:50:56.700
you know, and have these views be linked to each other


00:50:56.700 --> 00:50:58.840
and in some really interesting ways.


00:50:58.840 --> 00:50:59.680
- Yeah, cool.


00:50:59.680 --> 00:51:03.300
So it's a little bit like spreadsheet


00:51:03.300 --> 00:51:07.420
meets relational database that has relationships


00:51:07.420 --> 00:51:10.940
rather than just random stuff you type in Excel, right?


00:51:10.940 --> 00:51:11.860
- Yeah, that's right.


00:51:11.860 --> 00:51:12.700
- Cool.


00:51:12.700 --> 00:51:14.220
All right, so that's Airtable.


00:51:14.220 --> 00:51:17.020
The Python side of things is you created this thing


00:51:17.020 --> 00:51:20.860
called PyAirtable, which is a Python client


00:51:20.860 --> 00:51:22.620
for the Airtable API, right?


00:51:22.620 --> 00:51:24.380
- Yeah, so I think one of the--


00:51:24.380 --> 00:51:25.940
- Yeah, it's up to you about this.


00:51:25.940 --> 00:51:28.860
- Yeah, it actually, the initial version of this


00:51:28.860 --> 00:51:31.180
was through my time at WeWork as well,


00:51:31.180 --> 00:51:33.020
but we had all these Airtables


00:51:33.020 --> 00:51:38.420
the wood store, I think one of them was like a furniture database, so every row was a piece


00:51:38.420 --> 00:51:42.460
of furniture, and you had all this detail about these objects, you know, maybe some


00:51:42.460 --> 00:51:48.220
data, and now you wanted to use that in other places, or you wanted to feed additional data


00:51:48.220 --> 00:51:55.020
in that table. So Airtable exposed an API, but API, you know, it's somewhat simple and


00:51:55.020 --> 00:52:01.260
minimal, but, you know, it works, it's effective. So this was originally called Airtable Python


00:52:01.260 --> 00:52:09.340
wrapper, recently renamed to PyAirtable, but it's a lightweight Python client around, it


00:52:09.340 --> 00:52:17.180
adds a lot of the nuances about the API itself, some of the data types, and just kind of a


00:52:17.180 --> 00:52:20.900
high-level interface so that you can just kind of import it, and you don't have to go


00:52:20.900 --> 00:52:26.220
spend too much time in the documentation figuring out what all the HTTP requests are, and it


00:52:26.220 --> 00:52:32.380
It just wraps them up and handles a lot of the things and add some nice high level abstractions


00:52:32.380 --> 00:52:34.820
to make it really easy to use.


00:52:34.820 --> 00:52:39.180
I've been working on this project for probably maybe three years now.


00:52:39.180 --> 00:52:42.380
And it was really interesting because in the beginning it was just me and I thought it


00:52:42.380 --> 00:52:45.600
was useful to have this and I just kind of put it out there.


00:52:45.600 --> 00:52:51.820
And it was really fun to see people coming into the repo and actually asking questions


00:52:51.820 --> 00:52:55.180
or opening bug tickets.


00:52:55.180 --> 00:53:02.060
and in some cases, I've had people just do lots of contributions, like this one person


00:53:02.060 --> 00:53:08.600
came out of nowhere one day and just rewrote a test suite for it. I had the initial test


00:53:08.600 --> 00:53:13.500
suite, I guess I didn't know any better, but actually made calls to the API, and it was


00:53:13.500 --> 00:53:18.140
hard because the state wasn't predictable, the tests were a bit slow, so I guess when


00:53:18.140 --> 00:53:22.880
I did that, I didn't know you should sort of mock your requests and run your tests that


00:53:22.880 --> 00:53:28.000
away instead. And they literally came and rewrote all my test suites. So it was really


00:53:28.000 --> 00:53:34.460
fun. And it's been one of the longer running open source projects that I've had. And over


00:53:34.460 --> 00:53:40.400
time I've just gotten better at maintaining, added features, and then more recently just


00:53:40.400 --> 00:53:46.000
rebranded Aspire Table, built new documentation. And it's been really fun to see the project


00:53:46.000 --> 00:53:49.720
and it's got a decent user base.


00:53:49.720 --> 00:53:52.120
So I often see people coming up in there.


00:53:52.120 --> 00:53:54.440
I search GitHub every once in a while


00:53:54.440 --> 00:53:56.320
and I see it used in a lot of different places.


00:53:56.320 --> 00:53:58.120
So it's really cool to see.


00:53:58.120 --> 00:53:59.360
- Yeah, that's fantastic.


00:53:59.360 --> 00:54:03.760
So you said it has 200,000 downloads a month


00:54:03.760 --> 00:54:08.760
and it's listed as the official Python Airtable library,


00:54:08.760 --> 00:54:13.400
right, in the Airtable docs?


00:54:13.400 --> 00:54:17.560
- Yeah, I assume those 200,000, a lot of them are CI.


00:54:17.560 --> 00:54:22.020
I don't know how many are actual direct installs,


00:54:22.020 --> 00:54:23.960
but it does get used.


00:54:23.960 --> 00:54:24.800
Yeah, and then the-


00:54:24.800 --> 00:54:27.400
- That's still not nothing, right?


00:54:27.400 --> 00:54:28.680
Still, that's a lot, right?


00:54:28.680 --> 00:54:29.520
Even if it's a quarter,


00:54:29.520 --> 00:54:32.100
still a ton of people using the library.


00:54:32.100 --> 00:54:33.840
- Yeah, it's pretty exciting.


00:54:33.840 --> 00:54:36.760
And then recently, I think it was about a month ago or so,


00:54:36.760 --> 00:54:38.900
they added to the official documentation


00:54:38.900 --> 00:54:42.320
as the community-driven kind of Python client,


00:54:42.320 --> 00:54:44.520
and they didn't have any others listed before that.


00:54:44.520 --> 00:54:47.880
So I think that's bringing in even more people.


00:54:47.880 --> 00:54:52.200
- Nice, and so you said it also has some ORM capabilities?


00:54:52.200 --> 00:54:53.640
- Yeah, so this was really fun.


00:54:53.640 --> 00:54:55.680
You know, I would always use this library


00:54:55.680 --> 00:54:57.720
or whatever I needed to work with Airtable,


00:54:57.720 --> 00:55:00.880
but I would oftentimes want to build classes


00:55:00.880 --> 00:55:03.080
for the models that I had, you know.


00:55:03.080 --> 00:55:04.560
I was always, I love, you know,


00:55:04.560 --> 00:55:07.480
using Django and these different types of ORMs.


00:55:07.480 --> 00:55:08.680
I think it's a really fun way


00:55:08.680 --> 00:55:10.600
of kind of working with persistence.


00:55:10.600 --> 00:55:13.440
and I wanted to do something like that with Airtable.


00:55:13.440 --> 00:55:16.960
So in the recent release,


00:55:16.960 --> 00:55:20.400
I basically kind of tried to build my own little ORM.


00:55:20.400 --> 00:55:23.280
And the idea is that I would define, for example,


00:55:23.280 --> 00:55:26.480
if I had an Airtable that it was contact,


00:55:26.480 --> 00:55:28.240
name, first name, email, or something,


00:55:28.240 --> 00:55:31.480
I could essentially define a class called contact


00:55:31.480 --> 00:55:34.840
and then inherit from this Airtable base model


00:55:34.840 --> 00:55:36.920
and then define the fields.


00:55:36.920 --> 00:55:39.120
And then I could just instantiate that class


00:55:39.120 --> 00:55:41.460
and say, not save,


00:55:41.460 --> 00:55:44.320
and you would fire the request to basically save it.


00:55:44.320 --> 00:55:46.580
I could update an attribute and then just hit


00:55:46.580 --> 00:55:50.260
save and you would update it or call it delete method.


00:55:50.260 --> 00:55:52.940
It was really fun. I don't know how much that's used.


00:55:52.940 --> 00:55:56.700
It's a new feature, but I had tons of fun building it,


00:55:56.700 --> 00:55:58.880
and I got into descriptors,


00:55:58.880 --> 00:56:00.380
which I had never used before.


00:56:00.380 --> 00:56:01.840
>> I had descriptors a while.


00:56:01.840 --> 00:56:04.220
>> Yeah, they were really crazy.


00:56:04.220 --> 00:56:05.880
You had to define,


00:56:05.880 --> 00:56:08.120
these are the attributes this model should have,


00:56:08.120 --> 00:56:10.180
but when you actually instantiate,


00:56:10.180 --> 00:56:11.440
they behave very differently.


00:56:11.440 --> 00:56:13.400
You want to get the actual value,


00:56:13.400 --> 00:56:16.200
but not the field type.


00:56:16.200 --> 00:56:19.760
Descriptors were the natural answer, I think, to it.


00:56:19.760 --> 00:56:21.480
But it was really fun building it.


00:56:21.480 --> 00:56:23.440
>> Right. You've got text fields,


00:56:23.440 --> 00:56:25.960
and e-mail fields, and even checkbox fields,


00:56:25.960 --> 00:56:29.760
which I don't typically recall from the Django ORM or SQL.


00:56:29.760 --> 00:56:31.960
>> Yeah. That's an air table.


00:56:31.960 --> 00:56:32.680
>> All right.


00:56:32.680 --> 00:56:34.280
>> Yeah.


00:56:34.280 --> 00:56:37.160
>> Yeah. Cool. Yeah, you even have links


00:56:37.160 --> 00:56:39.760
from one Airtable to another.


00:56:39.760 --> 00:56:42.160
Cool, yeah, I didn't realize it had this ORM aspect to it.


00:56:42.160 --> 00:56:43.680
This is very neat.


00:56:43.680 --> 00:56:46.440
- Yeah, so when you fetch a record from Airtable,


00:56:46.440 --> 00:56:49.160
if it's a link, you actually just get the ID.


00:56:49.160 --> 00:56:51.120
It doesn't actually like transverse the link.


00:56:51.120 --> 00:56:55.000
So if you define it as a link field,


00:56:55.000 --> 00:56:58.200
it actually takes that ID and fetches the next one


00:56:58.200 --> 00:57:01.400
and then actually gives you the object instead of the ID.


00:57:01.400 --> 00:57:02.800
- Yeah, perfect.


00:57:02.800 --> 00:57:05.760
Like a foreign key type of relationship thing.


00:57:07.000 --> 00:57:09.040
- Awesome, all right, anything else you wanna throw out there


00:57:09.040 --> 00:57:12.960
about PyAirtable before we wrap this thing up?


00:57:12.960 --> 00:57:15.560
- No, no, that's it.


00:57:15.560 --> 00:57:17.560
- Yeah, so if people are out there using Airtable


00:57:17.560 --> 00:57:19.680
and they wanna treat it like an ORM,


00:57:19.680 --> 00:57:20.800
or they just wanna talk to it,


00:57:20.800 --> 00:57:23.200
yeah, sounds like you should check this out.


00:57:23.200 --> 00:57:26.920
- Yeah, I actually have a blog post I wrote


00:57:26.920 --> 00:57:28.720
when I, maybe about a year ago,


00:57:28.720 --> 00:57:29.560
that was called, you know,


00:57:29.560 --> 00:57:32.640
using Airtable as a backend on Medium,


00:57:32.640 --> 00:57:36.000
and it was the initial version of ac.works


00:57:36.000 --> 00:57:38.080
instead of having a Django backend,


00:57:38.080 --> 00:57:42.440
I actually tried to build it with just an Airtable serving it.


00:57:42.440 --> 00:57:44.600
And it was interesting, it's not,


00:57:44.600 --> 00:57:46.520
you won't have all the guarantees you have


00:57:46.520 --> 00:57:49.280
from a proper database, but it's a really easy way


00:57:49.280 --> 00:57:51.320
if you just wanna put data somewhere


00:57:51.320 --> 00:57:54.880
and be able to fetch it, and you also get a free UI


00:57:54.880 --> 00:57:57.200
that you can see the data and change it.


00:57:57.200 --> 00:57:59.440
- Yeah, it's kinda like the admin backend of Django,


00:57:59.440 --> 00:58:02.320
but it's like this super rich thing


00:58:02.320 --> 00:58:04.720
in the form of Airtable, right?


00:58:04.720 --> 00:58:06.240
- Yeah, exactly.


00:58:06.240 --> 00:58:07.080
- Yeah, very nice.


00:58:07.080 --> 00:58:11.880
I mean, maybe it's not a full ACID transactional database,


00:58:11.880 --> 00:58:13.440
but at the same time,


00:58:13.440 --> 00:58:15.360
if that's where people are putting the data,


00:58:15.360 --> 00:58:17.440
you don't want to put it into Postgres


00:58:17.440 --> 00:58:19.640
and then try to keep the thing in sync or something like that


00:58:19.640 --> 00:58:20.860
doesn't sound fun either, right?


00:58:20.860 --> 00:58:23.640
So use the one place that holds the data


00:58:23.640 --> 00:58:25.040
if that's what you're doing.


00:58:25.040 --> 00:58:27.960
- Yeah, exactly.


00:58:27.960 --> 00:58:29.760
You won't get, I mean, I think if you're doing this,


00:58:29.760 --> 00:58:32.840
you're probably not, you won't be replacing a Postgres,


00:58:32.840 --> 00:58:34.160
but it would maybe be replacing


00:58:34.160 --> 00:58:35.960
just like a local file or something.


00:58:35.960 --> 00:58:36.800
- Yeah.


00:58:36.800 --> 00:58:37.700
- But yeah, you do get, you know,


00:58:37.700 --> 00:58:40.640
you get some form of like revision, you know,


00:58:40.640 --> 00:58:42.980
it keeps track of every change.


00:58:42.980 --> 00:58:45.120
So you get a lot for free.


00:58:45.120 --> 00:58:46.000
- Yeah, very nice.


00:58:46.000 --> 00:58:48.820
Yeah, people should definitely check that out.


00:58:48.820 --> 00:58:51.380
All right, well, we're about out of our time.


00:58:51.380 --> 00:58:54.600
So let me ask you the final two questions here.


00:58:54.600 --> 00:58:56.720
If you're gonna write some Python code,


00:58:56.720 --> 00:58:58.040
what editor do you use?


00:58:58.040 --> 00:59:02.080
- I think these days it's probably always VS Code, right?


00:59:02.080 --> 00:59:05.600
or big percentage of it.


00:59:05.600 --> 00:59:08.560
>> Yeah, there's definitely a big chunk.


00:59:08.560 --> 00:59:12.800
>> My first one was Notepad++,


00:59:12.800 --> 00:59:16.000
then I think I used Sublime for a while,


00:59:16.000 --> 00:59:18.520
and then Atom, and then end up in VS Code.


00:59:18.520 --> 00:59:20.140
These days, I love


00:59:20.140 --> 00:59:24.360
the Python integrations that the team there has built.


00:59:24.360 --> 00:59:28.160
I couldn't really see myself moving away from it any time soon.


00:59:28.160 --> 00:59:28.920
>> Yeah, that's cool.


00:59:28.920 --> 00:59:30.240
>> Very invested in it.


00:59:30.240 --> 00:59:34.840
There's a lot of action going on with VS Code in general,


00:59:34.840 --> 00:59:37.400
and then also in the Python aspect of it.


00:59:37.400 --> 00:59:42.000
I do feel like this sublime to Adam,


00:59:42.000 --> 00:59:45.520
to almost everyone who is on that path,


00:59:45.520 --> 00:59:47.380
VS Code is the destination.


00:59:47.380 --> 00:59:51.880
>> Yeah. It just kept getting easier.


00:59:51.880 --> 00:59:56.800
>> Yeah. Cool. Notable PyPI package.


00:59:56.800 --> 00:59:58.220
I mean, you've already given us


00:59:58.220 --> 01:00:00.780
many different packages and things for people to check out,


01:00:00.780 --> 01:00:03.180
but something that you ran across,


01:00:03.180 --> 01:00:06.180
like, "Oh, this is cool. I really got to tell people about this one."


01:00:06.180 --> 01:00:11.660
>> Yeah. I think this is not a secret package.


01:00:11.660 --> 01:00:12.900
I think it's a pretty well-known,


01:00:12.900 --> 01:00:18.100
but I've just really come to enjoy using Pydantic.


01:00:18.100 --> 01:00:22.300
It's one of those that I think I added on pretty much every project.


01:00:22.300 --> 01:00:26.140
I think it's such a blast just to be able to define


01:00:26.140 --> 01:00:28.440
my classes and set the types.


01:00:28.440 --> 01:00:31.040
I really enjoyed the way the project came together


01:00:31.040 --> 01:00:35.460
and it's one of the standard ones that I added everywhere now.


01:00:35.460 --> 01:00:37.600
>> Yeah. If you have to parse data into


01:00:37.600 --> 01:00:41.900
your model or turn your model into something like JSON,


01:00:41.900 --> 01:00:43.560
it really helps a lot,


01:00:43.560 --> 01:00:45.420
especially if you have a hierarchical model.


01:00:45.420 --> 01:00:47.200
I've got this thing that contains a list of


01:00:47.200 --> 01:00:49.640
other Pydantic models and then you've got to do


01:00:49.640 --> 01:00:53.480
type conversions to date times or to numbers or stuff like that.


01:00:53.480 --> 01:00:54.800
Yeah, it's fantastic.


01:00:54.800 --> 01:00:58.640
>> Yeah, and even on projects where you're collaborating with other people,


01:00:58.640 --> 01:01:04.440
you have a sort of my pie first kind of approach, right?


01:01:04.440 --> 01:01:08.480
Where from the very beginning, your objects are kind of tight.


01:01:08.480 --> 01:01:11.960
And that just makes it a lot easier to collaborate with other people that will


01:01:11.960 --> 01:01:16.280
jump into your project and it's very clear what that object is and all the types.


01:01:16.280 --> 01:01:19.640
So that kind of helps make sure that you stick with it.


01:01:19.640 --> 01:01:21.600
>> Yeah, absolutely, good recommendation.


01:01:21.600 --> 01:01:23.880
I suspect people probably have heard of it as well, but


01:01:23.880 --> 01:01:25.920
It's definitely a good one.


01:01:25.920 --> 01:01:28.280
I've had Samuel on the show to talk about it.


01:01:28.280 --> 01:01:30.200
All right, final call to action.


01:01:30.200 --> 01:01:33.480
People, especially those out in architecture,


01:01:33.480 --> 01:01:35.000
engineering, construction,


01:01:35.000 --> 01:01:37.020
are excited about Python and some of the tools.


01:01:37.020 --> 01:01:38.200
What do you tell them?


01:01:38.200 --> 01:01:40.520
- Yeah, I mean, I think it's an exciting time


01:01:40.520 --> 01:01:41.800
for the construction industry.


01:01:41.800 --> 01:01:46.800
It's kind of a really good place to innovate.


01:01:46.800 --> 01:01:49.760
There's a lot of exciting technology products


01:01:49.760 --> 01:01:51.240
and companies being built.


01:01:51.240 --> 01:01:53.440
So I think there's a lot of opportunities


01:01:53.440 --> 01:01:55.760
to do something in a different space.


01:01:55.760 --> 01:01:59.920
And I think they can really benefit from experience,


01:01:59.920 --> 01:02:02.440
people that have been doing more traditional software


01:02:02.440 --> 01:02:05.360
development to help them scale and build things.


01:02:05.360 --> 01:02:10.360
So yeah, it's interesting to see how those streams cross


01:02:10.360 --> 01:02:12.920
and to see architects going to build software


01:02:12.920 --> 01:02:15.240
and also seeing engineers coming to help make


01:02:15.240 --> 01:02:18.000
the architecture and construction industry better.


01:02:18.000 --> 01:02:20.880
- Yeah, fantastic.


01:02:20.880 --> 01:02:23.780
All right, well, thank you so much for being here.


01:02:23.780 --> 01:02:26.280
It's been great to have you on the show.


01:02:26.280 --> 01:02:28.780
And I just love to get these views


01:02:28.780 --> 01:02:32.220
into the different areas and communities


01:02:32.220 --> 01:02:34.540
where Python is making a difference.


01:02:34.540 --> 01:02:37.440
So thanks for sharing it in the architecture space.


01:02:37.440 --> 01:02:39.780
- Nice, my pleasure.


01:02:39.780 --> 01:02:40.820
- Yeah, you bet.


01:02:40.820 --> 01:02:41.760
See you later.


01:02:41.760 --> 01:02:42.600
- Thanks, man.


01:02:42.600 --> 01:02:43.440
Yep.


01:02:43.440 --> 01:02:53.440
[BLANK_AUDIO]

