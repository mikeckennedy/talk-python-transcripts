WEBVTT

00:00:00.000 --> 00:00:04.680
- Hello, everyone out there in the live stream.


00:00:04.680 --> 00:00:06.920
Thank you for being here live or watching it later


00:00:06.920 --> 00:00:07.760
on YouTube.


00:00:07.760 --> 00:00:09.000
If you've got comments, thoughts,


00:00:09.000 --> 00:00:10.080
throw them into the live chat.


00:00:10.080 --> 00:00:12.080
We'll make them part of the show.


00:00:12.080 --> 00:00:13.440
Carson, great to see you.


00:00:13.440 --> 00:00:15.280
You ready to kick this thing off?


00:00:15.280 --> 00:00:16.280
- Yes, I am.


00:00:16.280 --> 00:00:17.200
Let's do this.


00:00:17.200 --> 00:00:18.040
- All right.


00:00:18.040 --> 00:00:21.220
Carson, welcome to Talk Python to Me.


00:00:21.220 --> 00:00:23.040
- Thank you.


00:00:23.040 --> 00:00:23.880
I'm really happy to be here.


00:00:23.880 --> 00:00:26.760
I'm very thankful that you're willing to go a little bit


00:00:26.760 --> 00:00:29.520
outside the lines of a normal Python development


00:00:29.520 --> 00:00:32.300
to talk about something like HTMX.


00:00:32.300 --> 00:00:36.980
You know, I'm extremely happy to see HTMX getting picked up


00:00:36.980 --> 00:00:39.860
particularly by the Django community in Python.


00:00:39.860 --> 00:00:42.300
So I was very excited to come on here.


00:00:42.300 --> 00:00:44.180
- Yeah, I'm really excited to have you here.


00:00:44.180 --> 00:00:46.020
It is such a cool technology.


00:00:46.020 --> 00:00:50.000
And I think so often the JavaScript story is,


00:00:50.000 --> 00:00:53.540
oh, you're doing this other technology that you like.


00:00:53.540 --> 00:00:55.100
Let us tell you how you should drop that


00:00:55.100 --> 00:00:56.460
and go do JavaScript, right?


00:00:56.460 --> 00:00:58.260
And what I feel HTMX brings


00:00:58.260 --> 00:01:01.340
is whatever technology using Django, Flask,


00:01:01.340 --> 00:01:05.740
even some other thing like Rails or ASP.NET,


00:01:05.740 --> 00:01:08.580
whatever it is that you already got working really well,


00:01:08.580 --> 00:01:10.380
here's a really cool way to extend that.


00:01:10.380 --> 00:01:11.260
We're gonna dive into that.


00:01:11.260 --> 00:01:15.020
So I think, I've had people reach out and say,


00:01:15.020 --> 00:01:17.420
oh, I'm a JavaScript developer.


00:01:17.420 --> 00:01:19.340
Let me come onto your podcast


00:01:19.340 --> 00:01:20.820
and tell people about how cool Node is.


00:01:20.820 --> 00:01:23.180
I'm like, well, I'm not really sure that's the best topic


00:01:23.180 --> 00:01:25.380
for a Python-focused podcast,


00:01:25.380 --> 00:01:27.160
so I'm going to decline your invitation.


00:01:27.160 --> 00:01:30.920
But I was really happy to get a chance to have you on the show


00:01:30.920 --> 00:01:35.120
because I think there are many people out there


00:01:35.120 --> 00:01:39.840
who are nervous about JavaScript.


00:01:39.840 --> 00:01:41.440
They're not yet learning JavaScript.


00:01:41.440 --> 00:01:43.720
They know they need some interactivity,


00:01:43.720 --> 00:01:45.100
and they feel that means they have


00:01:45.100 --> 00:01:46.920
to abandon what they've already learned


00:01:46.920 --> 00:01:48.320
or what they actually love.


00:01:48.320 --> 00:01:49.740
And I don't think that's the case.


00:01:49.740 --> 00:01:51.160
And we're going to dive into that.


00:01:51.160 --> 00:01:54.160
So I think HTML plus Python Web Frameworks


00:01:54.160 --> 00:01:55.040
is a beautiful thing.


00:01:55.040 --> 00:01:56.640
But before we get into that, let's just


00:01:56.640 --> 00:01:57.500
start with your story.


00:01:57.500 --> 00:02:01.640
How'd you get into programming and yeah, start there.


00:02:01.640 --> 00:02:02.480
- Sure.


00:02:02.480 --> 00:02:05.200
Well, I've been programming for a very long time now.


00:02:05.200 --> 00:02:09.060
I started programming in college back in '94.


00:02:09.060 --> 00:02:11.940
Actually before that, I was programming on a Mac


00:02:11.940 --> 00:02:16.320
and HyperCard, which is a very old technology,


00:02:16.320 --> 00:02:17.160
which I love.


00:02:17.160 --> 00:02:18.520
- The web before the web.


00:02:18.520 --> 00:02:19.360
- Yeah.


00:02:19.360 --> 00:02:20.560
- It looked like a internet.


00:02:20.560 --> 00:02:21.400
- I can talk about that.


00:02:21.400 --> 00:02:23.680
If we talk about HyperScript at the end,


00:02:23.680 --> 00:02:26.440
maybe that'll come up again.


00:02:26.440 --> 00:02:28.600
But so I started programming in college


00:02:28.600 --> 00:02:31.440
and then very early on started programming for the web


00:02:31.440 --> 00:02:35.720
back when it was CGI scripts and Perl and stuff like that.


00:02:35.720 --> 00:02:37.620
And then I moved into Java


00:02:37.620 --> 00:02:40.040
during kind of the original dot-com boom


00:02:40.040 --> 00:02:42.040
and did a lot of the,


00:02:42.040 --> 00:02:44.080
was in the Java world for a long time


00:02:44.080 --> 00:02:46.680
and eventually moved into Rails.


00:02:46.680 --> 00:02:50.360
And so I've been programming in Rails now for the most part.


00:02:50.360 --> 00:02:53.120
I do, I program in a lot of different stuff though,


00:02:53.120 --> 00:02:54.640
mainly Java and Rails.


00:02:54.640 --> 00:02:56.440
And I have to admit to your audience,


00:02:56.440 --> 00:02:57.800
please don't judge me too hard,


00:02:57.800 --> 00:03:01.960
but I haven't used Python very much in anger.


00:03:01.960 --> 00:03:04.440
I've used it for local sort of sysadmin scripts,


00:03:04.440 --> 00:03:06.720
but not for a bunch of web development.


00:03:06.720 --> 00:03:10.760
So, but you know, Rails and Django share a lot of things


00:03:10.760 --> 00:03:12.120
in common with one another,


00:03:12.120 --> 00:03:15.960
and they're both great server side pieces of infrastructure.


00:03:15.960 --> 00:03:18.400
And I always felt like it was a shame


00:03:18.400 --> 00:03:20.000
that they were kind of being left,


00:03:20.000 --> 00:03:22.040
that they were being ignored to a large extent


00:03:22.040 --> 00:03:24.960
by the bigger JavaScript frameworks.


00:03:24.960 --> 00:03:26.920
One term that I try and coin,


00:03:26.920 --> 00:03:28.840
there's a lot of different stacks out there, right?


00:03:28.840 --> 00:03:31.240
Like the lamp stack and so on and so forth.


00:03:31.240 --> 00:03:34.880
And one joke stack that I've made up is the how stack,


00:03:34.880 --> 00:03:37.080
which is how H-O-W-L.


00:03:37.080 --> 00:03:38.960
- H-O-W-L.


00:03:38.960 --> 00:03:41.680
- So HTML on whatever you'd like.


00:03:41.680 --> 00:03:42.720
(laughs)


00:03:42.720 --> 00:03:44.440
So use HTML on the front end


00:03:44.440 --> 00:03:47.120
and use whatever you like on the back end.


00:03:47.120 --> 00:03:47.960
And that's a cool way.


00:03:47.960 --> 00:03:49.800
- And HTML is really empowering for this, right?


00:03:49.800 --> 00:03:51.880
I mean, that's like kind of the philosophy in some degree.


00:03:51.880 --> 00:03:56.320
I mean, you got a joke stack, but like literally that's sort of.


00:03:56.320 --> 00:03:57.760
It's a joke, but it's kind of true.


00:03:57.760 --> 00:04:02.800
So, yeah, yeah, absolutely.


00:04:02.800 --> 00:04:03.380
And how about now?


00:04:03.380 --> 00:04:04.320
What do you do day to day?


00:04:04.320 --> 00:04:09.480
so day to day I teach part-time at a university, and, my, my


00:04:09.480 --> 00:04:11.320
passion's actually programming languages.


00:04:11.320 --> 00:04:15.480
So I teach that as well as some other programs, classes at a university,


00:04:15.480 --> 00:04:19.840
uh, part-time, and, then I also, I work for a startup as well that I've


00:04:19.840 --> 00:04:21.000
I've been working on for a long time


00:04:21.000 --> 00:04:23.500
and which uses Intercooler JS,


00:04:23.500 --> 00:04:25.480
which is the predecessor to HTMX.


00:04:25.480 --> 00:04:28.100
The story with HTMX was that,


00:04:28.100 --> 00:04:30.040
well, we can go into it in a little bit if you'd like to,


00:04:30.040 --> 00:04:31.640
but that's what I'm doing now.


00:04:31.640 --> 00:04:33.320
So kind of a mix.


00:04:33.320 --> 00:04:35.520
I find myself doing a lot of different stuff.


00:04:35.520 --> 00:04:38.720
- Yeah, that sounds like a really nice mix.


00:04:38.720 --> 00:04:39.760
I love universities.


00:04:39.760 --> 00:04:41.600
I love university campuses.


00:04:41.600 --> 00:04:45.440
Maybe it's a slightly different story today with COVID,


00:04:45.440 --> 00:04:46.280
right?


00:04:46.280 --> 00:04:47.440
But I think we'll kind of get back to it.


00:04:47.440 --> 00:04:50.180
but some of my fondest memories are just, you know,


00:04:50.180 --> 00:04:52.700
spending time dreaming about ideas,


00:04:52.700 --> 00:04:54.940
walking around various campuses.


00:04:54.940 --> 00:04:56.300
- Yeah, it's a good energy.


00:04:56.300 --> 00:04:59.140
The kids aren't quite as beaten down


00:04:59.140 --> 00:05:02.500
as some of the, when you're in the corporate sector,


00:05:02.500 --> 00:05:04.660
I mean, you see a lot of these posts on Hacker News


00:05:04.660 --> 00:05:07.260
and so forth, just old guys, older guys and gals


00:05:07.260 --> 00:05:09.900
that are just sick of the grind.


00:05:09.900 --> 00:05:11.660
And so it's nice to be around younger kids


00:05:11.660 --> 00:05:14.540
that are maybe not quite as jaded


00:05:14.540 --> 00:05:18.920
and there's just an energy and it's a beautiful environment.


00:05:18.920 --> 00:05:22.140
- Yeah, it keeps you young being around that crowd,


00:05:22.140 --> 00:05:23.440
I do think that's awesome.


00:05:23.440 --> 00:05:27.360
So I wanna start our conversation


00:05:27.360 --> 00:05:28.900
by taking a little bit of a step back


00:05:28.900 --> 00:05:31.880
and I think we've circled around this a little bit,


00:05:31.880 --> 00:05:36.880
but when people are working in some technology,


00:05:36.880 --> 00:05:39.200
let's focus on Python,


00:05:39.200 --> 00:05:42.120
but it could be Rails like you had said before,


00:05:42.120 --> 00:05:44.600
and they've got something working really great.


00:05:44.600 --> 00:05:46.520
You know, you come to some part of the site


00:05:46.520 --> 00:05:48.240
and it's like, well, this should be really interactive.


00:05:48.240 --> 00:05:50.200
Like I wanna click on this thing


00:05:50.200 --> 00:05:51.840
and depending on what I select here,


00:05:51.840 --> 00:05:54.600
I want that dropdown to select that other thing.


00:05:54.600 --> 00:05:57.360
Or as I search here,


00:05:57.360 --> 00:05:59.600
I wanted to actually just fill it as I type.


00:05:59.600 --> 00:06:01.240
I don't wanna have to type in the search text,


00:06:01.240 --> 00:06:03.600
hit enter, see what comes back from the server.


00:06:03.600 --> 00:06:08.240
Oftentimes that is sold as a,


00:06:08.240 --> 00:06:10.340
well, your site is gonna be more responsive


00:06:10.340 --> 00:06:11.400
if it's running on the front end.


00:06:11.400 --> 00:06:13.080
And sometimes that's sort of true,


00:06:13.080 --> 00:06:15.820
but I feel like a well-designed website


00:06:15.820 --> 00:06:17.200
can be really responsive.


00:06:17.200 --> 00:06:19.520
Like I don't really feel like the speed thing is the story,


00:06:19.520 --> 00:06:22.460
but this interactive like navigation thing


00:06:22.460 --> 00:06:24.240
where it resets where it is,


00:06:24.240 --> 00:06:26.600
like that is a real challenge.


00:06:26.600 --> 00:06:30.960
And so often people get pulled down this path, right?


00:06:30.960 --> 00:06:33.040
Well, you wanna have that experience.


00:06:33.040 --> 00:06:35.560
So is it Vue.js or React?


00:06:35.560 --> 00:06:36.400
What are you gonna do?


00:06:36.400 --> 00:06:39.300
And then 10,000 lines later, front end code,


00:06:39.300 --> 00:06:41.600
you've winnowed down your back end


00:06:41.600 --> 00:06:46.140
to just a couple of simple HTTP API methods,


00:06:46.140 --> 00:06:50.340
then also something that serves up like a HTML static page.


00:06:50.340 --> 00:06:52.540
And then the question becomes,


00:06:52.540 --> 00:06:54.140
well, why are we doing Python?


00:06:54.140 --> 00:06:55.600
Or why are we doing Rails at all?


00:06:55.600 --> 00:06:57.660
Why don't we just do Node on the back end


00:06:57.660 --> 00:07:00.900
and we just have that as our entire stack?


00:07:00.900 --> 00:07:06.060
I feel a lot of times people either end up going down


00:07:06.060 --> 00:07:10.060
and throwing the baby out with the bathwater type of thing.


00:07:10.060 --> 00:07:13.060
You have this really cool server side ORM


00:07:13.060 --> 00:07:16.060
and a bunch of stuff happening that you really love


00:07:16.060 --> 00:07:20.060
from your server side, say Django or whatever.


00:07:20.060 --> 00:07:23.060
But you've kind of already gone,


00:07:23.060 --> 00:07:25.060
you're just so close, you're just like,


00:07:25.060 --> 00:07:27.060
"Well, we're already mostly writing JavaScript,


00:07:27.060 --> 00:07:28.060
let's just write JavaScript."


00:07:28.060 --> 00:07:30.060
So I think that's one side of the story,


00:07:30.060 --> 00:07:33.060
and I think there's real pressure on the other web frameworks,


00:07:33.060 --> 00:07:35.060
Python and other spaces for that.


00:07:35.060 --> 00:07:37.220
The other side is people who are not doing that,


00:07:37.220 --> 00:07:38.500
but they feel bad.


00:07:38.500 --> 00:07:40.780
They're like, I know I'm doing it wrong.


00:07:40.780 --> 00:07:42.820
I know I'm not using React.


00:07:42.820 --> 00:07:46.060
I'm just using Django, but this is all I know.


00:07:46.060 --> 00:07:48.960
And I just not ready, or we're just not a big enough team.


00:07:48.960 --> 00:07:52.340
How's that sit with you?


00:07:52.340 --> 00:07:53.180
What do you think?


00:07:53.180 --> 00:07:54.340
- Yeah, I didn't like that.


00:07:54.340 --> 00:07:55.180
That's exactly the pressure.


00:07:55.180 --> 00:07:56.460
- I don't like it either.


00:07:56.460 --> 00:07:58.340
That's why I'm so excited about HTMX.


00:07:58.340 --> 00:08:00.900
- That's exactly the pressure that I felt on Rails.


00:08:00.900 --> 00:08:02.780
I liked Rails.


00:08:02.780 --> 00:08:07.200
Ruby is a programming language I'm so-so on, it's fine.


00:08:07.200 --> 00:08:10.700
It's got its issues, but I liked Rails quite a bit.


00:08:10.700 --> 00:08:13.940
And I just disliked that pressure to adopt something else


00:08:13.940 --> 00:08:16.860
on the backend that came with using


00:08:16.860 --> 00:08:19.520
these more complex JavaScript front ends.


00:08:19.520 --> 00:08:22.980
And like I said earlier, it was just a shame.


00:08:22.980 --> 00:08:25.740
And the other aspect of that is when you go to that model,


00:08:25.740 --> 00:08:28.860
when you go to the Vue.js or the React model,


00:08:28.860 --> 00:08:31.780
your backend becomes pretty dumb, right?


00:08:31.780 --> 00:08:34.020
It's just producing JSON.


00:08:34.020 --> 00:08:36.860
There's validation code and yeah,


00:08:36.860 --> 00:08:39.620
your validation code can now live on both sides,


00:08:39.620 --> 00:08:41.460
which is important because the front end


00:08:41.460 --> 00:08:43.220
is not a trusted computing environment.


00:08:43.220 --> 00:08:44.980
So you can't trust validations that are done


00:08:44.980 --> 00:08:45.800
on the front end.


00:08:45.800 --> 00:08:46.640
You always have to redo them.


00:08:46.640 --> 00:08:48.740
- You just redo them again anyway, that's right.


00:08:48.740 --> 00:08:51.960
- Yeah, and so there's just all these kind of,


00:08:51.960 --> 00:08:55.780
I don't think they're complete arguments,


00:08:55.780 --> 00:09:00.500
but it's just with the grain to start pushing JavaScript


00:09:00.500 --> 00:09:03.500
onto the backend, especially once node really came out


00:09:03.500 --> 00:09:06.000
and gave JavaScript a good runtime on the backend.


00:09:06.000 --> 00:09:08.460
And it's not a good thing.


00:09:08.460 --> 00:09:11.400
And the reality is, is I hope we can demonstrate


00:09:11.400 --> 00:09:15.340
with HTMX today that a lot of very good UI


00:09:15.340 --> 00:09:18.920
or slash UX patterns from the web can be achieved


00:09:18.920 --> 00:09:23.660
using just HTML, using the original HTML model,


00:09:23.660 --> 00:09:26.980
the original RESTful model for the web.


00:09:26.980 --> 00:09:28.820
I know that's kind of a fancy term,


00:09:28.820 --> 00:09:31.140
but just using the original model of the web,


00:09:31.140 --> 00:09:34.420
just kind of generalizing what we're already familiar with


00:09:34.420 --> 00:09:37.600
in our day-to-day development, links and forms.


00:09:37.600 --> 00:09:40.620
And so that's where HTMX is coming from,


00:09:40.620 --> 00:09:44.100
is this idea, wait a second, let's take a step back.


00:09:44.100 --> 00:09:46.460
We don't need a super complicated front end.


00:09:46.460 --> 00:09:47.300
We just need to-


00:09:47.300 --> 00:09:50.540
- We don't have to push it all down to the front end.


00:09:50.540 --> 00:09:51.780
We only need to push a little bit


00:09:51.780 --> 00:09:53.860
of that interactivity down, right?


00:09:53.860 --> 00:09:54.700
- That's right.


00:09:54.700 --> 00:09:58.780
And that interactivity can be defined in terms


00:09:58.780 --> 00:10:02.700
that are very familiar to us from normal HTML.


00:10:02.700 --> 00:10:07.700
So let's just take HTML and try and push it as a hypermedia


00:10:07.700 --> 00:10:10.020
or hypermedium, I guess I should say.


00:10:10.020 --> 00:10:12.560
People get mad because hypermedia is plural,


00:10:12.560 --> 00:10:15.260
but I say it anyways.


00:10:15.260 --> 00:10:17.500
So, you know, that's where HTMX is coming from.


00:10:17.500 --> 00:10:19.220
It's very similar, you know,


00:10:19.220 --> 00:10:22.220
this frustration with the industry,


00:10:22.220 --> 00:10:24.140
particularly, I don't think this is strong now


00:10:24.140 --> 00:10:25.880
because Python has had, I mean,


00:10:25.880 --> 00:10:27.200
you go and you look at the trends


00:10:27.200 --> 00:10:29.460
and Python is just crushing right now.


00:10:29.460 --> 00:10:30.300
And, but--


00:10:30.300 --> 00:10:33.020
- Not a resurgence, but such an acceleration


00:10:33.020 --> 00:10:36.380
from where it was 10 years ago.


00:10:36.380 --> 00:10:38.440
- And I think if you compare that with five years ago,


00:10:38.440 --> 00:10:40.020
JavaScript was really the thing


00:10:40.020 --> 00:10:41.480
that was accelerating the most.


00:10:41.480 --> 00:10:42.680
I don't think that's true today.


00:10:42.680 --> 00:10:44.860
I think JavaScript is maybe plateauing a little bit.


00:10:44.860 --> 00:10:48.020
There's still plenty of JavaScript out there, obviously.


00:10:48.020 --> 00:10:50.700
But I feel like Python's really taking off


00:10:50.700 --> 00:10:54.560
because of big data and some of the AI tools


00:10:54.560 --> 00:10:55.860
that are available in Python.


00:10:55.860 --> 00:11:00.860
And so, and then some of the great older tools like Django


00:11:00.860 --> 00:11:03.240
and Flask that have been around for a long time


00:11:03.240 --> 00:11:04.660
and that do a good job.


00:11:04.660 --> 00:11:09.380
So, you know, again, just very similar situation with you


00:11:09.380 --> 00:11:11.880
where I'm looking at this going, man, this stinks


00:11:11.880 --> 00:11:15.740
that you have to become either like a killer JavaScript


00:11:15.740 --> 00:11:19.780
front end engineer, you know, and then have two languages


00:11:19.780 --> 00:11:24.300
that are pretty complicated or abandon whatever backend


00:11:24.300 --> 00:11:27.340
you prefer in favor of JavaScript.


00:11:27.340 --> 00:11:29.100
- Yeah, I'm a hundred percent with you.


00:11:29.100 --> 00:11:30.440
Let me pull up a couple of things.


00:11:30.440 --> 00:11:34.380
One, here's that graph that you were talking about.


00:11:34.380 --> 00:11:35.220
- Yeah, that's exactly the graph.


00:11:35.220 --> 00:11:37.740
- Of Python going pretty wild.


00:11:37.740 --> 00:11:40.260
Like you talked about JavaScript plateauing.


00:11:40.260 --> 00:11:42.540
So this is the stack overflow, you know,


00:11:42.540 --> 00:11:45.060
stack overflow trends for the major programming languages.


00:11:45.060 --> 00:11:47.620
So this is really surprising to me


00:11:47.620 --> 00:11:50.180
and I find it quite interesting here.


00:11:50.180 --> 00:11:52.420
Also a couple of things from the live stream, Nick Harvey.


00:11:52.420 --> 00:11:55.400
Hey, Nick says, "For me, it's a constant battle


00:11:55.400 --> 00:11:57.220
"between all the benefits of server-side,


00:11:57.220 --> 00:12:00.020
"plus I don't want the page to keep refreshing."


00:12:00.020 --> 00:12:02.260
- Yep.


00:12:02.260 --> 00:12:03.580
- Yeah. - I sympathize, Nick,


00:12:03.580 --> 00:12:07.100
and that's exactly what HTMX is designed to help with.


00:12:07.100 --> 00:12:09.900
The real bad part about the original web,


00:12:09.900 --> 00:12:11.220
and browsers, we have to say,


00:12:11.220 --> 00:12:13.380
I think you made this point earlier, Michael,


00:12:13.380 --> 00:12:17.380
browsers have gotten better at making the page transition


00:12:17.380 --> 00:12:19.940
not quite as clunky visually.


00:12:19.940 --> 00:12:22.780
So you can do sort of web 1.0 style apps


00:12:22.780 --> 00:12:24.740
and get away with it for a lot of stuff.


00:12:24.740 --> 00:12:28.140
- Yeah, you talked about doing programming in '94


00:12:28.140 --> 00:12:31.540
and I remember the first mosaic that I saw


00:12:31.540 --> 00:12:33.300
that was the graphical web.


00:12:33.300 --> 00:12:36.420
And I was just, my jaw was just dropped.


00:12:36.420 --> 00:12:38.500
I'm like, this changes everything.


00:12:38.500 --> 00:12:41.540
I had been using Telnet and like Gopher


00:12:41.540 --> 00:12:43.380
and all sorts of crazy stuff.


00:12:43.380 --> 00:12:44.780
Oh my gosh.


00:12:44.780 --> 00:12:46.860
And I'm just like, this is a new world.


00:12:46.860 --> 00:12:49.220
I literally think I had to skip the next class


00:12:49.220 --> 00:12:50.300
I was supposed to go to, because I'm like,


00:12:50.300 --> 00:12:51.700
I can't, I have to explore this.


00:12:51.700 --> 00:12:53.720
This is unbelievable what I've just found.


00:12:53.720 --> 00:12:54.900
But I remember it going clunk, clunk.


00:12:54.900 --> 00:12:57.540
You could just see it building the page as it comes.


00:12:57.540 --> 00:13:01.300
And that was, yeah, it's, luckily it's not like that anymore.


00:13:01.300 --> 00:13:02.220
- It's the big problem.


00:13:02.220 --> 00:13:04.100
It is, you know, it's much better now,


00:13:04.100 --> 00:13:05.220
but it's still a problem.


00:13:05.220 --> 00:13:09.620
And it's a big problem for, you know, many UX patterns.


00:13:09.620 --> 00:13:10.740
You just, you don't want it.


00:13:10.740 --> 00:13:15.060
And that's exactly what HTMX is designed to help with.


00:13:15.060 --> 00:13:15.900
- Absolutely.


00:13:15.900 --> 00:13:18.060
- Stay within that original model of the web.


00:13:18.060 --> 00:13:20.620
can use whatever backend you want to produce your HTML,


00:13:20.620 --> 00:13:23.460
but we can get better user experience out of it.


00:13:23.460 --> 00:13:24.860
- Yep, yep.


00:13:24.860 --> 00:13:26.820
So also RJ out there in the live stream says,


00:13:26.820 --> 00:13:30.460
"I just discovered HTMX a few days ago, great timing."


00:13:30.460 --> 00:13:32.460
Auto-complete, fix that, perfect.


00:13:32.460 --> 00:13:33.780
Yeah, so speaking of which, let's go ahead


00:13:33.780 --> 00:13:35.220
and let's get into it, right?


00:13:35.220 --> 00:13:37.260
So we've set this up as a,


00:13:37.260 --> 00:13:39.900
it doesn't have to be either or,


00:13:39.900 --> 00:13:43.340
it doesn't have to be either Django or Flask


00:13:43.340 --> 00:13:46.060
or React or Vue, right?


00:13:46.060 --> 00:13:47.540
It doesn't necessarily have to be that way.


00:13:47.540 --> 00:13:49.900
And there's some really cool stuff going on here.


00:13:49.900 --> 00:13:52.180
Like, let me just read this little introduction


00:13:52.180 --> 00:13:53.780
you got over here at htmx.org.


00:13:53.780 --> 00:13:56.220
It says, "HTML allows you to access Ajax,


00:13:56.220 --> 00:13:59.660
"CSS Transactions, WebSockets, Server Sent Events


00:13:59.660 --> 00:14:02.040
"directly in HTML just using attributes


00:14:02.040 --> 00:14:05.100
"so you can build modern interfaces simply."


00:14:05.100 --> 00:14:06.620
Which is really nice.


00:14:06.620 --> 00:14:08.960
And one of the things that frustrates me


00:14:08.960 --> 00:14:11.480
about these frameworks, like I do some stuff in Vue


00:14:11.480 --> 00:14:12.900
and like, I'm not against it.


00:14:12.900 --> 00:14:13.900
I just wanna put out there,


00:14:13.900 --> 00:14:17.180
I realize there are apps that are absolutely making sense


00:14:17.180 --> 00:14:20.100
to build with Vue or with React, right?


00:14:20.100 --> 00:14:22.460
Are you trying to build a mobile app


00:14:22.460 --> 00:14:25.580
that is really sort of a progressive web app?


00:14:25.580 --> 00:14:28.420
Like, that should absolutely be in that.


00:14:28.420 --> 00:14:30.860
Are you trying to build Gmail?


00:14:30.860 --> 00:14:33.900
It should very likely be in something like Vue.


00:14:33.900 --> 00:14:36.740
But most of us just want a sprinkling,


00:14:36.740 --> 00:14:40.340
like a little salt, a little bit of niceness


00:14:40.340 --> 00:14:41.760
here and there to our app.


00:14:41.760 --> 00:14:44.260
And in order to get that,


00:14:44.260 --> 00:14:46.340
these days JavaScript has moved so far


00:14:46.340 --> 00:14:48.220
that it's no longer this simple little language


00:14:48.220 --> 00:14:51.100
that you just include a tag and then to the file


00:14:51.100 --> 00:14:51.940
and you're good to go.


00:14:51.940 --> 00:14:55.620
It's like, you've got webpack and you've got CLI tools


00:14:55.620 --> 00:14:58.040
and you've just got all this stuff to go, right?


00:14:58.040 --> 00:15:02.740
So what's the getting started experience for HTMX?


00:15:02.740 --> 00:15:05.140
It looks pretty straightforward.


00:15:05.140 --> 00:15:08.460
- Yeah, it's a small, it's a no build library.


00:15:08.460 --> 00:15:11.100
So there's no build step associated with it.


00:15:11.100 --> 00:15:12.500
You just drop it in.


00:15:12.500 --> 00:15:14.420
You can use a CDN if you want.


00:15:14.420 --> 00:15:18.680
And so the starting experience for it can be as simple


00:15:18.680 --> 00:15:20.520
as just adding a single attribute


00:15:20.520 --> 00:15:23.800
or maybe two attributes would be the minimum thing.


00:15:23.800 --> 00:15:28.800
And so it doesn't require a total rework of your front end.


00:15:28.800 --> 00:15:32.500
And that's one concept I like to talk about with my students


00:15:32.500 --> 00:15:34.180
is this idea of a complexity budget.


00:15:34.180 --> 00:15:36.520
Your application has a complexity budget,


00:15:36.520 --> 00:15:38.060
you need to spend it effectively.


00:15:38.060 --> 00:15:41.320
And so with HTMX, you can pick the parts of your app


00:15:41.320 --> 00:15:44.400
that need it and add interactivity to them.


00:15:44.400 --> 00:15:47.920
and the remainder of your app can remain just a standard,


00:15:47.920 --> 00:15:50.640
you know, web app that works the normal way.


00:15:50.640 --> 00:15:51.680
And because of that,


00:15:51.680 --> 00:15:54.840
you can sort of spend your complexity budget


00:15:54.840 --> 00:15:56.200
where you want to on your app,


00:15:56.200 --> 00:15:59.240
rather than saying, okay, we're going to react,


00:15:59.240 --> 00:16:01.080
and now we need a React router,


00:16:01.080 --> 00:16:03.760
and now we need GraphQL, we need all this stuff.


00:16:03.760 --> 00:16:07.040
- Our next sprint is gonna be the rewrite sprint, right?


00:16:07.040 --> 00:16:08.520
- Right.


00:16:08.520 --> 00:16:11.640
So it's just, I hope it's, you know,


00:16:11.640 --> 00:16:14.920
people would agree that it's a lightweight library


00:16:14.920 --> 00:16:17.640
in that sense, and that you don't need to do a whole lot


00:16:17.640 --> 00:16:21.400
to make things work within one particular area.


00:16:21.400 --> 00:16:24.080
There's some attributes like HX boost, for example,


00:16:24.080 --> 00:16:27.640
that you can just kind of toss on the body tag


00:16:27.640 --> 00:16:30.840
and it'll turn all the links into AJAX requests


00:16:30.840 --> 00:16:33.000
and all the forms into AJAX submissions.


00:16:33.000 --> 00:16:35.280
And so it's kind of like a TurboLynx


00:16:35.280 --> 00:16:37.440
if you're familiar with that technology in that sense.


00:16:37.440 --> 00:16:41.160
So, that isn't a big focus of the library,


00:16:41.160 --> 00:16:43.440
but it's there as well.


00:16:43.440 --> 00:16:46.400
So hopefully relatively lightweight.


00:16:46.400 --> 00:16:47.240
- Yeah.


00:16:47.240 --> 00:16:48.720
- And the user experience.


00:16:48.720 --> 00:16:49.560
Go ahead.


00:16:49.560 --> 00:16:50.380
- I was gonna say,


00:16:50.380 --> 00:16:54.360
so you basically include a script tag to link to HTMX,


00:16:54.360 --> 00:16:57.740
it's 10 kilobytes and it has no dependencies.


00:16:57.740 --> 00:16:59.600
- Yep.


00:16:59.600 --> 00:17:03.560
- Yeah, RJL out there in the live stream says,


00:17:03.560 --> 00:17:05.760
"I strongly believe that these JS libraries,


00:17:05.760 --> 00:17:07.180
"speaking of Vue and React and whatnot,


00:17:07.180 --> 00:17:08.980
"are overkill for the majority of CRUD amps


00:17:08.980 --> 00:17:10.080
"that exist on the web,


00:17:10.080 --> 00:17:11.920
Probably 90% of the Crub apps are built


00:17:11.920 --> 00:17:14.360
within private corporations.


00:17:14.360 --> 00:17:16.000
I've been doing that since '94.


00:17:16.000 --> 00:17:18.600
And then also Nick says,


00:17:18.600 --> 00:17:21.360
"NPM and Webpack are both a blessing and a curse."


00:17:21.360 --> 00:17:25.080
Yeah, especially if you're a backend sort of person.


00:17:25.080 --> 00:17:28.440
- Yeah, I never liked big complicated build tools


00:17:28.440 --> 00:17:31.800
in any, you know, in any, even on the backend.


00:17:31.800 --> 00:17:33.600
I just, I'm not a big fan of them.


00:17:33.600 --> 00:17:36.040
I like dependency managers, but beyond that,


00:17:36.040 --> 00:17:37.800
I don't want a bunch of stuff going on.


00:17:37.800 --> 00:17:39.640
- Yeah, I'm with you on that as well.


00:17:39.640 --> 00:17:44.840
All right, so let's talk about the motivation that you got here before I get into some code


00:17:44.840 --> 00:17:46.800
because I think it really sets the stage.


00:17:46.800 --> 00:17:51.840
I mean, obviously, we've been setting the motivation here, but you throw out some questions,


00:17:51.840 --> 00:17:59.680
some hypotheticals like, "Hey, why should only anchor tags and forms be able to make


00:17:59.680 --> 00:18:00.680
HTTP requests?


00:18:00.680 --> 00:18:06.400
Like, if I click on an image, shouldn't it be able to make an HTTP request?


00:18:06.400 --> 00:18:09.060
Why should click and submit be the only events


00:18:09.060 --> 00:18:10.240
that trigger them, right?


00:18:10.240 --> 00:18:12.300
Like I don't know, mouse over or key down


00:18:12.300 --> 00:18:13.240
or something like that, right?


00:18:13.240 --> 00:18:15.920
Probably key down for a smart auto-complete search.


00:18:15.920 --> 00:18:19.080
Why should only get and post be available?


00:18:19.080 --> 00:18:21.020
And why should you,


00:18:21.020 --> 00:18:23.440
why should they only replace the entire screen, right?


00:18:23.440 --> 00:18:24.280
- Yeah.


00:18:24.280 --> 00:18:25.940
And that last one's really the crux


00:18:25.940 --> 00:18:28.160
for what Nick was talking about earlier, right?


00:18:28.160 --> 00:18:32.160
Is why should web requests have to do this big,


00:18:32.160 --> 00:18:34.760
chunky replace the whole screen?


00:18:34.760 --> 00:18:38.560
if you have an action that only updates a small amount


00:18:38.560 --> 00:18:40.560
of that screen, why not just return the HTML


00:18:40.560 --> 00:18:42.400
for that small amount of the screen?


00:18:42.400 --> 00:18:45.760
And then in that element that's issuing that request,


00:18:45.760 --> 00:18:50.440
specify, oh, put the return content into that thing.


00:18:50.440 --> 00:18:51.560
And that's exactly that.


00:18:51.560 --> 00:18:56.280
So HTML has an attribute called HX swap that lets you,


00:18:56.280 --> 00:19:00.160
or excuse me, HX target that lets you say exactly


00:19:00.160 --> 00:19:02.760
where you want to place the return content.


00:19:02.760 --> 00:19:04.640
And then HX swap is another attribute


00:19:04.640 --> 00:19:08.380
which lets you tell HTMX exactly how to do that swap


00:19:08.380 --> 00:19:09.740
if you want to replace the whole thing


00:19:09.740 --> 00:19:13.700
or just the inner content or append it or whatever.


00:19:13.700 --> 00:19:16.340
- So let me lay out an example here of a type of app


00:19:16.340 --> 00:19:19.440
that feels like it would need view or something.


00:19:19.440 --> 00:19:22.820
I'm just gonna pick on view as like the catch all


00:19:22.820 --> 00:19:26.020
for all the major front end frameworks going forward.


00:19:26.020 --> 00:19:30.820
So imagine I've got like a photo gallery


00:19:30.820 --> 00:19:34.060
of like five images up on the screen


00:19:34.060 --> 00:19:36.060
and I wanna be able to click on that image


00:19:36.060 --> 00:19:38.020
and then have like a details of it,


00:19:38.020 --> 00:19:40.300
like maybe the exit tags or like where it was taken


00:19:40.300 --> 00:19:44.060
or other stuff stored about it on the server.


00:19:44.060 --> 00:19:45.980
I don't know, maybe it's like a Wikipedia thing


00:19:45.980 --> 00:19:46.940
and like you click on the picture


00:19:46.940 --> 00:19:50.020
and it gives you some details about the picture below.


00:19:50.020 --> 00:19:50.980
And you just wanna keep that there.


00:19:50.980 --> 00:19:53.060
And as you click on them, maybe even use an arrow key


00:19:53.060 --> 00:19:56.540
as you click around between them and have that happen.


00:19:56.540 --> 00:19:58.060
That's the kind of thing you're talking about, right?


00:19:58.060 --> 00:20:00.740
Like I could set it up so I could have an event


00:20:00.740 --> 00:20:02.300
where I interact with the image,


00:20:02.300 --> 00:20:04.260
then it does a swap.


00:20:04.260 --> 00:20:07.020
And explain to me what I have to write


00:20:07.020 --> 00:20:09.740
in order to get that bottom part to like reload.


00:20:09.740 --> 00:20:11.680
- Yeah, all you would do is on that image,


00:20:11.680 --> 00:20:13.180
you would say HX get,


00:20:13.180 --> 00:20:15.700
and you would give it the URL to get that information from,


00:20:15.700 --> 00:20:19.020
and that information will come back in HTML form.


00:20:19.020 --> 00:20:21.420
And then you would say HX target,


00:20:21.420 --> 00:20:24.740
and there would likely be a div down below


00:20:24.740 --> 00:20:26.620
that would be your details div.


00:20:26.620 --> 00:20:29.040
And let's say it has the ID details.


00:20:29.040 --> 00:20:31.640
So your HX target attribute in that case


00:20:31.640 --> 00:20:34.920
would be hash details and that tells HTMX


00:20:34.920 --> 00:20:36.540
when this request comes back,


00:20:36.540 --> 00:20:39.560
take that content and jam it into the details div


00:20:39.560 --> 00:20:42.560
or whatever that has exactly details on it.


00:20:42.560 --> 00:20:43.400
And then if you wanna--


00:20:43.400 --> 00:20:45.320
- Bottom section, sorry, go ahead, keep going.


00:20:45.320 --> 00:20:46.480
- And then if you wanna,


00:20:46.480 --> 00:20:48.280
depending on how you wanna do that swap,


00:20:48.280 --> 00:20:50.440
the HX swap attribute lets you say,


00:20:50.440 --> 00:20:52.720
default is inner HTML.


00:20:52.720 --> 00:20:55.000
So it'll swap that into the inner HTML,


00:20:55.000 --> 00:20:56.640
but maybe you wanna replace the whole thing


00:20:56.640 --> 00:20:58.120
for whatever reason,


00:20:58.120 --> 00:21:02.120
you could say HX swap outer HTML.


00:21:02.120 --> 00:21:04.040
And then there's a bunch of attributes


00:21:04.040 --> 00:21:06.080
and there's some syntax


00:21:06.080 --> 00:21:08.880
and there lets you control scroll state,


00:21:08.880 --> 00:21:11.280
whether or not something gets pushed into history,


00:21:11.280 --> 00:21:13.880
depending on how you wanna do that and so forth.


00:21:13.880 --> 00:21:17.480
And so there's a lot of stuff like that


00:21:17.480 --> 00:21:20.840
that lets you determine exactly


00:21:20.840 --> 00:21:22.360
how that swap is gonna happen.


00:21:22.360 --> 00:21:25.120
- Yeah, fantastic.


00:21:25.120 --> 00:21:27.200
So right on the home screen,


00:21:27.200 --> 00:21:32.200
you've got an example that is commented


00:21:32.200 --> 00:21:37.200
without the comments, it's four lines of HTML.


00:21:37.200 --> 00:21:38.400
- Right.


00:21:38.400 --> 00:21:40.320
- And that's the entire application.


00:21:40.320 --> 00:21:42.000
I guess you probably would wanna wrap that


00:21:42.000 --> 00:21:45.700
in like a HTML and a body tag, but beyond that, right?


00:21:45.700 --> 00:21:47.360
So what you do is you include the script


00:21:47.360 --> 00:21:48.600
and then you have a button


00:21:48.600 --> 00:21:50.000
and on the button you have an attribute


00:21:50.000 --> 00:21:54.160
that says HX-POST=/CLICKED.


00:21:54.160 --> 00:21:58.440
Then you have your HX equal dash swap equals outer HTML,


00:21:58.440 --> 00:21:59.920
presumably of the button, right?


00:21:59.920 --> 00:22:01.200
So you could say click the button


00:22:01.200 --> 00:22:03.720
and the button would replace with like a map


00:22:03.720 --> 00:22:05.640
of where you are or a grid of results


00:22:05.640 --> 00:22:09.320
or whatever the heck the returned HTML


00:22:09.320 --> 00:22:11.780
from slash clicked is, right?


00:22:11.780 --> 00:22:12.620
- Yeah, that's right.


00:22:12.620 --> 00:22:14.040
And it's HX post, right?


00:22:14.040 --> 00:22:15.140
Is that what you said?


00:22:15.140 --> 00:22:19.600
- I hope, yeah, HX post.


00:22:19.600 --> 00:22:21.000
I probably said it wrong, but yes, exactly.


00:22:21.000 --> 00:22:21.840
- No, no, it's okay.


00:22:21.840 --> 00:22:23.080
I just wanna make sure.


00:22:23.080 --> 00:22:24.920
- Yeah, yeah, keep me honest here.


00:22:24.920 --> 00:22:25.760
- No, it's all good.


00:22:25.760 --> 00:22:26.580
- It's hard to do code visually, right?


00:22:26.580 --> 00:22:28.640
- My screen is flickering again,


00:22:28.640 --> 00:22:30.400
so I wanna make sure I'm on the same page as you.


00:22:30.400 --> 00:22:32.040
- Yeah, yeah, yeah, this is just a quick start


00:22:32.040 --> 00:22:33.320
at the home page.


00:22:33.320 --> 00:22:36.400
And so this is, I mean, this is so neat


00:22:36.400 --> 00:22:40.640
because when people think about all the stuff


00:22:40.640 --> 00:22:43.800
they have to do, in order to adopt this type


00:22:43.800 --> 00:22:46.240
of dynamic page that you're talking about,


00:22:46.240 --> 00:22:49.040
what you have to do is you have to have a method


00:22:49.040 --> 00:22:51.120
on the server, a view method on the server


00:22:51.120 --> 00:22:54.040
that returns HTML fragments.


00:22:54.040 --> 00:22:56.360
Instead of returning, you know,


00:22:56.360 --> 00:22:58.400
the whole HTML body, whatever,


00:22:58.400 --> 00:23:00.160
like if my story where I said,


00:23:00.160 --> 00:23:02.300
I'm gonna put a grid of results,


00:23:02.300 --> 00:23:03.920
you have to have a server side thing


00:23:03.920 --> 00:23:06.880
that can generate HTML for a grid of results.


00:23:06.880 --> 00:23:10.440
So you could do that with like a template,


00:23:10.440 --> 00:23:12.360
like a Jinja or a Django template


00:23:12.360 --> 00:23:14.720
or a Chameleon template on the server


00:23:14.720 --> 00:23:16.720
and just pull the data out of your database,


00:23:16.720 --> 00:23:18.200
bind it, and instead of returning,


00:23:18.200 --> 00:23:20.480
have your template contain a full bit of HTML,


00:23:20.480 --> 00:23:22.480
It's like an HTML fragment.


00:23:22.480 --> 00:23:24.360
- Yeah, exactly.


00:23:24.360 --> 00:23:26.280
In Rails, they're called partials.


00:23:26.280 --> 00:23:28.640
That's the language the Rails community uses,


00:23:28.640 --> 00:23:30.280
but it's just a sub template.


00:23:30.280 --> 00:23:32.240
And so typically what you would do


00:23:32.240 --> 00:23:34.480
in an HTMX based application


00:23:34.480 --> 00:23:38.600
is you would have your normal templates


00:23:38.600 --> 00:23:41.800
and then they would include these sort of sub templates


00:23:41.800 --> 00:23:44.880
or partials again, to use the Rails terminology.


00:23:44.880 --> 00:23:49.000
And so the HTMX kind of pushes the factoring problem


00:23:49.000 --> 00:23:50.120
to the backend.


00:23:50.120 --> 00:23:52.800
So you factor your templates out on the backend


00:23:52.800 --> 00:23:55.360
rather than maybe creating components on the front end


00:23:55.360 --> 00:23:57.360
is how someone more familiar with Vue


00:23:57.360 --> 00:23:58.960
might think about these things.


00:23:58.960 --> 00:24:02.080
- Yeah, it's like the little component bit


00:24:02.080 --> 00:24:03.480
on the server side though.


00:24:03.480 --> 00:24:05.880
- Yeah, so you do your factoring on the backend


00:24:05.880 --> 00:24:10.240
and then hopefully you are designing a good URL schema,


00:24:10.240 --> 00:24:12.240
a nice restful URL schema,


00:24:12.240 --> 00:24:14.240
and it all kind of makes sense


00:24:14.240 --> 00:24:15.840
with several sources and so forth.


00:24:15.840 --> 00:24:17.440
- So in this example, there's just a button,


00:24:17.440 --> 00:24:19.640
it just goes to slash clicked.


00:24:19.640 --> 00:24:24.400
but in my scenario where I had five images,


00:24:24.400 --> 00:24:29.400
the URL, like the HX-POST could be /detail/1,


00:24:29.400 --> 00:24:35.360
/detail/2, and when you render the original HTML,


00:24:35.360 --> 00:24:40.200
you can preload into those embedded pieces,


00:24:40.200 --> 00:24:42.760
the right data to pass on when it gets clicked


00:24:42.760 --> 00:24:44.320
or what gets interacted with, right?


00:24:44.320 --> 00:24:45.400
- Yeah, exactly.


00:24:45.400 --> 00:24:47.720
So that image is a resource, right?


00:24:47.720 --> 00:24:49.020
if we're thinking restfully,


00:24:49.020 --> 00:24:51.340
that image is a resource on the server.


00:24:51.340 --> 00:24:54.580
And so it has a URL associated with it.


00:24:54.580 --> 00:24:57.860
Let's say images/1, let's just say that.


00:24:57.860 --> 00:25:01.000
And then images/1 might have a sub-resource


00:25:01.000 --> 00:25:03.540
of images/1/details.


00:25:03.540 --> 00:25:06.420
And so you would, you know, you render that image


00:25:06.420 --> 00:25:10.420
and then that image/id/details


00:25:10.420 --> 00:25:13.860
is what returns the details you were talking about earlier.


00:25:13.860 --> 00:25:16.460
And you would probably use HX get in this case


00:25:16.460 --> 00:25:20.020
because you're retrieving information without a mutation.


00:25:20.020 --> 00:25:25.020
So post is probably not an appropriate HTTP verb


00:25:25.020 --> 00:25:26.940
or action to use.


00:25:26.940 --> 00:25:29.900
And so you would get that and then,


00:25:29.900 --> 00:25:33.140
slam it into the div below the images.


00:25:33.140 --> 00:25:34.060
- Right, exactly.


00:25:34.060 --> 00:25:38.580
And it's, that's almost exactly what you would do


00:25:38.580 --> 00:25:42.140
if you were gonna write a server side only thing.


00:25:42.140 --> 00:25:43.900
It would just pull up that details page


00:25:43.900 --> 00:25:45.940
and would have a back button to get to the other ones


00:25:45.940 --> 00:25:46.960
or something like that,


00:25:46.960 --> 00:25:48.440
or maybe it would reload the whole page


00:25:48.440 --> 00:25:50.220
and then just stuff that in the bottom.


00:25:50.220 --> 00:25:52.900
So the experience of writing is almost,


00:25:52.900 --> 00:25:55.060
it's almost unchanged, right?


00:25:55.060 --> 00:25:57.920
You get a fully leveraged the server side thing.


00:25:57.920 --> 00:25:59.940
- It is, and that's a great point.


00:25:59.940 --> 00:26:03.020
It is, it's very similar to a link, right?


00:26:03.020 --> 00:26:06.840
And the advantages here are that you don't have


00:26:06.840 --> 00:26:08.660
that clunky user experience.


00:26:08.660 --> 00:26:10.520
You do have a smaller payload.


00:26:10.520 --> 00:26:11.960
That tends not to matter that much.


00:26:11.960 --> 00:26:14.460
People make a bigger deal out of that


00:26:14.460 --> 00:26:16.060
than I think is necessary.


00:26:16.060 --> 00:26:19.420
But it really retains that simplicity.


00:26:19.420 --> 00:26:22.440
And on top of that, you also have all these tools


00:26:22.440 --> 00:26:25.240
that have been developed over the last 20 plus years


00:26:25.240 --> 00:26:28.400
of web development that are suddenly available to you again,


00:26:28.400 --> 00:26:33.400
such as caching and SQL tuning on the backend and so forth.


00:26:33.400 --> 00:26:38.280
All that institutional knowledge that we built up


00:26:38.280 --> 00:26:42.040
about how to create good, fast web applications


00:26:42.040 --> 00:26:47.040
applies using the HTMX model in a way that is not as obvious


00:26:47.040 --> 00:26:48.760
if you're front end, you know,


00:26:48.760 --> 00:26:52.360
there's a whole separate style of development


00:26:52.360 --> 00:26:54.880
for developing JSON APIs at this point


00:26:54.880 --> 00:26:56.380
that just doesn't have a lot to do


00:26:56.380 --> 00:26:57.480
with that original model.


00:26:57.480 --> 00:26:59.620
And so we're relearning things.


00:26:59.620 --> 00:27:00.800
How do you, you know, that's,


00:27:00.800 --> 00:27:04.560
that model is really RPC remote procedure call, I think.


00:27:04.560 --> 00:27:08.120
And so that is just, it's just a different mindset


00:27:08.120 --> 00:27:11.220
than the hypermedia infrastructure that we're used to


00:27:11.220 --> 00:27:12.700
as web app developers.


00:27:12.700 --> 00:27:15.360
- Yeah, for sure.


00:27:15.360 --> 00:27:18.280
So you talked about this complexity budget before.


00:27:18.280 --> 00:27:20.820
And one of the things I like about this


00:27:20.820 --> 00:27:24.940
is I can have already built my application


00:27:24.940 --> 00:27:26.420
and I can decide, you know what?


00:27:26.420 --> 00:27:28.180
It would be a lot better


00:27:28.180 --> 00:27:31.020
if instead of doing a full refresh for this part,


00:27:31.020 --> 00:27:35.000
we could just add some interactivity to this, right?


00:27:35.000 --> 00:27:37.980
It feels to me like it's very easy


00:27:37.980 --> 00:27:40.380
to go to an existing web app


00:27:40.380 --> 00:27:44.420
and add this more dynamic nature to it


00:27:44.420 --> 00:27:47.540
and certain focused areas with HTMX.


00:27:47.540 --> 00:27:50.220
- Yep, exactly.


00:27:50.220 --> 00:27:53.540
And that's, again, I advocate for that.


00:27:53.540 --> 00:27:57.660
I think a good MVP written in the web 1.0 style


00:27:57.660 --> 00:27:59.580
can validate your app.


00:27:59.580 --> 00:28:01.300
You can start getting feedback very quickly


00:28:01.300 --> 00:28:05.140
without this really expensive from, in development terms,


00:28:05.140 --> 00:28:07.900
front-end investment in your technology.


00:28:07.900 --> 00:28:09.900
And then once that works out,


00:28:09.900 --> 00:28:12.220
you can start seeing how users are using your app


00:28:12.220 --> 00:28:14.040
and improving it from there.


00:28:14.040 --> 00:28:19.040
And so it lets you delay committing your complexity budget


00:28:19.040 --> 00:28:21.740
deeper into the development process.


00:28:21.740 --> 00:28:22.860
I think that's a big advantage


00:28:22.860 --> 00:28:24.940
of these lighter weight front end frameworks.


00:28:24.940 --> 00:28:27.420
Alpine JS is another one that I think


00:28:27.420 --> 00:28:28.780
lets you do that to an extent.


00:28:28.780 --> 00:28:30.940
You can just kind of sprinkle in when you want.


00:28:30.940 --> 00:28:33.820
And in fairness, I have heard people say that Vue


00:28:33.820 --> 00:28:35.620
is it can also be used in this way.


00:28:35.620 --> 00:28:37.180
So I don't wanna say that.


00:28:37.180 --> 00:28:38.260
- Yeah, I do.


00:28:38.260 --> 00:28:40.420
If I had to pick a rich front-end framework,


00:28:40.420 --> 00:28:42.940
Vue is certainly where I'd feel really happy


00:28:42.940 --> 00:28:45.540
because while it does have the CLI stuff


00:28:45.540 --> 00:28:48.420
and it does have a lot of that style,


00:28:48.420 --> 00:28:50.420
it also has the ability to just drop in


00:28:50.420 --> 00:28:54.280
JavaScript file for Vue.js


00:28:54.280 --> 00:28:57.180
and then indicate here's a sub tag


00:28:57.180 --> 00:29:00.900
or some subset of my page and now that's the app.


00:29:00.900 --> 00:29:02.300
Make this page go, right?


00:29:02.300 --> 00:29:04.300
There's that nice aspect.


00:29:04.300 --> 00:29:08.460
But yeah, I just feel like you still get to do


00:29:08.460 --> 00:29:10.700
all the important stuff on the server here,


00:29:10.700 --> 00:29:12.480
which is pretty cool.


00:29:12.480 --> 00:29:15.940
Pradhavan out in the live stream says,


00:29:15.940 --> 00:29:18.140
"I heard about HTMX at DjangoCon EU.


00:29:18.140 --> 00:29:19.900
"Really like the project."


00:29:19.900 --> 00:29:21.420
Firefire maybe.


00:29:21.420 --> 00:29:26.420
- Yeah, we got a lot of mentions at DjangoCon EU


00:29:26.420 --> 00:29:31.060
and I'm hoping we'll get a bunch at the US DjangoCon as well


00:29:31.060 --> 00:29:34.020
and I'm not, again, since I'm kind of,


00:29:34.020 --> 00:29:36.580
I have to, again, admit a little bit of an outsider


00:29:36.580 --> 00:29:37.940
in the Python community.


00:29:37.940 --> 00:29:42.500
I'm hopeful that I can make more contacts


00:29:42.500 --> 00:29:44.580
and really help,


00:29:44.580 --> 00:29:47.620
HTMX help Python developers stay in Python.


00:29:47.620 --> 00:29:48.460
(laughs)


00:29:48.460 --> 00:29:50.020
So do this more,


00:29:50.020 --> 00:29:52.860
do provide better user experience for your users,


00:29:52.860 --> 00:29:55.780
but also stay within the Python world.


00:29:55.780 --> 00:29:59.140
That's obviously just, it's growing gangbusters.


00:29:59.140 --> 00:30:00.140
- Yeah, for sure.


00:30:00.140 --> 00:30:03.940
- Well, if your screen is willing,


00:30:03.940 --> 00:30:07.460
actual screen on your like actual monitor is willing,


00:30:07.460 --> 00:30:08.940
let's look at some examples.


00:30:08.940 --> 00:30:10.500
So I think-


00:30:10.500 --> 00:30:13.900
- I have to admit I'm flying blind right now.


00:30:13.900 --> 00:30:14.980
My screen is-


00:30:14.980 --> 00:30:15.820
- All right.


00:30:15.820 --> 00:30:16.660
- On me.


00:30:16.660 --> 00:30:18.460
- Hopefully I'll try to describe it.


00:30:18.460 --> 00:30:19.300
You'll have to-


00:30:19.300 --> 00:30:21.820
- Yeah, I've got my phone up so I can follow along.


00:30:21.820 --> 00:30:22.660
- Yeah, perfect.


00:30:22.660 --> 00:30:24.620
- Sorry, Linux.


00:30:24.620 --> 00:30:25.700
- No, no, no, it's all good.


00:30:25.700 --> 00:30:26.540
It's all good.


00:30:26.540 --> 00:30:28.500
Versus people listening.


00:30:28.500 --> 00:30:30.860
It's not that like the screen sharing is not working.


00:30:30.860 --> 00:30:33.100
Like the actual whole display is having a trouble.


00:30:33.100 --> 00:30:34.780
- Yeah, I switched to Linux.


00:30:34.780 --> 00:30:36.120
- But luckily it's still going.


00:30:36.120 --> 00:30:38.300
- Yeah, I switched to Linux two years ago


00:30:38.300 --> 00:30:40.220
and 99% of the time it works great.


00:30:40.220 --> 00:30:42.340
But of course on this podcast, besides.


00:30:42.340 --> 00:30:43.500
- Yeah, well.


00:30:43.500 --> 00:30:44.340
- It's fine.


00:30:44.340 --> 00:30:47.860
- Murphy waits for the maximum pressure.


00:30:47.860 --> 00:30:49.120
- Maximum pain.


00:30:49.120 --> 00:30:50.820
- Exactly.


00:30:50.820 --> 00:30:55.160
But yeah, so let me just go through a couple here


00:30:55.160 --> 00:30:56.060
that I think we're need.


00:30:56.060 --> 00:30:57.780
I had pulled them up.


00:30:57.780 --> 00:31:00.180
One of them was this active search,


00:31:00.180 --> 00:31:01.980
because I feel like this is the type of thing


00:31:01.980 --> 00:31:03.440
that is like really easy,


00:31:03.440 --> 00:31:06.380
but also really calls out


00:31:06.380 --> 00:31:08.580
for some interesting JavaScript things.


00:31:08.580 --> 00:31:12.380
So over here, you've got a page,


00:31:12.380 --> 00:31:14.100
you don't have the outer shell bits, right?


00:31:14.100 --> 00:31:17.100
Body and HTML, whatever, you don't need that.


00:31:17.100 --> 00:31:19.620
Right, you've got a header that says,


00:31:19.620 --> 00:31:21.660
what we're gonna do is we're gonna search.


00:31:21.660 --> 00:31:22.500
- Yep.


00:31:22.500 --> 00:31:27.260
- And then you have an HTMX indicator next to the title,


00:31:27.260 --> 00:31:30.340
Presumably when something's happening over an AJAX request,


00:31:30.340 --> 00:31:32.780
that thing spins and then when it stops, it goes away.


00:31:32.780 --> 00:31:33.900
Is that what that means?


00:31:33.900 --> 00:31:37.340
- Yeah, that's, so the class HTMX indicator


00:31:37.340 --> 00:31:40.020
is a class that's dynamically indicated,


00:31:40.020 --> 00:31:43.060
or excuse me, dynamically added to your webpage.


00:31:43.060 --> 00:31:47.180
And it allows you to start with an opacity of zero.


00:31:47.180 --> 00:31:49.820
And then when a class is added to it,


00:31:49.820 --> 00:31:52.980
it'll transition to an opacity of one.


00:31:52.980 --> 00:31:54.860
And so that's the best pattern that I found


00:31:54.860 --> 00:31:56.300
for having a request indicator.


00:31:56.300 --> 00:31:58.620
And one of the problems that you run into


00:31:58.620 --> 00:32:02.060
and all, you know, even normal web requests,


00:32:02.060 --> 00:32:04.420
browsers these days often don't do a very good job


00:32:04.420 --> 00:32:07.120
of notifying users something's happening, right?


00:32:07.120 --> 00:32:12.720
And so this is particularly a problem when Ajax is in play,


00:32:12.720 --> 00:32:15.660
there's no indicator to say, hey, something's going on.


00:32:15.660 --> 00:32:18.660
And so HTML provides infrastructure


00:32:18.660 --> 00:32:21.180
for doing that sort of thing for you.


00:32:21.180 --> 00:32:22.020
And so that's-


00:32:22.020 --> 00:32:23.220
- And you don't have to do anything, right?


00:32:23.220 --> 00:32:25.700
Just having this thing exist, it knows, okay,


00:32:25.700 --> 00:32:28.120
if I'm doing a request somehow, some way,


00:32:28.120 --> 00:32:28.960
like while it's happening.


00:32:28.960 --> 00:32:31.920
- Well, yeah, you do have to call out


00:32:31.920 --> 00:32:34.200
the indicator that you wanna show.


00:32:34.200 --> 00:32:36.840
Now, one thing I should say with attributes,


00:32:36.840 --> 00:32:38.300
they're typically inherited.


00:32:38.300 --> 00:32:40.520
So if you had one indicator that you wanted to show


00:32:40.520 --> 00:32:43.520
for all Ajax requests, for example,


00:32:43.520 --> 00:32:45.980
you could put the Ajax indicator attribute


00:32:45.980 --> 00:32:49.040
on the body of your web app.


00:32:49.040 --> 00:32:52.960
And then all Ajax requests would then use that


00:32:52.960 --> 00:32:56.660
'cause it's as with CSS attributes are inherited


00:32:56.660 --> 00:33:00.380
and most attributes are inherited in HTMX.


00:33:00.380 --> 00:33:04.180
And so you can hoist attributes up the DOM


00:33:04.180 --> 00:33:06.740
and have them apply to multiple things.


00:33:06.740 --> 00:33:11.740
So you can avoid repeating yourself using that technique.


00:33:11.740 --> 00:33:18.820
- Okay, cool.


00:33:18.820 --> 00:33:22.140
So we've got that little indicator there


00:33:22.140 --> 00:33:22.980
- And you, yeah, like you said,


00:33:22.980 --> 00:33:25.740
so you've got to indicate which indicator you want to use,


00:33:25.740 --> 00:33:28.100
but you don't have to trigger it.


00:33:28.100 --> 00:33:29.740
- Yeah, exactly.


00:33:29.740 --> 00:33:32.960
- You've got an input, like a text input,


00:33:32.960 --> 00:33:35.020
and it has a placeholder that just says,


00:33:35.020 --> 00:33:37.860
"Please begin typing to search."


00:33:37.860 --> 00:33:40.820
It has an HX-POST, which is /search.


00:33:40.820 --> 00:33:45.820
Presumably it's posting the data of it as a form, right?


00:33:45.820 --> 00:33:47.620
- Yeah, it's posting it.


00:33:47.620 --> 00:33:48.460
Yeah, exactly.


00:33:48.460 --> 00:33:50.980
It's posting it and including the, by default,


00:33:50.980 --> 00:33:54.180
If it's on an input, it'll include that input's value.


00:33:54.180 --> 00:33:55.180
- Nice.


00:33:55.180 --> 00:33:57.420
And then it has a trigger.


00:33:57.420 --> 00:34:01.200
So the trigger is key up, changed.


00:34:01.200 --> 00:34:03.660
That's two things, right?


00:34:03.660 --> 00:34:06.140
Like, so if I command V it,


00:34:06.140 --> 00:34:08.860
or like somehow like drag text into it or key up.


00:34:08.860 --> 00:34:11.400
So either event, is that what that's saying?


00:34:11.400 --> 00:34:14.100
- No, changed is a little different.


00:34:14.100 --> 00:34:16.900
So key up is the event that we're responding to.


00:34:16.900 --> 00:34:19.220
And then change says only issue your request


00:34:19.220 --> 00:34:21.820
if the input value has changed.


00:34:21.820 --> 00:34:22.660
- Got it, okay.


00:34:22.660 --> 00:34:25.120
So if I somehow hit,


00:34:25.120 --> 00:34:27.740
- So if you hit an arrow key for example.


00:34:27.740 --> 00:34:28.580
- Yeah, yeah, exactly.


00:34:28.580 --> 00:34:29.420
Okay, got it.


00:34:29.420 --> 00:34:30.260
Arrow key or backspace.


00:34:30.260 --> 00:34:31.940
- The value doesn't change.


00:34:31.940 --> 00:34:34.420
You don't wanna issue a request in that case.


00:34:34.420 --> 00:34:35.500
- Yeah, that makes sense.


00:34:35.500 --> 00:34:38.740
The other thing you have is delay 500 milliseconds


00:34:38.740 --> 00:34:42.540
because it depends on what the event is.


00:34:42.540 --> 00:34:44.700
Like click, maybe it doesn't matter,


00:34:44.700 --> 00:34:47.140
but like mouse move,


00:34:47.140 --> 00:34:48.740
you're gonna get a lot of those events, right?


00:34:48.740 --> 00:34:51.740
You don't wanna just wreck the server uselessly.


00:34:51.740 --> 00:34:53.260
You wanna say, okay, like,


00:34:53.260 --> 00:34:55.140
instead of just flash, flash, flash the screen,


00:34:55.140 --> 00:34:58.660
like just wait till they've slowed down typing.


00:34:58.660 --> 00:34:59.500
- Right, exactly.


00:34:59.500 --> 00:35:02.180
So this is called debouncing an input, right?


00:35:02.180 --> 00:35:05.100
You don't wanna, on every event,


00:35:05.100 --> 00:35:06.780
you don't wanna issue a request.


00:35:06.780 --> 00:35:09.380
That would be crazy and not a good user experience.


00:35:09.380 --> 00:35:11.460
And certainly it would be very hard on your server.


00:35:11.460 --> 00:35:14.700
And so what you can do is you can add a delay modifier


00:35:14.700 --> 00:35:17.600
to a trigger and say, delay,


00:35:17.600 --> 00:35:20.000
wait until a key up.


00:35:20.000 --> 00:35:23.080
So if a key up occurs, wait 500 milliseconds.


00:35:23.080 --> 00:35:25.960
And if another key up occurs in that 500 milliseconds,


00:35:25.960 --> 00:35:27.680
don't issue the original request.


00:35:27.680 --> 00:35:30.360
So you effectively wait for the user to stop typing


00:35:30.360 --> 00:35:32.840
before you issue a request.


00:35:32.840 --> 00:35:36.400
And there's another option, which is a throttle,


00:35:36.400 --> 00:35:38.880
which might be more appropriate for mouse movements


00:35:38.880 --> 00:35:42.920
where you say only issue a request every second


00:35:42.920 --> 00:35:44.880
or something according to mouse moves.


00:35:44.880 --> 00:35:46.720
Depends very much on what you're trying to accomplish


00:35:46.720 --> 00:35:50.600
with your UX, those are two different techniques for it.


00:35:50.600 --> 00:35:52.240
- Yeah, okay, very cool.


00:35:52.240 --> 00:35:55.960
The final thing is to set the target,


00:35:55.960 --> 00:35:58.280
which is a CSS selector.


00:35:58.280 --> 00:36:03.280
So hash search results, which is the ID.


00:36:03.280 --> 00:36:04.920
And you've got a table with the search results


00:36:04.920 --> 00:36:05.820
and that's it.


00:36:05.820 --> 00:36:08.680
This is the, besides the server side


00:36:08.680 --> 00:36:10.840
that does the actual search response,


00:36:10.840 --> 00:36:12.440
this is the entire implementation


00:36:12.440 --> 00:36:14.720
of your dynamic search page, right?


00:36:14.720 --> 00:36:15.560
- Yeah, that's right.


00:36:15.560 --> 00:36:16.460
So what is that?


00:36:16.460 --> 00:36:19.020
That's, it looks like four attributes.


00:36:19.020 --> 00:36:23.700
You have four attributes to implement dynamic search


00:36:23.700 --> 00:36:25.740
or active search, I think is what Google terms it


00:36:25.740 --> 00:36:28.020
when you go to Google and start searching.


00:36:28.020 --> 00:36:30.620
And this is a great example of something


00:36:30.620 --> 00:36:32.740
that I think many web apps would benefit from.


00:36:32.740 --> 00:36:35.980
And it can be achieved very quickly


00:36:35.980 --> 00:36:39.140
with just a small amount of HTMX on the front end


00:36:39.140 --> 00:36:41.900
and a small refactoring of the code


00:36:41.900 --> 00:36:44.020
you probably already have on the backend.


00:36:44.940 --> 00:36:46.880
- Yeah, what I really like about this


00:36:46.880 --> 00:36:48.980
is if you've already implemented the search page


00:36:48.980 --> 00:36:51.380
to return a table of results,


00:36:51.380 --> 00:36:53.740
you've already written all this code.


00:36:53.740 --> 00:36:55.180
Everything is here.


00:36:55.180 --> 00:36:57.100
You have a form, you've submitted the form,


00:36:57.100 --> 00:36:58.920
you've got a response, you've rendered the table,


00:36:58.920 --> 00:37:00.760
you probably show the form again.


00:37:00.760 --> 00:37:02.540
Although those things are present,


00:37:02.540 --> 00:37:06.940
you just can turn it to a on key down,


00:37:06.940 --> 00:37:11.940
key up rather, basically make it much nicer


00:37:11.940 --> 00:37:14.700
without almost any effort.


00:37:14.700 --> 00:37:15.540
- Yeah, exactly.


00:37:15.540 --> 00:37:17.500
And again, I think this is showing how


00:37:17.500 --> 00:37:20.380
HTMX is taking HTML as a hypermedia


00:37:20.380 --> 00:37:22.380
and pushing it forward, right?


00:37:22.380 --> 00:37:24.780
This, you know, I think in an ideal world,


00:37:24.780 --> 00:37:26.960
this would just be part of HTML.


00:37:26.960 --> 00:37:30.080
It's just taking this hypermedia concept


00:37:30.080 --> 00:37:32.140
and saying, let's go further with it


00:37:32.140 --> 00:37:34.580
because HTML is kind of stalled as a hypermedia


00:37:34.580 --> 00:37:36.700
and they aren't doing much with it.


00:37:36.700 --> 00:37:39.460
So that's very much where HTMX is coming from.


00:37:39.460 --> 00:37:43.940
And that's the philosophical underpinning of the library.


00:37:43.940 --> 00:37:45.600
- Yeah, super cool.


00:37:45.600 --> 00:37:49.100
All right, so one of the things I love about your examples,


00:37:49.100 --> 00:37:53.200
one, this whole library has a rich set of examples.


00:37:53.200 --> 00:37:55.040
We'll go through two others, I think.


00:37:55.040 --> 00:37:55.880
- Sure.


00:37:55.880 --> 00:37:59.600
- And, but one, the examples are there,


00:37:59.600 --> 00:38:01.600
they're clear, they're visual,


00:38:01.600 --> 00:38:04.080
and you have a live one right embedded in the page.


00:38:04.080 --> 00:38:06.560
I don't have to pull up like rebel it or whatever


00:38:06.560 --> 00:38:09.260
to like go figure out, well, how's this really gonna work?


00:38:09.260 --> 00:38:10.100
I can just go here.


00:38:10.100 --> 00:38:12.880
So if I wanted to see if there's a user named Michael,


00:38:12.880 --> 00:38:17.320
I'll just type MI, no, but there are,


00:38:17.320 --> 00:38:21.120
there's a username Molly with MI in the domain


00:38:21.120 --> 00:38:26.120
and there's Jessamine with an MI in her name and so on.


00:38:26.120 --> 00:38:30.400
Right, so I mean, that's amazing.


00:38:30.400 --> 00:38:33.560
- Yeah, yeah, I really, I've tried to focus


00:38:33.560 --> 00:38:35.600
on making things as visual as possible


00:38:35.600 --> 00:38:38.280
because what I run into is people don't believe


00:38:38.280 --> 00:38:41.200
what you can accomplish with this library.


00:38:41.200 --> 00:38:43.840
And so I really wanted to make it jump out and say,


00:38:43.840 --> 00:38:47.040
hey, you know, yeah, there's stuff you can do in Vue.js


00:38:47.040 --> 00:38:51.680
that would be tough to do in HTMX or React, you know,


00:38:51.680 --> 00:38:53.760
React or whatever you're using for your front end.


00:38:53.760 --> 00:38:55.880
But nonetheless, there's a lot of stuff


00:38:55.880 --> 00:38:57.920
that would benefit a lot of web apps


00:38:57.920 --> 00:39:01.200
that they can be done using this simpler model.


00:39:01.200 --> 00:39:03.400
And if you're able to, you know,


00:39:03.400 --> 00:39:05.120
the question is, is it good enough?


00:39:05.120 --> 00:39:09.120
And I think it is good enough for 90, 90 plus percent


00:39:09.120 --> 00:39:10.880
of the websites that are out there.


00:39:10.880 --> 00:39:12.840
And it certainly would improve, you know,


00:39:12.840 --> 00:39:15.000
the vast majority of websites that were out there


00:39:15.000 --> 00:39:17.760
with just a little bit of HTMX.


00:39:17.760 --> 00:39:19.000
- Yeah.


00:39:19.000 --> 00:39:21.920
It reminds me of what jQuery did for the web.


00:39:21.920 --> 00:39:26.200
It doesn't remind me of jQuery, but jQuery for,


00:39:26.200 --> 00:39:28.880
I know probably a lot of people view jQuery negatively


00:39:28.880 --> 00:39:31.960
as like the sort of spaghetti code type of story


00:39:31.960 --> 00:39:35.660
these days, but when it came out, it was like,


00:39:35.660 --> 00:39:38.040
oh my gosh, I can sprinkle in a few things


00:39:38.040 --> 00:39:40.720
and this becomes really amazing, right?


00:39:40.720 --> 00:39:42.760
And I get that feeling as well.


00:39:42.760 --> 00:39:45.460
It's like easy to add to something that exists.


00:39:45.460 --> 00:39:46.500
- Yeah, that's right.


00:39:46.500 --> 00:39:48.620
And this whole thing,


00:39:48.620 --> 00:39:51.020
I came out of the jQuery world just like you did.


00:39:51.020 --> 00:39:54.980
And so I think you're right that there's,


00:39:54.980 --> 00:39:57.700
with jQuery, there was always an incrementalist approach.


00:39:57.700 --> 00:39:59.500
You could add things incrementally.


00:39:59.500 --> 00:40:02.220
You didn't have to buy into a huge bit of infrastructure.


00:40:02.220 --> 00:40:04.260
It turned into spaghetti code in the long run.


00:40:04.260 --> 00:40:07.340
And I agree with those criticisms of jQuery.


00:40:07.340 --> 00:40:12.340
And so hopefully with HTMX, because of the way it's built,


00:40:12.340 --> 00:40:15.720
you're not gonna run into those same issues.


00:40:15.720 --> 00:40:17.180
And I think there's some,


00:40:17.180 --> 00:40:18.960
conceptually there are reasons why that is.


00:40:18.960 --> 00:40:22.100
So with HTMX, you tend to put the actions


00:40:22.100 --> 00:40:24.200
on the thing that does the action.


00:40:24.200 --> 00:40:26.280
Whereas in jQuery, you would move things


00:40:26.280 --> 00:40:28.040
to a separate place.


00:40:28.040 --> 00:40:30.240
- Right, like dollar document ready sort of thing.


00:40:30.240 --> 00:40:32.640
- Right, they would be living somewhere else.


00:40:32.640 --> 00:40:37.120
And that was kind of sold under this idea


00:40:37.120 --> 00:40:41.760
separation of concerns, which is a design principle for software.


00:40:41.760 --> 00:40:47.560
I've been trying to push this idea of locality of behavior, which is intention


00:40:47.560 --> 00:40:48.820
with separation of concerns.


00:40:48.820 --> 00:40:54.500
And the idea of locality of behavior is that you want to put the things that a


00:40:54.500 --> 00:40:56.440
code unit does in the code unit.


00:40:56.440 --> 00:40:59.040
So, button should say what it does.


00:40:59.040 --> 00:41:04.160
It should say, "I issue a post to this URL, and then I do this with the response."


00:41:04.160 --> 00:41:05.960
And that's exactly what HTMX does.


00:41:05.960 --> 00:41:08.600
And again, that's in contrast with jQuery


00:41:08.600 --> 00:41:11.680
where you would hook up a click handler in some other place


00:41:11.680 --> 00:41:13.440
and you would just be staring at this button


00:41:13.440 --> 00:41:16.360
wondering why it was doing what it was doing.


00:41:16.360 --> 00:41:20.800
And so locality of behavior is what I'm trying to use


00:41:20.800 --> 00:41:23.760
as terminology to describe this idea


00:41:23.760 --> 00:41:26.480
of putting stuff in line in the HTML


00:41:26.480 --> 00:41:28.680
to explain what this thing does.


00:41:28.680 --> 00:41:30.960
And there are other tools that are doing this as well


00:41:30.960 --> 00:41:32.680
that are getting popular.


00:41:32.680 --> 00:41:37.680
The two big ones are AlpineJS and Tailwind CSS.


00:41:37.680 --> 00:41:41.040
Both of those, you put your stuff in the HTML.


00:41:41.040 --> 00:41:45.040
And I think those two products pair very well with HTMX


00:41:45.040 --> 00:41:46.880
in that you can kind of do everything


00:41:46.880 --> 00:41:48.260
right there in your HTML.


00:41:48.260 --> 00:41:50.100
Can be a little overwhelming at first


00:41:50.100 --> 00:41:52.000
if you're not used to that style of programming,


00:41:52.000 --> 00:41:55.820
but it has a lot of benefits associated with it.


00:41:55.820 --> 00:41:57.280
- Yeah, cool.


00:41:57.280 --> 00:41:59.040
I've never, I haven't even heard of AlpineJS,


00:41:59.040 --> 00:42:00.820
so I'm gonna definitely have to check that out.


00:42:00.820 --> 00:42:01.840
But Tailwind I've heard of,


00:42:01.840 --> 00:42:03.880
and Tailwind's pretty interesting as well.


00:42:03.880 --> 00:42:08.880
It's like sort of a replacement for Bootstrap,


00:42:08.880 --> 00:42:11.480
but not in the same sort of abstract style.


00:42:11.480 --> 00:42:12.480
It's more like you say,


00:42:12.480 --> 00:42:15.480
you describe it as the way you want it to be.


00:42:15.480 --> 00:42:17.800
Like, I want the font to be medium,


00:42:17.800 --> 00:42:21.160
rather than say this is the main text,


00:42:21.160 --> 00:42:23.880
and then main text is added medium size, right?


00:42:23.880 --> 00:42:25.360
- Yeah, exactly.


00:42:25.360 --> 00:42:26.520
You inline things.


00:42:26.520 --> 00:42:28.440
So when you're looking at a button,


00:42:28.440 --> 00:42:32.140
you can see why it has rounded curves


00:42:32.140 --> 00:42:35.360
or why it has the padding that it has and so forth.


00:42:35.360 --> 00:42:39.820
And so I think people have started to recognize


00:42:39.820 --> 00:42:41.100
the separation of concerns


00:42:41.100 --> 00:42:43.140
while certainly a good thing in some ways


00:42:43.140 --> 00:42:46.620
and a valid design principle has some disadvantages.


00:42:46.620 --> 00:42:49.980
And the big one that I see is this sort of spooky action


00:42:49.980 --> 00:42:54.340
at a distance where someone can change a file somewhere else


00:42:54.340 --> 00:42:57.980
and suddenly your button doesn't work anymore or whatever.


00:42:57.980 --> 00:43:01.260
- I think, well, the separation in this scenario is


00:43:01.260 --> 00:43:04.340
HX-posts is /search.


00:43:04.340 --> 00:43:07.140
Like this describes in the,


00:43:07.140 --> 00:43:09.780
exactly in the web sense of what a URI means


00:43:09.780 --> 00:43:13.460
to describe this is what I want this to be,


00:43:13.460 --> 00:43:15.860
but it doesn't describe the implementation of it, right?


00:43:15.860 --> 00:43:17.060
That lives in the server.


00:43:17.060 --> 00:43:18.880
And so I think there's an interesting philosophy


00:43:18.880 --> 00:43:20.080
there as well.


00:43:20.080 --> 00:43:21.420
- Yeah, yeah, there is.


00:43:21.420 --> 00:43:23.140
And it's really that rest,


00:43:23.140 --> 00:43:27.860
the restful uniform interface idea from the early web.


00:43:27.860 --> 00:43:30.220
It's, you know, I keep saying this,


00:43:30.220 --> 00:43:32.020
but we're trying to take HTML


00:43:32.020 --> 00:43:34.340
and drive it forward as a hypertext.


00:43:34.340 --> 00:43:35.500
- Yeah. - Give you more power


00:43:35.500 --> 00:43:37.820
as a hypertext developer.


00:43:37.820 --> 00:43:39.260
- Yeah, super cool.


00:43:39.260 --> 00:43:41.540
All right, let's take a few things from the live audience.


00:43:41.540 --> 00:43:42.900
So we got Nick says,


00:43:42.900 --> 00:43:45.260
"I love that this supplements server-side frameworks


00:43:45.260 --> 00:43:48.300
"like Django rather than trying to replace parts of them."


00:43:48.300 --> 00:43:49.420
Yeah.


00:43:49.420 --> 00:43:51.340
- Yeah, absolutely. - Sure.


00:43:51.340 --> 00:43:53.780
Alec has an interesting fix for your monitor.


00:43:53.780 --> 00:43:56.460
Pseudo app install new monitor, easy.


00:43:56.460 --> 00:43:57.740
Since you're on the list, right?


00:43:57.740 --> 00:43:59.380
If I could get a terminal to show,


00:43:59.380 --> 00:44:01.260
I've got my laptop monitor over here.


00:44:01.260 --> 00:44:03.860
I'm literally staring at a blank, at a black screen.


00:44:03.860 --> 00:44:05.140
It flickers every once in a while,


00:44:05.140 --> 00:44:07.860
so I get a preview. - Get a quick view.


00:44:07.860 --> 00:44:09.540
- I'm not touching anything.


00:44:09.540 --> 00:44:11.780
If it's recording, it's working.


00:44:11.780 --> 00:44:13.820
- And then Nick also says,


00:44:13.820 --> 00:44:16.060
"Now we need an HX-Python tag


00:44:16.060 --> 00:44:18.220
to run arbitrary Python in the browser."


00:44:18.220 --> 00:44:20.940
Just kidding. - Well, yeah, no, I don't.


00:44:20.940 --> 00:44:24.540
I actually, with HTMX, I think that you've removed


00:44:24.540 --> 00:44:27.720
a lot of the pressure to have Python in the browser.


00:44:27.720 --> 00:44:28.640
with HTMX.


00:44:28.640 --> 00:44:32.240
And so I was, you know, all jokes aside,


00:44:32.240 --> 00:44:37.240
I was optimistic when WebAssembly was first proposed,


00:44:37.240 --> 00:44:40.600
that it would break the dominance of JavaScript


00:44:40.600 --> 00:44:41.840
in the browser.


00:44:41.840 --> 00:44:43.840
But my experience thus far,


00:44:43.840 --> 00:44:46.400
and I have to admit I haven't looked at it in a while,


00:44:46.400 --> 00:44:49.920
is that WebAssembly has been so low level


00:44:49.920 --> 00:44:53.680
that it's probably not gonna help.


00:44:53.680 --> 00:44:54.520
And maybe that was,


00:44:54.520 --> 00:44:56.160
I can't tell if that was intentional or not.


00:44:56.160 --> 00:44:59.940
But in my experience, there wasn't a good interop layer


00:44:59.940 --> 00:45:03.480
between the DOM and WebAssembly even.


00:45:03.480 --> 00:45:07.760
And so, okay, the vast majority of scripting I wanna do


00:45:07.760 --> 00:45:08.600
is DOM related.


00:45:08.600 --> 00:45:10.060
- Yeah, it's all about the DOM.


00:45:10.060 --> 00:45:13.400
So let me give you my WebAssembly sidebar here


00:45:13.400 --> 00:45:15.160
and I'd love to hear your thoughts.


00:45:15.160 --> 00:45:19.040
I hear two problems with WebAssembly.


00:45:19.040 --> 00:45:20.640
One is this DOM story, right?


00:45:20.640 --> 00:45:22.900
Like this could be fixed, right?


00:45:22.900 --> 00:45:25.640
WebAssembly could be evolved to have like a,


00:45:25.640 --> 00:45:28.000
Like, and here's the DOM API.


00:45:28.000 --> 00:45:28.840
- Right. - In a real


00:45:28.840 --> 00:45:29.660
straightforward way.


00:45:29.660 --> 00:45:30.880
I know there's a lot of separation and whatnot,


00:45:30.880 --> 00:45:35.160
but I cannot believe that it couldn't be figured out.


00:45:35.160 --> 00:45:39.400
Two, the problem I hear about this is,


00:45:39.400 --> 00:45:42.480
well, you can have Python in the browser,


00:45:42.480 --> 00:45:45.280
and things like PyIodide have actually done this


00:45:45.280 --> 00:45:49.040
to like compile the C into WebAssembly,


00:45:49.040 --> 00:45:52.360
the CPython runtime in the scientific libraries,


00:45:52.360 --> 00:45:54.000
into a WebAssembly thing,


00:45:54.000 --> 00:45:55.040
and then you can download it,


00:45:55.040 --> 00:45:56.260
and you can do limited stuff.


00:45:56.260 --> 00:45:58.400
It's limited because of the limitations of the DOM,


00:45:58.400 --> 00:46:00.400
but you can still run Python in your browser.


00:46:00.400 --> 00:46:03.280
It just so happens it's a 10 meg download.


00:46:03.280 --> 00:46:04.240
Right?


00:46:04.240 --> 00:46:07.480
But here's what I would love to see.


00:46:07.480 --> 00:46:09.840
I would love to see the major language providers,


00:46:09.840 --> 00:46:14.840
C++, Python, .NET, you just go down the list, Java, Rails,


00:46:14.840 --> 00:46:19.640
provide a WebAssembly thing against some API,


00:46:19.640 --> 00:46:22.080
and every major browser just builds that in.


00:46:22.080 --> 00:46:27.080
So my Firefox comes with Python, Ruby, Java, and .NET.


00:46:27.080 --> 00:46:30.200
These are all like 10 or 20 meg binaries.


00:46:30.200 --> 00:46:31.540
- Right.


00:46:31.540 --> 00:46:33.840
- The world would be, then that whole problem of,


00:46:33.840 --> 00:46:34.800
well, do you download it?


00:46:34.800 --> 00:46:35.640
What if you re-download?


00:46:35.640 --> 00:46:38.600
What if it's out of, like, just, they ship JavaScript.


00:46:38.600 --> 00:46:42.020
If all they had to do is include a host of other features


00:46:42.020 --> 00:46:44.760
as WebAssembly, the problem would be solved.


00:46:44.760 --> 00:46:46.720
But there's just a little too much friction


00:46:46.720 --> 00:46:48.920
along the way to make that happen, I think.


00:46:48.920 --> 00:46:51.840
- Yeah, it really, the core problem there, I think,


00:46:51.840 --> 00:46:54.760
is the core libraries that come


00:46:54.760 --> 00:46:56.800
with all these programming languages.


00:46:56.800 --> 00:46:59.080
It's one reason why Rust actually does pretty well


00:46:59.080 --> 00:47:01.880
with WebAssembly, it just doesn't come with very much.


00:47:01.880 --> 00:47:05.720
And so that's a reasonable solution.


00:47:05.720 --> 00:47:07.960
If I was super passionate about Python,


00:47:07.960 --> 00:47:10.160
I might look at just writing an interpretive.


00:47:10.160 --> 00:47:11.820
And it sounds like there might already be


00:47:11.820 --> 00:47:15.200
an interpreted version of Python in the browser.


00:47:15.200 --> 00:47:18.600
So HyperScript, which is a scripting language


00:47:18.600 --> 00:47:21.080
that I'm working on as kind of a passion project


00:47:21.080 --> 00:47:23.500
that's loosely associated with HTMX


00:47:23.500 --> 00:47:26.260
is a scripting language and it works in the browser


00:47:26.260 --> 00:47:27.460
and it's just interpreted.


00:47:27.460 --> 00:47:29.980
And JavaScript is so fast in the browser now


00:47:29.980 --> 00:47:31.660
that you can actually get away with it.


00:47:31.660 --> 00:47:33.900
So as long as your Python wasn't, you know,


00:47:33.900 --> 00:47:35.860
trying to do scientific computing,


00:47:35.860 --> 00:47:38.380
you're just trying to do basic web scripting,


00:47:38.380 --> 00:47:42.380
you know, adding classes to DOM elements and so forth.


00:47:42.380 --> 00:47:44.580
- You wanna do Vue.js stuff like stuff,


00:47:44.580 --> 00:47:46.300
but you don't wanna write,


00:47:46.300 --> 00:47:47.700
you wanna create Python classes


00:47:47.700 --> 00:47:50.180
and then like hook Python functions to them, right?


00:47:50.180 --> 00:47:53.660
- Yeah, that actually, in my opinion,


00:47:53.660 --> 00:47:55.180
if I were gonna take a look at that problem,


00:47:55.180 --> 00:47:57.380
I'd look at doing an interpreted language.


00:47:57.380 --> 00:47:58.880
- Yeah, interesting.


00:47:58.880 --> 00:48:02.060
There is a Sculpt, which is pretty interesting.


00:48:02.060 --> 00:48:04.660
And this runs Python in the browser.


00:48:04.660 --> 00:48:07.040
So like the example on the homepage is like a little turtle


00:48:07.040 --> 00:48:10.680
on an HTML canvas and this is a client side,


00:48:10.680 --> 00:48:14.860
but it's like close, it's not the same, right?


00:48:14.860 --> 00:48:15.780
- Right.


00:48:15.780 --> 00:48:17.700
- I mean, that's the same for all the languages.


00:48:17.700 --> 00:48:19.400
All right, let's go back to this example here


00:48:19.400 --> 00:48:22.600
I think there's still a lot of really good things we haven't even touched on.


00:48:22.600 --> 00:48:25.000
And we're only on what, four tags?


00:48:25.000 --> 00:48:27.000
Yeah, I know.


00:48:27.000 --> 00:48:29.000
So we talked about this little example here.


00:48:29.000 --> 00:48:32.000
And as I'm typing, people can see the little searching.


00:48:32.000 --> 00:48:36.200
If you go and type, they can see like in the H3, they can see the little searching bit.


00:48:36.200 --> 00:48:40.400
But all of these things I think are neat.


00:48:40.400 --> 00:48:42.200
But you kind of wonder, well, what's happening?


00:48:42.200 --> 00:48:44.200
Like what's going on really?


00:48:44.200 --> 00:48:46.200
Like, especially if this is a server side thing,


00:48:46.200 --> 00:48:50.540
what's the HTTP traffic with the server.


00:48:50.540 --> 00:48:54.400
And you added this little like built in debuggery


00:48:54.400 --> 00:48:55.880
toolbar thing.


00:48:55.880 --> 00:48:58.440
It's not a debugger toolbar, it's a debugger footer.


00:48:58.440 --> 00:48:59.960
- Yeah. - A debugger footer.


00:48:59.960 --> 00:49:02.400
And as you interact with the examples,


00:49:02.400 --> 00:49:04.040
every one of the examples, you can see,


00:49:04.040 --> 00:49:05.840
well, what is the initial traffic?


00:49:05.840 --> 00:49:08.200
What is sent over?


00:49:08.200 --> 00:49:10.000
And you click on it, it has a history


00:49:10.000 --> 00:49:12.320
of all the requests that thing made.


00:49:12.320 --> 00:49:15.000
What was posted over and then what was returned


00:49:15.000 --> 00:49:19.460
from the server and it's super clear, right?


00:49:19.460 --> 00:49:20.980
Like, you go to the last one,


00:49:20.980 --> 00:49:22.900
I could see exactly this is what's on this,


00:49:22.900 --> 00:49:24.100
you know, up at the top.


00:49:24.100 --> 00:49:24.940
And you look at the bottom,


00:49:24.940 --> 00:49:27.340
well, there's the TRTDs that make that happen.


00:49:27.340 --> 00:49:28.260
- Yeah, yeah.


00:49:28.260 --> 00:49:30.620
Again, I really wanted to focus on the examples


00:49:30.620 --> 00:49:32.780
to drive home just how easy it was.


00:49:32.780 --> 00:49:36.160
And then also what you could accomplish with the library.


00:49:36.160 --> 00:49:39.740
- Yeah, quite cool.


00:49:39.740 --> 00:49:42.820
All right, let's touch on a couple other examples.


00:49:42.820 --> 00:49:44.540
I pulled them up because I wanted to highlight them.


00:49:44.540 --> 00:49:46.700
Click to edit, okay, let's go look at click to edit.


00:49:46.700 --> 00:49:48.420
That's a pretty good one.


00:49:48.420 --> 00:49:49.260
- Yep.


00:49:49.260 --> 00:49:50.100
- Oh, that's the very first one.


00:49:50.100 --> 00:49:51.860
- Again, I apologize, I'm on my phone.


00:49:51.860 --> 00:49:53.620
- Yeah, yeah, yeah, yeah, no worries.


00:49:53.620 --> 00:49:55.980
So here, what you've got is you've got a form


00:49:55.980 --> 00:50:02.060
and it's not form-like, it's like just static text


00:50:02.060 --> 00:50:03.560
with divs and spans and whatnot.


00:50:03.560 --> 00:50:07.380
So you've got first name is Joe,


00:50:07.380 --> 00:50:09.740
last name is Blow, email is such and such.


00:50:09.740 --> 00:50:13.260
And if you hit click to edit, those things all become,


00:50:13.260 --> 00:50:16.980
the values become in text input.


00:50:16.980 --> 00:50:19.460
So I could make Joey Joe and hit submit


00:50:19.460 --> 00:50:22.540
and in place it becomes Joey, right?


00:50:22.540 --> 00:50:23.740
Something that's right.


00:50:23.740 --> 00:50:27.420
This is a really cool example, right?


00:50:27.420 --> 00:50:29.980
Like instead of having forms everywhere,


00:50:29.980 --> 00:50:32.360
you can just have HTML and like a grid


00:50:32.360 --> 00:50:34.980
and you could say, an example I would imagine


00:50:34.980 --> 00:50:37.820
maybe is a grid of responses.


00:50:37.820 --> 00:50:40.180
And then you wanna edit one of the lines at the grid, right?


00:50:40.180 --> 00:50:41.740
I wanna edit this entry and then boom,


00:50:41.740 --> 00:50:44.780
those all become dropdowns, flex,


00:50:44.780 --> 00:50:46.700
or they become date time pickers


00:50:46.700 --> 00:50:48.660
or whatever the heck you wanna make them become.


00:50:48.660 --> 00:50:49.500
And then-


00:50:49.500 --> 00:50:51.100
- Yeah, like an editable row.


00:50:51.100 --> 00:50:52.380
- Yes, exactly.


00:50:52.380 --> 00:50:53.220
- Yep.


00:50:53.220 --> 00:50:54.300
- Yeah, exactly.


00:50:54.300 --> 00:50:56.340
- Yeah, that's exactly right.


00:50:56.340 --> 00:50:58.220
- Yeah, super easy example of what's happening.


00:50:58.220 --> 00:51:01.380
If you click edit, it returns the form HTML text.


00:51:01.380 --> 00:51:04.820
When you submit it, it returns the div span version of it.


00:51:04.820 --> 00:51:05.640
It's beautiful.


00:51:05.640 --> 00:51:06.780
- Yep, yeah, exactly.


00:51:06.780 --> 00:51:10.040
So, you know, we'll probably not go into the details


00:51:10.040 --> 00:51:12.200
of all the attributes that make this happen,


00:51:12.200 --> 00:51:15.360
but there's an HX get to get the form.


00:51:15.360 --> 00:51:19.200
That form gets swapped in to that little element.


00:51:19.200 --> 00:51:20.720
You don't have a big page refresh,


00:51:20.720 --> 00:51:22.440
you don't go to some other URL.


00:51:22.440 --> 00:51:25.440
And then you can click save and it just does a put,


00:51:25.440 --> 00:51:28.280
put being the traditional way to update something.


00:51:28.280 --> 00:51:31.040
- You know the URL and you wanna make a change to it


00:51:31.040 --> 00:51:33.920
instead of a post, you do a put 'cause that's restful.


00:51:33.920 --> 00:51:34.760
- Yeah, exactly.


00:51:34.760 --> 00:51:36.520
And so you use an HX put,


00:51:36.520 --> 00:51:38.800
and then when that put succeeds,


00:51:38.800 --> 00:51:40.960
you would render just the row again.


00:51:40.960 --> 00:51:45.020
And if that put failed for validation reasons, for example,


00:51:45.020 --> 00:51:48.120
you would just render the form with the error messages in it.


00:51:48.120 --> 00:51:50.200
And this is very similar to the way you would do


00:51:50.200 --> 00:51:55.200
standard web app development in the web 1.0 model,


00:51:55.200 --> 00:51:57.480
but you managed to bring down your target


00:51:57.480 --> 00:51:59.000
to just this little form.


00:51:59.000 --> 00:52:01.680
And so you don't have to do redirects


00:52:01.680 --> 00:52:02.960
and stuff like this anymore.


00:52:02.960 --> 00:52:05.100
- Interesting, I hadn't really thought about the errors.


00:52:05.100 --> 00:52:07.480
Yeah, I hadn't thought about the error response,


00:52:07.480 --> 00:52:11.600
but for example, you could say, return the form,


00:52:11.600 --> 00:52:13.480
but in your server-side template,


00:52:13.480 --> 00:52:14.840
you could say, well, this one has an error.


00:52:14.840 --> 00:52:17.480
So what we're gonna do is put an error message at the top


00:52:17.480 --> 00:52:20.840
and we're gonna put an error, has error attribute


00:52:20.840 --> 00:52:23.040
onto the form element, which will make it glow red


00:52:23.040 --> 00:52:24.280
or something like that, right?


00:52:24.280 --> 00:52:25.400
- Exactly.


00:52:25.400 --> 00:52:27.720
And if you wanted, so one common thing to do


00:52:27.720 --> 00:52:31.040
is to you have your error messages elsewhere, right?


00:52:31.040 --> 00:52:32.400
They're not down in that element.


00:52:32.400 --> 00:52:34.520
I like inline error messages myself,


00:52:34.520 --> 00:52:37.320
but a lot of people like to show errors at the top.


00:52:37.320 --> 00:52:40.580
And so HTMX, excuse me, has tools to do that.


00:52:40.580 --> 00:52:43.640
You can use what's called an out of band response.


00:52:43.640 --> 00:52:46.640
So you can have a content that is streamed down


00:52:46.640 --> 00:52:49.600
that specifies this is out of band content


00:52:49.600 --> 00:52:51.600
and it needs to go somewhere else in the DOM.


00:52:51.600 --> 00:52:53.440
Typically it uses an ID.


00:52:53.440 --> 00:52:56.920
And so you could use that to put an error message


00:52:56.920 --> 00:52:59.220
up on the header if you wanted to do that.


00:52:59.220 --> 00:53:01.760
Another common way to do this, one that I like,


00:53:01.760 --> 00:53:03.120
if you're gonna have something like that


00:53:03.120 --> 00:53:05.360
is to have some sort of growl library


00:53:06.240 --> 00:53:07.080
where--


00:53:07.080 --> 00:53:10.360
- Yeah, a toast notification pop-up type of thing.


00:53:10.360 --> 00:53:11.760
- Exactly, something like that.


00:53:11.760 --> 00:53:14.480
And so for that, what you might use is the,


00:53:14.480 --> 00:53:18.320
HTMX has some fairly well-developed response headers,


00:53:18.320 --> 00:53:20.480
and one of them is HX trigger.


00:53:20.480 --> 00:53:23.360
And you can use that to trigger an event with an argument,


00:53:23.360 --> 00:53:26.800
the argument in this case would be the error message to show


00:53:26.800 --> 00:53:30.160
and then you can write a little bit of code on the front end


00:53:30.160 --> 00:53:33.280
to listen for that custom event that you're triggering


00:53:33.280 --> 00:53:36.080
and then show a toast message saying,


00:53:36.080 --> 00:53:37.920
hey, save didn't happen. - Okay, now that's cool.


00:53:37.920 --> 00:53:40.320
- So there's a bunch of different tools in there


00:53:40.320 --> 00:53:42.960
depending on what you're trying to accomplish.


00:53:42.960 --> 00:53:44.280
- Yeah.


00:53:44.280 --> 00:53:45.320
All right, on the live stream,


00:53:45.320 --> 00:53:47.880
Apar says, "Hey, from San Francisco."


00:53:47.880 --> 00:53:50.060
Hey, welcome to the live stream.


00:53:50.060 --> 00:53:51.840
Nick has a comment,


00:53:51.840 --> 00:53:54.680
"I'm curious how this compares to two-way binding


00:53:54.680 --> 00:53:55.920
"with something like Vue.


00:53:55.920 --> 00:53:58.460
"Is the DOM reactive with an underlying data model


00:53:58.460 --> 00:54:00.200
"so that they stay in sync?"


00:54:00.200 --> 00:54:03.020
- The answer is no.


00:54:03.020 --> 00:54:07.660
So HTMX adopts the original model of the web,


00:54:07.660 --> 00:54:09.420
this RESTful model where hyper,


00:54:09.420 --> 00:54:12.900
you may have heard at some point in your programming career,


00:54:12.900 --> 00:54:14.380
the acronym HADEOS.


00:54:14.380 --> 00:54:17.360
It's a bad acronym, particularly these days,


00:54:17.360 --> 00:54:22.180
but the acronym stands for hypermedia or hypertext


00:54:22.180 --> 00:54:24.220
as the engine of application state.


00:54:24.220 --> 00:54:27.100
And so there is no backing model on the client side,


00:54:27.100 --> 00:54:31.500
rather the model, the source of truth is the backend


00:54:31.500 --> 00:54:36.500
and the front end just sits there and reacts to user inputs.


00:54:36.500 --> 00:54:38.420
And whenever a user input occurs


00:54:38.420 --> 00:54:40.540
that needs to trigger a state change,


00:54:40.540 --> 00:54:42.460
a request is issued to the server


00:54:42.460 --> 00:54:44.900
and then the updated state of that resource


00:54:44.900 --> 00:54:47.020
is returned via HTML.


00:54:47.020 --> 00:54:47.840
So that's the--


00:54:47.840 --> 00:54:50.700
- It kind of flows through this interaction, right?


00:54:50.700 --> 00:54:51.900
So let me give you an example.


00:54:51.900 --> 00:54:52.980
So in this click to edit thing,


00:54:52.980 --> 00:54:54.860
when I click edit on the button,


00:54:54.860 --> 00:54:58.900
it knows it's on slash contacts contact slash one.


00:54:58.900 --> 00:55:01.900
and I click the edit, what comes back is a form


00:55:01.900 --> 00:55:06.900
and has hx-put with /contact/1 as the action.


00:55:06.900 --> 00:55:12.060
So then when I submit it, it flows that it was row one


00:55:12.060 --> 00:55:14.020
or item one I was editing on over.


00:55:14.020 --> 00:55:16.580
And then when it comes back, the response is,


00:55:16.580 --> 00:55:20.100
well, now it has the edit/1,


00:55:20.100 --> 00:55:22.140
the contact/1/edit in the URL.


00:55:22.140 --> 00:55:26.100
So it kind of flows the, this is actually super hideous.


00:55:26.100 --> 00:55:28.500
There's many things that you find in these APIs


00:55:28.500 --> 00:55:30.220
and people adopting REST are like,


00:55:30.220 --> 00:55:31.580
oh, we're gonna take all the REST principles


00:55:31.580 --> 00:55:33.940
except for this hypermedia as application state.


00:55:33.940 --> 00:55:35.180
That we don't really care about.


00:55:35.180 --> 00:55:38.580
But this, the more you talk about it, it really is.


00:55:38.580 --> 00:55:39.420
- Yeah, well, it is.


00:55:39.420 --> 00:55:42.340
It's 'cause people, this is a long conversation,


00:55:42.340 --> 00:55:44.220
but holy smokes, I've been arguing with people


00:55:44.220 --> 00:55:46.860
on the internet about this for a while.


00:55:46.860 --> 00:55:48.440
I don't think REST makes any sense


00:55:48.440 --> 00:55:51.780
when you talk about JSON because it does to some extent.


00:55:51.780 --> 00:55:53.660
- The HTTP verbs make sense.


00:55:53.660 --> 00:55:55.500
- Yeah, they do. - That's about it.


00:55:55.500 --> 00:55:56.660
But other than that, right?


00:55:56.660 --> 00:55:57.500
There's a lot more to the whole REST.


00:55:57.500 --> 00:56:01.700
- Maybe the URL layout in some cases makes sense.


00:56:01.700 --> 00:56:04.820
But when Fielding wrote his,


00:56:04.820 --> 00:56:06.900
Roy Fielding is where the term,


00:56:06.900 --> 00:56:10.740
his dissertation at University of California Irvine


00:56:10.740 --> 00:56:13.020
is where all this terminology comes out of.


00:56:13.020 --> 00:56:16.420
And what he wrote, he was describing the web.


00:56:16.420 --> 00:56:17.820
He was describing HTML.


00:56:17.820 --> 00:56:22.300
He was describing like the way web 1.0 worked with that.


00:56:22.300 --> 00:56:26.980
And a big focus on that was this idea of stateless HTML


00:56:26.980 --> 00:56:29.540
in Hypertext as the engine of application state,


00:56:29.540 --> 00:56:31.760
that being one of the crux issues


00:56:31.760 --> 00:56:34.400
within the section that's about


00:56:34.400 --> 00:56:36.760
what's called the uniform interface.


00:56:36.760 --> 00:56:37.840
We don't want you to get too much


00:56:37.840 --> 00:56:39.720
into the details of that right now.


00:56:39.720 --> 00:56:43.180
I'd be happy to talk about that maybe offline later,


00:56:43.180 --> 00:56:45.600
or maybe in a different context.


00:56:45.600 --> 00:56:48.000
But when you're in JSON,


00:56:48.000 --> 00:56:51.280
Hypertext isn't the engine of application state.


00:56:51.280 --> 00:56:52.720
There's a client-side model


00:56:52.720 --> 00:56:54.840
that is your application state.


00:56:54.840 --> 00:56:56.940
and now you're in a stateful world


00:56:56.940 --> 00:56:59.580
and you're in some ways much closer


00:56:59.580 --> 00:57:02.340
to what thick apps used to look like back in the 90s


00:57:02.340 --> 00:57:05.380
than you are to the original web model.


00:57:05.380 --> 00:57:08.220
So it's a different model


00:57:08.220 --> 00:57:10.420
and there are advantages and disadvantages to it.


00:57:10.420 --> 00:57:11.540
I like it a lot.


00:57:11.540 --> 00:57:12.900
I think there's a lot of power to it.


00:57:12.900 --> 00:57:15.860
And so to make a long story short,


00:57:15.860 --> 00:57:19.060
no, there's no reactive aspect here.


00:57:19.060 --> 00:57:23.140
The DOM is the source of truth.


00:57:23.140 --> 00:57:24.940
The server is really the source of truth,


00:57:24.940 --> 00:57:26.820
but the DOM as far as the user is aware


00:57:26.820 --> 00:57:28.660
is the source of truth and it's stateless,


00:57:28.660 --> 00:57:30.420
just like the original web model.


00:57:30.420 --> 00:57:32.460
- Right, the view model is super nice.


00:57:32.460 --> 00:57:35.180
I mean, you create these little JavaScript classes


00:57:35.180 --> 00:57:36.620
and they just kind of build up their data


00:57:36.620 --> 00:57:39.100
and it's really cool and it binds with the DOM,


00:57:39.100 --> 00:57:42.060
but like, what if someone refreshes the page?


00:57:42.060 --> 00:57:43.660
Or something like that, right?


00:57:43.660 --> 00:57:44.500
- Yeah.


00:57:44.500 --> 00:57:46.140
- Oh my gosh, it's gone, oh no.


00:57:46.140 --> 00:57:48.780
So yeah, there could be drawbacks as well.


00:57:48.780 --> 00:57:50.700
- Reactivity is, you know,


00:57:50.700 --> 00:57:52.660
sometimes I can be a little too hard, I think,


00:57:52.660 --> 00:57:57.660
on just the nature of the internet, but reactivity,


00:57:57.660 --> 00:58:02.200
this notion of a reactive two-way binding, that's new.


00:58:02.200 --> 00:58:03.320
That's relatively new.


00:58:03.320 --> 00:58:05.480
There were UI toolkits that did something,


00:58:05.480 --> 00:58:09.560
did similar stuff, but not as deeply as the current set do.


00:58:09.560 --> 00:58:11.080
And so there's something new there


00:58:11.080 --> 00:58:13.320
and it is useful in a lot of ways,


00:58:13.320 --> 00:58:15.560
but for a lot of apps it's overkill


00:58:15.560 --> 00:58:18.480
and there are disadvantages that are associated with it.


00:58:18.480 --> 00:58:21.240
Syncing the two models is difficult.


00:58:21.240 --> 00:58:24.680
And if you let your DOM be the source of truth,


00:58:24.680 --> 00:58:25.960
the server be the source of truth


00:58:25.960 --> 00:58:28.100
and your DOM be a stateless representation of it,


00:58:28.100 --> 00:58:30.800
then there's a huge number of advantages


00:58:30.800 --> 00:58:32.120
that come along with that.


00:58:32.120 --> 00:58:33.120
- Yeah, that's for sure.


00:58:33.120 --> 00:58:36.200
Like if you have the same page open on multiple tabs,


00:58:36.200 --> 00:58:38.240
for example, like the database is still in sync


00:58:38.240 --> 00:58:39.160
of the server.


00:58:39.160 --> 00:58:40.560
All right, let's look at one more example


00:58:40.560 --> 00:58:43.360
then we'll do a little bit of wrap up.


00:58:43.360 --> 00:58:45.200
I'm a little hesitant to show this to people


00:58:45.200 --> 00:58:47.860
'cause I kind of hate this, but it's also a very neat.


00:58:47.860 --> 00:58:48.700
(laughing)


00:58:48.700 --> 00:58:50.400
Infinite scroll.


00:58:50.400 --> 00:58:53.720
- Infinite scroll can also be implemented as click to load.


00:58:53.720 --> 00:58:54.560
- Yes.


00:58:54.560 --> 00:58:59.480
- So I too am ambivalent towards this pattern,


00:58:59.480 --> 00:59:00.320
but it's so common.


00:59:00.320 --> 00:59:04.000
- What I don't like about it is it's super hard to share


00:59:04.000 --> 00:59:04.820
it with somebody.


00:59:04.820 --> 00:59:07.240
They say, okay, go to this part of the search result.


00:59:07.240 --> 00:59:09.240
Like, well, where is it?


00:59:09.240 --> 00:59:10.240
Like, well, keep scrolling down.


00:59:10.240 --> 00:59:13.000
No, like hold down the, you know what I mean?


00:59:13.000 --> 00:59:15.080
It's just like hard to share or to get back to you.


00:59:15.080 --> 00:59:16.680
Anyway, like it's a lot, I don't know.


00:59:16.680 --> 00:59:18.440
But infinite scroll is neat.


00:59:18.440 --> 00:59:21.520
And so here you've got a table row that says


00:59:21.520 --> 00:59:25.840
HX dash get slash context slash page equals two


00:59:25.840 --> 00:59:28.720
or question mark page equals two as a query string.


00:59:28.720 --> 00:59:31.040
And then HX trigger is revealed.


00:59:31.040 --> 00:59:32.560
This is like, as you scroll down,


00:59:32.560 --> 00:59:35.440
when it becomes revealed within the DOM, run this


00:59:35.440 --> 00:59:40.320
and then swap after end.


00:59:40.320 --> 00:59:41.160
- Yeah.


00:59:41.160 --> 00:59:42.280
- What's that mean?


00:59:42.280 --> 00:59:43.720
- After end, so what that means is,


00:59:43.720 --> 00:59:47.160
so you'd put this code on the last row,


00:59:47.160 --> 00:59:51.300
the last result of your page of results.


00:59:51.300 --> 00:59:55.320
And so what that's gonna do is it's gonna issue a request


00:59:55.320 --> 00:59:57.920
to the server, and then when it gets that content back,


00:59:57.920 --> 01:00:01.240
it's going to append it after the end of this element,


01:00:01.240 --> 01:00:03.080
the element that this is on this table row.


01:00:03.080 --> 01:00:04.500
And so that new content,


01:00:04.500 --> 01:00:07.320
which is presumably gonna be a new series of rows


01:00:07.320 --> 01:00:12.320
is going to get appended after the last row.


01:00:12.320 --> 01:00:15.640
And so that's how you get that next set of rows.


01:00:15.640 --> 01:00:19.200
And then on the last row of that, there would be again,


01:00:19.200 --> 01:00:20.640
this when I'm revealed. - This response


01:00:20.640 --> 01:00:22.920
will come back with an HX get on it, right?


01:00:22.920 --> 01:00:25.560
- Yeah, so it'll come back with the HX on it


01:00:25.560 --> 01:00:27.160
and it'll just keep going down the line


01:00:27.160 --> 01:00:28.540
until you finally get to a point


01:00:28.540 --> 01:00:29.560
where you don't have any more.


01:00:29.560 --> 01:00:31.800
And so you don't bother encoding


01:00:31.800 --> 01:00:35.280
one of these revealed triggers


01:00:35.280 --> 01:00:37.720
and that would just be the end of it.


01:00:37.720 --> 01:00:40.960
So I agree with you on, as you are,


01:00:40.960 --> 01:00:42.160
I am ambivalent towards this.


01:00:42.160 --> 01:00:44.640
I tend to prefer paging for exactly the reasons


01:00:44.640 --> 01:00:46.320
that you talk about.


01:00:46.320 --> 01:00:50.640
And I should note that there is an attribute called HX push.


01:00:50.640 --> 01:00:53.600
Is it HX push URL, excuse me,


01:00:53.600 --> 01:00:56.240
that will push the URL of the request


01:00:56.240 --> 01:00:59.920
up into the browser's history,


01:00:59.920 --> 01:01:04.840
like into the URL and add it to the history.


01:01:04.840 --> 01:01:06.600
So you can use the back button and all that.


01:01:06.600 --> 01:01:09.640
And it does all that kind of automagically for you.


01:01:09.640 --> 01:01:12.560
- Does it allow deep linking?


01:01:12.560 --> 01:01:13.400
- What's that?


01:01:13.400 --> 01:01:15.040
- Does it allow deep linking?


01:01:15.040 --> 01:01:16.200
- Yeah, yeah.


01:01:16.200 --> 01:01:19.800
Now that being said, if that URL,


01:01:19.800 --> 01:01:22.560
someone can copy and paste into a new tab, for example.


01:01:22.560 --> 01:01:27.040
And so you have to handle both the HTMX request to that URL


01:01:27.040 --> 01:01:30.800
as well as the normal non HTMX request to that URL.


01:01:30.800 --> 01:01:32.120
And those might be very different.


01:01:32.120 --> 01:01:33.320
- Yeah, but if you did that,


01:01:33.320 --> 01:01:36.080
then it would support potentially deep linking


01:01:36.080 --> 01:01:38.680
into this sort of experience, yeah.


01:01:38.680 --> 01:01:39.520
- Exactly.


01:01:39.520 --> 01:01:42.800
And so, and then I just finished that thought.


01:01:42.800 --> 01:01:46.580
there's a header that comes in when it's an HTMX request,


01:01:46.580 --> 01:01:48.220
HX requests true.


01:01:48.220 --> 01:01:50.060
And so you can check that header and say,


01:01:50.060 --> 01:01:53.260
okay, this wasn't an HTMX request,


01:01:53.260 --> 01:01:56.500
so I need to render the entire surrounding for this thing,


01:01:56.500 --> 01:01:58.260
or, oh, it was an HTMX request,


01:01:58.260 --> 01:02:00.100
so I just need to render this partial.


01:02:00.100 --> 01:02:02.280
And that's a very common pattern to have a little


01:02:02.280 --> 01:02:05.460
if statement on a URL that needs to service both of these


01:02:05.460 --> 01:02:07.340
to check the header value.


01:02:07.340 --> 01:02:08.740
- Oh, that's pretty cool.


01:02:08.740 --> 01:02:09.580
- Yeah. - Nice.


01:02:09.580 --> 01:02:11.300
Okay, so let's see.


01:02:11.300 --> 01:02:13.740
Let me, I'm gonna do it, I'm gonna scroll here.


01:02:13.740 --> 01:02:15.180
- Yep. - Here we go.


01:02:15.180 --> 01:02:19.540
There you go, see the indicator and down cuts some more.


01:02:19.540 --> 01:02:21.300
Oh, fantastic.


01:02:21.300 --> 01:02:22.180
Yeah, there we go.


01:02:22.180 --> 01:02:23.300
And you can obviously, you know,


01:02:23.300 --> 01:02:25.500
pull up the little debug footer


01:02:25.500 --> 01:02:28.540
and see those behaviors here, which is great.


01:02:28.540 --> 01:02:32.540
- Yeah, and again, back-end agnostic.


01:02:32.540 --> 01:02:35.180
So just, this could just be normal Python on the back end,


01:02:35.180 --> 01:02:36.780
nothing fancy.


01:02:36.780 --> 01:02:39.020
- Django, Flask or Rails, take your pick.


01:02:39.020 --> 01:02:39.860
- Yep.


01:02:39.860 --> 01:02:42.540
- Yeah, I mean, it could, I've been bagging on Node


01:02:42.540 --> 01:02:45.100
'cause I'm not a huge fan of it as a platform


01:02:45.100 --> 01:02:47.260
that I wanna work on, but it could also be Node, right?


01:02:47.260 --> 01:02:49.300
Like, if people out there are doing that,


01:02:49.300 --> 01:02:50.140
it could be that.


01:02:50.140 --> 01:02:52.900
- Yeah, hypertext on whatever you'd like.


01:02:52.900 --> 01:02:56.740
- All right, so let me wrap this up


01:02:56.740 --> 01:02:58.880
with a little bit of concreteness here.


01:02:58.880 --> 01:03:01.980
So tell us really quickly about,


01:03:01.980 --> 01:03:04.420
there was Intercooler and now it's HTMX.


01:03:04.420 --> 01:03:08.140
Just real quickly, what is the story with this transition?


01:03:08.140 --> 01:03:09.720
- Yeah, so I created Intercooler,


01:03:09.720 --> 01:03:11.320
which is the predecessor to HTMX.


01:03:11.320 --> 01:03:14.120
HTMX is basically Intercooler 2.0.


01:03:14.120 --> 01:03:17.880
And I created Intercooler back in 2013, I believe.


01:03:17.880 --> 01:03:21.000
And it was, again, I came out of the jQuery world.


01:03:21.000 --> 01:03:26.000
And so I had, it started off basically as a jQuery plugin


01:03:26.000 --> 01:03:28.000
and it grew to the point that I felt like,


01:03:28.000 --> 01:03:30.520
okay, I'm gonna create a separate library for this.


01:03:30.520 --> 01:03:35.520
And then in last year when COVID hit,


01:03:35.520 --> 01:03:37.720
I had always had in the back of my mind


01:03:37.720 --> 01:03:41.280
that I didn't like the jQuery dependency in Intercooler.


01:03:41.280 --> 01:03:43.060
And so I just, we were, you know,


01:03:43.060 --> 01:03:44.300
everyone was kind of at home


01:03:44.300 --> 01:03:46.880
and in order to avoid losing my mind,


01:03:46.880 --> 01:03:51.720
I said, well, I wonder if I could pull the Intercooler,


01:03:51.720 --> 01:03:56.080
or excuse me, the jQuery dependency out of Intercooler.


01:03:56.080 --> 01:03:59.720
And it turned out JavaScript's come a long way


01:03:59.720 --> 01:04:02.060
and I was able to do it pretty quickly.


01:04:02.060 --> 01:04:05.300
And so as I was doing that,


01:04:05.300 --> 01:04:06.560
one other thing that I thought about,


01:04:06.560 --> 01:04:08.000
I really, you know, I learned a lot


01:04:08.000 --> 01:04:09.840
as I built Intercooler.js


01:04:09.840 --> 01:04:13.480
and I developed a much firmer sort of theoretical basis


01:04:13.480 --> 01:04:14.680
for it is like, okay, we're really,


01:04:14.680 --> 01:04:16.920
we're trying to drive HTML forward.


01:04:16.920 --> 01:04:19.160
And one thing that had always annoyed me


01:04:19.160 --> 01:04:23.760
about Intercooler.js was that it was compared with,


01:04:23.760 --> 01:04:26.800
with, you know, Angular was the big one


01:04:26.800 --> 01:04:29.480
when it was first out and then eventually React


01:04:29.480 --> 01:04:32.040
and then, and Vue.js,


01:04:32.040 --> 01:04:34.200
and because it had that JS in the name.


01:04:34.200 --> 01:04:35.960
And so there was people would treat it


01:04:35.960 --> 01:04:38.800
as a JavaScript library rather than thinking of it


01:04:38.800 --> 01:04:41.960
in these more hypertext oriented terms.


01:04:41.960 --> 01:04:45.280
And I was astounded to find out that HTMX org


01:04:45.280 --> 01:04:49.200
was available in 2020, but it was.


01:04:49.200 --> 01:04:51.480
And so I grabbed it and was like, this is a great name.


01:04:51.480 --> 01:04:53.040
I originally called it something else,


01:04:53.040 --> 01:04:56.840
but that came to my senses and said,


01:04:56.840 --> 01:04:58.600
HTMX really captures this.


01:04:58.600 --> 01:05:00.520
We're trying to extend HTML.


01:05:00.520 --> 01:05:03.400
- It's available as a domain name


01:05:03.400 --> 01:05:05.320
and it captures what you're after, perfect.


01:05:05.320 --> 01:05:06.160
- Yeah. - Okay, cool.


01:05:06.160 --> 01:05:08.360
- So it worked out very well.


01:05:08.360 --> 01:05:10.400
- So let me round out our conversation


01:05:10.400 --> 01:05:13.160
with a concrete example here for this.


01:05:13.160 --> 01:05:14.440
So people might wonder like,


01:05:14.440 --> 01:05:16.440
where is this being used out in the world, right?


01:05:16.440 --> 01:05:19.560
Obviously, I think it makes a ton of sense,


01:05:19.560 --> 01:05:21.160
especially in these little like backend,


01:05:21.160 --> 01:05:23.740
internal corporate apps that don't get a ton of love,


01:05:23.740 --> 01:05:25.520
but could really benefit from this.


01:05:25.520 --> 01:05:28.640
But there's also some popular ones like realpython.com


01:05:28.640 --> 01:05:32.520
out there is one of the most popular ones,


01:05:32.520 --> 01:05:35.960
Python websites out there run by my good friend, Dan Bader.


01:05:35.960 --> 01:05:37.280
And I was just talking to Dan saying,


01:05:37.280 --> 01:05:38.840
I'm gonna talk to you, Carson.


01:05:38.840 --> 01:05:40.160
He's like, oh, I love this.


01:05:40.160 --> 01:05:42.480
I actually use Intercooler on the site.


01:05:42.480 --> 01:05:43.440
- Okay, cool.


01:05:43.440 --> 01:05:45.480
- Yeah, if you go over to the quizzes section,


01:05:45.480 --> 01:05:47.480
you can pull up one of these quizzes


01:05:47.480 --> 01:05:48.840
and you hit start,


01:05:48.840 --> 01:05:50.360
they sort of like test your knowledge thing.


01:05:50.360 --> 01:05:51.720
So here it says like, for example,


01:05:51.720 --> 01:05:53.800
in Python three, the maximum value for an integer


01:05:53.800 --> 01:05:55.560
is two to the 63rd minus one.


01:05:55.560 --> 01:05:56.520
Oh, that's so false.


01:05:56.520 --> 01:05:57.360
And you click on it,


01:05:57.360 --> 01:06:01.520
it like reveals the check answer of the thing.


01:06:01.520 --> 01:06:02.640
and then you go to the next question


01:06:02.640 --> 01:06:07.100
or you can expand the explanation.


01:06:07.100 --> 01:06:10.800
How would you express A5 as a base 16 integer?


01:06:10.800 --> 01:06:11.640
I have no idea.


01:06:11.640 --> 01:06:12.720
- All right.


01:06:12.720 --> 01:06:13.720
- Anyway, I will--


01:06:13.720 --> 01:06:16.160
- Not the point, not the point.


01:06:16.160 --> 01:06:19.280
- This thing, this experience of going through these steps


01:06:19.280 --> 01:06:20.360
with the progress bar,


01:06:20.360 --> 01:06:22.200
'cause there's a cool progress bar,


01:06:22.200 --> 01:06:23.920
and an HTMX and all that stuff.


01:06:23.920 --> 01:06:28.280
This is a cool use case of that type of situation


01:06:28.280 --> 01:06:30.360
that's really nice and easy to do.


01:06:30.360 --> 01:06:32.240
- Yeah, and there's a huge amount of code


01:06:32.240 --> 01:06:33.080
that's written out there,


01:06:33.080 --> 01:06:35.120
even in apps that are more dramatic


01:06:35.120 --> 01:06:38.720
and need this reactive infrastructure in places,


01:06:38.720 --> 01:06:40.520
there are probably places within the app


01:06:40.520 --> 01:06:42.000
where that's not necessary.


01:06:42.000 --> 01:06:43.800
So, one common thing I'll say is,


01:06:43.800 --> 01:06:47.160
okay, maybe HTMX doesn't apply to your entire app.


01:06:47.160 --> 01:06:51.420
Maybe you're doing concurrent editing of rich,


01:06:51.420 --> 01:06:53.440
using Canvas or something crazy like that.


01:06:53.440 --> 01:06:54.980
All right, fine.


01:06:54.980 --> 01:06:57.680
But you probably have a settings page for that app.


01:06:57.680 --> 01:07:01.040
And that setting page is gonna be fairly standard forms,


01:07:01.040 --> 01:07:04.400
you know, and that's something where maybe


01:07:04.400 --> 01:07:07.560
rather than using whatever reactive component you're using


01:07:07.560 --> 01:07:09.860
to manage the really complicated state,


01:07:09.860 --> 01:07:12.680
you could tear all that out, save that complexity budget


01:07:12.680 --> 01:07:15.480
and just use HTMX just to sync with the server


01:07:15.480 --> 01:07:17.800
for your settings page.


01:07:17.800 --> 01:07:20.400
And so, you know, but even, you know,


01:07:20.400 --> 01:07:23.080
how many crazy apps do we use day to day?


01:07:23.080 --> 01:07:25.160
For the most part, I use, you know,


01:07:25.160 --> 01:07:26.740
I go and I read blog posts,


01:07:26.740 --> 01:07:28.860
maybe I check my email and so forth.


01:07:28.860 --> 01:07:31.140
And a lot of those apps could be improved


01:07:31.140 --> 01:07:35.060
pretty dramatically by just using some basic HTMX patterns


01:07:35.060 --> 01:07:38.020
without adding a huge amount of complexity.


01:07:38.020 --> 01:07:39.700
- Yeah, I totally agree.


01:07:39.700 --> 01:07:41.220
I totally agree.


01:07:41.220 --> 01:07:44.020
All right, Carson, I think we're pretty much out of time.


01:07:44.020 --> 01:07:48.380
But let me always ask two questions at the end of the show,


01:07:48.380 --> 01:07:49.220
same two questions.


01:07:49.220 --> 01:07:51.980
So I'll hit with them before we close it out.


01:07:51.980 --> 01:07:53.940
So if you're gonna work on HTMX


01:07:53.940 --> 01:07:55.060
or do some other programming,


01:07:55.060 --> 01:07:57.220
What editor do you use these days?


01:07:57.220 --> 01:07:59.820
- I use WebStorm.


01:07:59.820 --> 01:08:00.720
- WebStorm, right on.


01:08:00.720 --> 01:08:01.780
Yeah, I'm--


01:08:01.780 --> 01:08:02.860
- Jeff Brins.


01:08:02.860 --> 01:08:04.460
- Yeah, I'm a big-- - I'm a Jeff Brins guy.


01:08:04.460 --> 01:08:05.300
- Yeah, same here.


01:08:05.300 --> 01:08:06.300
I'm a big fan of PyCharm,


01:08:06.300 --> 01:08:08.540
and basically the web side of its functionality


01:08:08.540 --> 01:08:10.020
is just WebStorm, which is well,


01:08:10.020 --> 01:08:10.860
which is very cool.


01:08:10.860 --> 01:08:12.260
It's super nice.


01:08:12.260 --> 01:08:16.400
- I encourage people to pay for their tools.


01:08:16.400 --> 01:08:20.240
If you're a programmer, spend some money.


01:08:20.240 --> 01:08:21.820
I mean, they have stuff for free,


01:08:21.820 --> 01:08:23.660
but they do tremendous work.


01:08:23.660 --> 01:08:27.260
I know that what's the Microsoft editor


01:08:27.260 --> 01:08:28.100
has become very popular.


01:08:28.100 --> 01:08:29.140
- Yes, good.


01:08:29.140 --> 01:08:32.100
- Yeah, but I don't know.


01:08:32.100 --> 01:08:32.940
It is what it is.


01:08:32.940 --> 01:08:34.700
You know, it's a holy war situation.


01:08:34.700 --> 01:08:36.940
So don't take me too seriously on this.


01:08:36.940 --> 01:08:38.780
- Yeah, I like your philosophy.


01:08:38.780 --> 01:08:39.600
- If you're willing to listen to me,


01:08:39.600 --> 01:08:42.820
if you're willing to listen to a random guy on the internet


01:08:42.820 --> 01:08:45.220
to at least take a look at the JetBrains stuff.


01:08:45.220 --> 01:08:48.940
- I like your idea of, you know,


01:08:48.940 --> 01:08:50.720
support and encourage the things


01:08:50.720 --> 01:08:51.760
that you wanna see more of.


01:08:51.760 --> 01:08:53.340
So for sure.


01:08:53.340 --> 01:08:56.300
And then normally I ask for like a Python library


01:08:56.300 --> 01:08:57.440
that people are really interested in,


01:08:57.440 --> 01:09:00.380
but in this case, how about a JavaScript library


01:09:00.380 --> 01:09:01.980
or CSS library or something like that


01:09:01.980 --> 01:09:03.580
that you think people should really check out,


01:09:03.580 --> 01:09:07.340
like something on NPM or maybe Tailwind or whatever.


01:09:07.340 --> 01:09:09.900
- Yeah, I think looking at Tailwinds


01:09:09.900 --> 01:09:12.980
and looking at Alpine JS, if I may,


01:09:12.980 --> 01:09:14.520
we didn't really get a chance to talk about it,


01:09:14.520 --> 01:09:17.020
but HyperScript is a scripting language.


01:09:17.020 --> 01:09:19.640
It's kind of a natural language, scripting language


01:09:19.640 --> 01:09:21.800
for the front end, very front end focused.


01:09:21.800 --> 01:09:25.580
That's kind of got some interesting aspects to it.


01:09:25.580 --> 01:09:26.960
But I think, you know,


01:09:26.960 --> 01:09:29.080
rather than recommending one particular library,


01:09:29.080 --> 01:09:32.420
I'd say just that this idea of locality of behavior,


01:09:32.420 --> 01:09:35.700
looking for libraries where you're putting the code


01:09:35.700 --> 01:09:37.440
in the code unit rather than having


01:09:37.440 --> 01:09:39.080
a bunch of different places.


01:09:39.080 --> 01:09:42.620
And so Tailwinds and AlpineJS are two that jump out at me


01:09:42.620 --> 01:09:45.620
in addition to HTMX as being worth taking a look at.


01:09:45.620 --> 01:09:47.280
I know there's a lot of Django people


01:09:47.280 --> 01:09:48.620
that are using that combination


01:09:48.620 --> 01:09:50.540
and are very passionate about it.


01:09:50.540 --> 01:09:51.660
- Yeah, fantastic.


01:09:51.660 --> 01:09:52.660
- Yeah, I know some people


01:09:52.660 --> 01:09:55.020
certainly passionate about it as well.


01:09:55.020 --> 01:09:56.020
Nick out in the live stream says,


01:09:56.020 --> 01:09:59.060
view single file components violate the separation concerns


01:09:59.060 --> 01:10:00.800
and lead towards this locality


01:10:00.800 --> 01:10:01.980
that you talk about as well.


01:10:01.980 --> 01:10:02.820
I think that's a great point.


01:10:02.820 --> 01:10:03.980
- Yeah.


01:10:03.980 --> 01:10:05.420
Yeah, I think front end components


01:10:05.420 --> 01:10:06.860
are kind of moved that way as well.


01:10:06.860 --> 01:10:07.860
That's exactly right.


01:10:07.860 --> 01:10:12.460
Now, I think that comes with a lot of other stuff


01:10:12.460 --> 01:10:14.580
that I don't think is necessary for a lot of web apps,


01:10:14.580 --> 01:10:17.340
but there's just this move, I think.


01:10:17.340 --> 01:10:19.940
And so I'm trying to use again, locality behavior,


01:10:19.940 --> 01:10:24.220
And I've got an essay up on htmx.org/talk.


01:10:24.220 --> 01:10:26.260
You can look, there's a locality of behavior essay


01:10:26.260 --> 01:10:27.920
where I'm trying to push that term


01:10:27.920 --> 01:10:29.040
and get people to adopt it


01:10:29.040 --> 01:10:31.140
when they're trying to explain to people why,


01:10:31.140 --> 01:10:33.700
hey, why are you inlining all this code?


01:10:33.700 --> 01:10:35.600
- 'Cause they're like, oh, this is the worst idea ever.


01:10:35.600 --> 01:10:37.140
Like, no way. - You can't, no, you can't.


01:10:37.140 --> 01:10:38.300
And it's like, well, you can.


01:10:38.300 --> 01:10:41.240
And most people, and people are actually having,


01:10:41.240 --> 01:10:44.540
experiencing productivity and maintenance increase,


01:10:44.540 --> 01:10:46.860
you know, increases when they do it, so.


01:10:46.860 --> 01:10:49.460
- Yeah, I like your idea of the spooky action at a distance,


01:10:49.460 --> 01:10:51.220
like a little part of the cam in there.


01:10:51.220 --> 01:10:52.060
- Yeah.


01:10:52.060 --> 01:10:52.880
- Yeah.


01:10:52.880 --> 01:10:54.300
- Cool.


01:10:54.300 --> 01:10:56.060
All right, final call to action.


01:10:56.060 --> 01:10:58.060
People are psyched about HTMX.


01:10:58.060 --> 01:11:01.020
Maybe they're psyched about not doing too much JavaScript


01:11:01.020 --> 01:11:02.100
on the front end.


01:11:02.100 --> 01:11:03.180
What do you tell them?


01:11:03.180 --> 01:11:06.380
- Well, check out htmx.org.


01:11:06.380 --> 01:11:08.060
Please start the GitHub repository.


01:11:08.060 --> 01:11:11.140
That is my primary source of compensation


01:11:11.140 --> 01:11:13.980
for HTMX at this point.


01:11:13.980 --> 01:11:17.540
And we have a Discord server that you can jump on as well


01:11:17.540 --> 01:11:18.980
if you have questions.


01:11:18.980 --> 01:11:21.160
Twitter is getting more active.


01:11:21.160 --> 01:11:26.020
If you follow HTMX, there's HTMX underscore org on Twitter,


01:11:26.020 --> 01:11:30.380
which I run and it's getting more and more active,


01:11:30.380 --> 01:11:32.400
but the discord is friendly at this point.


01:11:32.400 --> 01:11:34.920
And so I encourage people who are interested in this


01:11:34.920 --> 01:11:36.900
to jump on there and ask questions.


01:11:36.900 --> 01:11:38.660
There's a lot of people that understand the library


01:11:38.660 --> 01:11:41.980
very well and know a lot of different backends


01:11:41.980 --> 01:11:44.820
because HTMX is backend agnostic,


01:11:44.820 --> 01:11:48.220
kind of each backend needs its own sort of expert


01:11:48.220 --> 01:11:49.140
to help out with it.


01:11:49.140 --> 01:11:51.720
And so, you know, hopefully in a few years,


01:11:51.720 --> 01:11:54.020
we built up a good set of example libraries,


01:11:54.020 --> 01:11:57.320
but at this point, if that's not available,


01:11:57.320 --> 01:12:00.940
then the Discord is probably the best place to check out.


01:12:00.940 --> 01:12:02.580
- Okay, fantastic.


01:12:02.580 --> 01:12:03.860
Well, thanks again for being here


01:12:03.860 --> 01:12:05.260
and thanks for creating this.


01:12:05.260 --> 01:12:08.100
A lot of nice comments in the live stream as well,


01:12:08.100 --> 01:12:09.240
saying thanks for creating it.


01:12:09.240 --> 01:12:11.940
So I think you're onto something here


01:12:11.940 --> 01:12:13.020
and I'm happy to share it with people.


01:12:13.020 --> 01:12:16.300
Hopefully it can super power some of these Django, Flask,


01:12:16.300 --> 01:12:19.200
et cetera, apps without replacing them.


01:12:19.200 --> 01:12:21.240
- Yeah, I really, and I appreciate it again,


01:12:21.240 --> 01:12:23.920
you taking something that's obviously outside


01:12:23.920 --> 01:12:25.960
the normal Python world


01:12:25.960 --> 01:12:27.840
and giving me a chance to talk to people about it


01:12:27.840 --> 01:12:32.560
because I do think it will help people stay in Python longer


01:12:32.560 --> 01:12:35.080
before they feel like they have to abandon it


01:12:35.080 --> 01:12:37.800
for JavaScript.


01:12:37.800 --> 01:12:40.440
- Yeah, we can remove some JavaScript guilt


01:12:40.440 --> 01:12:41.920
of not doing the front end for it.


01:12:41.920 --> 01:12:43.160
That's right, all right, awesome.


01:12:43.160 --> 01:12:45.120
- It's okay, it's okay.


01:12:45.120 --> 01:12:47.560
Don't ask me to use JavaScript for everything.


01:12:47.560 --> 01:12:48.400
- That's true.


01:12:48.400 --> 01:12:49.480
All right, thanks again.


01:12:49.480 --> 01:12:50.520
See you later.


01:12:50.520 --> 01:12:51.480
- Have a good one.


01:12:51.480 --> 01:12:52.320
Bye bye.


01:12:52.320 --> 01:12:53.140
- Bye.


01:12:53.140 --> 01:12:54.360
Thanks everyone out there on the live stream.


01:12:54.360 --> 01:12:55.840
I'll catch you on the next one.


01:12:55.840 --> 01:12:56.680
Bye all.


01:12:56.680 --> 01:13:06.680
[BLANK_AUDIO]

