WEBVTT

00:00:00.000 --> 00:00:02.000
Hey, Dustin. Hey, YouTube.


00:00:02.000 --> 00:00:06.000
Hey, Michael. Hey, YouTube. I guess this is new.


00:00:06.000 --> 00:00:11.000
Yeah. Yeah. Yeah. So thanks for people who are here.


00:00:11.000 --> 00:00:16.000
Throw some comments into the live chat. And with that, we'll kick it off.


00:00:16.000 --> 00:00:19.000
Dustin, welcome back to Talk Python To Me.


00:00:19.000 --> 00:00:22.000
Yeah, it's great to be back. Good to see you.


00:00:22.000 --> 00:00:27.000
Yeah, good to see you as well. It's lovely to have you back.


00:00:27.000 --> 00:00:29.000
I'm glad to have you back.


00:00:29.000 --> 00:00:34.000
We talked about PyPA and the Python Packaging Authority.


00:00:34.000 --> 00:00:37.000
We talked about PyPI and all these things previously


00:00:37.000 --> 00:00:39.000
and we're back to talk about them some more


00:00:39.000 --> 00:00:43.000
with a particular focus on security.


00:00:43.000 --> 00:00:48.000
Yeah, which is kind of my new focus on my day-to-day,


00:00:48.000 --> 00:00:51.000
my job hat, my PSF hat, all that stuff.


00:00:51.000 --> 00:00:53.000
Yeah, that's really cool.


00:00:53.000 --> 00:00:56.000
It's fantastic when the job that you're paid to do


00:00:56.000 --> 00:00:57.920
lines up with these other things, right?


00:00:57.920 --> 00:01:02.040
You can kind of learn on the job,


00:01:02.040 --> 00:01:04.800
and then it really applies quickly.


00:01:04.800 --> 00:01:09.240
So maybe let's just start there.


00:01:09.240 --> 00:01:12.000
You're at Google working on security there.


00:01:12.000 --> 00:01:15.320
Maybe tell us about what you're up to and how it ties together.


00:01:15.320 --> 00:01:17.240
- Yeah, so I think last time we talked,


00:01:17.240 --> 00:01:19.400
I was working for Google Cloud as a dev advocate.


00:01:19.400 --> 00:01:21.440
And so that was a lot of like--


00:01:21.440 --> 00:01:23.200
I think people mostly know me from that,


00:01:23.200 --> 00:01:25.880
a lot of conference talks and things like that.


00:01:25.880 --> 00:01:28.760
But since then, I've switched to a brand new team at Google


00:01:28.760 --> 00:01:31.000
that I'm really excited about, and I think


00:01:31.000 --> 00:01:33.000
is just really exciting in general.


00:01:33.000 --> 00:01:36.000
We're an open source security team.


00:01:36.000 --> 00:01:39.880
And we don't work just on Google's open source libraries


00:01:39.880 --> 00:01:41.880
or whatever, but we just generally broadly


00:01:41.880 --> 00:01:44.920
work on open source security across the entire open source


00:01:44.920 --> 00:01:46.800
ecosystem, and not just the Python ecosystem,


00:01:46.800 --> 00:01:49.080
but every open source ecosystem.


00:01:49.080 --> 00:01:51.720
So we have our hand in a lot of pots.


00:01:51.720 --> 00:01:53.960
And I think you're probably aware


00:01:53.960 --> 00:01:57.760
is this incredible wave of focus on software security,


00:01:57.760 --> 00:02:00.080
but also open source software security.


00:02:00.080 --> 00:02:02.480
And so we're kind of riding that wave a little bit,


00:02:02.480 --> 00:02:05.480
but yeah, it's a dream team.


00:02:05.480 --> 00:02:07.240
Everyone I work with is super talented


00:02:07.240 --> 00:02:09.400
and we're working on some really interesting


00:02:09.400 --> 00:02:12.280
new security stuff and yeah, really love it.


00:02:12.280 --> 00:02:14.600
- I bet it's very exciting


00:02:14.600 --> 00:02:17.960
and you also have a chance to make a big impact, right?


00:02:17.960 --> 00:02:19.040
- Oh yeah, for sure.


00:02:19.040 --> 00:02:23.320
I've been working kind of tangentially on software security


00:02:23.320 --> 00:02:24.920
ever since I started working on PyPI


00:02:24.920 --> 00:02:26.840
and I cared about it for a long time.


00:02:26.840 --> 00:02:28.880
But it's like really, I think it's validating


00:02:28.880 --> 00:02:31.760
to sort of see that like, oh, now everyone kind of gets it.


00:02:31.760 --> 00:02:33.600
Like everyone's like, oh, this is the thing


00:02:33.600 --> 00:02:35.200
we need to focus and make better.


00:02:35.200 --> 00:02:38.240
So it's cool to be there and be like ready to do it,


00:02:38.240 --> 00:02:40.800
and have the tools to like make it happen.


00:02:40.800 --> 00:02:41.640
- Yeah, absolutely.


00:02:41.640 --> 00:02:44.500
Have a lot of resources behind you


00:02:44.500 --> 00:02:47.880
through Google and the team and so on.


00:02:47.880 --> 00:02:50.240
- Absolutely, like an incredible amount of resources.


00:02:50.240 --> 00:02:51.080
Yeah.


00:02:51.080 --> 00:02:53.600
I can't-- yeah, most people probably don't fully


00:02:53.600 --> 00:02:54.920
appreciate it, right?


00:02:54.920 --> 00:02:55.420
>>Tom: Yeah.


00:02:55.420 --> 00:03:01.880
>>Kyle: Yeah, so that is fantastic.


00:03:01.880 --> 00:03:03.240
The other thing that you're doing


00:03:03.240 --> 00:03:07.440
is working as the director of the PSF, right?


00:03:07.440 --> 00:03:08.840
>>Tom: Well, not the director.


00:03:08.840 --> 00:03:11.280
So the PSF has a board of directors.


00:03:11.280 --> 00:03:12.480
So I would-- I call myself--


00:03:12.480 --> 00:03:12.800
>>Kyle: I see.


00:03:12.800 --> 00:03:14.040
>>Tom: --one of the directors of the PSF.


00:03:14.040 --> 00:03:14.480
>>Kyle: Right, got it.


00:03:14.480 --> 00:03:14.980
I got it.


00:03:14.980 --> 00:03:15.480
Got it.


00:03:15.480 --> 00:03:15.960
Got it.


00:03:15.960 --> 00:03:18.120
So yeah, tell us about your role at PSF.


00:03:18.120 --> 00:03:18.880
>>Tom: Yeah, yeah.


00:03:18.880 --> 00:03:24.160
board I think it was about two years ago because we just had an election. And so we sit for


00:03:24.160 --> 00:03:29.080
three-year terms. So I've got another year left before I have to run again. But yeah,


00:03:29.080 --> 00:03:33.240
it's been really nice to sort of like work on the PSF from the inside and do some community


00:03:33.240 --> 00:03:37.600
stuff. It's been a really weird time to join the board as well. Like PSF, it was like right


00:03:37.600 --> 00:03:42.940
at the start of the pandemic. And like the PSF derives most of its income from events


00:03:42.940 --> 00:03:46.840
like PyCon, like a lot of its income. And that was always sort of like identified as


00:03:46.840 --> 00:03:49.520
as kind of an existential threat to the PSF,


00:03:49.520 --> 00:03:53.160
but it very much became a reality very quickly.


00:03:53.160 --> 00:03:55.840
And so there was a lot of work done before I joined


00:03:55.840 --> 00:03:59.200
and after I joined as well to adapt to that.


00:03:59.200 --> 00:04:01.320
And I think PSF did an amazing job.


00:04:01.320 --> 00:04:03.240
We actually did really well,


00:04:03.240 --> 00:04:05.600
partly in thanks to all of our sponsors and donors


00:04:05.600 --> 00:04:07.840
that still continue to step it up


00:04:07.840 --> 00:04:10.960
even though we weren't doing an in-person PyCon.


00:04:10.960 --> 00:04:12.300
We did a bunch of virtual PyCons.


00:04:12.300 --> 00:04:13.840
They went pretty well.


00:04:13.840 --> 00:04:15.880
Not quite as fun for me.


00:04:15.880 --> 00:04:18.460
I like to see folks in person, but yeah,


00:04:18.460 --> 00:04:21.120
we, I think made it through the other side amazingly.


00:04:21.120 --> 00:04:22.360
- Yeah.


00:04:22.360 --> 00:04:23.520
- Yeah, it's been great.


00:04:23.520 --> 00:04:24.960
We got a really great board now.


00:04:24.960 --> 00:04:27.840
We just brought on a couple of new folks as well.


00:04:27.840 --> 00:04:30.520
And I'm really excited to see what we're gonna do


00:04:30.520 --> 00:04:32.600
for the next couple of years.


00:04:32.600 --> 00:04:37.020
- I don't know that people fully appreciate


00:04:37.020 --> 00:04:39.840
how important PyCon is to the existence


00:04:39.840 --> 00:04:42.520
and financial wellbeing of the PSF.


00:04:42.520 --> 00:04:45.160
Maybe elaborate a bit on that.


00:04:45.160 --> 00:04:48.480
- Yeah, I think the statistic, maybe at its peak,


00:04:48.480 --> 00:04:52.760
PyCon's revenue was about 85%


00:04:52.760 --> 00:04:55.120
of the operating budget of the PSF.


00:04:55.120 --> 00:04:58.840
So like almost all of the money that the PSF needs


00:04:58.840 --> 00:05:01.160
to like run and operate, which means pay staff,


00:05:01.160 --> 00:05:03.120
pay for infrastructure, all that kind of stuff,


00:05:03.120 --> 00:05:05.740
came from ticket sales for PyCon.


00:05:05.740 --> 00:05:08.160
And that also includes--


00:05:08.160 --> 00:05:09.520
- Sponsorship money and things like that.


00:05:09.520 --> 00:05:11.240
- Yeah, yeah, it's a little gray


00:05:11.240 --> 00:05:13.100
because like there are sponsors


00:05:13.100 --> 00:05:16.780
And they both sponsor PyCon and sponsor the PSF.


00:05:16.780 --> 00:05:19.100
And that money just gets used by the PSF.


00:05:19.100 --> 00:05:21.540
But yeah, a lot of that sponsorship


00:05:21.540 --> 00:05:23.260
is really tied to the in-person event.


00:05:23.260 --> 00:05:25.820
So one thing we've done recently is,


00:05:25.820 --> 00:05:30.220
if you're not a PSF sponsor, you should go psf.org/sponsor.


00:05:30.220 --> 00:05:34.140
And there's a new menu for sponsorship.


00:05:34.140 --> 00:05:37.500
And we adapted it in a way that's not exactly focused.


00:05:37.500 --> 00:05:40.300
You don't have to show up to PyCon to be a PSF sponsor.


00:05:40.300 --> 00:05:42.900
And still, you'll get a lot of benefit from it,


00:05:42.900 --> 00:05:44.560
including supporting things like PyPI


00:05:44.560 --> 00:05:46.300
and other infrastructure projects.


00:05:46.300 --> 00:05:52.060
- There's a bit of a,


00:05:52.060 --> 00:05:55.800
it seems like a bit of a wave of large companies coming in


00:05:55.800 --> 00:05:58.900
and properly sponsoring the PSF.


00:05:58.900 --> 00:06:00.740
And I don't know if this is in reaction


00:06:00.740 --> 00:06:03.660
to what happened with PyCon and COVID,


00:06:03.660 --> 00:06:07.020
or it just happens to be the timing and the growth,


00:06:07.020 --> 00:06:09.060
and especially the growth of Python


00:06:09.060 --> 00:06:12.160
in a more business corporate sense.


00:06:12.160 --> 00:06:15.400
Yeah, I think it's a couple things.


00:06:15.400 --> 00:06:18.640
One is that like, PSF very much needs the support, right?


00:06:18.640 --> 00:06:23.360
And I think that's made obvious to the organizations that use Python and our infrastructure like


00:06:23.360 --> 00:06:24.360
PyPI.


00:06:24.360 --> 00:06:29.080
The other thing is, I think a lot of organizations are taking open source as like a dependency


00:06:29.080 --> 00:06:30.720
a lot more seriously.


00:06:30.720 --> 00:06:35.480
So making sure that they're like in some way contributing or, you know, providing support


00:06:35.480 --> 00:06:39.680
for the infrastructure tools, software that they use.


00:06:39.680 --> 00:06:43.400
I think the other thing that I want to call out here is the PSF staff is incredible.


00:06:43.400 --> 00:06:48.240
They've done an amazing job about making it really an attractive thing to be a sponsor


00:06:48.240 --> 00:06:55.080
of the PSF and also following through on our commitments or organizations' commitments


00:06:55.080 --> 00:06:57.800
to us, our commitments to them, that kind of thing.


00:06:57.800 --> 00:07:02.120
And finding new and interesting ways to get funding as well.


00:07:02.120 --> 00:07:06.040
We started doing an interesting thing a couple of years ago where we started applying for


00:07:06.040 --> 00:07:08.920
grants for work on PyPI.


00:07:08.920 --> 00:07:13.160
I think that's actually our first podcast was about some funded work that I got hired


00:07:13.160 --> 00:07:14.160
to do as a contractor.


00:07:14.160 --> 00:07:16.280
And then we kind of repeated that.


00:07:16.280 --> 00:07:20.520
And we brought in a ton of money to fund really big stuff.


00:07:20.520 --> 00:07:25.040
Big stuff that a volunteer would never get done in a year on weekends.


00:07:25.040 --> 00:07:28.160
It's just never going to happen that a volunteer is going to sit down and have the time to


00:07:28.160 --> 00:07:29.160
do this.


00:07:29.160 --> 00:07:34.960
So it's been really successful in terms of shipping stuff that users need that's big,


00:07:34.960 --> 00:07:43.120
skills stuff. Yeah, it's it seems a little bit like in the past, but when you go to PyPI.org,


00:07:43.120 --> 00:07:51.840
this is still kind of shiny new, right? It got rewritten a couple years ago and polished up and


00:07:51.840 --> 00:07:57.520
made a lot more modern, right? Yeah, yeah. I think 2018 we launched this and so it hasn't changed


00:07:57.520 --> 00:08:01.600
really, you know, visually much since then. A lot of new features and development and like


00:08:02.240 --> 00:08:05.840
the whole point behind the rewrite was to make it a lot easier to build on top of.


00:08:05.840 --> 00:08:12.800
PyPI was ancient, essentially. It predated everything on PyPI. It was kind of wacky, but


00:08:12.800 --> 00:08:19.600
yeah, it's super modern now, which is cool. It's more sustainable now as well. We have


00:08:19.600 --> 00:08:28.320
better commitments from our in-kind donors for infrastructure. Shout out to Fastly that pays


00:08:28.320 --> 00:08:35.440
our entire infrastructure bill and is an amazing sponsor of PyPI. But also, we had just hired an


00:08:35.440 --> 00:08:41.200
infrastructure engineer to work on PyPI, which is super exciting, and PyPI and other PSF


00:08:41.200 --> 00:08:46.800
infrastructure as well. And yeah, it's just a little more sustainable than it used to be.


00:08:46.800 --> 00:08:50.240
We have better core volunteers, moderators, all that kind of stuff.


00:08:50.240 --> 00:08:57.360
>> We talked back in 2018, I think maybe you and Donald stuffed, I don't remember if you all were


00:08:57.360 --> 00:08:59.440
were on together, those were two separate shows.


00:08:59.440 --> 00:09:01.360
But you were both involved.


00:09:01.360 --> 00:09:05.480
And one of the challenges was PyPI, the web app,


00:09:05.480 --> 00:09:11.080
was so bespoken, sort of its own tangled mess


00:09:11.080 --> 00:09:13.160
that people would want to contribute.


00:09:13.160 --> 00:09:14.560
And they'd be like, you know what?


00:09:14.560 --> 00:09:17.120
Now that I see this, maybe not so much.


00:09:17.120 --> 00:09:19.000
And it sounds like it's in a better place.


00:09:19.000 --> 00:09:20.420
We have some peps that we're going


00:09:20.420 --> 00:09:22.680
to talk about extending some of its functionality


00:09:22.680 --> 00:09:25.880
and those sorts of things, which is probably


00:09:25.880 --> 00:09:29.480
a spin-off of just making it easier to work with.


00:09:29.480 --> 00:09:31.240
- Yeah, I mean, yeah.


00:09:31.240 --> 00:09:33.240
We did a full stack rewrite for our reasons


00:09:33.240 --> 00:09:35.520
because it's easier to maintain for us,


00:09:35.520 --> 00:09:37.960
it's easier to contribute to for other users,


00:09:37.960 --> 00:09:39.520
easier to propose new changes.


00:09:39.520 --> 00:09:43.440
And I think maybe the undertone for this entire interview


00:09:43.440 --> 00:09:46.000
is there needs to be progress, right?


00:09:46.000 --> 00:09:49.040
We can't just get to a point where it's just,


00:09:49.040 --> 00:09:50.360
that's it, that's good.


00:09:50.360 --> 00:09:53.000
There's just gonna be, it's a constantly shifting landscape.


00:09:53.000 --> 00:09:56.920
So if we, the PSF, we, PyPI, want to be,


00:09:56.920 --> 00:09:58.360
continue to be successful and popular,


00:09:58.360 --> 00:10:01.080
and Python is doing amazing right now,


00:10:01.080 --> 00:10:04.040
we have to adapt to that to some extent.


00:10:04.040 --> 00:10:07.080
- Yeah, it's not the same world it was built for


00:10:07.080 --> 00:10:07.920
when it first came out,


00:10:07.920 --> 00:10:11.640
and also this 393,000 packages


00:10:11.640 --> 00:10:13.640
is probably not something that was expected


00:10:13.640 --> 00:10:16.920
when this whole idea was put together.


00:10:16.920 --> 00:10:21.320
- Yeah, I mean, it's scaled impressively well,


00:10:21.320 --> 00:10:22.680
I think, over the years.


00:10:22.680 --> 00:10:25.640
almost 4 million individual releases,


00:10:25.640 --> 00:10:28.320
like 6 million visual artifacts.


00:10:28.320 --> 00:10:29.440
Like, that's a lot.


00:10:29.440 --> 00:10:31.280
That's a lot of stuff.


00:10:31.280 --> 00:10:39.880
>> I've just noticed there is some serious construction


00:10:39.880 --> 00:10:42.240
below me that I did not think was going to be very loud.


00:10:42.240 --> 00:10:43.320
Just for a moment, I think.


00:10:43.320 --> 00:10:45.480
So if you're listening live, I apologize.


00:10:45.480 --> 00:10:46.520
We'll edit this out.


00:10:46.520 --> 00:10:48.760
But yeah, anyway.


00:10:48.760 --> 00:10:50.600
So if I go quiet for just a second,


00:10:50.600 --> 00:10:52.440
that's because of a saw or something.


00:10:52.440 --> 00:10:57.440
Anyway, let's talk just a bit about


00:10:57.440 --> 00:11:01.760
the whole infrastructure side, not the tech or anything.


00:11:01.760 --> 00:11:03.640
We've covered that before and it was really interesting,


00:11:03.640 --> 00:11:08.480
but just how much data and expense there is


00:11:08.480 --> 00:11:09.380
to run this thing.


00:11:09.380 --> 00:11:15.320
- Yeah, so I wrote a blog post sometime last year


00:11:15.320 --> 00:11:17.720
and it was gonna be essentially a five-year update


00:11:17.720 --> 00:11:19.720
from a previous post that Donald,


00:11:19.720 --> 00:11:22.420
who's one of the other PyPI maintainers,


00:11:22.420 --> 00:11:26.260
written about just like what it takes to power PyPI and it has some statistics in it that are at


00:11:26.260 --> 00:11:32.420
this point out of date. But like, yeah, we serve like almost, I think at this point over 2 billion


00:11:32.420 --> 00:11:42.020
requests a day. We transfer like more than 60 terabytes from PyPI.org and that doesn't include


00:11:42.020 --> 00:11:45.460
files. So when we serve the actual files, actual distributions, that's like


00:11:47.140 --> 00:11:50.500
almost a thousand terabytes a day, like per day.


00:11:50.500 --> 00:11:51.340
That's a lot.


00:11:51.340 --> 00:11:52.160
It's like, if we had to pay--


00:11:52.160 --> 00:11:53.440
- A thousand terabytes?


00:11:53.440 --> 00:11:55.620
- Yeah, if we had to pay like retail costs


00:11:55.620 --> 00:11:57.560
for our bandwidth from our CDN.


00:11:57.560 --> 00:12:01.100
So like almost like 99% of PyPI is served from CDN.


00:12:01.100 --> 00:12:03.340
It would be in the millions of dollars.


00:12:03.340 --> 00:12:06.540
Like it's a substantial infrastructure cost


00:12:06.540 --> 00:12:08.780
just to like serve the files, serve the requests.


00:12:08.780 --> 00:12:12.820
So yeah, and it's not going down.


00:12:12.820 --> 00:12:15.260
It's not plateauing either.


00:12:15.260 --> 00:12:16.540
It's definitely going up,


00:12:16.540 --> 00:12:21.060
which is good in the sense that, yeah, we want it to be popular,


00:12:21.060 --> 00:12:24.820
but there's sustainability questions that come with that as well as we grow,


00:12:24.820 --> 00:12:28.820
just sort of unfettered, you know? Yeah, figuring that out.


00:12:28.820 --> 00:12:34.780
Honestly, that kind of blows my mind. I'm just wondering,


00:12:34.780 --> 00:12:39.180
what would you possibly do if you didn't have companies like Fastly


00:12:39.180 --> 00:12:40.780
really supporting?


00:12:40.780 --> 00:12:43.580
Yeah. I mean, honestly,


00:12:43.580 --> 00:12:45.940
it would be very hard to keep PyPI running


00:12:45.940 --> 00:12:49.180
if we didn't have the support of all our sponsors.


00:12:49.180 --> 00:12:51.720
And I think it's really important to make this distinction


00:12:51.720 --> 00:12:55.180
between PyPI and other indexes, like NPM, for example,


00:12:55.180 --> 00:12:57.580
which is owned by a massive corporation


00:12:57.580 --> 00:12:59.640
and has a whole support staff,


00:12:59.640 --> 00:13:01.580
has a whole engineering staff.


00:13:01.580 --> 00:13:03.380
PyPI is like a couple folks


00:13:03.380 --> 00:13:05.260
and a bunch of donated stuff, you know?


00:13:05.260 --> 00:13:07.460
And it's on the same scale,


00:13:07.460 --> 00:13:11.460
and as useful as something like NPM.


00:13:11.460 --> 00:13:12.660
So, yeah.


00:13:12.660 --> 00:13:13.500
Yeah.


00:13:13.500 --> 00:13:25.120
Okay, well, when I think about how PyPI and NPM and RubyGems


00:13:25.120 --> 00:13:29.920
and this is not to focus on, like to call out Python,


00:13:29.920 --> 00:13:32.680
but just all of these.


00:13:41.120 --> 00:13:45.520
It reminds me of the early internet back when we were,


00:13:45.520 --> 00:13:47.000
not maybe when we didn't have passwords,


00:13:47.000 --> 00:13:47.840
but when it was kind of like,


00:13:47.840 --> 00:13:49.920
"Oh, well, just, we don't really need encryption here."


00:13:49.920 --> 00:13:54.360
And it was from a time when things were simpler


00:13:54.360 --> 00:13:57.160
and it feels like it's getting a little more complicated


00:13:57.160 --> 00:14:02.200
security wise and so on.


00:14:02.200 --> 00:14:03.040
- Oh yeah, definitely.


00:14:03.040 --> 00:14:04.920
I mean, there was a point when,


00:14:04.920 --> 00:14:07.840
me as a PyPI maintainer administrator,


00:14:07.840 --> 00:14:10.760
like we never had to respond to takedowns


00:14:10.760 --> 00:14:11.840
for like malicious stuff.


00:14:11.840 --> 00:14:13.260
Like it just never happened.


00:14:13.260 --> 00:14:15.240
And now it's like my inbox is on fire


00:14:15.240 --> 00:14:17.120
because I get multiple reports a day.


00:14:17.120 --> 00:14:17.960
Yeah, yeah.


00:14:17.960 --> 00:14:20.640
I mean, it's like, I think part of it is like


00:14:20.640 --> 00:14:22.520
people are trying to hit security bounties


00:14:22.520 --> 00:14:24.480
and do like research with PyPI,


00:14:24.480 --> 00:14:27.080
which is not the intended use case for PyPI,


00:14:27.080 --> 00:14:29.360
but yeah, it's a lot.


00:14:29.360 --> 00:14:31.360
Like it's definitely, there's an uptick.


00:14:31.360 --> 00:14:36.040
- So yeah, there's been a lot of talk on the internet


00:14:36.040 --> 00:14:37.760
about things that might fix it,


00:14:37.760 --> 00:14:39.640
like signing packages and whatnot,


00:14:39.640 --> 00:14:44.400
but we'll talk about whether that actually has anything


00:14:44.400 --> 00:14:47.120
to offer there.


00:14:47.120 --> 00:14:50.680
One thing I did want to give a quick shout out to is,


00:14:50.680 --> 00:14:51.840
is this the one?


00:14:51.840 --> 00:14:55.840
Yeah, there's from the OpenSFF.


00:14:55.840 --> 00:15:03.920
They just gave some big donation


00:15:03.920 --> 00:15:08.080
to make PyPI a little bit better, right?


00:15:08.080 --> 00:15:12.560
So they committed $400,000 to in order to create a new role.


00:15:12.560 --> 00:15:13.760
Tell us a bit about this.


00:15:13.760 --> 00:15:14.600
What is this?


00:15:14.600 --> 00:15:16.800
- Yeah, they're very excited to announce


00:15:16.800 --> 00:15:19.920
that they're planning to support us with a new role.


00:15:19.920 --> 00:15:21.400
So it hasn't been--


00:15:21.400 --> 00:15:22.600
- Hasn't been finalized.


00:15:22.600 --> 00:15:23.760
- Contract hasn't been signed yet.


00:15:23.760 --> 00:15:27.680
No, no, like a fairly new organization,


00:15:27.680 --> 00:15:28.920
bunch of member organizations,


00:15:28.920 --> 00:15:31.360
including Google, Microsoft, whatever,


00:15:31.360 --> 00:15:34.440
to essentially support software security, right?


00:15:34.440 --> 00:15:38.280
And so they're just kind of getting started pretty recently.


00:15:38.280 --> 00:15:41.600
And I think their marketing team kind of outpaced


00:15:41.600 --> 00:15:43.120
the like legal team here.


00:15:43.120 --> 00:15:45.520
So we haven't signed the contract yet,


00:15:45.520 --> 00:15:49.440
but it's like, you know, I feel confident saying that like,


00:15:49.440 --> 00:15:51.540
this is probably almost definitely gonna happen.


00:15:51.540 --> 00:15:54.840
So yeah, they committed, I think $400,000


00:15:54.840 --> 00:15:57.960
to doing a developer in residence that's security focused.


00:15:57.960 --> 00:15:59.720
And so this is sort of like piggybacking on something


00:15:59.720 --> 00:16:04.400
that I helped start two years ago at this point,


00:16:04.400 --> 00:16:06.760
which is create the CPython developer in residence.


00:16:06.760 --> 00:16:09.840
So that was started with funding from Google


00:16:09.840 --> 00:16:13.120
and Luca Schlanga became the CPython developer in residence.


00:16:13.120 --> 00:16:16.760
And like, I love to see this because like,


00:16:16.760 --> 00:16:19.160
I'm very happy to say Google is not the sponsor


00:16:19.160 --> 00:16:21.800
of CPython developer in residence this year, it's Facebook.


00:16:21.800 --> 00:16:23.640
And like, that's great because like,


00:16:23.640 --> 00:16:25.020
I think this is something that can be shared


00:16:25.020 --> 00:16:28.040
by all the PSF sponsors, you know,


00:16:28.040 --> 00:16:29.380
funding it each year, that kind of thing.


00:16:29.380 --> 00:16:33.180
So in a similar way, we're gonna ideally hire someone


00:16:33.180 --> 00:16:36.460
that will focus on just security for Python.


00:16:36.460 --> 00:16:38.500
That might be security for CPython,


00:16:38.500 --> 00:16:40.700
that might be security for PyPI.


00:16:40.700 --> 00:16:42.860
They also want, I think, to fund a security audit


00:16:42.860 --> 00:16:46.200
of some like critical tooling for Python ecosystem.


00:16:46.200 --> 00:16:47.900
That might be PyPI TBD.


00:16:47.900 --> 00:16:50.380
So, but yeah, this is super cool.


00:16:50.380 --> 00:16:53.100
And yeah, they've also like announced funding


00:16:53.100 --> 00:16:56.020
for some other organizations like Eclipse Foundation.


00:16:56.020 --> 00:16:56.860
- Right.


00:16:56.860 --> 00:17:00.500
>> This is fantastic news.


00:17:00.500 --> 00:17:02.980
And it's too bad that it's not signed yet,


00:17:02.980 --> 00:17:05.660
but it sounds like it's definitely going to happen.


00:17:05.660 --> 00:17:07.660
And when it becomes official, I'll


00:17:07.660 --> 00:17:09.700
give it another shout out just to say thanks,


00:17:09.700 --> 00:17:12.300
because this is going to probably make a big difference.


00:17:12.300 --> 00:17:15.340
That's a big chunk of money to contribute to it.


00:17:15.340 --> 00:17:19.260
>> Yeah, and I think similar to the CPython Developer


00:17:19.260 --> 00:17:22.660
Residence role, we're going to do interviews and audit


00:17:22.660 --> 00:17:23.900
and hire someone for that role.


00:17:23.900 --> 00:17:26.900
So there'll be a job posting if this happens.


00:17:26.900 --> 00:17:30.180
And then I'll be definitely tweeting, sharing that,


00:17:30.180 --> 00:17:32.340
trying to get people to get interested and apply


00:17:32.340 --> 00:17:35.180
because this is a super cool role.


00:17:35.180 --> 00:17:36.380
- Yeah, it sure is.


00:17:36.380 --> 00:17:43.860
All right, let's talk about 2FA.


00:17:43.860 --> 00:17:46.660
That's been a bit of a flashpoint


00:17:46.660 --> 00:17:50.180
and I don't feel like it should have, but it has been.


00:17:50.180 --> 00:17:53.620
What's the story with 2FA and critical packages


00:17:53.620 --> 00:17:58.620
- Yeah, Flashpoint, almost unexpected for me.


00:17:58.620 --> 00:18:03.540
I think I'm just so close to security space


00:18:03.540 --> 00:18:05.200
and PyPI and all that stuff that,


00:18:05.200 --> 00:18:09.680
I think the reaction was a little stronger


00:18:09.680 --> 00:18:11.620
than I think everyone expected.


00:18:11.620 --> 00:18:13.980
So yeah, so what happened?


00:18:13.980 --> 00:18:15.580
- Yeah, sorry, go ahead.


00:18:15.580 --> 00:18:16.820
Well, I was gonna say, it feels to me


00:18:16.820 --> 00:18:18.020
like the reaction was,


00:18:23.180 --> 00:18:27.340
if you had set up a rule, if you had set up a rule that said,


00:18:27.340 --> 00:18:32.540
Hey, you can't have the letter a as your password and everyone


00:18:32.540 --> 00:18:33.900
has the letter a, you have to change it.


00:18:33.900 --> 00:18:37.940
It's like, it's almost like that level of requirement change to me.


00:18:37.940 --> 00:18:41.020
It feels like, and yet it just, it just blew up.


00:18:41.020 --> 00:18:41.340
Right.


00:18:41.340 --> 00:18:42.300
Yeah.


00:18:42.300 --> 00:18:43.060
I, yeah.


00:18:43.060 --> 00:18:45.860
Well, let me give some background and then like, we can talk about


00:18:45.860 --> 00:18:47.060
like realistically what it means.


00:18:47.060 --> 00:18:51.740
So yeah, we, we made an announcement and, basically that we were


00:18:51.740 --> 00:18:55.900
we're going to designate some projects on PyPI as critical.


00:18:55.900 --> 00:18:59.060
And essentially we determine this based on download count,


00:18:59.060 --> 00:19:00.820
'cause that's kind of like, it's not a great metric,


00:19:00.820 --> 00:19:03.620
but it's kind of the best metric we have for determining


00:19:03.620 --> 00:19:07.340
like if this project was compromised,


00:19:07.340 --> 00:19:10.140
and I'll talk about like how that might happen,


00:19:10.140 --> 00:19:11.620
you know, how many people would be affected.


00:19:11.620 --> 00:19:13.860
And it's like, if we measure the amount of times


00:19:13.860 --> 00:19:15.180
that this is getting downloaded a day,


00:19:15.180 --> 00:19:18.100
that's a pretty good proxy for like impact


00:19:18.100 --> 00:19:19.900
in terms of something being compromised.


00:19:19.900 --> 00:19:20.740
- Right.


00:19:20.740 --> 00:19:22.540
we made this designation and we announced


00:19:22.540 --> 00:19:24.420
that at some point in the future--


00:19:24.420 --> 00:19:27.020
did not announce a date, did not enforce a requirement


00:19:27.020 --> 00:19:28.260
at this point--


00:19:28.260 --> 00:19:31.660
we're going to ask those maintainers to require


00:19:31.660 --> 00:19:34.580
that 2FA is enabled for their account.


00:19:34.580 --> 00:19:39.500
And so we did that, and then we paired this with an incentive.


00:19:39.500 --> 00:19:41.900
My team at Google actually funded the purchase


00:19:41.900 --> 00:19:44.100
of a bunch of Titan security keys.


00:19:44.100 --> 00:19:47.380
These are hardware keys for two-factor authentication


00:19:47.380 --> 00:19:49.460
that Google manufactures, but we just


00:19:49.460 --> 00:19:51.940
Essentially, we give away discount codes


00:19:51.940 --> 00:19:53.940
to these maintainers of projects


00:19:53.940 --> 00:19:55.660
that have been designated as critical,


00:19:55.660 --> 00:19:58.880
and they can get not one, but two for free.


00:19:58.880 --> 00:20:00.860
So if they're one of these maintainers.


00:20:00.860 --> 00:20:05.420
So yeah, we did that, and the designation was 1%.


00:20:05.420 --> 00:20:08.940
We decided the top 1% of projects would be,


00:20:08.940 --> 00:20:10.960
at this point, designated as critical.


00:20:10.960 --> 00:20:13.460
- Right.


00:20:13.460 --> 00:20:16.540
I feel like there was a bit of a confusion


00:20:16.540 --> 00:20:18.300
when people saw this announcement.


00:20:18.300 --> 00:20:22.660
I saw, wait a minute, you're making me adopt hardware-based 2FA


00:20:22.660 --> 00:20:25.020
because I have a PyPI package.


00:20:25.020 --> 00:20:28.180
The requirement is not that you have to use the hardware keys


00:20:28.180 --> 00:20:30.180
if you have a critical package, is it?


00:20:30.180 --> 00:20:31.020
- Nope.


00:20:31.020 --> 00:20:33.780
And like, I would love if everyone used hardware keys


00:20:33.780 --> 00:20:35.860
because I think they're generally considered


00:20:35.860 --> 00:20:37.300
to be a little bit more secure,


00:20:37.300 --> 00:20:41.500
but no, the idea is that everyone should turn on 2FA


00:20:41.500 --> 00:20:43.900
and that's, PyPI supports, you know, TOTP,


00:20:43.900 --> 00:20:45.580
which is like what you're used to,


00:20:45.580 --> 00:20:49.980
via like the free applications on the phone or other device


00:20:49.980 --> 00:20:51.300
and security keys.


00:20:51.300 --> 00:20:53.420
So like, and security keys is pretty broad now


00:20:53.420 --> 00:20:56.240
that doesn't just include the like USB devices,


00:20:56.240 --> 00:20:58.860
but also like you can do a web auth


00:20:58.860 --> 00:21:02.700
and via like phones and like other physical hardware.


00:21:02.700 --> 00:21:04.200
Like it's pretty, you know,


00:21:04.200 --> 00:21:05.940
the integration with browsers is pretty good now.


00:21:05.940 --> 00:21:07.520
So this is a lot of support.


00:21:07.520 --> 00:21:10.420
- Yeah, just like the audience out there,


00:21:10.420 --> 00:21:13.460
Michael is asking, do they need to be hardware keys


00:21:13.460 --> 00:21:14.300
or just regular auth?


00:21:14.300 --> 00:21:15.340
It's just regular auth, right?


00:21:15.340 --> 00:21:17.220
And that's why I said, I don't feel like it's


00:21:17.220 --> 00:21:17.940
that big of a deal.


00:21:17.940 --> 00:21:20.100
It's like, well, you have to have a secure password,


00:21:20.100 --> 00:21:22.180
or you have to have QFA, or whatever.


00:21:22.180 --> 00:21:22.740
Yeah, yeah.


00:21:22.740 --> 00:21:25.640
So I think the immediate reaction


00:21:25.640 --> 00:21:27.860
from some folks with really big megaphones,


00:21:27.860 --> 00:21:30.740
essentially, was that this is a slippery slope.


00:21:30.740 --> 00:21:33.620
PyPI is asking something of its users.


00:21:33.620 --> 00:21:36.420
And we don't do that very often.


00:21:36.420 --> 00:21:38.460
We let users do whatever they want.


00:21:38.460 --> 00:21:40.420
And we have some baseline requirements


00:21:40.420 --> 00:21:41.620
for how to use PyPI.


00:21:41.620 --> 00:21:45.620
but we don't like often ask people to do extra stuff.


00:21:45.620 --> 00:21:49.260
But there's a good reason why we're interested


00:21:49.260 --> 00:21:50.860
in asking people to do 2FA.


00:21:50.860 --> 00:21:53.820
And it's not because like Google has secretly conspired


00:21:53.820 --> 00:21:56.020
to like do it so that it's on open source security.


00:21:56.020 --> 00:21:57.100
You know, like it--


00:21:57.100 --> 00:21:59.420
- Yeah, there was a whole undercurrent,


00:21:59.420 --> 00:22:02.480
a whole thread of, well, it's these big corporate companies


00:22:02.480 --> 00:22:05.180
that are adopting Python that are making us


00:22:05.180 --> 00:22:07.780
do different security to support them.


00:22:07.780 --> 00:22:10.740
And that wasn't it at all, was it?


00:22:10.740 --> 00:22:13.900
No, no. I mean, so here's the here's the main reason.


00:22:13.900 --> 00:22:16.460
Right. And like that's that is valid.


00:22:16.460 --> 00:22:19.500
Right. Like there are big corporations that consume stuff from the IPA.


00:22:19.500 --> 00:22:23.380
They would love to have more assurances about like that their projects haven't


00:22:23.380 --> 00:22:26.620
been compromised. I don't think 2FA is like exactly the right way to do that.


00:22:26.620 --> 00:22:32.220
At the end of the day, 2FA like it protects against like two kind of critical


00:22:32.220 --> 00:22:34.500
attacks that could happen on a Python package.


00:22:34.500 --> 00:22:36.940
One is just like phishing. Right.


00:22:36.940 --> 00:22:40.580
Like 2FA is essentially completely eliminates the potential to get phished.


00:22:40.580 --> 00:22:43.740
And I've never seen someone get phished on PyPI.


00:22:43.740 --> 00:22:45.220
I've never heard about phishing attack,


00:22:45.220 --> 00:22:48.620
but PyPI is as susceptible as a bank


00:22:48.620 --> 00:22:49.940
or anything else for phishing.


00:22:49.940 --> 00:22:51.060
Like it could happen to anybody.


00:22:51.060 --> 00:22:53.260
So that's one thing.


00:22:53.260 --> 00:22:56.500
The other thing is maybe more specific to PyPI itself,


00:22:56.500 --> 00:23:00.080
which is what we call domain resurrection attacks.


00:23:00.080 --> 00:23:02.340
So developers really love their vanity,


00:23:02.340 --> 00:23:03.940
their domains, their personal domains,


00:23:03.940 --> 00:23:06.020
their personal email addresses.


00:23:06.020 --> 00:23:08.060
And so unlike maybe your bank,


00:23:08.060 --> 00:23:11.120
like the users on PyPI are more likely to have these


00:23:11.120 --> 00:23:14.120
like one-off domains and those domains like expire.


00:23:14.120 --> 00:23:15.320
People forget about them.


00:23:15.320 --> 00:23:16.540
They lose access to them.


00:23:16.540 --> 00:23:18.680
They get registered by someone else.


00:23:18.680 --> 00:23:21.520
And when that email address has the ability


00:23:21.520 --> 00:23:24.000
to reset a password on a PyPI account,


00:23:24.000 --> 00:23:26.920
an attacker can like keep an eye on your domain,


00:23:26.920 --> 00:23:29.160
watch when it expires, go and register it,


00:23:29.160 --> 00:23:32.040
do a password reset, and then take over your account


00:23:32.040 --> 00:23:33.080
and publish whatever they want.


00:23:33.080 --> 00:23:35.800
And so 2FA in similar way to phishing


00:23:35.800 --> 00:23:37.600
protects against that attack as well.


00:23:37.600 --> 00:23:39.900
- And I had never really thought about that.


00:23:39.900 --> 00:23:42.580
That's almost like the SIM card.


00:23:42.580 --> 00:23:43.420
- Yeah, a little bit.


00:23:43.420 --> 00:23:45.340
- Equivalent, but for email.


00:23:45.340 --> 00:23:48.420
So the SIM card problem is I could call up,


00:23:48.420 --> 00:23:50.460
you know, my, I could call up,


00:23:50.460 --> 00:23:52.980
I could call up someone else's phone provider


00:23:52.980 --> 00:23:54.480
and say, I lost my SIM card.


00:23:54.480 --> 00:23:55.920
Please issue me a new one.


00:23:55.920 --> 00:23:58.060
And then you start getting their SMS


00:23:58.060 --> 00:24:00.420
for like SMS authentication and stuff.


00:24:00.420 --> 00:24:04.020
This is, you've taken over their domain, not maliciously.


00:24:04.020 --> 00:24:06.060
they just decided to,


00:24:06.060 --> 00:24:07.820
and their credit card expired or something.


00:24:07.820 --> 00:24:08.900
And then you snatch it up,


00:24:08.900 --> 00:24:11.300
set up some MX records and off you go.


00:24:11.300 --> 00:24:12.140
Okay.


00:24:12.140 --> 00:24:12.960
- Yeah, yeah.


00:24:12.960 --> 00:24:16.500
So like, and so again, like our ultimate goal,


00:24:16.500 --> 00:24:18.560
like PyPI's administrators,


00:24:18.560 --> 00:24:21.260
I'd love to protect all users from, you know,


00:24:21.260 --> 00:24:23.100
attacks that could be prevented from 2FA,


00:24:23.100 --> 00:24:27.140
but it's a little bit more like, you know,


00:24:27.140 --> 00:24:29.520
like it's actually for our own benefit, right?


00:24:29.520 --> 00:24:30.360
Those kinds of attacks.


00:24:30.360 --> 00:24:31.700
So one has happened recently,


00:24:31.700 --> 00:24:34.260
The CTX package had a domain takeover


00:24:34.260 --> 00:24:36.660
and a malicious release published.


00:24:36.660 --> 00:24:38.700
And we wrote a very long incident about it.


00:24:38.700 --> 00:24:40.220
It took a lot of our time.


00:24:40.220 --> 00:24:41.180
And we essentially like,


00:24:41.180 --> 00:24:43.460
it's not sustainable for these to happen.


00:24:43.460 --> 00:24:45.440
We can't, we don't have a support team.


00:24:45.440 --> 00:24:48.460
We can't do, manually remove these packages


00:24:48.460 --> 00:24:51.180
and monitor things for like,


00:24:51.180 --> 00:24:52.780
we just can't handle it.


00:24:52.780 --> 00:24:56.820
So 2FA is like us, the folks that maintain PyPI


00:24:56.820 --> 00:24:59.540
asking users like, "Hey, help us out a little bit.


00:24:59.540 --> 00:25:02.500
just do this thing for us to like kind of cut down


00:25:02.500 --> 00:25:04.620
on the potential for this and make it easier for us


00:25:04.620 --> 00:25:06.660
to do things that like we actually want to do to PyPI


00:25:06.660 --> 00:25:08.960
and not just like respond to security incidents.


00:25:08.960 --> 00:25:10.780
- Right, because there's only a couple of you.


00:25:10.780 --> 00:25:13.100
And if you're spending all your time putting out these fires


00:25:13.100 --> 00:25:15.260
you're not adding JSON endpoints


00:25:15.260 --> 00:25:17.380
and other beneficial things.


00:25:17.380 --> 00:25:18.780
- Yeah, yeah, all sorts of stuff.


00:25:18.780 --> 00:25:21.060
Like, yeah, the more time we spend putting out fires


00:25:21.060 --> 00:25:22.940
the less we can do like useful


00:25:22.940 --> 00:25:25.040
and interesting things to PyPI.


00:25:25.040 --> 00:25:28.580
- Yeah, so why 1% of the top packages?


00:25:28.580 --> 00:25:29.660
Why is that critical?


00:25:29.660 --> 00:25:33.980
And also, what's the designation over time?


00:25:33.980 --> 00:25:37.220
>>The designation is if at any point it was in the top 1%.


00:25:37.220 --> 00:25:39.020
And I think we re-compete this every day.


00:25:39.020 --> 00:25:42.620
So projects have, since we announced this,


00:25:42.620 --> 00:25:45.520
they've moved into the 1% because it's constantly shifting.


00:25:45.520 --> 00:25:47.540
But yeah, why 1%?


00:25:47.540 --> 00:25:49.260
So that's a question that was coming up


00:25:49.260 --> 00:25:52.780
a lot in the discussion after we made this announcement.


00:25:52.780 --> 00:25:58.060
And the secret to the 1% is that in reality,


00:25:58.060 --> 00:26:01.860
you were to go and figure out, OK, how much traffic,


00:26:01.860 --> 00:26:04.980
how many downloads does this 1% of packages


00:26:04.980 --> 00:26:06.460
actually represent for PyPI?


00:26:06.460 --> 00:26:07.980
It's over 95%.


00:26:07.980 --> 00:26:09.660
It's close to 99%.


00:26:09.660 --> 00:26:13.340
It's like most of what people are using from PyPI


00:26:13.340 --> 00:26:14.400
is in this 1%.


00:26:14.400 --> 00:26:17.460
So by saying 1%, we also essentially


00:26:17.460 --> 00:26:22.420
said, for the long tail of PyPI that people aren't using,


00:26:22.420 --> 00:26:24.220
we care a little bit less about that.


00:26:24.220 --> 00:26:27.580
We're going to cover the majority of these.


00:26:27.580 --> 00:26:29.120
Like I said, the potential for impact


00:26:29.120 --> 00:26:32.280
if something was compromised, we sort of maximize that.


00:26:32.280 --> 00:26:34.480
And we also kind of had to minimize that 1% too,


00:26:34.480 --> 00:26:37.440
because I think another thing that folks didn't really


00:26:37.440 --> 00:26:41.560
realize about what it takes to support 2FA


00:26:41.560 --> 00:26:46.360
is that there's an incredible maintenance burden for 2FA.


00:26:46.360 --> 00:26:48.940
We have to handle account recovery requests,


00:26:48.940 --> 00:26:50.920
because people, they lose their phones,


00:26:50.920 --> 00:26:52.200
they lose their hardware keys.


00:26:52.200 --> 00:26:53.280
People are humans, right?


00:26:53.280 --> 00:26:54.760
And so this happens all the time.


00:26:54.760 --> 00:26:58.320
And it's expensive for us to handle this.


00:26:58.320 --> 00:27:02.120
And we can't just say, all right, great, you lost 2FA.


00:27:02.120 --> 00:27:03.560
I turned it off for your account.


00:27:03.560 --> 00:27:04.080
Go wild.


00:27:04.080 --> 00:27:06.080
Because that's essentially a perfect way


00:27:06.080 --> 00:27:07.240
to circumvent 2FA.


00:27:07.240 --> 00:27:09.720
Instead, we have to do this very manual process where


00:27:09.720 --> 00:27:12.440
we verify other identities, emails.


00:27:12.440 --> 00:27:14.000
If you have a GitHub associated, we


00:27:14.000 --> 00:27:15.200
ask you to do something on GitHub


00:27:15.200 --> 00:27:16.660
to prove that you own that account.


00:27:16.660 --> 00:27:19.080
And even then, it's really not perfect.


00:27:19.080 --> 00:27:21.400
There is potential for someone to be compromised


00:27:21.400 --> 00:27:24.240
who did have 2FA enabled by someone who


00:27:24.240 --> 00:27:26.160
could take over this account or that account


00:27:26.160 --> 00:27:29.400
and then pretend like they need an account recovery.


00:27:29.400 --> 00:27:31.320
But yeah, this is a huge maintenance burden.


00:27:31.320 --> 00:27:34.840
So we actually can barely handle account recovery requests


00:27:34.840 --> 00:27:35.480
right now.


00:27:35.480 --> 00:27:37.960
And I'm a little wary of how many


00:27:37.960 --> 00:27:40.440
we're going to get now that folks have started really


00:27:40.440 --> 00:27:41.320
turning on 2FA.


00:27:41.320 --> 00:27:43.520
But we're--


00:27:43.520 --> 00:27:46.600
>>Victor: Maybe that's probably why 1% and not 100%, right?


00:27:46.600 --> 00:27:47.400
>>Chance: Oh, yeah.


00:27:47.400 --> 00:27:51.520
There's zero chance we could handle 100% of everyone on PyPI


00:27:51.520 --> 00:27:52.960
with 2FA enabled.


00:27:52.960 --> 00:27:54.360
we just couldn't handle it.


00:27:54.360 --> 00:27:56.680
I would love that, that would be great.


00:27:56.680 --> 00:27:59.440
But yeah, unfortunately, the amount of people


00:27:59.440 --> 00:28:02.560
losing their stuff and having to come to us for resets,


00:28:02.560 --> 00:28:04.520
it's just, the burden is really high.


00:28:04.520 --> 00:28:11.160
- Sure, for me, I used Authy for my 2FA,


00:28:11.160 --> 00:28:12.680
which syncs across devices.


00:28:12.680 --> 00:28:14.920
So at least if I lose one, I get it back.


00:28:14.920 --> 00:28:18.240
- Yeah, yeah, and Google Authenticator works really well


00:28:18.240 --> 00:28:19.720
for TOTP as well.


00:28:19.720 --> 00:28:22.300
And I think you can download the codes


00:28:22.300 --> 00:28:23.460
store them externally as well.


00:28:23.460 --> 00:28:26.860
So if you lose your phone, you can regain access


00:28:26.860 --> 00:28:28.620
to those TOTP codes as well.


00:28:28.620 --> 00:28:31.020
And there's a bunch, like, there's also like


00:28:31.020 --> 00:28:33.500
emulated TOTP stuff where you can like


00:28:33.500 --> 00:28:35.160
run it on your laptop.


00:28:35.160 --> 00:28:37.940
It's not like, maybe not technically true, true factor,


00:28:37.940 --> 00:28:38.980
but like a lot of people use that


00:28:38.980 --> 00:28:39.820
'cause it's more convenient.


00:28:39.820 --> 00:28:41.380
- Yeah, it's way better than nothing.


00:28:41.380 --> 00:28:43.700
- It's all better than nothing, exactly.


00:28:43.700 --> 00:28:48.500
- Let's talk about James Bennett and opinions.


00:28:48.500 --> 00:28:50.500
You called out this article and I also read this.


00:28:50.500 --> 00:28:51.620
I think this is really good.


00:28:51.620 --> 00:28:53.700
What are some of your takeaways here?


00:28:53.700 --> 00:28:57.020
Yeah, James absolutely nailed the response here.


00:28:57.020 --> 00:29:00.300
And actually, we got a lot of feedback.


00:29:00.300 --> 00:29:02.500
And I'm not going to say that it was bad feedback.


00:29:02.500 --> 00:29:05.020
It was maybe somewhat uninformed feedback,


00:29:05.020 --> 00:29:09.220
or it was somewhat sensational feedback.


00:29:09.220 --> 00:29:10.940
But we got a lot of feedback after this.


00:29:10.940 --> 00:29:12.860
And some of it was totally valid.


00:29:12.860 --> 00:29:14.740
At the end of the day, we are asking users


00:29:14.740 --> 00:29:16.020
to take a little more effort.


00:29:16.020 --> 00:29:19.180
And some people, they don't want to do that.


00:29:19.180 --> 00:29:21.780
And none of the PyPI administrators


00:29:21.780 --> 00:29:24.660
actually explicitly responded to a lot of this.


00:29:24.660 --> 00:29:29.220
I think we were all a little bit depressed about how upset


00:29:29.220 --> 00:29:31.660
some people were about the 2FA requirement that


00:29:31.660 --> 00:29:32.580
didn't even exist yet.


00:29:32.580 --> 00:29:36.300
But yeah, James, really, shout out to James.


00:29:36.300 --> 00:29:38.180
Because I read this, and I was like,


00:29:38.180 --> 00:29:42.300
I really could not have written it better than he did.


00:29:42.300 --> 00:29:43.500
Yeah, he--


00:29:43.500 --> 00:29:47.020
There's a lot there, and I think it's very well thought out.


00:29:47.020 --> 00:29:47.740
Yeah.


00:29:47.740 --> 00:29:49.620
Yeah, it was great.


00:29:49.620 --> 00:29:51.940
Yeah, shout out to James.


00:29:51.940 --> 00:29:54.220
Yeah, I think there was kind of two arguments


00:29:54.220 --> 00:29:57.820
that he was making, which is that a lot of people


00:29:57.820 --> 00:29:59.780
were concerned this would be a slippery slope.


00:29:59.780 --> 00:30:03.140
And I don't really foresee IPA making too many more mandates


00:30:03.140 --> 00:30:05.260
about stuff like this, not because of the feedback,


00:30:05.260 --> 00:30:07.740
but because we're never going to--


00:30:07.740 --> 00:30:09.740
I don't think we're ever going to mandate signing,


00:30:09.740 --> 00:30:10.300
for example.


00:30:10.300 --> 00:30:13.180
That's always going to be the option of the maintainer.


00:30:13.180 --> 00:30:17.580
But things like 2FA for certain high-profile stuff


00:30:17.580 --> 00:30:20.020
Like, yeah, it really helps out,


00:30:20.020 --> 00:30:21.940
helps PyPI continue to exist, right?


00:30:21.940 --> 00:30:24.820
Like that's actually the motivation here.


00:30:24.820 --> 00:30:27.380
- Well, and I definitely wanna echo the message


00:30:27.380 --> 00:30:29.580
that you said about the overhead.


00:30:29.580 --> 00:30:31.860
- Yeah, yeah.


00:30:31.860 --> 00:30:33.740
- You have to deal, the people who would otherwise


00:30:33.740 --> 00:30:35.140
be constructively working on this


00:30:35.140 --> 00:30:36.780
have to deal with these problems.


00:30:36.780 --> 00:30:40.060
- Yeah, every day.


00:30:40.060 --> 00:30:41.740
I mean, it's like, I don't get paid to do it.


00:30:41.740 --> 00:30:43.460
I do it out of love, but yeah,


00:30:43.460 --> 00:30:45.340
it becomes larger and larger every day.


00:30:45.340 --> 00:30:49.820
And yeah, we're keeping our head above water right now.


00:30:49.820 --> 00:30:52.260
But yeah, there's plans also to make that better.


00:30:52.260 --> 00:30:53.940
But yeah.


00:30:53.940 --> 00:30:57.020
How much do you think the reaction--


00:30:57.020 --> 00:30:57.940
I'll put it out there.


00:30:57.940 --> 00:31:02.100
I think the overreaction was of how much do you


00:31:02.100 --> 00:31:05.520
think that was perceived as it's got to be a hardware key versus


00:31:05.520 --> 00:31:07.540
it's just straight 2FA?


00:31:07.540 --> 00:31:10.140
Do you think people rejected it being 2FA?


00:31:10.140 --> 00:31:12.100
Or did it seem like a bigger burden


00:31:12.100 --> 00:31:15.300
than just adding it to your Google Authenticator?


00:31:15.300 --> 00:31:17.860
- Yeah, I think, so if I were to say that,


00:31:17.860 --> 00:31:19.660
whether we made some sort of failure here


00:31:19.660 --> 00:31:21.540
when we announced it, I would say like,


00:31:21.540 --> 00:31:23.540
we didn't message this super well, right?


00:31:23.540 --> 00:31:25.860
And that's because I'm a software engineer,


00:31:25.860 --> 00:31:29.380
I'm not a marketer or, you know, I'm an okay communicator.


00:31:29.380 --> 00:31:31.260
And the same is true for the rest of us.


00:31:31.260 --> 00:31:33.460
We don't have copyrightrs, anything like that.


00:31:33.460 --> 00:31:34.820
We don't have a PR team.


00:31:34.820 --> 00:31:37.900
So, yeah, there was some stuff that people kind of missed.


00:31:37.900 --> 00:31:39.580
And I think one of the things was missed was like,


00:31:39.580 --> 00:31:41.580
the mandate doesn't exist right now.


00:31:41.580 --> 00:31:44.100
We're just talking about enforcing it in the future.


00:31:44.100 --> 00:31:46.420
The other was like, what is actually being required


00:31:46.420 --> 00:31:50.020
of you today, which for most folks, it was nothing.


00:31:50.020 --> 00:31:53.780
It was like, if you want to get a pair of free security keys


00:31:53.780 --> 00:31:55.160
you have to do this today.


00:31:55.160 --> 00:31:56.000
And by the way,


00:31:56.000 --> 00:31:57.260
- I'm sure you all saw this as a positive,


00:31:57.260 --> 00:31:59.060
like, Hey, we got this cool thing for people


00:31:59.060 --> 00:32:01.060
that they can get if they want, or they just need to a FAA.


00:32:01.060 --> 00:32:02.900
But like, people were like, what is this?


00:32:02.900 --> 00:32:04.780
Yeah, you're saying there's still some available


00:32:04.780 --> 00:32:06.480
for folks who want to get it, right?


00:32:06.480 --> 00:32:08.140
- Yeah, so through October 1st.


00:32:08.140 --> 00:32:10.300
So yeah, if you, this is my,


00:32:10.300 --> 00:32:11.660
be my call out at the end as well.


00:32:11.660 --> 00:32:16.580
But yeah, if you go to pypi.org/security-key-giveaway,


00:32:16.580 --> 00:32:18.380
you can check if you're a critical maintainer


00:32:18.380 --> 00:32:21.620
and you can get a key, get a pair of keys actually.


00:32:21.620 --> 00:32:23.820
Yeah, so the pair of keys thing also,


00:32:23.820 --> 00:32:25.540
people weren't really sure why we were doing that,


00:32:25.540 --> 00:32:29.420
but the main reason is to help you not lose both of them,


00:32:29.420 --> 00:32:30.460
like lose all access.


00:32:30.460 --> 00:32:32.940
So if you have two keys and you've used both of them,


00:32:32.940 --> 00:32:34.580
yeah, you have some redundancy.


00:32:34.580 --> 00:32:36.980
- You can stick it in the garage


00:32:36.980 --> 00:32:38.660
or stick it somewhere else,


00:32:38.660 --> 00:32:41.580
hand it to a friend, keep it in the backyard.


00:32:41.580 --> 00:32:43.420
- Yeah, exactly, exactly.


00:32:43.420 --> 00:32:49.940
There was, and I guess part of the reason


00:32:49.940 --> 00:32:53.060
this is so much in the public awareness


00:32:53.060 --> 00:32:56.260
is because of this project called Atomic Rights.


00:32:56.260 --> 00:32:58.700
- Yes.


00:32:58.700 --> 00:32:59.740
- (laughs)


00:32:59.740 --> 00:33:02.620
- Wanna give me the, give us all the rundown


00:33:02.620 --> 00:33:04.940
of why we're talking about this package?


00:33:04.940 --> 00:33:07.540
I mean, let me just give people a really quick background.


00:33:07.540 --> 00:33:11.340
Atomic Rights is a package that lets you,


00:33:11.340 --> 00:33:13.500
within a with block, like you would do open file,


00:33:13.500 --> 00:33:15.220
but instead you say atomic write,


00:33:15.220 --> 00:33:17.740
and it will write to a temporary file


00:33:17.740 --> 00:33:20.820
and only commit those changes to the real file,


00:33:20.820 --> 00:33:23.140
like at the very end, all in one shot.


00:33:23.140 --> 00:33:25.980
Pretty useful, not super hard to do your own version of


00:33:25.980 --> 00:33:28.340
with a couple of built-in things in Python,


00:33:28.340 --> 00:33:31.180
like files and what, but still.


00:33:31.180 --> 00:33:33.500
- It's kind of no longer necessary for modern Python


00:33:33.500 --> 00:33:34.320
is my understanding.


00:33:34.320 --> 00:33:36.660
Like this is a couple of lines of like modern Python,


00:33:36.660 --> 00:33:37.500
you don't have to worry about it,


00:33:37.500 --> 00:33:40.420
but it used to be something that you would use maybe.


00:33:40.420 --> 00:33:41.360
- Right, exactly.


00:33:41.360 --> 00:33:44.580
- Yeah, so--


00:33:44.580 --> 00:33:46.260
- How does this relate to 2FA?


00:33:46.260 --> 00:33:48.140
That has nothing to do with 2FA, does it?


00:33:48.140 --> 00:33:50.700
- Well, there's this thing that happens all the time, right?


00:33:50.700 --> 00:33:54.340
Like, so PyPI has this policy that everything on PyPI


00:33:54.340 --> 00:33:55.860
is essentially immutable.


00:33:55.860 --> 00:33:59.240
And that means that like individual files, file names,


00:33:59.240 --> 00:34:01.380
which can include a project name, a version,


00:34:01.380 --> 00:34:03.700
and like a distribution type, those are immutable.


00:34:03.700 --> 00:34:05.500
So if you upload something to PyPI


00:34:05.500 --> 00:34:06.840
that is like a source distribution


00:34:06.840 --> 00:34:08.740
for some version or whatever,


00:34:08.740 --> 00:34:12.060
You publish that, it's there, you can't overwrite it.


00:34:12.060 --> 00:34:15.060
You can't surreptitiously change what that points to.


00:34:15.060 --> 00:34:16.700
So anyone installing that is always gonna get


00:34:16.700 --> 00:34:18.940
the same thing, same SHA, everything.


00:34:18.940 --> 00:34:22.180
But that also means if you wanna delete something,


00:34:22.180 --> 00:34:23.540
you delete it and it's gone forever.


00:34:23.540 --> 00:34:25.900
You can't come back and overwrite it with something else.


00:34:25.900 --> 00:34:28.620
And so, and I don't encourage people to delete stuff


00:34:28.620 --> 00:34:30.940
from PyPI generally because you're almost definitely


00:34:30.940 --> 00:34:32.480
gonna break somebody.


00:34:32.480 --> 00:34:35.180
There's better methods for marking something


00:34:35.180 --> 00:34:38.060
as not useful and telling pip to not install it.


00:34:38.060 --> 00:34:40.260
That's our yanking, which is a whole PEP into itself.


00:34:40.260 --> 00:34:42.700
But yeah, so this thing happens all the time though.


00:34:42.700 --> 00:34:45.020
Like we have a huge warning banner, big red button,


00:34:45.020 --> 00:34:46.520
like everything telling you,


00:34:46.520 --> 00:34:47.860
if you're gonna delete this thing,


00:34:47.860 --> 00:34:49.940
you're not gonna be able to get it back.


00:34:49.940 --> 00:34:52.980
And so what happened here is like this maintainer


00:34:52.980 --> 00:34:55.760
didn't wanna comply with 2FA.


00:34:55.760 --> 00:34:57.140
Their project was marked as critical


00:34:57.140 --> 00:34:58.420
because a lot of people were using it,


00:34:58.420 --> 00:35:00.540
like a lot of people were using it still.


00:35:00.540 --> 00:35:03.380
And they thought that it'd be a cool,


00:35:03.380 --> 00:35:05.180
they thought they'd discovered a cool hack


00:35:05.180 --> 00:35:08.260
where if they deleted it and then recreated it later,


00:35:08.260 --> 00:35:11.180
that mandate would no longer apply.


00:35:11.180 --> 00:35:13.860
And that was kind of true, because like I said,


00:35:13.860 --> 00:35:16.460
our computation for critical projects runs once a day.


00:35:16.460 --> 00:35:19.700
So when they brought it back, it didn't have that flag.


00:35:19.700 --> 00:35:21.580
Within 24 hours, that flag was added back


00:35:21.580 --> 00:35:22.740
to the project, essentially.


00:35:22.740 --> 00:35:24.780
But for a brief period of time, yeah,


00:35:24.780 --> 00:35:27.140
it was not marked as critical.


00:35:27.140 --> 00:35:30.580
But what happened was all these versions went away.


00:35:30.580 --> 00:35:34.420
And a lot of people, I think, were depending on them.


00:35:34.420 --> 00:35:35.700
actually users of this project.


00:35:35.700 --> 00:35:38.720
And so, yeah, like there's a long discussion happening now


00:35:38.720 --> 00:35:40.540
about whether like it should even be possible


00:35:40.540 --> 00:35:41.860
to delete stuff from PyPI.


00:35:41.860 --> 00:35:44.940
And there's good arguments on both sides of the coin, right?


00:35:44.940 --> 00:35:48.160
- Yeah, well, that was one of my first thoughts is like,


00:35:48.160 --> 00:35:50.780
wait, you can delete the releases?


00:35:50.780 --> 00:35:53.940
I knew they were immutable, you can't update them,


00:35:53.940 --> 00:35:58.160
but deleting, so what's the trade off there?


00:35:58.160 --> 00:35:59.340
Why can you delete them now?


00:35:59.340 --> 00:36:01.580
And maybe why wouldn't you in the future?


00:36:01.580 --> 00:36:04.640
- Well, I mean, yeah, this is like the MPMs left pad


00:36:04.640 --> 00:36:07.820
incident essentially, like we, right now there's potential


00:36:07.820 --> 00:36:10.860
for a high profile enough, and this package wasn't super


00:36:10.860 --> 00:36:13.300
high profile, but like it was in the critical list.


00:36:13.300 --> 00:36:15.620
It was in the top 1%.


00:36:15.620 --> 00:36:18.020
There's potential for some maintainer to decide,


00:36:18.020 --> 00:36:20.780
and it's their prerogative right now, right?


00:36:20.780 --> 00:36:23.260
Like there's no guarantees that these things continue


00:36:23.260 --> 00:36:24.100
to exist on IP.


00:36:24.100 --> 00:36:25.900
I know one's necessarily paying for this.


00:36:25.900 --> 00:36:28.380
So like, yeah, maintainer absolutely has the ability now


00:36:28.380 --> 00:36:31.620
to just wipe something super popular and necessary


00:36:31.620 --> 00:36:33.740
off the face of IPI.


00:36:33.740 --> 00:36:35.780
And that's the current status quo.


00:36:35.780 --> 00:36:38.660
It's not the same in a lot of other ecosystems.


00:36:38.660 --> 00:36:40.380
Some of them don't have that policy.


00:36:40.380 --> 00:36:41.100
Some of them do.


00:36:41.100 --> 00:36:43.660
But yeah, so there's a bit of debate


00:36:43.660 --> 00:36:44.860
about whether that should be necessary,


00:36:44.860 --> 00:36:46.740
especially when we have stuff like yanking, which actually


00:36:46.740 --> 00:36:49.380
is kind of a more meaningful way to remove something.


00:36:49.380 --> 00:36:49.900
Yeah.


00:36:53.220 --> 00:36:58.220
So let's suppose somebody palettes or whatever,


00:36:58.220 --> 00:37:00.900
erases Flask tomorrow.


00:37:00.900 --> 00:37:02.620
- David, don't do it.


00:37:02.620 --> 00:37:04.780
- David, please keep going, man.


00:37:04.780 --> 00:37:13.260
Is there a way to get a hold of the actual wheels and stuff


00:37:13.260 --> 00:37:15.180
as a community and put it back up


00:37:15.180 --> 00:37:17.500
under a potentially a different name?


00:37:17.500 --> 00:37:18.440
Or is it just gone?


00:37:20.340 --> 00:37:23.780
How seriously gone is it when it's gone?


00:37:23.780 --> 00:37:26.340
- So yeah, nothing published to PyPI is actually gone.


00:37:26.340 --> 00:37:30.180
So we don't actually, unless we're like legally required to,


00:37:30.180 --> 00:37:34.300
we don't delete any actual files off of our data store.


00:37:34.300 --> 00:37:37.420
So like the bucket that everything goes into,


00:37:37.420 --> 00:37:38.900
everything that's ever been published to PyPI


00:37:38.900 --> 00:37:40.060
is still there.


00:37:40.060 --> 00:37:42.260
And so this actually played out.


00:37:42.260 --> 00:37:44.140
It's good that we have this in a couple instances


00:37:44.140 --> 00:37:46.060
'cause this is what exactly we used


00:37:46.060 --> 00:37:47.860
in this case of atomic rights.


00:37:47.860 --> 00:37:50.380
'cause the maintainer was like, "Oh, I made a mistake."


00:37:50.380 --> 00:37:52.220
And they were like, kind of humble.


00:37:52.220 --> 00:37:53.700
They were like, "Yeah, okay, this was a mistake.


00:37:53.700 --> 00:37:54.780
I shouldn't have done this."


00:37:54.780 --> 00:37:57.560
And then asked us to essentially restore


00:37:57.560 --> 00:37:59.220
the project from scratch.


00:37:59.220 --> 00:38:01.100
And we don't really have mechanisms to do that, right?


00:38:01.100 --> 00:38:03.780
That's not something that we do often.


00:38:03.780 --> 00:38:06.300
I think I can only remember maybe once


00:38:06.300 --> 00:38:09.260
when we've done that before, maybe not even once.


00:38:09.260 --> 00:38:11.020
And we generally just don't do this.


00:38:11.020 --> 00:38:13.140
Like if you delete something, we say it's gone.


00:38:13.140 --> 00:38:14.980
Like you need to publish a new version.


00:38:14.980 --> 00:38:17.740
But in this case, we did decide to take the time.


00:38:17.740 --> 00:38:20.100
I think it took Donald like almost an hour to do this


00:38:20.100 --> 00:38:22.260
'cause it's a super manual process.


00:38:22.260 --> 00:38:23.100
But yeah, the files are still there.


00:38:23.100 --> 00:38:25.460
- Something you don't do very often, right?


00:38:25.460 --> 00:38:26.860
- Yeah, no, no, like almost-


00:38:26.860 --> 00:38:28.980
- How can I even do this?


00:38:28.980 --> 00:38:30.900
- Yeah, so like the files are still there


00:38:30.900 --> 00:38:32.720
and they're still like externally addressable too.


00:38:32.720 --> 00:38:35.140
So they're always gonna be available.


00:38:35.140 --> 00:38:38.840
And like if something like that happened,


00:38:38.840 --> 00:38:41.460
David don't do it, but like if something like that happened,


00:38:41.460 --> 00:38:43.260
I think folks would probably be okay.


00:38:43.260 --> 00:38:44.240
We'd find ways around it.


00:38:44.240 --> 00:38:46.420
But yeah, I mean, it's a strong argument


00:38:46.420 --> 00:38:48.260
for not allowing it to happen.


00:38:48.260 --> 00:38:51.100
And when people publish stuff to PyPI,


00:38:51.100 --> 00:38:53.060
like our TOS is essentially,


00:38:53.060 --> 00:38:54.860
you give us the right to distribute this


00:38:54.860 --> 00:38:56.180
as we see fit forever.


00:38:56.180 --> 00:38:58.900
So, PyPI is within its right,


00:38:58.900 --> 00:39:02.100
but there's just arguments for giving maintainers


00:39:02.100 --> 00:39:03.780
the ability to do it for various reasons.


00:39:03.780 --> 00:39:04.620
Yeah.


00:39:04.620 --> 00:39:07.820
- Has there been any thoughts to putting


00:39:07.820 --> 00:39:13.620
like levels of what pip will install?


00:39:13.620 --> 00:39:15.140
For example, I'm thinking like,


00:39:15.140 --> 00:39:16.420
I wanna set up my pip though,


00:39:16.420 --> 00:39:20.620
it will only accept things that have 2FA set up


00:39:20.620 --> 00:39:24.200
or it will only accept things


00:39:24.200 --> 00:39:25.540
with a certain number of downloads.


00:39:25.540 --> 00:39:27.100
Like I can only pip install something


00:39:27.100 --> 00:39:28.900
with 10,000 or more downloads.


00:39:28.900 --> 00:39:31.220
Because maybe I'm trying to avoid typosquatting


00:39:31.220 --> 00:39:34.380
for very edge case things.


00:39:34.380 --> 00:39:36.700
In that general realm, have you all thought about this?


00:39:36.700 --> 00:39:38.460
Probably you have. - Yeah, definitely.


00:39:38.460 --> 00:39:39.820
- What are some of the-- - We have it on our list


00:39:39.820 --> 00:39:41.700
to talk about later, but yeah,


00:39:41.700 --> 00:39:43.220
I mean, there's definitely potential, right?


00:39:43.220 --> 00:39:45.780
there's all sorts of signals that you could potentially


00:39:45.780 --> 00:39:46.960
take into account here.


00:39:46.960 --> 00:39:50.320
You know, TBD, like how meaningful some of them


00:39:50.320 --> 00:39:52.600
actually will be or how much that will actually protect you.


00:39:52.600 --> 00:39:55.480
But yeah, people have talked about like essentially


00:39:55.480 --> 00:39:57.220
defining a policy for what they'll consume


00:39:57.220 --> 00:39:58.920
and either having that be part of PIP


00:39:58.920 --> 00:40:00.400
or something external.


00:40:00.400 --> 00:40:02.540
Yeah, it's definitely been discussed.


00:40:02.540 --> 00:40:03.380
- Okay.


00:40:03.380 --> 00:40:07.280
You know, for example, like the web browsers,


00:40:07.280 --> 00:40:09.500
you can have no blocking,


00:40:09.500 --> 00:40:11.000
you can have block third-party cookies,


00:40:11.000 --> 00:40:13.140
you can block third-party cookies and trackers.


00:40:13.140 --> 00:40:19.060
And you can decide like how broken do I want my web to be versus how safe do I want my web to be?


00:40:19.060 --> 00:40:24.820
I feel like there might be something like that in the pipe world.


00:40:24.820 --> 00:40:29.620
I think the reality, at least right now, is that any kind of policy like that would


00:40:29.620 --> 00:40:34.980
not be enforceable because there's going to be some edge case, some dependency that's super old


00:40:34.980 --> 00:40:40.020
or whatever. Like, you know, Python is not nearly as bad as an ecosystem like NPM in terms of like


00:40:40.020 --> 00:40:43.700
breadth of dependencies for a given thing, right?


00:40:43.700 --> 00:40:44.540
It's like maybe--


00:40:44.540 --> 00:40:47.140
- Usually the dependencies are like thicker, right?


00:40:47.140 --> 00:40:48.300
You don't have a-- - Right, yeah.


00:40:48.300 --> 00:40:50.300
- Like three lines of code you're depending on,


00:40:50.300 --> 00:40:52.100
you just put that in your code.


00:40:52.100 --> 00:40:54.260
- It does exist, but yeah, generally no.


00:40:54.260 --> 00:40:57.300
But so that's sort of like, but even still,


00:40:57.300 --> 00:41:00.500
like I think you'd have a hard time saying like,


00:41:00.500 --> 00:41:03.580
I'm gonna only consume packages that have 2FA enabled


00:41:03.580 --> 00:41:06.000
because there's so few of them right now.


00:41:06.000 --> 00:41:08.100
If all that's, you know, the tooling and stuff


00:41:08.100 --> 00:41:09.980
for that exists. - Sure, sure.


00:41:09.980 --> 00:41:13.140
- Okay, well, interesting.


00:41:13.140 --> 00:41:16.400
So this Atomics Write story, everything was put back,


00:41:16.400 --> 00:41:20.100
but it just, it shows unintended consequences.


00:41:20.100 --> 00:41:23.020
- And kind of ironic too, actually,


00:41:23.020 --> 00:41:26.260
'cause like PyPI is an open source project as well.


00:41:26.260 --> 00:41:28.140
And like, you know, people were upset


00:41:28.140 --> 00:41:31.220
that we were making demands of users to do a certain thing,


00:41:31.220 --> 00:41:32.260
but like at the end of the day,


00:41:32.260 --> 00:41:34.740
someone's making demands of us to use our time


00:41:34.740 --> 00:41:36.380
in ways that we don't want to.


00:41:36.380 --> 00:41:38.740
So yeah, it's trade-offs.


00:41:38.740 --> 00:41:41.700
- I saw a Gency James Bennett's article, right?


00:41:41.700 --> 00:41:44.260
A lot of those ideas were really well spelled out there.


00:41:44.260 --> 00:41:45.940
- Yeah, absolutely.


00:41:45.940 --> 00:41:46.780
- Yeah.


00:41:46.780 --> 00:41:50.100
- Yeah, I think people forget that it's a volunteer


00:41:50.100 --> 00:41:51.580
open source project and not like--


00:41:51.580 --> 00:41:55.940
- I thought it was this conglomerate of corporate overlords.


00:41:55.940 --> 00:41:56.780
- Shadowy support.


00:41:56.780 --> 00:41:57.940
- So this is what I got from Reddit.


00:41:57.940 --> 00:42:05.020
What's this PyPI 2FA dashboard here?


00:42:05.020 --> 00:42:07.500
This looks pretty cool.


00:42:07.500 --> 00:42:08.540
Tell us about this project.


00:42:08.540 --> 00:42:09.380
- I'll link it in the show notes.


00:42:09.380 --> 00:42:12.100
- I'm gonna switch to like, switch to like the top right,


00:42:12.100 --> 00:42:15.180
switch to like past three months or something like that.


00:42:15.180 --> 00:42:16.020
Yeah. - Okay.


00:42:16.020 --> 00:42:17.420
- You can really see the bump there.


00:42:17.420 --> 00:42:19.220
So yeah, this is the dashboard we put together


00:42:19.220 --> 00:42:23.320
essentially for us to monitor how the rollout for 2FA


00:42:23.320 --> 00:42:26.220
and security key giveaway was going.


00:42:26.220 --> 00:42:28.620
But we made it public, so like anyone can check this out


00:42:28.620 --> 00:42:30.420
and I think we'll put link in the show notes.


00:42:30.420 --> 00:42:32.700
But yeah, the numbers are great.


00:42:32.700 --> 00:42:34.100
The one thing this isn't actually showing


00:42:34.100 --> 00:42:36.060
is how many security keys we've given away.


00:42:36.060 --> 00:42:38.540
So we've, at this point, like I just checked earlier,


00:42:38.540 --> 00:42:41.020
we've given away more than 500 keys, which is awesome.


00:42:41.020 --> 00:42:43.900
And it's only a fraction of what we have to give away.


00:42:43.900 --> 00:42:46.740
So I would really, like if anyone listening wants a key


00:42:46.740 --> 00:42:50.020
and has a critical project, like go and get the keys.


00:42:50.020 --> 00:42:53.020
And we'll find something to do with those keys


00:42:53.020 --> 00:42:54.860
if we don't give them all away by the time


00:42:54.860 --> 00:42:55.940
they expire in October.


00:42:55.940 --> 00:42:59.700
But yeah, so a bunch of keys given away.


00:42:59.700 --> 00:43:01.820
We also, I didn't mention this, but like as part of this,


00:43:01.820 --> 00:43:04.640
we also turned on a feature that allowed any project


00:43:04.640 --> 00:43:07.640
to manually require 2FA for all their maintainers.


00:43:07.640 --> 00:43:09.700
So like anyone that just wasn't critical


00:43:09.700 --> 00:43:11.700
and wanted to opt into this, they could do that too.


00:43:11.700 --> 00:43:15.800
So I think 300, almost 300 projects have done that.


00:43:15.800 --> 00:43:16.640
And then we're almost like,


00:43:16.640 --> 00:43:20.360
we're so close to hitting 30,000 users on PyPI


00:43:20.360 --> 00:43:23.040
with a two-factor enabled, which is huge.


00:43:23.040 --> 00:43:27.960
And that's up from like 27,000 before we did the giveaway.


00:43:27.960 --> 00:43:28.800
- Cool.


00:43:28.800 --> 00:43:30.840
Well, I was one of the 27,000 before


00:43:30.840 --> 00:43:35.840
because my packages on PyBI are not super significant,


00:43:35.840 --> 00:43:37.400
but they are there.


00:43:37.400 --> 00:43:39.920
And so I definitely put 2FA on there


00:43:39.920 --> 00:43:43.880
and just have it running through my phone basically.


00:43:43.880 --> 00:43:45.160
- Appreciate that.


00:43:45.160 --> 00:43:48.680
- Yeah, so people can go and see the progress here


00:43:48.680 --> 00:43:50.920
of how it's coming along.


00:43:50.920 --> 00:43:53.160
- Yeah, and how many projects we've classified


00:43:53.160 --> 00:43:54.000
is critical, right?


00:43:54.000 --> 00:43:55.160
Like how many is 1%?


00:43:55.160 --> 00:43:58.280
Well, right now it's like almost 4,000 projects,


00:43:58.280 --> 00:43:59.400
which is not a ton,


00:43:59.400 --> 00:44:01.360
but there's a lot of maintainers of those projects.


00:44:01.360 --> 00:44:02.480
- Sure.


00:44:02.480 --> 00:44:03.800
Well, two things that are interesting.


00:44:03.800 --> 00:44:08.560
One is I think I can go to pypi.org and see 393,000


00:44:08.560 --> 00:44:13.560
and say, well, 3,930 are probably critical, right?


00:44:13.560 --> 00:44:16.360
I mean, it has that designation,


00:44:16.360 --> 00:44:19.360
but as you said, it's computed over time.


00:44:19.360 --> 00:44:21.600
So maybe there's something that was critical,


00:44:21.600 --> 00:44:23.840
but is no longer, or something becomes critical, right?


00:44:23.840 --> 00:44:27.440
So this number could sort of outpace the actual number


00:44:27.440 --> 00:44:30.160
of just 1% of the total projects, yeah.


00:44:30.160 --> 00:44:32.840
- Yeah, yeah, it will grow above 1% over time


00:44:32.840 --> 00:44:35.080
because yeah, if something's been designated as critical,


00:44:35.080 --> 00:44:37.800
it just retains that designation indefinitely.


00:44:37.800 --> 00:44:39.960
And the other thing that we kind of snuck in here


00:44:39.960 --> 00:44:42.960
is that like anything that's a dependency of PyPI itself


00:44:42.960 --> 00:44:43.960
is also critical.


00:44:43.960 --> 00:44:47.080
So we just figured that would be a good idea for us.


00:44:47.080 --> 00:44:48.560
So yeah, there's a couple of projects


00:44:48.560 --> 00:44:50.480
that maybe wouldn't normally be included,


00:44:50.480 --> 00:44:53.280
but we include them because like we personally care.


00:44:53.280 --> 00:44:56.640
- Is that like maybe Pyramid or stuff like that?


00:44:56.640 --> 00:44:57.920
or something else. - I actually,


00:44:57.920 --> 00:44:59.620
I don't know what-- - Human mice.


00:44:59.620 --> 00:45:01.600
- Yeah, I don't know what the difference


00:45:01.600 --> 00:45:03.120
between those two sets is necessarily,


00:45:03.120 --> 00:45:04.880
but it would be interesting to figure out.


00:45:04.880 --> 00:45:07.160
- But if there's anything that potentially wasn't,


00:45:07.160 --> 00:45:08.440
then it is because of that.


00:45:08.440 --> 00:45:09.280
Okay. - Yeah.


00:45:09.280 --> 00:45:11.880
- The other thing that's interesting


00:45:11.880 --> 00:45:15.400
is there's 8,400 users identified as critical,


00:45:15.400 --> 00:45:18.000
even though there's 3,900 packages.


00:45:18.000 --> 00:45:20.080
So I guess 'cause multiple people


00:45:20.080 --> 00:45:22.880
can be designated as a maintainer, huh?


00:45:22.880 --> 00:45:23.720
- Yeah, exactly.


00:45:23.720 --> 00:45:24.960
So like, it looks like the average


00:45:24.960 --> 00:45:27.640
is about two maintainers per critical project,


00:45:27.640 --> 00:45:28.960
which is a little scary.


00:45:28.960 --> 00:45:31.600
I think in that reality, there's a lot that just have one


00:45:31.600 --> 00:45:33.960
and a lot that have a lot more, but.


00:45:33.960 --> 00:45:36.800
- Yeah, it's a bimodal sort of distribution, right?


00:45:36.800 --> 00:45:39.000
Like I say, a whole bunch by the one maintainer


00:45:39.000 --> 00:45:41.280
than these groups of people, yeah.


00:45:41.280 --> 00:45:42.580
- Yes, yeah. - Interesting.


00:45:42.580 --> 00:45:43.420
Okay, this is cool.


00:45:43.420 --> 00:45:46.280
So people can check this out and see how it's going.


00:45:46.280 --> 00:45:49.520
This whole idea of critical and requiring 2FA,


00:45:49.520 --> 00:45:52.600
this NPM is also doing something like this, right?


00:45:52.600 --> 00:45:54.560
So it's not completely out of the blue.


00:45:54.560 --> 00:45:57.360
- Yeah, I mean, a lot of organizations are doing it.


00:45:57.360 --> 00:46:00.720
I think RubyGems said that they were working on a mandate


00:46:00.720 --> 00:46:01.880
or had proposed one as well.


00:46:01.880 --> 00:46:05.200
And yeah, NPM, they started with a pretty small cohort.


00:46:05.200 --> 00:46:07.420
It's only the top hundred projects,


00:46:07.420 --> 00:46:09.040
but they're gonna expand that.


00:46:09.040 --> 00:46:10.920
And then the big one is,


00:46:10.920 --> 00:46:12.740
I think a lot of people aren't aware of this,


00:46:12.740 --> 00:46:15.960
but like GitHub announced that they are gonna require 2FA


00:46:15.960 --> 00:46:18.560
for anyone that contributes code on GitHub,


00:46:18.560 --> 00:46:20.600
which is like, I guess everyone that uses GitHub.


00:46:20.600 --> 00:46:22.040
I don't know what the user is


00:46:22.040 --> 00:46:24.080
that doesn't contribute code on GitHub,


00:46:24.080 --> 00:46:27.600
but like, yeah, everyone's gonna have to have 2FA enabled.


00:46:27.600 --> 00:46:29.080
It was just huge by the end of 2023.


00:46:29.080 --> 00:46:30.880
So they have some time, but like,


00:46:30.880 --> 00:46:31.720
- Yeah.


00:46:31.720 --> 00:46:34.160
- I can't comprehend the size of the support team


00:46:34.160 --> 00:46:36.480
they must be hiring right now to satisfy that.


00:46:36.480 --> 00:46:38.520
'Cause that's like, it's crazy, you know?


00:46:38.520 --> 00:46:41.600
- Yeah, well, probably a lot of support team


00:46:41.600 --> 00:46:43.160
and a lot of automation that they're trying


00:46:43.160 --> 00:46:46.380
to get in place to, here's what you gotta do, but.


00:46:46.380 --> 00:46:50.240
- Yeah, and like-- - Yeah, it's gonna be high.


00:46:50.240 --> 00:46:52.800
- The secret here is that like, we have a,


00:46:52.800 --> 00:46:55.280
So via the OpenSSF, it has a bunch of work groups


00:46:55.280 --> 00:46:57.500
and we have a new one that's pretty fun for me


00:46:57.500 --> 00:46:59.660
'cause it's about securing software repositories,


00:46:59.660 --> 00:47:01.700
but essentially, you know, like everyone


00:47:01.700 --> 00:47:03.240
that maintains a software repository,


00:47:03.240 --> 00:47:06.300
including folks from NPM, Crates, RubyGems,


00:47:06.300 --> 00:47:07.840
like Maven Central, all that stuff.


00:47:07.840 --> 00:47:10.140
They all, we all come and talk twice a week


00:47:10.140 --> 00:47:12.200
or once every two weeks and, you know,


00:47:12.200 --> 00:47:13.040
talk about this kind of stuff.


00:47:13.040 --> 00:47:16.040
So like, we've been all talking about like 2FA mandates


00:47:16.040 --> 00:47:18.260
for a while now and like kind of working on our plans


00:47:18.260 --> 00:47:21.280
together and sharing notes and that kind of thing.


00:47:21.280 --> 00:47:22.300
- Yeah, fantastic.


00:47:22.300 --> 00:47:27.620
Yeah, I only think that there's probably some users


00:47:27.620 --> 00:47:32.620
who just clone repos and post issues,


00:47:32.620 --> 00:47:35.240
but don't really, don't do any check-ins.


00:47:35.240 --> 00:47:37.720
They're just there to save a copy.


00:47:37.720 --> 00:47:44.920
That's actually probably not the main use, right?


00:47:44.920 --> 00:47:47.880
Probably the main use is people contributing


00:47:47.880 --> 00:47:50.600
to their private repos or to maybe even less


00:47:50.600 --> 00:47:52.480
- Yeah. - Or the public repos.


00:47:52.480 --> 00:47:54.280
Mostly private repos, I would guess.


00:47:54.280 --> 00:47:57.300
Okay, but yeah, that's gonna be a big, big deal.


00:47:57.300 --> 00:48:00.600
And it also, I guess, leads us into


00:48:00.600 --> 00:48:06.320
the whole supply integrity side of things, right?


00:48:06.320 --> 00:48:11.320
'Cause it's one thing to say your account on PyPI


00:48:11.320 --> 00:48:15.600
has to be shared with 2FA and better security.


00:48:15.600 --> 00:48:18.360
But if somebody can just put in bad code


00:48:18.360 --> 00:48:22.040
through a very complex PR that happens to sneak,


00:48:22.040 --> 00:48:24.960
you know, a less than where there used to be a greater than,


00:48:24.960 --> 00:48:29.160
you know, some weird, weird little edge case into a PR,


00:48:29.160 --> 00:48:33.520
right, so, or take over somebody's GitHub account,


00:48:33.520 --> 00:48:36.080
change the code and they don't realize it, right?


00:48:36.080 --> 00:48:37.880
These, that's probably more likely


00:48:37.880 --> 00:48:40.460
'cause there's no notification that you did your own commit


00:48:40.460 --> 00:48:42.840
in a significant way, right?


00:48:42.840 --> 00:48:46.120
So locking down GitHub will have really important


00:48:46.120 --> 00:48:51.400
on effects for Python and all the other open source package locations, right?


00:48:51.400 --> 00:48:55.400
Yeah, absolutely. Yeah, I mean, and there's a lot of work being done here,


00:48:55.400 --> 00:49:00.360
just in terms of like, making your source depository more secure and making your builds,


00:49:00.360 --> 00:49:02.840
you know, if you're building artifacts on GitHub, making those more secure,


00:49:02.840 --> 00:49:08.280
you know, making your publishing method more secure, like all of it is a ton of improvement.


00:49:08.280 --> 00:49:08.760
Yeah.


00:49:08.760 --> 00:49:09.880
Yeah. Like, I mean,


00:49:10.680 --> 00:49:12.840
You don't want something sneaking in


00:49:12.840 --> 00:49:15.840
to mix in some code in a CI stamp


00:49:15.840 --> 00:49:16.840
or any of those types of things.


00:49:16.840 --> 00:49:20.800
- Yeah, and there's just so many insertion points, right?


00:49:20.800 --> 00:49:22.920
- Yes, exactly, exactly.


00:49:22.920 --> 00:49:27.400
So I guess, what are some of the thoughts


00:49:27.400 --> 00:49:28.760
on what can be done?


00:49:28.760 --> 00:49:32.480
It used to be, this is kind of what I was going back to,


00:49:32.480 --> 00:49:34.520
like, oh, there used to be this world with no encryption


00:49:34.520 --> 00:49:36.440
and like lax or no passwords,


00:49:36.440 --> 00:49:38.960
and now all of a sudden we need all this junk.


00:49:38.960 --> 00:49:40.560
And I feel like there's a little bit of that


00:49:40.560 --> 00:49:43.640
with people going, well, let's just try to abuse PyPI.


00:49:43.640 --> 00:49:47.080
Let's try to abuse NPM and sneak in what we can.


00:49:47.080 --> 00:49:49.320
And you maybe talk about some of the steps


00:49:49.320 --> 00:49:52.040
you all have taken to mitigate that


00:49:52.040 --> 00:49:54.240
and what you think can be done.


00:49:54.240 --> 00:49:55.960
There's a lot of talk about package signing,


00:49:55.960 --> 00:49:57.900
which I'm not so sure.


00:49:57.900 --> 00:49:58.740
- Yeah.


00:49:58.740 --> 00:50:00.080
- Straight up signing is how useful it is,


00:50:00.080 --> 00:50:01.640
but yeah, maybe let's start at like,


00:50:01.640 --> 00:50:03.140
whatever you thought about.


00:50:03.140 --> 00:50:05.240
- I mean, I think the thing I want to start with


00:50:05.240 --> 00:50:07.480
is just like, none of these is a panacea, right?


00:50:07.480 --> 00:50:11.480
So I think one of the arguments that was raised


00:50:11.480 --> 00:50:12.980
with the two-factor stuff was just like,


00:50:12.980 --> 00:50:16.280
"Well, this isn't going to protect us from a vulnerability


00:50:16.280 --> 00:50:18.280
or a maintainer going rogue."


00:50:18.280 --> 00:50:20.280
It's like, "Yeah, no, obviously not.


00:50:20.280 --> 00:50:22.280
There's not one thing that's going to protect you from that.


00:50:22.280 --> 00:50:24.280
It's like there's a combination of features


00:50:24.280 --> 00:50:28.280
that are going to protect you from a combination of threat actors or vectors.


00:50:28.280 --> 00:50:32.780
And you have to use all of them if you want to feel fully protected."


00:50:32.780 --> 00:50:36.780
So yeah, I think we just spent a lot of time talking about 2FA,


00:50:36.780 --> 00:50:39.700
But like I said, it eliminates entire classes of attacks.


00:50:39.700 --> 00:50:41.720
So like, please turn on 2FA.


00:50:41.720 --> 00:50:44.700
Yeah, another one, like since we're talking about GitHub,


00:50:44.700 --> 00:50:48.660
an interesting one is the security hardening with OIDC.


00:50:48.660 --> 00:50:50.620
So you've heard of OIDC, it's OpenID Connect.


00:50:50.620 --> 00:50:52.540
It's kind of built on OAuth protocol,


00:50:52.540 --> 00:50:56.160
but essentially like it allows you to give things identity.


00:50:56.160 --> 00:50:59.140
So like each individual GitHub action workflow,


00:50:59.140 --> 00:51:00.140
like each run of the workflow


00:51:00.140 --> 00:51:02.180
actually gets its own identity.


00:51:02.180 --> 00:51:06.020
And that identity is like cryptographically verifiable.


00:51:06.020 --> 00:51:10.060
So PyPI is, we're working on implementing support right now


00:51:10.060 --> 00:51:12.500
and it will exist very soon


00:51:12.500 --> 00:51:15.380
for what's essentially gonna be credentialless publication


00:51:15.380 --> 00:51:17.480
from a GitHub Actions workflow.


00:51:17.480 --> 00:51:18.640
- Okay.


00:51:18.640 --> 00:51:22.700
- So that means like no password, no API token, nothing.


00:51:22.700 --> 00:51:25.500
You essentially say, okay, I trust this workflow


00:51:25.500 --> 00:51:29.420
and it has the ability to publish directly in a secure way.


00:51:29.420 --> 00:51:30.260
It's super cool.


00:51:30.260 --> 00:51:31.860
And then like a lot of other CI providers


00:51:31.860 --> 00:51:34.980
are gonna implement, hopefully support for OODC as well.


00:51:34.980 --> 00:51:39.380
So yeah, we'll hopefully see this in a bunch of places.


00:51:39.380 --> 00:51:43.300
All right, so short-lived tokens directly


00:51:43.300 --> 00:51:45.860
from your cloud provider.


00:51:45.860 --> 00:51:46.580
Yeah, essentially.


00:51:46.580 --> 00:51:48.140
It works for Google Cloud right now


00:51:48.140 --> 00:51:50.100
as well and a couple of other things.


00:51:50.100 --> 00:51:52.860
But yeah, it's essentially a way to verify


00:51:52.860 --> 00:51:57.580
the identity of a really tightly scoped thing, like an actions


00:51:57.580 --> 00:52:01.920
run, and then verify it and authenticate it and give it


00:52:01.920 --> 00:52:04.580
the permission to do something like publish to PyPI.


00:52:04.580 --> 00:52:08.560
- All right, yeah, this looks useful.


00:52:08.560 --> 00:52:11.320
You mean handing out API keys


00:52:11.320 --> 00:52:14.920
or embedding username passwords into CI/CD


00:52:14.920 --> 00:52:16.920
doesn't sound like a great idea?


00:52:16.920 --> 00:52:19.240
- Yeah, no, especially with stuff like CodeCove attack


00:52:19.240 --> 00:52:21.480
and Travis CI had a similar attack


00:52:21.480 --> 00:52:24.280
where all environment variables were exposed.


00:52:24.280 --> 00:52:27.480
Everyone's gotta just go and roll everything at that point.


00:52:27.480 --> 00:52:28.440
It's such a mess.


00:52:31.160 --> 00:52:32.200
- Well, and it's one thing to say,


00:52:32.200 --> 00:52:35.080
okay, we've got to reset your password, fine.


00:52:35.080 --> 00:52:36.000
There is a race.


00:52:36.000 --> 00:52:37.240
I mean, as soon as that happens,


00:52:37.240 --> 00:52:40.140
there's a race from people looking to use those credentials


00:52:40.140 --> 00:52:44.240
and you looking to not have them used by other than you.


00:52:44.240 --> 00:52:45.880
But the real problem, I think,


00:52:45.880 --> 00:52:47.820
is not the people who are paying attention.


00:52:47.820 --> 00:52:50.680
It's probably the maintainer who set up some project


00:52:50.680 --> 00:52:51.840
and hasn't touched it in a year


00:52:51.840 --> 00:52:53.320
and hasn't checked their email.


00:52:53.320 --> 00:52:55.640
They're just kind of not super engaged.


00:52:55.640 --> 00:53:00.640
That could stay open for a super long time in a bad way.


00:53:00.680 --> 00:53:01.520
- Exactly.


00:53:01.520 --> 00:53:05.080
- All right, package signing.


00:53:05.080 --> 00:53:08.440
Donald stuff talked about package signing


00:53:08.440 --> 00:53:11.580
and said why package signing is not the Holy Grail.


00:53:11.580 --> 00:53:15.240
People just say, it's a little bit like the 2FA stuff.


00:53:15.240 --> 00:53:19.960
If you just sign your packages to prove they come from you,


00:53:19.960 --> 00:53:21.800
everything is gonna be fine,


00:53:21.800 --> 00:53:26.800
unless the person just goes rogue.


00:53:26.800 --> 00:53:28.200
You can't protect from crazy.


00:53:28.200 --> 00:53:32.000
There was one of the packages that got messed up.


00:53:32.000 --> 00:53:33.480
I think it was on PyPI.


00:53:33.480 --> 00:53:35.680
That same person was arrested for like


00:53:35.680 --> 00:53:38.520
bomb making materials in New York.


00:53:38.520 --> 00:53:39.360
- I don't know about this.


00:53:39.360 --> 00:53:41.220
- See if I can find the article.


00:53:41.220 --> 00:53:42.920
I'll see if I can find the article.


00:53:42.920 --> 00:53:47.520
But it's like clearly that's not


00:53:47.520 --> 00:53:49.840
a well-functioning sort of person.


00:53:49.840 --> 00:53:52.000
And it doesn't matter if they sign the package


00:53:52.000 --> 00:53:54.920
if they just go bonkers, you know?


00:53:54.920 --> 00:53:56.220
- Yeah, that's true.


00:53:56.220 --> 00:53:58.660
- Yeah, it's not the attack that we're trying to protect


00:53:58.660 --> 00:53:59.780
against with signing, but yeah.


00:53:59.780 --> 00:54:01.700
- Yeah, so what can signing help with


00:54:01.700 --> 00:54:03.780
and what is it not gonna help us with?


00:54:03.780 --> 00:54:05.500
- Well, yeah, that's great.


00:54:05.500 --> 00:54:08.380
Yeah, Donald wrote this post that's kind of like


00:54:08.380 --> 00:54:10.980
canon at this point for why package signing


00:54:10.980 --> 00:54:14.060
is not the holy grail, but he's really talking about GPG,


00:54:14.060 --> 00:54:16.580
well, why GPG signing is not the holy grail.


00:54:16.580 --> 00:54:17.900
And there's like some really,


00:54:17.900 --> 00:54:18.940
there's good points in here, right?


00:54:18.940 --> 00:54:21.300
Like, so like you said, package signing doesn't protect


00:54:21.300 --> 00:54:24.140
against an actual account compromise.


00:54:24.140 --> 00:54:26.420
If someone compromised your GPG key,


00:54:26.420 --> 00:54:27.660
they can sign whatever they want.


00:54:27.660 --> 00:54:31.140
So there's no protections there.


00:54:31.140 --> 00:54:33.500
And then there's other problems with GPG as well.


00:54:33.500 --> 00:54:35.740
There's UX and usability issues.


00:54:35.740 --> 00:54:38.060
There's issues with web of trust,


00:54:38.060 --> 00:54:40.740
like actually establishing, okay, great.


00:54:40.740 --> 00:54:42.380
You've signed this thing, but how do I establish


00:54:42.380 --> 00:54:44.160
that the person that signed it


00:54:44.160 --> 00:54:45.660
is actually a person that I trust


00:54:45.660 --> 00:54:47.260
and not someone's providing me


00:54:47.260 --> 00:54:49.860
with a malicious public key?


00:54:49.860 --> 00:54:51.420
How do you actually do that?


00:54:51.420 --> 00:54:53.140
And so, yeah, I think a lot of people don't know that.


00:54:53.140 --> 00:54:54.600
- It's a little equivalent to, sorry,


00:54:54.600 --> 00:54:55.860
it's a little equivalent to people saying,


00:54:55.860 --> 00:54:58.540
well, just check that it's HTTPS for the URL.


00:54:58.540 --> 00:55:01.500
Well, that's not identity, that's just like encryption.


00:55:01.500 --> 00:55:04.500
- Yeah, you can still serve crap over HTTPS, yeah.


00:55:04.500 --> 00:55:06.820
I think a lot of people also,


00:55:06.820 --> 00:55:10.140
they don't realize that like PyPI has supported


00:55:10.140 --> 00:55:13.420
uploading GPG signatures for like a very long time,


00:55:13.420 --> 00:55:16.700
still does, hasn't gone away, and nobody does it.


00:55:16.700 --> 00:55:19.100
It's just like, it's just not used, nobody does it.


00:55:19.100 --> 00:55:21.060
It's too hard, tooling doesn't work right,


00:55:21.060 --> 00:55:23.080
or it's just like not worth doing.


00:55:23.080 --> 00:55:26.920
So yeah, I think Donald's post is right in the context


00:55:26.920 --> 00:55:28.960
of a world-- and this is written in 2013--


00:55:28.960 --> 00:55:34.280
so a world where only GBG is the only signing feature or signing


00:55:34.280 --> 00:55:36.080
tooling that you have available.


00:55:36.080 --> 00:55:37.600
But that's not true anymore.


00:55:37.600 --> 00:55:42.080
And I'm really excited about this new tech called SigStor,


00:55:42.080 --> 00:55:43.720
partly because I work with it.


00:55:43.720 --> 00:55:45.100
People on my team work on it.


00:55:45.100 --> 00:55:47.480
It's really interesting technology.


00:55:47.480 --> 00:55:52.260
But SigStor is essentially a new way to sign things.


00:55:52.260 --> 00:55:56.700
and it's not necessarily based on long-lived maintained keys.


00:55:56.700 --> 00:55:58.460
It actually uses ephemeral keys.


00:55:58.460 --> 00:56:00.700
Like when you sign something with Salesforce,


00:56:00.700 --> 00:56:02.380
you generate a public private key pair,


00:56:02.380 --> 00:56:04.500
you sign it very quickly and then you throw those away.


00:56:04.500 --> 00:56:05.820
Like you don't actually maintain them.


00:56:05.820 --> 00:56:06.660
They can't get leaked.


00:56:06.660 --> 00:56:07.880
They don't ever get written to disk,


00:56:07.880 --> 00:56:10.420
like nothing, they don't exist.


00:56:10.420 --> 00:56:11.940
Yeah, so this is also based on--


00:56:11.940 --> 00:56:15.100
- The chain of ownership of those keys,


00:56:15.100 --> 00:56:17.860
the keys like provided by some other trusted key


00:56:17.860 --> 00:56:19.820
or something that really is tied to you,


00:56:19.820 --> 00:56:20.740
something like that?


00:56:20.740 --> 00:56:21.580
- No, no, no.


00:56:21.580 --> 00:56:25.340
Literally just a key that you've generated out of thin air, you sign it and then you throw it away.


00:56:25.340 --> 00:56:29.820
So the way that SIGstore works, which is it's also built on top of OADC.


00:56:29.820 --> 00:56:31.820
So you have these identities, right?


00:56:31.820 --> 00:56:36.460
You have like your email, your Gmail account, your GitHub account, that kind of thing.


00:56:36.460 --> 00:56:40.140
And they all offer like essentially an online identity.


00:56:40.140 --> 00:56:45.420
You essentially sign with these identities instead.


00:56:45.420 --> 00:56:54.220
So like, you sign into something like Gmail, sign into something like GitHub, you share this


00:56:54.220 --> 00:57:00.220
identity with a certificate authority that SigStor runs, and this binds the identity to this like


00:57:00.220 --> 00:57:07.020
one-time ephemeral private public key pair that you generated. And then that certificate is


00:57:07.020 --> 00:57:10.540
published on a transparency lock, so it's there forever. There's a record of everything that gets


00:57:10.540 --> 00:57:16.940
signed. But then like the thing that you have to like trust is not like some, you know,


00:57:16.940 --> 00:57:22.460
however many digit long alphanumeric like public key ID. It's like an email address. It's like


00:57:22.460 --> 00:57:28.300
di@python.org. So you can like be pretty sure that someone hasn't, you know, and someone can still


00:57:28.300 --> 00:57:33.420
lose access to that, that identity via like compromise of that account. But it's like a


00:57:33.420 --> 00:57:38.860
little, it's much, much easier to use, sign and maintain. And it's a little bit less likely that,


00:57:38.860 --> 00:57:42.060
that that actual identity is going to get compromised.


00:57:42.060 --> 00:57:44.060
Yeah, OK, very interesting.


00:57:44.060 --> 00:57:45.260
Just stepping back a moment.


00:57:45.260 --> 00:57:52.620
Here's the one that I was thinking of.


00:57:52.620 --> 00:57:54.700
Sorry, it was NPM, not PyPI.


00:57:54.700 --> 00:58:00.620
NPM libraries colors and fakers sabotage and protest


00:58:00.620 --> 00:58:05.820
by maintainer, a person named Marek Squires.


00:58:05.820 --> 00:58:09.620
And follow it up quickly from that.


00:58:09.620 --> 00:58:11.020
We have.


00:58:11.020 --> 00:58:18.700
The resident of Queens home suspected in bomb making materials,


00:58:18.700 --> 00:58:21.260
arrested Mark Squires and so on.


00:58:21.260 --> 00:58:25.660
So like this is what I was talking about when I'm saying like the no amount of


00:58:25.660 --> 00:58:31.380
signing or, you know, a two FAA is going to help against this.


00:58:31.380 --> 00:58:33.020
And it's just something.


00:58:33.540 --> 00:58:35.940
I mean, it's just I think it's part of the deal.


00:58:35.940 --> 00:58:39.180
If you accept code from people, you got to vet that.


00:58:39.180 --> 00:58:40.900
I've essentially always said,


00:58:40.900 --> 00:58:42.820
the API makes no guarantees.


00:58:42.820 --> 00:58:44.140
You can't trust anything that's on it.


00:58:44.140 --> 00:58:48.940
You need to take your own steps to learn and build trust and things that are on there.


00:58:48.940 --> 00:58:50.820
We can give you some tools to help you do that.


00:58:50.820 --> 00:58:55.620
But like, yeah, essentially you're giving someone commit access to your project,


00:58:55.620 --> 00:58:59.380
your application, whatever, like you're allowing them to introduce code


00:58:59.380 --> 00:59:03.020
into your project and run alongside your application.


00:59:03.380 --> 00:59:08.260
What are your thoughts on private hosted package systems


00:59:08.260 --> 00:59:11.580
like PyPI dev server or whatever,


00:59:11.580 --> 00:59:13.940
those where you can create the local ones


00:59:13.940 --> 00:59:16.700
and maybe even mirror stuff from PyPI?


00:59:16.700 --> 00:59:18.740
- Yeah, I mean, if you're gonna do like a really robust


00:59:18.740 --> 00:59:21.340
like auditing pipeline where you pull stuff


00:59:21.340 --> 00:59:23.740
from public PyPI, you spend some time looking at it,


00:59:23.740 --> 00:59:25.540
you maybe run it through some tests


00:59:25.540 --> 00:59:27.500
and then you introduce it to your private server,


00:59:27.500 --> 00:59:29.260
that's a really good way to like insulate yourself


00:59:29.260 --> 00:59:30.900
from a couple of different types of attacks,


00:59:30.900 --> 00:59:32.300
like dependency confusion attacks,


00:59:32.300 --> 00:59:33.840
typo squatting, that kind of thing.


00:59:33.840 --> 00:59:36.760
Like if you're pointing your install at a private server


00:59:36.760 --> 00:59:38.800
that just doesn't have any of that stuff on it


00:59:38.800 --> 00:59:41.600
because you have manually curated it,


00:59:41.600 --> 00:59:43.600
then yeah, I mean, that's a pretty good practice.


00:59:43.600 --> 00:59:46.220
And so like a lot of people like Artifactory,


00:59:46.220 --> 00:59:48.140
Google Cloud, Artifactory, all those things,


00:59:48.140 --> 00:59:50.540
like they're all sort of similar in that regard.


00:59:50.540 --> 00:59:54.680
- I guess related to that is if you automatically install


00:59:54.680 --> 00:59:58.040
the latest continuously, that maybe puts you


00:59:58.040 --> 01:00:01.080
at a higher level of risk than if you choose to upgrade


01:00:01.080 --> 01:00:02.560
at some point to a package,


01:00:02.560 --> 01:00:04.880
like pinning versus not pinning, basically.


01:00:04.880 --> 01:00:06.400
- Yeah, yeah, exactly.


01:00:06.400 --> 01:00:09.240
- Yeah, okay.


01:00:09.240 --> 01:00:12.080
Let's see, we're getting pretty short on time here, Dustin.


01:00:12.080 --> 01:00:14.200
What else can we cover?


01:00:14.200 --> 01:00:19.200
I know maybe pip audit or scorecard,


01:00:19.200 --> 01:00:23.040
or what do you wanna focus on for a couple of minutes here?


01:00:23.040 --> 01:00:25.240
- Well, yeah, let me just quickly say that like Sixth Store,


01:00:25.240 --> 01:00:26.880
we built a Python client,


01:00:26.880 --> 01:00:29.120
so you can pip install Sixth Store


01:00:29.120 --> 01:00:32.000
and then sign, verify, do whatever from there.


01:00:32.000 --> 01:00:34.360
And I'm super excited to say that like


01:00:34.360 --> 01:00:37.040
the upcoming Python 3.11 release is,


01:00:37.040 --> 01:00:38.720
the releases are usually signed with GPG,


01:00:38.720 --> 01:00:41.000
but we're gonna start signing it with Sixth Door as well,


01:00:41.000 --> 01:00:41.880
the release maintainer.


01:00:41.880 --> 01:00:42.880
- Oh, nice. - Pablo.


01:00:42.880 --> 01:00:45.000
- Can it be signed with two things at once?


01:00:45.000 --> 01:00:46.280
I guess it can.


01:00:46.280 --> 01:00:47.480
- Yeah, multiple people can sign it.


01:00:47.480 --> 01:00:49.480
So we're just gonna have their release manager sign it,


01:00:49.480 --> 01:00:51.140
but yeah, that's super exciting.


01:00:51.140 --> 01:00:53.840
Yeah, so another like area


01:00:53.840 --> 01:00:55.080
that we've been working on a lot lately,


01:00:55.080 --> 01:00:57.800
I've been working on this around vulnerability auditing


01:00:57.800 --> 01:00:58.640
or remediation.


01:00:58.640 --> 01:01:00.680
So we have a new tool called pip Audit.


01:01:00.680 --> 01:01:03.240
It's not part of pip right now, and there's some discussion


01:01:03.240 --> 01:01:05.080
about whether it should be or not.


01:01:05.080 --> 01:01:06.620
But essentially, this is a tool that


01:01:06.620 --> 01:01:09.640
allows you to audit your local environment, your Docker


01:01:09.640 --> 01:01:12.680
container requirements file, whatever, for known


01:01:12.680 --> 01:01:13.340
vulnerabilities.


01:01:13.340 --> 01:01:14.900
Not like unknown vulnerabilities,


01:01:14.900 --> 01:01:18.000
but stuff that's been known, reported, and either fixed


01:01:18.000 --> 01:01:19.600
or upgraded.


01:01:19.600 --> 01:01:22.560
So it'll tell you essentially if it finds a CVE or something


01:01:22.560 --> 01:01:23.720
like that.


01:01:23.720 --> 01:01:26.360
But this also uses a Python-specific advisory


01:01:26.360 --> 01:01:29.920
database that we built that pairs with the open source


01:01:29.920 --> 01:01:34.640
vulnerability service and yeah, it works pretty well.


01:01:34.640 --> 01:01:35.840
I'm pretty pleased with it.


01:01:35.840 --> 01:01:37.960
I would like encourage everyone to just like run it


01:01:37.960 --> 01:01:40.120
on their machine and see what vulnerabilities you have


01:01:40.120 --> 01:01:42.000
like lurking about right now,


01:01:42.000 --> 01:01:43.960
but also like integrate it into your CI pipeline,


01:01:43.960 --> 01:01:46.640
like run an audit, just make sure that, you know,


01:01:46.640 --> 01:01:48.880
your application is not gonna like have a vulnerability


01:01:48.880 --> 01:01:49.840
introduced into it.


01:01:49.840 --> 01:01:52.720
Pairs really nicely with like depend upon things


01:01:52.720 --> 01:01:53.620
like that as well.


01:01:53.620 --> 01:02:00.780
Yeah, and like, I don't know, there's a bunch of other stuff like working on Salsa, if you're


01:02:00.780 --> 01:02:06.020
not familiar with Salsa, it's essentially like a framework for thinking about how secure


01:02:06.020 --> 01:02:08.540
your build pipeline is when you're producing, publishing artifacts.


01:02:08.540 --> 01:02:13.140
So if you're a maintainer, you might think about whether tampering is possible, that


01:02:13.140 --> 01:02:14.140
kind of thing.


01:02:14.140 --> 01:02:17.940
This is sort of a way just to sort of think about how good of a job the build pipeline


01:02:17.940 --> 01:02:18.940
is doing in that regard.


01:02:18.940 --> 01:02:19.940
>> Yeah.


01:02:19.940 --> 01:02:20.940
Build pipelines are a little scary.


01:02:20.940 --> 01:02:21.940
>> Yeah.


01:02:21.940 --> 01:02:23.980
- Yeah, yeah, a little bit. - I mean, they have a huge value,


01:02:23.980 --> 01:02:26.620
but they're also, you could sneak stuff in


01:02:26.620 --> 01:02:28.280
without even actually changing the code


01:02:28.280 --> 01:02:31.220
of the original repo and all sorts of stuff.


01:02:31.220 --> 01:02:32.260
- Yeah, exactly.


01:02:32.260 --> 01:02:35.020
Yeah, I don't know. - I saw this was managed by,


01:02:35.020 --> 01:02:37.620
or like in collaboration with TrailerBits,


01:02:37.620 --> 01:02:39.060
and also you're a maintainer.


01:02:39.060 --> 01:02:42.020
What's the origin story of PipAudit?


01:02:42.020 --> 01:02:42.900
- Yeah, yeah.


01:02:42.900 --> 01:02:45.500
So TrailerBits is a security consultancy.


01:02:45.500 --> 01:02:47.080
They've done a lot of work in the Python space


01:02:47.080 --> 01:02:50.660
and software security space for a long time now.


01:02:50.660 --> 01:02:54.100
folks like William Woodruff were actually involved in


01:02:54.100 --> 01:02:55.980
way back when implementing two-factor


01:02:55.980 --> 01:02:57.740
and some other stuff on PyPI.


01:02:57.740 --> 01:03:01.500
So my team, open source security team at Google,


01:03:01.500 --> 01:03:04.420
we've hired them as contractors to do some of this work


01:03:04.420 --> 01:03:05.580
and do some maintenance,


01:03:05.580 --> 01:03:07.700
build these open source projects, that kind of thing.


01:03:07.700 --> 01:03:10.580
So you'll see William and Alex and some other folks


01:03:10.580 --> 01:03:11.600
all over these projects


01:03:11.600 --> 01:03:13.460
because they've been working really hard


01:03:13.460 --> 01:03:16.500
to make them really useful and work really well


01:03:16.500 --> 01:03:18.020
and be really secure.


01:03:18.020 --> 01:03:19.180
- Yeah, fantastic.


01:03:19.180 --> 01:03:24.180
Let's maybe just round things out with the stuff on the PEP,


01:03:24.180 --> 01:03:25.580
various PEPs.


01:03:25.580 --> 01:03:27.100
- Oh yeah, so yeah, I've been--


01:03:27.100 --> 01:03:30.020
- Maybe the API, yeah, let's go through the PEPs real quick


01:03:30.020 --> 01:03:32.340
then we'll probably have covered enough.


01:03:32.340 --> 01:03:34.820
- Yeah, I stuck my nose in the PEPs recently.


01:03:34.820 --> 01:03:37.420
Yeah, I think most of these are,


01:03:37.420 --> 01:03:40.220
I've like provided some like minimal input into them.


01:03:40.220 --> 01:03:42.500
I can't say, claim that I authored them myself,


01:03:42.500 --> 01:03:45.820
but what I'm super excited about is PEP 621.


01:03:45.820 --> 01:03:48.780
So this is a way to do essentially static metadata


01:03:48.780 --> 01:03:51.100
for Python packages.


01:03:51.100 --> 01:03:52.780
So this includes source distributions,


01:03:52.780 --> 01:03:55.620
which means that you don't have to use setup.py anymore.


01:03:55.620 --> 01:03:58.940
If you don't know why you don't need to use setup.py anymore,


01:03:58.940 --> 01:04:01.140
it's essentially arbitrary code execution


01:04:01.140 --> 01:04:03.180
at install time, which is super scary.


01:04:03.180 --> 01:04:04.100
It should not happen.


01:04:04.100 --> 01:04:05.940
So yeah, 6.21--


01:04:05.940 --> 01:04:10.340
>>Luis: Pair that thought with this resident of Queens


01:04:10.340 --> 01:04:11.820
arrested for bomb making.


01:04:11.820 --> 01:04:15.260
Like, do you want to have that person running


01:04:15.260 --> 01:04:16.860
arbitrary code on your machine?


01:04:16.860 --> 01:04:17.660
Probably no.


01:04:17.660 --> 01:04:18.860
- Add it and install it.


01:04:18.860 --> 01:04:20.420
- Or in production, in production.


01:04:20.420 --> 01:04:22.900
- Yeah, yeah, yeah, exactly.


01:04:22.900 --> 01:04:25.060
So I actually just saw, right before I joined this,


01:04:25.060 --> 01:04:26.420
I saw a tweet from Prajan that like,


01:04:26.420 --> 01:04:29.040
Setup Tools has full support for this.


01:04:29.040 --> 01:04:30.940
There's a bunch of folks that have been working


01:04:30.940 --> 01:04:33.740
really hard on it, so yeah, it's essentially like,


01:04:33.740 --> 01:04:35.340
you don't need to use setup.py anymore,


01:04:35.340 --> 01:04:37.040
which is really nice.


01:04:37.040 --> 01:04:39.040
And like a lot of tools have sort of converged


01:04:39.040 --> 01:04:41.900
on pyproject.toml as the sort of best standard


01:04:41.900 --> 01:04:43.660
for metadata and configuration,


01:04:43.660 --> 01:04:46.200
so like it's nice to see that conversions.


01:04:46.200 --> 01:04:48.960
Yeah, it's great.


01:04:48.960 --> 01:04:52.080
Shout out to like Brett, I think mostly led this PEP hit.


01:04:52.080 --> 01:04:53.340
He did an amazing job.


01:04:53.340 --> 01:04:55.400
And then-- - Yeah, yeah, very cool.


01:04:55.400 --> 01:04:58.060
- 691 is exciting as well.


01:04:58.060 --> 01:05:00.360
So PyPI has a couple of different APIs.


01:05:00.360 --> 01:05:02.780
Most of them are not standardized.


01:05:02.780 --> 01:05:04.840
One of them that is standardized is the simple API,


01:05:04.840 --> 01:05:07.520
which is essentially just an HTML page


01:05:07.520 --> 01:05:09.400
and tools like-- - Yeah.


01:05:09.400 --> 01:05:12.240
It's kind of insane, but if you go to a simple--


01:05:12.240 --> 01:05:13.520
- Oh, are you really gonna do it?


01:05:13.520 --> 01:05:16.380
- Yeah, that's gonna blow up your browser for sure.


01:05:16.380 --> 01:05:17.840
'Cause like essentially, yeah.


01:05:17.840 --> 01:05:19.600
So tools don't actually use this page,


01:05:19.600 --> 01:05:21.600
they use the individual pages for these projects.


01:05:21.600 --> 01:05:25.600
But yeah, I think tools like Pip


01:05:25.600 --> 01:05:28.240
essentially have to parse HTML to like interact with PyPI


01:05:28.240 --> 01:05:29.680
and that it's not great.


01:05:29.680 --> 01:05:31.860
Like it used to work okay, it doesn't scale well now.


01:05:31.860 --> 01:05:34.980
So we're in the process of like standardizing


01:05:34.980 --> 01:05:39.280
a lot of our JSON APIs and one of them that we sort of did.


01:05:39.280 --> 01:05:41.920
And Donald led this path with some input from Prajan


01:05:41.920 --> 01:05:45.680
and Cooper and myself, essentially like the same data,


01:05:45.680 --> 01:05:48.640
the same API, same files, everything that pip needs


01:05:48.640 --> 01:05:50.280
that's not HTML, it's just JSON.


01:05:50.280 --> 01:05:52.600
So they can use standard library or JSON parser


01:05:52.600 --> 01:05:56.040
to request and get this and do the stuff


01:05:56.040 --> 01:05:58.360
that pip needs to do to be pip.


01:05:58.360 --> 01:06:01.080
- Yeah, probably make it a little more efficient,


01:06:01.080 --> 01:06:03.880
easier for other people to consume, right?


01:06:03.880 --> 01:06:04.720
- Yeah, yeah.


01:06:04.720 --> 01:06:07.120
- And is that something that you encourage


01:06:07.120 --> 01:06:11.600
other applications to go mess with PyPI APIs


01:06:11.600 --> 01:06:15.920
or is it it's public, but we'd rather you don't mess with it?


01:06:15.920 --> 01:06:16.920
What are your thoughts?


01:06:16.920 --> 01:06:19.080
>>So I'd say the stuff that we have standardized,


01:06:19.080 --> 01:06:20.720
definitely you can depend on it.


01:06:20.720 --> 01:06:22.240
It will continue to exist.


01:06:22.240 --> 01:06:25.440
And by standardizing it, we've said


01:06:25.440 --> 01:06:26.680
this is what you should expect.


01:06:26.680 --> 01:06:28.640
And unless we change the standard,


01:06:28.640 --> 01:06:30.480
that's what it's going to continue to do.


01:06:30.480 --> 01:06:32.480
We have other APIs that existed before we


01:06:32.480 --> 01:06:33.680
were standardizing stuff.


01:06:33.680 --> 01:06:35.480
There's a legacy JSON API.


01:06:35.480 --> 01:06:39.000
There's this XML RPC API that's such a nightmare to maintain.


01:06:39.000 --> 01:06:41.040
We've kept them running just because a lot of people


01:06:41.040 --> 01:06:43.620
and like, for example, Poetry uses this,


01:06:43.620 --> 01:06:46.400
like kind of our unofficial JSON API.


01:06:46.400 --> 01:06:49.840
And yeah, I mean, there's times when we need to do stuff


01:06:49.840 --> 01:06:51.860
to that because it like isn't scaling right,


01:06:51.860 --> 01:06:54.200
or there's trade-offs that we need to make.


01:06:54.200 --> 01:06:56.600
And it's like, well, like we're probably gonna have


01:06:56.600 --> 01:07:00.160
to break someone in order to like keep this afloat.


01:07:00.160 --> 01:07:01.940
But like with things like these standard APIs,


01:07:01.940 --> 01:07:03.920
like we've spent a lot of time designing them,


01:07:03.920 --> 01:07:04.980
planning them, standardize them,


01:07:04.980 --> 01:07:08.320
like those are definitely 100% cool to integrate against.


01:07:08.320 --> 01:07:09.880
- Okay, fantastic.


01:07:09.880 --> 01:07:12.600
Traditionally on these peps, you'll see it's accepted


01:07:12.600 --> 01:07:14.880
and planned for this version of Python.


01:07:14.880 --> 01:07:17.440
This one doesn't have that, right?


01:07:17.440 --> 01:07:20.120
'Cause it just goes against the web app, right?


01:07:20.120 --> 01:07:21.820
- Yeah, this is a packaging pep.


01:07:21.820 --> 01:07:24.200
So we use the same processes, CPython


01:07:24.200 --> 01:07:26.880
for their Python enhancements, but yeah,


01:07:26.880 --> 01:07:28.120
this is about packaging.


01:07:28.120 --> 01:07:31.640
So it doesn't necessarily tie to an individual Python.


01:07:31.640 --> 01:07:35.160
- You don't ship it to a binary that people get, right?


01:07:35.160 --> 01:07:37.360
- Well, in a way we do, like pip,


01:07:37.360 --> 01:07:38.720
ship support for it in a binary.


01:07:38.720 --> 01:07:41.320
So yeah, and it's implemented.


01:07:41.320 --> 01:07:43.400
Like this exists on PyPI now.


01:07:43.400 --> 01:07:44.600
Pip uses this now.


01:07:44.600 --> 01:07:47.080
- If I have the latest pip on my machine


01:07:47.080 --> 01:07:49.880
and I pip install something or do pip actions,


01:07:49.880 --> 01:07:51.440
which does it hit the old simple


01:07:51.440 --> 01:07:53.060
or does it hit this new one now?


01:07:53.060 --> 01:07:55.440
- If I'm remembering correctly,


01:07:55.440 --> 01:07:56.720
the support's been added to pip.


01:07:56.720 --> 01:07:58.600
It might not, I think it's been released.


01:07:58.600 --> 01:07:59.440
Yeah, I'm pretty sure.


01:07:59.440 --> 01:08:00.280
I could be wrong.


01:08:00.280 --> 01:08:02.160
I'm not a pip maintainer, but yeah.


01:08:02.160 --> 01:08:03.000
- Yeah, sure.


01:08:03.000 --> 01:08:03.820
Okay, cool.


01:08:03.820 --> 01:08:06.600
And we have one more to touch on.


01:08:06.600 --> 01:08:07.440
- Oh yeah.


01:08:07.440 --> 01:08:08.680
I mean, you only really care about this


01:08:08.680 --> 01:08:10.440
if you're really working with PyPI,


01:08:10.440 --> 01:08:12.120
but we're gonna have a new,


01:08:12.120 --> 01:08:13.840
like I said, we're standardizing all our APIs.


01:08:13.840 --> 01:08:16.720
So there's gonna be a new upload API.


01:08:16.720 --> 01:08:19.280
The existing upload API has a lot of problems.


01:08:19.280 --> 01:08:20.120
It's fairly old.


01:08:20.120 --> 01:08:21.920
It's essentially just a big post request


01:08:21.920 --> 01:08:23.480
with a ton of metadata in it.


01:08:23.480 --> 01:08:25.840
So this should be a little bit better


01:08:25.840 --> 01:08:28.440
and also enable things like draft releases


01:08:28.440 --> 01:08:30.720
where you can publish something to PyPI


01:08:30.720 --> 01:08:32.260
that's in draft state.


01:08:32.260 --> 01:08:34.720
You can review it, practice installing it


01:08:34.720 --> 01:08:36.560
before you actually publish it.


01:08:36.560 --> 01:08:38.600
And when it's in draft, it'll allow you to overwrite it.


01:08:38.600 --> 01:08:40.680
you know, like do things that we don't actually--


01:08:40.680 --> 01:08:42.080
- Fix the problem, yeah.


01:08:42.080 --> 01:08:43.480
- Yeah, yeah, exactly. - Okay.


01:08:43.480 --> 01:08:46.000
Is this an alternative replacement


01:08:46.000 --> 01:08:48.920
or just another safety net compared to say like


01:08:48.920 --> 01:08:52.200
the test PyPI versus production PyPI?


01:08:52.200 --> 01:08:55.700
- You mean like the draft stuff?


01:08:55.700 --> 01:08:56.540
Yeah, I think it would be--


01:08:56.540 --> 01:08:59.080
- Yeah, yeah, like would stuff automatically upload


01:08:59.080 --> 01:09:00.960
and draft and you gotta flip it


01:09:00.960 --> 01:09:03.080
so that you don't accidentally publish something


01:09:03.080 --> 01:09:04.560
that's not ready or?


01:09:04.560 --> 01:09:05.400
- Yeah. - 'Cause you forgot


01:09:05.400 --> 01:09:07.320
to use the test PyPI.


01:09:07.320 --> 01:09:09.440
- Yeah, yeah, test PyPI is kind of weird


01:09:09.440 --> 01:09:12.900
because it actually existed to be our test environment


01:09:12.900 --> 01:09:15.520
for PyPI, 'cause we didn't have a great test suite


01:09:15.520 --> 01:09:16.760
with the old PyPI.


01:09:16.760 --> 01:09:20.240
And now it sort of hangs around as a playground sandbox.


01:09:20.240 --> 01:09:21.640
We don't care.


01:09:21.640 --> 01:09:23.880
But yeah, some people do have it in their production,


01:09:23.880 --> 01:09:26.100
in their release flow, like upload here first,


01:09:26.100 --> 01:09:28.680
make sure that it works and then go to...


01:09:28.680 --> 01:09:30.920
So I think this will be a better use case


01:09:30.920 --> 01:09:34.360
and sort of consolidate folks to use PyPI for everything


01:09:34.360 --> 01:09:36.760
and we can eventually shut down test PyPI


01:09:36.760 --> 01:09:41.760
Because yeah, it's not as useful as it could be.


01:09:41.760 --> 01:09:42.960
>>Yeah, for sure.


01:09:42.960 --> 01:09:49.800
All right, well, I think that's probably all the time we


01:09:49.800 --> 01:09:51.880
got to talk about this.


01:09:51.880 --> 01:09:52.960
We could go on and on.


01:09:52.960 --> 01:09:54.880
We only touched on some of the stuff


01:09:54.880 --> 01:09:57.280
that we're thinking about talking about.


01:09:57.280 --> 01:10:01.960
But before we're done, maybe answer the final two questions.


01:10:01.960 --> 01:10:03.440
>>Yeah, so--


01:10:03.440 --> 01:10:05.320
>>Yeah, go ahead.


01:10:05.320 --> 01:10:06.800
- Yeah, yeah. - My favorite editor.


01:10:06.800 --> 01:10:09.520
- If you're gonna write some code, yeah, what editor do you use?


01:10:09.520 --> 01:10:11.560
- Yeah, I do almost everything in BI


01:10:11.560 --> 01:10:15.640
and have since I sort of started doing any kind of development work.


01:10:15.640 --> 01:10:19.680
That said, I kind of try to do as much as I can in the browser,


01:10:19.680 --> 01:10:21.600
in the GitHub UI.


01:10:21.600 --> 01:10:23.560
I get speed bumps there sometimes.


01:10:23.560 --> 01:10:26.400
It can't be quite as fast, but for little stuff,


01:10:26.400 --> 01:10:29.920
I kind of like seeing what I can do there.


01:10:29.920 --> 01:10:31.200
- Yeah, right on.


01:10:31.200 --> 01:10:33.680
Do you ever press the dot in GitHub?


01:10:33.680 --> 01:10:35.920
- Yeah, all the time, love the dot.


01:10:35.920 --> 01:10:37.720
- Yeah, the dot converts it to like


01:10:37.720 --> 01:10:39.560
a hosted VS Code basically.


01:10:39.560 --> 01:10:40.400
- Yep.


01:10:40.400 --> 01:10:42.640
- And then package you wanna give a shout out to?


01:10:42.640 --> 01:10:47.100
- So my biased answer to this is check out


01:10:47.100 --> 01:10:51.340
the SIG store package on PyPI and the pip-audit package.


01:10:51.340 --> 01:10:53.760
Those are both stuff that I've been working on,


01:10:53.760 --> 01:10:55.240
my team has been working on.


01:10:55.240 --> 01:10:56.800
I'm really proud of the way that they work


01:10:56.800 --> 01:10:58.720
and we're gonna be working on integrating those


01:10:58.720 --> 01:11:01.760
into like more use cases, more developer patterns.


01:11:01.760 --> 01:11:03.160
Check them out, like try them out.


01:11:03.160 --> 01:11:04.000
I'd love to get feedback on them.


01:11:04.000 --> 01:11:04.840
- Yeah, fantastic.


01:11:04.840 --> 01:11:07.160
And they seem to fill like a super big,


01:11:07.160 --> 01:11:10.040
a super important hole that sort of backfill


01:11:10.040 --> 01:11:13.680
some of the security and supply chain stability and so on.


01:11:13.680 --> 01:11:14.520
- Yep.


01:11:14.520 --> 01:11:15.840
And then I think my unbiased answer,


01:11:15.840 --> 01:11:18.400
I did want to give a shout out to the pip-tools,


01:11:18.400 --> 01:11:20.320
PIP-tools project on PyPI.


01:11:20.320 --> 01:11:22.920
That's maintained by the Jazz Band team.


01:11:22.920 --> 01:11:26.240
So that's just like a roving, revolving door of maintainers,


01:11:26.240 --> 01:11:28.480
but they do a good job of keeping it up and running.


01:11:28.480 --> 01:11:32.320
And it satisfies this really, I think, important use case


01:11:32.320 --> 01:11:35.120
that a lot of people don't do with their Python dependencies,


01:11:35.120 --> 01:11:38.280
which is like essentially allows you to compile


01:11:38.280 --> 01:11:40.280
your dependencies into a requirements file


01:11:40.280 --> 01:11:42.120
that has all the versions pinned,


01:11:42.120 --> 01:11:43.820
all the sub dependencies there,


01:11:43.820 --> 01:11:47.920
hashes, which is like, please like use PIPs hash checker,


01:11:47.920 --> 01:11:50.080
hash all your dependencies.


01:11:50.080 --> 01:11:51.480
It definitely protects you against


01:11:51.480 --> 01:11:53.360
another whole class of attacks.


01:11:53.360 --> 01:11:55.840
But yeah, pip-tools is great for that.


01:11:55.840 --> 01:11:57.160
I would love a future where that was part of pip.


01:11:57.160 --> 01:11:59.320
I don't know if that's gonna exist or not,


01:11:59.320 --> 01:12:01.920
up to maintain it, but yeah, it's super cool.


01:12:01.920 --> 01:12:05.960
I have switched to using pip-tools for all of my packages


01:12:05.960 --> 01:12:06.800
and I love it.


01:12:06.800 --> 01:12:07.640
It's fantastic.


01:12:07.640 --> 01:12:08.460
- Nice.


01:12:08.460 --> 01:12:09.300
Yeah, me too.


01:12:09.300 --> 01:12:10.140
We use it for PyPI.


01:12:10.140 --> 01:12:10.960
We use it for a bunch of other stuff.


01:12:10.960 --> 01:12:11.800
Yeah.


01:12:11.800 --> 01:12:12.620
- Indeed.


01:12:12.620 --> 01:12:13.460
All right, final call to action.


01:12:13.460 --> 01:12:14.720
People want to get more involved,


01:12:14.720 --> 01:12:18.620
maybe make their things more secure.


01:12:18.620 --> 01:12:21.680
- Yeah, I'd say call to action is go to


01:12:21.680 --> 01:12:24.560
pypi.org/security-key-giveaway.


01:12:24.560 --> 01:12:26.960
See if you're eligible as a critical maintainer


01:12:26.960 --> 01:12:27.840
for security keys.


01:12:27.840 --> 01:12:31.640
If not, please just turn on 2FA anyway while you're there


01:12:31.640 --> 01:12:34.160
as a maintainer, I'd really appreciate that.


01:12:34.160 --> 01:12:35.440
But yeah, I mean, I don't know,


01:12:35.440 --> 01:12:37.160
keep your eye on the security space.


01:12:37.160 --> 01:12:39.480
I think like there's a lot of interesting stuff happening,


01:12:39.480 --> 01:12:42.520
a lot of focus, a lot of resources going into it right now.


01:12:42.520 --> 01:12:45.760
It's a good time to like try and adopt


01:12:45.760 --> 01:12:47.760
some additional security,


01:12:47.760 --> 01:12:49.640
both to protect yourself, your users, everything.


01:12:49.640 --> 01:12:50.480
So yeah.


01:12:50.480 --> 01:12:52.920
- Yeah, I definitely second that.


01:12:52.920 --> 01:12:55.520
Dustin, thanks so much for coming and sharing all this.


01:12:55.520 --> 01:12:58.400
This has been great to talk about, get an insight


01:12:58.400 --> 01:12:59.880
in some of the ideas and thoughts


01:12:59.880 --> 01:13:01.120
behind all these decisions.


01:13:01.120 --> 01:13:02.120
It's great.


01:13:02.120 --> 01:13:03.120
>> Yeah, for sure, Michael.


01:13:03.120 --> 01:13:05.240
It's always really great to talk to you.


01:13:05.240 --> 01:13:06.240
So glad to be here.


01:13:06.240 --> 01:13:07.240
>> Yeah, you too.


01:13:07.240 --> 01:13:08.240
Thanks again.


01:13:08.240 --> 01:13:09.240
See ya.


01:13:09.240 --> 01:13:09.240
>> Yeah, see ya.


01:13:09.240 --> 01:13:14.240
Bye.

