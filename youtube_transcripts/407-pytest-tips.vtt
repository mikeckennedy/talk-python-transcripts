WEBVTT

00:00:00.000 --> 00:00:03.360
- Hello, hello everyone.


00:00:03.360 --> 00:00:04.200
Hello, Brian.


00:00:04.200 --> 00:00:05.280
- Hey.


00:00:05.280 --> 00:00:08.480
- Hey, happy to have you here on the other channel


00:00:08.480 --> 00:00:09.840
on Talk Python.


00:00:09.840 --> 00:00:10.920
- Yeah.


00:00:10.920 --> 00:00:12.000
- Been here many times,


00:00:12.000 --> 00:00:14.560
but I don't know, have you been on the StreamYard


00:00:14.560 --> 00:00:16.040
live stream variation?


00:00:16.040 --> 00:00:18.440
- I don't think I've been on a live episode yet.


00:00:18.440 --> 00:00:19.280
No.


00:00:19.280 --> 00:00:21.240
- Yes, but if there's anyone who I've done a lot


00:00:21.240 --> 00:00:24.000
of StreamYard live stream stuff with, it's you.


00:00:24.000 --> 00:00:26.520
- Yeah, every week.


00:00:26.520 --> 00:00:28.920
- Exactly, so for those of you who are all here,


00:00:28.920 --> 00:00:32.080
Thanks for being here, comments and stuff in the live chat.


00:00:32.080 --> 00:00:33.400
We'll try to make it part of the show.


00:00:33.400 --> 00:00:35.200
I'll send them over to Brian.


00:00:35.200 --> 00:00:37.520
And with that, let's kick it off, huh?


00:00:37.520 --> 00:00:38.360
- Yeah.


00:00:38.360 --> 00:00:42.720
- Brian, welcome back to Talk Python To Me.


00:00:42.720 --> 00:00:43.560
- Well, thank you.


00:00:43.560 --> 00:00:44.880
It's good to be back.


00:00:44.880 --> 00:00:46.320
- It's really good to have you back.


00:00:46.320 --> 00:00:47.640
I don't know if you've noticed,


00:00:47.640 --> 00:00:50.400
but over on Talk Python, I put up a guest page


00:00:50.400 --> 00:00:55.480
and who is out of the 440 guests we've had,


00:00:55.480 --> 00:00:57.240
you are the most common guest


00:00:57.240 --> 00:01:00.200
and you are now pulling further away


00:01:00.200 --> 00:01:02.040
from Brett Cannon and Anthony Shaw,


00:01:02.040 --> 00:01:03.460
who are hot on your tails there.


00:01:03.460 --> 00:01:07.680
So I'm sure people know you and are familiar with your work,


00:01:07.680 --> 00:01:11.280
but for those who don't, quick introduction.


00:01:11.280 --> 00:01:13.160
- Well, I probably give,


00:01:13.160 --> 00:01:16.200
people probably know me from Python Bytes actually.


00:01:16.200 --> 00:01:20.520
And also I have a podcast called Test & Code


00:01:20.520 --> 00:01:22.720
that's kind of on pause right now,


00:01:22.720 --> 00:01:24.820
but it'll start up again in a month or so.


00:01:25.960 --> 00:01:30.880
And then, but, okay, so I am a software developer,


00:01:30.880 --> 00:01:34.040
mostly embedded as, so day job, software,


00:01:34.040 --> 00:01:39.040
embedded to C++ stuff, work with RF test equipment.


00:01:39.040 --> 00:01:44.040
But I got involved with Python and pytest


00:01:44.040 --> 00:01:48.960
around the testing part of that, the system level testing.


00:01:48.960 --> 00:01:51.200
And then I started writing about pytest


00:01:51.200 --> 00:01:53.960
and about test stuff, and then I started podcasting about it,


00:01:53.960 --> 00:01:55.740
and then I started writing books about it


00:01:55.740 --> 00:01:56.660
and all that sort of stuff.


00:01:56.660 --> 00:02:00.540
So all of this came from me


00:02:00.540 --> 00:02:02.300
and my love for Python and pytest


00:02:02.300 --> 00:02:04.740
came from my embedded world.


00:02:04.740 --> 00:02:05.660
So that's me.


00:02:05.660 --> 00:02:07.860
- Yeah, I suspect a lot of people


00:02:07.860 --> 00:02:09.840
don't really think about it that often,


00:02:09.840 --> 00:02:12.600
but Python is great for testing things


00:02:12.600 --> 00:02:16.380
that is not just other Python code.


00:02:16.380 --> 00:02:18.140
- Yeah, I mean, there's a lot of people that like,


00:02:18.140 --> 00:02:20.580
for instance, use it even to test websites


00:02:20.580 --> 00:02:22.540
that are not written in Python,


00:02:22.540 --> 00:02:24.340
just because, or not written, yeah,


00:02:24.340 --> 00:02:26.660
not written in Python or not written,


00:02:26.660 --> 00:02:29.140
like you can test Go, you can really test any website.


00:02:29.140 --> 00:02:31.860
So if you can get access to it from Python,


00:02:31.860 --> 00:02:33.980
you can test it with pytest.


00:02:33.980 --> 00:02:36.020
- Right on, and we're gonna see a whole bunch


00:02:36.020 --> 00:02:40.140
of cool tips and tricks and ideas


00:02:40.140 --> 00:02:43.660
about how to do that with pytest and do it better.


00:02:43.660 --> 00:02:46.820
'Cause as you said, you've been using it in your day job.


00:02:46.820 --> 00:02:51.280
You've also been using it in a semi non-standard way, right?


00:02:51.280 --> 00:02:55.580
like testing both C++ code and actual hardware,


00:02:55.580 --> 00:02:56.900
which is pretty awesome.


00:02:56.900 --> 00:02:58.060
And you've got a lot of exposure


00:02:58.060 --> 00:02:59.420
through your book and other things.


00:02:59.420 --> 00:03:00.740
So it's gonna be really fun.


00:03:00.740 --> 00:03:03.420
- I also wanted to say that early on,


00:03:03.420 --> 00:03:07.060
so getting started with podcasting is nerve wracking.


00:03:07.060 --> 00:03:08.540
It's a stressful thing.


00:03:08.540 --> 00:03:09.740
And way back when,


00:03:09.740 --> 00:03:12.500
when I was just starting out on testing code,


00:03:12.500 --> 00:03:15.740
you were very encouraging


00:03:15.740 --> 00:03:20.700
and wanted me to be successful and keep going.


00:03:20.700 --> 00:03:24.700
And that meant a lot, so thank you.


00:03:24.700 --> 00:03:26.300
- No, thank you for saying that here on the show.


00:03:26.300 --> 00:03:27.140
I really appreciate it.


00:03:27.140 --> 00:03:32.060
And five, six years later, however long it's been,


00:03:32.060 --> 00:03:33.380
you're still going for sure.


00:03:33.380 --> 00:03:36.780
I mean, tomorrow we're doing another show on Python Bytes.


00:03:36.780 --> 00:03:38.900
- Yeah, it's been great.


00:03:38.900 --> 00:03:40.060
- Yeah, thanks.


00:03:40.060 --> 00:03:42.100
All right, and I guess I did wanna give a shout out


00:03:42.100 --> 00:03:42.940
to Python Bytes.


00:03:42.940 --> 00:03:44.840
I don't speak about it that often on Talk Python,


00:03:44.840 --> 00:03:45.740
every now and then I do,


00:03:45.740 --> 00:03:47.660
but usually I'm speaking to guests


00:03:47.660 --> 00:03:49.280
who maybe are not familiar with it.


00:03:49.280 --> 00:03:51.140
but that's the show you and I do.


00:03:51.140 --> 00:03:52.420
And so I really want to encourage people


00:03:52.420 --> 00:03:55.240
who like the show to also check that one out.


00:03:55.240 --> 00:03:58.840
Tell people what Python Bytes is real quick, Brian.


00:03:58.840 --> 00:04:01.920
- Well, it's Python headlines,


00:04:01.920 --> 00:04:05.940
news and headlines delivered directly to your earbuds.


00:04:05.940 --> 00:04:07.040
But the gist of it is,


00:04:07.040 --> 00:04:11.520
is we both pick a couple topics per week


00:04:11.520 --> 00:04:14.300
and we don't even really talk about it ahead of time.


00:04:14.300 --> 00:04:16.720
We just pick a couple of Python related topics


00:04:16.720 --> 00:04:18.280
that we want to talk about


00:04:18.280 --> 00:04:20.920
and could be like a new library,


00:04:20.920 --> 00:04:24.920
could be an old library or a tool or a blog post


00:04:24.920 --> 00:04:27.800
or something happening in the news.


00:04:27.800 --> 00:04:30.560
And then we just talk about it for a few minutes.


00:04:30.560 --> 00:04:32.760
And then the other one asks questions.


00:04:32.760 --> 00:04:35.760
And when we have guests on, they come in too.


00:04:35.760 --> 00:04:37.160
One of the things I really like about it


00:04:37.160 --> 00:04:38.480
is it's always fresh.


00:04:38.480 --> 00:04:42.760
And then also that people have said,


00:04:42.760 --> 00:04:44.640
if a topic I'm not interested in,


00:04:44.640 --> 00:04:45.880
I just wait a few minutes


00:04:45.880 --> 00:04:48.000
and there'll be something else I can listen to.


00:04:48.000 --> 00:04:49.260
So that's cool.


00:04:49.260 --> 00:04:50.700
- Exactly, that's really fantastic


00:04:50.700 --> 00:04:52.620
that it's just, it's always something new.


00:04:52.620 --> 00:04:54.580
And, you know, it's great for us.


00:04:54.580 --> 00:04:56.500
We are always on top of things, always learning,


00:04:56.500 --> 00:04:59.780
but it's, I think it's really cool way to stay on top


00:04:59.780 --> 00:05:01.540
of what's happening in the Python space.


00:05:01.540 --> 00:05:02.800
- Yeah, and for me personally,


00:05:02.800 --> 00:05:04.660
it's an excuse to stay on top of things


00:05:04.660 --> 00:05:05.540
in the Python space.


00:05:05.540 --> 00:05:07.480
So, yeah.


00:05:07.480 --> 00:05:10.340
- Not just an excuse, a requirement.


00:05:10.340 --> 00:05:13.680
You got to be on the microphone in two hours.


00:05:13.680 --> 00:05:14.820
We're going to figure it out.


00:05:14.820 --> 00:05:16.660
Yeah, awesome.


00:05:16.660 --> 00:05:20.300
All right, now, also, I do want to point out


00:05:20.300 --> 00:05:22.740
that over on Talk Python Training,


00:05:22.740 --> 00:05:24.220
you did a really great course


00:05:24.220 --> 00:05:26.520
calling Getting Started with pytest,


00:05:26.520 --> 00:05:28.940
and people can check that out,


00:05:28.940 --> 00:05:31.540
as well as for a couple years now,


00:05:31.540 --> 00:05:33.220
you've iterated on your book,


00:05:33.220 --> 00:05:37.060
Python Testing with pytest, onto the second edition.


00:05:37.060 --> 00:05:38.900
So those are two really good resources.


00:05:38.900 --> 00:05:40.980
I feel like you're probably gonna be drawing from


00:05:40.980 --> 00:05:42.980
for some of these tips, right?


00:05:42.980 --> 00:05:44.000
- Yeah, definitely.


00:05:44.000 --> 00:05:48.700
And so the first book launched into having the ability


00:05:48.700 --> 00:05:51.060
to be able to teach more people.


00:05:51.060 --> 00:05:53.180
So I was able to teach other corporate people


00:05:53.180 --> 00:05:54.540
and individuals.


00:05:54.540 --> 00:05:59.540
And then I took that learning from like how to teach people


00:05:59.540 --> 00:06:03.660
how to use pytest and use that to influence


00:06:03.660 --> 00:06:06.300
the second edition, complete rewrite.


00:06:06.300 --> 00:06:08.900
And then took all of that and leveraged it


00:06:08.900 --> 00:06:11.640
into the short three, it's like three and a half hours.


00:06:11.640 --> 00:06:13.180
It's really short for the getting started


00:06:13.180 --> 00:06:14.700
with pytest course.


00:06:14.700 --> 00:06:18.940
And I really kind of like what we've done with that.


00:06:18.940 --> 00:06:21.540
You helped out a lot with that course as well.


00:06:21.540 --> 00:06:25.060
- Yeah, I feel, I look back on my college career,


00:06:25.060 --> 00:06:26.260
I don't know how you feel about this, Brian,


00:06:26.260 --> 00:06:28.300
but I look back and think, you know,


00:06:28.300 --> 00:06:29.580
a lot of times there's sort of the meme,


00:06:29.580 --> 00:06:31.660
like that could have been an email for a meeting these days.


00:06:31.660 --> 00:06:35.260
Like, I kind of feel that way about college.


00:06:35.260 --> 00:06:37.420
Like a lot of stuff I did in college could have been,


00:06:37.420 --> 00:06:38.460
it could have been four hours.


00:06:38.460 --> 00:06:39.700
I could have been a four hour course


00:06:39.700 --> 00:06:41.020
that I spent a week on, but no,


00:06:41.020 --> 00:06:43.220
I spent a whole semester and you know.


00:06:43.220 --> 00:06:44.780
- Yeah, exactly.


00:06:44.780 --> 00:06:45.620
- Yeah.


00:06:45.620 --> 00:06:46.740
- You feel the same way looking back?


00:06:46.740 --> 00:06:48.380
(laughing)


00:06:48.380 --> 00:06:49.340
- I do.


00:06:49.340 --> 00:06:51.820
And yeah, there's a lot of stuff that I'm like,


00:06:51.820 --> 00:06:52.700
wow, that could have been,


00:06:52.700 --> 00:06:55.500
that could have been like even a half an hour course.


00:06:55.500 --> 00:06:57.860
Just, yeah.


00:06:57.860 --> 00:06:58.780
- Yeah, yeah, exactly.


00:06:58.780 --> 00:07:00.900
So I feel like you've condensed it down really well here.


00:07:00.900 --> 00:07:02.220
So people can check out the course


00:07:02.220 --> 00:07:05.560
and they can check out the book as well.


00:07:05.560 --> 00:07:08.620
So a lot of kind comments in the audience as well.


00:07:08.620 --> 00:07:09.460
I'm seeing through your book.


00:07:09.460 --> 00:07:10.780
So thank you folks.


00:07:10.780 --> 00:07:12.160
Nice.


00:07:12.160 --> 00:07:16.920
- Yeah, well, I guess I envisioned us


00:07:16.920 --> 00:07:18.580
to kind of talk about this as a podcast,


00:07:18.580 --> 00:07:20.580
but you leveled this up a little bit here.


00:07:20.580 --> 00:07:22.900
You took this and put it together as an article.


00:07:22.900 --> 00:07:24.580
So people will be able to come back to it, right?


00:07:24.580 --> 00:07:27.620
This whole idea of these tips and tricks.


00:07:27.620 --> 00:07:29.340
- Well, I wanted to, yes,


00:07:29.340 --> 00:07:32.340
'cause we were bouncing around ideas for what to do.


00:07:32.340 --> 00:07:37.020
And you mentioned like maybe some tips and tricks


00:07:37.020 --> 00:07:42.020
from the course and pull them together as a episode.


00:07:42.020 --> 00:07:44.880
And I'm like, you know what, I haven't ever done that.


00:07:44.880 --> 00:07:46.420
So I pulled together a blog post


00:07:46.420 --> 00:07:47.820
called pytest Tips and Tricks.


00:07:47.820 --> 00:07:51.700
And it is a blog post, but it's at pythontest.com.


00:07:51.700 --> 00:07:53.900
But I do want to keep it going.


00:07:53.900 --> 00:07:56.580
So I'll probably, some of these topics,


00:07:56.580 --> 00:07:58.060
I'll probably bring into,


00:07:58.060 --> 00:08:01.420
create full articles out of them.


00:08:01.420 --> 00:08:05.500
And some of them are just as good as is things.


00:08:05.500 --> 00:08:07.260
- It's a living blog post.


00:08:07.260 --> 00:08:08.580
- Yes.


00:08:08.580 --> 00:08:09.900
And you started it.


00:08:09.900 --> 00:08:12.760
So there was a bunch of the,


00:08:12.760 --> 00:08:15.420
you started a document that had some of the stuff


00:08:15.420 --> 00:08:16.260
that you pulled out.


00:08:16.260 --> 00:08:17.580
I don't know where you got all this,


00:08:17.580 --> 00:08:19.340
these stuff that you started from.


00:08:19.340 --> 00:08:20.940
- I went through your course.


00:08:20.940 --> 00:08:22.100
I paid attention.


00:08:22.100 --> 00:08:23.180
- Nice.


00:08:23.180 --> 00:08:24.500
So, cool.


00:08:24.500 --> 00:08:25.340
- No, it's good.


00:08:25.340 --> 00:08:27.860
There's a lot of, you know, for a,


00:08:27.860 --> 00:08:29.780
like a getting started sort of story,


00:08:29.780 --> 00:08:32.060
there's a lot of really good tips that I think are,


00:08:32.060 --> 00:08:33.940
are useful for a lot of folks.


00:08:33.940 --> 00:08:34.780
All right.


00:08:34.780 --> 00:08:37.240
you know, let's jump in there. You've broken into these


00:08:37.240 --> 00:08:42.040
different areas. And let's maybe I'll kick it over to your screen


00:08:42.040 --> 00:08:45.280
for you to Okay, yeah, but yeah, let's kick it off.


00:08:45.280 --> 00:08:52.960
Yeah, so the I want to start out really with with one of the


00:08:52.960 --> 00:08:57.160
things that it's so simple to start pytest. So they like the


00:08:57.160 --> 00:09:01.240
like, and I think a lot of people get into it. So it's


00:09:01.240 --> 00:09:06.760
really simple and easy to use. If you to start with, you can just write a file called test


00:09:06.760 --> 00:09:12.680
underscore something and then stick a function in it called test underscore something and


00:09:12.680 --> 00:09:17.320
that pytest will run that and if you can access whatever you can access with that, you can


00:09:17.320 --> 00:09:23.360
get started and I think it's it's it's a really cool feature of pytest that you can get started


00:09:23.360 --> 00:09:29.960
that easily, but also I don't think very many people like learn too much more. They'll like


00:09:29.960 --> 00:09:32.660
look up, they'll like, somebody will mention fixtures.


00:09:32.660 --> 00:09:34.640
So they'll look that up or parameterization.


00:09:34.640 --> 00:09:35.240
They'll look that up.


00:09:35.240 --> 00:09:37.600
Probably they'll say, how do you catch an exception?


00:09:37.600 --> 00:09:39.320
This is supposed to be an exception.


00:09:39.320 --> 00:09:40.400
Like, how do I do that?


00:09:40.400 --> 00:09:42.920
And maybe, yeah, I'm going to say that part.


00:09:42.920 --> 00:09:43.560
Sorry.


00:09:43.560 --> 00:09:46.240
I got to say that part, that aspect of it confused me a little


00:09:46.240 --> 00:09:47.600
bit when I first did PI test.


00:09:47.600 --> 00:09:52.440
I'm like, well, how, how do I make it do PI test things?


00:09:52.440 --> 00:09:54.280
I just, it's a, it's just a file.


00:09:54.280 --> 00:09:57.640
And then there I sure I can do Python asserts, but how do I do.


00:09:58.200 --> 00:10:01.320
like tell pytest is supposed to be greater than seven or not.


00:10:01.320 --> 00:10:05.820
Yeah, a lot of sort of implicit magic behind the scenes as part of that, right?


00:10:05.820 --> 00:10:08.060
Yeah, there is.


00:10:08.060 --> 00:10:12.800
And I like, for instance, just using normal asserts, because with like unit


00:10:12.800 --> 00:10:17.100
tests, you have to do a whole bunch of extra assert methods and helper methods


00:10:17.100 --> 00:10:18.900
and stuff, and you have to derive with unit.


00:10:18.900 --> 00:10:22.960
And it's it's often people coming from unit test or some other X unit style


00:10:22.960 --> 00:10:27.500
that are confused at the simplicity because people are used to deriving


00:10:27.500 --> 00:10:29.840
from a test class or something.


00:10:29.840 --> 00:10:33.440
And then I actually had saw the reverse of it.


00:10:33.440 --> 00:10:36.820
I saw people that were not used to X unit style.


00:10:36.820 --> 00:10:38.780
They just wanted to write some test code.


00:10:38.780 --> 00:10:41.860
And this whole notion on the unit test


00:10:41.860 --> 00:10:45.000
of deriving from a class,


00:10:45.000 --> 00:10:47.860
I saw a whole bunch of people that I tried to teach


00:10:47.860 --> 00:10:49.760
at unit test to say,


00:10:49.760 --> 00:10:51.800
oh, well, I'm gonna have to go and learn about


00:10:51.800 --> 00:10:54.520
like object oriented programming.


00:10:54.520 --> 00:10:55.720
And I'm like, oh, you don't.


00:10:55.720 --> 00:10:58.120
It's just the structure, that's all.


00:10:58.120 --> 00:11:00.240
You don't need to know how to use it.


00:11:00.240 --> 00:11:01.600
But so that's one of the nice things.


00:11:01.600 --> 00:11:04.560
So I have on the screen just a simple test.


00:11:04.560 --> 00:11:06.520
I've also had a lot of people ask me,


00:11:06.520 --> 00:11:07.800
well, can you give me a template


00:11:07.800 --> 00:11:11.240
for what a default template for a unit test or a test?


00:11:11.240 --> 00:11:13.960
And I'm like, well, it's just test underscore.


00:11:13.960 --> 00:11:15.520
That's your template.


00:11:15.520 --> 00:11:19.640
I mean, there's nothing to put in it.


00:11:19.640 --> 00:11:25.160
So I've said, okay, for my template,


00:11:25.160 --> 00:11:27.920
you get at the top of your test, you're right.


00:11:27.920 --> 00:11:31.840
Getting ready for like a comment that's like getting ready


00:11:31.840 --> 00:11:33.800
for set up or something.


00:11:33.800 --> 00:11:36.320
And then you set up all the stuff


00:11:36.320 --> 00:11:38.480
and then you do an action in the middle.


00:11:38.480 --> 00:11:42.200
And then at the end you assert what if the action worked


00:11:42.200 --> 00:11:45.400
and there you go, there's a template.


00:11:45.400 --> 00:11:49.840
- There's two traditional styles of structuring this.


00:11:49.840 --> 00:11:53.160
The early testing days where the three A's


00:11:53.160 --> 00:11:56.400
the arrange act in a shirt, which is kind of a little bit


00:11:56.400 --> 00:11:57.960
like what you got here.


00:11:57.960 --> 00:12:00.680
And then there's the given when then,


00:12:00.680 --> 00:12:04.240
which I feel like a little more BDD world.


00:12:04.240 --> 00:12:08.480
- Yeah, so I learned given when then


00:12:08.480 --> 00:12:12.780
with when some of the early writings around BDD,


00:12:12.780 --> 00:12:13.720
and I just liked it.


00:12:13.720 --> 00:12:17.680
I liked the notion of like, oh, given some state,


00:12:17.680 --> 00:12:22.320
if I do that, when I do something, then something happens


00:12:22.320 --> 00:12:24.360
and I can test that something.


00:12:24.360 --> 00:12:26.360
Now there wasn't any structure around it.


00:12:26.360 --> 00:12:27.200
There wasn't any code.


00:12:27.200 --> 00:12:30.960
So now BDD has these Gherkin syntaxes and stuff.


00:12:30.960 --> 00:12:33.520
And for people that that works for, awesome.


00:12:33.520 --> 00:12:34.860
It just doesn't work for me.


00:12:34.860 --> 00:12:38.040
But the notion of behavior-driven development,


00:12:38.040 --> 00:12:40.640
not the syntax, but the notion of,


00:12:40.640 --> 00:12:42.600
think about the different behaviors of the system


00:12:42.600 --> 00:12:45.040
and test for it, that I love.


00:12:45.040 --> 00:12:48.320
But the given when then and arrange active search


00:12:48.320 --> 00:12:49.720
essentially the same thing.


00:12:49.720 --> 00:12:50.840
But anyway.


00:12:50.840 --> 00:12:53.400
Do you feel like the nomenclature of BDD


00:12:53.400 --> 00:12:56.280
maybe hampered its adoption?


00:12:56.280 --> 00:12:59.640
Like talking about like cucumber and gherkin


00:12:59.640 --> 00:13:02.240
and you go to your boss and say,


00:13:02.240 --> 00:13:04.600
"We're working on the gherkin fathering.


00:13:04.600 --> 00:13:06.880
I mean, you need to do real work."


00:13:06.880 --> 00:13:09.360
- I think, I don't wanna be a pessimist,


00:13:09.360 --> 00:13:11.140
but I really think what happened,


00:13:11.140 --> 00:13:15.920
my guess is that it's such a simple concept


00:13:15.920 --> 00:13:20.260
that there wasn't hardly anything to charge people for


00:13:20.260 --> 00:13:21.760
as a consultant.


00:13:21.760 --> 00:13:22.600
So--


00:13:22.600 --> 00:13:24.520
- Yeah, or to give speeches and conference talks about


00:13:24.520 --> 00:13:25.700
or whatever, right?


00:13:25.700 --> 00:13:29.400
- Yeah, but if you add like this extra Gherkin layer


00:13:29.400 --> 00:13:30.240
on top of it,


00:13:30.240 --> 00:13:32.640
now you have something you can train people about.


00:13:32.640 --> 00:13:35.220
- There you go.


00:13:35.220 --> 00:13:38.780
Way to productize it.


00:13:38.780 --> 00:13:39.620
- Maybe.


00:13:39.620 --> 00:13:44.020
But so I think it's all good, just don't pay for it.


00:13:44.020 --> 00:13:46.420
- Before we move on from this topic,


00:13:46.420 --> 00:13:48.700
I think the arrange act assert


00:13:48.700 --> 00:13:51.640
or the given when then is a really nice way


00:13:51.640 --> 00:13:52.480
to think about it.


00:13:52.480 --> 00:13:55.520
But I think there's still a large set of folks


00:13:55.520 --> 00:13:59.700
who struggle to know what scale should this be?


00:13:59.700 --> 00:14:03.360
Should I do 15 asserts?


00:14:03.360 --> 00:14:05.320
I've done all the work to get them ready.


00:14:05.320 --> 00:14:06.280
Should I do one assert?


00:14:06.280 --> 00:14:07.960
If I do two, am I failing?


00:14:07.960 --> 00:14:10.000
I was supposed to do one, now two is the wrong,


00:14:10.000 --> 00:14:11.680
you know, it's too many.


00:14:11.680 --> 00:14:14.440
How do you feel about what goes


00:14:14.440 --> 00:14:16.800
under those three comment sections?


00:14:16.800 --> 00:14:19.320
I'm glad you brought that up.


00:14:19.320 --> 00:14:24.080
So really the one action should be like one function call


00:14:24.080 --> 00:14:26.840
or one method call or something,


00:14:26.840 --> 00:14:28.560
if you can get away with that.


00:14:28.560 --> 00:14:31.340
And the getting ready stuff,


00:14:31.340 --> 00:14:36.800
it could be a lot, especially for the first time.


00:14:36.800 --> 00:14:41.800
So one comment, dollar-driven development, that's funny.


00:14:41.800 --> 00:14:42.640
- That's funny.


00:14:42.640 --> 00:14:49.860
We're gonna get to fixtures later,


00:14:49.860 --> 00:14:52.800
but I think it's okay if it's a whole bunch of setup.


00:14:52.800 --> 00:14:55.360
So it could be like a ton of setup that you have,


00:14:55.360 --> 00:14:57.080
like most of your code of your function


00:14:57.080 --> 00:14:59.360
might be getting ready to test something.


00:14:59.360 --> 00:15:01.840
And especially for the first iteration of the test,


00:15:01.840 --> 00:15:03.240
that's fine, I think.


00:15:03.240 --> 00:15:05.800
And then, but, and that's where it's good to have comments


00:15:05.800 --> 00:15:08.360
or a comment, even like a very visible comment block


00:15:08.360 --> 00:15:10.000
with a bunch of lines and stuff like that


00:15:10.000 --> 00:15:12.080
to separate the different parts.


00:15:12.080 --> 00:15:14.660
As far as the asserts, there's a lot of people that think


00:15:14.660 --> 00:15:16.720
like you have to do just one assert


00:15:16.720 --> 00:15:18.520
and you're failing as a developer


00:15:18.520 --> 00:15:19.960
if you do more than one assert.


00:15:19.960 --> 00:15:22.700
And I think that's not true.


00:15:22.700 --> 00:15:25.160
There's problems with doing more than one assert,


00:15:25.160 --> 00:15:28.120
but if you're, am I doing an action


00:15:28.120 --> 00:15:30.760
and if there's like several things I have to test


00:15:30.760 --> 00:15:33.800
about whether or not the action is right,


00:15:33.800 --> 00:15:36.020
like in my world with the RF systems,


00:15:37.840 --> 00:15:40.760
I'm setting up a signal and I'm measuring a signal.


00:15:40.760 --> 00:15:45.400
Now, what is the, if I, to test that I got the right signal


00:15:45.400 --> 00:15:48.120
at the end, I might be testing the power level


00:15:48.120 --> 00:15:50.800
and the burst width and the burst length.


00:15:50.800 --> 00:15:53.780
Then I might be testing a whole bunch of stuff around it.


00:15:53.780 --> 00:15:56.440
And yes, I could separate those all into different tests,


00:15:56.440 --> 00:15:58.160
but if it's really just,


00:15:58.160 --> 00:16:01.360
it's really conceptually the same thing,


00:16:01.360 --> 00:16:03.480
I think it's fine to have multiple asserts.


00:16:03.480 --> 00:16:04.480
But if you really don't want to,


00:16:04.480 --> 00:16:07.040
there's ways to get around not doing multiple asserts.


00:16:07.040 --> 00:16:09.280
use semicolons a lot of ands?


00:16:09.280 --> 00:16:11.400
- Well, you can, like you can stick like a whole,


00:16:11.400 --> 00:16:13.400
like for Booleans, for instance,


00:16:13.400 --> 00:16:15.840
if you had like six Booleans you were testing,


00:16:15.840 --> 00:16:17.880
you could stick those in a list


00:16:17.880 --> 00:16:22.880
and compare the list to a list of expected Booleans.


00:16:22.880 --> 00:16:26.400
- Sure, you could, I mean, you're kind of like saying like,


00:16:26.400 --> 00:16:27.440
how can we draw this out?


00:16:27.440 --> 00:16:28.880
But there are legitimate ways,


00:16:28.880 --> 00:16:32.360
like you could use the any iterator type of thing,


00:16:32.360 --> 00:16:33.760
or you could use the all, say,


00:16:33.760 --> 00:16:35.920
all of these things have to pass this,


00:16:35.920 --> 00:16:40.440
or if any of them fail, then that's a certain not any,


00:16:40.440 --> 00:16:41.400
something like that, right?


00:16:41.400 --> 00:16:42.240
- Yeah.


00:16:42.240 --> 00:16:45.680
Yeah, and one of the problems of not doing that


00:16:45.680 --> 00:16:49.740
is that your test stops at the first failure.


00:16:49.740 --> 00:16:53.620
So, and if that's a problem, and sometimes it is,


00:16:53.620 --> 00:16:57.800
you really do wanna see the entire state of all of the,


00:16:57.800 --> 00:16:59.280
because it might help you debug it.


00:16:59.280 --> 00:17:03.360
Like, oh, this, like the, I returned a,


00:17:03.360 --> 00:17:06.480
the return code of a webpage was like 400


00:17:06.480 --> 00:17:08.880
and I expect it to be 200.


00:17:08.880 --> 00:17:09.720
But you might wanna do--


00:17:09.720 --> 00:17:11.000
- If you could see the message,


00:17:11.000 --> 00:17:12.280
you would be so much better.


00:17:12.280 --> 00:17:13.640
- Yeah, if you could see more


00:17:13.640 --> 00:17:16.260
or if you're testing the title and that's wrong,


00:17:16.260 --> 00:17:18.680
but you know what I mean?


00:17:18.680 --> 00:17:21.580
If you can see more than one bit of information, it helps.


00:17:21.580 --> 00:17:24.600
- Yep.


00:17:24.600 --> 00:17:27.160
Now I think that's also to be differentiated


00:17:27.160 --> 00:17:30.160
as we'll get to later and some other tips from,


00:17:30.160 --> 00:17:32.940
well, there's different cases like,


00:17:32.940 --> 00:17:35.740
What if I pass it a zero and I pass it a 10


00:17:35.740 --> 00:17:38.060
or something above a hundred, all these different inputs,


00:17:38.060 --> 00:17:40.900
and then I want to test every, that's a different story.


00:17:40.900 --> 00:17:41.740
- Oh yeah.


00:17:41.740 --> 00:17:43.420
- Right, right, so we'll get to that.


00:17:43.420 --> 00:17:44.960
All right, what's next?


00:17:44.960 --> 00:17:47.660
- Well, I wanted to, since we're talking


00:17:47.660 --> 00:17:49.660
about structuring a test function,


00:17:49.660 --> 00:17:52.300
I thought it'd be great to just remind people


00:17:52.300 --> 00:17:53.660
that you have a whole suite.


00:17:53.660 --> 00:17:57.380
So it's good to function, to think about


00:17:57.380 --> 00:17:59.980
how you're structuring your whole test suite.


00:17:59.980 --> 00:18:03.060
And by test suite, I just mean a directory of stuff


00:18:03.060 --> 00:18:04.900
that has tests in it.


00:18:04.900 --> 00:18:07.580
You can, being pytest allows you to have your tests


00:18:07.580 --> 00:18:09.220
interspersed with your code,


00:18:09.220 --> 00:18:10.740
but I haven't seen that for a long time.


00:18:10.740 --> 00:18:14.340
A lot of people just have really a tests directory


00:18:14.340 --> 00:18:15.800
and that's what I'm used to.


00:18:15.800 --> 00:18:19.700
Anyway, or a couple, a couple of directories.


00:18:19.700 --> 00:18:22.420
Like I often have an examples directory that I want,


00:18:22.420 --> 00:18:25.300
I wanna make sure all those examples still work


00:18:25.300 --> 00:18:26.820
like for pytest plugins.


00:18:26.820 --> 00:18:30.100
And I also want to have the tests themselves pass.


00:18:30.100 --> 00:18:33.100
But anyway, structuring the test directory is good.


00:18:33.100 --> 00:18:36.100
There's a bunch of ways to do it.


00:18:36.100 --> 00:18:40.680
I like to separate based on functionality.


00:18:40.680 --> 00:18:45.140
So different behaviors of a system


00:18:45.140 --> 00:18:49.140
and conceptual separations of the system


00:18:49.140 --> 00:18:50.940
into different functionality bits


00:18:50.940 --> 00:18:52.700
and separate those into directories.


00:18:53.580 --> 00:18:57.620
You can also structure it based on like sub actual software


00:18:57.620 --> 00:19:00.100
subsystems in your software.


00:19:00.100 --> 00:19:02.380
And then some people do like the same code structure.


00:19:02.380 --> 00:19:04.860
So they have like the exact same directory structure


00:19:04.860 --> 00:19:07.900
in their tests as they do in their source code.


00:19:07.900 --> 00:19:09.580
But I think just thinking,


00:19:09.580 --> 00:19:11.940
making sure you think about it and don't just,


00:19:11.940 --> 00:19:13.820
no, don't just think there's one answer.


00:19:13.820 --> 00:19:16.260
It's really how you wanna run the tests.


00:19:16.260 --> 00:19:17.900
And it helps me if I'm,


00:19:17.900 --> 00:19:20.580
like if I'm working on a behavior or sub,


00:19:20.580 --> 00:19:23.620
if you're normally working on a subsystem at that level,


00:19:23.620 --> 00:19:26.000
then subsystem makes sense to test.


00:19:26.000 --> 00:19:29.740
So you can just, like I'm working on my particular bit


00:19:29.740 --> 00:19:33.740
of code and so I'm running those tests related to that.


00:19:33.740 --> 00:19:37.380
You know, it's kind of how you're running the test


00:19:37.380 --> 00:19:40.040
is how you're going to, anyway.


00:19:40.040 --> 00:19:41.940
It also-- - Yeah, depends how you


00:19:41.940 --> 00:19:42.780
think about it, right? - Yeah.


00:19:42.780 --> 00:19:45.000
- And how it's organized in your brain.


00:19:45.000 --> 00:19:46.940
- Also, there's reporting considerations.


00:19:46.940 --> 00:19:50.920
So if you're reporting to outside people


00:19:50.920 --> 00:19:54.120
that your tests are passing in different chunks,


00:19:54.120 --> 00:19:57.220
it might, the reporting might be easier


00:19:57.220 --> 00:19:59.420
if you're structured one way versus another.


00:19:59.420 --> 00:20:00.260
So.


00:20:00.260 --> 00:20:04.520
- So let's see here.


00:20:04.520 --> 00:20:07.560
The structured like your software or subsystems,


00:20:07.560 --> 00:20:08.720
that's straightforward to me.


00:20:08.720 --> 00:20:10.240
Like I've got a data access layer.


00:20:10.240 --> 00:20:13.080
So here's my tests that test the data access layer,


00:20:13.080 --> 00:20:15.640
presumably mocking out the database, but maybe not.


00:20:15.640 --> 00:20:20.640
When you think about having subdirectories,


00:20:20.640 --> 00:20:25.160
you would just have maybe subdirectories of those.


00:20:25.160 --> 00:20:26.880
And I guess another you could think about


00:20:26.880 --> 00:20:31.160
is like really, really slow integration style tests


00:20:31.160 --> 00:20:35.740
versus more units, for lack of a better word, tests.


00:20:35.740 --> 00:20:39.360
Right, like these are the ones,


00:20:39.360 --> 00:20:41.240
excuse me, these are the ones I can run now.


00:20:41.240 --> 00:20:43.800
These are the ones that take an hour.


00:20:43.800 --> 00:20:45.080
Let me run the ones that could take now.


00:20:45.080 --> 00:20:48.820
How do you, what's your style?


00:20:48.820 --> 00:20:52.920
- Well, I do actually, so I do,


00:20:52.920 --> 00:20:55.960
I'm not really that great at like throwing in unit tests


00:20:55.960 --> 00:20:58.760
'cause I don't really see much value in unit tests.


00:20:58.760 --> 00:21:02.080
I know that I have to have behavior in like tests


00:21:02.080 --> 00:21:05.800
that test the user, the end user functionality.


00:21:05.800 --> 00:21:06.640
- Yeah.


00:21:06.640 --> 00:21:09.520
- At the point where that is testing all of my code,


00:21:09.520 --> 00:21:12.080
then I don't feel the need to add unit tests,


00:21:12.080 --> 00:21:16.800
but there are times where they are needed, which is great.


00:21:16.800 --> 00:21:19.080
I do think it's great to separate those.


00:21:19.080 --> 00:21:21.760
So the top hierarchy of separating


00:21:21.760 --> 00:21:25.800
behavior versus unit tests into one big chunk.


00:21:25.800 --> 00:21:27.920
The main reason why I like that is because


00:21:27.920 --> 00:21:30.280
I really want my behavior tests to be,


00:21:30.280 --> 00:21:32.640
if I'm gonna do coverage, I really wanna know


00:21:32.640 --> 00:21:36.120
if my behavior tests are covering all of my code.


00:21:36.120 --> 00:21:37.600
It doesn't really help me much to know


00:21:37.600 --> 00:21:39.760
that my unit tests are covering all my code


00:21:39.760 --> 00:21:43.900
because that could lead to dumb tests.


00:21:43.900 --> 00:21:45.280
(laughs)


00:21:45.280 --> 00:21:49.640
That really, I mean, I might be able, tempted to,


00:21:49.640 --> 00:21:51.880
there might be a corner case in my code


00:21:51.880 --> 00:21:53.760
that I can write a unit test for,


00:21:53.760 --> 00:21:55.920
but I can't reach otherwise.


00:21:55.920 --> 00:21:59.040
So I think it's better just to delete the code.


00:21:59.040 --> 00:22:00.560
- Yeah.


00:22:00.560 --> 00:22:05.080
Honestly, we might get our pytest certifications taken away,


00:22:05.080 --> 00:22:07.840
but, or our Agile certifications taken away.


00:22:07.840 --> 00:22:08.960
I don't have one.


00:22:08.960 --> 00:22:14.640
But I agree with you completely that some of these larger scale tests


00:22:14.640 --> 00:22:18.640
that kind of test larger bits of code,


00:22:18.640 --> 00:22:23.360
they're really, they might not be 100% on catching all the little things you could test,


00:22:23.360 --> 00:22:28.560
but usually if I break something, many of those break.


00:22:28.560 --> 00:22:31.600
You know, it's usually enough to catch the mistakes.


00:22:31.600 --> 00:22:33.120
Yeah.


00:22:33.120 --> 00:22:37.360
And they're easier to write 20 big scale tests


00:22:37.360 --> 00:22:41.400
than a thousand small ones.


00:22:41.400 --> 00:22:44.100
- I've also never had a customer reported issue


00:22:44.100 --> 00:22:46.820
that could be reproduced as a unit test.


00:22:46.820 --> 00:22:49.800
Just saying.


00:22:49.800 --> 00:22:50.640
- Yeah.


00:22:50.640 --> 00:22:52.700
Avaro out there says,


00:22:52.700 --> 00:22:55.200
pytest docs introduces,


00:22:55.200 --> 00:22:58.160
or yeah, talks about a slow mark just for that use case,


00:22:58.160 --> 00:22:59.000
which we will.


00:22:59.000 --> 00:23:02.080
We will get to marks as well,


00:23:02.080 --> 00:23:04.200
but that's definitely a good recommendation.


00:23:04.200 --> 00:23:06.200
So maybe not actually using the directory structure


00:23:06.200 --> 00:23:08.000
for slow, but using marks.


00:23:08.000 --> 00:23:11.120
So coming back to that, but let's carry on.


00:23:11.120 --> 00:23:11.960
- Yeah, well--


00:23:11.960 --> 00:23:13.760
- That was structuring a test suite.


00:23:13.760 --> 00:23:20.680
- Okay, so I don't know how the transition is here,


00:23:20.680 --> 00:23:23.120
but I picked fixtures as the next thing.


00:23:23.120 --> 00:23:26.280
I think one of the first things people need to get used to


00:23:26.280 --> 00:23:27.840
with pytest is fixtures,


00:23:27.840 --> 00:23:30.800
because it is the big brain shift


00:23:30.800 --> 00:23:32.480
from any other test framework.


00:23:32.480 --> 00:23:35.460
And it's, they're pretty cool.


00:23:35.460 --> 00:23:40.460
So it's really just a function that's split in half.


00:23:40.460 --> 00:23:44.420
We've got a setup half and a tear down half


00:23:44.420 --> 00:23:47.020
and they're separated by a yield keyword


00:23:47.020 --> 00:23:49.260
that separates the setup and tear down


00:23:49.260 --> 00:23:53.020
and pytest will call that before they're testing


00:23:53.020 --> 00:23:55.860
and then finish it up afterwards.


00:23:55.860 --> 00:23:56.700
That's about it.


00:23:56.700 --> 00:23:58.960
- Well, I think part of the transition is


00:23:58.960 --> 00:24:01.880
He talked about the three A's,


00:24:01.880 --> 00:24:03.320
they arrange, act and assert.


00:24:03.320 --> 00:24:07.420
The arrange part, if that's gonna get reused,


00:24:07.420 --> 00:24:10.960
well, fixtures are pretty well built for that.


00:24:10.960 --> 00:24:13.120
And you could have more than one fixture in a test, right?


00:24:13.120 --> 00:24:14.800
You can say this part arranges the database


00:24:14.800 --> 00:24:17.520
and this part arranges, I don't know,


00:24:17.520 --> 00:24:20.400
some set state of the app that you're gonna,


00:24:20.400 --> 00:24:22.720
you know, make them collide and see what happens.


00:24:22.720 --> 00:24:24.680
- Yeah, or connections to resources


00:24:24.680 --> 00:24:26.840
and all sorts of stuff, yeah.


00:24:26.840 --> 00:24:30.440
or data, you can have fixtures that generate data for you.


00:24:30.440 --> 00:24:32.940
And there's many that do that.


00:24:32.940 --> 00:24:36.580
But one of the things,


00:24:36.580 --> 00:24:39.120
I guess I should have this as one of the tips,


00:24:39.120 --> 00:24:42.380
in writing a test, I recommend putting,


00:24:42.380 --> 00:24:43.900
like, especially the first test


00:24:43.900 --> 00:24:47.380
for something you write down, just write it in the test.


00:24:47.380 --> 00:24:50.180
Now, when you go to write the second one,


00:24:50.180 --> 00:24:52.260
that's a good time to go,


00:24:52.260 --> 00:24:54.080
how much of this setup is shared?


00:24:54.940 --> 00:24:58.140
And if all of the setup is shared mostly,


00:24:58.140 --> 00:25:00.340
then you can throw, maybe it makes sense


00:25:00.340 --> 00:25:02.180
to throw that in one or more fixture.


00:25:02.180 --> 00:25:06.980
But I do, I have seen people just copy it.


00:25:06.980 --> 00:25:09.820
There's just like take it and put it into a fixture


00:25:09.820 --> 00:25:11.320
and I call the fixture setup.


00:25:11.320 --> 00:25:15.660
That's, you can do that.


00:25:15.660 --> 00:25:17.100
It's a little dangerous though


00:25:17.100 --> 00:25:18.940
because what are you setting up?


00:25:18.940 --> 00:25:22.180
I'd rather have it be maybe multiple different ones


00:25:22.180 --> 00:25:27.180
like setup database or configure the network


00:25:27.180 --> 00:25:28.520
or something like that.


00:25:28.520 --> 00:25:29.640
Have it be descriptive.


00:25:29.640 --> 00:25:30.620
You've got a word there.


00:25:30.620 --> 00:25:34.840
Setup just doesn't say much, so say something, I guess.


00:25:34.840 --> 00:25:38.980
- Well, that goes back to the whole part of testing


00:25:38.980 --> 00:25:42.080
that is documentation of how the system works.


00:25:42.080 --> 00:25:46.540
And part of that should be really good names for your tests.


00:25:46.540 --> 00:25:50.280
You have the advantage that no one is ever gonna try


00:25:50.280 --> 00:25:53.020
to use your test code as an API.


00:25:53.020 --> 00:25:55.200
So it can be a ridiculous name,


00:25:55.200 --> 00:25:57.800
like 15, 20, 30 characters,


00:25:57.800 --> 00:25:59.620
'cause no one's gonna be upset


00:25:59.620 --> 00:26:02.480
that the test runner doesn't care that the name is long.


00:26:02.480 --> 00:26:05.620
- Yeah, but the person that is gonna look at it


00:26:05.620 --> 00:26:07.780
is either you or somebody else


00:26:07.780 --> 00:26:10.180
when something's broken and they're stressed out.


00:26:10.180 --> 00:26:14.160
So when they're trying to get done with their day


00:26:14.160 --> 00:26:15.360
and the test doesn't work


00:26:15.360 --> 00:26:16.800
and they're looking at the code going,


00:26:16.800 --> 00:26:18.080
what are we doing here?


00:26:18.080 --> 00:26:21.320
So yeah, being verbose there is fine.


00:26:21.320 --> 00:26:23.700
In back to the RF world,


00:26:23.700 --> 00:26:25.880
like let's say I'm setting up both a transmitter


00:26:25.880 --> 00:26:29.700
and a receiver before a test.


00:26:29.700 --> 00:26:33.640
I might be tempted to throw both of those in one fixture,


00:26:33.640 --> 00:26:36.120
but I'm almost, and I have before,


00:26:36.120 --> 00:26:38.360
but I almost always end up splitting those up


00:26:38.360 --> 00:26:41.420
and have like set up transmitter, set up receiver,


00:26:41.420 --> 00:26:43.840
set up measurement system, have those separate


00:26:43.840 --> 00:26:48.840
because they're more reusable as parts later and stuff.


00:26:48.840 --> 00:26:52.400
- Right, maybe you need a receiver, not a transmitter


00:26:52.400 --> 00:26:55.680
for some particular reason somewhere, yeah.


00:26:55.680 --> 00:26:58.880
- Another thing is it's okay to not reuse fixtures


00:26:58.880 --> 00:27:00.440
and they can be in the same file.


00:27:00.440 --> 00:27:03.960
So you can, if you just have like this huge setup


00:27:03.960 --> 00:27:07.840
and a little tiny, like do something section,


00:27:07.840 --> 00:27:10.960
it's really nice to just throw that into a fixture.


00:27:10.960 --> 00:27:14.040
There's lots of reasons to throw that in the fixture.


00:27:14.040 --> 00:27:17.360
One of the great reasons is you can put asserts


00:27:17.360 --> 00:27:21.840
in the fixture and you don't wanna sprinkle asserts


00:27:21.840 --> 00:27:23.920
through your test because then your test fails


00:27:23.920 --> 00:27:26.760
and you're like, was the setup failure or not?


00:27:26.760 --> 00:27:29.660
But pytest is awesome that if the assert happens


00:27:29.660 --> 00:27:32.920
in the fixture, it doesn't report the test as a failure,


00:27:32.920 --> 00:27:34.360
it reports as an error.


00:27:34.360 --> 00:27:38.280
So fixture asserts are errors and then,


00:27:38.280 --> 00:27:40.120
so you can separate when you're seeing


00:27:40.120 --> 00:27:43.240
all of your entire system's failing,


00:27:43.240 --> 00:27:44.680
but there's really only one failure


00:27:44.680 --> 00:27:46.240
and all the rest of them are errors,


00:27:46.240 --> 00:27:49.040
it might be that you're just not connecting


00:27:49.040 --> 00:27:52.880
to the database or something like that.


00:27:52.880 --> 00:27:53.760
- Yeah, interesting.


00:27:53.760 --> 00:27:54.800
Out in the audience, Jeff says,


00:27:54.800 --> 00:27:56.760
"One thing I missed on my first trials,


00:27:56.760 --> 00:28:00.080
"my test is the differentiation between error and fail."


00:28:00.080 --> 00:28:03.320
Which sounds a lot like what you're talking about there.


00:28:03.320 --> 00:28:06.960
- Oh yeah, and his comment around unit tests,


00:28:06.960 --> 00:28:09.480
'cause unit tests is a little different.


00:28:09.480 --> 00:28:12.920
- Unit test makes the, I think it's the assertion error


00:28:12.920 --> 00:28:14.440
versus other exceptions.


00:28:14.440 --> 00:28:17.360
So I think that's the case in unit test


00:28:17.360 --> 00:28:22.120
that if you, if it's like an assertion error, it's a failure.


00:28:22.120 --> 00:28:26.460
And if it's any other exception, it's an error.


00:28:26.460 --> 00:28:28.580
Py test, completely different.


00:28:28.580 --> 00:28:31.200
Any exception, assertion or otherwise


00:28:31.200 --> 00:28:34.420
that happens within the test itself is a failure.


00:28:34.420 --> 00:28:37.160
And any exception that happens that's uncaught


00:28:37.160 --> 00:28:41.200
in a setup or in a fixture, that's an error.


00:28:41.200 --> 00:28:41.920
So--


00:28:41.920 --> 00:28:42.760
>>No, that's cool.


00:28:42.760 --> 00:28:44.760
I didn't realize that differentiation.


00:28:44.760 --> 00:28:46.800
Also a question from Thomas.


00:28:46.800 --> 00:28:50.360
If you're just having the fixture there to provide data,


00:28:50.360 --> 00:28:53.000
is it necessary to use yield instead of just returning


00:28:53.000 --> 00:28:54.640
the value?


00:28:54.640 --> 00:28:56.800
>>I usually just return the value.


00:28:56.800 --> 00:29:01.760
I only use yield if I have some work to do for a teardown.


00:29:01.760 --> 00:29:02.640
>>Yeah.


00:29:02.640 --> 00:29:03.560
>>So--


00:29:03.560 --> 00:29:05.440
>>I think also it's just kind of interesting,


00:29:05.440 --> 00:29:10.440
the, that yield and what a clever use of generators, right?


00:29:10.440 --> 00:29:15.200
- Yeah, it's very clever and also very nice


00:29:15.200 --> 00:29:20.000
because in, you can have variables there


00:29:20.000 --> 00:29:23.500
that are needed for the cleanup,


00:29:23.500 --> 00:29:28.640
but you like, but you don't need to return to anybody


00:29:28.640 --> 00:29:31.760
or something or save them in a global variable.


00:29:31.760 --> 00:29:34.160
They can just be in the function and that's it.


00:29:34.160 --> 00:29:38.000
So like, you know, database connect to the database, keep a handle to the database


00:29:38.000 --> 00:29:39.520
so that you can close it at the end.


00:29:39.520 --> 00:29:40.700
it's very,


00:29:40.700 --> 00:29:40.800
right.


00:29:40.800 --> 00:29:42.460
Or start a transaction and roll it back.


00:29:42.460 --> 00:29:44.840
So it's whatever you did to it's unaffected.


00:29:44.840 --> 00:29:45.040
Yeah.


00:29:45.040 --> 00:29:46.080
Oh yeah.


00:29:46.080 --> 00:29:46.760
Yeah.


00:29:46.760 --> 00:29:47.120
Cool.


00:29:47.120 --> 00:29:49.320
All right.


00:29:49.320 --> 00:29:50.480
What's next.


00:29:50.480 --> 00:29:51.120
That was fixtures.


00:29:51.120 --> 00:29:56.560
well, so if you've been using more fixture, yeah, more, just, just you, you


00:29:56.560 --> 00:30:00.760
made this comment and I I'm like, I've been doing Pytest so long that I forgot


00:30:00.760 --> 00:30:05.460
about it. Old time pytest stuff had to add finalizer before we


00:30:05.460 --> 00:30:09.040
kind of settled on the yield system. I would say avoid add


00:30:09.040 --> 00:30:12.160
finalizer, it's just going to confuse people. So don't do


00:30:12.160 --> 00:30:17.880
that. Also, you can nest them. So leveraging, use it using


00:30:17.880 --> 00:30:20.960
scopes. So you can have like, connect to a database by a


00:30:20.960 --> 00:30:25.220
session scope, and then cleaning up the database as a function


00:30:25.220 --> 00:30:28.040
scope thing so that you're, you know, save time.


00:30:28.040 --> 00:30:32.620
And then conf test files, if you want to share them


00:30:32.620 --> 00:30:35.860
between just between, between tests,


00:30:35.860 --> 00:30:38.100
you can throw the fixture in a conf test file.


00:30:38.100 --> 00:30:40.700
- Yeah, it's not necessarily obvious that if I put a fixture


00:30:40.700 --> 00:30:44.000
and then I have a bunch of tests below in the same file,


00:30:44.000 --> 00:30:45.260
it's obvious I can just use it.


00:30:45.260 --> 00:30:48.220
But then if I go to another one, I could be like, well,


00:30:48.220 --> 00:30:50.300
what about, what about those over there?


00:30:50.300 --> 00:30:51.660
I want to share them across these files.


00:30:51.660 --> 00:30:54.340
So this conf test, this is what that's about, right?


00:30:54.340 --> 00:30:56.640
- Yeah, and a lot of people think you can,


00:30:56.640 --> 00:30:58.520
or their first attempt is to throw them all


00:30:58.520 --> 00:31:00.720
into a different module and import the module.


00:31:00.720 --> 00:31:02.380
You can't do that, don't do that.


00:31:02.380 --> 00:31:06.080
And you never want to import the conf test file.


00:31:06.080 --> 00:31:07.440
It's not an importable thing.


00:31:07.440 --> 00:31:09.480
It's just pytest deals with it.


00:31:09.480 --> 00:31:12.080
- Yeah, indeed.


00:31:12.080 --> 00:31:14.020
- And okay, so on fixtures,


00:31:14.020 --> 00:31:17.200
there's a bunch of built-in ones that are super cool.


00:31:17.200 --> 00:31:19.560
And in the long time,


00:31:19.560 --> 00:31:22.320
like if you've used pytest for a while,


00:31:22.320 --> 00:31:24.760
We used to have, and we still do,


00:31:24.760 --> 00:31:28.320
a couple of fixtures called Tempter and TempterFactory.


00:31:28.320 --> 00:31:31.340
But there's newer ones, they've been in for a while,


00:31:31.340 --> 00:31:32.940
but some people don't know about them,


00:31:32.940 --> 00:31:35.280
called TempPath and TempPathFactory.


00:31:35.280 --> 00:31:40.000
And they use pathlib path objects, which are awesome.


00:31:40.000 --> 00:31:41.960
So use that if you can.


00:31:41.960 --> 00:31:45.160
- It took me a while to love the path class,


00:31:45.160 --> 00:31:47.280
but I love it now, it's really nice.


00:31:47.280 --> 00:31:51.320
- Yeah, and also, I mean, the old one was like,


00:31:51.320 --> 00:31:55.500
just this py.path.local object,


00:31:55.500 --> 00:31:57.680
which was very undocumented.


00:31:57.680 --> 00:31:59.960
So I don't recommend it.


00:31:59.960 --> 00:32:03.020
The temp files within pytest, so it's great.


00:32:03.020 --> 00:32:04.920
If you're like in a,


00:32:04.920 --> 00:32:06.600
if you're generating a file or whatever,


00:32:06.600 --> 00:32:09.760
we want to save some CSV stuff, it's good.


00:32:09.760 --> 00:32:13.000
It's, it sticks around too, which is kind of cool.


00:32:13.000 --> 00:32:14.180
It sticks around for a little while.


00:32:14.180 --> 00:32:17.520
So you can interrogate your temp files,


00:32:17.520 --> 00:32:19.820
like after a test run is done,


00:32:19.820 --> 00:32:22.300
you can look at the, and if you're trying


00:32:22.300 --> 00:32:25.420
to debug the failures, those temp files will still be there.


00:32:25.420 --> 00:32:27.140
They're not cleaned up directly after,


00:32:27.140 --> 00:32:29.140
they're cleaned up in a future test run.


00:32:29.140 --> 00:32:31.260
- Oh, that's interesting.


00:32:31.260 --> 00:32:32.100
- Yeah.


00:32:32.100 --> 00:32:35.180
- They're like a N minus one or N plus one lifespan


00:32:35.180 --> 00:32:36.020
or something.


00:32:36.020 --> 00:32:36.860
- Yeah.


00:32:36.860 --> 00:32:41.020
There's a bunch of built-in fixtures.


00:32:41.020 --> 00:32:42.480
There's only a handful I use very much.


00:32:42.480 --> 00:32:44.900
I use a Tempath and Tempath.


00:32:44.900 --> 00:32:47.000
So there's Tempath and Tempath Factory.


00:32:47.000 --> 00:32:49.760
The factory versions are used if you,


00:32:49.760 --> 00:32:53.440
'cause Tempath like is a per test run,


00:32:53.440 --> 00:32:57.960
like per like every function it gets generated.


00:32:57.960 --> 00:33:02.520
So you can't use it if you've got a session scope fixture.


00:33:02.520 --> 00:33:05.560
So the factory ones are session scoped.


00:33:05.560 --> 00:33:07.080
So if you wanna use it,


00:33:07.080 --> 00:33:09.400
anything larger than function scope,


00:33:09.400 --> 00:33:12.720
use the factory to generate a temp directory.


00:33:12.720 --> 00:33:13.560
So use that.


00:33:13.560 --> 00:33:14.400
- Cool.


00:33:14.400 --> 00:33:15.640
Yeah, I got it.


00:33:15.640 --> 00:33:19.080
Capsys, a lot of, if you want to look at,


00:33:19.080 --> 00:33:20.880
if you're checking your output,


00:33:20.880 --> 00:33:24.240
Capsys is good for checking the output of something,


00:33:24.240 --> 00:33:25.800
the standard out or standard.


00:33:25.800 --> 00:33:29.160
- Because pytest captures and eats some of it, right?


00:33:29.160 --> 00:33:32.600
- Yeah, by default, pytest will always capture the errors


00:33:32.600 --> 00:33:35.840
and output and only print it out for,


00:33:35.840 --> 00:33:37.480
it prints it out for failing tests.


00:33:37.480 --> 00:33:41.740
It'll say, oh, here's the output for the test and it failed.


00:33:41.740 --> 00:33:45.400
So that's helpful, but it's normally gone.


00:33:45.400 --> 00:33:47.420
And if you want to, so there's,


00:33:47.420 --> 00:33:49.940
you can use caps as also just to disable that


00:33:49.940 --> 00:33:51.660
for temporary bits of your code.


00:33:51.660 --> 00:33:53.820
If you want to throw a log out there all the time


00:33:53.820 --> 00:33:55.180
or something, you can use that.


00:33:55.180 --> 00:33:58.300
So, but I usually use it just to look at the output.


00:33:58.300 --> 00:34:00.500
So especially with pytest plugins,


00:34:00.500 --> 00:34:02.520
I want to see if I've modified the output,


00:34:02.520 --> 00:34:03.520
I want to see the output.


00:34:03.520 --> 00:34:05.460
So I can use that to grab that.


00:34:05.460 --> 00:34:10.340
There's monkey patch as well to,


00:34:10.340 --> 00:34:12.700
I, you can use this for all sorts of stuff,


00:34:12.700 --> 00:34:15.140
but I usually, if I'm doing fancy things,


00:34:15.140 --> 00:34:19.220
they usually like actually use just mock,


00:34:19.220 --> 00:34:22.620
unit test mock.


00:34:22.620 --> 00:34:26.540
But for things like changing your environment, it's great.


00:34:26.540 --> 00:34:29.820
So you can change environmental variables


00:34:29.820 --> 00:34:32.980
or quick patches, it works great.


00:34:32.980 --> 00:34:34.720
The neat things about these,


00:34:34.720 --> 00:34:38.060
other than just doing yourself,


00:34:38.060 --> 00:34:39.660
is that it cleans up afterwards.


00:34:39.660 --> 00:34:42.780
So if you patch like a system


00:34:42.780 --> 00:34:46.300
with like a dummy bit of system or something


00:34:46.300 --> 00:34:47.500
after your test is done,


00:34:47.500 --> 00:34:49.540
it goes back to what it was before.


00:34:49.540 --> 00:34:50.380
So that's pretty cool.


00:34:50.380 --> 00:34:52.300
- Yeah, because otherwise you can end up with a problem


00:34:52.300 --> 00:34:54.660
of the order of operations


00:34:54.660 --> 00:34:57.100
is left in this half patched state


00:34:57.100 --> 00:34:59.740
where something else depends upon it, right?


00:34:59.740 --> 00:35:00.660
- Yep.


00:35:00.660 --> 00:35:01.500
Yeah.


00:35:01.500 --> 00:35:06.260
pytest config is used for grabbing command line flags a lot.


00:35:06.260 --> 00:35:07.940
That's mostly what I use it for.


00:35:07.940 --> 00:35:11.540
And then the only thing I usually use request for anymore


00:35:11.540 --> 00:35:15.000
is if from a fixture, I wanna know what the test name was.


00:35:15.000 --> 00:35:17.400
I can use, you can use request node name


00:35:17.400 --> 00:35:18.820
to grab the test name.


00:35:18.820 --> 00:35:20.920
I don't think I use it for anything anymore,


00:35:20.920 --> 00:35:23.480
anything else anymore, except for parameters


00:35:23.480 --> 00:35:26.240
to grab the parameter values.


00:35:26.240 --> 00:35:27.880
Yeah, anyway.


00:35:27.880 --> 00:35:28.700
- Nice.


00:35:28.700 --> 00:35:32.400
All right, I pointed out Mark or audience.


00:35:32.400 --> 00:35:35.640
They pointed out Mark and here we are, Mark.


00:35:35.640 --> 00:35:36.480
- Markers.


00:35:37.680 --> 00:35:42.680
So pytest.mark.whatever, you can use custom markers.


00:35:42.680 --> 00:35:45.720
Markers are great, but don't,


00:35:45.720 --> 00:35:49.620
when I learned about markers, I put them everywhere


00:35:49.620 --> 00:35:52.060
and then I'm like, oh, that's just sort of,


00:35:52.060 --> 00:35:53.720
it ends up being messy.


00:35:53.720 --> 00:35:57.500
So it can be, but it's a great way to,


00:35:57.500 --> 00:36:01.780
it's like just adding a tag to a test or a test case


00:36:01.780 --> 00:36:06.580
or something to say that you can use it to run it.


00:36:06.580 --> 00:36:08.340
So you can say, I wanna run all the tests


00:36:08.340 --> 00:36:10.780
that are marked like user interface.


00:36:10.780 --> 00:36:12.300
You can run all the UI tests.


00:36:12.300 --> 00:36:15.180
If you didn't separate them by directory


00:36:15.180 --> 00:36:17.740
or like somebody said, you can mark all the slow ones


00:36:17.740 --> 00:36:21.780
and only run the slow ones or avoid running the slow ones.


00:36:21.780 --> 00:36:24.180
- So you can do a not in your execution.


00:36:24.180 --> 00:36:26.620
You can say, run the things not marked slow.


00:36:26.620 --> 00:36:29.220
- Yeah, you just say, well, it's dash M.


00:36:29.220 --> 00:36:34.220
I should throw that in there, dash M, like not slow.


00:36:34.220 --> 00:36:36.300
- Got it.


00:36:36.300 --> 00:36:39.220
but it's two words, so you have to put it in quotes,


00:36:39.220 --> 00:36:41.180
like dash M quote, not slow.


00:36:41.180 --> 00:36:42.940
It'll work.


00:36:42.940 --> 00:36:45.940
And you can mark files with a magic word,


00:36:45.940 --> 00:36:49.580
magic keyword called pytest mark with no spaces.


00:36:49.580 --> 00:36:53.080
If you throw that in your file, pytest will see it.


00:36:53.080 --> 00:36:57.140
So there's a bunch of built-in ones, marks.


00:36:57.140 --> 00:36:59.300
The ones that I think are probably most common


00:36:59.300 --> 00:37:01.660
are skip, skip if and xfail.


00:37:01.660 --> 00:37:03.660
And I guess-


00:37:03.660 --> 00:37:05.020
- X, did you expect it to fail?


00:37:05.020 --> 00:37:07.840
Like I know it's failing, but that's okay.


00:37:07.840 --> 00:37:09.880
- Yeah, so a lot of people might think,


00:37:09.880 --> 00:37:12.240
why would you ever expect a test to fail?


00:37:12.240 --> 00:37:13.360
You just fix it.


00:37:13.360 --> 00:37:14.720
- No, no, no, no, no, no.


00:37:14.720 --> 00:37:18.360
It's Friday, three o'clock, you got plans.


00:37:18.360 --> 00:37:19.860
But you gotta fix the build.


00:37:19.860 --> 00:37:20.700
- Yeah.


00:37:20.700 --> 00:37:22.720
- No, seriously though, why would you use this?


00:37:22.720 --> 00:37:26.000
- Well, believe it or not,


00:37:26.000 --> 00:37:28.760
some people are not responsible for all the code.


00:37:28.760 --> 00:37:29.600
- Yeah.


00:37:29.600 --> 00:37:30.600
- There's teams.


00:37:30.600 --> 00:37:35.600
So one great reason to use XFail is to submit a defect.


00:37:35.600 --> 00:37:42.700
And then you say, I know this test is failing


00:37:42.700 --> 00:37:45.080
because of this issue.


00:37:45.080 --> 00:37:46.360
You've submitted a defect


00:37:46.360 --> 00:37:48.720
and then you throw the defect number


00:37:48.720 --> 00:37:53.720
in the XFail reason string and move on.


00:37:53.720 --> 00:37:57.380
Now your build is still working.


00:37:59.040 --> 00:38:00.820
But just be careful.


00:38:00.820 --> 00:38:02.380
I mean, X-Fails is big thing.


00:38:02.380 --> 00:38:04.880
So I think as, whether or not you use X-Fail,


00:38:04.880 --> 00:38:07.240
it needs to be like your entire software team


00:38:07.240 --> 00:38:11.100
needs to understand it and agree on the process


00:38:11.100 --> 00:38:12.680
because there needs to be a process


00:38:12.680 --> 00:38:14.360
around how to utilize X-Fail


00:38:14.360 --> 00:38:17.520
because it can just sort of hide failures


00:38:17.520 --> 00:38:18.920
and you don't want that.


00:38:18.920 --> 00:38:23.840
That's one of the reasons why I really like X-Fail Strict


00:38:23.840 --> 00:38:27.880
that it makes it so that all,


00:38:27.880 --> 00:38:31.000
it makes it so that like, if they pass,


00:38:31.000 --> 00:38:36.000
if you mark it as fail and it passes, it'll just pass.


00:38:36.000 --> 00:38:40.600
But we want it to, well, it X passes,


00:38:40.600 --> 00:38:44.200
expected, which means I expected it to fail, but it passed.


00:38:44.200 --> 00:38:46.400
But I like to just have it be a failure,


00:38:46.400 --> 00:38:48.920
which so that somebody can look at it and go,


00:38:48.920 --> 00:38:51.440
oh yeah, we need to take these out of the test


00:38:51.440 --> 00:38:53.680
and close the defect or something like that.


00:38:53.680 --> 00:38:56.560
The other thing that people should be aware of


00:38:56.560 --> 00:38:58.440
that I don't think a lot of people know


00:38:58.440 --> 00:39:01.000
is a --run X fail flag.


00:39:01.000 --> 00:39:05.300
And this is especially useful like to just say,


00:39:05.300 --> 00:39:07.940
okay, screw it, ignore all the X fails


00:39:07.940 --> 00:39:10.360
and just run as if I hadn't marked them X fail.


00:39:10.360 --> 00:39:12.520
And so that you--


00:39:12.520 --> 00:39:14.440
- Maybe they are fixed and you don't know,


00:39:14.440 --> 00:39:16.280
maybe they didn't take away the X fail.


00:39:16.280 --> 00:39:19.400
- Yeah, but they might, or you just wanna make,


00:39:19.400 --> 00:39:23.160
like in a CI system, for instance,


00:39:23.160 --> 00:39:26.840
Like if you're running, most CI systems don't understand


00:39:26.840 --> 00:39:29.680
all of the different variations of like outputs


00:39:29.680 --> 00:39:32.920
from pytest, like they don't understand X passes,


00:39:32.920 --> 00:39:36.320
X fails and skips and all that sort of stuff.


00:39:36.320 --> 00:39:40.400
So, and a lot of times then X fails and X passes


00:39:40.400 --> 00:39:44.760
just show up as just passes and fails.


00:39:44.760 --> 00:39:49.240
And so you don't want just to pass everything.


00:39:49.240 --> 00:39:51.440
So run X fail, if you just wanna say,


00:39:51.440 --> 00:39:53.660
I wanna just run everything


00:39:53.660 --> 00:39:55.920
and if there's any failure, I wanna see it.


00:39:55.920 --> 00:39:58.480
So that's good.


00:39:58.480 --> 00:40:00.760
But just be careful with X fails.


00:40:00.760 --> 00:40:03.100
I've seen it confused people.


00:40:03.100 --> 00:40:06.360
- Yeah, it makes sense.


00:40:06.360 --> 00:40:09.600
What's the story with skip and skip it?


00:40:09.600 --> 00:40:11.080
- I guess it's the same.


00:40:11.080 --> 00:40:13.400
I mean, like, why are you skipping something?


00:40:13.400 --> 00:40:15.860
I guess you have to be careful.


00:40:15.860 --> 00:40:18.440
So skip is just skip this test.


00:40:18.440 --> 00:40:19.700
It doesn't run it at all.


00:40:20.640 --> 00:40:23.600
And skip if you can put logic in there to say like,


00:40:23.600 --> 00:40:28.360
well, if it's on, and so a great example of skip if is


00:40:28.360 --> 00:40:30.780
if you've got operating specific,


00:40:30.780 --> 00:40:34.640
like maybe if you have operating specifics,


00:40:34.640 --> 00:40:37.960
chunks of tests or chunks of code or something.


00:40:37.960 --> 00:40:42.240
- Skip if platform equals Darwin, the macOS ones.


00:40:42.240 --> 00:40:44.480
- Something like that. - You got no chance.


00:40:44.480 --> 00:40:49.320
- Yeah, or if we're talking coverage in unit test again,


00:40:49.320 --> 00:40:52.100
for example, maybe you've got functionality


00:40:52.100 --> 00:40:55.480
that depends on Python 3.12,


00:40:55.480 --> 00:41:00.440
but you're also wanna test on Python 3.7.


00:41:00.440 --> 00:41:03.460
And so you know some code is only gonna run,


00:41:03.460 --> 00:41:05.300
you're running different code


00:41:05.300 --> 00:41:08.100
for the same functionality on two Pythons.


00:41:08.100 --> 00:41:10.500
You might wanna like have two tests


00:41:10.500 --> 00:41:13.140
and one of them gets run on Python 3.11


00:41:13.140 --> 00:41:15.380
and one of them or 12 and one of them gets run


00:41:15.380 --> 00:41:17.120
on all of the other versions.


00:41:17.120 --> 00:41:20.100
And you can use skip if to gate those.


00:41:20.100 --> 00:41:22.300
>> Interesting. Okay. Yeah, that's really cool.


00:41:22.300 --> 00:41:26.340
Hey, before we move on, we've got an interesting question


00:41:26.340 --> 00:41:28.820
or idea out here from Jeff in the audience,


00:41:28.820 --> 00:41:30.540
who also is a hardware tester.


00:41:30.540 --> 00:41:33.620
Said, "I'd like to distribute fixtures in some way


00:41:33.620 --> 00:41:35.340
to people as a Python package."


00:41:35.340 --> 00:41:37.660
>> That's a great idea.


00:41:37.660 --> 00:41:39.300
>> Yeah. What do you think about that?


00:41:39.300 --> 00:41:40.900
>> I think that's a plugin.


00:41:40.900 --> 00:41:44.260
So let's jump to plugins then.


00:41:47.020 --> 00:41:49.020
Did I have a plugin section?


00:41:49.020 --> 00:41:50.540
I didn't, maybe I don't.


00:41:50.540 --> 00:41:53.500
Let's go to the top.


00:41:53.500 --> 00:41:56.840
- Well, notes for a new section.


00:41:56.840 --> 00:41:58.420
- Yeah, plugins.


00:41:58.420 --> 00:41:59.980
- It's a living blog post.


00:41:59.980 --> 00:42:01.420
- Yeah.


00:42:01.420 --> 00:42:05.900
So yes, I think it's important to be able


00:42:05.900 --> 00:42:07.460
to package them as plugins.


00:42:07.460 --> 00:42:09.460
And we don't cover,


00:42:09.460 --> 00:42:11.700
plugins are kind of a little advanced thing.


00:42:11.700 --> 00:42:15.900
I don't think we cover using plugins in the course,


00:42:15.900 --> 00:42:17.500
but in three and a half hours,


00:42:17.500 --> 00:42:19.620
I don't cover how to write a plugin.


00:42:19.620 --> 00:42:20.520
- Yeah. - Nothing.


00:42:20.520 --> 00:42:25.860
But there's a ton of plugins on,


00:42:25.860 --> 00:42:29.940
yeah, you've got the pytest plugin list on pytest,


00:42:29.940 --> 00:42:31.740
but also you can search for,


00:42:31.740 --> 00:42:33.800
they're usually pytest dash something.


00:42:33.800 --> 00:42:36.140
So you can search for that on PyPI as well


00:42:36.140 --> 00:42:37.500
and see a bunch of plugins.


00:42:37.500 --> 00:42:41.180
- Yep, you even have some out there for yourself, right?


00:42:41.180 --> 00:42:44.380
- Yeah, quite a few actually. - There's a lot.


00:42:44.380 --> 00:42:45.980
I mean, I'm scrolling and scrolling,


00:42:45.980 --> 00:42:48.020
I'm still in the dash A.


00:42:48.020 --> 00:42:49.700
(laughing)


00:42:49.700 --> 00:42:51.380
That's a lot of content there.


00:42:51.380 --> 00:42:54.380
So I guess one tip is people should just go


00:42:54.380 --> 00:42:55.740
scroll through that list and go,


00:42:55.740 --> 00:42:58.960
look at all these things they could just fixture into there.


00:42:58.960 --> 00:43:00.820
- Yeah.


00:43:00.820 --> 00:43:06.580
Or one option is to go to PyCascades this year


00:43:06.580 --> 00:43:08.160
and watch my talk,


00:43:08.160 --> 00:43:10.580
because I'm giving a talk at PyCascades


00:43:10.580 --> 00:43:13.860
for about packaging pytest fixtures.


00:43:13.860 --> 00:43:14.700
- That's cool.


00:43:14.700 --> 00:43:15.540
When is that?


00:43:15.540 --> 00:43:16.360
- That is March.


00:43:16.360 --> 00:43:17.200
- It's coming up soon, right?


00:43:17.200 --> 00:43:18.020
- Something.


00:43:18.020 --> 00:43:18.860
It's in March.


00:43:18.860 --> 00:43:19.700
I should look it up.


00:43:19.700 --> 00:43:21.700
- Nice.


00:43:21.700 --> 00:43:22.520
- Real time.


00:43:22.520 --> 00:43:24.340
- Yeah, I'm pretty sure those videos will be online


00:43:24.340 --> 00:43:28.260
afterwards if people are not at the conference in Vancouver.


00:43:28.260 --> 00:43:29.780
Although Vancouver is lovely.


00:43:29.780 --> 00:43:30.620
- Yeah.


00:43:30.620 --> 00:43:31.540
Oh yeah, they'll be online.


00:43:31.540 --> 00:43:33.980
And I'm also gonna publish the slides.


00:43:33.980 --> 00:43:35.580
I just got the slides done.


00:43:35.580 --> 00:43:37.940
So it's March 18th through the 20th.


00:43:37.940 --> 00:43:40.780
And I think mine's on the 19th.


00:43:40.780 --> 00:43:41.620
- Cool.


00:43:41.620 --> 00:43:42.440
All right, nice.


00:43:42.440 --> 00:43:42.940
Cool.


00:43:42.940 --> 00:43:43.640
All right, nice.


00:43:43.640 --> 00:43:44.140
>> Yeah.


00:43:44.140 --> 00:43:47.740
So anyway--


00:43:47.740 --> 00:43:48.940
>> All right.


00:43:48.940 --> 00:43:50.640
What section do you want to do next?


00:43:50.640 --> 00:43:52.940
We got a little bit more time.


00:43:52.940 --> 00:43:55.540
>> Well, so we talked about markers and fixtures.


00:43:55.540 --> 00:43:58.540
Parameterization is definitely something


00:43:58.540 --> 00:44:01.040
I think people should learn about.


00:44:01.040 --> 00:44:06.840
And because, especially if you--


00:44:06.840 --> 00:44:11.840
I've seen a lot of test writing utilize


00:44:11.840 --> 00:44:13.520
is copy, paste, modify.


00:44:13.520 --> 00:44:18.720
And I mean, it should be a red flag


00:44:18.720 --> 00:44:20.120
for all software engineers,


00:44:20.120 --> 00:44:23.880
but for some reason it happens a lot in test code


00:44:23.880 --> 00:44:25.680
of copy, paste, modify.


00:44:25.680 --> 00:44:29.080
You got a bunch of tests that are kind of the same


00:44:29.080 --> 00:44:32.640
and you just take one that's similar to what you need


00:44:32.640 --> 00:44:33.760
and change it.


00:44:33.760 --> 00:44:37.440
You end up with a lot of test code that way.


00:44:37.440 --> 00:44:42.440
And one way to fix it is to use parameterization.


00:44:42.440 --> 00:44:45.960
- Yeah, anytime you've got a lot of,


00:44:45.960 --> 00:44:48.720
you're like, this is happening over and over again


00:44:48.720 --> 00:44:51.280
in my code, it should be, it's a code smell, right?


00:44:51.280 --> 00:44:53.040
You should know there's some refactoring.


00:44:53.040 --> 00:44:55.040
Or alternatively, Brian,


00:44:55.040 --> 00:44:58.200
you could get this fancy new Stack Overflow keyboard.


00:44:58.200 --> 00:45:00.160
(Brian laughing)


00:45:00.160 --> 00:45:01.480
- That's awesome.


00:45:01.480 --> 00:45:02.720
Which has three keys.


00:45:02.720 --> 00:45:05.120
- Yes, exactly, go ahead.


00:45:05.120 --> 00:45:07.840
Three keys, one of them goes to stack overflow.


00:45:07.840 --> 00:45:11.640
One of them is copy and one of them is C and V.


00:45:11.640 --> 00:45:13.280
So copy and paste.


00:45:13.280 --> 00:45:15.800
So that's awesome.


00:45:15.800 --> 00:45:18.600
- Power of copy and paste, indeed.


00:45:18.600 --> 00:45:22.080
- I assume you have to have a mouse connected to,


00:45:22.080 --> 00:45:24.360
to select the stuff too.


00:45:24.360 --> 00:45:28.400
But it really does happen a lot of people


00:45:28.400 --> 00:45:32.120
like copy another test, change what they need


00:45:33.040 --> 00:45:35.360
and then run it.


00:45:35.360 --> 00:45:37.560
Now there's a bunch of problems with that.


00:45:37.560 --> 00:45:42.760
One is people sometimes forget to change the test name.


00:45:42.760 --> 00:45:46.800
And then the test, so the test,


00:45:46.800 --> 00:45:50.660
if you can have two functions with the same name in Python


00:45:50.660 --> 00:45:54.280
and it just like runs the second one.


00:45:54.280 --> 00:45:56.400
So that's one of the reasons why I'd like


00:45:56.400 --> 00:45:57.600
to also run coverage.


00:45:57.600 --> 00:46:00.200
If I'm gonna run coverage, I want coverage on my tests too.


00:46:00.200 --> 00:46:03.960
So, and to make sure I have 100% test code coverage.


00:46:03.960 --> 00:46:07.840
- So what happens when you run into that scenario


00:46:07.840 --> 00:46:11.000
on pytest, does it just pretend the first one wasn't there


00:46:11.000 --> 00:46:12.920
and it got overwritten before it got to it?


00:46:12.920 --> 00:46:15.360
- Yeah, just like, you know, any other,


00:46:15.360 --> 00:46:16.960
in any other Python module,


00:46:16.960 --> 00:46:19.120
if you write the function name again,


00:46:19.120 --> 00:46:21.920
it's, and even if you have different parameters,


00:46:21.920 --> 00:46:24.040
- It's so easy to do, it doesn't care.


00:46:24.040 --> 00:46:25.640
- It doesn't, Python doesn't care.


00:46:25.640 --> 00:46:28.440
- Yeah, so different web frameworks


00:46:28.440 --> 00:46:29.480
will handle this differently.


00:46:29.480 --> 00:46:32.060
Flask will throw an error and say,


00:46:32.060 --> 00:46:34.600
you've tried to use this function before,


00:46:34.600 --> 00:46:38.860
no, and do an app.get or something on it with the decorator.


00:46:38.860 --> 00:46:39.400
>> Yeah.


00:46:39.400 --> 00:46:42.300
>> For example, Pyramid, which I've used a lot,


00:46:42.300 --> 00:46:43.920
doesn't, it just erases it.


00:46:43.920 --> 00:46:47.000
So you just end up getting 404s for whatever was there before.


00:46:47.000 --> 00:46:50.200
You're like, "Well, it was just working. Where did it go?


00:46:50.200 --> 00:46:53.160
I didn't even touch that part of the program and it's just gone.


00:46:53.160 --> 00:46:55.480
It's like, I don't understand."


00:46:55.480 --> 00:47:00.480
I can only see that it's even less obvious with pytest.


00:47:00.480 --> 00:47:03.200
Like that, you would, how much would you notice


00:47:03.200 --> 00:47:04.600
when it goes dot, dot, dot, dot, dot,


00:47:04.600 --> 00:47:06.320
that like it didn't increment a dot


00:47:06.320 --> 00:47:07.400
when you added a test?


00:47:07.400 --> 00:47:08.240
Might not.


00:47:08.240 --> 00:47:14.440
- No, well, yeah, it's dangerous, but okay.


00:47:14.440 --> 00:47:15.880
So you get around that.


00:47:15.880 --> 00:47:18.400
It's the other thing of just like thinking about it.


00:47:18.400 --> 00:47:23.400
So if I write a test to begin with and I think,


00:47:23.640 --> 00:47:28.640
Well, I've set up like, okay, so if I go to this web,


00:47:28.640 --> 00:47:31.740
really I'm just making like a webpage thing.


00:47:31.740 --> 00:47:34.080
I just wanna make sure this page gets a 200.


00:47:34.080 --> 00:47:35.160
Is it 200, right?


00:47:35.160 --> 00:47:36.680
For the good. - Yeah, yeah.


00:47:36.680 --> 00:47:37.880
Yep. - And I wanna make sure


00:47:37.880 --> 00:47:39.540
that gets 200 in the titles, right?


00:47:39.540 --> 00:47:41.520
Or something like that.


00:47:41.520 --> 00:47:43.280
Now, I might have just a list.


00:47:43.280 --> 00:47:44.520
I mean, that would be an easy test


00:47:44.520 --> 00:47:48.840
just to make sure all my pages, normal pages are alive


00:47:48.840 --> 00:47:51.080
is to just go through and test all those.


00:47:51.080 --> 00:47:52.960
Now, I could either just have a list


00:47:52.960 --> 00:47:54.680
of all the different pages I wanna go to


00:47:54.680 --> 00:47:56.240
and just ping through those.


00:47:56.240 --> 00:47:59.160
And that could be a loop within my test,


00:47:59.160 --> 00:48:01.240
but that's a loop within a test


00:48:01.240 --> 00:48:02.220
at the assert at the bottom


00:48:02.220 --> 00:48:04.600
that doesn't count as the assert at the bottom.


00:48:04.600 --> 00:48:07.080
It's because you're asserting through the whole thing.


00:48:07.080 --> 00:48:09.440
Mace will just make that a parameterization


00:48:09.440 --> 00:48:14.180
and go through all the different pages you wanna hit.


00:48:14.180 --> 00:48:17.120
And for each of those pages, make sure it's a 200.


00:48:17.120 --> 00:48:19.360
And then you could also like have the title


00:48:19.360 --> 00:48:21.320
in the parameterization to say,


00:48:21.320 --> 00:48:23.280
This is the page, this is the title.


00:48:23.280 --> 00:48:26.040
Now for each of those, go through and test it.


00:48:26.040 --> 00:48:27.640
And those are different tests.


00:48:27.640 --> 00:48:30.840
And it's gonna be almost as easy to write one test


00:48:30.840 --> 00:48:35.340
as it is to write now a bunch of test cases


00:48:35.340 --> 00:48:36.540
with parameterization.


00:48:36.540 --> 00:48:42.240
But pytest has a whole bunch of cool parameterization tricks.


00:48:42.240 --> 00:48:44.800
You can do function parameterization,


00:48:44.800 --> 00:48:46.800
you can parameterize a fixture,


00:48:46.800 --> 00:48:49.480
you can even use pytest generate tests


00:48:49.480 --> 00:48:52.620
to do some fancy parameterization.


00:48:52.620 --> 00:48:55.420
But I, for the most part, if you're new to it,


00:48:55.420 --> 00:48:57.420
stick with function parameterization.


00:48:57.420 --> 00:49:00.740
It's powerful and hopefully that's all you need.


00:49:00.740 --> 00:49:01.580
So.


00:49:01.580 --> 00:49:03.340
- Yeah, if you've got all these different cases to test,


00:49:03.340 --> 00:49:08.120
I mean, the value of testing often


00:49:08.120 --> 00:49:09.420
is to give it the good value


00:49:09.420 --> 00:49:11.020
and see the good value comes out.


00:49:11.020 --> 00:49:11.840
- Yeah. - That's true.


00:49:11.840 --> 00:49:12.980
But it's also really valuable


00:49:12.980 --> 00:49:14.580
to give it all those weird edge cases


00:49:14.580 --> 00:49:16.940
where you wanna check boundaries.


00:49:16.940 --> 00:49:19.460
Like if I give it one less than it should have,


00:49:19.460 --> 00:49:21.420
it should tell me that's an error instead of crash.


00:49:21.420 --> 00:49:23.460
If I give it something,


00:49:23.460 --> 00:49:25.860
you know, like just all the little weird situations.


00:49:25.860 --> 00:49:27.340
So testing all the failing cases


00:49:27.340 --> 00:49:32.340
and having those scenarios as a parameterized story is nice.


00:49:32.340 --> 00:49:35.100
- And one of the comments, which I have seen before,


00:49:35.100 --> 00:49:36.300
and I kind of agree with,


00:49:36.300 --> 00:49:39.320
is that my code is dry and my tests are wet.


00:49:39.320 --> 00:49:42.640
What that means, and I,


00:49:42.640 --> 00:49:48.320
what that means is because dry testing,


00:49:48.320 --> 00:49:50.400
(laughs)


00:49:50.400 --> 00:49:54.380
People can go overboard with dry


00:49:54.380 --> 00:49:57.640
to the point where you can't understand what's going on.


00:49:57.640 --> 00:50:00.080
And so for, especially for tests,


00:50:00.080 --> 00:50:03.720
you want tests to tell a story of,


00:50:03.720 --> 00:50:07.720
I'm doing this thing and I did this other action


00:50:07.720 --> 00:50:11.040
and then now I can tell that it works because of this.


00:50:11.040 --> 00:50:13.840
And if you break that story up too much,


00:50:13.840 --> 00:50:17.680
then you don't know what the story is.


00:50:17.680 --> 00:50:20.040
So if like, if you hide your, all of your asserts


00:50:20.040 --> 00:50:23.480
in a helper function that just says like check stuff,


00:50:23.480 --> 00:50:26.720
it doesn't, you don't know what you're checking


00:50:26.720 --> 00:50:28.280
and it hides it too much.


00:50:28.280 --> 00:50:32.160
If you're gonna do that, make sure that you like name it


00:50:32.160 --> 00:50:33.660
something that is meaningful.


00:50:33.660 --> 00:50:36.400
And I like to have all of my assert helpers


00:50:36.400 --> 00:50:37.480
be start with assert.


00:50:37.480 --> 00:50:41.720
So like I could say, assert 200 and correct title,


00:50:41.720 --> 00:50:43.320
for instance, you could do that.


00:50:43.320 --> 00:50:45.840
That'd be fine.


00:50:45.840 --> 00:50:48.400
but one of the reasons for parameterization


00:50:48.400 --> 00:50:51.360
isn't just to type less,


00:50:51.360 --> 00:50:53.320
it's to be focused on what's failing.


00:50:53.320 --> 00:50:56.220
So let's say in that case I had before,


00:50:56.220 --> 00:50:59.600
my test failed with the loop,


00:50:59.600 --> 00:51:01.920
and I could say, well, okay,


00:51:01.920 --> 00:51:06.920
so one page on my website isn't working, which one?


00:51:06.920 --> 00:51:07.960
I have to go figure that out.


00:51:07.960 --> 00:51:09.440
I have to look at the error message.


00:51:09.440 --> 00:51:12.680
But if I had them iterated on the page name,


00:51:12.680 --> 00:51:16.080
I could go, oh, my contact one isn't returning.


00:51:16.080 --> 00:51:18.080
So there's something wrong with my contact page


00:51:18.080 --> 00:51:19.600
and I know exactly where to go.


00:51:19.600 --> 00:51:22.720
So isolating the test failure is good.


00:51:22.720 --> 00:51:25.280
- Yeah, there was a comment before about


00:51:25.280 --> 00:51:26.720
if you have multiple search,


00:51:26.720 --> 00:51:29.080
you might not see all of the errors,


00:51:29.080 --> 00:51:30.360
all the details about that.


00:51:30.360 --> 00:51:31.680
And we talked a little bit about that too.


00:51:31.680 --> 00:51:36.680
And this helps show the status for the different parameters


00:51:36.680 --> 00:51:39.500
instead of I just loop through all the options


00:51:39.500 --> 00:51:41.480
and make sure they all pass or there's an error.


00:51:41.480 --> 00:51:43.320
- Yeah, yep.


00:51:43.320 --> 00:51:45.800
And with like a website, for instance,


00:51:45.800 --> 00:51:48.700
there might be two pages.


00:51:48.700 --> 00:51:50.240
Whereas if you had them all in a loop,


00:51:50.240 --> 00:51:51.460
you'd only see the one, you're like,


00:51:51.460 --> 00:51:54.280
oh, contact pages for it was broken, I'll go fix that.


00:51:54.280 --> 00:51:56.680
And you come back, oh, something else is broken.


00:51:56.680 --> 00:51:59.960
Whereas if it had like three failures,


00:51:59.960 --> 00:52:02.880
you'd be like, oh, like seven of them are failing,


00:52:02.880 --> 00:52:05.280
all of a sudden, something else must be wrong.


00:52:05.280 --> 00:52:08.440
But anyway.


00:52:08.440 --> 00:52:11.920
- Yeah, related sort of on that same side,


00:52:11.920 --> 00:52:14.840
in my mind, this is like it taken to the maximum


00:52:14.840 --> 00:52:18.400
of parameterization is things like hypothesis,


00:52:18.400 --> 00:52:20.120
where you don't even tell what the parameters,


00:52:20.120 --> 00:52:24.920
you're like, vary some ideas and give it to the test.


00:52:24.920 --> 00:52:25.840
What do you think about this?


00:52:25.840 --> 00:52:27.780
You find this useful for you?


00:52:27.780 --> 00:52:30.200
- Well, it doesn't, I do.


00:52:30.200 --> 00:52:32.960
Hypothesis is an awesome tool.


00:52:32.960 --> 00:52:34.280
It doesn't really,


00:52:34.280 --> 00:52:37.920
it helps you think about a problem differently


00:52:37.920 --> 00:52:41.560
'cause you have to think about like, what are the,


00:52:41.560 --> 00:52:43.360
'cause you can't say like add,


00:52:43.360 --> 00:52:46.840
you can't test add by making sure that it returns four


00:52:46.840 --> 00:52:49.880
because it's only gonna return four in particular cases.


00:52:49.880 --> 00:52:52.920
But you can say, hmm, maybe all the,


00:52:52.920 --> 00:52:55.240
test a whole bunch of positive numbers


00:52:55.240 --> 00:52:57.960
and I wanna make sure that the result is positive.


00:52:57.960 --> 00:52:59.800
And so there's like these aspects


00:52:59.800 --> 00:53:05.080
of your system that you can test for.


00:53:05.080 --> 00:53:08.600
But the other thing that Pyth hypothesis is awesome at


00:53:08.600 --> 00:53:10.720
isn't actually testing the output.


00:53:10.720 --> 00:53:13.120
It's just making sure your code doesn't blow up.


00:53:13.120 --> 00:53:16.880
So throwing a hypothesis at systems,


00:53:16.880 --> 00:53:19.920
I think the first awesome thing about it


00:53:19.920 --> 00:53:22.640
is just it tests some corner cases


00:53:22.640 --> 00:53:25.040
that your code might not handle right.


00:53:25.040 --> 00:53:28.200
So anything that throws an exception


00:53:28.200 --> 00:53:31.160
is gonna get dealt with as, you know,


00:53:31.160 --> 00:53:34.200
pytest is gonna fail because an exception's hit.


00:53:34.200 --> 00:53:35.780
So that helps.


00:53:35.780 --> 00:53:37.840
- Maybe not everyone is familiar with the hypothesis.


00:53:37.840 --> 00:53:40.400
Maybe just tell them like a little bit how it works


00:53:40.400 --> 00:53:43.700
and how it's like primitivization, but not exactly.


00:53:43.700 --> 00:53:45.820
- Well, hypothesis is just going,


00:53:45.820 --> 00:53:49.360
so you set up strategies and different things around,


00:53:49.360 --> 00:53:53.320
and they're decorators you put on top of your test.


00:53:53.320 --> 00:53:57.680
And then like, you've got an example of like,


00:53:57.680 --> 00:54:03.520
given a string that's text, and then you have S.


00:54:03.880 --> 00:54:08.800
So somehow a hypothesis will fill in the variables


00:54:08.800 --> 00:54:10.680
that you put there.


00:54:10.680 --> 00:54:13.800
Like normally if a test had a parameter,


00:54:13.800 --> 00:54:16.580
it would either be a parameterization or a fixture,


00:54:16.580 --> 00:54:19.400
but hypothesis utilizes that also


00:54:19.400 --> 00:54:22.480
and fills it in with hypothesis values.


00:54:22.480 --> 00:54:26.400
And so if you give it, if you say it's a string,


00:54:26.400 --> 00:54:27.800
it'll come up with a whole bunch of them


00:54:27.800 --> 00:54:31.040
and it'll run your test a whole bunch of times based on,


00:54:31.040 --> 00:54:32.920
and I don't remember what the default is,


00:54:32.920 --> 00:54:34.920
but it's quite a few.


00:54:34.920 --> 00:54:37.240
It also checks the time, I think.


00:54:37.240 --> 00:54:39.600
It doesn't make sure it doesn't like run for hours


00:54:39.600 --> 00:54:40.760
or something like that,


00:54:40.760 --> 00:54:45.320
but you can tell it how robust to do


00:54:45.320 --> 00:54:47.740
and it just like makes up stuff.


00:54:47.740 --> 00:54:50.440
But the people behind the hypothesis


00:54:50.440 --> 00:54:52.080
actually are pretty good at coming up


00:54:52.080 --> 00:54:53.620
with some decent test cases


00:54:53.620 --> 00:54:55.520
that break a lot of kinds of software.


00:54:55.520 --> 00:55:00.520
So that bit of that we think of as a test,


00:55:00.880 --> 00:55:04.180
The old style that you think of as a test engineer of coming up


00:55:04.180 --> 00:55:06.780
with wacky values, you don't need that anymore.


00:55:06.780 --> 00:55:10.540
You can just have hypothesis come up with wacky values for you.


00:55:10.540 --> 00:55:11.220
Right.


00:55:11.220 --> 00:55:13.940
Think of strategies of, well, these scenarios


00:55:13.940 --> 00:55:17.460
we should try to run through and just have it automatic.


00:55:17.460 --> 00:55:20.940
But it's like things that you don't know that are


00:55:20.940 --> 00:55:22.140
constraints on your system.


00:55:22.140 --> 00:55:28.060
Like maybe your input system, hypothesis tells you, guess what?


00:55:28.060 --> 00:55:30.860
It breaks on all German names or something like that.


00:55:30.860 --> 00:55:35.860
or Unicode and you're like, oh, yeah, actually I don't,


00:55:35.860 --> 00:55:39.140
that's neat, but I don't actually expect it


00:55:39.140 --> 00:55:40.760
to ever get called with Unicode.


00:55:40.760 --> 00:55:44.040
So you can restrict the strategies and stuff.


00:55:44.040 --> 00:55:51.160
But, so Jeff asks, I can't hear you.


00:55:51.160 --> 00:55:55.940
- Oh, sorry.


00:55:55.940 --> 00:55:59.480
Yeah, just maybe the last thing on hypothesis here is,


00:55:59.480 --> 00:56:02.380
Jeff asks, "How reproducible are tests with hypothesis?"


00:56:02.380 --> 00:56:04.320
- I don't know.


00:56:04.320 --> 00:56:08.480
- They do say that it remembers the failing example.


00:56:08.480 --> 00:56:11.520
So into like SQLite database or something.


00:56:11.520 --> 00:56:16.080
So maybe it'll replay that potentially


00:56:16.080 --> 00:56:17.440
and I'll try the failing ones before,


00:56:17.440 --> 00:56:19.220
but I haven't played with that either.


00:56:19.220 --> 00:56:22.320
- I think it reports like some seed thing or something


00:56:22.320 --> 00:56:26.520
that you can reseed it to be the same run


00:56:26.520 --> 00:56:28.220
or something like that.


00:56:28.220 --> 00:56:30.500
- Yeah, there's a whole section


00:56:30.500 --> 00:56:31.780
on reproducing failures here.


00:56:31.780 --> 00:56:33.040
And it does say you can provide,


00:56:33.040 --> 00:56:35.240
one of the things you can say is provide examples


00:56:35.240 --> 00:56:37.340
of in addition to the random stuff you pick,


00:56:37.340 --> 00:56:38.400
please do these things.


00:56:38.400 --> 00:56:41.020
And so I suppose you could take a failing one


00:56:41.020 --> 00:56:41.860
and put it in there.


00:56:41.860 --> 00:56:44.700
Or if you always do it with the same seed,


00:56:44.700 --> 00:56:48.220
that it's randomness becomes deterministic.


00:56:48.220 --> 00:56:49.060
Yeah.


00:56:49.060 --> 00:56:51.020
(laughing)


00:56:51.020 --> 00:56:53.020
Which is kind of odd, but.


00:56:53.020 --> 00:56:55.660
- Pseudo random is part of CS, yes.


00:56:55.660 --> 00:56:56.560
- Yes, indeed.


00:56:58.020 --> 00:56:59.660
Brian, we're pretty short on time.


00:56:59.660 --> 00:57:01.220
What else do you want to throw out there real quick


00:57:01.220 --> 00:57:02.060
before we--


00:57:02.060 --> 00:57:06.100
- I think I want to circle back to the beginning


00:57:06.100 --> 00:57:10.320
and just say pytest can do a whole bunch of cool stuff.


00:57:10.320 --> 00:57:11.580
Don't do it all at once.


00:57:11.580 --> 00:57:14.820
Gradually add bells and whistles,


00:57:14.820 --> 00:57:16.860
especially if you're working on a team


00:57:16.860 --> 00:57:19.300
because it's a different mindset.


00:57:19.300 --> 00:57:23.400
So it's a make sure that the team is all up to speed.


00:57:23.400 --> 00:57:26.420
You want to make sure that, like all software,


00:57:26.420 --> 00:57:28.100
Don't design a system so complex


00:57:28.100 --> 00:57:30.140
that you're not smart enough to debug it.


00:57:30.140 --> 00:57:33.220
- I love thinking about that.


00:57:33.220 --> 00:57:34.380
That's a really good way to put it.


00:57:34.380 --> 00:57:38.620
Because if you write the most clever code that you can,


00:57:38.620 --> 00:57:40.700
you're right at the limit of your ability


00:57:40.700 --> 00:57:42.300
to like keep it in your mind and understand it.


00:57:42.300 --> 00:57:44.780
And debugging code is harder than writing code, so.


00:57:44.780 --> 00:57:47.420
- You're not qualified to debug your own code.


00:57:47.420 --> 00:57:49.300
- You're writing codes that you can't,


00:57:49.300 --> 00:57:51.740
writing code that your body can't pay the check for


00:57:51.740 --> 00:57:52.580
or whatever.


00:57:52.580 --> 00:57:54.980
- Yeah, I can't remember who said that first,


00:57:54.980 --> 00:57:57.280
but it's definitely very true.


00:57:57.280 --> 00:57:58.880
- It is indeed.


00:57:58.880 --> 00:57:59.720
Awesome.


00:57:59.720 --> 00:58:00.800
Well, thank you for putting this together.


00:58:00.800 --> 00:58:03.160
Obviously I'll link to this in the show notes.


00:58:03.160 --> 00:58:04.200
People can check out your course,


00:58:04.200 --> 00:58:05.800
they can check out your book


00:58:05.800 --> 00:58:10.200
and yeah, it's all your other pytest things.


00:58:10.200 --> 00:58:12.560
And we're looking forward to having test and code back.


00:58:12.560 --> 00:58:14.960
- And also everybody should, that's listening here


00:58:14.960 --> 00:58:16.600
should be listening on Python Bytes.


00:58:16.600 --> 00:58:17.960
I think you'll enjoy it.


00:58:17.960 --> 00:58:18.800
- I agree.


00:58:18.800 --> 00:58:19.640
A lot of fun over there.


00:58:19.640 --> 00:58:20.460
- All right.


00:58:20.460 --> 00:58:21.300
Thanks a lot, Michael.


00:58:21.300 --> 00:58:22.140
- Yeah.


00:58:22.140 --> 00:58:22.960
Thank you for being here, Brian.


00:58:22.960 --> 00:58:24.360
Thank you everyone for listening.


00:58:24.360 --> 00:58:25.200
See y'all later.


00:58:25.200 --> 00:58:35.200
[BLANK_AUDIO]

