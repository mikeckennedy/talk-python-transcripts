WEBVTT

00:00:00.000 --> 00:00:07.000
Hey, all. Nicolas, Fabio, welcome to Talk Python to Me.


00:00:07.000 --> 00:00:10.000
>> Hi. How are you, Michael?


00:00:10.000 --> 00:00:15.000
>> Doing well. I think I should say welcome back. I've been on the show a couple of times


00:00:15.000 --> 00:00:22.000
for various things. Most recently, other than this, also about PyScript and


00:00:22.000 --> 00:00:28.000
MicroPython, which we'll touch a little bit on as well. But, yeah, excited to have you both


00:00:28.000 --> 00:00:31.860
We're excited as always to be talking about PyScripts.


00:00:31.860 --> 00:00:33.440
One day I can just, I feel it.


00:00:33.440 --> 00:00:34.960
We're gonna be living the dream.


00:00:34.960 --> 00:00:36.480
Python in the browser.


00:00:36.480 --> 00:00:38.480
It's gonna be fantastic.


00:00:38.480 --> 00:00:39.320
Let's do it.


00:00:39.320 --> 00:00:41.100
- Hope so.


00:00:41.100 --> 00:00:42.440
Let's hope, yes.


00:00:42.440 --> 00:00:44.320
- I mean, is the dream real now?


00:00:44.320 --> 00:00:46.000
That's kind of part of the question.


00:00:46.000 --> 00:00:49.120
And we'll see how it's to some degree real


00:00:49.120 --> 00:00:51.080
and you all are making great progress on that.


00:00:51.080 --> 00:00:52.820
- Spoiler alert, that's the thing.


00:00:52.820 --> 00:00:55.120
(laughing)


00:00:55.120 --> 00:00:55.960
- Yeah.


00:00:55.960 --> 00:00:59.360
Nicholas and I are laughing for a reason too,


00:00:59.360 --> 00:01:02.120
which we can't wait to talk about it.


00:01:02.120 --> 00:01:03.440
So that's gonna be good.


00:01:03.440 --> 00:01:05.200
- Yeah, yeah, good.


00:01:05.200 --> 00:01:08.400
Well, we can't wait to hear about it.


00:01:08.400 --> 00:01:10.480
But before we do, like I said,


00:01:10.480 --> 00:01:13.640
you both have been on the show for a couple of reasons,


00:01:13.640 --> 00:01:15.920
a couple of episodes previously,


00:01:15.920 --> 00:01:18.000
but quick introductions for folks


00:01:18.000 --> 00:01:19.600
that don't necessarily know you.


00:01:19.600 --> 00:01:22.880
- You wanna start, Nicholas?


00:01:22.880 --> 00:01:24.720
- Okay, I'll go first.


00:01:24.720 --> 00:01:27.840
I'm Nicholas, I'm a principal engineer


00:01:27.840 --> 00:01:30.080
on the PyScript team at Anaconda.


00:01:30.080 --> 00:01:36.360
And my passion is Python and education,


00:01:36.360 --> 00:01:40.660
which is one of the other reasons


00:01:40.660 --> 00:01:42.920
why I was on the show earlier.


00:01:42.920 --> 00:01:45.280
And I've also been involved in all sorts


00:01:45.280 --> 00:01:48.760
of different aspects of the Python community as well.


00:01:48.760 --> 00:01:52.400
And other interesting things like,


00:01:52.400 --> 00:01:55.120
Oh, have I got one? I think I have


00:01:55.120 --> 00:01:59.680
Uh pbc micro bit was something that I was involved in and


00:01:59.680 --> 00:02:01.200
Yeah


00:02:01.200 --> 00:02:05.600
Stuff like that. So yeah, that's me. But right now i'm doing pi script


00:02:05.600 --> 00:02:09.440
And I am joined by my esteemed colleague fabio


00:02:09.440 --> 00:02:13.360
Thank you, nicholas, um


00:02:13.360 --> 00:02:20.480
Uh, well as you can tell I work with nicholas at anaconda, you know creator of pi script.


00:02:21.520 --> 00:02:26.080
been in the community for a long time as well.


00:02:26.080 --> 00:02:29.200
Probably that's not focused on numbers or years.


00:02:29.200 --> 00:02:35.600
But I'm very interested in, just like Nikolaas, Python for


00:02:35.600 --> 00:02:39.760
education as well and the whole community aspect of it


00:02:39.760 --> 00:02:43.280
which is mostly why I am here, I would say.


00:02:43.280 --> 00:02:47.600
And so I've been involved in a lot of community things,


00:02:47.600 --> 00:02:52.480
was chairman of EuroPython for, I think, five, six years.


00:02:52.480 --> 00:02:56.320
Then, you know, chair of Python Italy,


00:02:56.320 --> 00:02:59.440
co-founder of Python Italia, et cetera. Always loved


00:02:59.440 --> 00:03:05.600
the community aspect of Python. But yeah, and happy to be here for


00:03:05.600 --> 00:03:09.040
having us. Yeah, it's great to have you as always.


00:03:09.040 --> 00:03:13.200
You both mentioned having an interest or background or both


00:03:13.200 --> 00:03:15.480
in education.


00:03:15.480 --> 00:03:19.520
And Nicholas, I think probably the high watermark


00:03:19.520 --> 00:03:21.840
is probably the BBC micro bit, which


00:03:21.840 --> 00:03:24.680
touched the lives of more students


00:03:24.680 --> 00:03:31.240
than almost any other regular school teacher


00:03:31.240 --> 00:03:33.480
by a massive, massive margin-- millions of kids.


00:03:33.480 --> 00:03:35.120
That's amazing.


00:03:35.120 --> 00:03:39.640
But I think another angle here, teaching people


00:03:39.640 --> 00:03:42.120
to work with Python and getting them started in programming,


00:03:42.120 --> 00:03:48.200
going from I have this idea or I've learned what I got to do in programming until I can


00:03:48.200 --> 00:03:53.160
make it happen on a machine that is not set up for programming necessarily.


00:03:53.160 --> 00:03:55.400
That gap is pretty far with Python.


00:03:55.400 --> 00:03:56.960
It's pretty far with most languages, right?


00:03:56.960 --> 00:04:01.080
Like you want to do Ruby, probably got to set up some kind of Ruby thing.


00:04:01.080 --> 00:04:04.760
You want to do Java, a bunch of stuff there, right?


00:04:04.760 --> 00:04:10.640
But being able to do it in your browser or something you just open a page and run it


00:04:10.640 --> 00:04:14.640
Like, there's this educational empowering aspect to it.


00:04:14.640 --> 00:04:16.080
Yeah, absolutely.


00:04:16.080 --> 00:04:20.960
And you wouldn't believe the interesting situations


00:04:20.960 --> 00:04:25.200
that teachers have to work in at school.


00:04:25.200 --> 00:04:28.640
And locked down computers and things like that,


00:04:28.640 --> 00:04:32.280
where their sysadmins won't install Python or any other kind


00:04:32.280 --> 00:04:35.360
of programming language, despite here in the UK


00:04:35.360 --> 00:04:39.120
and all over the US, programming being part of the curriculum.


00:04:39.120 --> 00:04:43.520
It's mandated in the national curriculum here and I was in a call yesterday with someone who just told me that


00:04:43.520 --> 00:04:51.520
The norwegians have now got programming mandatory in their national curriculum. and nobody seems to have told the school admins this


00:04:51.520 --> 00:04:57.520
Um, so what's the piece of software that was running on everybody's computer in the school? It's a browser


00:04:57.520 --> 00:05:00.000
So I see where this conversation is going


00:05:00.000 --> 00:05:07.120
Wouldn't it be great if you had python that ran in the browser? It would solve all your installation problems if you're an educator


00:05:07.120 --> 00:05:08.080
Yeah


00:05:08.080 --> 00:05:15.120
I mean, how much of JavaScript's rise to fame and continued, not quite dominance, but almost


00:05:15.120 --> 00:05:19.600
certainly in the front end side dominance has to do just with the fact that it's possible?


00:05:19.600 --> 00:05:23.200
Yes, yes, totally.


00:05:23.200 --> 00:05:27.920
It's not necessarily the best, it's not necessarily what people want, at least not in the early days,


00:05:27.920 --> 00:05:32.160
but it's possible. And, and that says a lot, I think.


00:05:32.800 --> 00:05:34.240
I think


00:05:34.240 --> 00:05:36.240
You know javascript


00:05:36.240 --> 00:05:39.040
Has lots of really. Um


00:05:39.040 --> 00:05:43.760
Wonderful aspects to it. I've been using javascript for almost 20 years


00:05:43.760 --> 00:05:46.240
But it's certainly not


00:05:46.240 --> 00:05:52.820
A beginner friendly language. I think you could say that with some confidence. You could try teaching it to beginners


00:05:52.820 --> 00:05:55.920
but with all the coercion rules and


00:05:55.920 --> 00:05:58.560
uh gotchas that that


00:05:58.800 --> 00:06:03.540
Makes sense if you understand javascript, but it's quite a journey to get you to that understanding


00:06:03.540 --> 00:06:05.920
um with all of that, it's


00:06:05.920 --> 00:06:11.840
It's very it's hard enough just to sort of concentrate on getting hello world working and things like that


00:06:11.840 --> 00:06:17.440
Just a simple proof of concept to show that your development environment is working


00:06:17.440 --> 00:06:20.000
but if the language that you're using is


00:06:20.000 --> 00:06:25.220
The equivalent of trying to teach a five-year-old beginner violinist with a stradivarius


00:06:25.840 --> 00:06:30.160
Um, you know, they're not gonna kind of get it. Okay, you give them


00:06:30.160 --> 00:06:38.000
You give them an instrument that helps them take the first steps into programming and python as a programming language


00:06:38.000 --> 00:06:40.480
And this is at the core of of nito's


00:06:40.480 --> 00:06:45.360
Mission at the very beginning abc the language that he based it off was a teaching language


00:06:45.360 --> 00:06:50.080
So education and learning and teaching and making sure that python is teachable


00:06:50.080 --> 00:06:55.280
Is is a is a part of the dna, which is it is it's been around since 1989


00:06:55.360 --> 00:06:57.120
I guess you put it that way, hasn't it?


00:06:57.120 --> 00:06:57.940
- Yeah.


00:06:57.940 --> 00:06:59.960
- That is a striking difference, honestly,


00:06:59.960 --> 00:07:03.280
between Python and almost all languages today, right?


00:07:03.280 --> 00:07:07.120
Like why Basic was super popular,


00:07:07.120 --> 00:07:09.120
why JavaScript is super popular, et cetera,


00:07:09.120 --> 00:07:10.880
because it's your only option, right?


00:07:10.880 --> 00:07:12.700
And it's the thing, or if not,


00:07:12.700 --> 00:07:15.160
it's the thing that you have right away there,


00:07:15.160 --> 00:07:16.520
already installed for you.


00:07:16.520 --> 00:07:17.960
And you don't have to go through the pain


00:07:17.960 --> 00:07:19.400
of trying to download things,


00:07:19.400 --> 00:07:22.040
install on your system and whatnot.


00:07:22.040 --> 00:07:25.680
Python, on the contrary, it's very interesting.


00:07:25.680 --> 00:07:28.040
It's the most popular language, but it's


00:07:28.040 --> 00:07:31.280
because people in specific domain areas


00:07:31.280 --> 00:07:35.040
chose Python because it was the easiest and the most expressive


00:07:35.040 --> 00:07:37.800
and tailored for education.


00:07:37.800 --> 00:07:42.720
And then it started competing with very specific languages


00:07:42.720 --> 00:07:44.920
that were born to do specific things.


00:07:44.920 --> 00:07:47.480
Like R is another example.


00:07:47.480 --> 00:07:51.360
Like R was born with that goal.


00:07:51.360 --> 00:07:53.860
and that's why it's so good at it.


00:07:53.860 --> 00:07:56.760
Python just happens to be very easy to understand.


00:07:56.760 --> 00:08:01.280
So data scientists and people adopt it, which is great.


00:08:01.280 --> 00:08:03.240
Python actually, just to close,


00:08:03.240 --> 00:08:05.480
Python actually is the most popular language,


00:08:05.480 --> 00:08:09.780
but it has a horrible story for mobile


00:08:09.780 --> 00:08:12.040
and browser and tablets,


00:08:12.040 --> 00:08:15.920
the most popular hardware and software on earth, right?


00:08:15.920 --> 00:08:19.520
And it's still the most popular, which is mind blowing.


00:08:19.520 --> 00:08:26.000
Yeah, yeah, I think what it would be if it were good on both right? Yeah quite but what you say Fabio it reminds me of


00:08:26.000 --> 00:08:28.960
Who is it a keynote? uh


00:08:28.960 --> 00:08:33.520
Maybe the pre-covid uh keynote at pycon us


00:08:33.520 --> 00:08:38.560
Where I think one of the keynotes said python is the world's best second best language


00:08:38.560 --> 00:08:44.640
And I think that's kind of the essence of what what you've just said r is great for doing stats and maths and things


00:08:44.640 --> 00:08:46.560
But so is python


00:08:46.560 --> 00:08:49.240
You know, it might not be up there with R


00:08:49.240 --> 00:08:53.560
for very specialist niche mathematical things,


00:08:53.560 --> 00:08:55.200
but Python's good enough.


00:08:55.200 --> 00:08:56.960
And because it's easy to learn,


00:08:56.960 --> 00:08:59.240
folks are gonna go fly with that.


00:08:59.240 --> 00:09:02.760
- Yeah.


00:09:02.760 --> 00:09:06.160
- Yeah, I think, building on what you said, Fabio,


00:09:06.160 --> 00:09:09.720
I think one of the really unique aspects of Python,


00:09:09.720 --> 00:09:13.520
you know, compare this to like Visual Basic


00:09:13.520 --> 00:09:15.800
or the super simple programming languages


00:09:15.800 --> 00:09:18.500
like Scratch or the super high-end ones


00:09:18.500 --> 00:09:23.500
like C++ and Rust, Python is a full spectrum language.


00:09:23.500 --> 00:09:27.300
You can start really easy with a super partial understanding.


00:09:27.300 --> 00:09:28.760
You don't even know what classes are,


00:09:28.760 --> 00:09:30.980
but you can put six lines together


00:09:30.980 --> 00:09:32.460
and you can do cool stuff.


00:09:32.460 --> 00:09:36.340
That's like Scratch and Basic and stuff.


00:09:36.340 --> 00:09:40.040
But those languages run out of real programming ideas


00:09:40.040 --> 00:09:42.460
really soon where you can just keep growing into Python


00:09:42.460 --> 00:09:45.480
till you get to the C++ and Rust style.


00:09:45.480 --> 00:09:48.160
Conversely, if you want to start with C++ or Rust,


00:09:48.160 --> 00:09:51.960
you don't want to teach a beginner what avoid *** is.


00:09:51.960 --> 00:09:54.240
You know, like that's down the road,


00:09:54.240 --> 00:09:56.360
but you'll hit with that kind of stuff soon.


00:09:56.360 --> 00:09:59.240
So I think that that's a little bit of its magic as well.


00:09:59.240 --> 00:10:01.560
And what you all are doing to bring that magic


00:10:01.560 --> 00:10:05.000
to the front end of the web world


00:10:05.000 --> 00:10:08.840
and kind of through the transitive property a little bit


00:10:08.840 --> 00:10:10.600
through progressive web apps


00:10:10.600 --> 00:10:13.800
to things that run in really good ways


00:10:13.800 --> 00:10:16.720
on mobile and tablet as well.


00:10:16.720 --> 00:10:20.280
It really unlocks a lot and I'm super excited for it.


00:10:20.280 --> 00:10:24.640
So I know I've had you on before to talk about this,


00:10:24.640 --> 00:10:28.040
but I'm sure there's some folks out there like,


00:10:28.040 --> 00:10:29.080
this sounds amazing.


00:10:29.080 --> 00:10:34.080
What is this angle bracket Python pi-script in my HTML?


00:10:34.080 --> 00:10:37.480
What is this pi-script stuff?


00:10:37.480 --> 00:10:38.320
Tell us about it.


00:10:40.020 --> 00:10:44.660
Cool, let me give you a one minute TL;DR.


00:10:44.660 --> 00:10:48.180
So basically, PyScript is a platform


00:10:48.180 --> 00:10:52.020
that allows users to create applications


00:10:52.020 --> 00:10:54.080
or frameworks on top of it,


00:10:54.080 --> 00:10:57.060
and supports Python as a language.


00:10:57.060 --> 00:11:01.660
And it basically uses the browser as technology


00:11:01.660 --> 00:11:05.660
as its vector, right?


00:11:05.660 --> 00:11:09.080
It treats the browser as almost like a virtual machine


00:11:09.080 --> 00:11:10.400
they can move around.


00:11:10.400 --> 00:11:15.400
And then because of the current stack around WASM,


00:11:15.400 --> 00:11:18.680
WebAssembly on the browser technology,


00:11:18.680 --> 00:11:23.680
we are now able to run Python inside,


00:11:23.680 --> 00:11:25.920
you know, either WASI or MScripten,


00:11:25.920 --> 00:11:28.800
which are just implementations of WebAssembly


00:11:28.800 --> 00:11:30.320
on the browser.


00:11:30.320 --> 00:11:34.880
And PyScript sits on top of interpreters.


00:11:34.880 --> 00:11:37.360
So you have the browser, WebAssembly,


00:11:37.360 --> 00:11:41.340
Mscript and Uruwazi, and then a Python implementation,


00:11:41.340 --> 00:11:45.040
Pyodide or MicroPython or other things like this.


00:11:45.040 --> 00:11:50.040
And PyScript goes on top by providing a friendly interface,


00:11:50.040 --> 00:11:52.360
higher level APIs that are, you know,


00:11:52.360 --> 00:11:56.840
Pythonic and friendly, allows extensibility with plugins


00:11:56.840 --> 00:11:59.400
and things like this to create an ecosystem.


00:11:59.400 --> 00:12:04.200
And basically what we wanna do is reuse the ecosystem.


00:12:04.200 --> 00:12:06.920
As much as we can, we don't wanna reinvent anything.


00:12:06.920 --> 00:12:13.080
Actually, that's one of the things that I'm most proud of it during this first year,


00:12:13.080 --> 00:12:18.280
which is I think we made really good progress in helping other projects that are developing


00:12:18.280 --> 00:12:21.560
and making Python happen on the browser.


00:12:21.560 --> 00:12:31.320
So, long story short, PyScript allows you through those tags, PyScript or PyConfig or PyRapple,


00:12:31.320 --> 00:12:33.900
to define what's my environment,


00:12:33.900 --> 00:12:37.020
what packages I want to install and whatnot.


00:12:37.020 --> 00:12:39.520
And then with the PyScript script,


00:12:39.520 --> 00:12:43.520
you can define scripts that run your application


00:12:43.520 --> 00:12:46.200
and then just use it.


00:12:46.200 --> 00:12:48.320
You don't need to install anything,


00:12:48.320 --> 00:12:51.000
to download anything, it just works on the browser.


00:12:51.000 --> 00:12:53.320
- Yeah.


00:12:53.320 --> 00:12:56.800
Excellent. I think maybe let me just give one more piece,


00:12:56.800 --> 00:12:59.120
one more resource for folks out there


00:12:59.120 --> 00:13:00.800
who might be interested.


00:13:00.800 --> 00:13:03.640
Have you all seen the birth and death of JavaScript by Gabriel?


00:13:03.640 --> 00:13:04.140
All right.


00:13:04.140 --> 00:13:04.640
[LAUGHTER]


00:13:04.640 --> 00:13:05.140
It's easy.


00:13:05.140 --> 00:13:06.840
I was there when he gave it.


00:13:06.840 --> 00:13:08.920
Oh my gosh.


00:13:08.920 --> 00:13:10.880
What was the crowd's reaction like?


00:13:10.880 --> 00:13:14.000
Oh, we were just strolling around laughing.


00:13:14.000 --> 00:13:14.720
It was great.


00:13:14.720 --> 00:13:15.680
It was great delivery.


00:13:15.680 --> 00:13:16.180
Yeah.


00:13:16.180 --> 00:13:20.560
So this is a, let's see, 15 minute, 30 minute presentation


00:13:20.560 --> 00:13:22.520
he gave at PyCon 2014.


00:13:22.520 --> 00:13:27.920
So quite, quite outdated in web technology evolution speed.


00:13:27.920 --> 00:13:29.600
But I throw this out there because it's


00:13:29.600 --> 00:13:32.960
both an amazing comedy skit, but also super,


00:13:32.960 --> 00:13:39.520
super nice buildup of how you got to places like now


00:13:39.520 --> 00:13:43.320
with Emscripten and WebAssembly,


00:13:43.320 --> 00:13:45.760
and how do you take C code like CPython


00:13:45.760 --> 00:13:49.260
and run it on top of the browser on the front end.


00:13:49.260 --> 00:13:51.160
So people are interested, they can, you know,


00:13:51.160 --> 00:13:53.200
they are like, what is all this magic?


00:13:53.200 --> 00:13:55.860
You can have both a really good laugh and watch that.


00:13:55.860 --> 00:13:56.700
That was good.


00:13:57.560 --> 00:14:02.560
So with PyScript, you can write, just like in JavaScript,


00:14:02.560 --> 00:14:09.800
you can write JavaScript, or in this case, Python,


00:14:09.800 --> 00:14:11.260
in the browser, right?


00:14:11.260 --> 00:14:13.380
Like you could just, like you could say,


00:14:13.380 --> 00:14:14.500
angle bracket JavaScript,


00:14:14.500 --> 00:14:16.340
and just start writing JavaScript code.


00:14:16.340 --> 00:14:18.220
Here you can say, Py-script,


00:14:18.220 --> 00:14:20.540
and then you can say print, you know,


00:14:20.540 --> 00:14:23.480
hello from Python or whatever, and it'll run,


00:14:24.980 --> 00:14:28.780
but you can also have more well-structured applications, right?


00:14:28.780 --> 00:14:32.180
-Yes. -I'm thinking I might even lean so far


00:14:32.180 --> 00:14:35.380
saying you should have more well-structured applications.


00:14:35.380 --> 00:14:37.380
-Yes. -What do you all think?


00:14:37.380 --> 00:14:40.060
We're going to take this one, Nicholas.


00:14:40.060 --> 00:14:42.060
You want to take it? Yeah, go for it.


00:14:42.060 --> 00:14:44.060
Oh, I was asking if you wanted to take it.


00:14:44.060 --> 00:14:46.060
Oh, right. Sorry, I misheard.


00:14:46.060 --> 00:14:50.560
Yeah.


00:14:51.860 --> 00:14:53.860
Yes, I don't want to hear this.


00:14:53.860 --> 00:14:55.860
It is the short answer.


00:14:55.860 --> 00:14:57.860
Who doesn't want well-structured applications?


00:14:57.860 --> 00:14:59.860
[LAUGHTER]


00:14:59.860 --> 00:15:01.860
I'll take this one.


00:15:01.860 --> 00:15:03.860
Okay, go for it.


00:15:03.860 --> 00:15:07.860
One thing about PyScript and that we are actually trying to work a lot on it,


00:15:07.860 --> 00:15:10.860
about it, is that it gives a lot of freedom, as you said.


00:15:10.860 --> 00:15:13.860
You can put tags in there. It's just HTML.


00:15:13.860 --> 00:15:18.860
So everything you have access to in an HTML page,


00:15:18.860 --> 00:15:21.820
you should have access to WinFileScript as well.


00:15:21.820 --> 00:15:24.460
So like your tags in the page, your scripts,


00:15:24.460 --> 00:15:29.340
if you loaded anything in your JavaScript scope,


00:15:29.340 --> 00:15:32.220
you can import those things in FileScript and say,


00:15:32.220 --> 00:15:35.180
from JavaScript, import this and this is run.


00:15:35.180 --> 00:15:39.020
Actually, one of the things that we're working right now


00:15:39.020 --> 00:15:42.620
is actually going to explore that even more.


00:15:42.620 --> 00:15:44.300
And we're going to demo later.


00:15:45.660 --> 00:15:52.620
We have currently a next branch where we are redesigning the core of Firescript and making it


00:15:52.620 --> 00:16:00.860
smaller, fully web-based, fixing most of the bugs and the very crappy code that I wrote at the


00:16:00.860 --> 00:16:09.980
beginning. And we had an amazing addition to the team from Andrea who's been in tech and on the


00:16:09.980 --> 00:16:11.660
the web for a lifetime.


00:16:11.660 --> 00:16:13.220
And he's amazing.


00:16:13.220 --> 00:16:16.940
And he's bringing that aspect that we lacked in the team.


00:16:16.940 --> 00:16:18.900
Web-native point of view.


00:16:18.900 --> 00:16:23.140
Well, Pythonists and Python geeks, so we missed that.


00:16:23.140 --> 00:16:26.260
So now we're going to allow also execution in workers


00:16:26.260 --> 00:16:28.220
or blocking calls.


00:16:28.220 --> 00:16:32.580
Or actually, we support other languages as well.


00:16:32.580 --> 00:16:36.060
We have demos with Lua or Ruby and things like this.


00:16:36.060 --> 00:16:38.740
And I think that's part of the vision


00:16:38.740 --> 00:16:43.020
where we want a PyScript to be a tool that allows you


00:16:43.020 --> 00:16:48.180
to almost do anything with any language and deploy anywhere.


00:16:48.180 --> 00:16:51.060
It's beyond Python.


00:16:51.060 --> 00:16:56.180
Even if Python is the primary citizen there,


00:16:56.180 --> 00:17:02.060
we want to make sure that we are unlocking everything for all the users.


00:17:02.060 --> 00:17:05.300
>> I'm sure it is.


00:17:05.300 --> 00:17:10.540
Do you see an analogy with like Jupyter going from IPython notebooks


00:17:10.540 --> 00:17:14.380
to Jupyter notebooks and starting to bring on a little,


00:17:14.380 --> 00:17:17.980
a broader view of the ecosystem, but still kind of being Python at heart?


00:17:17.980 --> 00:17:21.020
Yeah, I think so.


00:17:21.020 --> 00:17:24.580
I think in a different way than Jupyter.


00:17:24.580 --> 00:17:31.180
Jupyter has always been very self-contained into the notebook itself


00:17:31.180 --> 00:17:37.100
and the programming paradigm that the notebook brings with it.


00:17:37.100 --> 00:17:42.900
It's an exploration tool rather than an editor-authoring tool.


00:17:42.900 --> 00:17:46.820
And then with Drupal Lab, it evolved in different things as well.


00:17:46.820 --> 00:17:49.660
I think PyScript has maybe the opposite problem.


00:17:49.660 --> 00:17:58.060
We're too open, which is hard for actually our core user base that we want to...


00:17:58.180 --> 00:18:01.540
We said PyScript is for the 99%, right?


00:18:01.540 --> 00:18:05.260
And we need to do a lot of hard work to make it happen.


00:18:05.260 --> 00:18:06.100
Nicholas.


00:18:06.100 --> 00:18:09.660
- So this is a really great point that Fabio is making.


00:18:09.660 --> 00:18:11.820
And you've got to remember the key word here


00:18:11.820 --> 00:18:13.560
is that PyScript is a platform.


00:18:13.560 --> 00:18:16.180
Now it's a platform, you know,


00:18:16.180 --> 00:18:20.940
the layers of that platform were articulated by Fabio.


00:18:20.940 --> 00:18:22.940
You know, at the bottom is WebAssembly,


00:18:22.940 --> 00:18:25.340
which runs in your browser and you can compile,


00:18:26.580 --> 00:18:30.280
you know, Emscripten or, you know,


00:18:30.280 --> 00:18:33.420
other things can sort of work on top of that


00:18:33.420 --> 00:18:34.260
and blah, blah, blah, blah, blah,


00:18:34.260 --> 00:18:35.540
and then you get PyScript, okay.


00:18:35.540 --> 00:18:39.380
So with PyScript, we hope,


00:18:39.380 --> 00:18:41.020
and we're doing this ourselves,


00:18:41.020 --> 00:18:43.700
to build frameworks on top of that.


00:18:43.700 --> 00:18:45.900
So what's the difference between a framework and a platform?


00:18:45.900 --> 00:18:48.060
If a platform is like the foundational stuff


00:18:48.060 --> 00:18:51.300
that gives you the core verbs and nouns and things, okay,


00:18:51.300 --> 00:18:55.340
the framework is perhaps focused on a particular problem


00:18:55.340 --> 00:18:56.300
that you're trying to solve,


00:18:56.300 --> 00:19:00.420
like in the classic Python world,


00:19:00.420 --> 00:19:02.940
Django and Flask are web frameworks.


00:19:02.940 --> 00:19:07.820
Okay, you have a map.lib is a kind of like a framework


00:19:07.820 --> 00:19:10.100
for creating graphs and things like that.


00:19:10.100 --> 00:19:15.100
And so we expect people to reuse some of these things


00:19:15.100 --> 00:19:17.220
'cause this is another aspect of having Python


00:19:17.220 --> 00:19:19.340
in the browser is that you also bring the whole


00:19:19.340 --> 00:19:22.660
of the Python ecosystem into the browser as well.


00:19:22.660 --> 00:19:26.100
And all the modules and the things like that


00:19:26.100 --> 00:19:28.580
that Python brings.


00:19:28.580 --> 00:19:33.180
So we hope, and we're building this sort of stuff,


00:19:33.180 --> 00:19:34.660
and we'll probably come on to that


00:19:34.660 --> 00:19:36.120
later in this conversation,


00:19:36.120 --> 00:19:38.280
but we hope the community,


00:19:38.280 --> 00:19:40.200
'cause this is an open source project as well,


00:19:40.200 --> 00:19:42.360
let's not forget, the community come along


00:19:42.360 --> 00:19:43.900
and they start building cool things


00:19:43.900 --> 00:19:48.900
on top of PyScript frameworks and applications and things.


00:19:48.900 --> 00:19:52.980
So that they surprise us and delight us and make us go,


00:19:52.980 --> 00:19:56.860
And this is one of the ways that I would measure our success


00:19:56.860 --> 00:19:58.820
is that if somebody turns up and goes,


00:19:58.820 --> 00:19:59.980
"I built this thing."


00:19:59.980 --> 00:20:03.740
And I go, "Oh man, I never thought anyone would do that


00:20:03.740 --> 00:20:04.780
"with PyScripts."


00:20:04.780 --> 00:20:06.260
If you see what I mean.


00:20:06.260 --> 00:20:11.340
When we get to that, then I know we're rocking.


00:20:11.340 --> 00:20:13.700
- Yeah, you've queued up a nice comment


00:20:13.700 --> 00:20:14.840
from the audience here.


00:20:14.840 --> 00:20:18.500
Sarah says, "I'm exploring Vue.js.


00:20:18.500 --> 00:20:21.180
"Shall I wait and use PyScript in my app?"


00:20:22.940 --> 00:20:24.940
Great question.


00:20:24.940 --> 00:20:26.940
[LAUGHTER]


00:20:26.940 --> 00:20:30.940
I think we're coming close to a world


00:20:30.940 --> 00:20:32.940
where the two play well together,


00:20:32.940 --> 00:20:34.940
actually very well together.


00:20:34.940 --> 00:20:36.940
Yeah.


00:20:36.940 --> 00:20:40.940
We'll talk later about PyScript.com,


00:20:40.940 --> 00:20:43.940
which is an additional thing on top of PyScript.


00:20:43.940 --> 00:20:45.940
And we're using Vue there too.


00:20:45.940 --> 00:20:50.940
Vue is a great tool for building front-end apps and whatnot.


00:20:50.940 --> 00:20:57.740
But I hope yeah, I hope in the future. We will have view written python or something similar, which is more pythonic


00:20:57.740 --> 00:21:01.020
so here's the thing for sarah to understand is that


00:21:01.020 --> 00:21:05.340
Because python's in the browser it has access to


00:21:05.340 --> 00:21:10.940
The javascript context so you could start to mix and match, you know


00:21:10.940 --> 00:21:16.060
You've got view stuff happening in javascript and you've got python stuff that could be working. Um


00:21:16.060 --> 00:21:20.300
In concert with it as well, you know mix it up a bit. Uh


00:21:20.780 --> 00:21:23.180
I don't know. This is an early part of the journey.


00:21:23.180 --> 00:21:26.540
Sarah, you go away and check this out and tell us what you find.


00:21:26.540 --> 00:21:29.820
Knock yourself out. Explore.


00:21:29.820 --> 00:21:32.220
- Yeah. - Absolutely.


00:21:32.220 --> 00:21:35.020
I'll keep repeating this. Anyone that has questions


00:21:35.020 --> 00:21:38.700
or specific use cases or want to contribute, reach out.


00:21:38.700 --> 00:21:42.860
We want to hear from you and we are very welcoming.


00:21:42.860 --> 00:21:45.580
And so come be a contributor.


00:21:45.580 --> 00:21:50.140
Super. Yeah, and just shout out to Anaconda, Anaconda Inc.


00:21:50.140 --> 00:21:53.500
for making this possible for you all to be working on this


00:21:53.500 --> 00:21:56.340
in a more dedicated way instead of just,


00:21:56.340 --> 00:21:58.220
I'm really passionate and I've got an hour a day


00:21:58.220 --> 00:22:00.720
I can spend on it, but like legitimately,


00:22:00.720 --> 00:22:03.780
you can be more responsive


00:22:03.780 --> 00:22:06.340
and put yourself a little more out there


00:22:06.340 --> 00:22:08.100
because it's not like it,


00:22:08.100 --> 00:22:11.460
it takes away from that one hour you could add features with.


00:22:11.460 --> 00:22:12.740
- Agree, yeah.


00:22:12.740 --> 00:22:14.780
I will say like we're very lucky


00:22:14.780 --> 00:22:17.140
and very thankful to Anaconda to support this.


00:22:18.580 --> 00:22:20.740
It's a huge effort, so yeah.


00:22:20.740 --> 00:22:24.940
- Yeah, I would add one more possibility out there


00:22:24.940 --> 00:22:27.020
for folks in Sarah's situation.


00:22:27.020 --> 00:22:31.740
I would love to see PyView or something


00:22:31.740 --> 00:22:33.300
like really ready to work with it.


00:22:33.300 --> 00:22:36.100
And I know the MicroPython work I'm about to ask you,


00:22:36.100 --> 00:22:39.620
just about to ask you all about for a follow-up on


00:22:39.620 --> 00:22:43.460
makes that really a possible case.


00:22:43.460 --> 00:22:45.100
But if you're really just like,


00:22:45.100 --> 00:22:47.100
it's gotta be some JavaScript framework,


00:22:47.100 --> 00:22:50.460
Give HTMX a look.


00:22:50.460 --> 00:22:57.940
It's really, really nice that you can just keep writing Python.


00:22:57.940 --> 00:23:00.500
You got to do it on the server, and it's kind of a little async type of thing,


00:23:00.500 --> 00:23:02.940
but that's how a lot of the view stuff happens anyway.


00:23:02.940 --> 00:23:09.300
So if PyScript weren't the answer, maybe consider HTMX before you decide


00:23:09.300 --> 00:23:12.540
like it's all front end and React and just a bunch of APIs.


00:23:12.540 --> 00:23:14.460
That's really nice stuff.


00:23:14.460 --> 00:23:15.340
All right.


00:23:15.340 --> 00:23:17.340
Back to pi script


00:23:17.340 --> 00:23:20.780
What's the story of the micropython thing that we spoke about last time


00:23:20.780 --> 00:23:31.020
Okay, so, let's just recap what happened last time was I think i've just finished doing the proof of concept and we had


00:23:31.020 --> 00:23:34.380
Micropython kind of running. Okay. Um


00:23:34.380 --> 00:23:37.260
and that was


00:23:37.260 --> 00:23:42.540
That was late last year, wasn't it? And you said yeah, it was like six months ago or so. Yeah. Yeah


00:23:42.620 --> 00:23:46.300
Yeah, if you can get yeah because we have brett on the call as well. I remember now. Um


00:23:46.300 --> 00:23:49.820
If you can get micropython running by


00:23:49.820 --> 00:23:54.620
The middle of next year it's going to be you know, the kind of hallelujah moment


00:23:54.620 --> 00:23:59.580
You know the clouds will part the angels will sing and the sun will shine and all this sort of stuff


00:23:59.580 --> 00:24:06.860
So cats and dogs living together all that. Yeah, exactly exactly sharks with lasers that sort of thing. so


00:24:06.860 --> 00:24:10.140
And who wouldn't want that? Um


00:24:10.540 --> 00:24:17.020
And so what's happened in the intervening six months, so I think two important things have happened


00:24:17.020 --> 00:24:19.740
the first one is the re-architecting of


00:24:19.740 --> 00:24:23.340
pyscript and uh just to


00:24:23.340 --> 00:24:25.180
re


00:24:25.180 --> 00:24:27.580
You know reinforce what fabio said. Um


00:24:27.580 --> 00:24:35.420
Maybe six months ago when we said pyscript is python in the browser. The emphasis was on


00:24:35.420 --> 00:24:38.860
Python and not so much in the browser


00:24:39.420 --> 00:24:44.300
Okay, because we've been joined, you know, our colleague andrea is very much of the web world


00:24:44.300 --> 00:24:47.740
In fact his nickname inside the team is web yoda


00:24:47.740 --> 00:24:50.780
Uh for a very good reason, okay. Um


00:24:50.780 --> 00:24:58.780
uh, it's now you know python and we have in the browser has been kind of uh worked on and we've been looking at


00:24:58.780 --> 00:25:03.260
How that sort of works and how these two sort of things mesh together?


00:25:03.260 --> 00:25:06.700
um because andrea is frankly


00:25:07.480 --> 00:25:09.640
Incredible at this sort of stuff. Um


00:25:09.640 --> 00:25:14.220
And he's kind of of the web and he knows the idioms and he knows the apis


00:25:14.220 --> 00:25:18.280
And he knows how the browsers work and things like that. Um


00:25:18.280 --> 00:25:26.760
The actual pi script core that's coming next is very small and very flexible. Okay, so that's the first sort of pillar of this


00:25:26.760 --> 00:25:29.640
second pillar


00:25:29.640 --> 00:25:34.520
It goes by the name of damien, uh who we all know and love in in melbourne. Um


00:25:35.320 --> 00:25:41.720
And you know damien's a buddy. we worked on the micro bit together. That's how we first got to know each other


00:25:41.720 --> 00:25:44.360
and um


00:25:44.360 --> 00:25:48.440
clearly, I don't think in a million years damien imagined that


00:25:48.440 --> 00:25:54.120
Micropython would be running on a browser. That's completely the opposite end of the computing spectrum


00:25:54.120 --> 00:25:58.760
But because micropython watch watch micropython become the most popular


00:25:58.760 --> 00:26:05.260
Base to run python globally it easily could if it goes out on the web. Yeah. Yeah, exactly exactly


00:26:05.260 --> 00:26:06.460
Exactly, exactly.


00:26:06.460 --> 00:26:07.540
Now here's the thing,


00:26:07.540 --> 00:26:12.540
because Pyodide is CPython compiled to WebAssembly.


00:26:12.540 --> 00:26:16.940
We started with PyScript.


00:26:16.940 --> 00:26:19.540
But depending on how you build it,


00:26:19.540 --> 00:26:22.540
it's around 11 megabytes if you have the whole,


00:26:22.540 --> 00:26:24.820
everything but the kitchen sink in there, okay?


00:26:24.820 --> 00:26:27.540
That's a lot for a web page, okay?


00:26:27.540 --> 00:26:29.780
I know everybody says the New York Times


00:26:29.780 --> 00:26:31.620
is however many megabytes it is,


00:26:31.620 --> 00:26:34.020
but still 11 megs is large.


00:26:34.020 --> 00:26:36.580
And it doesn't play well with these black mirrors


00:26:36.580 --> 00:26:38.540
that we carry around in our pockets.


00:26:38.540 --> 00:26:40.680
MicroPython, I noticed today,


00:26:40.680 --> 00:26:43.940
thanks to compression and other things,


00:26:43.940 --> 00:26:48.940
it's down to 170K to deliver into the browser.


00:26:48.940 --> 00:26:53.620
And with the 50 plus, 50 odd K


00:26:53.620 --> 00:26:57.660
for the core of PyScript, the next thing,


00:26:57.660 --> 00:27:00.980
we have an incredible, it's around half a megabyte


00:27:00.980 --> 00:27:03.740
to get the thing into your browser,


00:27:03.740 --> 00:27:05.900
which I think it was Simon Willis said,


00:27:05.900 --> 00:27:09.380
that's smaller than some hero images you get on websites.


00:27:09.380 --> 00:27:12.060
Okay, so you get a development environment.


00:27:12.060 --> 00:27:14.420
So we reached out to Damian,


00:27:14.420 --> 00:27:16.380
and Damian's been working with us,


00:27:16.380 --> 00:27:19.220
and he's been doing an awful lot of work,


00:27:19.220 --> 00:27:21.900
impeccable work, excellent work,


00:27:21.900 --> 00:27:24.620
to make sure that the story of MicroPython in the browser


00:27:24.620 --> 00:27:27.900
is that it's kind of like a first class Python, okay?


00:27:27.900 --> 00:27:31.180
So he has implemented the FFI,


00:27:31.180 --> 00:27:37.460
different function interface between Python and the JavaScript context.


00:27:37.460 --> 00:27:41.420
Okay, it's the same sort of API as you get in Pyodide.


00:27:41.420 --> 00:27:42.980
Okay, so it's familiar.


00:27:42.980 --> 00:27:46.900
Okay, so you import JS, and then you're away.


00:27:46.900 --> 00:27:51.500
Okay, you're, you're referencing things in the land of JavaScript.


00:27:51.500 --> 00:27:52.500
He's also made sure...


00:27:52.500 --> 00:27:57.220
To be clear for people listening, that means you can hook button click events, you can


00:27:57.220 --> 00:27:59.220
- Yeah. - Ready, mouse,


00:27:59.220 --> 00:28:01.220
like in Python. - Web APIs.


00:28:01.220 --> 00:28:04.220
- Functions, yep. - I wanna play some audio.


00:28:04.220 --> 00:28:08.220
There's an audio API built into the browser.


00:28:08.220 --> 00:28:12.220
I can import JS and then do JS.audio


00:28:12.220 --> 00:28:16.220
as a class to instantiate something to then play.


00:28:16.220 --> 00:28:19.220
And it's just super easy and a real joy to use,


00:28:19.220 --> 00:28:22.220
but it starts like that.


00:28:22.220 --> 00:28:26.220
And this is, I think, the key aspect


00:28:26.220 --> 00:28:27.980
key aspects of the difference between


00:28:27.980 --> 00:28:32.540
MicroPython and Pydite, Pydite gives you all of Python.


00:28:32.540 --> 00:28:34.500
Okay, so you wanna do some data science


00:28:34.500 --> 00:28:36.580
or you wanna bring in some CPython module


00:28:36.580 --> 00:28:38.700
to work in the browser, you use Pydite.


00:28:38.700 --> 00:28:40.980
But if you want something Python-ish,


00:28:40.980 --> 00:28:43.580
and it's fast, and it goes like the clappers,


00:28:43.580 --> 00:28:45.020
and it's really quick to load,


00:28:45.020 --> 00:28:47.100
then MicroPython is the thing for you.


00:28:47.100 --> 00:28:49.300
If you want to start manipulating the DOM


00:28:49.300 --> 00:28:53.300
and working with what the browser makes available to you.


00:28:53.300 --> 00:28:54.900
And so, to answer Sarah's point,


00:28:54.900 --> 00:28:58.460
maybe MicroPython is the thing that you should be using


00:28:58.460 --> 00:29:00.260
to coordinate with that.


00:29:00.260 --> 00:29:03.580
- I think certainly as an alternative to Vue, it would be.


00:29:03.580 --> 00:29:04.400
Yeah.


00:29:04.400 --> 00:29:05.240
- Yes.


00:29:05.240 --> 00:29:07.900
I really wanna chime in one thing that,


00:29:07.900 --> 00:29:11.140
just because I'm really proud of what we're doing there,


00:29:11.140 --> 00:29:13.440
like what Niko's highlighted,


00:29:13.440 --> 00:29:18.440
I think it's really great to see projects like MicroPython


00:29:21.380 --> 00:29:25.440
coming together with Piodite and PyScript,


00:29:25.440 --> 00:29:29.220
all talking, "Hey, how can we make things be,


00:29:29.220 --> 00:29:31.260
share the best parts of each project


00:29:31.260 --> 00:29:34.520
and have a common interface to interface JavaScript?


00:29:34.520 --> 00:29:35.900
How can we make this happen?


00:29:35.900 --> 00:29:39.580
How can we support MicroPython and PyScript?"


00:29:39.580 --> 00:29:43.100
And so it was, I really need to thank


00:29:43.100 --> 00:29:47.380
Damien, Hood, Roman, from those projects


00:29:47.380 --> 00:29:50.820
to be so nice and so easy to work with.


00:29:50.820 --> 00:29:54.180
and willing to just, yeah, let's talk about it,


00:29:54.180 --> 00:29:56.420
let's see what's best for the community.


00:29:56.420 --> 00:29:58.660
And yeah, great community work.


00:29:58.660 --> 00:30:00.420
Yeah, it's absolute joy.


00:30:00.420 --> 00:30:05.420
And I'll tell you a funny story.


00:30:05.420 --> 00:30:09.940
Just after Christmas, we met up the PyScript team


00:30:09.940 --> 00:30:12.100
in real life for the first time.


00:30:12.100 --> 00:30:13.780
And because we were all in the same place


00:30:13.780 --> 00:30:16.540
and we had Hood with us, Hood has since joined the team.


00:30:19.260 --> 00:30:23.260
And because of time zones, we were all able to drop onto a call with Damien.


00:30:23.260 --> 00:30:28.700
And having Hood and Damien talk together for the first time,


00:30:28.700 --> 00:30:35.140
you'd think, you know, these are exceptionally gifted engineers.


00:30:35.140 --> 00:30:39.620
OK. And after maybe, I don't know, two minutes of small talk,


00:30:39.620 --> 00:30:43.180
they were talking about, I don't know,


00:30:43.180 --> 00:30:48.220
the intricacies of garbage collection in the WebAssembly


00:30:48.220 --> 00:30:51.740
context and you know the whole kind of conversation just went


00:30:51.740 --> 00:30:54.940
exploded off into the technical


00:30:54.940 --> 00:31:01.500
Sort of ether as it were. but what I want to highlight is that you know, uh


00:31:01.500 --> 00:31:05.180
PyScript has sort of lit a fuse underneath


00:31:05.180 --> 00:31:12.940
And these projects are working together and it's so wonderful to see the open source community working in the way that it should


00:31:12.940 --> 00:31:17.260
You know people bringing the best themselves and being very humble


00:31:17.980 --> 00:31:20.860
and listening and being compassionate to other people


00:31:20.860 --> 00:31:23.260
when there are differences of opinion,


00:31:23.260 --> 00:31:25.260
and there are always differences of opinion.


00:31:25.260 --> 00:31:29.100
And I think one of the things that I take away from this project


00:31:29.100 --> 00:31:32.220
is the amount of fun I have working on this.


00:31:32.220 --> 00:31:34.220
That people pay me to do this is incredible.


00:31:34.220 --> 00:31:35.340
So...


00:31:35.340 --> 00:31:37.340
That's awesome. I love it.


00:31:37.340 --> 00:31:42.540
We've kind of introduced the possibility


00:31:42.540 --> 00:31:44.780
and what we can do with PyScript pretty well,


00:31:44.780 --> 00:31:47.340
but I can't resist showing this video here.


00:31:47.340 --> 00:31:54.260
So Nicholas you have a one-minute video which I'm going to link to that shows Python running in the browser


00:31:54.260 --> 00:31:56.420
which is great and


00:31:56.420 --> 00:32:02.240
Then very nicely you have it running on a mobile phone, which is


00:32:02.240 --> 00:32:07.460
Really nice. Yeah, tell people where it runs next


00:32:07.460 --> 00:32:10.100
in a car


00:32:10.100 --> 00:32:15.340
So Tesla, it's basically a computer on wheels and it has a browser built-in. Oh


00:32:16.780 --> 00:32:23.760
Yeah, this Lucy Goosey app a colleague of mine, you know, clearly I'm British and she said to me


00:32:23.760 --> 00:32:26.380
you've got to be Lucy Goosey about this she's from Boston and


00:32:26.380 --> 00:32:33.740
What on earth is Lucy Goosey and she explained and since then I've been getting Lucy Goosey into all of these kind of places


00:32:33.740 --> 00:32:39.060
Just pull a leg a little bit you click on the goose and it uses the underlying browsers


00:32:39.060 --> 00:32:41.660
Audio API to go ha


00:32:42.220 --> 00:32:47.800
Right, so it's just honking on demand and the fact that you can get a car to honk like a goose kind of seems


00:32:47.800 --> 00:32:53.440
Kind of appropriate in a funny sort of way, but it's certainly for Tesla's. Yeah. Yeah, exactly


00:32:53.440 --> 00:33:01.320
This is micropython running on the Tesla plane, I love it


00:33:06.320 --> 00:33:09.160
- Yeah, so maybe the next thing that we could do here


00:33:09.160 --> 00:33:11.420
is we could talk about, I think,


00:33:11.420 --> 00:33:14.200
one of the bigger announcements that you had recently.


00:33:14.200 --> 00:33:18.060
So there's probably two plus the shift in API


00:33:18.060 --> 00:33:19.380
and the changes there.


00:33:19.380 --> 00:33:23.620
But one, whoever wants to take this is pyscript.com.


00:33:23.620 --> 00:33:27.640
- Yeah, I can talk real quick about it.


00:33:27.640 --> 00:33:32.560
So, here's the beginning.


00:33:32.560 --> 00:33:35.900
Part of the vision when we started was, okay, cool,


00:33:35.900 --> 00:33:39.740
PyScript needs to be open source and everything always.


00:33:39.740 --> 00:33:42.740
How can we make it, it's on the browser, right?


00:33:42.740 --> 00:33:46.860
Like how can we make it even easier


00:33:46.860 --> 00:33:49.580
for people to just hop in somewhere,


00:33:49.580 --> 00:33:52.980
start a project and then just share it with others.


00:33:52.980 --> 00:33:56.420
And that was, okay, we need a product


00:33:56.420 --> 00:33:58.020
or something like this.


00:33:58.020 --> 00:34:00.420
So we launched PyScript.com,


00:34:00.420 --> 00:34:04.840
which is a free service or freemium service.


00:34:04.840 --> 00:34:08.920
Right now, we actually, the only option for paid features


00:34:08.920 --> 00:34:13.320
or anything like this is really just through being a founder,


00:34:13.320 --> 00:34:16.720
which is basically in the Kickstarter model,


00:34:16.720 --> 00:34:18.720
like you wanna support the project.


00:34:18.720 --> 00:34:20.560
It really is what it is.


00:34:20.560 --> 00:34:23.480
- And it's a little bit like a GitHub sponsor, kinda.


00:34:23.480 --> 00:34:24.520
- Yes, yeah.


00:34:24.520 --> 00:34:28.600
And we will always have a free tier


00:34:28.600 --> 00:34:31.200
with unlimited projects, unlimited ways


00:34:31.200 --> 00:34:36.400
you know, ways we can share it, etc.


00:34:36.400 --> 00:34:41.760
And we're probably going to have paid features for things that we're paying


00:34:41.760 --> 00:34:44.640
or things that make it worth, you know.


00:34:44.640 --> 00:34:51.200
But we want to have a place where people can just drop a snippet


00:34:51.200 --> 00:34:53.840
or a Python application then share with others.


00:34:53.840 --> 00:34:56.880
Like one thing that was super clear to me recently


00:34:56.880 --> 00:35:01.480
was after also the video of Nicolas,


00:35:01.480 --> 00:35:05.480
was last keynote I gave in Colombia was,


00:35:05.480 --> 00:35:08.160
"Hey, how many of you," I asked the question,


00:35:08.160 --> 00:35:11.440
"How many of you think you can write a Hello World application


00:35:11.440 --> 00:35:13.740
and then share with 30 people,


00:35:13.740 --> 00:35:15.640
not technical, like your mom,


00:35:15.640 --> 00:35:17.840
your family, and others,


00:35:17.840 --> 00:35:20.680
and share with them within an hour?"


00:35:20.680 --> 00:35:23.240
Hello World without complexity.


00:35:23.240 --> 00:35:26.120
Then what? Ten people raised


00:35:26.120 --> 00:35:28.440
their hands out of 450.


00:35:28.440 --> 00:35:31.840
>> Yeah. It'll take a good chunk of that hour to do it.


00:35:31.840 --> 00:35:32.280
>> Exactly.


00:35:32.280 --> 00:35:33.160
>> Even for the ones who can do it.


00:35:33.160 --> 00:35:33.560
>> Yeah.


00:35:33.560 --> 00:35:35.800
>> Yes. Or even worse,


00:35:35.800 --> 00:35:37.400
like in a day,


00:35:37.400 --> 00:35:40.000
not many more raise their hands.


00:35:40.000 --> 00:35:44.360
The goal here is really you can just hop in,


00:35:44.360 --> 00:35:46.480
click, start a new project.


00:35:46.480 --> 00:35:52.160
It's conveniently already a Hello World application by default.


00:35:52.160 --> 00:35:55.160
By default, it's shareable anywhere.


00:35:55.160 --> 00:35:57.680
So all of a sudden you come from,


00:35:57.680 --> 00:36:00.320
hey, I'm not sure I can deploy the simplest app


00:36:00.320 --> 00:36:04.200
in the world to my audience and effectively


00:36:04.200 --> 00:36:06.200
to it's just a matter of seconds.


00:36:06.200 --> 00:36:08.760
I just need to share the link and then can see,


00:36:08.760 --> 00:36:13.160
they can see on mobile and things like this,


00:36:13.160 --> 00:36:15.640
which is, that's the striking thing,


00:36:15.640 --> 00:36:18.800
that messaging that I think to me was clear


00:36:18.800 --> 00:36:20.760
that we're not doing a good job, right?


00:36:23.800 --> 00:36:28.800
Before PyScript, you could still deploy those things


00:36:28.800 --> 00:36:31.080
on mobile with PyDi directly and stuff,


00:36:31.080 --> 00:36:32.700
but it wasn't that easy.


00:36:32.700 --> 00:36:36.920
Right now, that's the key to Python adoption,


00:36:36.920 --> 00:36:39.660
Python in education, all of those use cases.


00:36:39.660 --> 00:36:43.160
That's why I really beg everyone, talk about PyScript,


00:36:43.160 --> 00:36:45.520
and that's the value, right?


00:36:45.520 --> 00:36:50.500
Sharing and spreading Python all over.


00:36:50.500 --> 00:36:52.680
- Yeah, let's look at one of these.


00:36:52.680 --> 00:36:54.600
So if you create an account, you log in,


00:36:54.600 --> 00:36:57.160
there's a trending and a featured set.


00:36:57.160 --> 00:36:59.440
So one of these is tic-tac-toe and I'll view the site


00:36:59.440 --> 00:37:02.000
then we can maybe talk about the code real quick.


00:37:02.000 --> 00:37:04.400
So I pulled this up in my browser,


00:37:04.400 --> 00:37:06.660
based on the Pyodide version.


00:37:06.660 --> 00:37:10.980
And down here you can, it does show the terminal


00:37:10.980 --> 00:37:13.200
just for people who are interested in the print statements,


00:37:13.200 --> 00:37:15.600
but you can just go play tic-tac-toe on yourself


00:37:15.600 --> 00:37:18.740
and you know, end up, you just click crazy,


00:37:18.740 --> 00:37:20.120
I guess you'll win or something, right?


00:37:20.120 --> 00:37:21.760
The O's win this time.


00:37:21.760 --> 00:37:24.080
but it shows the JavaScript interaction,


00:37:24.080 --> 00:37:26.760
the click down, the changing the DOM from Python,


00:37:26.760 --> 00:37:29.040
all those good things, right?


00:37:29.040 --> 00:37:29.880
- Yeah.


00:37:29.880 --> 00:37:33.240
- And so you can go view the code for it.


00:37:33.240 --> 00:37:37.480
Maybe just, we could use this as a chance


00:37:37.480 --> 00:37:39.280
to just talk through a little bit of like


00:37:39.280 --> 00:37:40.440
how you're structuring this,


00:37:40.440 --> 00:37:44.240
'cause you've got a manifest, you've got a main.py,


00:37:44.240 --> 00:37:46.760
you've got an index.html.


00:37:46.760 --> 00:37:49.200
- Actually, so an important point,


00:37:49.200 --> 00:37:53.200
If you go back to the app itself,


00:37:53.200 --> 00:37:57.640
- Hold on, I'm getting us there.


00:37:57.640 --> 00:37:59.440
There we go.


00:37:59.440 --> 00:38:01.000
- If you look in the bottom right.


00:38:01.000 --> 00:38:03.920
- Oh yeah, it says view code right there.


00:38:03.920 --> 00:38:04.760
- Yeah.


00:38:04.760 --> 00:38:06.800
Okay, so you come across an app


00:38:06.800 --> 00:38:09.580
that's written with PyScript.com.


00:38:09.580 --> 00:38:10.840
You wanna know how does it work?


00:38:10.840 --> 00:38:13.660
You know, the classic view source,


00:38:13.660 --> 00:38:16.000
the number of people who said I became a software engineer


00:38:16.000 --> 00:38:18.200
because in the 90s, when I was a teenager,


00:38:18.200 --> 00:38:20.200
I could right click view source and figure out what,


00:38:20.200 --> 00:38:21.880
okay, that's that.


00:38:21.880 --> 00:38:24.680
Okay, so I just wanted to highlight that that was there.


00:38:24.680 --> 00:38:27.960
Anypyscript.com app, you'll be able to see the source.


00:38:27.960 --> 00:38:28.960
- Excellent.


00:38:28.960 --> 00:38:29.800
- And you can copy the project.


00:38:29.800 --> 00:38:30.680
- Yeah, and you also have a copy.


00:38:30.680 --> 00:38:32.480
Yeah, exactly, we're on the same page.


00:38:32.480 --> 00:38:33.680
There's a copy of the project,


00:38:33.680 --> 00:38:36.440
which has got like a clone this to my account


00:38:36.440 --> 00:38:37.280
and I'll play with it, right?


00:38:37.280 --> 00:38:39.360
- Yeah, yeah. - Yeah, exactly.


00:38:39.360 --> 00:38:41.840
That's actually one thing that we've been struggling


00:38:41.840 --> 00:38:44.080
with terminology, trying to,


00:38:44.080 --> 00:38:47.600
do we use the usual geek terminology


00:38:47.600 --> 00:38:52.600
or we use user-friendly, should we use copy or fork?


00:38:52.600 --> 00:38:54.240
That's sort of the thing.


00:38:54.240 --> 00:38:55.160
Yeah, anyway.


00:38:55.160 --> 00:38:55.980
- Yep.


00:38:55.980 --> 00:38:58.040
- Yes. - Nice.


00:38:58.040 --> 00:39:00.160
Yeah, so tell people quickly about how,


00:39:00.160 --> 00:39:02.200
what you can do with PyScript.com, kind of how it works.


00:39:02.200 --> 00:39:04.080
It's a little bit like Repl.it,


00:39:04.080 --> 00:39:06.680
but really Python focused, right?


00:39:06.680 --> 00:39:10.680
- Yes, it's very similar to Repl.it or CodePen


00:39:10.680 --> 00:39:13.160
and other services like these.


00:39:13.160 --> 00:39:15.620
The idea is that you have your space


00:39:15.620 --> 00:39:17.140
where you host your project.


00:39:17.140 --> 00:39:19.100
We have an editor right now.


00:39:19.100 --> 00:39:21.300
We're working also on creating views


00:39:21.300 --> 00:39:23.020
that are more user-friendly,


00:39:23.020 --> 00:39:25.300
and you don't need to know about HTML


00:39:25.300 --> 00:39:27.740
or anything like this, just hop in.


00:39:27.740 --> 00:39:30.280
But the nice thing about this is with any project,


00:39:30.280 --> 00:39:32.580
you can just hop in, see the Python code,


00:39:32.580 --> 00:39:36.380
how it was done, implemented, and playing around it.


00:39:36.380 --> 00:39:39.900
And we always have the view of the files,


00:39:39.900 --> 00:39:42.860
and then a preview with an iframe


00:39:42.860 --> 00:39:46.580
that you can see your app while you develop and whatnot.


00:39:46.580 --> 00:39:47.580
Yeah.


00:39:47.580 --> 00:39:54.800
I can talk quickly about the geography of how the project is organized.


00:39:54.800 --> 00:39:59.420
You have your index.html, which is the thing that is first served to the browser.


00:39:59.420 --> 00:40:05.020
And if we go look at that, we'll see that in there, it's just referencing basically


00:40:05.020 --> 00:40:06.240
all the other things.


00:40:06.240 --> 00:40:09.520
And it's just plain old HTML in there as well.


00:40:09.520 --> 00:40:11.480
So we've got PyScript being loaded as well.


00:40:11.480 --> 00:40:13.460
We've got some CSS.


00:40:13.460 --> 00:40:16.460
we've got the script, PyScript tag that tells us


00:40:16.460 --> 00:40:18.780
that main.py is where the application


00:40:18.780 --> 00:40:20.940
is gonna be run from.


00:40:20.940 --> 00:40:22.260
And then we just have, you know,


00:40:22.260 --> 00:40:26.340
the HTML code for displaying the user interface.


00:40:26.340 --> 00:40:31.340
So if we hop over to manifest.json,


00:40:31.340 --> 00:40:34.020
this is an old one.


00:40:34.020 --> 00:40:38.100
- The others have a PyScript.toml, right?


00:40:38.100 --> 00:40:39.660
- Yes, I was just gonna say,


00:40:39.660 --> 00:40:42.060
it's usually a PyScript.toml file.


00:40:42.060 --> 00:40:44.860
I can pull that up for us here.


00:40:44.860 --> 00:40:45.700
- That's great.


00:40:45.700 --> 00:40:49.860
In the Toml file, it's gonna be empty


00:40:49.860 --> 00:40:50.700
'cause there's nothing there,


00:40:50.700 --> 00:40:55.020
but this is where you start to define characteristics


00:40:55.020 --> 00:40:58.580
of the environment in which this app is gonna run.


00:40:58.580 --> 00:41:00.580
So you might say packages equals


00:41:00.580 --> 00:41:05.420
and then a list of packages that you want installed


00:41:05.420 --> 00:41:07.780
as if it were a requirements.txt file.


00:41:07.780 --> 00:41:08.620
Okay.


00:41:08.620 --> 00:41:10.820
- Give me a sense of what I can put in that list.


00:41:11.820 --> 00:41:12.940
(laughing)


00:41:12.940 --> 00:41:14.780
- Anything that is pure Python.


00:41:14.780 --> 00:41:16.320
Anything that is pure Python.


00:41:16.320 --> 00:41:19.700
- Almost everything.


00:41:19.700 --> 00:41:20.540
- Yeah.


00:41:20.540 --> 00:41:21.360
- Yeah.


00:41:21.360 --> 00:41:24.140
- There are complicated caveats, which we could go into.


00:41:24.140 --> 00:41:26.320
- Yes.


00:41:26.320 --> 00:41:30.580
Overall, the differentiator is really


00:41:30.580 --> 00:41:34.140
if you're using anything that does multi-processing


00:41:34.140 --> 00:41:36.420
or threading or sockets, right?


00:41:36.420 --> 00:41:38.900
Like those on the browser don't really exist.


00:41:38.900 --> 00:41:39.740
- Right.


00:41:39.740 --> 00:41:42.580
I couldn't use PyMongo or PGE,


00:41:42.580 --> 00:41:47.140
Psycho or requests per se,


00:41:47.140 --> 00:41:49.740
because those are basically violating some...


00:41:49.740 --> 00:41:52.620
- Yes. - Samboxing rule.


00:41:52.620 --> 00:41:53.620
Yeah, yeah.


00:41:53.620 --> 00:42:00.580
Requests specifically, there is a package that patches requests.


00:42:00.580 --> 00:42:02.980
So you can actually...


00:42:02.980 --> 00:42:06.660
It's called PyDite HTTP, I think.


00:42:06.660 --> 00:42:08.460
And it basically just patches everything


00:42:08.460 --> 00:42:15.500
From after you do that, then you can just import requests and use it normally. So it does work right now


00:42:15.500 --> 00:42:20.620
Yeah, so the important thing is that you remember that your tab


00:42:20.620 --> 00:42:23.480
is


00:42:23.480 --> 00:42:25.420
conceptually equivalent to your virtual


00:42:25.420 --> 00:42:34.700
Okay, and so the pyscript.toml file is just the way pyscript learns about how do you want to configure your


00:42:35.080 --> 00:42:40.200
Environment for for for this. Okay, and then if we look in main.py, um


00:42:40.200 --> 00:42:44.600
There we go, it's the classic python, um


00:42:44.600 --> 00:42:47.560
Uh, you know


00:42:47.560 --> 00:42:54.520
This is where you start. This is where you just type your python code. Just go ahead. you know import js and then js.


00:42:54.520 --> 00:43:02.280
Um, uh document dot whatever, you know to get yourself into the dom that sort of stuff. Um


00:43:03.960 --> 00:43:06.400
Yeah, and from that moment, you have a link


00:43:06.400 --> 00:43:07.840
that you can share with anyone, right?


00:43:07.840 --> 00:43:09.600
Like, it just works.


00:43:09.600 --> 00:43:12.000
Yeah, that's the power of it.


00:43:12.000 --> 00:43:12.920
- Right, excellent.


00:43:12.920 --> 00:43:15.960
So yeah, just got to share or copy it or whatever.


00:43:15.960 --> 00:43:20.100
Okay, so this is a way for people to play with PyScript.


00:43:20.100 --> 00:43:26.040
I saw here in the index that you specifically refer


00:43:26.040 --> 00:43:30.440
to certain releases of PyScript here.


00:43:31.760 --> 00:43:35.640
So I guess presumably it's kind of however much


00:43:35.640 --> 00:43:38.760
you want to stay on the cutting edge of PyScript or kind of just


00:43:38.760 --> 00:43:41.520
take some version in time and stick with it?


00:43:41.520 --> 00:43:42.080
Yeah.


00:43:42.080 --> 00:43:43.880
Yeah, that's actually a great question


00:43:43.880 --> 00:43:47.240
because we've been discussing that a lot.


00:43:47.240 --> 00:43:50.480
And hey, just we should actually--


00:43:50.480 --> 00:43:53.800
should we remove latest and/or unstable?


00:43:53.800 --> 00:43:57.280
Those are always linked to the latest stable release


00:43:57.280 --> 00:44:02.280
and the latest merged commit in the repo.


00:44:02.280 --> 00:44:05.560
And I think ultimately we're leaning towards yes


00:44:05.560 --> 00:44:07.920
and always spin the version,


00:44:07.920 --> 00:44:10.440
mostly because that guarantees that,


00:44:10.440 --> 00:44:12.360
we're not gonna change things under the rug


00:44:12.360 --> 00:44:14.520
for you and your app, just works.


00:44:14.520 --> 00:44:18.200
- It's been curious to the user, isn't it?


00:44:18.200 --> 00:44:21.080
I mean, we don't wanna do something that breaks their code.


00:44:21.080 --> 00:44:23.400
Okay, so if you pin it to,


00:44:23.400 --> 00:44:26.840
PyScript version 0.0.1 alpha one, you know,


00:44:26.840 --> 00:44:29.160
from way back when dinosaurs ruled the world,


00:44:29.160 --> 00:44:30.540
but your code still works.


00:44:30.540 --> 00:44:33.000
It might not be the most up-to-date PyScript,


00:44:33.000 --> 00:44:34.320
but it's your code.


00:44:34.320 --> 00:44:35.400
It's your responsibility.


00:44:35.400 --> 00:44:36.980
If you want to update the runtime,


00:44:36.980 --> 00:44:38.280
you go knock yourself out.


00:44:38.280 --> 00:44:42.120
- That's a good idea.


00:44:42.120 --> 00:44:45.060
So that brings up a bit of a comment


00:44:45.060 --> 00:44:47.160
from Toon Army out there who says,


00:44:47.160 --> 00:44:49.640
so we're just about out of alpha.


00:44:49.640 --> 00:44:51.740
Do not use in production, question mark.


00:44:53.040 --> 00:44:55.040
- Yeah, that's a pretty good one.


00:44:55.040 --> 00:44:57.280
(laughing)


00:44:57.280 --> 00:44:59.680
- YOLO/latest, let's go.


00:44:59.680 --> 00:45:00.520
- Exactly.


00:45:00.520 --> 00:45:03.200
So even with very stable things,


00:45:03.200 --> 00:45:07.240
I would always recommend pinning all the versions anyway.


00:45:07.240 --> 00:45:11.560
Right, like, and even the secondary versions and whatnot.


00:45:11.560 --> 00:45:14.920
Like when you deploy, pin the thing,


00:45:14.920 --> 00:45:16.560
pin the thing down.


00:45:16.560 --> 00:45:18.920
And that's what, with PyScript.com,


00:45:18.920 --> 00:45:23.000
we're trying to basically put all those small details


00:45:23.000 --> 00:45:25.880
baked in so that you don't need to think about those.


00:45:25.880 --> 00:45:28.400
And just use best practices.


00:45:28.400 --> 00:45:32.320
For instance, we are using PyConfig and PyScript


00:45:32.320 --> 00:45:36.000
with source and not having code in line, right?


00:45:36.000 --> 00:45:40.200
Because coding in line is great to get going,


00:45:40.200 --> 00:45:42.280
but it's really hard to read.


00:45:42.280 --> 00:45:44.760
Editors don't play well with it.


00:45:44.760 --> 00:45:47.120
It's hard to test your code, all of this.


00:45:47.120 --> 00:45:49.720
So we're saying, let's just use templates


00:45:49.720 --> 00:45:52.360
that are encouraging best practices.


00:45:52.360 --> 00:45:55.480
And pinning the versions is one of them.


00:45:55.480 --> 00:45:56.840
Could I write unit tests?


00:45:56.840 --> 00:45:59.560
Could I have a page that is like tests.html,


00:45:59.560 --> 00:46:01.360
then import pytest?


00:46:01.360 --> 00:46:01.880
I'd do that.


00:46:01.880 --> 00:46:02.380
[INAUDIBLE]


00:46:02.380 --> 00:46:03.320
--in the browser.


00:46:03.320 --> 00:46:04.280
Yeah.


00:46:04.280 --> 00:46:04.840
Yeah.


00:46:04.840 --> 00:46:07.000
So OK, here's the thing.


00:46:07.000 --> 00:46:10.200
And we've not mentioned PyPicard or Invent,


00:46:10.200 --> 00:46:12.280
that we've renamed it.


00:46:12.280 --> 00:46:16.080
But when I was writing that before,


00:46:16.080 --> 00:46:20.040
or the kind of proof of concept before PyCon,


00:46:20.040 --> 00:46:26.440
I had py test running in the browser. I mean, why wouldn't you run it in the browser? That's the context literally in which


00:46:26.440 --> 00:46:32.760
This code is supposed to run. So let's run the test suite in the browser and it just works. It's lovely. Yeah


00:46:32.760 --> 00:46:39.960
It'll be 10 minutes to go. Hmm. That'd be a good idea to actually seeing the thing. Um


00:46:39.960 --> 00:46:43.000
A real kind of woohoo kind of fist pump moment


00:46:43.000 --> 00:46:48.040
Yeah, that's fantastic. So, speaking of you why don't you have it?


00:46:48.600 --> 00:46:53.160
Yeah, I just want to mention one aspect, which is, we don't always think about this.


00:46:53.160 --> 00:47:01.440
Because PyScript runs in your browser, in your clients, like, there's no server side logic or anything like this.


00:47:01.440 --> 00:47:03.640
So scalability comes for free.


00:47:03.640 --> 00:47:13.160
Like, you can scale that your Hello World app to a billion users and not notice because all the computation is going to run on their end.


00:47:13.560 --> 00:47:17.360
which is another really cool aspect of the whole thing


00:47:17.360 --> 00:47:21.060
that we don't give enough credit to it, but it's important.


00:47:21.060 --> 00:47:24.860
- Yeah, it absolutely is.


00:47:24.860 --> 00:47:27.820
Unless you have some kind of server sync type of thing,


00:47:27.820 --> 00:47:31.740
there's just, there's no effort, right?


00:47:31.740 --> 00:47:33.020
- Yeah.


00:47:33.020 --> 00:47:35.660
- Other than delivering the WASM bits.


00:47:35.660 --> 00:47:36.500
- Yeah.


00:47:36.500 --> 00:47:38.780
- All right, somewhere buried in here,


00:47:38.780 --> 00:47:40.900
we have PiperCard, there we go.


00:47:40.900 --> 00:47:41.820
- Okay.


00:47:41.820 --> 00:47:46.060
So you point you had uh mentioned you were working on this tell us tell us about this nick


00:47:46.060 --> 00:47:50.060
Okay, so, peter when he announced


00:47:50.060 --> 00:47:55.420
Uh pi script to the world at icon last year. He said this is going to be for the 99


00:47:55.420 --> 00:48:02.380
And for that he meant that not developers. Okay, and i'm old enough because i'm


00:48:02.380 --> 00:48:06.780
dinosaur, uh really in internet time, um


00:48:07.980 --> 00:48:11.220
You were on the internet before the web existed.


00:48:11.220 --> 00:48:13.540
I was, actually.


00:48:13.540 --> 00:48:19.500
I remember getting NCSA Mosaic onto a 386 machine


00:48:19.500 --> 00:48:22.820
in my computing lab at university and going,


00:48:22.820 --> 00:48:25.300
oh my gosh, this is incredible.


00:48:25.300 --> 00:48:26.900
It was mind-blowing.


00:48:26.900 --> 00:48:28.340
That's the first graphical--


00:48:28.340 --> 00:48:30.460
I can connect to NASA?


00:48:30.460 --> 00:48:33.180
That's amazing.


00:48:33.180 --> 00:48:35.260
Just in two minutes, I'll be able to download this picture.


00:48:35.260 --> 00:48:37.100
It'll be so remarkable.


00:48:37.100 --> 00:48:38.900
- Yeah, there was Archie, there was Gopher,


00:48:38.900 --> 00:48:41.460
there was Telnet, there was that before the web.


00:48:41.460 --> 00:48:43.580
- Okay, that's a whole different podcast


00:48:43.580 --> 00:48:46.900
for old fellows who were on the web back in the day.


00:48:46.900 --> 00:48:48.340
We should stop that now.


00:48:48.340 --> 00:48:49.180
We're turning into the--


00:48:49.180 --> 00:48:52.620
- The internet used to have a sound, Nicholas.


00:48:52.620 --> 00:48:54.140
It had a sound.


00:48:54.140 --> 00:48:56.500
- Yes, oh yes, yes.


00:48:56.500 --> 00:49:00.460
Anyway, sorry, young people, anyone under the age of 40.


00:49:00.460 --> 00:49:02.700
(laughing)


00:49:02.700 --> 00:49:05.260
- All right, paper card.


00:49:05.260 --> 00:49:08.860
But back then, when dinosaurs ruled the world,


00:49:08.860 --> 00:49:11.100
there was an incredible framework


00:49:11.100 --> 00:49:17.500
for writing GUI-based apps on the early versions of the Mac.


00:49:17.500 --> 00:49:19.460
And it's called HyperCard.


00:49:19.460 --> 00:49:24.540
And the concept is very easy to explain.


00:49:24.540 --> 00:49:27.980
The user interface is just made of a stack of cards.


00:49:27.980 --> 00:49:31.580
And there is always one card being displayed at once.


00:49:31.580 --> 00:49:33.340
And you interact with that card.


00:49:33.340 --> 00:49:37.500
So there might be a button or there might be some text or a link or a picture or a movie


00:49:37.500 --> 00:49:41.340
But when you interact with that it transitions you to another card


00:49:41.340 --> 00:49:43.220
So it's a little bit like you know


00:49:43.220 --> 00:49:47.020
Again from a similar vintage that those choose your own adventure games where you know


00:49:47.020 --> 00:49:51.340
If you want to kill troll turn to page 291 if you want to run away turn to page 32


00:49:51.340 --> 00:49:53.140
So you transition to a new state?


00:49:53.140 --> 00:49:57.580
That's a new card or a new piece of text in the adventure game as it were and so on and so forth


00:49:57.580 --> 00:50:01.340
Okay, it's really easy to explain that to 11 year olds. Okay


00:50:01.900 --> 00:50:09.900
Um, and so we took that piper card model and we created something, that we demoed at PyCon.


00:50:09.900 --> 00:50:17.660
Um that allows you to essentially, uh build apps on top of PyScript using these concepts, okay


00:50:17.660 --> 00:50:19.900
um


00:50:19.900 --> 00:50:21.900
I'm, not sure whether these will work still


00:50:21.900 --> 00:50:27.900
The auto advance one works you just have to have patience because it takes 10 seconds to auto advance


00:50:28.380 --> 00:50:33.020
Yeah, okay. So that so these demos allow me to um


00:50:33.020 --> 00:50:39.420
You know exercise different aspects of the underlying browser and how that interacts with python and things


00:50:39.420 --> 00:50:47.500
But what we've done is we've renamed it from hyper card because that has a legacy people think it's going to be hyper card


00:50:47.500 --> 00:50:52.860
When in fact, it's not hyper card. It's actually python the browser, but we use that card like


00:50:53.740 --> 00:51:00.620
Metaphor, but there are other things that we kind of we want to build into that. So right now literally this is what I do


00:51:00.620 --> 00:51:06.540
Uh in my day is i'm thinking very hard and writing. the first


00:51:06.540 --> 00:51:14.460
Draft of what invents this framework will be so that it makes it easy for people to create.


00:51:14.460 --> 00:51:17.260
user interface led


00:51:17.260 --> 00:51:20.300
Applications using python and pyscript in the browser


00:51:20.780 --> 00:51:26.700
Wherever the browser may be on your tesla on your mobile phone on your tablet on your desktop. It'll all look the same


00:51:26.700 --> 00:51:28.620
um now


00:51:28.620 --> 00:51:34.380
i've been working at perhaps the python end of things, but another aspect of this is that we want to


00:51:34.380 --> 00:51:39.340
Um, make sure that we create a development environment that will probably end up in in


00:51:39.340 --> 00:51:44.380
Pyscrite.com that will allow beginner coders in the same way that you know


00:51:44.380 --> 00:51:47.740
My work on mu tries to give you a code editor


00:51:47.820 --> 00:51:50.120
that's not as complicated as a Visual Studio code,


00:51:50.120 --> 00:51:52.700
but it lets you get to the good stuff as quickly as possible.


00:51:52.700 --> 00:51:55.120
So it is a similar sort of philosophy,


00:51:55.120 --> 00:51:57.300
will allow you to draw your user interface,


00:51:57.300 --> 00:52:01.400
allow you to create the logic that you need


00:52:01.400 --> 00:52:04.520
to make your app run without actually even realizing


00:52:04.520 --> 00:52:07.160
that under the hood you've got Python running as well.


00:52:07.160 --> 00:52:12.260
- So we should see PiperCard as kind of a proof of concept,


00:52:12.260 --> 00:52:15.160
and then you're coming out with this, you called it Invent?


00:52:15.160 --> 00:52:22.440
Invent so you literally import invent and then import app or import dot whatever. Yeah


00:52:22.440 --> 00:52:26.040
Yeah, yeah, yeah, yeah


00:52:26.040 --> 00:52:28.040
The day over here in the uk


00:52:28.040 --> 00:52:32.700
But i'll i'll say one thing to you. Nicholas. Actually i'm a little disappointed


00:52:32.700 --> 00:52:37.100
To be honest that i'm the only one that actually is dogfooding


00:52:37.100 --> 00:52:43.080
Pipe and writing my talks with invent and all of those, right? Yeah


00:52:43.080 --> 00:52:43.920
- Yeah.


00:52:43.920 --> 00:52:45.240
- You should be.


00:52:45.240 --> 00:52:46.080
- For Python.


00:52:46.080 --> 00:52:47.200
- Hey, it's great.


00:52:47.200 --> 00:52:49.960
I've been using actually Visual, PyScript,


00:52:49.960 --> 00:52:53.120
and then Invent, et cetera, for my talk.


00:52:53.120 --> 00:52:56.080
And I was expecting you would say like, yeah, me too.


00:52:56.080 --> 00:52:57.520
You're like, oh, really?


00:52:57.520 --> 00:53:00.400
Really brave, really brave of you.


00:53:00.400 --> 00:53:04.160
- Just left you hanging dry.


00:53:04.160 --> 00:53:05.000
- Yeah, yeah.


00:53:05.000 --> 00:53:06.880
I have a bang to rights.


00:53:06.880 --> 00:53:08.280
He's got me bang to rights.


00:53:09.880 --> 00:53:13.520
But honestly, one thing that I didn't think before,


00:53:13.520 --> 00:53:16.560
while in the Uber to the conference,


00:53:16.560 --> 00:53:19.240
the day before my, no, actually the day of my talk,


00:53:19.240 --> 00:53:21.960
the ability to actually check my slides


00:53:21.960 --> 00:53:24.720
and change them on the backseat of a car,


00:53:24.720 --> 00:53:29.720
on my phone, was mind-blowing and really cool, right?


00:53:29.720 --> 00:53:33.980
Which is, it helps to the power of the framework itself.


00:53:33.980 --> 00:53:34.820
Yeah, kudos.


00:53:34.820 --> 00:53:37.280
- So you've told a really good story here,


00:53:37.280 --> 00:53:40.880
because now imagine that you are in a classroom in,


00:53:40.880 --> 00:53:43.520
I don't know, I'm just picking random country, in Mexico.


00:53:43.520 --> 00:53:45.680
Okay, and you've got a class where there are kids


00:53:45.680 --> 00:53:47.780
with Chromebooks, okay?


00:53:47.780 --> 00:53:50.440
Getting Python on there,


00:53:50.440 --> 00:53:54.320
getting any app to be built on those is difficult enough,


00:53:54.320 --> 00:53:59.320
but with PyScripts, it's gonna be so much easier


00:53:59.320 --> 00:54:03.340
to sort of story to do that sort of thing.


00:54:03.340 --> 00:54:06.920
So that's, we're working hard on that


00:54:06.920 --> 00:54:09.400
It's gonna be a long journey, but we're confident


00:54:09.400 --> 00:54:12.460
that it'll produce good results.


00:54:12.460 --> 00:54:16.880
- Do you have some dreams or have you thought about


00:54:16.880 --> 00:54:21.560
Git and GitHub integration into pyscript.com?


00:54:21.560 --> 00:54:25.320
Like if I had a pyscript.com thing and a GitHub repo,


00:54:25.320 --> 00:54:26.680
could I have one mirror the other


00:54:26.680 --> 00:54:31.360
so that I could do GitHub-like things to it?


00:54:31.360 --> 00:54:33.360
- Yeah, go ahead, Nikos.


00:54:33.360 --> 00:54:37.440
I was just gonna say I I look forward to the uh the feature request on our


00:54:37.440 --> 00:54:41.360
Our repository


00:54:41.360 --> 00:54:44.240
You know, we're listening to the community if that's something that you want


00:54:44.240 --> 00:54:51.520
Tell us about it. Yeah that actually I would love to hear more about how would you people would envision it like


00:54:51.520 --> 00:54:55.440
so we already kind of already have it, uh in the sense that


00:54:55.440 --> 00:54:57.440
uh


00:54:57.440 --> 00:54:59.040
people working on


00:54:59.040 --> 00:55:02.200
both PyScript.com but also the open source project.


00:55:02.200 --> 00:55:06.360
We have a CLI for both.


00:55:06.360 --> 00:55:08.560
And the CLI on the open source site


00:55:08.560 --> 00:55:11.800
allows you to create new projects with a template


00:55:11.800 --> 00:55:15.200
to run them locally and those type of things.


00:55:15.200 --> 00:55:18.800
We have a plugin for that CLI that


00:55:18.800 --> 00:55:23.120
is a PyScript.com plugin that allows you to log in, log out,


00:55:23.120 --> 00:55:25.760
and then basically have a local copy


00:55:25.760 --> 00:55:28.160
version of your project that is in .com.


00:55:28.160 --> 00:55:32.320
And one of the first scenarios that we're thinking was,


00:55:32.320 --> 00:55:36.240
as a developer, probably not as a non-technical user,


00:55:36.240 --> 00:55:39.960
but as a developer, I want to use GitHub for my version control things,


00:55:39.960 --> 00:55:43.880
and I want to use PyScript.com to deploy and change things.


00:55:43.880 --> 00:55:47.120
So we do have a minimal integration.


00:55:47.120 --> 00:55:50.080
We're going to be announcing and properly announcing


00:55:50.080 --> 00:55:53.720
and releasing those things in a month time frame.


00:55:53.720 --> 00:55:59.720
But that is one of the most important use cases that we have.


00:55:59.720 --> 00:56:04.660
Take my thoughts for what they are,


00:56:04.660 --> 00:56:08.940
is very loosely informed, not a lot of skin in the game,


00:56:08.940 --> 00:56:13.540
but with my website, my personal website,


00:56:13.540 --> 00:56:16.840
I use Hugo and then I just push to a branch


00:56:16.840 --> 00:56:19.840
that triggers a deploy on Netlify.


00:56:19.840 --> 00:56:23.080
There's the Heroku type thing.


00:56:23.080 --> 00:56:25.880
It'd be cool if it kind of just like,


00:56:25.880 --> 00:56:29.040
if it goes to this branch, that's what's on PyScript.com.


00:56:29.040 --> 00:56:31.680
That's what I would love if I were doing that integration


00:56:31.680 --> 00:56:33.000
and using it, but.


00:56:33.000 --> 00:56:35.000
- Yeah, yeah.


00:56:35.000 --> 00:56:37.280
That's one use cases.


00:56:37.280 --> 00:56:38.840
I think interesting that you mentioned,


00:56:38.840 --> 00:56:41.880
we've been looking at Heroku as well, et cetera.


00:56:41.880 --> 00:56:45.120
The kind of difficulty here is we're often used


00:56:45.120 --> 00:56:50.000
to a one repo, one app type of separation,


00:56:50.000 --> 00:56:52.600
but you may have like a one repo where let's say


00:56:52.600 --> 00:56:54.700
you collect all your talks over,


00:56:54.700 --> 00:56:56.620
that you give around conferences.


00:56:56.620 --> 00:56:59.000
And you may wanna have a folder


00:56:59.000 --> 00:57:01.820
and each folder is one app on pyscript.com.


00:57:01.820 --> 00:57:05.640
Then how do we support those different workflows?


00:57:05.640 --> 00:57:08.820
That's the type of thing I'm thinking right now.


00:57:08.820 --> 00:57:14.060
- Sure, well, people who are using it,


00:57:14.060 --> 00:57:17.260
reach out to these guys and give me your thoughts here.


00:57:17.260 --> 00:57:18.100
- Thank you.


00:57:18.100 --> 00:57:19.220
- All right, we're getting, of course,


00:57:19.220 --> 00:57:20.300
yeah, we're getting short on time.


00:57:20.300 --> 00:57:22.420
So maybe the last thing we should talk about


00:57:22.420 --> 00:57:26.080
is kind of PyScript Next.


00:57:26.080 --> 00:57:28.960
I wonder where are we going from here, folks?


00:57:28.960 --> 00:57:32.600
- Yes, so let me introduce this real quick.


00:57:32.600 --> 00:57:36.280
And I think you should have like a link to--


00:57:36.280 --> 00:57:38.320
- I have a bunch of tabs open.


00:57:38.320 --> 00:57:40.280
- That one, perfect.


00:57:40.280 --> 00:57:42.280
So what's PyScript Next?


00:57:42.280 --> 00:57:44.920
It's, as I said, like we're rewriting PyScript


00:57:44.920 --> 00:57:48.160
with a smaller core, more flexible, web native, et cetera,


00:57:48.160 --> 00:57:49.520
to allow different things.


00:57:49.520 --> 00:57:54.520
So this tech preview that we're formally launching next week.


00:57:54.520 --> 00:57:59.600
So you all listening, it was top first and top five.


00:57:59.600 --> 00:58:03.400
- Awesome, I'm sure the release was amazing


00:58:03.400 --> 00:58:05.600
and it went really well, so perfect.


00:58:05.600 --> 00:58:06.440
Congratulations.


00:58:06.440 --> 00:58:07.280
(laughing)


00:58:07.280 --> 00:58:09.380
- That's very Doctor Who of you to say that.


00:58:09.380 --> 00:58:14.120
- But the gist of it is that we rethought


00:58:14.120 --> 00:58:19.120
a lot of the core concepts and now we're able to allow


00:58:19.120 --> 00:58:28.720
allow multiple interpreters. We have MicroPython by default, supported by default. All of the


00:58:28.720 --> 00:58:34.480
interpreters support execution on the main thread, just like the previous version of PyScript.


00:58:34.480 --> 00:58:40.480
But now also we support on a worker, a web worker, which means you can run Python


00:58:40.480 --> 00:58:46.800
while the web is loading or while the page is doing other things.


00:58:47.440 --> 00:58:51.440
It's like there's another process or the processes in your page.


00:58:51.440 --> 00:58:54.480
That's one of the basic web workers.


00:58:54.480 --> 00:58:55.480
Yes.


00:58:55.480 --> 00:58:56.480
Right.


00:58:56.480 --> 00:58:58.620
That's been a big part of WebAssembly for quite a while, but you all haven't leveraged


00:58:58.620 --> 00:58:59.620
that previously, right?


00:58:59.620 --> 00:59:00.620
Yes.


00:59:00.620 --> 00:59:01.620
Yes.


00:59:01.620 --> 00:59:06.120
And it was very painful for us because, you know, for instance, Fano, an internal project


00:59:06.120 --> 00:59:12.240
of Anaconda, like they have all the examples ported to the web with Pyodide.


00:59:12.240 --> 00:59:14.880
because we didn't support workers yet,


00:59:14.880 --> 00:59:17.760
it was better for them to just use PyDi directly.


00:59:17.760 --> 00:59:19.600
Now, we can allow them to use


00:59:19.600 --> 00:59:22.240
PyScript and do all those things.


00:59:22.240 --> 00:59:27.560
We saw actually a tech preview of even Django


00:59:27.560 --> 00:59:32.960
or FastAPI running on PyScript with workers,


00:59:32.960 --> 00:59:35.840
which is extremely cool.


00:59:35.840 --> 00:59:40.120
It's hard to actually imagine,


00:59:40.120 --> 00:59:43.960
But even just the educational purpose of this,


00:59:43.960 --> 00:59:47.480
you can have live running examples in your docs


00:59:47.480 --> 00:59:49.960
and you can just play with that, which is interesting.


00:59:49.960 --> 00:59:51.880
- Well, I don't know how well


00:59:51.880 --> 00:59:53.160
PyScript plugs into this world,


00:59:53.160 --> 00:59:56.520
but there is an entire ecosystem


00:59:56.520 --> 00:59:58.520
that I don't operate very much in,


00:59:58.520 --> 01:00:01.320
but where if you have WebAssembly,


01:00:01.320 --> 01:00:03.240
you can run it kind of like


01:00:03.240 --> 01:00:05.640
Node can run JavaScript on a server.


01:00:05.640 --> 01:00:09.720
You can run WebAssembly stuff in the cloud on a server


01:00:09.720 --> 01:00:11.640
in a container, you can run it directly.


01:00:11.640 --> 01:00:14.000
So in those scenarios, it makes tons of sense to say,


01:00:14.000 --> 01:00:17.280
we're going to use PyScript to host FastAPI.


01:00:17.280 --> 01:00:19.240
And it has a meaning, right?


01:00:19.240 --> 01:00:23.480
It's not just browsers all the way down or something, right?


01:00:23.480 --> 01:00:26.360
It has a purpose for being there.


01:00:26.360 --> 01:00:27.200
Yeah, yeah.


01:00:27.200 --> 01:00:30.600
And well, I wish we had more time.


01:00:30.600 --> 01:00:33.320
There's a lot going on in WebAssembly ecosystem


01:00:33.320 --> 01:00:36.200
as well to support this as well, which is cool.


01:00:36.200 --> 01:00:41.920
But just for the interest of time, this next branch as well,


01:00:41.920 --> 01:00:46.800
it also supports communication between workers and the main thread and vice versa.


01:00:46.800 --> 01:00:50.000
And we can have multiple interpreters.


01:00:50.000 --> 01:00:53.680
Maybe one is Pyodide, another is Python, another is Lua.


01:00:53.680 --> 01:00:58.080
And we have examples of those that can communicate between each other.


01:00:58.080 --> 01:01:05.720
If you click on All Together, I think that's the one where they're all together.


01:01:05.720 --> 01:01:11.340
All the interpreters to get no it's not that one. I know it's this one you can but you need to open the console


01:01:11.340 --> 01:01:18.360
Uh, no, is it that one i'm not sure it is


01:01:18.360 --> 01:01:27.640
Oh, right, yes, not this one. I think it's if you go back it might be the worker one, um


01:01:27.640 --> 01:01:31.000
at the bottom


01:01:31.000 --> 01:01:33.960
Worker try that


01:01:34.520 --> 01:01:36.940
Yeah, okay. So you've got javascript


01:01:36.940 --> 01:01:40.040
Starting micropython in a web worker


01:01:40.040 --> 01:01:41.720
Okay


01:01:41.720 --> 01:01:43.720
and then micropython


01:01:43.720 --> 01:01:51.480
Saying hello back to javascript, but at the same time micropython on the main thread has actually started in a web worker a lua


01:01:51.480 --> 01:01:53.940
interpreter and lua


01:01:53.940 --> 01:01:59.660
Is saying back to the main thread to micropython. Hi micropython and then you've got micropython


01:01:59.660 --> 01:02:02.360
starting cpython


01:02:02.440 --> 01:02:04.440
on a web worker


01:02:04.440 --> 01:02:12.040
And then when c python has loaded and everything back to the micropython context, you know, hello micropython this, you know


01:02:12.040 --> 01:02:13.400
Can you imagine?


01:02:13.400 --> 01:02:19.640
well, I can actually because I used to do some work for the uk government and I was on a data platform and


01:02:19.640 --> 01:02:24.600
The civil servants who were doing all the stats work in the ministry of justice were using our platform


01:02:24.600 --> 01:02:28.360
And they would like they would want data where they would


01:02:28.840 --> 01:02:35.000
they wanted to grab data, then run it through some R thing, and then run it through some Python thing,


01:02:35.000 --> 01:02:39.560
and then stick it on a browser, you know, on a website somewhere, so some minister or a high


01:02:39.560 --> 01:02:44.920
fluting civil servant can go and have a look at the graph of, I don't know, COVID, the spread of


01:02:44.920 --> 01:02:49.160
COVID through the UK prison system or something like that. Yeah, well, you can do that all in a


01:02:49.160 --> 01:02:53.880
single browser. The amount of stand on one leg, stick your finger in your ear and whistle, God


01:02:53.880 --> 01:02:58.080
God save the king backwards you needed to get that to work was you know


01:02:58.080 --> 01:03:02.500
It took them weeks to just get their development environment set up with web workers


01:03:02.500 --> 01:03:06.960
We've and the multiple run times kind of got that as a solution here now as well


01:03:06.960 --> 01:03:10.160
actually


01:03:10.160 --> 01:03:11.480
the


01:03:11.480 --> 01:03:16.480
The speed of loading speed like you didn't we didn't have yeah


01:03:16.480 --> 01:03:20.540
Loading screen we didn't have like actually if you check the network


01:03:21.200 --> 01:03:24.000
Let me try the magic lot live. Yeah, Oh


01:03:24.000 --> 01:03:28.200
Microphone just my microphone see how fast that's that brings you up


01:03:28.200 --> 01:03:31.360
This one. Yeah


01:03:31.360 --> 01:03:33.360
There we go. I mean, it's like


01:03:33.360 --> 01:03:35.600
instant


01:03:35.600 --> 01:03:41.120
Yeah, it is instant it's amazing yeah, I'm once it's cashed it's


01:03:41.120 --> 01:03:43.640
You know


01:03:43.640 --> 01:03:50.640
Yeah, it's this kind of stuff that I'm thinking like then the front-end framework type of story starts to become completely realistic


01:03:50.640 --> 01:03:51.640
- Realistic.


01:03:51.640 --> 01:03:52.920
- Yeah. - Yeah.


01:03:52.920 --> 01:03:56.160
Actually, the last one that I wanted to show


01:03:56.160 --> 01:03:59.200
actually is the next tab that you have, I think,


01:03:59.200 --> 01:04:01.400
which is, there you go.


01:04:01.400 --> 01:04:04.200
Can you open the console as well?


01:04:04.200 --> 01:04:09.720
- I'm gonna use my little hotkey thing here,


01:04:09.720 --> 01:04:12.240
my little, it's like a hotkey you can do


01:04:12.240 --> 01:04:13.600
to open those things, anyway.


01:04:13.600 --> 01:04:14.440
Yeah, okay.


01:04:14.440 --> 01:04:15.940
- So if you go to console, actually,


01:04:15.940 --> 01:04:17.780
just to show the results.


01:04:17.780 --> 01:04:19.120
- Yeah. - Perfect.


01:04:19.120 --> 01:04:21.160
So this example is actually having,


01:04:21.160 --> 01:04:26.160
it's a Python input keyword,


01:04:26.160 --> 01:04:31.780
stopping its execution, waiting for an answer.


01:04:31.780 --> 01:04:34.640
So it's actually blocking calls.


01:04:34.640 --> 01:04:36.720
- You're good at it, Matt, seven.


01:04:36.720 --> 01:04:38.320
- Right, so but if you add it--


01:04:38.320 --> 01:04:40.840
- No, no, no, no, no, that's the JavaScript console.


01:04:40.840 --> 01:04:43.160
You wanna type seven into the input.


01:04:43.160 --> 01:04:44.200
- The inputs, yes.


01:04:44.200 --> 01:04:46.920
- Okay.


01:04:46.920 --> 01:04:49.240
So basically, what's happening is it's blocking


01:04:49.240 --> 01:04:51.720
and then waiting for its call while the page is still


01:04:51.720 --> 01:04:53.440
responsive and everything else.


01:04:53.440 --> 01:04:56.440
And then when you answer, it executes.


01:04:56.440 --> 01:05:01.040
That is huge because that unlocks a lot of use cases.


01:05:01.040 --> 01:05:04.560
Debugger, for instance, we can have a breakpoint somewhere,


01:05:04.560 --> 01:05:07.120
and you can go and debug your code.


01:05:07.120 --> 01:05:11.400
And a lot of scenarios that were not working before


01:05:11.400 --> 01:05:12.280
can work now.


01:05:12.280 --> 01:05:15.000
So this is very exciting.


01:05:15.000 --> 01:05:17.500
Yeah, there's a lot of kind of under the hood stuff


01:05:17.500 --> 01:05:20.760
that has changed that enables us to do some really cool things


01:05:20.760 --> 01:05:23.120
now.


01:05:23.120 --> 01:05:25.480
Yeah, excellent.


01:05:25.480 --> 01:05:30.000
So with the web workers, do I get async and await?


01:05:30.000 --> 01:05:35.400
Yes, yeah, and proper async and await, yes.


01:05:35.400 --> 01:05:36.320
That's fantastic.


01:05:36.320 --> 01:05:39.560
OK, I love it.


01:05:39.560 --> 01:05:41.840
All right, guys, what else?


01:05:41.840 --> 01:05:44.400
What final things do you want to tell people


01:05:44.400 --> 01:05:48.400
Before we wrap up this pi script update episode


01:05:48.400 --> 01:05:51.040
I've got two things


01:05:51.040 --> 01:05:54.320
First one is if you want to play if you want to have a look around


01:05:54.320 --> 01:06:02.400
Uh pi script.com is the place to just get your hands dirty and our colleagues who work on that


01:06:02.400 --> 01:06:06.000
I've done an amazing job and uh the feedback that you can give them


01:06:06.000 --> 01:06:11.760
Through the form that you'll find on the website is read and we care very deeply about you know


01:06:12.080 --> 01:06:17.040
The experience that users have and suggestions and things so knock yourself out go and go and do that


01:06:17.040 --> 01:06:22.400
And the second thing I want to say is that pyscrit is open source software. So I know


01:06:22.400 --> 01:06:29.520
Fabio and myself are employed by anaconda, but we have contributors who are not anaconda employees and you know


01:06:29.520 --> 01:06:35.760
We would love the community to to come with us on this journey. tell us, you know what you want


01:06:36.400 --> 01:06:42.080
Build a framework on top of pi script build plugins on top of pi script create a goofy app on top of pi script


01:06:42.080 --> 01:06:44.560
You know put it on your tesla or whatever, you know, I don't know


01:06:44.560 --> 01:06:49.440
I would love it would make my day if before the end of the year somebody's gone. Hey


01:06:49.440 --> 01:06:57.120
I've built a death star using pi script or some ridiculous project or whatever and you know, I go wow


01:06:57.120 --> 01:07:04.560
Like I said, I never thought someone would do that. that's be playful explore be creative have fun


01:07:04.720 --> 01:07:06.000
That's what we want to see.


01:07:06.000 --> 01:07:07.880
That's what I want to see.


01:07:07.880 --> 01:07:10.120
I don't know, Fabio, how about you?


01:07:10.120 --> 01:07:14.760
- Yeah, I would actually just double down what you said


01:07:14.760 --> 01:07:18.760
and actually encourage everyone to reach out.


01:07:18.760 --> 01:07:22.720
We're trying to make it a good tool


01:07:22.720 --> 01:07:25.000
for anyone to learn programming


01:07:25.000 --> 01:07:26.720
or to share your things, et cetera.


01:07:26.720 --> 01:07:30.040
And a lot of the difficulties we have all the time


01:07:30.040 --> 01:07:35.040
is trying to think with new users' brain


01:07:35.040 --> 01:07:39.600
or students' brain and people with different backgrounds


01:07:39.600 --> 01:07:41.960
because unfortunately or fortunately,


01:07:41.960 --> 01:07:44.720
we've been in this game for 20 years, right?


01:07:44.720 --> 01:07:45.960
So it's really hard.


01:07:45.960 --> 01:07:49.320
So when we say, "Reach out, we need you,"


01:07:49.320 --> 01:07:50.680
we really mean it.


01:07:50.680 --> 01:07:53.600
Like, I think, I strongly believe


01:07:53.600 --> 01:07:57.640
that all open source projects are about people


01:07:57.640 --> 01:08:00.500
and benefit from the diversity, right?


01:08:00.500 --> 01:08:04.320
Like good docs are made by non-developers.


01:08:04.320 --> 01:08:09.320
Good content is made by people that have passion


01:08:09.320 --> 01:08:14.060
for hopping on a video and talking about stuff.


01:08:14.060 --> 01:08:16.780
Like I just, I'm trying to convince my daughter


01:08:16.780 --> 01:08:20.020
to have like a PyScript channel on TikTok, you know,


01:08:20.020 --> 01:08:22.060
just to talk. - That'd be cool, yeah.


01:08:22.060 --> 01:08:23.500
- Right, to talk the lingo.


01:08:23.500 --> 01:08:26.380
So we really value you reaching out


01:08:26.380 --> 01:08:31.380
and coming and helping us to be more human as a project.


01:08:31.380 --> 01:08:36.140
And the second thing is really help us spread the word


01:08:36.140 --> 01:08:40.700
and make it popular so that we can make Python


01:08:40.700 --> 01:08:42.600
even more popular and help people,


01:08:42.600 --> 01:08:47.600
which I think in this age where we have AI


01:08:47.600 --> 01:08:50.660
and big tech companies and algorithms and all of that,


01:08:50.660 --> 01:08:55.660
giving power to people to just run a programming language


01:08:55.740 --> 01:08:59.180
on their machines and the distributed nature of PyScript,


01:08:59.180 --> 01:09:01.020
I think it's important today.


01:09:01.020 --> 01:09:05.300
So yeah, that's all I wanted to say.


01:09:05.300 --> 01:09:06.200
- Yeah, excellent.


01:09:06.200 --> 01:09:08.420
Maybe a quick final question.


01:09:08.420 --> 01:09:11.500
Marwan says, "Any work on the HTML canvas via PyScript?


01:09:11.500 --> 01:09:15.540
"Thinking of simple stuff like creating a snake game."


01:09:15.540 --> 01:09:18.500
- Okay, Marwan, import JS.


01:09:18.500 --> 01:09:21.780
Now you have global this, okay?


01:09:21.780 --> 01:09:24.380
Now you have access to your canvas


01:09:24.380 --> 01:09:28.380
And it's the same API because we're proxying the JavaScript objects


01:09:28.380 --> 01:09:32.540
as you'll find on like the Mozilla developer docs.


01:09:32.540 --> 01:09:34.540
So go knock yourself out.


01:09:34.540 --> 01:09:36.780
Awesome. Yeah, that's what I imagine.


01:09:36.780 --> 01:09:41.580
MDN network, not W3Schools, if you can choose.


01:09:41.580 --> 01:09:43.580
Yes, yes.


01:09:43.580 --> 01:09:48.940
I'm also working on a higher level web API for PyScript,


01:09:48.940 --> 01:09:51.180
which will help with that as well,


01:09:51.180 --> 01:09:54.680
make it the API more Pythonic,


01:09:54.680 --> 01:09:56.840
but what Nicol said is available today


01:09:56.840 --> 01:09:58.340
and you can just, you know.


01:09:58.340 --> 01:10:01.400
- Yeah, you get to reuse your JavaScript skills


01:10:01.400 --> 01:10:02.440
if you have them.


01:10:02.440 --> 01:10:04.280
- Yeah, it's the same API.


01:10:04.280 --> 01:10:05.200
It's the same API.


01:10:05.200 --> 01:10:07.700
- Yeah.


01:10:07.700 --> 01:10:09.220
All right, guys.


01:10:09.220 --> 01:10:10.760
Thank you for being here.


01:10:10.760 --> 01:10:12.320
Thank you for this project.


01:10:12.320 --> 01:10:13.680
It's really, really exciting


01:10:13.680 --> 01:10:16.400
and I look forward to catching up again


01:10:16.400 --> 01:10:20.160
and seeing what else you've built in six months,


01:10:20.160 --> 01:10:22.000
year whenever it turns out to be.


01:10:22.000 --> 01:10:22.840
- Yes.


01:10:22.840 --> 01:10:25.720
And thank you Michael for this and running the show.


01:10:25.720 --> 01:10:27.960
This is always a great fun.


01:10:27.960 --> 01:10:28.800
Thank you.


01:10:28.800 --> 01:10:30.160
- Yes, thank you.


01:10:30.160 --> 01:10:31.000
- Yeah, you bet.


01:10:31.000 --> 01:10:31.820
Bye.

