WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, everyone.


00:00:01.000 --> 00:00:04.200
- Hello. - Hello.


00:00:04.200 --> 00:00:05.580
- Yeah, thanks for being here.


00:00:05.580 --> 00:00:09.920
It's great to have you on the podcast, on YouTube as well.


00:00:09.920 --> 00:00:12.840
So everyone watching, thank you for being here,


00:00:12.840 --> 00:00:14.680
either live or afterwards.


00:00:14.680 --> 00:00:16.920
We got comments or feedback, throw it out into the live chat


00:00:16.920 --> 00:00:20.380
and I'll try to bring that in to our guests here.


00:00:20.380 --> 00:00:23.220
And with that out of the way, let's go ahead and get started.


00:00:23.220 --> 00:00:28.060
You tuned it, Ivan and Waylon, welcome to Talk Python Live.


00:00:28.060 --> 00:00:30.380
and Waylon, welcome to Talk Python To Me.


00:00:30.380 --> 00:00:33.980
- Thank you so much for having us.


00:00:33.980 --> 00:00:36.020
- Yeah, thank you for inviting us.


00:00:36.020 --> 00:00:38.480
- Yeah, it's fantastic to have you all here.


00:00:38.480 --> 00:00:43.660
Let's start with just a little bit of your background,


00:00:43.660 --> 00:00:45.540
since there's three of you, maybe not too long,


00:00:45.540 --> 00:00:49.580
but how'd you all get into programming Python


00:00:49.580 --> 00:00:52.340
into this Kedro project and so on?


00:00:52.340 --> 00:00:54.220
Etunde, wanna start with you?


00:00:54.220 --> 00:00:57.420
- Sure, so I'm a principal product manager on Kedro.


00:00:57.420 --> 00:01:01.420
I've been with the project for actually exactly today, three years.


00:01:01.420 --> 00:01:02.420
Oh, nice.


00:01:02.420 --> 00:01:03.420
It's been three years.


00:01:03.420 --> 00:01:04.420
How old is Kedro?


00:01:04.420 --> 00:01:05.420
Just older than that.


00:01:05.420 --> 00:01:06.420
Three years and eight months.


00:01:06.420 --> 00:01:07.420
Yeah.


00:01:07.420 --> 00:01:08.420
So you've been there most of the time.


00:01:08.420 --> 00:01:09.420
That's fantastic.


00:01:09.420 --> 00:01:10.420
Yeah.


00:01:10.420 --> 00:01:16.540
Ivan has been there from the beginning, so he'll talk about that.


00:01:16.540 --> 00:01:21.580
My background is mechanical engineering, and I would have been a user of Kedro.


00:01:21.580 --> 00:01:25.380
We discovered, I think one of the coolest user interviews I've ever done was with my


00:01:25.380 --> 00:01:26.380
former team.


00:01:26.380 --> 00:01:28.660
it up on their own, which is amazing.


00:01:28.660 --> 00:01:30.660
And I'm with Ivan now.


00:01:30.660 --> 00:01:33.460
And oh, I work at Quantum Black.


00:01:33.460 --> 00:01:35.380
That's the primary.


00:01:35.380 --> 00:01:37.700
- Yeah, cool.


00:01:37.700 --> 00:01:39.180
And yeah, okay, Ivan?


00:01:39.180 --> 00:01:42.340
- Yeah, so I'm Ivan.


00:01:42.340 --> 00:01:44.480
I'm a tech lead for Kedro.


00:01:44.480 --> 00:01:48.540
Started, like, have been working with Quantum Black


00:01:48.540 --> 00:01:50.760
for the last almost five years now.


00:01:50.760 --> 00:01:51.600
Is it?


00:01:51.600 --> 00:01:52.420
Yeah, five years.


00:01:52.420 --> 00:01:54.100
And--


00:01:54.100 --> 00:01:55.140
- But you've been there from the beginning,


00:01:55.140 --> 00:01:57.180
as we hear?


00:01:57.180 --> 00:01:59.500
- From the beginning for Kedro, not for the beginning.


00:01:59.500 --> 00:02:00.340
- Yes, I mean.


00:02:00.340 --> 00:02:01.380
- Or Quantum, yeah.


00:02:01.380 --> 00:02:05.860
So initially it was a small internal tool


00:02:05.860 --> 00:02:10.860
that was being developed by another two people


00:02:10.860 --> 00:02:13.700
on our team, Nikos and Aris.


00:02:13.700 --> 00:02:16.220
And then we decided to turn it into a product,


00:02:16.220 --> 00:02:18.220
eventually started from scratch


00:02:18.220 --> 00:02:20.640
and developed it into what it is.


00:02:20.640 --> 00:02:23.140
Then we found out that things can get serious


00:02:23.140 --> 00:02:24.900
and then that's how we hired Yetu


00:02:24.900 --> 00:02:29.060
because we needed a PM as well as a proper product.


00:02:29.060 --> 00:02:33.460
Yeah, otherwise my background is in software engineering,


00:02:33.460 --> 00:02:35.100
all kinds of software engineering.


00:02:35.100 --> 00:02:36.980
Started off as web developer.


00:02:36.980 --> 00:02:41.460
I was very keen to do some game programming before that,


00:02:41.460 --> 00:02:44.340
but I couldn't find jobs related to that.


00:02:44.340 --> 00:02:45.180
Then it turns out--


00:02:45.180 --> 00:02:47.100
- A lot of people are interested in doing game programming


00:02:47.100 --> 00:02:50.020
until you actually get into the reality of it.


00:02:50.020 --> 00:02:53.260
And the reality is it's a lot of times it can be a grind


00:02:53.260 --> 00:02:56.600
and started a good job.


00:02:56.600 --> 00:02:58.320
- I was gonna say that I'm quite lucky


00:02:58.320 --> 00:03:01.360
that I didn't end up being a game programmer.


00:03:01.360 --> 00:03:04.160
- It's not the first time I heard that, that's right.


00:03:04.160 --> 00:03:09.160
- Yeah, so then I moved on to distributed systems


00:03:09.160 --> 00:03:13.920
and I ended up doing data and AI at QB mainly.


00:03:13.920 --> 00:03:18.400
So I'm kind of a newbie in the data field,


00:03:18.400 --> 00:03:22.160
but being there for five years, kind of newbie.


00:03:22.160 --> 00:03:23.660
(laughing)


00:03:23.660 --> 00:03:26.200
- Wow, a lot of people are in that realm, right?


00:03:26.200 --> 00:03:27.680
A lot of people are coming into


00:03:27.680 --> 00:03:30.080
the whole data science side of things.


00:03:30.080 --> 00:03:32.840
So, yeah, cool.


00:03:32.840 --> 00:03:34.480
Waylon, how about you?


00:03:34.480 --> 00:03:38.640
- All right, so my background is in mechanical engineering.


00:03:38.640 --> 00:03:43.640
And probably around 2014, I started diving deeper


00:03:43.640 --> 00:03:46.360
into the data side of things.


00:03:46.360 --> 00:03:50.360
I had some family medical things that came up


00:03:50.360 --> 00:03:55.320
and it kind of severely limited my ability to travel.


00:03:55.320 --> 00:03:58.000
And slowly over time, I just kind of doubled down


00:03:58.000 --> 00:04:00.480
into this side of things.


00:04:00.480 --> 00:04:03.640
It was right around the time you started the show.


00:04:03.640 --> 00:04:08.240
And a lot of what I've learned has either been directly


00:04:08.240 --> 00:04:12.760
from this show or from like taking ideas from this show


00:04:12.760 --> 00:04:16.040
and diving into them.


00:04:16.040 --> 00:04:18.260
- Oh, awesome.


00:04:18.260 --> 00:04:19.100
That's really cool.


00:04:19.960 --> 00:04:20.800
Happy to bring that to you.


00:04:20.800 --> 00:04:24.800
I think a lot of people who come from backgrounds


00:04:24.800 --> 00:04:29.340
that don't, they're not like traditional CS backgrounds.


00:04:29.340 --> 00:04:31.180
Right, they're kind of coming in through a side channel.


00:04:31.180 --> 00:04:34.400
I feel like the podcast has offered a lot of connection


00:04:34.400 --> 00:04:37.320
and extra information besides just what's on


00:04:37.320 --> 00:04:40.000
like the docs page of some projects for people,


00:04:40.000 --> 00:04:41.800
which is great, it's awesome to hear.


00:04:41.800 --> 00:04:46.800
- Yeah, so now I'm a team lead for a data scientist,


00:04:48.280 --> 00:04:52.400
data science team and do Python every day.


00:04:52.400 --> 00:04:57.400
And we use Kedro pretty heavily in all of our projects.


00:04:57.400 --> 00:04:58.440
- Interesting.


00:04:58.440 --> 00:05:01.640
So before we move on to the topic,


00:05:01.640 --> 00:05:04.760
give me a quick thought on comparing


00:05:04.760 --> 00:05:07.640
mechanical engineering work life experience


00:05:07.640 --> 00:05:11.080
to software development, Python developer experience.


00:05:11.080 --> 00:05:12.880
How do you feel about where you are?


00:05:12.880 --> 00:05:15.080
- I like where I'm at.


00:05:15.080 --> 00:05:21.640
One thing that I kind of struggled with in mechanical engineering was there was a lot


00:05:21.640 --> 00:05:27.080
of learning in college. There's a lot of things to learn and then you get in industry and


00:05:27.080 --> 00:05:34.200
everything's kind of like walled off and the learning doesn't completely stop but it's very


00:05:34.200 --> 00:05:34.840
hard to do.


00:05:34.840 --> 00:05:37.560
Not right now.


00:05:37.560 --> 00:05:37.880
Yeah.


00:05:37.880 --> 00:05:43.080
Go to mama, okay? You go to mama. Go to mama. Mama will help you, okay?


00:05:44.760 --> 00:05:45.260
Sorry.


00:05:45.260 --> 00:05:45.760
[LAUGHTER]


00:05:45.760 --> 00:05:47.000
Sorry, it's off mic.


00:05:47.000 --> 00:05:52.720
We had a pre-show breakdown of, right now,


00:05:52.720 --> 00:05:56.600
you got to go to mama instead of to me.


00:05:56.600 --> 00:05:57.480
No worries at all.


00:05:57.480 --> 00:05:58.600
Apparently it didn't work.


00:05:58.600 --> 00:06:02.280
Anyways, so then on the software side,


00:06:02.280 --> 00:06:06.760
a lot more things are open to learn.


00:06:06.760 --> 00:06:08.320
Yeah.


00:06:08.320 --> 00:06:09.880
There's a lot more resources that


00:06:09.880 --> 00:06:12.640
are just out there in the open and not


00:06:12.640 --> 00:06:17.440
behind proprietary IP patents and all that kind of stuff.


00:06:17.440 --> 00:06:20.380
I think that works really well for me.


00:06:20.380 --> 00:06:21.640
I'm a learner.


00:06:21.640 --> 00:06:24.520
I don't promote the, is it Galt?


00:06:24.520 --> 00:06:27.440
The personality study kind of things.


00:06:27.440 --> 00:06:30.480
Always come out with learner is like the top thing for me.


00:06:30.480 --> 00:06:32.880
- Nice, yeah, so it's a good fit.


00:06:32.880 --> 00:06:35.400
Yeah, if you don't like to continually learn


00:06:35.400 --> 00:06:39.000
and continually kind of reinvent yourself,


00:06:39.000 --> 00:06:40.600
then software is probably,


00:06:40.600 --> 00:06:43.080
And data science is probably not a super awesome place


00:06:43.080 --> 00:06:45.540
because the lifecycle of these things.


00:06:45.540 --> 00:06:47.500
I mean, if you want to take it to the extreme,


00:06:47.500 --> 00:06:48.580
you could do JavaScript.


00:06:48.580 --> 00:06:53.240
But most of us, we have at least a year on the technology


00:06:53.240 --> 00:06:54.880
before we move on.


00:06:54.880 --> 00:06:58.760
All right, now speaking of that, let's go ahead and get


00:06:58.760 --> 00:07:00.680
into our main topic here.


00:07:00.680 --> 00:07:03.880
And I want to kick this off by talking


00:07:03.880 --> 00:07:07.640
about reproducible and maintainable data science.


00:07:07.640 --> 00:07:10.340
So a little bit like engineering,


00:07:10.340 --> 00:07:12.880
people are coming to data science


00:07:12.880 --> 00:07:15.260
from these different angles, a lot of times


00:07:15.260 --> 00:07:18.500
from computational stuff, from biology,


00:07:18.500 --> 00:07:20.580
or from finance and economics or whatever.


00:07:20.580 --> 00:07:24.660
And they don't necessarily come with a full, big set of,


00:07:24.660 --> 00:07:27.780
oh, here's the software engineering lifecycle skill set.


00:07:27.780 --> 00:07:29.660
Here's how I set up my continuous integration.


00:07:29.660 --> 00:07:30.500
Here's my testing.


00:07:30.500 --> 00:07:33.020
And a lot of times, it's like, look, I got it working.


00:07:33.020 --> 00:07:33.860
We're kind of good.


00:07:33.860 --> 00:07:35.380
You know what I mean?


00:07:35.380 --> 00:07:39.780
So I think one of the areas the whole data science field


00:07:39.780 --> 00:07:41.780
is working with is taking a lot of these folks


00:07:41.780 --> 00:07:46.020
who are coming from non-traditional CS backgrounds


00:07:46.020 --> 00:07:48.820
and helping them create more reproducible, reusable


00:07:48.820 --> 00:07:53.180
bits of code, notebooks, maybe even code outside notebooks.


00:07:53.180 --> 00:07:55.860
So let's maybe open the conversation there


00:07:55.860 --> 00:07:59.940
'cause that's where Kedro focuses on helping data scientists


00:07:59.940 --> 00:08:02.400
create reproducible, maintainable code.


00:08:02.400 --> 00:08:07.020
Yotunde, do you wanna maybe kick us off with some thoughts


00:08:07.020 --> 00:08:10.460
and where Kedro's philosophy is on this?


00:08:10.460 --> 00:08:14.020
- So I guess if we actually break it down,


00:08:14.020 --> 00:08:16.100
it's a Python framework that helps you


00:08:16.100 --> 00:08:17.340
do those specific things.


00:08:17.340 --> 00:08:19.500
And when we talk about it being a framework,


00:08:19.500 --> 00:08:21.940
it's kind of embedded with best practices


00:08:21.940 --> 00:08:25.940
and ways of structuring how you write code


00:08:25.940 --> 00:08:28.300
so that you can get those reproducible, maintainable,


00:08:28.300 --> 00:08:30.060
and modular data science code.


00:08:30.060 --> 00:08:32.100
But if I go into each one of the definitions,


00:08:32.100 --> 00:08:34.860
when we say reproducible, we kind of mean that


00:08:34.860 --> 00:08:38.500
when I rerun this pipeline or rerun this experiment,


00:08:38.500 --> 00:08:41.380
I should get the same result at the end.


00:08:41.380 --> 00:08:43.020
So it shouldn't be any real surprises


00:08:43.020 --> 00:08:44.300
that things have really changed


00:08:44.300 --> 00:08:45.960
or things are really breaking.


00:08:45.960 --> 00:08:47.900
When we talk about it being maintainable,


00:08:47.900 --> 00:08:51.300
we now also add in an aspect of collaboration,


00:08:51.300 --> 00:08:54.220
even for yourself, that if you come back to this code base


00:08:54.220 --> 00:08:56.700
like three months from now or six months from now,


00:08:56.700 --> 00:08:58.780
you should be able to know what was going on in it


00:08:58.780 --> 00:09:01.260
and be able to modify and tweak it.


00:09:01.260 --> 00:09:04.220
And other people should be able to do that with you too.


00:09:04.220 --> 00:09:06.760
It's not really, it shouldn't be the biggest disaster


00:09:06.760 --> 00:09:10.640
if the main code contributor has left


00:09:10.640 --> 00:09:12.460
and you now have to try scramble


00:09:12.460 --> 00:09:14.340
to figure out what's going on there.


00:09:14.340 --> 00:09:16.120
And then when we talk about it being modular,


00:09:16.120 --> 00:09:17.880
this is where we encompass


00:09:17.880 --> 00:09:19.640
some of the software engineering principles


00:09:19.640 --> 00:09:22.320
that you wouldn't ordinarily learn in,


00:09:22.320 --> 00:09:24.300
maybe if you entered data science


00:09:24.300 --> 00:09:27.900
from the mathematician space or even from the sciences,


00:09:27.900 --> 00:09:31.740
where we think about you being able to break your code base


00:09:31.740 --> 00:09:37.340
down into small units so that it's possible to think about things like reuse, but also


00:09:37.340 --> 00:09:40.940
it's easier to do things like testing the code base as well.


00:09:40.940 --> 00:09:47.380
So yeah, all of these things basically amount to Kedro basically trying to enforce software


00:09:47.380 --> 00:09:51.380
engineering best practice, especially where you recognize that you might need help with


00:09:51.380 --> 00:09:52.380
that.


00:09:52.380 --> 00:09:53.380
Yeah.


00:09:53.380 --> 00:10:01.380
One of the other areas that I've seen a lot of emphasis on the project about is collaboration.


00:10:01.380 --> 00:10:07.380
And one of the things that can be challenging is if you're a data scientist working on a notebook,


00:10:07.380 --> 00:10:13.380
you might run some cells, maybe on data that is live, and so the data might be slightly changing.


00:10:13.380 --> 00:10:17.380
You check that into GitHub or source control.


00:10:17.380 --> 00:10:24.020
you've got the results in sort of a scrambled up JSON file notebook,


00:10:24.020 --> 00:10:27.220
and then someone else has rerun it at a different time,


00:10:27.220 --> 00:10:28.340
and then they try to check it out.


00:10:28.340 --> 00:10:32.260
Well, you end up with these conflicts and other issues.


00:10:32.260 --> 00:10:34.180
So the sort of natural flow of,


00:10:34.180 --> 00:10:36.820
hey, let's just check everything into Git,


00:10:36.820 --> 00:10:38.820
and then we'll just synchronize over that,


00:10:38.820 --> 00:10:43.060
can sort of fall apart with some of the traditional tooling of data science.


00:10:43.060 --> 00:10:45.860
And that's definitely true.


00:10:45.860 --> 00:10:50.860
I think Kedro's origins actually come from large teams,


00:10:50.860 --> 00:10:55.400
upwards of like at least three or four data scientists


00:10:55.400 --> 00:10:57.400
and data engineers, machine learning engineers


00:10:57.400 --> 00:10:58.900
collaborating on the same code base,


00:10:58.900 --> 00:11:00.620
upwards of, you know, to 12 people


00:11:00.620 --> 00:11:02.660
having to work on the same code base.


00:11:02.660 --> 00:11:04.060
If you're using a Jupyter Notebook


00:11:04.060 --> 00:11:06.300
and trying to construct your entire pipeline in it,


00:11:06.300 --> 00:11:09.140
I think the workflow would look kind of strange


00:11:09.140 --> 00:11:10.420
with you waiting.


00:11:10.420 --> 00:11:13.920
Maybe Waylon has some comment on like watching this


00:11:13.920 --> 00:11:15.800
in practice of waiting for someone


00:11:15.800 --> 00:11:17.080
to finish in the Jupyter Notebook


00:11:17.080 --> 00:11:20.160
before you could have a go at it and try your things.


00:11:20.160 --> 00:11:27.200
- Yeah, well, we had, during our engagement with McKinsey,


00:11:27.200 --> 00:11:30.160
we were introduced to Kedro during kind of


00:11:30.160 --> 00:11:33.520
the first iteration and then on the second.


00:11:33.520 --> 00:11:35.480
- Yeah, and by the way, we've only talked


00:11:35.480 --> 00:11:36.760
about Quantum Black so far,


00:11:36.760 --> 00:11:39.840
but Quantum Black is like a subsidiary of McKinsey.


00:11:39.840 --> 00:11:43.320
So yeah, right, this is all sort of the same organization


00:11:43.320 --> 00:11:44.400
in a sense, right?


00:11:44.400 --> 00:11:47.040
So that's why this is coming together, yeah?


00:11:47.040 --> 00:11:48.000
- Yeah, good point.


00:11:48.000 --> 00:11:52.360
But so the second half, they chose,


00:11:52.360 --> 00:11:56.520
just due to familiarity, the people that we had with us,


00:11:56.520 --> 00:11:59.000
it was their first time using Kedro,


00:11:59.000 --> 00:12:01.000
and they're like, well, if we wanna move fast


00:12:01.000 --> 00:12:04.000
on the second half, let's not try to do anything new,


00:12:04.000 --> 00:12:06.160
and let's just do notebooks like we always have.


00:12:06.160 --> 00:12:07.800
- Right, go back to what they know, sort of thing.


00:12:07.800 --> 00:12:11.200
- Yeah, and the workflow there was definitely


00:12:11.200 --> 00:12:13.440
like three people are on a project,


00:12:13.440 --> 00:12:14.980
two people are sitting idle,


00:12:14.980 --> 00:12:17.740
while one person has the notebook checked out.


00:12:17.740 --> 00:12:18.580
- Oh my gosh.


00:12:18.580 --> 00:12:21.680
Yeah, that sounds like old school


00:12:21.680 --> 00:12:23.380
source safe type source control.


00:12:23.380 --> 00:12:25.740
Someone's locked the files, no one else can edit it.


00:12:25.740 --> 00:12:27.780
Like that's just, you know,


00:12:27.780 --> 00:12:29.720
that's completely 1990s style.


00:12:29.720 --> 00:12:32.420
Right, but it's a real problem.


00:12:32.420 --> 00:12:34.100
I mean, some of these things are,


00:12:34.100 --> 00:12:35.940
there's an attempt to address them


00:12:35.940 --> 00:12:37.540
by having collaborative notebooks,


00:12:37.540 --> 00:12:40.300
basically Google Docs type of experiences, right?


00:12:40.300 --> 00:12:43.900
But usually those are in somebody else's cloud,


00:12:43.900 --> 00:12:45.100
somebody else's compute cloud.


00:12:45.100 --> 00:12:47.220
And so you're taking the trade-offs


00:12:47.220 --> 00:12:49.700
of running it over there, right?


00:12:49.700 --> 00:12:51.500
- Yeah, and there's multiple things


00:12:51.500 --> 00:12:53.180
I think you're missing out on.


00:12:53.180 --> 00:12:56.180
When we talk about even making a robust code base,


00:12:56.180 --> 00:12:57.840
writing unit tests in a notebook,


00:12:57.840 --> 00:12:59.580
writing doc strings in a notebook


00:12:59.580 --> 00:13:01.000
becomes a little challenging.


00:13:01.000 --> 00:13:04.460
And then we think about all the additional tools


00:13:04.460 --> 00:13:06.600
that you have to add for collaboration.


00:13:06.600 --> 00:13:09.240
How am I gonna do pull requests and review my friend's code?


00:13:09.240 --> 00:13:11.400
because we know the way that, you know,


00:13:11.400 --> 00:13:14.460
when you check in a Jupyter Notebook,


00:13:14.460 --> 00:13:16.440
it's often with the weird JSON things.


00:13:16.440 --> 00:13:19.000
So how do I do reviews of my team members code


00:13:19.000 --> 00:13:21.600
so we can overall improve the code base?


00:13:21.600 --> 00:13:24.160
And then some of the features as well


00:13:24.160 --> 00:13:27.240
within notebooks like cache state as well,


00:13:27.240 --> 00:13:29.240
cause issues down the line,


00:13:29.240 --> 00:13:31.940
because I might be working on a version of my code


00:13:31.940 --> 00:13:34.440
that when I rerun my entire Jupyter Notebook,


00:13:34.440 --> 00:13:36.080
not everything will run.


00:13:36.080 --> 00:13:39.200
So it's not necessarily like down with the notebooks


00:13:39.200 --> 00:13:45.040
anything for sure. We believe that there's a space for them really for maybe doing exploratory


00:13:45.040 --> 00:13:48.880
data analysis, trying to work out what's going on with the dataset. There's space for it with


00:13:48.880 --> 00:13:52.720
initial pipeline development as well if you're still prototyping and you're not sure how things


00:13:52.720 --> 00:13:57.040
are going to go. And then even for reporting maybe if you want like a more visual interface


00:13:57.040 --> 00:14:03.200
for reporting. But when you talk about like code that I want to be able to run in three months,


00:14:03.200 --> 00:14:08.880
six months, and many people will be using, it has to be in Python script and it's best supported


00:14:08.880 --> 00:14:10.880
when it's in the framework.


00:14:10.880 --> 00:14:12.880
Yeah, I think that's a good point.


00:14:12.880 --> 00:14:17.380
You can definitely start in the notebook space


00:14:17.380 --> 00:14:19.380
and then eventually move it over.


00:14:19.380 --> 00:14:22.380
Now, one thing I do want to give a shout out to,


00:14:22.380 --> 00:14:26.380
I don't remember the name, but you can set up a git pre-commit hook


00:14:26.380 --> 00:14:31.880
that will strip out the metadata, the results of your notebook.


00:14:31.880 --> 00:14:36.380
So that's kind of a fix, but it's still, it's not that amazing.


00:14:36.380 --> 00:14:39.740
The other thing you talked about reproducibility,


00:14:39.740 --> 00:14:41.780
one of the things that troubles me,


00:14:41.780 --> 00:14:43.940
and I'm a fan of notebooks and I like it.


00:14:43.940 --> 00:14:46.640
And I just on Python Bytes podcast,


00:14:46.640 --> 00:14:48.380
we just talked about how JupyterLab


00:14:48.380 --> 00:14:49.960
is now a desktop application.


00:14:49.960 --> 00:14:51.820
They just released that like this week,


00:14:51.820 --> 00:14:52.660
which is really cool.


00:14:52.660 --> 00:14:55.700
So there's a lot of neat stuff happening around notebooks.


00:14:55.700 --> 00:14:58.660
One of the things that I am not a big fan of though,


00:14:58.660 --> 00:15:02.060
is the ability to reorder execution


00:15:02.060 --> 00:15:04.900
or only execute part of it, right?


00:15:04.900 --> 00:15:07.320
There's a lot of benefits to say, run the cell that computes


00:15:07.320 --> 00:15:09.240
the data that's really expensive,


00:15:09.240 --> 00:15:11.040
and then run this--


00:15:11.040 --> 00:15:14.140
no, go back three cells, make a change here, run this one,


00:15:14.140 --> 00:15:17.040
and then go back down four cells and run that one.


00:15:17.040 --> 00:15:22.760
And it's kind of like a go-to with no explanation,


00:15:22.760 --> 00:15:26.000
where you can jump around in different orders.


00:15:26.000 --> 00:15:29.760
And that certainly doesn't lead to reproducibility


00:15:29.760 --> 00:15:32.880
when it's up to the human's decision of, like,


00:15:32.880 --> 00:15:34.940
I decided I felt like I wanted to make a tweak


00:15:34.940 --> 00:15:35.940
and rerun that one.


00:15:35.940 --> 00:15:38.940
And I forgot to run the intermediate step that used that.


00:15:38.940 --> 00:15:42.500
It's very problematic for long-term reliability,


00:15:42.500 --> 00:15:44.020
reproducibility and so on.


00:15:44.020 --> 00:15:47.940
- I guess that's true.


00:15:47.940 --> 00:15:49.700
There's quite a few studies, I think,


00:15:49.700 --> 00:15:53.340
where people have tried to rerun notebooks.


00:15:53.340 --> 00:15:55.740
I think there's one by NYU,


00:15:55.740 --> 00:15:57.860
I think back in 2020 or 2019,


00:15:57.860 --> 00:16:02.340
where they rerun like, I think over like 80,000 notebooks.


00:16:02.340 --> 00:16:06.420
and only 24% of them completed without error, but--


00:16:06.420 --> 00:16:07.260
- Oh my goodness.


00:16:07.260 --> 00:16:08.100
(Kedro laughs)


00:16:08.100 --> 00:16:10.260
- And then there's a very small part of that


00:16:10.260 --> 00:16:11.980
that had the same result


00:16:11.980 --> 00:16:14.380
when the notebook was finished running.


00:16:14.380 --> 00:16:17.180
- Yeah, wow, very interesting.


00:16:17.180 --> 00:16:22.180
- The other part that Kedro has is the version datasets.


00:16:22.180 --> 00:16:26.940
So not only like just running the code itself,


00:16:26.940 --> 00:16:30.300
but you can check out like an exact version of the code


00:16:30.300 --> 00:16:33.700
or the version of the data that was ran last time.


00:16:33.700 --> 00:16:37.760
- Okay, so you sort of store the data as well?


00:16:37.760 --> 00:16:43.200
Like, instead of just versioning just the source code


00:16:43.200 --> 00:16:45.660
or the notebook, you also version the data?


00:16:45.660 --> 00:16:48.440
- Yep, that's an option as you're creating


00:16:48.440 --> 00:16:50.140
your catalog entries.


00:16:50.140 --> 00:16:52.460
It's as simple as just putting versioned equals true,


00:16:52.460 --> 00:16:53.780
pretty much, on most of the databases.


00:16:53.780 --> 00:16:55.680
- Oh, that's really cool, really cool.


00:16:55.680 --> 00:16:59.660
Ivan, how about your thoughts on


00:16:59.660 --> 00:17:04.220
this reproducibility, maintainability side of data science?


00:17:04.220 --> 00:17:08.580
- Yeah, I think that's essentially why we started Kedro


00:17:08.580 --> 00:17:13.580
because here at QB, when we were going to clients


00:17:13.580 --> 00:17:15.620
and we needed to be able to,


00:17:15.620 --> 00:17:18.620
if anyone has worked at a consultancy,


00:17:18.620 --> 00:17:20.580
you know that sometimes you need to rotate people,


00:17:20.580 --> 00:17:23.220
you need to move people from one place to another,


00:17:23.220 --> 00:17:26.020
and the pace is quite high.


00:17:26.020 --> 00:17:29.000
And when people end up in a, like in the midway,


00:17:29.000 --> 00:17:36.040
like in the middle of a project, there is quite a long onboarding time, which is probably a week or


00:17:36.040 --> 00:17:43.240
more than that. And that's super expensive for a client to pay for one extra person just to read the code that was written to


00:17:43.240 --> 00:17:44.760
that point.


00:17:44.760 --> 00:17:47.980
Moreover, when you hand over code, it can't be just notebooks.


00:17:47.980 --> 00:17:49.800
So


00:17:49.800 --> 00:17:54.280
we ended up resorting to, okay, having different stages where you do things in notebooks,


00:17:54.280 --> 00:17:57.720
then you need to convert them in another programming language,


00:17:57.720 --> 00:18:00.440
and then you have an extra person doing that.


00:18:00.440 --> 00:18:03.480
And obviously, that conversion wasn't done


00:18:03.480 --> 00:18:06.280
due to the limited time in the best way possible.


00:18:06.280 --> 00:18:11.880
So it was quite hard to have this workflow


00:18:11.880 --> 00:18:15.640
of making a reproducible code


00:18:15.640 --> 00:18:19.000
without sacrificing speed and agility.


00:18:21.480 --> 00:18:25.160
And out of that need that was how the initial versions of Kedro were born.


00:18:25.160 --> 00:18:34.760
I think notebooks are super useful as well, but they are definitely not for production


00:18:34.760 --> 00:18:41.800
code. They're for exploring, for trying out, doing some different things, just basically a working


00:18:41.800 --> 00:18:49.560
session. And I like the name notebook because it's essentially you're just catching things in a


00:18:49.560 --> 00:18:55.640
a notebook. The thing is that what we see is people end up using those in production and


00:18:55.640 --> 00:19:02.600
yeah I think that's that makes it hard. You already explained like all of you mentioned


00:19:02.600 --> 00:19:08.920
some of the issues. How do you manage that and how do you deal with credentials with traditional


00:19:08.920 --> 00:19:15.320
stuff? And for me when I was coming from different software background joining a data company and I


00:19:15.320 --> 00:19:17.440
And I was like, where are the frameworks here?


00:19:17.440 --> 00:19:20.880
Like there was no frameworks, everything was platforms.


00:19:20.880 --> 00:19:25.840
And there was no way for you to start a project.


00:19:25.840 --> 00:19:30.600
And I found that super interesting.


00:19:30.600 --> 00:19:33.600
- Not like cookie cutter type of templates


00:19:33.600 --> 00:19:35.480
and those kinds of things for generating it.


00:19:35.480 --> 00:19:38.360
Like, here's how we integrate with all of our other libraries


00:19:38.360 --> 00:19:40.640
and infrastructure and just go, right?


00:19:40.640 --> 00:19:41.480
- Yeah, yeah.


00:19:41.480 --> 00:19:43.680
That wasn't there.


00:19:43.680 --> 00:19:48.680
and it was quite hard to align on a similar process.


00:19:48.680 --> 00:19:53.160
And it reminded me a lot to early days of web development


00:19:53.160 --> 00:19:56.720
when everyone had their own PHP scripts that they would make


00:19:56.720 --> 00:20:00.080
and people didn't use frameworks a lot


00:20:00.080 --> 00:20:02.720
and then things moved on from there.


00:20:02.720 --> 00:20:04.840
And for me, that's how it felt.


00:20:04.840 --> 00:20:06.160
It was very interesting.


00:20:06.160 --> 00:20:09.480
I think it was very interesting initially because of this,


00:20:09.480 --> 00:20:14.000
like, okay, how do we bring that to people


00:20:14.000 --> 00:20:16.660
whose job is not to build software,


00:20:16.660 --> 00:20:18.620
but their job is to build models?


00:20:18.620 --> 00:20:20.200
And these are different skill sets, right?


00:20:20.200 --> 00:20:22.420
So, yeah.


00:20:22.420 --> 00:20:25.960
- Yeah, I've talked about how there's, sorry.


00:20:25.960 --> 00:20:27.320
I've talked about how there's these skills


00:20:27.320 --> 00:20:29.440
that data scientists should learn


00:20:29.440 --> 00:20:31.520
from software development, software engineering.


00:20:31.520 --> 00:20:33.000
And that's true, it would help them a lot.


00:20:33.000 --> 00:20:35.200
But there's also a lot of skills that data scientists


00:20:35.200 --> 00:20:38.640
and people in engineering and economics and biology


00:20:38.640 --> 00:20:46.480
have the, as software developers like you and I, we don't know the inner details of gene editing or


00:20:46.480 --> 00:20:51.840
mitochondria or whatever. To be fair, it's not to put them in a negative light, it's just


00:20:51.840 --> 00:20:56.960
some of these skills are not learned along the traditional path and so it does make things


00:20:56.960 --> 00:21:03.680
like reproducibility hard. Yeah, that's why I think the data is a very, you know, the data


00:21:03.680 --> 00:21:08.320
landscape is a very nice place because it's a very creative mix of people from different


00:21:08.320 --> 00:21:15.280
backgrounds for that reason and I think what software engineers can do is


00:21:15.280 --> 00:21:21.440
help those people to be the most effective, the most productive with what skills they already have.


00:21:21.440 --> 00:21:27.600
And maybe just teach them just enough software engineering practices so they can


00:21:29.040 --> 00:21:36.320
go ahead. They don't need to be experts in two things. You can never be a full expert in


00:21:36.320 --> 00:21:44.240
software engineering and then biology and DNA and all that. And if we go that way and


00:21:44.240 --> 00:21:49.920
require people to be full-blown experts, that's I think the wrong path. These are ways just to


00:21:49.920 --> 00:21:56.960
equip them with the tools. - Especially in Python. The ethos of Python is that it's kind of,


00:21:56.960 --> 00:22:01.920
you can be very effective with a partial understanding of what it is. And if you


00:22:01.920 --> 00:22:06.480
require them to be full data scientists, then it's something different for sure.


00:22:06.480 --> 00:22:14.560
So let's talk about Kendro specifically in terms of not just the philosophies and some of the goals,


00:22:14.560 --> 00:22:20.160
but what is it? When I first heard of it, I thought, "Okay, this feels a little bit like


00:22:21.120 --> 00:22:26.120
one of these data pipeline type of programs,


00:22:26.120 --> 00:22:28.060
like Luigi or something like that.


00:22:28.060 --> 00:22:31.920
But that's not quite right, is it, Vituende?


00:22:31.920 --> 00:22:34.600
- No, it's not quite right,


00:22:34.600 --> 00:22:36.440
because we really do dial in on that focus


00:22:36.440 --> 00:22:39.020
of software engineering best practice first,


00:22:39.020 --> 00:22:40.100
implemented on code.


00:22:40.100 --> 00:22:42.720
So we think about things like a project template


00:22:42.720 --> 00:22:45.840
for you to know where to store different parts of your code.


00:22:45.840 --> 00:22:49.400
I actually think, then we've also got a data catalog,


00:22:49.400 --> 00:22:51.400
which manages how you load and save data.


00:22:51.400 --> 00:22:55.700
We've also got a way for users to interact with configuration


00:22:55.700 --> 00:22:56.840
for the first time as well.


00:22:56.840 --> 00:23:00.160
So removing what would have been maybe configuration


00:23:00.160 --> 00:23:03.960
because of their loading and saving paths for data


00:23:03.960 --> 00:23:07.360
out of the code, as well as things like removing parameters


00:23:07.360 --> 00:23:10.080
and even implementing logging.


00:23:10.080 --> 00:23:13.700
And then we also think around being able to have


00:23:13.700 --> 00:23:15.160
our own pipeline abstraction as well,


00:23:15.160 --> 00:23:17.040
which is why everyone gets excited and thinks


00:23:17.040 --> 00:23:19.680
the Kedro is kind of like Luigi Airflow.


00:23:19.680 --> 00:23:23.400
I think we get grouped with Dagster as well,


00:23:23.400 --> 00:23:25.920
all these different pipeline abstractions,


00:23:25.920 --> 00:23:28.320
but we really do focus on that journey of like,


00:23:28.320 --> 00:23:30.720
how do we even write code that's worth deploying?


00:23:30.720 --> 00:23:33.560
Which is a kind of like a different focus,


00:23:33.560 --> 00:23:35.840
because when you get to, our expectation is like,


00:23:35.840 --> 00:23:38.880
when you get into Prefect, Dagster, Luigi, Airflow,


00:23:38.880 --> 00:23:41.600
you really have a code base that's worth deploying.


00:23:41.600 --> 00:23:43.920
And you just really need to think about like,


00:23:43.920 --> 00:23:46.640
I want it to run at 7am on Monday.


00:23:46.640 --> 00:23:48.040
- Right, or based on this trigger


00:23:48.040 --> 00:23:51.040
when a file shows up in Blob storage or whatever, right?


00:23:51.040 --> 00:23:54.040
- Yeah, which is a completely different focus.


00:23:54.040 --> 00:23:56.680
And we think that we call that group the orchestrators


00:23:56.680 --> 00:23:58.760
are really good at what they do.


00:23:58.760 --> 00:24:00.600
But in terms of that whole process


00:24:00.600 --> 00:24:03.560
of leading up to a code base that's worth deploying,


00:24:03.560 --> 00:24:06.280
that's actually what Kedro handles best.


00:24:06.280 --> 00:24:07.120
- Yeah, cool.


00:24:07.120 --> 00:24:10.600
You guys wanna add anything to that?


00:24:10.600 --> 00:24:14.000
Or is it good?


00:24:14.000 --> 00:24:17.080
Maybe Ivan can go a bit more into functionality,


00:24:17.080 --> 00:24:18.920
what it has to do with Kedra.


00:24:18.920 --> 00:24:21.400
- Yeah, I think I can't add anything


00:24:21.400 --> 00:24:23.040
after you get this excellent introduction.


00:24:23.040 --> 00:24:27.040
I think that's, initially that's the main thing


00:24:27.040 --> 00:24:28.680
we were asked for is like,


00:24:28.680 --> 00:24:30.440
oh, why don't we use Airflow instead?


00:24:30.440 --> 00:24:32.480
And we're not exactly the same.


00:24:32.480 --> 00:24:35.800
So you can just use Kedra and Airflow together.


00:24:35.800 --> 00:24:37.760
And in fact, actually now we have a plugin


00:24:37.760 --> 00:24:40.640
because we connected with them


00:24:40.640 --> 00:24:42.800
and it was a very nice collaboration we had.


00:24:42.800 --> 00:24:47.800
But I think just to underline the main difference is,


00:24:47.800 --> 00:24:51.500
you know, like all of those tools,


00:24:51.500 --> 00:24:54.000
they came out from big tech companies


00:24:54.000 --> 00:24:55.380
that already had good processes.


00:24:55.380 --> 00:24:56.540
- Yeah, like for example,


00:24:56.540 --> 00:24:59.940
Luigi comes from Spotify and so on, right?


00:24:59.940 --> 00:25:02.460
- So Luigi from Spotify, Airflow from Airbnb,


00:25:02.460 --> 00:25:04.260
and like, those are big tech companies.


00:25:04.260 --> 00:25:07.460
They have uniform, like, or at least they have a big team


00:25:07.460 --> 00:25:09.380
that is taking care of the infrastructure.


00:25:09.380 --> 00:25:11.900
So you own the infrastructure, you own everything.


00:25:11.900 --> 00:25:14.040
You just need to put it there,


00:25:14.040 --> 00:25:15.920
like run your Airflow instance


00:25:15.920 --> 00:25:18.940
and then run your code there.


00:25:18.940 --> 00:25:21.940
And for us, we come from consultancies


00:25:21.940 --> 00:25:23.820
where you don't know what infrastructure


00:25:23.820 --> 00:25:25.800
you'll find at your client.


00:25:25.800 --> 00:25:27.800
So there is no way for us to say,


00:25:27.800 --> 00:25:30.340
okay, this is the scheduler we're gonna use.


00:25:30.340 --> 00:25:32.420
And it was really--


00:25:32.420 --> 00:25:33.400
- Yeah, you also don't know


00:25:33.400 --> 00:25:35.420
what sort of team you're dropping into.


00:25:35.420 --> 00:25:38.420
Is it a large, highly professional,


00:25:38.420 --> 00:25:39.660
experienced software team,


00:25:39.660 --> 00:25:41.900
or is it a bunch of research scientists


00:25:41.900 --> 00:25:44.940
who need a little help on the software side?


00:25:44.940 --> 00:25:50.080
Yeah, absolutely. Also, the team, you don't know any of that.


00:25:50.080 --> 00:25:54.340
And the thing is that we need to have some transferable skills


00:25:54.340 --> 00:25:57.980
within our teams when you work on one project here and there,


00:25:57.980 --> 00:26:01.220
so the next time you're more efficient and more productive,


00:26:01.220 --> 00:26:03.220
even though you're changing project.


00:26:03.220 --> 00:26:07.380
And that's the main difference here with Kedro and those orchestrators,


00:26:07.380 --> 00:26:12.140
that we don't have that assumption on the infrastructure, as Yetto mentioned.


00:26:12.140 --> 00:26:16.320
We focus on how to make something that's worth deploying.


00:26:16.320 --> 00:26:22.360
And then once you need to deploy it, at least that's very hard to achieve, but this is what


00:26:22.360 --> 00:26:27.480
we strive for, is to make Kedro deployable basically anywhere.


00:26:27.480 --> 00:26:36.380
If it's managed service in AWS, or if it's Airflow, or maybe they have an astronomer


00:26:36.380 --> 00:26:43.940
offering which is basically managed airflow. If you need any of that, Kedro should be able


00:26:43.940 --> 00:26:52.880
to run on all of this. But during the development process, you don't need to use their primitives


00:26:52.880 --> 00:26:59.160
to create your nodes and deal with all the extra work. The data scientists or data engineers,


00:26:59.160 --> 00:27:00.740
They don't need to care about,


00:27:00.740 --> 00:27:03.380
okay, what is an Airflow operator


00:27:03.380 --> 00:27:05.620
or like these kinds of things.


00:27:05.620 --> 00:27:11.240
- So does this mean that you're able to swap out


00:27:11.240 --> 00:27:13.160
these different data pipelines?


00:27:13.160 --> 00:27:15.640
Like if, for example, I had a company,


00:27:15.640 --> 00:27:17.000
we started on Luigi and we're like,


00:27:17.000 --> 00:27:19.240
oh, we really want to move to Airflow.


00:27:19.240 --> 00:27:20.640
If we'd written our stuff in Kedro,


00:27:20.640 --> 00:27:21.940
would it make that easier?


00:27:21.940 --> 00:27:27.020
- I would say yes.


00:27:27.020 --> 00:27:27.860
(laughing)


00:27:27.860 --> 00:27:28.700
- Okay.


00:27:28.700 --> 00:27:33.700
>> I guess you can always make code not portable, but yeah.


00:27:33.700 --> 00:27:40.040
>> You know, one of the options that hasn't been mentioned yet is the one we're using,


00:27:40.040 --> 00:27:44.600
which is just the Kedro Docker plugin.


00:27:44.600 --> 00:27:47.780
So Kedro works very nicely inside of Docker.


00:27:47.780 --> 00:27:55.280
So you know, despite all the nice orchestrators out there, there's also the backup plan of


00:27:55.280 --> 00:27:59.280
just put it in Docker and that can run virtually anywhere as well.


00:27:59.280 --> 00:28:03.280
Yeah, sometimes that is really nice.


00:28:03.280 --> 00:28:07.280
I know there's all this stuff as a service to help me out, but I'm just going the simple


00:28:07.280 --> 00:28:11.280
route and running it this way.


00:28:11.280 --> 00:28:15.280
Alright, let's talk about some of the features.


00:28:15.280 --> 00:28:19.280
You talked about the lack of some kind of template to get started, and that's the first


00:28:19.280 --> 00:28:23.280
feature listed here, so maybe you can tell folks about this.


00:28:23.280 --> 00:28:30.160
Sure, yeah, so I think that was probably the first one we implemented when we were rebuilding


00:28:30.160 --> 00:28:35.760
this thing because what we found out is like lots of data scientists, they were naturally


00:28:35.760 --> 00:28:39.400
using like some cookie cutter templates.


00:28:39.400 --> 00:28:40.400
Yeah.


00:28:40.400 --> 00:28:43.980
Okay, this is my project, this is the structure I like.


00:28:43.980 --> 00:28:48.800
And then we had a big discussion with many different data scientists how to implement


00:28:48.800 --> 00:28:49.800
this.


00:28:49.800 --> 00:28:54.520
So we set out on a, like the,


00:28:54.520 --> 00:28:57.760
I would say the least common denominator.


00:28:57.760 --> 00:28:59.200
I don't know how to say that,


00:28:59.200 --> 00:29:02.660
but like the thing that will be the bare minimum


00:29:02.660 --> 00:29:04.960
that you will need for starting a project.


00:29:04.960 --> 00:29:07.000
- The minimal set that everyone is gonna use.


00:29:07.000 --> 00:29:09.840
One of the things I really dislike about templates,


00:29:09.840 --> 00:29:11.440
these types of project templates,


00:29:11.440 --> 00:29:13.640
and I see them all over the place,


00:29:13.640 --> 00:29:16.840
is, oh, here's how you use this template to get started.


00:29:16.840 --> 00:29:19.360
And the template says, okay, what we're gonna do


00:29:19.360 --> 00:29:21.440
we're going to set up Celery as your backend worker,


00:29:21.440 --> 00:29:23.720
we're going to set up Postgres as your database,


00:29:23.720 --> 00:29:27.600
we're going to set up SQLAlchemy as your data layer,


00:29:27.600 --> 00:29:29.920
we're going to set up X, and you end up with 10 things.


00:29:29.920 --> 00:29:31.320
You're like, I only want four of these,


00:29:31.320 --> 00:29:33.680
but the four it's helping with is really useful,


00:29:33.680 --> 00:29:36.000
but then I got to hunt through and get the others out.


00:29:36.000 --> 00:29:40.160
And it's just, you do want to aim for this minimal side


00:29:40.160 --> 00:29:43.880
because while it's nice to have support for the other things,


00:29:43.880 --> 00:29:47.040
like if you foisted upon people and they're like,


00:29:47.040 --> 00:29:48.880
this is more junk than I,


00:29:48.880 --> 00:29:52.160
I'm using less than half of this, so this is not useful for me.


00:29:52.160 --> 00:29:55.680
So that was your philosophy to go more minimalist on it.


00:29:55.680 --> 00:30:01.600
Yeah, absolutely. Even though, because at that time it was an internal tool,


00:30:01.600 --> 00:30:04.080
we had some stakeholders that we had to appease.


00:30:04.080 --> 00:30:09.440
Like there was, we had internally a very well-developed data engineering convention,


00:30:09.440 --> 00:30:14.080
and then they absolutely wanted to have the, you know, in the template,


00:30:14.080 --> 00:30:18.160
we need to have the folders with those layers in the data engineering.


00:30:18.160 --> 00:30:20.480
And I think you can still find that in Kedro.


00:30:20.480 --> 00:30:24.960
So there are these kind of things that we needed to do,


00:30:24.960 --> 00:30:27.520
but they're not necessarily, okay, you don't need to use them,


00:30:27.520 --> 00:30:29.920
that you can remove a lot of those.


00:30:29.920 --> 00:30:33.040
And now further down the line,


00:30:33.040 --> 00:30:35.680
we ended up introducing something called starters.


00:30:35.680 --> 00:30:39.360
And this is essentially, you can have a custom template


00:30:39.360 --> 00:30:40.400
that you can start from.


00:30:40.400 --> 00:30:46.160
And people are using them to create their own custom projects


00:30:46.160 --> 00:30:47.920
for their organizations.


00:30:47.920 --> 00:30:51.160
- Yeah, I think that's a great idea.


00:30:51.160 --> 00:30:55.040
- Yeah, and we're using cookie cutter behind the scenes,


00:30:55.040 --> 00:30:58.720
which means like, another thing that we wanted to do


00:30:58.720 --> 00:31:01.480
is to not reinvent the wheel


00:31:01.480 --> 00:31:03.760
and use standard tools out there.


00:31:03.760 --> 00:31:06.160
If the Python world is using cookie cutter,


00:31:06.160 --> 00:31:09.400
there is no reason for us not to use it, right?


00:31:09.400 --> 00:31:11.200
And we went with that,


00:31:11.200 --> 00:31:15.640
and that's how I settled on the template system.


00:31:15.640 --> 00:31:16.480
- Yeah, nice.


00:31:16.480 --> 00:31:21.280
- And you talked about, or Kedro talks about on the homepage


00:31:21.280 --> 00:31:24.200
how it uses the cookie cutter data science,


00:31:24.200 --> 00:31:26.800
cookie cutter template, which is--


00:31:26.800 --> 00:31:28.240
- Logic.


00:31:28.240 --> 00:31:29.200
- How much of that is that?


00:31:29.200 --> 00:31:31.720
Or have you kind of moved beyond that?


00:31:31.720 --> 00:31:33.040
- I think we moved beyond that.


00:31:33.040 --> 00:31:36.680
It was mainly, that's what the inspiration was.


00:31:36.680 --> 00:31:40.500
It's not like we're using it, but more like it was,


00:31:40.500 --> 00:31:44.960
it was inspired by this because we found out like


00:31:44.960 --> 00:31:47.400
a few users back then, they used that one.


00:31:47.400 --> 00:31:49.720
And it was fairly sane.


00:31:49.720 --> 00:31:52.320
I mean, if you don't need a framework,


00:31:52.320 --> 00:31:55.080
I think it's quite a good starting point.


00:31:55.080 --> 00:31:58.240
So if you don't need a full blown Kedro setup,


00:31:58.240 --> 00:32:01.660
I would recommend that one.


00:32:01.660 --> 00:32:06.660
And we said, okay, how can we build upon that and like make,


00:32:06.660 --> 00:32:09.520
obviously we started from scratch,


00:32:09.520 --> 00:32:11.680
not copying any of their templating,


00:32:11.680 --> 00:32:14.080
but saying, okay, this is a very good example


00:32:14.080 --> 00:32:18.560
what we can be, and then how can we achieve the same thing


00:32:18.560 --> 00:32:23.420
but achieving our goals for making this framework.


00:32:23.420 --> 00:32:25.940
And that's how we settled on.


00:32:25.940 --> 00:32:30.260
And I think we still honor it because I think it was


00:32:30.260 --> 00:32:33.980
a good inspiration for us in our documentation.


00:32:33.980 --> 00:32:35.420
- Yeah, very nice.


00:32:35.420 --> 00:32:36.460
I love it.


00:32:36.460 --> 00:32:39.220
And definitely thumbs up on using something


00:32:39.220 --> 00:32:40.620
like Cookie Cutter, right?


00:32:40.620 --> 00:32:42.460
There's already so many templates out there


00:32:42.460 --> 00:32:44.540
that people are using, people are somewhat familiar


00:32:44.540 --> 00:32:47.620
with the idea and they maybe know how to extend it, right?


00:32:47.620 --> 00:32:50.140
So no need to go write your own macro language


00:32:50.140 --> 00:32:51.060
or something crazy.


00:32:51.060 --> 00:32:52.740
- Yeah.


00:32:52.740 --> 00:32:55.800
- All right, next main feature is the data catalog.


00:32:55.800 --> 00:32:57.980
Who wants to take that one?


00:32:57.980 --> 00:33:02.020
- I'd actually put it to Weilong, are you a big user?


00:33:02.020 --> 00:33:03.860
You seem like you're a big user of the data catalog,


00:33:03.860 --> 00:33:05.220
do you wanna talk about it?


00:33:05.220 --> 00:33:08.740
- One thing I was gonna mention here,


00:33:08.740 --> 00:33:15.100
Michael mentioned that you get like from a template a lot of times you get a thing that's


00:33:15.100 --> 00:33:19.720
got everything that you need and then a bunch of stuff you don't need.


00:33:19.720 --> 00:33:24.060
I think one thing that plays well with Kedro is this catalog.


00:33:24.060 --> 00:33:32.320
And so at the catalog I can kind of, you know, abstractly tell Kedro where my data is and


00:33:32.320 --> 00:33:33.800
what type it is.


00:33:33.800 --> 00:33:37.960
So that catalog can load things from Pandas, Spark, Dask.


00:33:37.960 --> 00:33:42.880
From databases, there's a pretty long list


00:33:42.880 --> 00:33:46.640
of data sources that it can load from.


00:33:46.640 --> 00:33:48.920
So I don't need to change the template


00:33:48.920 --> 00:33:53.080
based on what my underlying data is or where it's stored.


00:33:53.080 --> 00:33:55.720
- That's really nice.


00:33:55.720 --> 00:33:57.160
A lot of times when you're thinking of data,


00:33:57.160 --> 00:34:00.040
the abstractions are you can switch between MySQL,


00:34:00.040 --> 00:34:03.040
Microsoft SQL Server, and Postgres,


00:34:03.040 --> 00:34:10.240
between Spark and a relational database or cloud storage or something like that.


00:34:10.240 --> 00:34:14.040
That's a lot of flexibility.


00:34:14.040 --> 00:34:23.040
One really nice feature I like that was added in the 16 series is it's built on FS-spec under the hood.


00:34:23.040 --> 00:34:30.040
So you can have data sitting on S3, GCP, or your local file system,


00:34:30.040 --> 00:34:32.040
and all you do is change your file path.


00:34:32.040 --> 00:34:37.640
Maybe like a slight tweak to your requirements.txt.


00:34:37.640 --> 00:34:43.560
But other than that, Kedro just knows how to load data


00:34:43.560 --> 00:34:48.560
into whatever object type you ask for.


00:34:48.560 --> 00:34:51.120
- Yeah, very nice.


00:34:51.120 --> 00:34:53.640
Also helps on the data science side,


00:34:53.640 --> 00:34:55.800
if you're not super familiar with like


00:34:56.840 --> 00:35:00.840
remote blob storage APIs, you don't have to learn that, right?


00:35:00.840 --> 00:35:04.840
Which is good. Cool.


00:35:04.840 --> 00:35:08.840
Another thing to maybe mention is if you don't need the full


00:35:08.840 --> 00:35:12.840
Kedro template, you don't need the pipeline


00:35:12.840 --> 00:35:16.840
and everything, you can use Kedro's catalog by itself.


00:35:16.840 --> 00:35:20.840
So maybe if you're just starting a notebook


00:35:20.840 --> 00:35:24.840
or just starting a project in a notebook, you might want to move it


00:35:24.840 --> 00:35:28.340
you can start putting your catalog together as a


00:35:28.340 --> 00:35:30.400
Kedro catalog from the start.


00:35:30.400 --> 00:35:33.440
Nice, and then maybe as you move it more into


00:35:33.440 --> 00:35:34.320
source files,


00:35:34.320 --> 00:35:36.720
it like part of that's already done,


00:35:36.720 --> 00:35:39.640
right? Yep, you're closer to the destination.


00:35:39.640 --> 00:35:43.200
Yep, and you can. You can use their loaders and


00:35:43.200 --> 00:35:46.800
savers so that you don't have to write any sort


00:35:46.800 --> 00:35:48.480
of saving and loading.


00:35:48.480 --> 00:35:53.960
Code manually, yeah. Nice.


00:35:53.960 --> 00:35:58.960
All right, next one is pipeline abstraction,


00:35:58.960 --> 00:36:00.980
automatic resolution of dependencies


00:36:00.980 --> 00:36:02.640
between pure Python functions


00:36:02.640 --> 00:36:04.860
and data pipeline visualizations.


00:36:04.860 --> 00:36:09.660
And you all have a cool visualizer there


00:36:09.660 --> 00:36:13.020
of a whole lot of stuff going on here.


00:36:13.020 --> 00:36:16.580
I can zoom in here, but like this really interesting


00:36:16.580 --> 00:36:19.380
visualizer of what's happening.


00:36:19.380 --> 00:36:20.580
You know, who wants to sort of tell us


00:36:20.580 --> 00:36:22.060
what this one's about?


00:36:22.060 --> 00:36:26.140
I would happily take this one and I leave the starting status to yet


00:36:26.140 --> 00:36:35.740
I really wanted to take that one because I want to kind of promote using using more the API of the pipeline


00:36:35.740 --> 00:36:44.380
I think this is probably one of the best things we've done and and it was kind of a find that we had is


00:36:44.380 --> 00:36:46.340
Like what is it?


00:36:46.340 --> 00:36:51.660
What is the pipeline in our sense and how I think that's probably one of the things that makes Kedro different than


00:36:51.660 --> 00:36:53.340
and other tools.


00:36:53.340 --> 00:36:58.600
We treat each processing node as a pure function.


00:36:58.600 --> 00:37:01.280
So what you need to do is just to write a pure function


00:37:01.280 --> 00:37:04.340
that you have inputs and outputs,


00:37:04.340 --> 00:37:08.420
you return stuff and that's all you need to do.


00:37:08.420 --> 00:37:12.140
And then you need to announce that in a pipeline


00:37:12.140 --> 00:37:16.020
that, okay, I'm gonna use that function.


00:37:16.020 --> 00:37:18.200
We'll have those inputs from the catalog


00:37:18.200 --> 00:37:20.460
that Waylon was talking about.


00:37:20.460 --> 00:37:24.660
and they're just aliases to those references in the catalog.


00:37:24.660 --> 00:37:27.100
And then when I'm done with that function,


00:37:27.100 --> 00:37:30.780
then I'll save them to those datasets.


00:37:30.780 --> 00:37:35.100
And you don't need to know, okay,


00:37:35.100 --> 00:37:38.540
what's the order of execution or like any of that.


00:37:38.540 --> 00:37:40.900
You just need to think locally.


00:37:40.900 --> 00:37:43.820
You need to think about that function you're dealing with.


00:37:43.820 --> 00:37:46.620
Okay, I need maybe in this example


00:37:46.620 --> 00:37:48.200
that we have on the screen,


00:37:50.140 --> 00:37:52.220
like people who are listening, they might not be able to see,


00:37:52.220 --> 00:37:55.440
but let's say you have an input to a function,


00:37:55.440 --> 00:38:01.980
and let's say factory train, in that example we have,


00:38:01.980 --> 00:38:04.020
and that's your input,


00:38:04.020 --> 00:38:06.180
and then you want to remove the no columns,


00:38:06.180 --> 00:38:07.420
and that's your function.


00:38:07.420 --> 00:38:09.820
And then--


00:38:09.820 --> 00:38:10.640
- Sorry, I'm bringing it back up,


00:38:10.640 --> 00:38:11.820
I know you're trying to read a lot.


00:38:11.820 --> 00:38:14.700
- Yeah, and then let's say you have a,


00:38:14.700 --> 00:38:19.700
let's say we call the output a clean factory input,


00:38:19.700 --> 00:38:21.700
or what was it?


00:38:21.700 --> 00:38:25.140
So that's all you need to think about.


00:38:25.140 --> 00:38:27.140
How to solve that locally.


00:38:27.140 --> 00:38:29.540
You don't need to think how that would fit in globally.


00:38:29.540 --> 00:38:33.460
And then once you add enough of those functions,


00:38:33.460 --> 00:38:35.460
then the connection,


00:38:35.460 --> 00:38:39.300
those dependencies, because you announce them in your inputs and your outputs,


00:38:39.300 --> 00:38:42.260
they'll be figured out by Kedro,


00:38:42.260 --> 00:38:45.620
and then you know this graph, the visualization,


00:38:45.620 --> 00:38:47.780
will be drawn for you out of your code,


00:38:47.780 --> 00:38:51.780
and then you can use that for running your code in that particular order.


00:38:51.780 --> 00:38:57.380
And why I say that we are so proud of this?


00:38:57.380 --> 00:39:02.060
Because using these pure functions and connecting them as pipelines


00:39:02.060 --> 00:39:08.820
gave us a lot of ability to reuse code and reuse parts of the pipelines


00:39:08.820 --> 00:39:12.900
without really taking care of where the data is.


00:39:12.900 --> 00:39:16.660
So you just work on a pipeline level and the connections,


00:39:16.660 --> 00:39:19.660
and then the data catalog would load and save things for you.


00:39:19.660 --> 00:39:24.500
And that made it super, super easy for us


00:39:24.500 --> 00:39:28.500
to scale the types of projects we can build.


00:39:28.500 --> 00:39:30.260
We started off with very small pipelines,


00:39:30.260 --> 00:39:33.860
and now we have, maybe Yetu can talk more about this,


00:39:33.860 --> 00:39:37.460
but we have projects which have hundreds of nodes


00:39:37.460 --> 00:39:39.460
internally in QB.


00:39:39.460 --> 00:39:41.620
- So, yeah. - Yeah.


00:39:41.620 --> 00:39:44.340
Yeah, if you look at this, there's a lot going on here.


00:39:44.340 --> 00:39:47.900
And I really appreciate the idea of being able to just focus


00:39:47.900 --> 00:39:51.340
in on small pieces.


00:39:51.340 --> 00:39:54.140
It brings me back to your idea of talking about, well,


00:39:54.140 --> 00:39:58.140
let's just write a .php file and start just--


00:39:58.140 --> 00:40:00.100
I'm going to start writing HTML, and I'm


00:40:00.100 --> 00:40:02.420
going to start writing some SQL query,


00:40:02.420 --> 00:40:05.940
and I'm going to write some more markup.


00:40:05.940 --> 00:40:08.740
It's just all from scratch, and there's zero structure,


00:40:08.740 --> 00:40:10.420
and there's zero support.


00:40:10.420 --> 00:40:12.300
So if you're going to do something like that,


00:40:12.300 --> 00:40:16.280
and like all at once, all at the same time.


00:40:16.280 --> 00:40:18.740
Whereas, you know, compare that to like a modern framework


00:40:18.740 --> 00:40:21.220
like Flask, all you do is write the view method.


00:40:21.220 --> 00:40:23.100
You don't care about how the template gets rendered.


00:40:23.100 --> 00:40:25.380
You don't care about how the process comes in


00:40:25.380 --> 00:40:27.060
or finding the verbs to figure out.


00:40:27.060 --> 00:40:30.380
You just like, I know when I get here, Flask got me here.


00:40:30.380 --> 00:40:33.540
I do the five lines of code that I gotta do and we're good.


00:40:33.540 --> 00:40:36.220
And I feel like this is real similar, right?


00:40:36.220 --> 00:40:37.660
- Yeah, yeah, absolutely.


00:40:37.660 --> 00:40:39.020
- Yeah, you write a function that says


00:40:39.020 --> 00:40:40.900
unify timestamp column name,


00:40:40.900 --> 00:40:43.240
or you write a function called remove null columns.


00:40:43.240 --> 00:40:45.440
Like you can definitely do that.


00:40:45.440 --> 00:40:46.420
That's not challenging,


00:40:46.420 --> 00:40:48.640
but if you look at this overall workflow,


00:40:48.640 --> 00:40:51.400
it looks like there's a lot going on here.


00:40:51.400 --> 00:40:52.320
- Yeah, yeah.


00:40:52.320 --> 00:40:54.460
And I really liked that you brought that analogy


00:40:54.460 --> 00:40:57.360
with frameworks, with view and like these things,


00:40:57.360 --> 00:40:59.600
because the more we started building that,


00:40:59.600 --> 00:41:01.480
the more it was very similar for me.


00:41:01.480 --> 00:41:03.480
I mean, I've done some Ruby on Rails before


00:41:03.480 --> 00:41:07.600
and actually the pipeline sounded like the root file.


00:41:07.600 --> 00:41:09.200
So you would have different roots,


00:41:09.200 --> 00:41:14.200
Like, okay, what is the, how do you register on this URL?


00:41:14.200 --> 00:41:16.520
This is the action I would call


00:41:16.520 --> 00:41:18.280
and actions here are our notes.


00:41:18.280 --> 00:41:20.200
- Right, and what data is provided to it


00:41:20.200 --> 00:41:22.560
and things and so on, yeah, all that.


00:41:22.560 --> 00:41:24.680
- So the data that's provided to it is basically,


00:41:24.680 --> 00:41:29.680
you know, the URL endpoints and maybe the post data


00:41:29.680 --> 00:41:31.080
and things like that.


00:41:31.080 --> 00:41:33.920
And then the output is your views, for example,


00:41:33.920 --> 00:41:36.140
in traditional framework.


00:41:36.140 --> 00:41:37.900
The only difference here is that your inputs


00:41:37.900 --> 00:41:45.700
outputs their data. They're not URL data coming from the request and then the response is


00:41:45.700 --> 00:41:50.720
not a view but actually again saving to the data. And there is one subtle difference here


00:41:50.720 --> 00:41:56.440
is that you have dependencies between different routes. Where in web frameworks, they're fairly


00:41:56.440 --> 00:42:02.040
independent, right? It's a stateless thing. Where here, it's still stateless but you have


00:42:02.040 --> 00:42:07.400
dependencies between different parts of the route. And maybe here comes the real reason


00:42:07.400 --> 00:42:13.080
wanted to talk about a pipeline was that this abstraction done this way gives you


00:42:13.080 --> 00:42:20.760
kind of like an algebra that you can use to combine pipelines to have pre-built pipelines and


00:42:20.760 --> 00:42:28.520
then plus them together or maybe just join them together or remove things from them or maybe saying


00:42:28.520 --> 00:42:36.600
because it's a tree like a ends up being dark they're directed acyclic graph it means like


00:42:36.600 --> 00:42:41.600
I want to get this sub pipeline that produces that output.


00:42:41.600 --> 00:42:43.040
And then it will remove everything.


00:42:43.040 --> 00:42:44.120
- Maybe you're like saying,


00:42:44.120 --> 00:42:48.160
I only care about the output at the say,


00:42:48.160 --> 00:42:51.120
fifth function, this round timestamps thing.


00:42:51.120 --> 00:42:54.120
And it could strip off a whole bunch of the other pieces.


00:42:54.120 --> 00:42:55.640
'Cause it's like, well, all this other stuff


00:42:55.640 --> 00:42:59.000
is not involved in this part of the chain of the pipeline,


00:42:59.000 --> 00:43:01.680
like reversing the acyclic graph.


00:43:01.680 --> 00:43:02.500
- Yeah, exactly.


00:43:02.500 --> 00:43:03.440
And you don't need to do anything.


00:43:03.440 --> 00:43:07.720
You just need to say pipeline two and then specify.


00:43:07.720 --> 00:43:10.420
So we have a bunch of methods that you can use.


00:43:10.420 --> 00:43:13.240
And unfortunately they're underutilized.


00:43:13.240 --> 00:43:14.520
Like people don't really use them.


00:43:14.520 --> 00:43:17.040
And then when we ask like, "Oh, how can I do that?"


00:43:17.040 --> 00:43:18.800
And it's like, "Oh, there is one method call."


00:43:18.800 --> 00:43:21.000
And people are like, "Oh, that's so cool."


00:43:21.000 --> 00:43:24.000
It's like, maybe we need to improve our documentation


00:43:24.000 --> 00:43:24.840
and that's all.


00:43:24.840 --> 00:43:25.660
- Yeah, yeah.


00:43:25.660 --> 00:43:27.700
Maybe you should go on a podcast and tell people about it.


00:43:27.700 --> 00:43:28.540
- Yeah, yeah.


00:43:28.540 --> 00:43:31.320
I think that's why I want to use the opportunity.


00:43:31.320 --> 00:43:33.320
Yeah, absolutely, you should.


00:43:33.320 --> 00:43:38.320
Yatun, do you want to elaborate on some of these larger pipelines that you'll have going?


00:43:38.320 --> 00:43:44.820
So, I mean, definitely, this will actually speak a lot to the collaborative way that you can work


00:43:44.820 --> 00:43:49.820
once you're using the Kedro pipelines, because now your team sessions can easily become something like,


00:43:49.820 --> 00:43:55.320
"Okay, I know I need to work on these three key functions, because we know this is what we want this pipeline to do."


00:43:55.320 --> 00:44:00.320
And then you split out the work and work accordingly to produce those specific nodes and functions.


00:44:00.320 --> 00:44:07.440
- With, I guess, also, one of the things that I'd like to call out about the pipeline abstraction


00:44:07.440 --> 00:44:15.400
is that you definitely do get KedroVis for free on top of it. So it's a pipeline visualization


00:44:15.400 --> 00:44:20.400
tool. It's really cool because it allows you to give kind of like a bird's-eye view of


00:44:20.400 --> 00:44:25.440
what's going on in the pipeline, so you can actually understand how different things are


00:44:25.440 --> 00:44:31.120
Some of the ways our users have used it are ways that we didn't imagine it was originally


00:44:31.120 --> 00:44:37.200
created for being able to talk to non-technical users or stakeholders about the way that the


00:44:37.200 --> 00:44:40.680
code base was structured instead of diving into code and showing them, "Hey, here's how


00:44:40.680 --> 00:44:43.240
the code works," because they'd be like, "I don't know what's going on here."


00:44:43.240 --> 00:44:45.680
But they can see the diagram.


00:44:45.680 --> 00:44:51.240
But we've also found our users will do things like debugging with KedroViz to find out,


00:44:51.240 --> 00:44:53.560
something doesn't appear right in my pipeline


00:44:53.560 --> 00:44:55.800
and then figure out what's going on there.


00:44:55.800 --> 00:44:58.200
And in some ways, we've actually extended


00:44:58.200 --> 00:45:00.240
some of that functionality.


00:45:00.240 --> 00:45:02.240
So you'll see that there's now like a code viewer


00:45:02.240 --> 00:45:04.000
for you to interact with your code.


00:45:04.000 --> 00:45:08.040
And we have some, I guess, maybe exciting things


00:45:08.040 --> 00:45:11.300
planned down the line when we're talking about the roadmap.


00:45:11.300 --> 00:45:12.500
We'll be able to allude to some of the work


00:45:12.500 --> 00:45:14.600
that we're doing with experiment tracking,


00:45:14.600 --> 00:45:17.040
which will extend Kit Reviews a bit further.


00:45:17.040 --> 00:45:19.040
So, yeah. - Nice.


00:45:20.120 --> 00:45:23.340
Yeah, you can definitely tell if you've got a dependency mismatch


00:45:23.340 --> 00:45:25.000
and the order is wrong or something.


00:45:25.000 --> 00:45:27.200
You could see, "Oh, this one is supposed to be after that one,"


00:45:27.200 --> 00:45:30.200
and it's really nice. The visualizers, it's nice.


00:45:30.200 --> 00:45:33.680
You've kind of got this map thing you can cruise around on.


00:45:33.680 --> 00:45:37.840
For people who are listening, I'll definitely put this in the show notes


00:45:37.840 --> 00:45:39.400
so you can open it up and explore it.


00:45:39.400 --> 00:45:42.720
There's a pretty elaborate pipeline here to explore.


00:45:42.720 --> 00:45:45.920
Does this do anything with runtime,


00:45:45.920 --> 00:45:48.720
or is it just for visualizing the static structure?


00:45:49.520 --> 00:45:52.140
- It's actually just for visualizing the static structure.


00:45:52.140 --> 00:45:55.780
We often find, we've tried to skirt away


00:45:55.780 --> 00:46:00.180
from what we call the orchestrator UI interface,


00:46:00.180 --> 00:46:01.500
'cause it takes us a bit too much,


00:46:01.500 --> 00:46:03.180
I mentioned into that realm of like,


00:46:03.180 --> 00:46:06.940
where we would prefer the orchestrators to play a part.


00:46:06.940 --> 00:46:08.700
So for now, it's just a static viewer


00:46:08.700 --> 00:46:10.660
of what's going on in your code base.


00:46:10.660 --> 00:46:12.820
- Yeah, no, this is great.


00:46:12.820 --> 00:46:14.720
I feel like a lot of projects would benefit


00:46:14.720 --> 00:46:17.420
from this kind of stuff, not just data science things, right?


00:46:17.420 --> 00:46:20.580
Like, I'd like this kind of view of my code


00:46:20.580 --> 00:46:22.220
for other things as well.


00:46:22.220 --> 00:46:23.940
- We have found people using,


00:46:23.940 --> 00:46:27.260
KedroVis is also available as a React app


00:46:27.260 --> 00:46:32.140
and people use it in, without Kedro.


00:46:32.140 --> 00:46:34.300
So we'll find that they will build,


00:46:34.300 --> 00:46:35.840
one of the most common use cases we've seen


00:46:35.840 --> 00:46:38.580
built on top of KedroVis is data lineage,


00:46:38.580 --> 00:46:41.480
but specifically column level lineage


00:46:41.480 --> 00:46:42.860
that people will want to visualize.


00:46:42.860 --> 00:46:45.060
So they end up using the React app for that.


00:46:46.680 --> 00:46:50.080
I also have a friend who was playing a game.


00:46:50.080 --> 00:46:52.480
He's actually one of the former maintainers on Kedro,


00:46:52.480 --> 00:46:55.180
KedroViz and Kedro, where he was playing a game


00:46:55.180 --> 00:46:56.920
where he needed to work out how to build,


00:46:56.920 --> 00:46:58.300
I don't know what this game is called.


00:46:58.300 --> 00:47:00.320
How to build-- - It was Factorio.


00:47:00.320 --> 00:47:01.840
Factorio. - Factorio, yeah.


00:47:01.840 --> 00:47:03.680
(laughing)


00:47:03.680 --> 00:47:06.600
You basically look at how to build up your factory,


00:47:06.600 --> 00:47:07.840
I think, or something like that,


00:47:07.840 --> 00:47:09.680
and use the different elements in the factory.


00:47:09.680 --> 00:47:11.440
And he used KedroViz to visualize


00:47:11.440 --> 00:47:14.360
what he should be doing in his factory.


00:47:14.360 --> 00:47:15.640
So yeah, there's different ways.


00:47:15.640 --> 00:47:16.640
- Oh, that's funny.


00:47:16.640 --> 00:47:22.240
I guess you can visualize lots of things with it, how neat.


00:47:22.240 --> 00:47:26.600
All right, the next main feature here is deployment.


00:47:26.600 --> 00:47:30.720
- One comment I had on the pipeline was,


00:47:30.720 --> 00:47:36.720
so you know, you get a task to do on your sprint,


00:47:36.720 --> 00:47:38.720
you sit down to work for the day,


00:47:38.720 --> 00:47:42.240
and if you're not in this Kedroke type of,


00:47:42.240 --> 00:47:45.320
or this framework mode, a lot of times it's like,


00:47:45.320 --> 00:47:48.220
okay, open the notebook or open the script


00:47:48.220 --> 00:47:51.880
and I've got to run to a certain point to start my work


00:47:51.880 --> 00:47:54.640
'cause I've got to have that data in memory.


00:47:54.640 --> 00:47:58.840
Or that's my option or I'm manually saving things


00:47:58.840 --> 00:48:01.840
along the way, both have their downsides.


00:48:01.840 --> 00:48:06.000
But so a lot of times it's like,


00:48:06.000 --> 00:48:07.200
okay, I'm gonna run the notebook


00:48:07.200 --> 00:48:08.920
and then I'm gonna go grab coffee.


00:48:08.920 --> 00:48:12.120
And maybe when I get back, I can start my work.


00:48:12.120 --> 00:48:13.760
- Yeah. - So Kedro is saving


00:48:13.760 --> 00:48:16.920
each one of these points in the background along the way.


00:48:16.920 --> 00:48:18.560
So when I get a task and it's like,


00:48:18.560 --> 00:48:21.840
hey, you gotta put a node in between these two,


00:48:21.840 --> 00:48:24.280
I can start right away


00:48:24.280 --> 00:48:26.680
'cause the data's already sitting there.


00:48:26.680 --> 00:48:27.520
- Oh, that's cool.


00:48:27.520 --> 00:48:30.480
- I can also use the pipeline DAG object,


00:48:30.480 --> 00:48:32.600
like Ivan mentioned,


00:48:32.600 --> 00:48:36.440
to just run that section of pipeline I'm working on


00:48:36.440 --> 00:48:37.420
as I'm working.


00:48:37.420 --> 00:48:40.420
- Interesting, it's a little bit like


00:48:40.420 --> 00:48:42.040
just rerun the failing tests,


00:48:42.040 --> 00:48:44.140
or just this one test or something like that


00:48:44.140 --> 00:48:45.380
in the unit testing world,


00:48:45.380 --> 00:48:47.960
like instead of trying to rerun the entire test suite


00:48:47.960 --> 00:48:49.280
for every little change.


00:48:49.280 --> 00:48:52.240
Yeah, that's a cool thing.


00:48:52.240 --> 00:48:55.040
All right, you did talk about the deployment stuff before,


00:48:55.040 --> 00:48:58.000
so maybe you wanna touch on some of the deployment stuff?


00:48:58.000 --> 00:49:00.700
- I guess it will just be a quick mention.


00:49:00.700 --> 00:49:05.240
So what we do support are two deployment plugins right now.


00:49:05.240 --> 00:49:06.400
The first one is Kedro Docker,


00:49:06.400 --> 00:49:08.960
which packages your Kedro project in a Docker container.


00:49:08.960 --> 00:49:10.800
And the second one is Kedro Airflow,


00:49:10.800 --> 00:49:14.240
which was built with the Airflow astronomer team,


00:49:14.240 --> 00:49:16.040
which will take your Kedro pipeline


00:49:16.040 --> 00:49:18.080
and convert it into an Airflow DAG


00:49:18.080 --> 00:49:20.220
so that you can run it on Airflow.


00:49:20.220 --> 00:49:22.760
But we also do support in our documentation,


00:49:22.760 --> 00:49:25.640
like a few guides on how to deploy Kedro on Prefect,


00:49:25.640 --> 00:49:29.080
on Kubeflow, on AWS Batch, AWS SageMaker,


00:49:29.080 --> 00:49:34.080
and AWS Databricks as well, one of them.


00:49:34.080 --> 00:49:38.560
- I always feel like with AWS and Azure,


00:49:38.560 --> 00:49:41.320
there's just no matter how much I studied,


00:49:41.320 --> 00:49:42.720
there's like three more things


00:49:42.720 --> 00:49:44.420
that are sort of similar to what are there,


00:49:44.420 --> 00:49:45.260
but they're different.


00:49:45.260 --> 00:49:48.600
So like I know batch, but not the one you named after that.


00:49:48.600 --> 00:49:50.520
- Yeah, that's definitely the case.


00:49:50.520 --> 00:49:52.080
I believe it's AWS Databricks.


00:49:52.080 --> 00:49:54.880
But you can kind of use the same methodology


00:49:54.880 --> 00:49:56.720
if you're working with Azure Databricks as well


00:49:56.720 --> 00:49:57.940
to deploy things there.


00:49:57.940 --> 00:50:01.800
Ivan alluded to the fact that we do really pride


00:50:01.800 --> 00:50:02.960
on flexible deployment,


00:50:02.960 --> 00:50:04.040
because we don't know


00:50:04.040 --> 00:50:07.000
what is your internal infrastructure like?


00:50:07.000 --> 00:50:08.480
and therefore should be able to support


00:50:08.480 --> 00:50:11.160
the most generalizable case to do that.


00:50:11.160 --> 00:50:13.000
So you can definitely check out those guides.


00:50:13.000 --> 00:50:15.540
I know if there are guides missing,


00:50:15.540 --> 00:50:18.660
just raise GitHub issues and we'll look at it.


00:50:18.660 --> 00:50:21.560
As well, we added a growing tally of mentions


00:50:21.560 --> 00:50:23.200
of things that we haven't heard people


00:50:23.200 --> 00:50:24.600
necessarily using with Kedro.


00:50:24.600 --> 00:50:27.720
So yeah, it's worth checking out.


00:50:27.720 --> 00:50:29.040
- Yeah.


00:50:29.040 --> 00:50:30.600
And it's open source if people want to add


00:50:30.600 --> 00:50:34.360
new deployment stories, it can go and PRs are accepted.


00:50:34.360 --> 00:50:35.200
Is that true?


00:50:35.200 --> 00:50:37.920
Yeah, write up a guide and we'll take it.


00:50:37.920 --> 00:50:42.080
We have a great sense of contributing guide


00:50:42.080 --> 00:50:44.800
that's available on our documentation too,


00:50:44.800 --> 00:50:48.040
that shows you how to make, I mean, PRs across like,


00:50:48.040 --> 00:50:51.480
whether it's features or minor tech improvements


00:50:51.480 --> 00:50:53.960
or bug fixes, as well as documentation too,


00:50:53.960 --> 00:50:56.760
'cause we like to write our docs.


00:50:56.760 --> 00:50:58.720
- Yeah, that's important.


00:50:58.720 --> 00:51:01.560
- And coming into October, it's Hucktober,


00:51:01.560 --> 00:51:04.920
so people can come in and I think,


00:51:04.920 --> 00:51:06.600
we will be really, really grateful


00:51:06.600 --> 00:51:07.960
for adding more deployment.


00:51:07.960 --> 00:51:11.360
'Cause no matter how many you have,


00:51:11.360 --> 00:51:12.840
you will always run out of,


00:51:12.840 --> 00:51:17.280
or maybe differently,


00:51:17.280 --> 00:51:18.480
like no matter how many you have,


00:51:18.480 --> 00:51:20.120
you always don't have everything.


00:51:20.120 --> 00:51:23.320
And there is always someone would come in like,


00:51:23.320 --> 00:51:26.720
by the way, how do you deploy it on this AWS, whatever,


00:51:26.720 --> 00:51:27.780
the new thing that they have?


00:51:27.780 --> 00:51:29.400
It's like, how do I know?


00:51:29.400 --> 00:51:31.800
It's like, this is the first time I hear about it.


00:51:33.160 --> 00:51:36.000
So there is always room for more.


00:51:36.000 --> 00:51:38.360
And this is the thing that we would really,


00:51:38.360 --> 00:51:40.080
really love help with.


00:51:40.080 --> 00:51:43.240
So if you want to find something to contribute to


00:51:43.240 --> 00:51:47.000
for this October, maybe that could be Kedro.


00:51:47.000 --> 00:51:48.680
- Yeah, that'd be awesome.


00:51:48.680 --> 00:51:53.040
Yeah, I periodically will get in October contributions


00:51:53.040 --> 00:51:56.440
to like, for example, my course projects,


00:51:56.440 --> 00:51:57.480
the GitHub repos for them.


00:51:57.480 --> 00:52:00.760
And it would be like slight changing in the wording.


00:52:00.760 --> 00:52:02.840
So like if it says the Kedro documentation


00:52:02.840 --> 00:52:06.280
includes three examples to help you get started.


00:52:06.280 --> 00:52:08.240
They might say, to help you get started,


00:52:08.240 --> 00:52:10.080
the documentation contains three examples.


00:52:10.080 --> 00:52:11.600
There's a PR, so it counts.


00:52:11.600 --> 00:52:13.360
I'm like, so I just got to go through and close them.


00:52:13.360 --> 00:52:16.120
So please, people listening, just a minor,


00:52:16.120 --> 00:52:17.400
useful contribution.


00:52:17.400 --> 00:52:19.920
But yeah, it would be great to work on this, right?


00:52:19.920 --> 00:52:21.840
And I feel like these types of pipelines


00:52:21.840 --> 00:52:26.480
are very accessible because they narrow the focus so much.


00:52:26.480 --> 00:52:29.320
When you get down to certain tasks and certain things,


00:52:29.320 --> 00:52:30.800
you don't have to understand the whole project.


00:52:30.800 --> 00:52:33.700
just how do you do this other task slightly differently?


00:52:33.700 --> 00:52:37.320
- Yeah, absolutely.


00:52:37.320 --> 00:52:39.720
And I'm pretty sure that talking about contributors,


00:52:39.720 --> 00:52:41.600
like if it's just change of words,


00:52:41.600 --> 00:52:43.480
we might not have T-shirt for you.


00:52:43.480 --> 00:52:45.480
If you're adding a guide,


00:52:45.480 --> 00:52:47.640
we will definitely send out a T-shirt.


00:52:47.640 --> 00:52:48.640
- Oh, nice, awesome.


00:52:48.640 --> 00:52:53.120
T-shirts are included, not just passing Hacktoberfest.


00:52:53.120 --> 00:52:56.520
Okay, so one of the things I find is a little tricky


00:52:56.520 --> 00:52:57.680
is always talking through


00:52:57.680 --> 00:52:59.120
or like thinking through an example


00:52:59.120 --> 00:52:59.960
of these kinds of things.


00:52:59.960 --> 00:53:03.480
are very neat, but they also sometimes feel pretty abstract.


00:53:03.480 --> 00:53:06.920
So even you maybe want to talk us through


00:53:06.920 --> 00:53:08.600
just this like "Hello World" example.


00:53:08.600 --> 00:53:10.880
I know it's hard to talk about code on audio,


00:53:10.880 --> 00:53:13.800
so not exactly, but just give us a sense


00:53:13.800 --> 00:53:17.480
of what it means to write one of these pipelines.


00:53:17.480 --> 00:53:20.480
- Yeah, sure.


00:53:20.480 --> 00:53:25.480
So maybe starting from the first one is,


00:53:25.480 --> 00:53:28.040
I think in the "Hello World" example,


00:53:28.040 --> 00:53:30.920
we have, we show like what a node is,


00:53:30.920 --> 00:53:33.400
and it's not very different than a function,


00:53:33.400 --> 00:53:35.260
it's just a function actually.


00:53:35.260 --> 00:53:38.560
And your function, we accept two types of nodes,


00:53:38.560 --> 00:53:40.280
actually three types of nodes,


00:53:40.280 --> 00:53:42.220
nodes that have only inputs,


00:53:42.220 --> 00:53:43.800
nodes that have only outputs,


00:53:43.800 --> 00:53:45.960
or nodes that have both inputs and outputs.


00:53:45.960 --> 00:53:49.680
We don't accept functions that don't have


00:53:49.680 --> 00:53:52.440
neither inputs nor outputs, for obvious reasons,


00:53:52.440 --> 00:53:54.740
because that doesn't do much.


00:53:56.740 --> 00:53:59.460
And you can start with your own function.


00:53:59.460 --> 00:54:02.180
Let's say you can call it return greeting,


00:54:02.180 --> 00:54:03.980
which will just return hello.


00:54:03.980 --> 00:54:04.820
And--


00:54:04.820 --> 00:54:07.620
- So just let me elaborate on that first thing.


00:54:07.620 --> 00:54:09.900
So what you have is a Python function


00:54:09.900 --> 00:54:14.380
that takes no parameters and returns a string.


00:54:14.380 --> 00:54:16.220
But the thing that's notable about this


00:54:16.220 --> 00:54:18.360
is it doesn't have a decorator


00:54:18.360 --> 00:54:22.180
or some other special thing about it.


00:54:22.180 --> 00:54:25.180
It's literally just a bare Python function


00:54:25.180 --> 00:54:28.180
that has nothing to do with Kedro per se.


00:54:28.180 --> 00:54:29.180
- Yeah, absolutely.


00:54:29.180 --> 00:54:32.980
So the reason why we did it this way


00:54:32.980 --> 00:54:37.600
was to allow all kinds of people just to create functions.


00:54:37.600 --> 00:54:39.740
Like if you don't know decorators and these kind of things,


00:54:39.740 --> 00:54:40.820
you don't need to know that.


00:54:40.820 --> 00:54:42.620
And then the second one is,


00:54:42.620 --> 00:54:45.300
you might actually use functions from libraries


00:54:45.300 --> 00:54:48.260
that were not at all designed to be part of our framework.


00:54:48.260 --> 00:54:51.740
So, you know, if you're importing a function,


00:54:51.740 --> 00:54:53.860
you cannot add decorator on that one.


00:54:55.100 --> 00:54:58.020
Well, there is ways, obviously, in Python, always.


00:54:58.020 --> 00:55:03.460
But it's not very intuitive.


00:55:03.460 --> 00:55:06.580
So we just work with pure functions.


00:55:06.580 --> 00:55:11.100
How that gets turned into a node is actually


00:55:11.100 --> 00:55:14.580
more curious here.


00:55:14.580 --> 00:55:16.020
And then we have a,


00:55:16.020 --> 00:55:18.140
it happens through a helper function we have,


00:55:18.140 --> 00:55:21.340
which is called node, conveniently.


00:55:21.340 --> 00:55:23.240
And then you provide your function,


00:55:23.240 --> 00:55:27.360
And you provide your inputs and outputs as strings.


00:55:27.360 --> 00:55:30.040
So these are the three things you can add.


00:55:30.040 --> 00:55:32.860
So for example, for this return greeting function,


00:55:32.860 --> 00:55:35.040
your inputs would be none,


00:55:35.040 --> 00:55:36.960
so because you don't have any inputs,


00:55:36.960 --> 00:55:40.120
and your outputs could be a string


00:55:40.120 --> 00:55:42.560
which says my salutation.


00:55:42.560 --> 00:55:46.040
That's in our, how we've done in the Hello World example.


00:55:46.040 --> 00:55:51.840
So this will create a note in Kedro sense,


00:55:51.840 --> 00:55:53.920
which you can embed later in a pipeline.


00:55:53.920 --> 00:56:00.680
- Nice, and then here the output has a static,


00:56:00.680 --> 00:56:02.120
is that like the name of the output


00:56:02.120 --> 00:56:04.660
so you can use it in the pipeline?


00:56:04.660 --> 00:56:05.500
- Yeah, correct.


00:56:05.500 --> 00:56:07.280
So you can think of them as-- - Not the value,


00:56:07.280 --> 00:56:10.240
but like the name so you can refer to it later on, right?


00:56:10.240 --> 00:56:11.080
- Yeah, exactly.


00:56:11.080 --> 00:56:13.460
So you can think of them as variables in a way,


00:56:13.460 --> 00:56:17.440
as a variable that variable,


00:56:17.440 --> 00:56:21.720
like you can define where to store that valuable


00:56:21.720 --> 00:56:24.240
through the data catalog later.


00:56:24.240 --> 00:56:27.760
- Yeah, very nice.


00:56:27.760 --> 00:56:30.480
So it seems super easy.


00:56:30.480 --> 00:56:32.920
You have also a more elaborate example.


00:56:32.920 --> 00:56:35.680
It says a space flights tutorial.


00:56:35.680 --> 00:56:38.720
So people wanna, what is this?


00:56:38.720 --> 00:56:39.560
We don't have to talk to it,


00:56:39.560 --> 00:56:41.000
just if people wanna go and play with it.


00:56:41.000 --> 00:56:42.080
What is this one?


00:56:42.080 --> 00:56:43.640
- I really wanted to introduce it


00:56:43.640 --> 00:56:47.600
because initially when we were thinking of an example,


00:56:47.600 --> 00:56:48.900
I think she came up with the idea


00:56:48.900 --> 00:56:51.220
to make it more of a space flight.


00:56:51.220 --> 00:56:56.220
And we actually, it was quite funny that this led


00:56:56.220 --> 00:57:01.460
to something more interesting that Yetu can share about.


00:57:01.460 --> 00:57:03.820
- Yeah, nice.


00:57:03.820 --> 00:57:06.340
- So it's actually, I think it was actually Dimitri


00:57:06.340 --> 00:57:08.100
that did this, he was a former maintainer


00:57:08.100 --> 00:57:09.700
on the Kedro project.


00:57:09.700 --> 00:57:12.260
But the scenario for this tutorial is that


00:57:12.260 --> 00:57:15.300
at the year 2160, you're somehow a data scientist


00:57:15.300 --> 00:57:18.360
predicting the price of space flights to the moon and back.


00:57:18.360 --> 00:57:21.480
and you have access to three data sources,


00:57:21.480 --> 00:57:23.800
information about companies that are flying people


00:57:23.800 --> 00:57:27.080
to the moon, reviews on their shuttles that they have,


00:57:27.080 --> 00:57:29.320
and then also the customer reviews that they've given


00:57:29.320 --> 00:57:31.160
while working with those companies.


00:57:31.160 --> 00:57:34.120
And the whole thing is you just wanna predict


00:57:34.120 --> 00:57:36.320
the price of a space flight.


00:57:36.320 --> 00:57:37.600
So if you go through the tutorial,


00:57:37.600 --> 00:57:39.380
you'll get acquainted with all the way


00:57:39.380 --> 00:57:44.320
from beginner functionality, like install Kedro,


00:57:44.320 --> 00:57:45.880
set up my project template,


00:57:45.880 --> 00:57:47.800
all the way to kind of intermediate,


00:57:47.800 --> 00:57:50.360
just before intermediate functionality in Kedro.


00:57:50.360 --> 00:57:52.360
So you get up to speed in about like an hour,


00:57:52.360 --> 00:57:54.680
an hour and a half in total


00:57:54.680 --> 00:57:56.200
as you go through the full tutorial.


00:57:56.200 --> 00:57:58.080
And it will teach you all the basics of like,


00:57:58.080 --> 00:57:59.640
how do I use the project template?


00:57:59.640 --> 00:58:01.080
How do I use the data catalog?


00:58:01.080 --> 00:58:03.200
How do I construct my pipeline?


00:58:03.200 --> 00:58:04.580
How do I visualize my pipeline?


00:58:04.580 --> 00:58:07.200
And how do I package my project as well?


00:58:07.200 --> 00:58:10.960
So it's really useful for getting up to speed on that.


00:58:10.960 --> 00:58:13.280
But we've had a really great time


00:58:13.280 --> 00:58:15.100
with the Space Flights project


00:58:15.100 --> 00:58:17.340
because we found out that NASA,


00:58:17.340 --> 00:58:18.940
a team at NASA was using Kedro,


00:58:18.940 --> 00:58:20.260
so it was almost like a dream.


00:58:20.260 --> 00:58:21.100
- Oh, nice.


00:58:21.100 --> 00:58:24.180
- When we discovered that,


00:58:24.180 --> 00:58:26.180
'cause it was like we went full circle


00:58:26.180 --> 00:58:28.340
and went to the moon with them.


00:58:28.340 --> 00:58:31.100
- They're actually doing space flights, amazing.


00:58:31.100 --> 00:58:34.700
- Yeah, I'm pretty sure they chose us


00:58:34.700 --> 00:58:36.220
only because of our tutorial.


00:58:36.220 --> 00:58:41.580
- We were thinking Luigi, but then we saw this tutorial


00:58:41.580 --> 00:58:42.900
and we knew this was the one.


00:58:42.900 --> 00:58:44.340
Now, it is really neat.


00:58:44.340 --> 00:58:48.140
I do love these imaginative examples and tutorials


00:58:48.140 --> 00:58:49.500
rather than something really boring,


00:58:49.500 --> 00:58:51.140
like, oh, let's build a to-do list


00:58:51.140 --> 00:58:52.140
and here's how we're gonna do it.


00:58:52.140 --> 00:58:54.460
Like, okay.


00:58:54.460 --> 00:58:55.900
No, this sounds really fun.


00:58:55.900 --> 00:58:57.540
So if people wanna get a sense


00:58:57.540 --> 00:58:59.540
for what it's like to work with Kendra,


00:58:59.540 --> 00:59:01.900
you recommend this as the tutorial


00:59:01.900 --> 00:59:03.620
to work through to get started?


00:59:03.620 --> 00:59:05.020
- Definitely recommend this.


00:59:05.020 --> 00:59:06.920
And then there are a few online resources


00:59:06.920 --> 00:59:08.740
if you wanna use them.


00:59:08.740 --> 00:59:12.180
We have a blogger, I mean, he's been inactive for a while,


00:59:12.180 --> 00:59:14.980
but he still has really good YouTube tutorials.


00:59:14.980 --> 00:59:18.380
Search for Data Engineer 1 and look for his walkthrough


00:59:18.380 --> 00:59:19.780
of the tutorial there.


00:59:19.780 --> 00:59:21.820
It's also very handy for getting up to speed


00:59:21.820 --> 00:59:25.140
if you want a video kind of like workflow


00:59:25.140 --> 00:59:26.540
as you go through the tutorial.


00:59:26.540 --> 00:59:31.540
But we are gonna be piloting some live stream workshops


00:59:31.540 --> 00:59:34.320
of us working through the tutorial ourselves


00:59:34.320 --> 00:59:35.960
later on in the year.


00:59:35.960 --> 00:59:38.140
So definitely do look out for that on,


00:59:38.140 --> 00:59:40.820
I think probably the Quantum Black YouTube will have them.


00:59:40.820 --> 00:59:44.640
And then also, oh yeah, you can actually see,


00:59:44.640 --> 00:59:48.980
- First I gotta get through the ad for people to see it.


00:59:48.980 --> 00:59:52.740
I'm not logged in over here, but yeah, there we go.


00:59:52.740 --> 00:59:54.060
- Perfectly fine.


00:59:54.060 --> 00:59:56.060
So yeah, that's Data Engineer One in action.


00:59:56.060 --> 00:59:58.780
And then I definitely recommend either joining in


00:59:58.780 --> 01:00:01.060
on those live streams as we host them


01:00:01.060 --> 01:00:06.860
or the follow up YouTube videos as we do them.


01:00:06.860 --> 01:00:07.700
- Yeah, cool.


01:00:07.700 --> 01:00:10.380
I'll link to the, some of the YouTube videos


01:00:10.380 --> 01:00:12.160
for people to go check out there.


01:00:12.160 --> 01:00:13.540
Very nice.


01:00:13.540 --> 01:00:15.440
So we're getting pretty short on time.


01:00:15.440 --> 01:00:19.380
Even maybe one thing we could just do to wrap this up


01:00:19.380 --> 01:00:21.640
is maybe, I know you talked about some of the cool libraries


01:00:21.640 --> 01:00:22.900
and stuff you used to build this.


01:00:22.900 --> 01:00:25.460
Maybe you could just talk a little bit briefly


01:00:25.460 --> 01:00:27.300
about the internals and some of the fun things


01:00:27.300 --> 01:00:28.560
you use there.


01:00:28.560 --> 01:00:35.540
- Sure, so I think probably good libraries


01:00:35.540 --> 01:00:37.020
that worth mentioning,


01:00:38.180 --> 01:00:42.820
And maybe I will not use the time to talk too much about Kedrus internals, but just


01:00:42.820 --> 01:00:47.780
to have a shout out for nice libraries that we found out.


01:00:47.780 --> 01:00:51.900
One thing that Waylon already mentioned was FS-spec.


01:00:51.900 --> 01:00:53.380
I think that was amazing.


01:00:53.380 --> 01:00:59.340
And we really found it super useful.


01:00:59.340 --> 01:01:03.320
I think it is in the Anaconda ecosystem,


01:01:03.320 --> 01:01:08.660
developed by some of the people there.


01:01:08.660 --> 01:01:11.580
And the good news is that actually


01:01:11.580 --> 01:01:14.960
it's also becoming part of Pandas.


01:01:14.960 --> 01:01:17.020
So whenever you're doing load CSV


01:01:17.020 --> 01:01:18.900
in the newest version of Pandas,


01:01:18.900 --> 01:01:21.180
they use FS-Pack as well.


01:01:21.180 --> 01:01:24.660
Oh yeah, now it says it's also in Dask, Pandas,


01:01:24.660 --> 01:01:27.540
even DVC and many other things.


01:01:29.180 --> 01:01:32.180
This has been really, really useful


01:01:32.180 --> 01:01:37.180
because it simplified a lot of our code about the data sets.


01:01:37.180 --> 01:01:40.700
We didn't have to, previously we had the data set for S3,


01:01:40.700 --> 01:01:45.300
we had a data set for GCP and GCS


01:01:45.300 --> 01:01:48.420
and Azure Blob Store and all of that.


01:01:48.420 --> 01:01:50.980
I don't know, it's super annoying


01:01:50.980 --> 01:01:53.020
because they do exactly the same thing.


01:01:53.020 --> 01:01:54.780
You do it like many times,


01:01:54.780 --> 01:01:58.380
just changing endpoints and things like that.


01:01:58.380 --> 01:02:00.260
it was super frustrating to maintain it.


01:02:00.260 --> 01:02:02.140
And when we have many of those datasets,


01:02:02.140 --> 01:02:03.100
it was super frustrating.


01:02:03.100 --> 01:02:06.260
And when this came out, it simplified basically,


01:02:06.260 --> 01:02:10.180
maybe reduced our code base for datasets


01:02:10.180 --> 01:02:11.900
three times or something like that.


01:02:11.900 --> 01:02:15.060
- Wow, yeah, 'cause they do that abstraction for you.


01:02:15.060 --> 01:02:15.900
- Yeah. - And you just


01:02:15.900 --> 01:02:17.460
pass it along, right?


01:02:17.460 --> 01:02:21.940
- Yeah, so if someone wants to treat a remote database


01:02:21.940 --> 01:02:24.260
as kind of like a local file,


01:02:24.260 --> 01:02:26.980
I think FSpec is really useful too.


01:02:26.980 --> 01:02:30.780
- Cool, let's see, another one that you had mentioned


01:02:30.780 --> 01:02:32.900
was Dynaconf.


01:02:32.900 --> 01:02:36.140
- Yeah, that's a quite nice one.


01:02:36.140 --> 01:02:38.140
We started using it recently.


01:02:38.140 --> 01:02:43.140
What we wanted to do in Kedro, because we are a framework,


01:02:43.140 --> 01:02:45.460
and there is some framework code


01:02:45.460 --> 01:02:47.760
that needs to call user code.


01:02:47.760 --> 01:02:52.460
And that's a bit challenging,


01:02:52.460 --> 01:02:55.460
because you don't know what the package name of the user,


01:02:55.460 --> 01:02:57.220
because the user will create their own code,


01:02:57.220 --> 01:02:58.820
they will choose a package name


01:02:58.820 --> 01:03:01.580
and you don't know what to import from.


01:03:01.580 --> 01:03:06.580
So we came up with a pattern


01:03:06.580 --> 01:03:12.280
that was actually applied by Django,


01:03:12.280 --> 01:03:17.280
which you kind of configure project by their package name


01:03:17.280 --> 01:03:19.680
and then you load some of the settings.


01:03:19.680 --> 01:03:21.720
So if people know Django,


01:03:21.720 --> 01:03:27.200
know that they have an extensive way of doing settings in order to configure different things


01:03:27.200 --> 01:03:30.460
in Django.


01:03:30.460 --> 01:03:37.840
How DynaCode helped us with that is because it was a very extensive, like very clean abstraction


01:03:37.840 --> 01:03:41.920
to do lazy loading of settings.


01:03:41.920 --> 01:03:46.240
And why did we need lazy loading of settings?


01:03:46.240 --> 01:03:51.240
For example, you might have multiple pipelines in Kedro.


01:03:51.240 --> 01:03:52.560
One of them would not be completed.


01:03:52.560 --> 01:03:55.700
There could be some errors in it.


01:03:55.700 --> 01:03:58.600
But you still want to run the other pipeline.


01:03:58.600 --> 01:04:04.840
And if you eagerly load all of that, then your code will fail for no reason.


01:04:04.840 --> 01:04:06.080
- Right, right.


01:04:06.080 --> 01:04:09.760
Even if you weren't actually gonna end up running that part, if there's any error.


01:04:09.760 --> 01:04:13.640
It's almost like a compiled language versus a dynamic language.


01:04:13.640 --> 01:04:14.640
- Yeah.


01:04:14.640 --> 01:04:16.040
And here, Python shines, right?


01:04:16.040 --> 01:04:18.560
is you can have things like Dynaconf,


01:04:18.560 --> 01:04:23.640
where you don't need to compile that path.


01:04:23.640 --> 01:04:28.440
So it helped us a lot with making those settings loaded


01:04:28.440 --> 01:04:30.800
lazily, because there were different things.


01:04:30.800 --> 01:04:33.680
You can add validators to validate settings and so on.


01:04:33.680 --> 01:04:35.880
It's fairly extensive, too.


01:04:35.880 --> 01:04:38.600
I recommend people to read their documentation.


01:04:38.600 --> 01:04:40.560
You can use it for many things.


01:04:40.560 --> 01:04:45.560
So yeah, I think it's a nice patch we stumbled on.


01:04:45.560 --> 01:04:48.940
- Yeah, yeah, very neat.


01:04:48.940 --> 01:04:52.560
All those are great recommendations.


01:04:52.560 --> 01:04:54.840
So with just a little bit of time left,


01:04:54.840 --> 01:04:56.160
let's wrap up our conversation


01:04:56.160 --> 01:04:57.360
with where things are going.


01:04:57.360 --> 01:05:00.400
And Yotinda, maybe wanna give us a roadmap,


01:05:00.400 --> 01:05:03.960
future view of what people who are maybe using Kedron now


01:05:03.960 --> 01:05:05.520
are like, what's coming?


01:05:07.080 --> 01:05:10.880
So I guess maybe the next upcoming feature


01:05:10.880 --> 01:05:12.480
that you'll start to see being rolled out


01:05:12.480 --> 01:05:15.040
is experiment tracking in Kedro.


01:05:15.040 --> 01:05:17.660
So what we're doing is, Kedro is already,


01:05:17.660 --> 01:05:19.200
I think Weilan spoke to it,


01:05:19.200 --> 01:05:22.480
are really aware of being able to save your datasets.


01:05:22.480 --> 01:05:25.880
And for us, our data catalog could apply to models as well.


01:05:25.880 --> 01:05:29.480
So we already had some form of model versioning in Kedro.


01:05:29.480 --> 01:05:30.960
But what we really needed to extend,


01:05:30.960 --> 01:05:33.840
and we already have the concept of parameters too,


01:05:33.840 --> 01:05:36.700
so inputs, but what we really needed to do


01:05:36.700 --> 01:05:40.580
was think around how do we think about features


01:05:40.580 --> 01:05:42.060
and how do we think about metrics


01:05:42.060 --> 01:05:44.100
coming out of the pipeline as well.


01:05:44.100 --> 01:05:46.240
And those are the two additions that we've made


01:05:46.240 --> 01:05:49.940
kind of as additional datasets in the Kedro framework too.


01:05:49.940 --> 01:05:52.020
And then the last thing that we had to think around


01:05:52.020 --> 01:05:53.660
was like how do we collect all of these things


01:05:53.660 --> 01:05:56.040
as one unit or one experiment?


01:05:56.040 --> 01:05:59.500
That concept is actually very,


01:05:59.500 --> 01:06:02.340
it's actually been implemented on the framework side.


01:06:02.340 --> 01:06:04.060
So you can really start to interact with the,


01:06:04.060 --> 01:06:05.980
you know, the experiment tracking functionality there,


01:06:05.980 --> 01:06:08.860
but a lot of the massive changes are going to be done on the front end,


01:06:08.860 --> 01:06:13.660
where you'll be able to look at the list of experiments that you've run,


01:06:13.660 --> 01:06:18.380
compare them as well, and then we'll be building up the functionality as we see fit,


01:06:18.380 --> 01:06:25.180
including probably MLflow model registry and model serving integration as well.


01:06:25.180 --> 01:06:27.980
And that's probably going to be done through our data catalog as well.


01:06:27.980 --> 01:06:32.180
Oh, that's cool. Is that if I go to the trouble to train up a model and it takes a day,


01:06:32.180 --> 01:06:35.020
I can store that and other people can just pull it down


01:06:35.020 --> 01:06:37.780
and use it without spending another day.


01:06:37.780 --> 01:06:42.500
Exactly. So that's the large thinking around it.


01:06:42.500 --> 01:06:45.220
So yeah, you can definitely look forward to that.


01:06:45.220 --> 01:06:51.140
There's some open issues on our GitHub repository around configuration.


01:06:51.140 --> 01:06:54.660
So I do suggest if users have interacted with Kedro


01:06:54.660 --> 01:06:56.660
and you've had issues with scaling configuration,


01:06:56.660 --> 01:06:58.660
please do check it out and give us comment there,


01:06:58.660 --> 01:07:00.500
because that will decide whether or not,


01:07:00.500 --> 01:07:05.100
when we pick those issues up based on user responses there.


01:07:05.100 --> 01:07:08.540
So yeah, that's what I think you can look forward to.


01:07:08.540 --> 01:07:10.980
- Fantastic.


01:07:10.980 --> 01:07:14.580
All right, even I think we're gonna take your two libraries


01:07:14.580 --> 01:07:18.460
you mentioned as the notable PyPI projects


01:07:18.460 --> 01:07:21.220
just for the sake of time since we're kind of over.


01:07:21.220 --> 01:07:24.500
So I'll just do one final question for everyone out there.


01:07:24.500 --> 01:07:26.780
And that's, if you're gonna write some Python code,


01:07:26.780 --> 01:07:28.620
what editor do you use?


01:07:28.620 --> 01:07:29.820
Even you wanna go first?


01:07:29.820 --> 01:07:31.820
- I'm sorry, what's the name of the Python support?


01:07:31.820 --> 01:07:33.820
- IntelliJ. - IntelliJ.


01:07:33.820 --> 01:07:45.820
- From Java and Scala. - So basically the Python support in full-on IntelliJ, right? Yeah. - Yeah, and not PyCharm, but IntelliJ. - Yep.


01:07:45.820 --> 01:07:57.820
- Waylon? - Yeah. - Oh, sorry, go ahead. - Ivan says, like, no PyCharm, I'm full PyCharm. - Same here. - There's arguments on the team about this.


01:07:57.820 --> 01:08:04.300
about this. Oh, is there? This is a point of contention. I see. That's that's funny,


01:08:04.300 --> 01:08:08.540
because they're so similar, right? It's not like VS Code versus Fichar. How about you?


01:08:08.540 --> 01:08:19.900
I'm an avid NeoVim user. You know, part of my, my workflow is being a lead data scientist is I


01:08:19.900 --> 01:08:26.300
bounce between probably like a dozen projects a day between like actual running pipelines,


01:08:26.300 --> 01:08:29.620
Or maybe it's a couple of our internal libraries


01:08:29.620 --> 01:08:32.020
that help those things run.


01:08:32.020 --> 01:08:37.340
And it's really nice to have something lightweight that


01:08:37.340 --> 01:08:40.500
can run with pretty low resources.


01:08:40.500 --> 01:08:43.620
Also, having it running in Tmux makes it easy to--


01:08:43.620 --> 01:08:49.180
like a few keystrokes, I can go into a specific project.


01:08:49.180 --> 01:08:51.340
The editors, they all tend to look the same.


01:08:51.340 --> 01:08:53.380
And you have a bunch of projects looking the same.


01:08:53.380 --> 01:08:56.820
It's very easy to edit the wrong one.


01:08:56.820 --> 01:08:59.340
- Yeah, yeah, cool.


01:08:59.340 --> 01:09:01.820
All right, a good recommendation.


01:09:01.820 --> 01:09:05.180
All right, well, thank you all for being here.


01:09:05.180 --> 01:09:06.860
Maybe final call to action.


01:09:06.860 --> 01:09:08.780
People want to get started with Kedro,


01:09:08.780 --> 01:09:10.440
bring it into the organization, try it out.


01:09:10.440 --> 01:09:11.440
What do you all say?


01:09:11.440 --> 01:09:16.300
- Well, you know how to get started.


01:09:16.300 --> 01:09:17.900
Get into the Spaceflight tutorial


01:09:17.900 --> 01:09:20.460
and then just shout if you have any issues.


01:09:20.460 --> 01:09:21.580
We're up on Discord


01:09:21.580 --> 01:09:24.480
and we also do have a GitHub discussions page as well.


01:09:24.480 --> 01:09:25.920
So you can just flag,


01:09:25.920 --> 01:09:27.680
we help users across the different levels


01:09:27.680 --> 01:09:28.720
of where they find themselves.


01:09:28.720 --> 01:09:31.060
So definitely we do that.


01:09:31.060 --> 01:09:31.900
- Yeah.


01:09:31.900 --> 01:09:33.480
And I guess,


01:09:33.480 --> 01:09:36.000
Quantum Black does consulting for Kedro.


01:09:36.000 --> 01:09:37.720
So if people have these projects and they're like,


01:09:37.720 --> 01:09:39.460
I'm not sure we can handle this ourselves,


01:09:39.460 --> 01:09:41.560
they could probably hire you all, right?


01:09:41.560 --> 01:09:45.180
- We've never quite had that level of interaction.


01:09:45.180 --> 01:09:48.960
It's only that a Quantum Black data science


01:09:48.960 --> 01:09:50.520
and data engineering team will go out


01:09:50.520 --> 01:09:56.280
use Kedro as part of a larger engagement on like how to solve a business problem. So you can


01:09:56.280 --> 01:10:01.880
definitely learn Kedro through that way. But here in the open source community as we move


01:10:01.880 --> 01:10:05.880
in the open source space it would definitely be through the channels that we have available.


01:10:05.880 --> 01:10:11.000
Cool. But one thing to mention is like if people want to engage with Quantum


01:10:11.000 --> 01:10:14.680
Lab because they know about Kedro, please mention that.


01:10:16.200 --> 01:10:19.080
- Yeah, I mean, like, I found it because of kids,


01:10:19.080 --> 01:10:22.920
we have a kids routine, so that, you know, we get the kids.


01:10:22.920 --> 01:10:23.760
(laughing)


01:10:23.760 --> 01:10:24.580
- Yeah, yeah.


01:10:24.580 --> 01:10:27.600
Awesome, yeah, I bring that up because


01:10:27.600 --> 01:10:30.580
there's different ways to support open source, right?


01:10:30.580 --> 01:10:32.860
I mean, there's the MongoDB model,


01:10:32.860 --> 01:10:34.680
where they sell MongoDB as a service


01:10:34.680 --> 01:10:36.420
and Atlas and all that.


01:10:36.420 --> 01:10:41.320
There's, you know, like Tidelift, there's GitHub support,


01:10:41.320 --> 01:10:44.140
but here's like yet another way in which this project


01:10:44.140 --> 01:10:45.820
is being grown and being supported


01:10:45.820 --> 01:10:49.060
because it's supporting you all doing your work.


01:10:49.060 --> 01:10:52.620
- Yeah, so I mean, if that's the case,


01:10:52.620 --> 01:10:55.940
then I'll definitely say we do really want to be able


01:10:55.940 --> 01:10:58.320
to help a lot of people in the industry as well,


01:10:58.320 --> 01:10:59.580
because we know that it's needed.


01:10:59.580 --> 01:11:02.420
And we obviously recognize that as a framework,


01:11:02.420 --> 01:11:03.680
especially in the data science space,


01:11:03.680 --> 01:11:05.300
we are a bit of a first mover.


01:11:05.300 --> 01:11:07.640
So we suffer a lot of like first mover pains


01:11:07.640 --> 01:11:10.420
where people are like, why on earth do I need a framework?


01:11:10.420 --> 01:11:12.240
I don't need a framework.


01:11:12.240 --> 01:11:14.700
So if you help us with breaking through those barriers,


01:11:14.700 --> 01:11:17.220
like, please go for it and be an advocate.


01:11:17.220 --> 01:11:19.220
And I guess in the sense, be a Kidroid.


01:11:19.220 --> 01:11:21.580
- Right on.


01:11:21.580 --> 01:11:22.860
All right, Etunde, Waylon,


01:11:22.860 --> 01:11:24.660
even thank you all for being here.


01:11:24.660 --> 01:11:26.500
It's been great to learn about Kidro


01:11:26.500 --> 01:11:27.900
and great to chat with you.


01:11:27.900 --> 01:11:30.340
- It's been awesome.


01:11:30.340 --> 01:11:31.580
Thank you so much.


01:11:31.580 --> 01:11:32.420
- Yeah, thank you.


01:11:32.420 --> 01:11:34.420
- Bye.


01:11:34.420 --> 01:11:35.240
- Thanks, Michael.


01:11:35.240 --> 01:11:35.740
Bye.


01:11:35.740 --> 01:11:45.740
[BLANK_AUDIO]

