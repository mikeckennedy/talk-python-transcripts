WEBVTT

00:00:00.000 --> 00:00:04.160
Jonathan, Preston, welcome to Talk Python To Me.


00:00:04.160 --> 00:00:05.660
- Glad to be here.


00:00:05.660 --> 00:00:08.440
- Hey, it's great to have you guys here.


00:00:08.440 --> 00:00:11.560
I'm very excited to talk about GUIs


00:00:11.560 --> 00:00:15.120
and UI frameworks and stuff like that.


00:00:15.120 --> 00:00:16.560
I think Python needs more of it


00:00:16.560 --> 00:00:19.920
and we're building some cool projects,


00:00:19.920 --> 00:00:21.020
cool frameworks there.


00:00:21.020 --> 00:00:26.560
It'll be fun to talk about it.


00:00:26.560 --> 00:00:29.520
We're gonna talk about DeerPyGUI,


00:00:29.520 --> 00:00:33.520
which is one of these frameworks that's not over-involved


00:00:33.520 --> 00:00:35.980
with too much going on and tries to have


00:00:35.980 --> 00:00:38.780
a quick getting started story, right?


00:00:38.780 --> 00:00:40.160
- That is correct.


00:00:40.160 --> 00:00:41.120
- Right on.


00:00:41.120 --> 00:00:42.680
Yeah, I'm really looking forward to talking about it.


00:00:42.680 --> 00:00:45.440
Before we do though, let's just get into your stories


00:00:45.440 --> 00:00:46.720
and hear a little bit about,


00:00:46.720 --> 00:00:49.100
since there's both of you, maybe not too extended,


00:00:49.100 --> 00:00:51.940
but Jonathan, how'd you get into programming in Python?


00:00:51.940 --> 00:00:58.480
- So I got into programming when I was around 13 years old.


00:00:59.320 --> 00:01:03.780
my stepdad and mom got me a C++ for Dummies book.


00:01:03.780 --> 00:01:04.620
- Okay.


00:01:04.620 --> 00:01:08.420
- And worked with that for a while until,


00:01:08.420 --> 00:01:12.940
just kind of as a hobby project, or as a hobby thing.


00:01:12.940 --> 00:01:16.020
And once I got to college,


00:01:16.020 --> 00:01:18.020
I went into mechanical engineering,


00:01:18.020 --> 00:01:20.220
which is also where I met Preston.


00:01:20.220 --> 00:01:25.220
And there, they typically like to use MATLAB,


00:01:25.220 --> 00:01:27.980
which everybody knows isn't a real programming language,


00:01:27.980 --> 00:01:30.580
because the indices start at one.


00:01:30.580 --> 00:01:35.580
But as an alternative to that, came across Python.


00:01:35.580 --> 00:01:39.240
You know, it had a lot of the same features,


00:01:39.240 --> 00:01:44.240
actually a lot more features than MATLAB,


00:01:44.240 --> 00:01:47.500
and it was free, so didn't have to pay


00:01:47.500 --> 00:01:49.580
for the MATLAB license.


00:01:49.580 --> 00:01:50.520
- MATLAB's expensive.


00:01:50.520 --> 00:01:52.020
For people who haven't messed with it,


00:01:52.020 --> 00:01:56.380
it's like really expensive outside the student story.


00:01:56.380 --> 00:01:58.460
>> It is, and you have to use


00:01:58.460 --> 00:02:03.020
their entire environment and everything just to use it.


00:02:03.020 --> 00:02:08.260
Aside from that, on top of that,


00:02:08.260 --> 00:02:09.700
with the Raspberry Pi,


00:02:09.700 --> 00:02:12.260
it's into electronics and things like that.


00:02:12.260 --> 00:02:17.660
The Raspberry Pi are able to control the GPIO pins using Python.


00:02:17.660 --> 00:02:22.020
Naturally, I just started playing with Python from there.


00:02:22.020 --> 00:02:25.660
That's pretty much where Python came into my picture.


00:02:25.660 --> 00:02:27.580
- Yeah, really cool.


00:02:27.580 --> 00:02:29.120
So you said you were in chemical engineering?


00:02:29.120 --> 00:02:29.960
Is that what it was?


00:02:29.960 --> 00:02:30.780
- Mechanical.


00:02:30.780 --> 00:02:31.620
- Mechanical, okay.


00:02:31.620 --> 00:02:33.700
I was in chemical for a little while,


00:02:33.700 --> 00:02:35.320
and they said that,


00:02:35.320 --> 00:02:37.160
I asked if I could take a C++ class.


00:02:37.160 --> 00:02:38.500
They said, "You can as an elective,


00:02:38.500 --> 00:02:39.580
"but you have to take Fortran


00:02:39.580 --> 00:02:41.120
"'cause that's gonna be the most important language


00:02:41.120 --> 00:02:42.800
"you'll ever learn," I thought.


00:02:42.800 --> 00:02:43.620
- Wow. - I'm just jealous.


00:02:43.620 --> 00:02:45.220
I mean, MATLAB is not that amazing,


00:02:45.220 --> 00:02:47.580
but I'll tell you what, it's better than Fortran.


00:02:47.580 --> 00:02:48.580
- That is very true.


00:02:48.580 --> 00:02:50.920
We occasionally have to use Fortran at work


00:02:50.920 --> 00:02:53.760
with some of our FEA programs,


00:02:53.760 --> 00:02:55.840
and finite element analysis programs with Abacus,


00:02:55.840 --> 00:02:58.040
you're able to extend it with Fortran.


00:02:58.040 --> 00:03:00.640
So occasionally we have to look at a little bit of Fortran


00:03:00.640 --> 00:03:01.160
to do that.


00:03:01.160 --> 00:03:02.880
And it's ugly.


00:03:02.880 --> 00:03:04.040
Yeah, for sure.


00:03:04.040 --> 00:03:06.800
Preston, how about you?


00:03:06.800 --> 00:03:11.040
Mine was mostly junior year in college, MATLAB course.


00:03:11.040 --> 00:03:13.400
Incidentally enough, that's why it's not a real programming


00:03:13.400 --> 00:03:14.920
language, right?


00:03:14.920 --> 00:03:19.320
So I moved from that directly into Python


00:03:19.320 --> 00:03:20.760
about when I started my first job


00:03:20.760 --> 00:03:23.960
And just kind of started working with C++ after that.


00:03:23.960 --> 00:03:30.240
And then kind of tailed into a little bit of C, not much.


00:03:30.240 --> 00:03:30.920
Right on.


00:03:30.920 --> 00:03:32.320
What are you all doing now?


00:03:32.320 --> 00:03:35.400
Sounds like still engineering work.


00:03:35.400 --> 00:03:36.840
Yeah, both doing engineering.


00:03:36.840 --> 00:03:38.340
So I'm doing mechanical engineering.


00:03:38.340 --> 00:03:40.960
I do design on threaded connectors,


00:03:40.960 --> 00:03:44.200
foil and gas industry.


00:03:44.200 --> 00:03:51.280
mainly designing the seals and threads


00:03:51.280 --> 00:03:53.780
that hold production tubing together down hole that actually


00:03:53.780 --> 00:03:55.520
sends the oil up through the well.


00:03:55.520 --> 00:03:56.200
Wow.


00:03:56.200 --> 00:03:58.800
So you must be talking about a lot of pressure,


00:03:58.800 --> 00:04:02.400
talking about materials that would


00:04:02.400 --> 00:04:06.480
like to destroy rubber and other things as well, possibly.


00:04:06.480 --> 00:04:09.680
Yeah, so I guess that tails into coding.


00:04:09.680 --> 00:04:13.720
Mainly, I use most of Python to just extend out,


00:04:13.720 --> 00:04:17.480
like we were talking about for scripting and stuff like that.


00:04:17.480 --> 00:04:19.080
Yeah, right on.


00:04:19.080 --> 00:04:20.800
Jonathan, how about you?


00:04:20.800 --> 00:04:23.960
So I started out in the same position


00:04:23.960 --> 00:04:28.200
and slowly moved into the software side of things.


00:04:28.200 --> 00:04:30.200
A lot of that's working with Preston


00:04:30.200 --> 00:04:32.000
and some of the other mechanical engineers


00:04:32.000 --> 00:04:36.680
on extending some of those applications like Abacus


00:04:36.680 --> 00:04:39.960
and that's using Python or extending AutoCAD


00:04:39.960 --> 00:04:42.320
and C++.


00:04:42.320 --> 00:04:44.360
So there's that side of the day-to-day work.


00:04:44.360 --> 00:04:45.920
And then the other side is we actually


00:04:45.920 --> 00:04:50.080
have some internal software that we work on,


00:04:50.080 --> 00:04:54.640
one for inspecting connections without contact,


00:04:54.640 --> 00:04:58.240
so using lasers and robot arms and all that stuff


00:04:58.240 --> 00:05:03.680
to basically just take measurements


00:05:03.680 --> 00:05:05.640
instead of having to go out and manually do it.


00:05:05.640 --> 00:05:06.280
This is great.


00:05:06.280 --> 00:05:08.080
Be on an assembly line.


00:05:08.080 --> 00:05:12.720
And most of that's in C++ and C.


00:05:12.720 --> 00:05:16.280
We do use our library, DeerPiGUI,


00:05:16.280 --> 00:05:18.880
for a lot of the prototyping and some


00:05:18.880 --> 00:05:20.800
of the tooling for the project.


00:05:20.800 --> 00:05:21.300
But--


00:05:21.300 --> 00:05:21.880
>> That's cool.


00:05:21.880 --> 00:05:24.800
>> --more projects in C and C++.


00:05:24.800 --> 00:05:25.760
>> Sure.


00:05:25.760 --> 00:05:28.320
I don't think I've really covered mechanical engineering


00:05:28.320 --> 00:05:31.720
on Talk Python properly.


00:05:31.720 --> 00:05:34.960
What's the story with software automation and that kind


00:05:34.960 --> 00:05:35.460
of stuff?


00:05:35.460 --> 00:05:38.020
that mostly using programs like,


00:05:38.020 --> 00:05:39.860
sounds like this Abacus one,


00:05:39.860 --> 00:05:42.220
versus writing your own software


00:05:42.220 --> 00:05:43.980
and doing your own automation?


00:05:43.980 --> 00:05:44.820
- Right.


00:05:44.820 --> 00:05:49.420
A large part of mechanical engineering is,


00:05:49.420 --> 00:05:52.860
at least in our field, is stress analysis


00:05:52.860 --> 00:05:56.060
and computational fluid dynamics,


00:05:56.060 --> 00:05:57.760
fluid flow type problems.


00:05:57.760 --> 00:06:01.260
And as far as software goes,


00:06:01.260 --> 00:06:03.020
it's usually in relation to that,


00:06:03.020 --> 00:06:05.540
like Abacus is, as an example,


00:06:05.540 --> 00:06:08.500
a software package for stress analysis.


00:06:08.500 --> 00:06:11.180
And then there's other ones, OpenFoam.


00:06:11.180 --> 00:06:12.020
- Yeah, OpenFoam.


00:06:12.020 --> 00:06:14.820
You wrote some solvers at your first job for that.


00:06:14.820 --> 00:06:17.100
- Yeah, that's correct.


00:06:17.100 --> 00:06:20.540
We took some electives while we were in college


00:06:20.540 --> 00:06:23.180
and some of those were for writing these solvers.


00:06:23.180 --> 00:06:25.220
And most of those you could write whatever you want.


00:06:25.220 --> 00:06:26.860
Those professors didn't actually care.


00:06:26.860 --> 00:06:28.300
And a lot of times I wrote it in Python


00:06:28.300 --> 00:06:31.220
or most of the time it was Python, I would say.


00:06:31.220 --> 00:06:32.060
- Yeah, yeah.


00:06:32.060 --> 00:06:35.420
What's the story for packages, you know,


00:06:35.420 --> 00:06:38.260
PyPI type of things in your space?


00:06:38.260 --> 00:06:40.220
- As far as what we used or what we used?


00:06:40.220 --> 00:06:42.140
- Yeah, is there a lot of stuff out there?


00:06:42.140 --> 00:06:46.860
I know, for example, astronomy is filled with libraries


00:06:46.860 --> 00:06:50.220
like Astropy and whatnot that people could just grab and use.


00:06:50.220 --> 00:06:55.260
- For mechanical engineering, I don't know if there's,


00:06:55.260 --> 00:06:58.420
I mean, NumPy or NumPy, you know,


00:07:00.060 --> 00:07:02.060
But as far as specific to mechanical engineering,


00:07:02.060 --> 00:07:04.300
I really don't think there's any.


00:07:04.300 --> 00:07:05.620
There may be a few FEA solvers,


00:07:05.620 --> 00:07:06.820
but I don't think they're maintained


00:07:06.820 --> 00:07:09.220
or well documented for sure.


00:07:09.220 --> 00:07:10.060
- Right.


00:07:10.060 --> 00:07:11.980
- Would you say any?


00:07:11.980 --> 00:07:16.100
- We typically found that a lot of engineers


00:07:16.100 --> 00:07:17.940
end up staying in the MATLAB realm


00:07:17.940 --> 00:07:22.480
and not really venturing into any more hardcore languages.


00:07:22.480 --> 00:07:23.580
So they end up using all,


00:07:23.580 --> 00:07:28.580
because a lot of them want symbolic math,


00:07:29.960 --> 00:07:34.960
like integration and ODE solvers and all of that.


00:07:34.960 --> 00:07:36.520
It's all right there in MATLAB.


00:07:36.520 --> 00:07:38.280
And then the companies typically pay for it.


00:07:38.280 --> 00:07:40.080
So you're kind of in that realm.


00:07:40.080 --> 00:07:42.560
- Right, and once some group gets embedded in there,


00:07:42.560 --> 00:07:44.200
it's just gonna stay in that space


00:07:44.200 --> 00:07:47.040
unless somebody takes some effort to get it out.


00:07:47.040 --> 00:07:48.040
All right, awesome.


00:07:48.040 --> 00:07:49.480
Thanks for that background.


00:07:49.480 --> 00:07:51.720
Although we're not here exactly to talk about


00:07:51.720 --> 00:07:53.240
deep dive in mechanical engineering,


00:07:53.240 --> 00:07:55.400
it is cool to get a look.


00:07:55.400 --> 00:07:59.520
So let's talk about this.


00:07:59.520 --> 00:08:02.320
Let's talk about your project, DeerPi GUI.


00:08:02.320 --> 00:08:07.320
So when I think of the GUI,


00:08:07.320 --> 00:08:10.960
graphical user interface space in Python,


00:08:10.960 --> 00:08:15.960
well, there's TK Enter, there's PyQt,


00:08:15.960 --> 00:08:19.080
there's a few other things,


00:08:19.080 --> 00:08:23.160
but they all have some kind of oddity about them.


00:08:23.160 --> 00:08:25.400
There's not like one framework that people just like,


00:08:25.400 --> 00:08:26.740
yeah, we're just gonna use that thing.


00:08:26.740 --> 00:08:30.100
It's not like Swift and Objective-C,


00:08:30.100 --> 00:08:34.380
Cocoa controls would be in say a iOS app or something,


00:08:34.380 --> 00:08:37.020
where it's really clear, just generally use that one.


00:08:37.020 --> 00:08:41.980
So I guess, where did you guys get started


00:08:41.980 --> 00:08:43.420
working on GUIs in Python?


00:08:43.420 --> 00:08:47.460
And then what was the goal with the DeerPi GUI?


00:08:47.460 --> 00:08:48.440
Like where does it stand out?


00:08:48.440 --> 00:08:50.620
Where does it fit in this space?


00:08:50.620 --> 00:08:55.780
- All right, so I got started in UIs


00:08:55.780 --> 00:08:58.500
working at one of my internships while I was in school.


00:08:58.500 --> 00:09:01.740
And we were using this package, which I think I already


00:09:01.740 --> 00:09:05.940
mentioned once, OpenFOAM for CFD.


00:09:05.940 --> 00:09:10.300
And it didn't have a front-end interface at all.


00:09:10.300 --> 00:09:13.420
It was a C++ solver that just--


00:09:13.420 --> 00:09:15.940
pretty sure just output text files in the end.


00:09:15.940 --> 00:09:16.640
I don't remember.


00:09:16.640 --> 00:09:19.020
It's been about six, seven years.


00:09:19.020 --> 00:09:21.780
So started to use--


00:09:21.780 --> 00:09:24.420
wanted to build a UI so that the other engineers could use it.


00:09:24.420 --> 00:09:26.940
And at that time, I was just getting into it.


00:09:26.940 --> 00:09:31.780
So I used Tkinter because it comes with Python.


00:09:31.780 --> 00:09:37.100
And then also used VTK, if I remember correctly.


00:09:37.100 --> 00:09:41.860
And I would say that's the first experience I had with it.


00:09:41.860 --> 00:09:44.380
And then our senior design project--


00:09:44.380 --> 00:09:47.900
I'd be impressed if we're also on the same team for that--


00:09:47.900 --> 00:09:52.180
was to build an arc welding 3D printer.


00:09:52.180 --> 00:09:53.500
OK.


00:09:53.500 --> 00:09:57.580
So it actually created things by doing arc welding?


00:09:57.580 --> 00:09:58.080
>> Right.


00:09:58.080 --> 00:10:02.260
>> Rather than printing some other sort of material out of it?


00:10:02.260 --> 00:10:02.760
>> Correct.


00:10:02.760 --> 00:10:05.820
Yeah, it was a MIG welder.


00:10:05.820 --> 00:10:07.280
I was on the software side of that.


00:10:07.280 --> 00:10:09.020
Preston was on a lot more of the physical side.


00:10:09.020 --> 00:10:10.860
>> We should put him in the software for now.


00:10:10.860 --> 00:10:15.220
>> So anyway, that was the goal of the project.


00:10:15.220 --> 00:10:19.260
And we used some open source slicing software.


00:10:19.260 --> 00:10:21.740
I don't remember-- it was like Slic3D or--


00:10:21.740 --> 00:10:23.100
>> But it's 3 for the E.


00:10:23.100 --> 00:10:26.100
Yeah, Slicer, and it had three for the E.


00:10:26.100 --> 00:10:29.520
And we basically modified that and ran it in a headless mode


00:10:29.520 --> 00:10:34.160
and built a UI on top of it using the Kinter.


00:10:34.160 --> 00:10:39.660
And I want to say we used Pygame to be able to access OpenGL.


00:10:39.660 --> 00:10:41.860
And at the time, we were using Legacy OpenGL.


00:10:41.860 --> 00:10:46.020
That was our first experience with, I guess,


00:10:46.020 --> 00:10:47.460
graphics APIs.


00:10:47.460 --> 00:10:47.960
>>Yeah.


00:10:47.960 --> 00:10:48.660
>>Which--


00:10:48.660 --> 00:10:51.300
>>Yeah, OpenGL is pretty neat.


00:10:51.300 --> 00:10:54.180
it was certainly good when it first came out,


00:10:54.180 --> 00:10:56.260
it was as good as anything else,


00:10:56.260 --> 00:10:59.260
but I feel like it hasn't been getting the same amount


00:10:59.260 --> 00:11:01.820
of growth and adoption,


00:11:01.820 --> 00:11:03.400
maybe some of the other frameworks,


00:11:03.400 --> 00:11:05.880
DirectX and Metal and so on.


00:11:05.880 --> 00:11:09.580
- Right, and a lot of that,


00:11:09.580 --> 00:11:10.420
we've been using it,


00:11:10.420 --> 00:11:15.180
DeerPi GUI uses DirectX, Metal and OpenGL at the moment.


00:11:15.180 --> 00:11:18.500
And so we've been using a lot of them


00:11:18.500 --> 00:11:20.900
over the last few years.


00:11:20.900 --> 00:11:24.820
And the biggest reason for that is just that


00:11:24.820 --> 00:11:28.620
the hardware's changed since those APIs were created


00:11:28.620 --> 00:11:33.060
and they no longer directly match the hardware.


00:11:33.060 --> 00:11:33.900
- Right.


00:11:33.900 --> 00:11:36.260
- Yeah.


00:11:36.260 --> 00:11:43.340
- Yeah, so DeerPi GUI came out of trying to basically


00:11:43.340 --> 00:11:48.220
build something better than direct OpenGL access.


00:11:48.220 --> 00:11:49.060
What'd you say?


00:11:50.060 --> 00:11:52.060
or direct framework access?


00:11:52.060 --> 00:11:54.060
Not quite.


00:11:54.060 --> 00:11:56.060
It came more out of a...


00:11:56.060 --> 00:11:58.060
So,


00:11:58.060 --> 00:12:00.060
I guess going back to answering where


00:12:00.060 --> 00:12:02.060
DPG itself came from.


00:12:02.060 --> 00:12:04.060
We had a previous project that we worked on,


00:12:04.060 --> 00:12:06.060
a commercial project called Engineer Sandbox,


00:12:06.060 --> 00:12:08.060
that was...


00:12:08.060 --> 00:12:12.060
The program had


00:12:12.060 --> 00:12:14.060
an embedded Python interpreter in it,


00:12:14.060 --> 00:12:16.060
and you basically created


00:12:16.060 --> 00:12:18.060
little mechanical engineering


00:12:18.060 --> 00:12:24.260
apps and we could create one in, I don't know, an hour or two.


00:12:24.260 --> 00:12:26.660
And it was just this collection of apps.


00:12:26.660 --> 00:12:32.600
And over time, it started to get a little annoying to have to recompile it, essentially


00:12:32.600 --> 00:12:34.100
before we added Python.


00:12:34.100 --> 00:12:38.900
We added Python because we were getting tired of recompiling it every time we wanted to


00:12:38.900 --> 00:12:42.020
add an app or modify something and have to redeploy.


00:12:42.020 --> 00:12:48.540
So from there we embedded Python and it was very limited.


00:12:48.540 --> 00:12:51.340
You were able to create a few small apps.


00:12:51.340 --> 00:12:55.380
It really wasn't a full GUI library.


00:12:55.380 --> 00:12:59.540
And what happened is we were trying to sell it.


00:12:59.540 --> 00:13:01.140
It didn't really work out.


00:13:01.140 --> 00:13:02.900
We could never really catch traction.


00:13:02.900 --> 00:13:08.020
We had some users and customers, but most people weren't really interested in it.


00:13:08.020 --> 00:13:10.340
And developers aren't really interested in paying


00:13:10.340 --> 00:13:13.940
for libraries or any SDK.


00:13:13.940 --> 00:13:16.700
Most of them, they just want it to be free.


00:13:16.700 --> 00:13:19.300
So that just kind of fell out.


00:13:19.300 --> 00:13:20.820
And we gave up on that after about--


00:13:20.820 --> 00:13:21.940
>>Luis: That's a tough place to be, right?


00:13:21.940 --> 00:13:24.300
You want to put a lot of energy into building tools


00:13:24.300 --> 00:13:26.780
and making stuff for people.


00:13:26.780 --> 00:13:30.820
But how do you put enough time into it, right?


00:13:30.820 --> 00:13:34.580
If people just want it to be free, I mean--


00:13:34.580 --> 00:13:36.900
- Maybe what we gotta do is,


00:13:36.900 --> 00:13:39.620
maybe the world is the VS Code model


00:13:39.620 --> 00:13:40.980
where there's large companies


00:13:40.980 --> 00:13:43.060
that have other motivations for creating it


00:13:43.060 --> 00:13:47.300
rather than directly funding through that.


00:13:47.300 --> 00:13:50.380
But that's a deeper conversation.


00:13:50.380 --> 00:13:54.740
- Selling to developers in the easy is the key point there.


00:13:54.740 --> 00:13:56.180
- Yeah, for sure.


00:13:56.180 --> 00:13:57.980
- We did keep it in-house and we continue,


00:13:57.980 --> 00:14:00.980
we still have apps written in it at our day job.


00:14:00.980 --> 00:14:03.860
And we ended up revisiting it


00:14:03.860 --> 00:14:05.240
because it didn't do everything we wanted to do.


00:14:05.240 --> 00:14:07.580
And we said, well, this time let's target developers


00:14:07.580 --> 00:14:08.720
from the beginning.


00:14:08.720 --> 00:14:10.300
So it's not going to be very limited.


00:14:10.300 --> 00:14:13.100
It's going to be-- you should be able to do most things you


00:14:13.100 --> 00:14:15.660
can do in any other UI library.


00:14:15.660 --> 00:14:17.660
And on top of that, make it free.


00:14:17.660 --> 00:14:21.620
And that's kind of where your PyGUI came from.


00:14:21.620 --> 00:14:27.060
And between those stages, we had came across the library


00:14:27.060 --> 00:14:30.380
I'mGUI or mGUI, which I'm not sure if you're familiar with.


00:14:30.380 --> 00:14:31.100
But--


00:14:31.100 --> 00:14:32.780
Yeah, I'm not familiar with it.


00:14:32.780 --> 00:14:34.020
What is this?


00:14:34.020 --> 00:14:36.180
- It is a-- - IMGUI.


00:14:36.180 --> 00:14:41.180
- It is an extremely popular immediate mode


00:14:41.180 --> 00:14:44.340
graphical user interface for real-time applications.


00:14:44.340 --> 00:14:47.460
It's--


00:14:47.460 --> 00:14:48.300
- C++.


00:14:48.300 --> 00:14:49.140
- Usually used--


00:14:49.140 --> 00:14:49.980
- C++.


00:14:49.980 --> 00:14:50.980
- Yes, it's C++.


00:14:50.980 --> 00:14:52.380
- Yeah, yeah, yeah.


00:14:52.380 --> 00:14:53.940
- But it's kind of a weird,


00:14:53.940 --> 00:14:55.660
I mean, it's an immediate mode interface


00:14:55.660 --> 00:14:57.180
and there's not many,


00:14:57.180 --> 00:15:00.100
I would say there is no Python user interface


00:15:00.100 --> 00:15:01.020
that's like that.


00:15:01.020 --> 00:15:06.020
- Right.


00:15:06.020 --> 00:15:09.020
So maybe we should talk about the different modes real quick


00:15:09.020 --> 00:15:13.020
since you bring it up is immediate mode versus retained mode.


00:15:13.020 --> 00:15:17.020
What's the, what are those two worlds like?


00:15:17.020 --> 00:15:19.020
What does that mean?


00:15:19.020 --> 00:15:21.020
- Well, I take this one.


00:15:21.020 --> 00:15:24.020
So I don't want the internet to jump on me here


00:15:24.020 --> 00:15:29.020
because there's a lot of, a little bit of argument there.


00:15:29.020 --> 00:15:32.900
a few key points, I think, that really make it stand out.


00:15:32.900 --> 00:15:38.420
One of those is that the state is not retained.


00:15:38.420 --> 00:15:45.060
So if you have a slider that controls a float,


00:15:45.060 --> 00:15:48.740
you don't have to basically have a float stored on your side


00:15:48.740 --> 00:15:51.740
and a float stored in the UI, and you're constantly


00:15:51.740 --> 00:15:54.420
having to deal with keeping them up to date and things


00:15:54.420 --> 00:15:54.920
like that.


00:15:54.920 --> 00:15:59.800
Instead, the library itself doesn't store that at all.


00:15:59.800 --> 00:16:01.960
Now, the way it's implemented is a little different.


00:16:01.960 --> 00:16:03.620
But I'm talking about from the user side


00:16:03.620 --> 00:16:05.640
of using an immediate mode library.


00:16:05.640 --> 00:16:08.960
It doesn't retain any state.


00:16:08.960 --> 00:16:13.000
The other big thing is that, at least with--


00:16:13.000 --> 00:16:17.000
especially with onGUI, is the UI items and widgets


00:16:17.000 --> 00:16:20.240
are submitted every frame, so 60 times a second.


00:16:20.240 --> 00:16:25.520
And that gives you a credible amount of dynamicism,


00:16:25.520 --> 00:16:28.400
I guess you'd call that, to be able to do a lot of things.


00:16:28.400 --> 00:16:31.280
And you can completely redo the UI on a per frame basis.


00:16:31.280 --> 00:16:38.880
>> Yeah, as opposed to something where maybe you say a text box


00:16:38.880 --> 00:16:41.120
goes here and a button goes there,


00:16:41.120 --> 00:16:42.680
and then set the text to the button.


00:16:42.680 --> 00:16:44.800
And then the button knows what its text is.


00:16:44.800 --> 00:16:47.760
This is almost like a game loop type thing,


00:16:47.760 --> 00:16:51.680
where each time, whatever the frame rate is,


00:16:51.680 --> 00:16:55.200
50, 60, 200 frames a second, it's like, draw the UI,


00:16:55.200 --> 00:16:57.480
draw the UI, draw the UI, right?


00:16:57.480 --> 00:16:59.140
- Yep, and that's-- - It's really interesting


00:16:59.140 --> 00:17:01.960
that that kind of 60 frames a second can lead into


00:17:01.960 --> 00:17:04.040
what we just put in a few weeks ago,


00:17:04.040 --> 00:17:09.040
talking about not redrawing the GUI every 60, every frame.


00:17:09.040 --> 00:17:11.280
- Right, that's a good point.


00:17:11.280 --> 00:17:14.440
One of the issues we had, especially early on


00:17:14.440 --> 00:17:16.680
with some users complaining is, well,


00:17:16.680 --> 00:17:19.080
do you need to update everything every frame,


00:17:19.080 --> 00:17:20.680
60 times a second.


00:17:20.680 --> 00:17:23.200
So we did recently add in 1.1 the ability


00:17:23.200 --> 00:17:28.640
to basically only update if there is some user input,


00:17:28.640 --> 00:17:31.400
whether that's moving the mouse, resizing the window,


00:17:31.400 --> 00:17:34.360
things like that, because a lot of people, they complain.


00:17:34.360 --> 00:17:37.120
>> Well, it helps a lot to be more energy conscious


00:17:37.120 --> 00:17:39.560
with having your GUI run all the time.


00:17:39.560 --> 00:17:42.280
>> Right, which you might care about, say,


00:17:42.280 --> 00:17:44.320
on a laptop or a tablet,


00:17:44.320 --> 00:17:47.320
but less so if you're plugged into the wall.


00:17:47.320 --> 00:17:48.200
- Correct.


00:17:48.200 --> 00:17:49.560
- Yeah, interesting.


00:17:49.560 --> 00:17:52.200
Yeah, and even some of the new,


00:17:52.200 --> 00:17:54.840
what are they, ProRes displays


00:17:54.840 --> 00:17:56.280
for like the new MacBooks and stuff.


00:17:56.280 --> 00:17:59.080
Like the entire display will slow down


00:17:59.080 --> 00:18:00.920
if stuff is not happening.


00:18:00.920 --> 00:18:03.000
And I wonder if maybe,


00:18:03.000 --> 00:18:07.440
if you had a GUI app that was running,


00:18:07.440 --> 00:18:09.360
refreshing the screen a lot,


00:18:09.360 --> 00:18:11.120
maybe it would prevent it from


00:18:11.120 --> 00:18:13.400
actually going into a slower mode, you know?


00:18:14.240 --> 00:18:16.760
- Yeah, something to look into,


00:18:16.760 --> 00:18:18.240
how the variable refresh rate plays


00:18:18.240 --> 00:18:20.520
into the software actually rendering.


00:18:20.520 --> 00:18:21.480
- Yeah, yeah, yeah.


00:18:21.480 --> 00:18:23.160
I don't really work at that level,


00:18:23.160 --> 00:18:24.240
so I don't really know for sure,


00:18:24.240 --> 00:18:27.760
but it's kind of all in the same space a little bit, right?


00:18:27.760 --> 00:18:31.240
Cool, okay, so it looks to me like


00:18:31.240 --> 00:18:33.080
that some of the, there's some similarities


00:18:33.080 --> 00:18:38.000
from the IAMGUI in terms of the UI look and feel,


00:18:38.000 --> 00:18:40.560
but then you've got the retained mode


00:18:40.560 --> 00:18:42.840
versus immediate mode and things like that.


00:18:42.840 --> 00:18:44.960
What's the relationship between these?


00:18:44.960 --> 00:18:49.960
>> So, I'm GUI itself just outputs,


00:18:49.960 --> 00:18:51.080
you can read as read me,


00:18:51.080 --> 00:18:53.400
but outputs an optimized vertex buffer.


00:18:53.400 --> 00:18:55.520
It sends basically the coordinates


00:18:55.520 --> 00:18:57.680
and everything needed to draw the UI,


00:18:57.680 --> 00:18:59.080
but it is up to you to take that


00:18:59.080 --> 00:19:02.140
and actually do something with it and render it.


00:19:02.140 --> 00:19:08.960
So, we use I'm GUI to basically create those vertex buffers.


00:19:08.960 --> 00:19:12.440
As far as the retain mode stuff,


00:19:12.440 --> 00:19:16.600
Originally, we were kind of doing more of a one-to-one wrapping with that library.


00:19:16.600 --> 00:19:22.280
And we started to hit some performance issues with Python itself, just because,


00:19:22.280 --> 00:19:27.560
I mean, 60 times a second, if you're having to do a lot of conversions between, you know,


00:19:27.560 --> 00:19:34.120
maybe the Python types and the underlying C types, you know, that can slow things down.


00:19:34.120 --> 00:19:38.120
Also, just the GIL gets in the way with a lot of different things.


00:19:39.560 --> 00:19:44.440
So what we did with the retain mode is we basically just kind


00:19:44.440 --> 00:19:47.680
of created a barrier between that where we do go


00:19:47.680 --> 00:19:50.120
against the immediate mode style thing and we have --


00:19:50.120 --> 00:19:54.120
we do keep up with things like the underlying values,


00:19:54.120 --> 00:19:56.960
just the floats, the, you know, the ints,


00:19:56.960 --> 00:19:58.280
the strings, whatever it is.


00:19:58.280 --> 00:20:02.160
So it kind of goes back to a more retain mode,


00:20:02.160 --> 00:20:03.960
which is what every other library is that, you know,


00:20:03.960 --> 00:20:07.120
most Python users would be used to.


00:20:07.120 --> 00:20:09.320
The float actually stores a-- or sorry,


00:20:09.320 --> 00:20:11.440
an input text has its underlying string,


00:20:11.440 --> 00:20:15.600
and you can get that value, set that value.


00:20:15.600 --> 00:20:20.200
>>Yeah, a lot of UI code, you don't even


00:20:20.200 --> 00:20:23.480
need to have necessarily some variable that


00:20:23.480 --> 00:20:24.360
holds the thing, right?


00:20:24.360 --> 00:20:25.800
You might just put it in the button,


00:20:25.800 --> 00:20:28.260
and if you need it back, you could get it from the button,


00:20:28.260 --> 00:20:29.560
potentially, right?


00:20:29.560 --> 00:20:32.040
>>And that's how it works.


00:20:32.040 --> 00:20:35.200
I guess one of the only other things that's kind of neat


00:20:35.200 --> 00:20:38.840
is underneath, it is just a raw--


00:20:38.840 --> 00:20:40.800
I'm pretty sure probably using Smart Pointer.


00:20:40.800 --> 00:20:42.920
And you can actually link a lot of these widgets


00:20:42.920 --> 00:20:45.960
together to where they're truly controlling the same value.


00:20:45.960 --> 00:20:49.960
And you can get some pretty cool effects with that


00:20:49.960 --> 00:20:52.320
to where directly moving--


00:20:52.320 --> 00:20:54.600
this slider is updating the plot.


00:20:54.600 --> 00:20:56.400
And there's not some update code that's


00:20:56.400 --> 00:20:59.100
having to happen or any callbacks.


00:20:59.100 --> 00:21:01.160
It's just that they're truly the same value.


00:21:01.160 --> 00:21:03.040
And because we're updating 60 times a second,


00:21:03.040 --> 00:21:06.220
you're able to see those changes live,


00:21:06.220 --> 00:21:07.440
which is pretty neat.


00:21:07.440 --> 00:21:09.080
And you can create some pretty cool stuff with that.


00:21:09.080 --> 00:21:10.360
- Yeah, that's fantastic.


00:21:10.360 --> 00:21:13.880
Before we jump into some of the details,


00:21:13.880 --> 00:21:16.120
if you visit the GitHub page,


00:21:16.120 --> 00:21:18.080
which of course I'll link to,


00:21:18.080 --> 00:21:21.440
let's maybe just talk through some of the features, I guess.


00:21:21.440 --> 00:21:22.960
I was gonna go to the gallery,


00:21:22.960 --> 00:21:25.420
but maybe the features is a better place to start.


00:21:25.420 --> 00:21:29.360
You guys have this engineering background.


00:21:29.360 --> 00:21:32.760
It feels like a lot of what this creates


00:21:32.760 --> 00:21:34.600
and allows us to build real easily,


00:21:34.600 --> 00:21:39.600
has this engineering sort of visualizing aspect to it.


00:21:39.600 --> 00:21:40.960
Right?


00:21:40.960 --> 00:21:41.800
- Right.


00:21:41.800 --> 00:21:42.640
- Yeah, yeah.


00:21:42.640 --> 00:21:44.600
So maybe talk us through some of the features


00:21:44.600 --> 00:21:45.440
and things you can do.


00:21:45.440 --> 00:21:47.840
So for example, one of the things you have,


00:21:47.840 --> 00:21:51.560
you can see right at the top of the feature section


00:21:51.560 --> 00:21:54.680
is the IAM plot stuff,


00:21:54.680 --> 00:21:57.840
which looks like really interactive and dynamic,


00:21:57.840 --> 00:22:00.800
all plots and graphs and pie charts and so on.


00:22:00.800 --> 00:22:01.640
- Right.


00:22:01.640 --> 00:22:10.680
>> It's another immediate mode interface that a guy that wrote it, Evan Peasant, I'm not


00:22:10.680 --> 00:22:13.720
sure how to pronounce his last name, who also happens to be located here in Houston, wrote


00:22:13.720 --> 00:22:18.880
it on top of AMGUI and tried to model that immediate mode interface.


00:22:18.880 --> 00:22:24.040
So again, you get all the same dynamic features that you get with AMGUI itself.


00:22:24.040 --> 00:22:29.720
And that's why you can see on here a lot of the, just how crazy dynamic it looks, right?


00:22:29.720 --> 00:22:34.260
the live querying and everything you see there.


00:22:34.260 --> 00:22:36.400
And obviously, we, again, built on top of it


00:22:36.400 --> 00:22:39.320
because we have to go from that immediate mode to retain mode


00:22:39.320 --> 00:22:41.680
style.


00:22:41.680 --> 00:22:45.280
And I mean, you have multiple axes.


00:22:45.280 --> 00:22:51.880
You have drag and drop support, custom drag and drop support.


00:22:51.880 --> 00:22:53.800
There's a lot of series you don't see there.


00:22:53.800 --> 00:22:59.520
Candlesticks, shaded series, stem plots.


00:22:59.520 --> 00:23:04.280
>> What looks really good is this one down here that has


00:23:04.280 --> 00:23:09.960
this full zoomed out graph and then a graph below it,


00:23:09.960 --> 00:23:12.300
that as you pan around and zoom in,


00:23:12.300 --> 00:23:15.580
you can actually, it's like a high level and then


00:23:15.580 --> 00:23:18.380
a low level or zoomed in detailed view,


00:23:18.380 --> 00:23:20.040
what you're exploring there.


00:23:20.040 --> 00:23:23.160
>> Yeah. That's pretty cool feature.


00:23:23.160 --> 00:23:24.860
We actually have that in the demo as well.


00:23:24.860 --> 00:23:26.960
That's actually not technically built in.


00:23:26.960 --> 00:23:28.640
>> Well, yeah. That's a query region,


00:23:28.640 --> 00:23:32.520
So you have to set up another plot with the same data.


00:23:32.520 --> 00:23:33.360
- Yeah, cool.


00:23:33.360 --> 00:23:37.480
Also looks like they have animations and stuff.


00:23:37.480 --> 00:23:39.800
The one below it, sort of just cruising by


00:23:39.800 --> 00:23:41.400
without any interaction.


00:23:41.400 --> 00:23:43.960
So are you able to just sort of feed it live data


00:23:43.960 --> 00:23:45.320
and it just keeps refreshing,


00:23:45.320 --> 00:23:47.480
I guess 60 frames a second or something?


00:23:47.480 --> 00:23:49.440
- Yeah, I mean, that's exactly how it's working


00:23:49.440 --> 00:23:52.920
because it's again, already updating 60 times a second.


00:23:52.920 --> 00:23:55.000
All you're doing is changing the data


00:23:55.000 --> 00:23:58.960
And just by default, you basically get an animation.


00:23:58.960 --> 00:23:59.520
>>Right, right.


00:23:59.520 --> 00:24:02.200
If the data changes, it's going to re-render it no matter what.


00:24:02.200 --> 00:24:04.640
And so then it gets a different picture, right?


00:24:04.640 --> 00:24:08.560
>>It's worth noting that it's only 60 frames a second.


00:24:08.560 --> 00:24:11.120
If you use VSync with your screen,


00:24:11.120 --> 00:24:13.480
it actually runs as fast as your screen can run.


00:24:13.480 --> 00:24:17.480
So 144 to whatever hertz your monitor is on.


00:24:17.480 --> 00:24:18.040
>>Interesting.


00:24:18.040 --> 00:24:20.160
>>Depends on your GPU and everything else.


00:24:20.160 --> 00:24:20.660
>>Yeah.


00:24:20.660 --> 00:24:23.000
>>You have full control of the render loop.


00:24:23.000 --> 00:24:25.720
So you can actually slow it to whatever exact frame resolution


00:24:25.720 --> 00:24:26.220
you want.


00:24:26.220 --> 00:24:27.720
You could 30, whatever you want.


00:24:27.720 --> 00:24:28.340
>>Right, right.


00:24:28.340 --> 00:24:30.480
You probably can't exceed your monitor,


00:24:30.480 --> 00:24:33.600
but you could slow it down or do something, right?


00:24:33.600 --> 00:24:35.240
If you need to--


00:24:35.240 --> 00:24:35.920
>>Well, you can.


00:24:35.920 --> 00:24:37.320
It just won't--


00:24:37.320 --> 00:24:39.900
>>I mean, the effect of people seeing it,


00:24:39.900 --> 00:24:41.320
they won't see it in your eyes.


00:24:41.320 --> 00:24:42.040
>>Right, yeah.


00:24:42.040 --> 00:24:42.720
>>And that, yeah.


00:24:42.720 --> 00:24:43.520
That's really cool.


00:24:43.520 --> 00:24:47.360
Cross-platform.


00:24:47.360 --> 00:24:48.520
>>There are some cases--


00:24:48.520 --> 00:24:50.760
yeah, it is cross-platform.


00:24:50.760 --> 00:24:51.840
But I was going back there.


00:24:51.840 --> 00:24:54.960
There are some cases where we will turn Vsync off to just


00:24:54.960 --> 00:24:57.720
test how fast certain things are happening.


00:24:57.720 --> 00:25:00.480
>> Right, because you want to know what's the performance


00:25:00.480 --> 00:25:04.560
upper limit of this, regardless of the screen, right?


00:25:04.560 --> 00:25:06.800
>> Right, and a lot of people love to send us messages


00:25:06.800 --> 00:25:09.180
with that while they're trying to do something like update


00:25:09.180 --> 00:25:11.760
a texture or something as fast as they can,


00:25:11.760 --> 00:25:16.720
and trying to get 300 or 400 frames a second.


00:25:16.720 --> 00:25:18.960
So it's pretty neat to see that.


00:25:18.960 --> 00:25:21.680
>> Yeah, that's fantastic.


00:25:21.680 --> 00:25:25.040
So let's see, what else should I highlight in here?


00:25:25.040 --> 00:25:26.760
These are all, there's a bunch of graphs.


00:25:26.760 --> 00:25:28.860
I think people really just need to go see them,


00:25:28.860 --> 00:25:31.680
but there's nice heat map looking things.


00:25:31.680 --> 00:25:33.520
There's some statistical stuff.


00:25:33.520 --> 00:25:36.960
I mean, anything else you wanna kinda shout out on the--


00:25:36.960 --> 00:25:38.160
- Yeah, there's some candlesticks.


00:25:38.160 --> 00:25:41.880
We've seen some great interaction with some APIs


00:25:41.880 --> 00:25:44.720
through some actual cryptocurrency interfaces


00:25:44.720 --> 00:25:45.560
people have done.


00:25:45.560 --> 00:25:47.200
They've made crypto wallets, which is pretty cool.


00:25:47.200 --> 00:25:48.280
We've seen some of that.


00:25:48.280 --> 00:25:49.960
- Yeah, so we've seen probably maybe 10 of those.


00:25:49.960 --> 00:25:53.200
So it is a lot of people seem interested in that.


00:25:53.200 --> 00:25:54.180
- Interesting.


00:25:54.180 --> 00:25:57.600
Yeah, so people are using DeerPi GUI


00:25:57.600 --> 00:26:02.600
to build something like a dashboard trader application.


00:26:02.600 --> 00:26:04.600
- A lot of dashboards, yeah.


00:26:04.600 --> 00:26:05.440
- Okay.


00:26:05.440 --> 00:26:06.260
- I'm seeing a lot.


00:26:06.260 --> 00:26:07.880
- Yeah, I think that's maybe,


00:26:07.880 --> 00:26:10.520
we can pull in a comment from the audience,


00:26:10.520 --> 00:26:13.280
Mr. Hypermagnetic, hey, good to see you again.


00:26:13.280 --> 00:26:14.240
There's always been curious


00:26:14.240 --> 00:26:16.880
why not use HTML for desktop GUIs.


00:26:18.860 --> 00:26:20.640
And then also adds that these are definitely


00:26:20.640 --> 00:26:23.340
nice looking graphs and user interface, which is cool.


00:26:23.340 --> 00:26:26.740
Maybe I'll let you all take a shot


00:26:26.740 --> 00:26:28.960
at answering that question for you.


00:26:28.960 --> 00:26:29.800
And I'll--


00:26:29.800 --> 00:26:32.000
- Why not use HTML?


00:26:32.000 --> 00:26:36.800
Can you go for that one or?


00:26:36.800 --> 00:26:37.860
- I mean, if you want that, if not,


00:26:37.860 --> 00:26:39.180
I could throw something out there as well,


00:26:39.180 --> 00:26:41.100
'cause I do as well.


00:26:41.100 --> 00:26:47.760
- I mean, you could, I guess.


00:26:47.760 --> 00:26:51.800
I mean, I know that's kind of what--


00:26:51.800 --> 00:26:53.340
- We've got a ton of electron apps.


00:26:53.340 --> 00:26:54.460
- I don't know how to answer that one.


00:26:54.460 --> 00:26:58.340
- We got a ton of electron apps that fit that realm.


00:26:58.340 --> 00:26:59.760
- That's what I was gonna bring up with electron.


00:26:59.760 --> 00:27:03.880
- We got VS Code and other things, Slack and whatnot.


00:27:03.880 --> 00:27:08.200
I think there's a couple areas that you would care about.


00:27:08.200 --> 00:27:11.720
One is you probably are not gonna be getting


00:27:11.720 --> 00:27:16.320
300 frames a second refresh rate with HTML, right?


00:27:16.320 --> 00:27:18.880
There's a lot of layers in there.


00:27:18.880 --> 00:27:23.400
If you wanna take advantage of the GPUs in like deep ways,


00:27:23.400 --> 00:27:26.480
right, if you wanna push a mesh of objects in there


00:27:26.480 --> 00:27:29.200
and then have them re-rendered, right,


00:27:29.200 --> 00:27:32.200
that's not really what HTML is for.


00:27:32.200 --> 00:27:36.600
And then, yeah, I think the sort of native integration


00:27:36.600 --> 00:27:38.200
also gets tricky, right?


00:27:38.200 --> 00:27:40.160
I don't know about Jirapai GUI,


00:27:40.160 --> 00:27:42.800
but you wanna integrate with the menu bar


00:27:42.800 --> 00:27:43.700
and other stuff, right?


00:27:43.700 --> 00:27:46.000
Like it's not exact.


00:27:46.000 --> 00:27:48.160
You need the hardware access.


00:27:48.160 --> 00:27:52.760
Now, you can use WebGL, but basically, you'd


00:27:52.760 --> 00:27:56.400
be using HTML just to create that GL canvas.


00:27:56.400 --> 00:27:58.120
And then after that, it's the same thing


00:27:58.120 --> 00:28:01.120
as what we're doing now.


00:28:01.120 --> 00:28:01.960
So you could do that.


00:28:01.960 --> 00:28:05.800
I think we have some sample projects where we use that.


00:28:05.800 --> 00:28:07.600
And you can get 60 frames a second higher.


00:28:07.600 --> 00:28:10.520
But again, you're just using HTML just to get to the canvas.


00:28:10.520 --> 00:28:13.360
And then after that, the HTML's gone.


00:28:13.360 --> 00:28:14.200
- Yeah. - We're not using it


00:28:14.200 --> 00:28:15.020
for anything.


00:28:15.020 --> 00:28:19.000
- Let me see here if I can get a quick read on,


00:28:19.000 --> 00:28:21.820
say like a VS Code here, hold on.


00:28:21.820 --> 00:28:28.260
Little activity monitor doesn't update very quickly.


00:28:28.260 --> 00:28:30.840
So for example, like I just launched VS Code


00:28:30.840 --> 00:28:32.720
and it's doing nothing.


00:28:32.720 --> 00:28:34.880
And there's one, two, three, four, five, six, seven,


00:28:34.880 --> 00:28:38.820
eight, nine, 10 processes running VS Code,


00:28:38.820 --> 00:28:41.800
which quick math across those looks like something


00:28:41.800 --> 00:28:46.800
like 350 megs of RAM, which is, I don't know what


00:28:46.800 --> 00:28:49.760
Jeep I GUI would take,


00:28:49.760 --> 00:28:52.080
but I suspect it would be far lower than that.


00:28:52.080 --> 00:28:53.480
- It should be much lower.


00:28:53.480 --> 00:28:54.320
- Yeah.


00:28:54.320 --> 00:28:55.160
- And that's another thing too,


00:28:55.160 --> 00:28:57.440
by offering, you know, by having to run through the browser,


00:28:57.440 --> 00:29:00.880
I mean, there's your tech stat becomes, you know,


00:29:00.880 --> 00:29:05.200
considerably deeper when we're trying to be


00:29:05.200 --> 00:29:06.760
as light as possible.


00:29:06.760 --> 00:29:07.600
- Yeah.


00:29:07.600 --> 00:29:08.440
Yeah.


00:29:08.440 --> 00:29:09.260
If you want to do a lot of the stuff


00:29:09.260 --> 00:29:10.240
that we're seeing on the screen here,


00:29:10.240 --> 00:29:13.280
you're almost down to rendering directly on Canvas.


00:29:13.280 --> 00:29:15.160
And then at that point, there's not


00:29:15.160 --> 00:29:17.480
a huge value for the HTML side of thing,


00:29:17.480 --> 00:29:20.320
because you're just drawing pixels anyway.


00:29:20.320 --> 00:29:23.720
So to sort of wrap that up, Mr. Hypermagnetic says,


00:29:23.720 --> 00:29:25.320
right, I've seen performance issues


00:29:25.320 --> 00:29:28.200
with Electron versus more native apps.


00:29:28.200 --> 00:29:31.720
Antonio out there-- hey, Antonio, good to see you--


00:29:31.720 --> 00:29:33.280
loves these plotting features.


00:29:33.280 --> 00:29:36.480
He's also in the oil and gas industry, so very, very cool.


00:29:36.480 --> 00:29:37.520
- Great.


00:29:37.520 --> 00:29:41.680
And following up on that, John says,


00:29:41.680 --> 00:29:44.520
there's also a limitation to threading and concurrency,


00:29:44.520 --> 00:29:46.600
which you definitely have more control, right?


00:29:46.600 --> 00:29:49.440
Like multi-processing and so on.


00:29:49.440 --> 00:29:50.640
It's pretty neat.


00:29:50.640 --> 00:29:54.680
Although Python itself is not known for its massive


00:29:54.680 --> 00:29:57.920
taking advantage of multi-core stuff because of the GIL.


00:29:57.920 --> 00:30:00.160
Still, you've got a little more flexibility.


00:30:00.160 --> 00:30:03.520
Cool, it's always interesting to think about.


00:30:03.520 --> 00:30:04.880
Now, let's see, let's scroll down


00:30:04.880 --> 00:30:07.040
and look through a few more of these pictures here.


00:30:07.040 --> 00:30:11.280
So you've got this node editor.


00:30:11.280 --> 00:30:16.160
And this node sounds like a sort of core thing in this UI


00:30:16.160 --> 00:30:17.560
framework.


00:30:17.560 --> 00:30:19.080
Tell us about that.


00:30:19.080 --> 00:30:22.680
>>That's another one of those libraries


00:30:22.680 --> 00:30:26.880
that somebody had built on top of on GUI.


00:30:26.880 --> 00:30:28.280
It's usually just a single file.


00:30:28.280 --> 00:30:31.360
I mean, they're pretty light.


00:30:31.360 --> 00:30:36.080
And a lot of people made some really cool stuff with that.


00:30:36.080 --> 00:30:39.800
'cause you could put any widget that's in the UI library


00:30:39.800 --> 00:30:41.880
in these nodes and--


00:30:41.880 --> 00:30:43.600
- So let me take a shot at trying to describe


00:30:43.600 --> 00:30:45.600
what this looks like for people listening.


00:30:45.600 --> 00:30:48.360
You can check it out under node editor on the GitHub page.


00:30:48.360 --> 00:30:51.920
So you've got, it almost looks like a database diagram


00:30:51.920 --> 00:30:54.280
where you've got relationships between these nodes,


00:30:54.280 --> 00:30:57.700
but instead of just having table info,


00:30:57.700 --> 00:31:02.080
you can have things like you've got graphs,


00:31:02.080 --> 00:31:06.480
You've got XY values, you've got other little bits


00:31:06.480 --> 00:31:10.020
of computation and stuff that are visually in the nodes


00:31:10.020 --> 00:31:12.120
that are also connected together.


00:31:12.120 --> 00:31:14.000
That looks pretty cool.


00:31:14.000 --> 00:31:15.040
- Kind of like a data flow thing,


00:31:15.040 --> 00:31:17.200
which is the actual picture you're looking at


00:31:17.200 --> 00:31:21.040
is a tool we built here at work to prototype


00:31:21.040 --> 00:31:25.320
some of the systems that we were working on here.


00:31:25.320 --> 00:31:27.820
So we took a little piece of that as the snapshot.


00:31:27.820 --> 00:31:30.160
- Right on.


00:31:30.160 --> 00:31:32.240
But yeah, it's a pretty cool feature.


00:31:32.240 --> 00:31:35.240
A lot of people do a lot of cool things with it.


00:31:35.240 --> 00:31:37.640
- So it was the idea I could build a little section


00:31:37.640 --> 00:31:40.920
that will take in some, like let's say,


00:31:40.920 --> 00:31:44.120
fluid flow rate and then apply some algorithm


00:31:44.120 --> 00:31:47.340
and visualize that, but then it also has an output value


00:31:47.340 --> 00:31:51.860
that can be passed on to some other part of a simulation


00:31:51.860 --> 00:31:53.440
that's also shown up there and stuff.


00:31:53.440 --> 00:31:55.360
Is that my understanding right?


00:31:55.360 --> 00:31:56.560
- That's it.


00:31:56.560 --> 00:31:59.200
And you can redirect the inputs from one


00:31:59.200 --> 00:32:02.500
to the output of the other for whatever widget that


00:32:02.500 --> 00:32:08.200
are being connected, whether it be a slider, and end to input,


00:32:08.200 --> 00:32:12.280
or radio box, any of those.


00:32:12.280 --> 00:32:14.200
>> And it's a pretty low level.


00:32:14.200 --> 00:32:16.280
Some of this stuff can be a little bit misleading


00:32:16.280 --> 00:32:18.880
when you look at it and say, well,


00:32:18.880 --> 00:32:21.160
it looks like it should just come right out of the box.


00:32:21.160 --> 00:32:23.080
And most of these are not.


00:32:23.080 --> 00:32:25.640
For instance, this node editor that you're looking at,


00:32:25.640 --> 00:32:28.520
in general, you create these nodes.


00:32:28.520 --> 00:32:32.720
and when a user tries to grab one of the pins and link it to another one,


00:32:32.720 --> 00:32:37.880
the callback is ran and it's up to the actual user to decide whether to make that link,


00:32:37.880 --> 00:32:40.720
where it's given information about where it came from,


00:32:40.720 --> 00:32:42.200
where it's trying to connect.


00:32:42.200 --> 00:32:45.680
It's really up to the user to make something with it.


00:32:45.680 --> 00:32:48.400
It's pretty low level and you'll notice that with a lot of these,


00:32:48.400 --> 00:32:49.360
even in the plots,


00:32:49.360 --> 00:32:53.280
they're low level and it's meant for the user to wrap on top of


00:32:53.280 --> 00:32:58.400
and build more complex functionality because we want it to be as generic as possible.


00:32:58.400 --> 00:33:01.520
- Yeah, fantastic.


00:33:01.520 --> 00:33:03.980
All right, there's an example of Tetris,


00:33:03.980 --> 00:33:06.300
like who doesn't love Tetris, of course.


00:33:06.300 --> 00:33:11.100
And then what is this last one here?


00:33:11.100 --> 00:33:13.200
Several tools to help developers.


00:33:13.200 --> 00:33:17.200
- There's a lot of built-in tools.


00:33:17.200 --> 00:33:22.200
- Like, is this like tab views and list views


00:33:22.200 --> 00:33:24.460
and stuff like that, or what are we talking about?


00:33:24.460 --> 00:33:27.420
- As an example, you know, like you create,


00:33:27.420 --> 00:33:29.560
Whenever you go to create the UI, you may create a window


00:33:29.560 --> 00:33:31.940
and then add a group and then a collapsing header


00:33:31.940 --> 00:33:34.820
and then a button, and you have this parent relationship.


00:33:34.820 --> 00:33:37.000
You know, one of the tools is the item registry.


00:33:37.000 --> 00:33:40.180
And if you just type in the command, show item registry,


00:33:40.180 --> 00:33:43.740
you get this basically tree view where you can look through


00:33:43.740 --> 00:33:45.760
all the items in your UI, click on it,


00:33:45.760 --> 00:33:49.420
see information about the state of it.


00:33:49.420 --> 00:33:50.260
You know, is it visible?


00:33:50.260 --> 00:33:51.100
Is it clicked on?


00:33:51.100 --> 00:33:52.100
Is it hovered?


00:33:52.100 --> 00:33:54.060
You know, that's one of them.


00:33:54.060 --> 00:33:55.820
- Most of these use for debugging.


00:33:55.820 --> 00:33:57.320
- Yeah, it's mostly debugging.


00:33:57.320 --> 00:34:00.840
Yeah, it's tricky to get a view into that kind of stuff


00:34:00.840 --> 00:34:02.840
in the UI, right?


00:34:02.840 --> 00:34:05.200
Obviously, you can print out something or set a breakpoint


00:34:05.200 --> 00:34:05.720
and see it.


00:34:05.720 --> 00:34:10.040
But a lot of times, they're hierarchical and whatnot.


00:34:10.040 --> 00:34:13.200
And the right visualization of that makes a big difference.


00:34:13.200 --> 00:34:14.880
Another great one is to say, if you're


00:34:14.880 --> 00:34:17.640
loading a texture or a couple of textures


00:34:17.640 --> 00:34:20.400
into the texture registry, preparing them


00:34:20.400 --> 00:34:24.960
to be added to a widget, you can use the texture registry


00:34:24.960 --> 00:34:27.260
to actually go in and inspect your different resources


00:34:27.260 --> 00:34:30.620
like you can preview it before you actually use it.


00:34:30.620 --> 00:34:31.540
>> That's really cool.


00:34:31.540 --> 00:34:32.040
>> Yeah.


00:34:32.040 --> 00:34:33.040
>> Same thing with fonts.


00:34:33.040 --> 00:34:35.540
You can inspect fonts and other things like that.


00:34:35.540 --> 00:34:40.420
>> Is DeerPi GUI primarily focused on 2D UIs,


00:34:40.420 --> 00:34:42.900
or does it have a 3D component?


00:34:42.900 --> 00:34:47.660
>> So currently it's 2D, but we are working on a 3D engine


00:34:47.660 --> 00:34:49.100
to go with it.


00:34:49.100 --> 00:34:51.100
>> All right.


00:34:51.100 --> 00:34:55.260
And the UI won't be 3D, but there will be 3D widgets.


00:34:55.260 --> 00:34:56.980
And we kind of have support for that now,


00:34:56.980 --> 00:34:59.180
but it's not hardware accelerated.


00:34:59.180 --> 00:35:01.260
The actual 3D engine we're working on will be.


00:35:01.260 --> 00:35:02.100
>>Yeah, cool.


00:35:02.100 --> 00:35:04.300
So for example, like all these charts


00:35:04.300 --> 00:35:06.900
that are on the GitHub page that are active and moving,


00:35:06.900 --> 00:35:10.980
I can totally imagine that one of those spherical


00:35:10.980 --> 00:35:14.420
or it's modeling spikes that represent


00:35:14.420 --> 00:35:16.580
peaks of some kind of measurement all over the place.


00:35:16.580 --> 00:35:18.700
And you want to look at it from different directions


00:35:18.700 --> 00:35:19.580
and whatnot.


00:35:19.580 --> 00:35:21.940
So yeah, I can see where it comes from.


00:35:21.940 --> 00:35:24.180
- Yeah, and I think at the bottom of the readme,


00:35:24.180 --> 00:35:27.220
you can kind of see some examples of users


00:35:27.220 --> 00:35:28.540
that have already kind of skipped ahead


00:35:28.540 --> 00:35:31.660
and hacked into the edit to some 3D work.


00:35:31.660 --> 00:35:33.300
- Yeah, for sure.


00:35:33.300 --> 00:35:35.480
There's a gallery section that people should check out.


00:35:35.480 --> 00:35:38.420
One of the things I really like to do


00:35:38.420 --> 00:35:40.820
when I hear about a new UI framework


00:35:40.820 --> 00:35:43.740
or some tool that does UI graphical stuff


00:35:43.740 --> 00:35:45.620
is to just go look at the screenshots


00:35:45.620 --> 00:35:48.740
and go, what, I want my app to look like this?


00:35:48.740 --> 00:35:50.100
Maybe that looks pretty cool.


00:35:50.100 --> 00:35:51.900
Let me take the time to learn it.


00:35:51.900 --> 00:35:53.460
Honestly, it kind of blows my mind.


00:35:53.460 --> 00:35:56.100
There's a lot of UI frameworks out there


00:35:56.100 --> 00:35:58.300
that don't have a single screenshot of what,


00:35:58.300 --> 00:36:02.580
like what's your whole job is to build pictures.


00:36:02.580 --> 00:36:04.340
Like show us some pictures.


00:36:04.340 --> 00:36:05.740
- Yeah, imagine.


00:36:05.740 --> 00:36:07.980
- Really important gallery part of it.


00:36:07.980 --> 00:36:10.360
- Like the user's listening right now, you have to imagine.


00:36:10.360 --> 00:36:12.040
- Yeah, the gallery is looking really good.


00:36:12.040 --> 00:36:14.020
So one, it looks like almost,


00:36:14.020 --> 00:36:16.340
the first one is almost like an auto can thing.


00:36:16.340 --> 00:36:20.580
It looks like some kind of turbine or something is there.


00:36:20.580 --> 00:36:21.780
Maybe you know more about it.


00:36:21.780 --> 00:36:23.380
You guys can say a little bit.


00:36:23.380 --> 00:36:24.220
- One of the users made it.


00:36:24.220 --> 00:36:26.460
Wasn't sure what they were working on.


00:36:26.460 --> 00:36:28.380
We helped them a little bit with getting access


00:36:28.380 --> 00:36:32.180
to the underlying OpenGL context,


00:36:32.180 --> 00:36:34.020
'cause that was on Linux,


00:36:34.020 --> 00:36:36.980
but not sure what they were working on past that.


00:36:36.980 --> 00:36:38.820
- Yeah, it looks cool, doesn't it?


00:36:38.820 --> 00:36:39.660
All right.


00:36:39.660 --> 00:36:44.740
This next one looks like some kind of modeling system.


00:36:44.740 --> 00:36:47.220
Another one of those user saw a user with it.


00:36:47.220 --> 00:36:49.060
We snapped the photo and again,


00:36:49.060 --> 00:36:50.540
no idea what they were doing with it.


00:36:50.540 --> 00:36:51.500
Just looked cool.


00:36:51.500 --> 00:36:55.880
- Yeah, it definitely looks cool.


00:36:55.880 --> 00:37:00.540
Bunch of left-hand side, right-hand side elements here.


00:37:00.540 --> 00:37:04.780
It almost looks like it could be modeling


00:37:04.780 --> 00:37:07.780
some sort of machine learning thing, but I don't think so.


00:37:07.780 --> 00:37:11.480
Yeah, definitely some kind of interesting model here.


00:37:11.480 --> 00:37:13.300
- It might've been.


00:37:13.300 --> 00:37:18.300
Some really nice visualizers here for,


00:37:18.300 --> 00:37:22.920
it looks like maybe looking at some astronomy stuff,


00:37:22.920 --> 00:37:24.100
which is great.


00:37:24.100 --> 00:37:28.340
And then a game and some more drawing tools.


00:37:28.340 --> 00:37:30.880
Yeah, here, is this maybe a ray tracing?


00:37:30.880 --> 00:37:34.160
- No, that was just a Fong,


00:37:34.160 --> 00:37:38.080
just a Fong render that we were working on


00:37:38.080 --> 00:37:40.000
when testing some of the earlier versions


00:37:40.000 --> 00:37:42.480
of the 3D engine we're working on.


00:37:42.480 --> 00:37:43.320
- Okay.


00:37:43.320 --> 00:37:47.400
- So that's just some of the early prototypes


00:37:47.400 --> 00:37:49.120
and we thought it was a pretty neat picture to do


00:37:49.120 --> 00:37:51.140
and you can do that now if you just kinda,


00:37:51.140 --> 00:37:53.000
like that other user did, just kinda hack in


00:37:53.000 --> 00:37:57.400
and get access to the OpenGL context or GroundDirectX.


00:37:57.400 --> 00:38:00.540
- Okay, so one of the things that sounds like you can do


00:38:00.540 --> 00:38:05.540
is work with your PyGUI, but when maybe there's


00:38:05.540 --> 00:38:07.880
some low-level thing you need to do,


00:38:07.880 --> 00:38:10.920
like a shader context or some weird graphical thing,


00:38:11.960 --> 00:38:13.880
If it's not directly supported, you can just go,


00:38:13.880 --> 00:38:17.480
all right, let me just get straight to the GL context


00:38:17.480 --> 00:38:22.480
object or structure and just do some OpenGL stuff on it.


00:38:22.480 --> 00:38:23.720
Is that right?


00:38:23.720 --> 00:38:24.560
Or metal?


00:38:24.560 --> 00:38:25.380
- That's correct.


00:38:25.380 --> 00:38:28.840
And for now, that's kind of the way it's done.


00:38:28.840 --> 00:38:31.480
But one of the things that we've been working on


00:38:31.480 --> 00:38:32.760
and a lot of the users have been around a while


00:38:32.760 --> 00:38:34.880
know this is, like I said, right now,


00:38:34.880 --> 00:38:38.260
the backends are for Windows, we're using DirectX 11.


00:38:38.260 --> 00:38:40.320
For Linux, we're using OpenGL.


00:38:40.320 --> 00:38:43.200
on for Mac were using Metal.


00:38:43.200 --> 00:38:45.200
Well, that was early on.


00:38:45.200 --> 00:38:46.560
That was probably a bad decision.


00:38:46.560 --> 00:38:49.020
So now we've been working on replacing the back end


00:38:49.020 --> 00:38:51.280
with Vulkan across the board.


00:38:51.280 --> 00:38:53.040
And part of that would be that we'd


00:38:53.040 --> 00:38:57.020
be able to directly support giving users access to the GPU


00:38:57.020 --> 00:38:57.520
there.


00:38:57.520 --> 00:39:00.000
Because one of the things with the library


00:39:00.000 --> 00:39:02.360
is we do want it to be cross-platform and not


00:39:02.360 --> 00:39:03.880
have to change the code--


00:39:03.880 --> 00:39:05.800
pretty much not have to change the code at all


00:39:05.800 --> 00:39:07.080
across the platform.


00:39:07.080 --> 00:39:09.600
And right now, with us using different back ends,


00:39:09.600 --> 00:39:12.120
we wanted to expose access to compute shaders.


00:39:12.120 --> 00:39:14.760
Or when you're on Windows, you'd have to write in HLSL.


00:39:14.760 --> 00:39:17.360
When you're in Mac, you'd have to write it


00:39:17.360 --> 00:39:19.960
in whatever the language is, Metal.


00:39:19.960 --> 00:39:22.760
And then in OpenGL, you'd GLSL.


00:39:22.760 --> 00:39:24.440
So by switching to the Vulkan back end,


00:39:24.440 --> 00:39:28.480
we're going to be able to expose that and use the same thing


00:39:28.480 --> 00:39:29.360
across the board.


00:39:29.360 --> 00:39:33.080
And that's part of one of the big things


00:39:33.080 --> 00:39:34.680
that we've been working on.


00:39:34.680 --> 00:39:37.360
And it's taking a lot of time.


00:39:37.360 --> 00:39:40.920
and the 3D engine itself is also going to be written in Vulkan.


00:39:40.920 --> 00:39:42.780
>> Okay. That's super cool.


00:39:42.780 --> 00:39:45.320
>> You can see pictures of that too by the way.


00:39:45.320 --> 00:39:47.680
>> Okay. Where do I find those?


00:39:47.680 --> 00:39:50.560
>> If you go to the very top,


00:39:50.560 --> 00:39:52.080
you might have to actually click on my name,


00:39:52.080 --> 00:39:53.880
but it's DeerPi3D.


00:39:53.880 --> 00:39:57.520
>> Got it. Okay. So it's a separate repo up there.


00:39:57.520 --> 00:39:59.960
>> It will be combined. It's just while we're prototyping.


00:39:59.960 --> 00:40:02.400
>> Sure. Right here.


00:40:02.400 --> 00:40:06.800
By the way, nice customized GitHub profile.


00:40:06.800 --> 00:40:09.240
You know, your nice read me looks good.


00:40:09.240 --> 00:40:10.080
Yeah, here you go.


00:40:10.080 --> 00:40:13.880
So the DeerPi GUI 3D engine.


00:40:13.880 --> 00:40:15.800
Pretty neat.


00:40:15.800 --> 00:40:16.620
Look at that.


00:40:16.620 --> 00:40:18.800
Yeah, you do have some cool pictures in here.


00:40:18.800 --> 00:40:20.960
- So that will be the type of stuff you can choose


00:40:20.960 --> 00:40:21.920
for your new stuff.


00:40:21.920 --> 00:40:24.360
Yeah, that's true 3D real time.


00:40:24.360 --> 00:40:25.200
- Yeah.


00:40:25.200 --> 00:40:30.560
So let's go back just for a minute on this,


00:40:30.560 --> 00:40:31.960
this cross-platform business.


00:40:31.960 --> 00:40:34.280
'Cause I think this is worth thinking about.


00:40:34.280 --> 00:40:38.780
First of all, I was really impressed that you had support


00:40:38.780 --> 00:40:42.120
for DirectX and Metal and OpenGL,


00:40:42.120 --> 00:40:45.720
because that means on Windows,


00:40:45.720 --> 00:40:48.600
you get the best option there,


00:40:48.600 --> 00:40:50.840
which is DirectX on macOS,


00:40:50.840 --> 00:40:53.060
especially in the new Apple Silicon ones.


00:40:53.060 --> 00:40:57.360
If you wanna take advantage of the GPUs


00:40:57.360 --> 00:40:58.200
that are built in there,


00:40:58.200 --> 00:41:01.400
the best way to do that is Metal and so on, right?


00:41:01.400 --> 00:41:04.120
But yeah, those APIs are super different.


00:41:04.120 --> 00:41:07.300
So if you're going to expose them,


00:41:07.300 --> 00:41:10.260
say here, let me just hand you the low level context


00:41:10.260 --> 00:41:11.220
and talk straight to it.


00:41:11.220 --> 00:41:13.820
Well, you're kind of setting them up


00:41:13.820 --> 00:41:15.940
for getting locked into one or the other,


00:41:15.940 --> 00:41:18.680
plus also having to learn Metal


00:41:18.680 --> 00:41:21.620
and or learn DirectX and all that, right?


00:41:21.620 --> 00:41:23.440
- Right, and again, that's part of the reason


00:41:23.440 --> 00:41:25.060
we are switching to Vulkan.


00:41:25.060 --> 00:41:27.300
We will leave those backends as legacy.


00:41:27.300 --> 00:41:30.300
Yes, legacy is a bad word,


00:41:30.300 --> 00:41:32.180
but you'll be able to switch to those backends.


00:41:32.180 --> 00:41:34.480
But if you're really wanting to do the low level stuff


00:41:34.480 --> 00:41:36.860
and wanting to access the 3D engine,


00:41:36.860 --> 00:41:38.980
you will have to use Vulkan.


00:41:38.980 --> 00:41:39.500
Yeah.


00:41:39.500 --> 00:41:41.620
So tell people about what this Vulkan thing is.


00:41:41.620 --> 00:41:43.980
I mean, I've heard of it as a way to have--


00:41:43.980 --> 00:41:47.060
it's like one API that talks both DirectX and Metal


00:41:47.060 --> 00:41:48.500
and OpenGL or something like that.


00:41:48.500 --> 00:41:50.940
Is that sort of the deal?


00:41:50.940 --> 00:41:56.500
So OpenGL, DirectX 11, and I guess


00:41:56.500 --> 00:41:58.820
that's the two main ones are the older--


00:41:58.820 --> 00:42:01.300
I guess the previous generation graphics APIs.


00:42:01.300 --> 00:42:04.460
And those are used to--


00:42:04.460 --> 00:42:05.980
they go through the driver, and they


00:42:05.980 --> 00:42:09.260
talk to your GPU directly.


00:42:09.260 --> 00:42:12.580
And like I said earlier on in this,


00:42:12.580 --> 00:42:16.860
that basically the hardware has changed considerably


00:42:16.860 --> 00:42:19.900
since those APIs were designed.


00:42:19.900 --> 00:42:20.980
Very, very different.


00:42:20.980 --> 00:42:23.860
So it's a lot more work on the driver developers


00:42:23.860 --> 00:42:26.620
to have to go from, here's how the hardware works,


00:42:26.620 --> 00:42:29.260
to here's the API we had.


00:42:29.260 --> 00:42:32.900
The move over the last five or six years has been


00:42:32.900 --> 00:42:37.220
towards these lower level graphics APIs


00:42:37.220 --> 00:42:41.340
like Metal, DirectX 12, and Vulkan.


00:42:41.340 --> 00:42:44.940
These are considerably lower level.


00:42:44.940 --> 00:42:48.260
As an example, to get a triangle on the screen in DirectX 11,


00:42:48.260 --> 00:42:50.260
it's maybe 300 lines of code,


00:42:50.260 --> 00:42:53.620
in OpenGL it's maybe 100, if that.


00:42:53.620 --> 00:42:56.300
To do it in Vulkan, you're easily at 1,000,


00:42:56.300 --> 00:42:57.500
just getting a triangle on the screen.


00:42:57.500 --> 00:42:58.620
Really?


00:42:58.620 --> 00:43:01.220
I was already feeling bad that it was 300 in DirectX.


00:43:01.220 --> 00:43:04.900
And I mean, I can just remember the OpenGL code.


00:43:04.900 --> 00:43:09.420
Set the scale, set the transform, set the viewport,


00:43:09.420 --> 00:43:11.100
all of those things.


00:43:11.100 --> 00:43:13.780
It's not easy programming type of work.


00:43:13.780 --> 00:43:16.260
So Vulkan is even lower than that, huh?


00:43:16.260 --> 00:43:16.740
Right.


00:43:16.740 --> 00:43:19.180
Vulkan and DirectX 12 are really your lowest level.


00:43:19.180 --> 00:43:24.460
But DirectX 12 is just Windows.


00:43:24.460 --> 00:43:26.660
And with these APIs, I mean, you're


00:43:26.660 --> 00:43:29.900
able to utilize so much more in terms


00:43:29.900 --> 00:43:31.660
of what your GPU is capable of.


00:43:31.660 --> 00:43:33.700
But you have to manage a lot more.


00:43:33.700 --> 00:43:36.280
And that's part of why that even the 3D engine and us switching


00:43:36.280 --> 00:43:39.020
the back end is taking as long as it is


00:43:39.020 --> 00:43:45.540
is because the driver developers do a lot less for those APIs.


00:43:45.540 --> 00:43:49.620
Things like, as an example, in DirectX and OpenGL,


00:43:49.620 --> 00:43:54.140
you can say I need a texture and load it with data.


00:43:54.140 --> 00:43:56.640
And that's it, you can do that as many times as you want.


00:43:56.640 --> 00:43:59.000
And Vulkan and DirectX 12,


00:43:59.000 --> 00:44:01.360
there's a max number of times you can do that.


00:44:01.360 --> 00:44:04.460
I think it's the low numbers, maybe 4,000 allocations.


00:44:04.460 --> 00:44:08.240
So it's up to you to instead,


00:44:08.240 --> 00:44:10.800
allocate one big block, manage it yourself


00:44:10.800 --> 00:44:14.880
and not keep doing that, as an example.


00:44:14.880 --> 00:44:17.360
- Right, you end up with those sort of maps, right?


00:44:17.360 --> 00:44:20.680
Where like this square is the actual whole picture


00:44:20.680 --> 00:44:23.480
of something else, but to the right of it might be


00:44:23.480 --> 00:44:26.660
some other thing that you load all into one texture


00:44:26.660 --> 00:44:29.760
and you kind of viewport into it or something.


00:44:29.760 --> 00:44:30.600
Yeah.


00:44:30.600 --> 00:44:32.760
- Yeah, another one of those things.


00:44:32.760 --> 00:44:37.120
It could be fun, but also you pull your hair out


00:44:37.120 --> 00:44:39.240
'cause another one of the things that the new APIs


00:44:39.240 --> 00:44:41.880
have changed is actually having to synchronize


00:44:41.880 --> 00:44:44.760
between the GPU and CPU and DirectX and OpenGL


00:44:44.760 --> 00:44:49.480
when you say, you know, swap the buffers,


00:44:49.480 --> 00:44:52.780
execute this draw, whatever you're doing.


00:44:52.780 --> 00:44:55.620
your main loop where you're doing that,


00:44:55.620 --> 00:44:58.060
you don't have to wait till it's finished.


00:44:58.060 --> 00:45:01.260
It's automatically synchronized between the GPU and CPU.


00:45:01.260 --> 00:45:01.920
>> I see.


00:45:01.920 --> 00:45:03.980
>> With the new APIs, that's not the case.


00:45:03.980 --> 00:45:06.260
You typically have to actually add in


00:45:06.260 --> 00:45:09.500
barriers and fences between the different operations,


00:45:09.500 --> 00:45:11.700
and just a lot of stuff.


00:45:11.700 --> 00:45:15.000
You typically have more than one frame processing at a time.


00:45:15.000 --> 00:45:18.180
You can actually utilize multi-processing,


00:45:18.180 --> 00:45:21.300
which is a problem right now with Python because of the GIL.


00:45:21.300 --> 00:45:22.860
So even though Vulkan has that,


00:45:22.860 --> 00:45:24.620
you can't really utilize it yet.


00:45:24.620 --> 00:45:27.940
So yeah.


00:45:27.940 --> 00:45:30.340
- Maybe the no-gil stuff will gain traction


00:45:30.340 --> 00:45:32.180
and it won't be a problem anymore.


00:45:32.180 --> 00:45:33.400
One can hope.


00:45:33.400 --> 00:45:34.820
So when I'm looking at this Vulkan page here,


00:45:34.820 --> 00:45:38.920
I see Windows, Switch, Stadia, Linux, Android.


00:45:38.920 --> 00:45:40.980
I don't see macOS.


00:45:40.980 --> 00:45:43.740
Is it still support Mac or what's the story there?


00:45:43.740 --> 00:45:48.740
- So yeah, you said the MoltenVK is a layer on top of Metal


00:45:50.160 --> 00:45:52.560
so that you can use it for Mac.


00:45:52.560 --> 00:45:54.040
It's not directly supported.


00:45:54.040 --> 00:45:55.920
I mean, you know how Apple is.


00:45:55.920 --> 00:45:57.160
You gotta use Objective-C.


00:45:57.160 --> 00:45:58.840
They don't want you using C++.


00:45:58.840 --> 00:45:59.920
It's not as supported.


00:45:59.920 --> 00:46:00.880
It's the same thing.


00:46:00.880 --> 00:46:03.240
They deprecated OpenGL, and as of right now,


00:46:03.240 --> 00:46:05.800
there is no direct support for Vulkan.


00:46:05.800 --> 00:46:08.040
So Molten VK is the--


00:46:08.040 --> 00:46:09.480
- See, it's like an intermediate layer


00:46:09.480 --> 00:46:11.540
between Metal and Vulkan.


00:46:11.540 --> 00:46:12.380
- Right.


00:46:12.380 --> 00:46:13.220
- Got it, okay.


00:46:13.220 --> 00:46:17.060
- Talk about possibly leaving Metal in as a support.


00:46:17.060 --> 00:46:19.600
- Yeah.


00:46:19.600 --> 00:46:21.640
- Possibility to, I'm leaving.


00:46:21.640 --> 00:46:24.400
- It breaks your perfect abstraction though.


00:46:24.400 --> 00:46:25.240
- Yes.


00:46:25.240 --> 00:46:28.240
- What are you gonna do though?


00:46:28.240 --> 00:46:29.080
Pretty cool.


00:46:29.080 --> 00:46:30.480
- Metal's already doing that right now.


00:46:30.480 --> 00:46:33.640
Some of the formats for the textures aren't supported.


00:46:33.640 --> 00:46:34.480
- That's a good point.


00:46:34.480 --> 00:46:36.400
- Which is a little annoying.


00:46:36.400 --> 00:46:39.520
- Yeah, everyone's a snowflake over in the Mac world, right?


00:46:39.520 --> 00:46:41.160
- That is correct.


00:46:41.160 --> 00:46:42.720
- As I say on my Mac, okay.


00:46:42.720 --> 00:46:45.640
Let's see, one of the things I liked


00:46:45.640 --> 00:46:48.320
when I was looking through here is you've got


00:46:48.320 --> 00:46:50.080
a nice getting started tutorial.


00:46:50.080 --> 00:46:51.640
Maybe we could talk just a little bit about


00:46:51.640 --> 00:46:53.440
just what the code looks like


00:46:53.440 --> 00:46:54.960
to get some stuff on the screen.


00:46:54.960 --> 00:46:58.000
But you also have some video tutorials.


00:46:58.000 --> 00:47:01.240
Jonathan, I know you put some of these together.


00:47:01.240 --> 00:47:02.160
Not sure.


00:47:02.160 --> 00:47:04.240
- A while back, they're a little outdated.


00:47:04.240 --> 00:47:05.960
They're 06,


00:47:05.960 --> 00:47:09.680
06, which is pretty old,


00:47:09.680 --> 00:47:12.280
but we need to recreate them soon.


00:47:12.280 --> 00:47:15.240
- Sure, well, as someone who creates a bunch of videos,


00:47:15.240 --> 00:47:19.120
They're very tricky to keep them in sync.


00:47:19.120 --> 00:47:22.520
You can't just edit a few words or change a thing here.


00:47:22.520 --> 00:47:23.600
It's different.


00:47:23.600 --> 00:47:25.360
But yeah, so people want to learn


00:47:25.360 --> 00:47:27.940
through the video style they can go through and sort of watch


00:47:27.940 --> 00:47:32.360
some of these and get a sense of simple plotting,


00:47:32.360 --> 00:47:35.880
or working with tabs and stuff like that, right?


00:47:35.880 --> 00:47:38.960
>>Most of the things are there.


00:47:38.960 --> 00:47:41.760
Documentation still is a bit-- both with video tutorials


00:47:41.760 --> 00:47:44.160
and our readme, it's still a little bit lacking.


00:47:44.160 --> 00:47:45.520
there's still some stuff that's undocumented


00:47:45.520 --> 00:47:46.360
that we're having to add,


00:47:46.360 --> 00:47:48.640
but that's part of the point of the demo


00:47:48.640 --> 00:47:51.160
is you can see how all those,


00:47:51.160 --> 00:47:52.160
most of the features are there


00:47:52.160 --> 00:47:54.580
and you can kind of see how to code them.


00:47:54.580 --> 00:47:57.600
But that's no excuse for us


00:47:57.600 --> 00:47:59.640
not continuing to improve the docs.


00:47:59.640 --> 00:48:01.600
- Well, that's true,


00:48:01.600 --> 00:48:03.520
but also contributing to the docs


00:48:03.520 --> 00:48:07.320
and contributing a tutorial or something like that,


00:48:07.320 --> 00:48:10.480
that's also a good way for people to contribute, right?


00:48:10.480 --> 00:48:12.280
- Right, that is a very good way.


00:48:12.280 --> 00:48:15.320
Are you all open to having contributors and PRs


00:48:15.320 --> 00:48:17.640
and other things along those lines?


00:48:17.640 --> 00:48:19.240
- Yeah, absolutely. - I have a bunch of PRs


00:48:19.240 --> 00:48:22.600
and welcome to join the Discord.


00:48:22.600 --> 00:48:24.200
We're in there all the time talking with people


00:48:24.200 --> 00:48:27.000
about when they're working on different spots in the API.


00:48:27.000 --> 00:48:30.520
- It's a, the problem is, you know,


00:48:30.520 --> 00:48:32.040
most of the users are Python users


00:48:32.040 --> 00:48:34.800
and libraries are written in C and Objective-C


00:48:34.800 --> 00:48:35.640
and things like that.


00:48:35.640 --> 00:48:37.520
So there's kind of a little bit of a disconnect there


00:48:37.520 --> 00:48:39.640
where a lot of users would like to help,


00:48:39.640 --> 00:48:42.080
but you know, when they go over to the library


00:48:42.080 --> 00:48:44.160
and see it's that, they go, oh, nevermind.


00:48:44.160 --> 00:48:45.000
- You know what, actually,


00:48:45.000 --> 00:48:46.400
I wanted to work on a Python project.


00:48:46.400 --> 00:48:47.720
Well, I mean, we have this problem


00:48:47.720 --> 00:48:49.600
in a lot of the very popular places.


00:48:49.600 --> 00:48:51.880
Like people wanna contribute to Python itself,


00:48:51.880 --> 00:48:54.640
and often that means C, not Python.


00:48:54.640 --> 00:48:55.820
And go, darn it.


00:48:55.820 --> 00:48:57.720
People wanna contribute to Jupyter,


00:48:57.720 --> 00:49:01.720
but a lot of times that means JavaScript, not Python.


00:49:01.720 --> 00:49:02.640
They go, come on.


00:49:02.640 --> 00:49:06.040
But yeah, that's kinda what it means


00:49:06.040 --> 00:49:07.860
to build tools sometimes, I guess.


00:49:09.200 --> 00:49:12.440
You guys have the demo kind of fired up on your screen here.


00:49:12.440 --> 00:49:14.440
Maybe you want to just talk us through a couple


00:49:14.440 --> 00:49:17.360
of the highlights and how we get this thing going.


00:49:17.360 --> 00:49:18.180
- Sure.


00:49:18.180 --> 00:49:19.760
- Got to keep in mind that not everyone can see


00:49:19.760 --> 00:49:22.600
what we're seeing, but we'll, yeah.


00:49:22.600 --> 00:49:24.800
- Yeah, so you can kind of see the demo.


00:49:24.800 --> 00:49:27.640
And we modeled this after on GUI's demo


00:49:27.640 --> 00:49:29.680
and some of the other demos we saw people


00:49:29.680 --> 00:49:31.360
doing similar things where you can kind of see


00:49:31.360 --> 00:49:32.440
all the different features.


00:49:32.440 --> 00:49:34.600
- So if I pip install DeerPi GUI,


00:49:34.600 --> 00:49:37.880
does this come in a run to just get this going?


00:49:37.880 --> 00:49:41.720
It's one of the modules you have import deerpygui.deerpygui


00:49:41.720 --> 00:49:43.760
and then you have import deerpygui.demo


00:49:43.760 --> 00:49:45.800
and there's just one command show demo.


00:49:45.800 --> 00:49:49.560
- Right, so you could even do that from a REPL


00:49:49.560 --> 00:49:51.240
if you wanted, right?


00:49:51.240 --> 00:49:53.640
- Yeah, you can and do that right.


00:49:53.640 --> 00:49:55.720
So you can kind of see a lot of different widgets,


00:49:55.720 --> 00:49:58.120
just your typical UI widgets that you have.


00:49:58.120 --> 00:50:00.720
- Yeah, go back to the widgets real quick for a sec.


00:50:00.720 --> 00:50:03.280
Yeah, so you've got a lot of nice ones.


00:50:03.280 --> 00:50:05.680
You've got buttons, you've got check boxes,


00:50:05.680 --> 00:50:07.880
You've got radio buttons, you know,


00:50:07.880 --> 00:50:10.640
like you can only select one versus check boxes.


00:50:10.640 --> 00:50:14.920
You've got drop down combo boxes, text,


00:50:14.920 --> 00:50:19.320
text with placeholder hint, I guess.


00:50:19.320 --> 00:50:22.800
One of the areas that you have a lot of UIs around


00:50:22.800 --> 00:50:26.440
is the slider, what do you call them, slider floats,


00:50:26.440 --> 00:50:27.560
slider ints.


00:50:27.560 --> 00:50:29.800
It's like a thing that has a number,


00:50:29.800 --> 00:50:32.200
but then as you slot, you can not just type in it,


00:50:32.200 --> 00:50:35.520
but you can drag it around and actually scale it.


00:50:35.520 --> 00:50:38.240
You know, I see this a lot in the Adobe tools


00:50:38.240 --> 00:50:43.040
like Audition, you can go in if you wanna change something,


00:50:43.040 --> 00:50:45.480
you can sort of click on a number and just move the mouse


00:50:45.480 --> 00:50:47.540
instead of typing to the number.


00:50:47.540 --> 00:50:51.360
Yeah, yeah, this is good looking stuff.


00:50:51.360 --> 00:50:54.320
- There's a lot of these color things,


00:50:54.320 --> 00:50:57.160
'cause again, this is really meant for a lot of 3D engines


00:50:57.160 --> 00:51:02.160
and content creation, a lot of color maps and things like that.


00:51:05.360 --> 00:51:07.280
Let's see what else.


00:51:07.280 --> 00:51:08.600
Text input, a lot of stuff here.


00:51:08.600 --> 00:51:10.480
And remember how I told you a lot of the backends


00:51:10.480 --> 00:51:11.840
are the same exact numbers.


00:51:11.840 --> 00:51:13.640
So you can get things automatically like this.


00:51:13.640 --> 00:51:15.280
All of these are linked together.


00:51:15.280 --> 00:51:16.240
- All right, so what you're doing,


00:51:16.240 --> 00:51:19.920
there's like three text boxes.


00:51:19.920 --> 00:51:22.960
One that's plain text and two that are passwords.


00:51:22.960 --> 00:51:24.440
And as you type in one, they all,


00:51:24.440 --> 00:51:26.280
I mean, it's not real practical for passwords,


00:51:26.280 --> 00:51:29.880
but as you type in one, it'll show you in the different.


00:51:29.880 --> 00:51:33.120
- So we're showing different flags, just different flags.


00:51:33.120 --> 00:51:35.000
- Yeah, how do you create that binding between them?


00:51:35.000 --> 00:51:38.000
- That's what I was telling you, there's no actual binding.


00:51:38.000 --> 00:51:40.480
They're truly the same value underneath.


00:51:40.480 --> 00:51:41.440
- Okay.


00:51:41.440 --> 00:51:43.160
- Whenever you get to create this,


00:51:43.160 --> 00:51:46.440
say you call this item, password one,


00:51:46.440 --> 00:51:47.540
when you go to create the second one,


00:51:47.540 --> 00:51:50.240
you can specify a source as password one,


00:51:50.240 --> 00:51:52.200
and it will just, rather than have its own value,


00:51:52.200 --> 00:51:55.120
it will just truly use a pointer to the other one.


00:51:55.120 --> 00:51:56.080
And that's why all these--


00:51:56.080 --> 00:51:56.920
- Yeah, yeah, that's really cool.


00:51:56.920 --> 00:51:58.160
So that's how they stay in sync,


00:51:58.160 --> 00:52:00.360
'cause they are the same thing.


00:52:00.360 --> 00:52:01.560
- It's nice, it's free.


00:52:01.560 --> 00:52:02.400
- Yeah, exactly.


00:52:02.400 --> 00:52:03.240
- It's free, it doesn't cost anything.


00:52:03.240 --> 00:52:05.920
There's no callback that has to run.


00:52:05.920 --> 00:52:09.160
A lot of basic simple plots.


00:52:09.160 --> 00:52:10.160
Yeah.


00:52:10.160 --> 00:52:12.120
For just-- it's pretty simple stuff.


00:52:12.120 --> 00:52:12.800
Let's see.


00:52:12.800 --> 00:52:15.320
There's a whole bunch of things.


00:52:15.320 --> 00:52:15.820
Yeah.


00:52:15.820 --> 00:52:18.080
Again, these are linked in the same way.


00:52:18.080 --> 00:52:18.880
OK.


00:52:18.880 --> 00:52:20.040
Yeah.


00:52:20.040 --> 00:52:21.520
Yeah, so I encourage people, if they


00:52:21.520 --> 00:52:24.680
want to think about this framework,


00:52:24.680 --> 00:52:28.880
is create a virtual environment, pip install deerpygui,


00:52:28.880 --> 00:52:32.160
and then do the import command to run the demo, right?


00:52:32.160 --> 00:52:32.920
Yeah.


00:52:32.920 --> 00:52:35.640
- Really? - Date pickers.


00:52:35.640 --> 00:52:37.440
But some of the cooler ones that you wanted to see,


00:52:37.440 --> 00:52:38.560
I mean, I could show these.


00:52:38.560 --> 00:52:40.960
These are all pretty typical in most UI libraries.


00:52:40.960 --> 00:52:41.960
- Not that.


00:52:41.960 --> 00:52:44.200
- Some of the ones-- - There's the knobs.


00:52:44.200 --> 00:52:45.440
- That's true.


00:52:45.440 --> 00:52:47.600
Some of the ones, I guess,


00:52:47.600 --> 00:52:49.860
we have a table API, which--


00:52:49.860 --> 00:52:51.600
- Oh, that's nice looking.


00:52:51.600 --> 00:52:52.920
- Pretty cool.


00:52:52.920 --> 00:52:53.880
You're able to, you know,


00:52:53.880 --> 00:52:55.360
these examples are just showing text,


00:52:55.360 --> 00:52:57.280
but you could put any widget, you could put plots,


00:52:57.280 --> 00:52:59.200
you can do all kinds of stuff.


00:52:59.200 --> 00:53:00.880
- So yeah, with the table one,


00:53:00.880 --> 00:53:02.520
probably people think about it,


00:53:02.520 --> 00:53:06.440
Like probably it'd be called a grid in a lot of frameworks,


00:53:06.440 --> 00:53:07.280
right?


00:53:07.280 --> 00:53:09.400
It's kind of a read only Excel type of view,


00:53:09.400 --> 00:53:11.480
but very colorful and nice.


00:53:11.480 --> 00:53:12.320
- These aren't read only.


00:53:12.320 --> 00:53:14.560
These can be any widget you want.


00:53:14.560 --> 00:53:16.480
They're more layout like.


00:53:16.480 --> 00:53:19.000
- Oh, so you can put like a graph in one of the cells.


00:53:19.000 --> 00:53:21.040
- You can put a block, you can put a node editor,


00:53:21.040 --> 00:53:23.160
you can put anything you want in these.


00:53:23.160 --> 00:53:24.840
- It's best to think about like a table


00:53:24.840 --> 00:53:26.040
as more or less a layout,


00:53:26.040 --> 00:53:27.920
essentially just giving you columns and rows


00:53:27.920 --> 00:53:29.080
where you can put anything in it.


00:53:29.080 --> 00:53:29.920
- Oh yeah, okay.


00:53:29.920 --> 00:53:30.920
That makes sense.


00:53:30.920 --> 00:53:33.320
- Yeah, we need to see here this sorting one,


00:53:33.320 --> 00:53:36.040
you can kind of see, we've got a checkbox in here.


00:53:36.040 --> 00:53:39.560
I think there's an input, you know, different things.


00:53:39.560 --> 00:53:40.720
- Yeah.


00:53:40.720 --> 00:53:41.560
- Tables is cool.


00:53:41.560 --> 00:53:43.560
Like I said, I mean, there's tons of plots.


00:53:43.560 --> 00:53:44.400
- Yeah, there's a lot.


00:53:44.400 --> 00:53:46.240
- Anyone can look at the demo.


00:53:46.240 --> 00:53:49.240
There's, and we have that example that you saw on the...


00:53:49.240 --> 00:53:52.840
- Oh yeah, you even have that detail,


00:53:52.840 --> 00:53:55.080
high level of the detail graph in there.


00:53:55.080 --> 00:53:55.920
That's cool.


00:53:55.920 --> 00:53:57.600
Do you have trees?


00:53:57.600 --> 00:53:58.440
- We do.


00:54:00.000 --> 00:54:03.200
layout containers as far as you mean like.


00:54:03.200 --> 00:54:05.400
>> Yeah, exactly.


00:54:05.400 --> 00:54:08.200
>> That's very cool.


00:54:08.200 --> 00:54:09.240
>> I like it.


00:54:09.240 --> 00:54:10.960
>> A lot of stuff with textures and


00:54:10.960 --> 00:54:12.840
the high-performance type stuff.


00:54:12.840 --> 00:54:15.800
For those that haven't seen,


00:54:15.800 --> 00:54:17.640
let's see, where's that?


00:54:17.640 --> 00:54:19.200
The node editor.


00:54:19.200 --> 00:54:22.160
Those that are unfamiliar with that,


00:54:22.160 --> 00:54:25.160
I ran out of room here.


00:54:27.160 --> 00:54:30.240
- Yeah, that node editor is exactly what I expected, right?


00:54:30.240 --> 00:54:31.680
So you've got these three little boxes


00:54:31.680 --> 00:54:34.000
with different bits of information or graphs


00:54:34.000 --> 00:54:35.760
and you just drag and connect them.


00:54:35.760 --> 00:54:37.480
And yeah, that's fantastic.


00:54:37.480 --> 00:54:40.400
- And you can put any widget in the library in these.


00:54:40.400 --> 00:54:43.280
So it's not limited to just a small subset.


00:54:43.280 --> 00:54:44.720
And then again, with the drawing API,


00:54:44.720 --> 00:54:46.320
your typical stuff that you're used to


00:54:46.320 --> 00:54:49.320
and other drawing APIs, being able to draw a line,


00:54:49.320 --> 00:54:51.560
a box, a cube, things like that.


00:54:51.560 --> 00:54:56.560
And then also some support for a lot of 3D operations


00:54:56.560 --> 00:55:01.480
operations, things like perspective divide and depth


00:55:01.480 --> 00:55:04.520
clipping and all that to help support these type things.


00:55:04.520 --> 00:55:05.080
>> Right, right.


00:55:05.080 --> 00:55:06.400
Very cool.


00:55:06.400 --> 00:55:09.280
All right, let's maybe round out our conversation here


00:55:09.280 --> 00:55:13.280
by talking a bit about, just give us


00:55:13.280 --> 00:55:16.400
a sense on what it looks like to write some code.


00:55:16.400 --> 00:55:22.280
So I'm guessing there's not a graphical designer type


00:55:22.280 --> 00:55:26.600
thing like Xcode storyboard or whatever.


00:55:26.600 --> 00:55:28.200
- Right, we're not big fans of those.


00:55:28.200 --> 00:55:30.600
- Yeah, so you do this through code,


00:55:30.600 --> 00:55:32.320
you sort of build up your UI through code


00:55:32.320 --> 00:55:36.180
and layout elements like for example, table and whatnot.


00:55:36.180 --> 00:55:38.520
You guys wanna, I mean, don't just recode


00:55:38.520 --> 00:55:41.720
'cause that's not gonna work over audio,


00:55:41.720 --> 00:55:44.120
but maybe just give us a sense of, you know,


00:55:44.120 --> 00:55:48.740
how do I get like a text box and a button


00:55:48.740 --> 00:55:49.880
or something on the screen?


00:55:49.880 --> 00:55:52.180
What is the code story look like?


00:55:52.180 --> 00:55:55.760
We talked about the 100 lines of OpenGL or whatever.


00:55:55.760 --> 00:55:58.800
- Right, so pretty much every DPG app,


00:55:58.800 --> 00:56:02.780
you just import DPG, we do it as DPG most of the time.


00:56:02.780 --> 00:56:05.520
From there you'll create a context


00:56:05.520 --> 00:56:10.000
which basically sets up the onGUI context,


00:56:10.000 --> 00:56:12.880
sets up onNodes, sets up our internal context


00:56:12.880 --> 00:56:15.800
with all the different settings and state.


00:56:15.800 --> 00:56:16.800
- Right, probably.


00:56:16.800 --> 00:56:20.600
Oftentimes these lower level frameworks,


00:56:20.600 --> 00:56:22.920
they have to go and get some context


00:56:22.920 --> 00:56:26.320
from the graphics card itself


00:56:26.320 --> 00:56:28.200
and like kind of get that from the operating system.


00:56:28.200 --> 00:56:32.240
And I'm sure that kind of wraps that stuff all up, right?


00:56:32.240 --> 00:56:33.240
- Absolutely.


00:56:33.240 --> 00:56:35.440
And then from there you typically create the viewport.


00:56:35.440 --> 00:56:37.360
And again, that's platform specific.


00:56:37.360 --> 00:56:39.520
On Win32 we're using Win32,


00:56:39.520 --> 00:56:43.720
we're using X11 on Linux and on map reason,


00:56:43.720 --> 00:56:44.880
Kerio or whatever it is.


00:56:44.880 --> 00:56:47.720
We don't have a touch that one in about a year.


00:56:47.720 --> 00:56:48.560
- You got it working.


00:56:48.560 --> 00:56:49.380
- From there you-


00:56:49.380 --> 00:56:50.220
- Decided to stay away from it.


00:56:50.220 --> 00:56:52.660
got it working and walked away from it for a while.


00:56:52.660 --> 00:56:53.500
- That's cool.


00:56:53.500 --> 00:56:56.940
So the viewport is basically like an empty window?


00:56:56.940 --> 00:56:59.700
- Right, it's your actual operating system window.


00:56:59.700 --> 00:57:00.540
- Got it, okay.


00:57:00.540 --> 00:57:02.540
- We call it a viewport.


00:57:02.540 --> 00:57:05.740
And from there you can create something like a window,


00:57:05.740 --> 00:57:06.640
there's these root objects,


00:57:06.640 --> 00:57:08.980
a window is like the GUI window that you see below,


00:57:08.980 --> 00:57:12.980
the blue window that you would see on our demo,


00:57:12.980 --> 00:57:13.820
things like that.


00:57:13.820 --> 00:57:16.820
They're kind of floating windows within the main viewport.


00:57:16.820 --> 00:57:19.020
From there to just add something like a text widget,


00:57:19.020 --> 00:57:23.420
It's dpg add text, dpg add button, dpg add input text,


00:57:23.420 --> 00:57:26.260
whatever the widget is.


00:57:26.260 --> 00:57:30.060
And you kind of compose the hierarchy of, I guess,


00:57:30.060 --> 00:57:33.060
parent-child relationship with context managers


00:57:33.060 --> 00:57:36.460
is kind of the way that it's recommended.


00:57:36.460 --> 00:57:38.060
So yeah, because--


00:57:38.060 --> 00:57:38.560
I see.


00:57:38.560 --> 00:57:41.380
So if I'm going to create a window, one of the windows,


00:57:41.380 --> 00:57:43.940
one of multiple possible windows,


00:57:43.940 --> 00:57:46.860
instead of creating a window object and say window add this


00:57:46.860 --> 00:57:48.700
or that, you would create a context manager


00:57:48.700 --> 00:57:53.700
do a bunch of ads, and then it all just goes to that window.


00:57:53.700 --> 00:57:54.700
Right.


00:57:54.700 --> 00:58:00.580
And we're not object-oriented, which kind of also sets us apart here.


00:58:00.580 --> 00:58:05.860
But if you weren't using the context manager, that same operation would be dpg add window,


00:58:05.860 --> 00:58:12.660
and it returns either an ID, or you can put the ID in with the keyword tag equals whatever


00:58:12.660 --> 00:58:13.660
your ID is.


00:58:13.660 --> 00:58:18.460
Then you would push to the container stack, and then when you're done adding items, you


00:58:18.460 --> 00:58:19.300
pop it back off.


00:58:19.300 --> 00:58:21.140
The context manager handles that for you.


00:58:21.140 --> 00:58:21.980
- Right.


00:58:21.980 --> 00:58:24.140
- So it's adding the window, pushing it and popping it.


00:58:24.140 --> 00:58:26.780
And if you wanted to do something,


00:58:26.780 --> 00:58:27.860
like I said, it's not object oriented.


00:58:27.860 --> 00:58:29.620
So when you do add button, you don't get a button back,


00:58:29.620 --> 00:58:34.180
you get a handle to the internal button.


00:58:34.180 --> 00:58:36.980
And then you use that handle, you can store it,


00:58:36.980 --> 00:58:40.260
just say B equals dbg add button.


00:58:40.260 --> 00:58:42.120
And then all the various commands,


00:58:42.120 --> 00:58:46.700
you would use that handle to control it.


00:58:46.700 --> 00:58:50.460
like if you want to say get the check state of a checkbox.


00:58:50.460 --> 00:58:51.740
>> Right. Get value.


00:58:51.740 --> 00:58:52.360
>> Yeah.


00:58:52.360 --> 00:58:55.460
>> Or configure everything you did when you started off,


00:58:55.460 --> 00:58:58.380
you can modify later on using configure item and then you just


00:58:58.380 --> 00:59:01.920
pass in handle and go from there.


00:59:01.920 --> 00:59:05.900
>> Cool. Is there an event loop type of thing?


00:59:05.900 --> 00:59:11.320
>> There is. So after you've created the viewport and you add your widgets,


00:59:11.320 --> 00:59:14.720
you would do setup DeerPi GUI and what that runs is,


00:59:14.720 --> 00:59:15.980
that starts up the second thread.


00:59:15.980 --> 00:59:18.180
We have two threads, we have the rendering thread running,


00:59:18.180 --> 00:59:20.020
and then we have a callback thread


00:59:20.020 --> 00:59:22.500
where all the Python's happening.


00:59:22.500 --> 00:59:23.860
So that's what set up DeerPi GUI does.


00:59:23.860 --> 00:59:26.440
ShowViewport actually shows the viewport,


00:59:26.440 --> 00:59:30.620
starts basically the platform-specific event loop.


00:59:30.620 --> 00:59:33.600
From there, start DeerPi GUI.


00:59:33.600 --> 00:59:34.700
That is your event loop.


00:59:34.700 --> 00:59:36.300
If you actually wanna see the event loop,


00:59:36.300 --> 00:59:40.500
you would just do while is DeerPi GUI running,


00:59:40.500 --> 00:59:42.220
render DeerPi GUI frame.


00:59:42.220 --> 00:59:44.380
And you can do everything you want inside of there.


00:59:44.380 --> 00:59:45.340
And then when you're completely done,


00:59:45.340 --> 00:59:46.620
you destroy the context.


00:59:46.620 --> 00:59:48.700
- Sure, very cool.


00:59:48.700 --> 00:59:50.820
Looks super straightforward.


00:59:50.820 --> 00:59:55.460
One thing that I don't see here is the callbacks.


00:59:55.460 --> 00:59:58.740
So like when the slider slides or the button clicks,


00:59:58.740 --> 01:00:01.220
is there some way to hook that action?


01:00:01.220 --> 01:00:03.780
Like obviously the save button is gonna need some.


01:00:03.780 --> 01:00:06.620
- Yep, it's a callback.


01:00:06.620 --> 01:00:08.220
It's a keyword for callback.


01:00:08.220 --> 01:00:11.440
And basically it can have three arguments,


01:00:11.440 --> 01:00:13.740
the sender, which will send you the ID


01:00:13.740 --> 01:00:15.520
the item they called the callback.


01:00:15.520 --> 01:00:17.220
The second one is app data,


01:00:17.220 --> 01:00:21.220
which for us that can be either the value


01:00:21.220 --> 01:00:23.680
or if the callbacks related to window resizing,


01:00:23.680 --> 01:00:26.340
it'll be the new size.


01:00:26.340 --> 01:00:29.340
It's data that DPG send you.


01:00:29.340 --> 01:00:31.380
Then the third argument, user data,


01:00:31.380 --> 01:00:34.960
is user can pretty much put anything they want,


01:00:34.960 --> 01:00:36.740
then it'll get passed through.


01:00:36.740 --> 01:00:38.340
It's useful for a lot of people that are


01:00:38.340 --> 01:00:41.220
creating OOP wrappings around the library.


01:00:41.220 --> 01:00:43.660
>> Yeah, nice. Is there


01:00:43.660 --> 01:00:48.940
one callback that handles all the events and then you do like a switch statement or do I hook like


01:00:48.940 --> 01:00:53.420
you can have as many callbacks as you want and then like a window size change callback or something


01:00:53.420 --> 01:00:58.220
like that? No you can it's really up to the user you can have a different callback for every one


01:00:58.220 --> 01:01:02.780
or you can have one master callback where you just check the sender and do different operations based


01:01:02.780 --> 01:01:07.660
on you know what called the callback so you kind of have a little bit of freedom there. We do have


01:01:07.660 --> 01:01:12.860
callbacks you can attach to inputs such as the mouse or the keyboard or


01:01:12.860 --> 01:01:17.560
The window resize like you mentioned we have callbacks you can set up for that. So yeah


01:01:17.560 --> 01:01:20.520
It is nice to be able to say


01:01:20.520 --> 01:01:26.400
When this button gets clicked do this and that makes it real simple, but there's also times that you might want to I


01:01:26.400 --> 01:01:32.380
Want to capture all the button clicks and then do some common thing regardless of which button gets clicked


01:01:32.380 --> 01:01:35.820
All right. It's nice to have that flexibility to go either way


01:01:36.940 --> 01:01:37.940
That's the biggest thing.


01:01:37.940 --> 01:01:39.860
We try to be as flexible as possible


01:01:39.860 --> 01:01:42.660
and allow really geared towards a lot of people wanting


01:01:42.660 --> 01:01:45.420
to wrap and create their own kind of interfaces.


01:01:45.420 --> 01:01:48.380
So there's a lot of freedom in some of the stuff we do.


01:01:48.380 --> 01:01:50.180
So I noticed that you have this--


01:01:50.180 --> 01:01:51.460
you call it the viewport--


01:01:51.460 --> 01:01:55.340
this window that comes out of the operating system.


01:01:55.340 --> 01:01:59.620
And then the DeerPi GUI windows sort of live in that space.


01:01:59.620 --> 01:02:02.820
Is there a way to kind of simulate


01:02:02.820 --> 01:02:05.180
it looking almost like the DeerPi GUI window


01:02:05.180 --> 01:02:05.980
is the whole thing?


01:02:05.980 --> 01:02:09.860
could I not show the title bar of the window


01:02:09.860 --> 01:02:13.260
and then like maximize the inner window to fill it?


01:02:13.260 --> 01:02:15.940
- Right, you can undecorate the viewport.


01:02:15.940 --> 01:02:17.220
There are settings for that.


01:02:17.220 --> 01:02:20.700
And then we have a command that set primary window


01:02:20.700 --> 01:02:22.980
and you can basically set one of the,


01:02:22.980 --> 01:02:24.420
one of your mvwindows to be the primary one


01:02:24.420 --> 01:02:26.220
and it'll fill the whole viewport.


01:02:26.220 --> 01:02:27.140
- Yeah, okay.


01:02:27.140 --> 01:02:28.980
- And you get that, but you can't necessarily move them.


01:02:28.980 --> 01:02:31.060
When you do that, you can't have multiple viewports


01:02:31.060 --> 01:02:32.340
at the moment.


01:02:32.340 --> 01:02:33.860
We're still working on that.


01:02:33.860 --> 01:02:36.520
- Sure, yeah, I know that makes sense.


01:02:36.520 --> 01:02:38.640
Is there like modal dialogues


01:02:38.640 --> 01:02:40.800
and that kind of stuff in there?


01:02:40.800 --> 01:02:44.560
- There is modal dialogues, there is file dialogues.


01:02:44.560 --> 01:02:47.600
You know, a lot of people still tend to just import to Kinter


01:02:47.600 --> 01:02:48.920
and use their file dialogue


01:02:48.920 --> 01:02:50.360
'cause a lot of people don't like ours.


01:02:50.360 --> 01:02:52.600
- So right click context menus.


01:02:52.600 --> 01:02:53.440
- Yes.


01:02:53.440 --> 01:02:54.520
- Oh yeah, okay.


01:02:54.520 --> 01:02:56.200
Yeah, it looks great.


01:02:56.200 --> 01:02:59.080
Like I said, people who are possibly interested


01:02:59.080 --> 01:03:00.920
should check out the gallery on the GitHub page.


01:03:00.920 --> 01:03:03.720
That's a good litmus test


01:03:03.720 --> 01:03:04.560
What does it look like?


01:03:04.560 --> 01:03:05.400
Do you want to use it?


01:03:05.400 --> 01:03:06.720
I think it looks pretty good.


01:03:06.720 --> 01:03:07.560
I like it.


01:03:07.560 --> 01:03:09.460
Yeah, for sure.


01:03:09.460 --> 01:03:13.080
Let's see, we're getting close to the end here.


01:03:13.080 --> 01:03:19.560
One thing, we talked a lot about the future stuff already.


01:03:19.560 --> 01:03:22.700
So maybe we don't really need to go into that.


01:03:22.700 --> 01:03:25.480
We've got the Vulkan backend,


01:03:25.480 --> 01:03:27.300
the 3D engine and stuff like that.


01:03:27.300 --> 01:03:31.040
One of the things that I always want to do with a GUI


01:03:31.040 --> 01:03:35.960
is put it into my taskbar or put it into my macOS dock.


01:03:35.960 --> 01:03:39.400
And I want to be able to give a binary thing to a user


01:03:39.400 --> 01:03:41.040
and not tell them about virtual environments


01:03:41.040 --> 01:03:42.480
and pip install and all that.


01:03:42.480 --> 01:03:45.900
What's the deployment story about giving somebody


01:03:45.900 --> 01:03:47.520
a distributable version of this app?


01:03:47.520 --> 01:03:50.600
- So a lot of users have used, you know,


01:03:50.600 --> 01:03:52.920
some of the tools, Py, was it Py2?


01:03:52.920 --> 01:03:54.520
- Py installer or Py2.


01:03:54.520 --> 01:03:55.500
- Things like that.


01:03:55.500 --> 01:03:59.400
We did early on when we first started the project,


01:03:59.400 --> 01:04:04.440
had a batch file and some batch files that packaged it up for you.


01:04:04.440 --> 01:04:07.160
Actually created the executable and everything so we could hand them around here,


01:04:07.160 --> 01:04:09.560
embedded the Python interpreter and everything.


01:04:09.560 --> 01:04:11.060
We did remove those,


01:04:11.060 --> 01:04:13.240
but we do eventually plan on adding them back.


01:04:13.240 --> 01:04:14.160
>> Okay.


01:04:14.160 --> 01:04:17.240
>> We really don't like having dependencies on other libraries.


01:04:17.240 --> 01:04:18.880
Even though users are using that now,


01:04:18.880 --> 01:04:20.600
we would like to bring back those.


01:04:20.600 --> 01:04:22.400
>> Right. Have just a native.


01:04:22.400 --> 01:04:25.080
>> Right. It wouldn't be that hard. We already do that when we develop it.


01:04:25.080 --> 01:04:29.280
We are using an embedded version of Python in an executable.


01:04:29.280 --> 01:04:33.900
We're not actually using this, what is it?


01:04:33.900 --> 01:04:37.060
This utils and we're not using any of that.


01:04:37.060 --> 01:04:39.360
We're actually just using the Python C API


01:04:39.360 --> 01:04:41.700
directly and embedding it.


01:04:41.700 --> 01:04:44.860
>> Yeah, cool. As a sidebar,


01:04:44.860 --> 01:04:47.600
one of the things I really think would benefit Python as


01:04:47.600 --> 01:04:50.580
a community is if there was


01:04:50.580 --> 01:04:57.280
just a built-in Python-M package.


01:04:57.280 --> 01:04:58.380
>> Absolutely.


01:04:58.380 --> 01:05:00.660
build executable or whatever, and out the other side


01:05:00.660 --> 01:05:05.660
comes a .app, a binary Linux app, or a .exe.


01:05:05.660 --> 01:05:08.340
And you just hand it out, right?


01:05:08.340 --> 01:05:11.900
There's so many scenarios where people would like a tool


01:05:11.900 --> 01:05:14.020
that they would like to be able to share.


01:05:14.020 --> 01:05:16.860
And I feel like it's a bit of a chicken and egg thing.


01:05:16.860 --> 01:05:19.180
Like, well, people aren't doing that very frequently.


01:05:19.180 --> 01:05:21.220
So why do we need that feature?


01:05:21.220 --> 01:05:22.220
Well, they're not doing it


01:05:22.220 --> 01:05:24.420
'cause it's so super hard and fragile, right?


01:05:24.420 --> 01:05:27.260
If it were as easy as pushing a button,


01:05:27.260 --> 01:05:29.420
I think maybe people will do it more.


01:05:29.420 --> 01:05:31.460
So I don't know, anyway.


01:05:31.460 --> 01:05:33.960
- Absolutely, that was one of the original reasons


01:05:33.960 --> 01:05:36.180
for our engineer sandbox project way early on


01:05:36.180 --> 01:05:37.580
is we did do the tools in Python,


01:05:37.580 --> 01:05:39.420
but we couldn't hand them to people.


01:05:39.420 --> 01:05:41.160
We had to tell them, well, you gotta install Python


01:05:41.160 --> 01:05:42.620
and then pip install this.


01:05:42.620 --> 01:05:44.260
So the idea of that one was we were able


01:05:44.260 --> 01:05:45.660
to just hand them that.


01:05:45.660 --> 01:05:47.460
- Yeah, yeah, that's very good.


01:05:47.460 --> 01:05:50.860
Maybe a little bit wrap up on the audience side,


01:05:50.860 --> 01:05:52.380
Mr. Hypermagnetic once again says,


01:05:52.380 --> 01:05:55.020
"Very nice design and similar to small JS libraries."


01:05:55.020 --> 01:05:55.860
Yeah, nice.


01:05:55.860 --> 01:05:57.220
- Appreciate it. - Looks good.


01:05:57.220 --> 01:06:02.220
All right, last thing, you know, I always am interested


01:06:02.220 --> 01:06:06.220
how these projects gain traction, how people find time and energy


01:06:06.220 --> 01:06:10.220
to put into them. And one of the ways is for companies


01:06:10.220 --> 01:06:15.220
that use them or people that use them to sponsor you guys, right?


01:06:15.220 --> 01:06:20.220
So you guys have a sponsor option here, which is part


01:06:20.220 --> 01:06:24.220
of the GitHub sponsor story, right?


01:06:24.220 --> 01:06:25.060
- Right.


01:06:25.060 --> 01:06:27.020
- I think that's actually a pretty big deal


01:06:27.020 --> 01:06:29.380
'cause it used to just be like,


01:06:29.380 --> 01:06:31.260
well, we just put a PayPal donate button


01:06:31.260 --> 01:06:32.100
or something on there, right?


01:06:32.100 --> 01:06:35.300
Which is fine and all, but this is a little more.


01:06:35.300 --> 01:06:36.740
- It is an awesome feature that they,


01:06:36.740 --> 01:06:38.260
I guess Microsoft added.


01:06:38.260 --> 01:06:40.100
- Yeah.


01:06:40.100 --> 01:06:40.940
- I assume that they're the ones that did it.


01:06:40.940 --> 01:06:41.760
Yeah, it's pretty good.


01:06:41.760 --> 01:06:45.220
We do have the GitHub sponsors,


01:06:45.220 --> 01:06:49.180
OpenCollected and the BuyMeACoffee, whatever it is.


01:06:49.180 --> 01:06:51.820
- Yeah, cool.


01:06:52.940 --> 01:06:55.860
Yeah, so this is a part-time project for you guys,


01:06:55.860 --> 01:06:56.860
not full-time.


01:06:56.860 --> 01:06:59.700
It sounds like you're doing mechanical engineering work


01:06:59.700 --> 01:07:02.260
full-time, and then also this both at work,


01:07:02.260 --> 01:07:06.020
but then also bringing it out to the community a little bit.


01:07:06.020 --> 01:07:06.860
- That is correct.


01:07:06.860 --> 01:07:08.760
If it directly applies to something we're doing at work,


01:07:08.760 --> 01:07:10.220
a bug or something, we'll add it here.


01:07:10.220 --> 01:07:13.620
But for the most part, it is at home at night,


01:07:13.620 --> 01:07:17.380
after our families are in bed and working on it there.


01:07:17.380 --> 01:07:18.860
- A labor of love.


01:07:18.860 --> 01:07:19.700
Awesome.


01:07:19.700 --> 01:07:21.020
- That is correct.


01:07:21.020 --> 01:07:21.860
- All right.


01:07:21.860 --> 01:07:25.100
Well, very cool work.


01:07:25.100 --> 01:07:29.900
Again, I think it's great to see more UI frameworks and more


01:07:29.900 --> 01:07:31.980
UI innovation in the Python space.


01:07:31.980 --> 01:07:34.900
So thanks for doing that.


01:07:34.900 --> 01:07:37.940
Now, before we get out of here, let me ask you


01:07:37.940 --> 01:07:40.020
all the final two questions.


01:07:40.020 --> 01:07:41.860
If you're going to write some Python code,


01:07:41.860 --> 01:07:44.300
what editor do you use?


01:07:44.300 --> 01:07:46.180
Typically PyCharm.


01:07:46.180 --> 01:07:48.620
Yeah, pretty much PyCharm.


01:07:48.620 --> 01:07:49.700
Right on.


01:07:49.700 --> 01:07:50.740
Try a few, but--


01:07:50.740 --> 01:07:51.660
Yeah, sure.


01:07:51.660 --> 01:07:54.380
And then a notable PyPI package,


01:07:54.380 --> 01:07:55.220
something you've run across,


01:07:55.220 --> 01:07:57.380
like, oh, this is awesome, people should know about.


01:07:57.380 --> 01:08:02.020
- Typically, just NumPy is about the only one,


01:08:02.020 --> 01:08:04.500
NumPy is about the only one I use.


01:08:04.500 --> 01:08:06.140
We like to reinvent the wheel.


01:08:06.140 --> 01:08:06.980
- Yeah.


01:08:06.980 --> 01:08:09.900
Fewer dependencies, right on.


01:08:09.900 --> 01:08:13.460
Anthony out in the audience says,


01:08:13.460 --> 01:08:17.300
I'm guessing, question mark,


01:08:17.300 --> 01:08:19.620
does DeerPythonGUI play nicely with third-party libs


01:08:19.620 --> 01:08:23.940
like Nutca, PyInstaller, and so on?


01:08:23.940 --> 01:08:25.820
- PyInstaller, I know it does.


01:08:25.820 --> 01:08:28.100
Nutca, I do not believe it does.


01:08:28.100 --> 01:08:31.260
And then NumPy or anything that supports the buffer protocol


01:08:31.260 --> 01:08:35.980
you can use in a lot of our functions.


01:08:35.980 --> 01:08:36.940
- Cool.


01:08:36.940 --> 01:08:38.460
What about Cython or something like that,


01:08:38.460 --> 01:08:39.380
if people wanna make a--


01:08:39.380 --> 01:08:44.020
- No, because we're directly writing to the CPython API,


01:08:44.020 --> 01:08:47.380
the other implementations of Python


01:08:47.380 --> 01:08:49.340
don't play nicely at the moment.


01:08:49.340 --> 01:08:51.380
- Okay, got it.


01:08:51.380 --> 01:08:52.220
Cool, cool.


01:08:52.220 --> 01:08:54.720
All right, well, very nice work.


01:08:54.720 --> 01:08:55.560
Final call to action,


01:08:55.560 --> 01:08:58.100
people wanna get started with DeerPi GUI


01:08:58.100 --> 01:09:00.100
or maybe give back to it.


01:09:00.100 --> 01:09:02.700
Sorry, Anthony says it was a statement.


01:09:02.700 --> 01:09:05.420
Not a question.


01:09:05.420 --> 01:09:06.260
Thanks, Anthony.


01:09:06.260 --> 01:09:08.180
(laughing)


01:09:08.180 --> 01:09:10.260
And yeah, final call to action,


01:09:10.260 --> 01:09:12.300
people wanna get started with DeerPi GUI.


01:09:12.300 --> 01:09:13.140
What do they do?


01:09:13.140 --> 01:09:17.420
- Just pip install and run the demo on the readme.


01:09:17.420 --> 01:09:19.380
You can also join our Discord server.


01:09:19.380 --> 01:09:20.500
There's about a thousand users in there.


01:09:20.500 --> 01:09:22.340
- Go through the read the docs for sure.


01:09:22.340 --> 01:09:23.940
- Read the docs.


01:09:23.940 --> 01:09:25.620
Contributing would be nice.


01:09:25.620 --> 01:09:27.980
We're still in the middle of refactoring


01:09:27.980 --> 01:09:30.300
a lot of things internally, so it may be a little hard.


01:09:30.300 --> 01:09:33.020
But other than that, also just sponsoring really helps out.


01:09:33.020 --> 01:09:33.920
Makes it worth it.


01:09:33.920 --> 01:09:36.780
- Yeah, awesome.


01:09:36.780 --> 01:09:40.140
Well, Jonathan, Preston, thanks for being here.


01:09:40.140 --> 01:09:41.140
- Appreciate it.


01:09:41.140 --> 01:09:42.260
- Yeah, you bet.


01:09:42.260 --> 01:09:43.780
And thanks everyone for watching.


01:09:43.780 --> 01:09:45.600
If you enjoyed this, you wanna get notified


01:09:45.600 --> 01:09:48.200
when it goes live again, be sure to press subscribe


01:09:48.200 --> 01:09:49.400
and catch you next time.

