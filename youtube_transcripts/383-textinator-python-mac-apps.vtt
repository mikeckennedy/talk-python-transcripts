WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, YouTube.


00:00:01.000 --> 00:00:02.000
Hey, Brett.


00:00:02.000 --> 00:00:03.000
>> Hey, Michael.


00:00:03.000 --> 00:00:04.000
>> Hey.


00:00:04.000 --> 00:00:07.800
So cool to be here with you and chatting.


00:00:07.800 --> 00:00:12.320
And for those of you watching live, please throw your thoughts and comments into the


00:00:12.320 --> 00:00:15.000
live chat, and we'll try to make that part of the show.


00:00:15.000 --> 00:00:17.360
If you're watching afterwards, appreciate that as well.


00:00:17.360 --> 00:00:19.240
But sorry, no chat.


00:00:19.240 --> 00:00:20.820
No time travel for you.


00:00:20.820 --> 00:00:21.820
But thank you anyway.


00:00:21.820 --> 00:00:22.820
All right.


00:00:22.820 --> 00:00:23.820
Let's kick this off.


00:00:23.820 --> 00:00:26.000
Brett, welcome to Talk Python to Me.


00:00:26.000 --> 00:00:27.000
>> Great.


00:00:27.000 --> 00:00:28.000
Yeah, thanks, Michael.


00:00:28.000 --> 00:00:29.000
Glad to be here.


00:00:29.000 --> 00:00:31.000
I'm glad to have you here.


00:00:31.000 --> 00:00:33.840
So many interesting things to cover on the show.


00:00:33.840 --> 00:00:36.640
I'm really, really excited.


00:00:36.640 --> 00:00:40.600
Let's start with the excitement, I guess, of saying we're both


00:00:40.600 --> 00:00:44.120
excited about Mac computers.


00:00:44.120 --> 00:00:52.080
And it's about, I guess, a 1/3, 1/3, 1/3 split, maybe not


00:00:52.080 --> 00:00:56.960
quite that many for Mac developers in the Python space.


00:00:56.960 --> 00:01:01.240
But there's a lot of people who write code either on a Mac


00:01:01.240 --> 00:01:02.640
or for people who use a Mac,


00:01:02.640 --> 00:01:04.760
and it would be nice to make a little bit more


00:01:04.760 --> 00:01:06.680
of a native thing with Python.


00:01:06.680 --> 00:01:09.840
And so we're gonna talk about this really awesome app


00:01:09.840 --> 00:01:11.080
that you wrote.


00:01:11.080 --> 00:01:14.600
And here we are because of a tweet follow up


00:01:14.600 --> 00:01:16.680
or the Python Byte Show, you sent a really cool tweet.


00:01:16.680 --> 00:01:19.440
And I'm like, this is amazing, we have to talk about this.


00:01:19.440 --> 00:01:22.360
And so we're gonna talk about building Mac apps with Python,


00:01:22.360 --> 00:01:24.680
like native apps that go into the doc,


00:01:24.680 --> 00:01:26.760
not just something that could run a script,


00:01:26.760 --> 00:01:29.840
but a thing that you could get a regular user


00:01:29.840 --> 00:01:32.960
to believe is an app and they will call it an app.


00:01:32.960 --> 00:01:35.480
And the other is you also happen to work


00:01:35.480 --> 00:01:37.680
for the US Space Force, which is very interesting.


00:01:37.680 --> 00:01:39.680
So we'll touch on that maybe a little bit at the end.


00:01:39.680 --> 00:01:42.400
There's some programming tie-ins as well, right?


00:01:42.400 --> 00:01:44.000
- Yeah, yeah, definitely.


00:01:44.000 --> 00:01:45.360
Sounds good.


00:01:45.360 --> 00:01:46.560
- Awesome.


00:01:46.560 --> 00:01:49.280
Well, again, happy to have you here.


00:01:49.280 --> 00:01:51.360
Before we get into that though,


00:01:51.360 --> 00:01:52.700
let's start with your story.


00:01:52.700 --> 00:01:54.600
How'd you get into programming Python?


00:01:55.640 --> 00:01:55.880
Sure.


00:01:55.880 --> 00:01:56.080
Yeah.


00:01:56.080 --> 00:02:00.840
So I've been, I'm a hobbyist programmer, self-taught, but I've been programming


00:02:00.840 --> 00:02:06.860
since I was eight years old and roughly around 1981, my dad brought home a TRS


00:02:06.860 --> 00:02:09.600
80 model three from Radio Shack.


00:02:09.600 --> 00:02:11.280
It was one of those all in ones.


00:02:11.280 --> 00:02:13.960
It's a 12 inch black and white screen built in keyboard.


00:02:13.960 --> 00:02:16.880
And it had a five and a quarter inch floppy, which was, was a


00:02:16.880 --> 00:02:18.240
pretty big deal for those days.


00:02:18.240 --> 00:02:18.720
It's a big deal.


00:02:18.720 --> 00:02:22.320
I was going to have a cassette player or did it have a floppy?


00:02:22.320 --> 00:02:22.680
It did not.


00:02:22.680 --> 00:02:25.960
it had the floppy actually built into the consoles and all in one.


00:02:25.960 --> 00:02:30.440
And tell us you're like, yeah, where's your cassette player? No, no, let me show


00:02:30.440 --> 00:02:34.320
you. It's this huge thing. Yeah. And I don't remember how much it was, but it


00:02:34.320 --> 00:02:38.440
was that the floppy disk held, but it was like 80 K or something. It was a lot


00:02:38.440 --> 00:02:43.360
of, it was a lot for back then. he had it for work, but I was, I just was


00:02:43.360 --> 00:02:47.360
fascinated by it. I thought, you know, I love the idea that you can, this


00:02:47.360 --> 00:02:51.960
machine can respond to what I tell it to do and do something completely


00:02:51.960 --> 00:02:56.140
different. And so I got into programming. He taught me a


00:02:56.140 --> 00:02:59.500
little bit of basic it came with basic candy basic installed on


00:02:59.500 --> 00:03:02.960
there. I got into that a little bit. And then from there, I


00:03:02.960 --> 00:03:08.800
moved into Commodore 64 later, and IBM PC and then eventually


00:03:08.800 --> 00:03:12.480
found my way to the Mac. And just yeah, I've been using the


00:03:12.480 --> 00:03:17.760
Mac for a long time. I found Python about four years ago.


00:03:17.760 --> 00:03:20.720
I've used a number of different languages through the years.


00:03:21.240 --> 00:03:27.240
probably most of the work I've done was in Pearl. A lot of Fortran in college. I'm an engineer by


00:03:27.240 --> 00:03:31.320
trade. And back then we, of course, Fortran, in fact, that program Fortran on the VACs


00:03:31.320 --> 00:03:37.800
back in the day. Cool. Like what type of engineering? Astronautical engineering.


00:03:37.800 --> 00:03:43.720
So everything dealing with space, satellites, rockets, spacecraft.


00:03:48.040 --> 00:03:52.920
But we did a lot of Fortran. But you know, I taught myself Perl along the way. And I used


00:03:52.920 --> 00:03:58.760
that for years. That was sort of my go to anytime I needed to get something done. And then I remember


00:03:58.760 --> 00:04:04.280
a few years ago, reading an article about Python, it was it was the up and coming thing. And so I


00:04:04.280 --> 00:04:09.560
thought, well, let me give this a try. So I started playing around with it. And I've done almost


00:04:09.560 --> 00:04:14.440
exclusively Python since then. It's been a lot of fun. Cool. So once you found it, you're like,


00:04:14.440 --> 00:04:19.160
all right, this is this place, I feel comfortable in this place in this language. And I wanted to


00:04:19.160 --> 00:04:24.520
do more and just stuck with it. Yeah, it's, you know, it, it's a easy language to learn, right.


00:04:24.520 --> 00:04:31.800
But it grows with you is what I found with Python. And it, you know, you can obviously build


00:04:31.800 --> 00:04:38.120
industrial grade apps with Python, but it's really easy to start out to and I will say, I just I


00:04:38.120 --> 00:04:42.820
I actually first came across Python, oh, quite a few years ago in the late


00:04:42.820 --> 00:04:47.240
nineties when I, when I discovered Pearl and I'd come from a C and Fortran


00:04:47.240 --> 00:04:50.880
background, and I remember looking at this whole white space thing and thinking,


00:04:50.880 --> 00:04:53.280
there's no way that I can program with that.


00:04:53.280 --> 00:04:55.280
I need, I need the curly braces.


00:04:55.280 --> 00:04:56.560
I need the semi-colon.


00:04:56.560 --> 00:04:57.400
Yeah.


00:04:57.400 --> 00:05:02.680
And now, you know, to be fair back then, you know, on a windows PC programming,


00:05:02.680 --> 00:05:04.400
it was literally with notepad, right?


00:05:04.400 --> 00:05:06.140
There was, there were, there wasn't black.


00:05:06.140 --> 00:05:11.140
There weren't any formatters, any of that kind of stuff.


00:05:11.140 --> 00:05:13.740
So, WhiteSpace was hard actually getting it right.


00:05:13.740 --> 00:05:17.120
But once I got over that,


00:05:17.120 --> 00:05:18.460
I actually really liked the WhiteSpace now.


00:05:18.460 --> 00:05:23.220
I think it makes the code a lot easier to read and cleaner.


00:05:23.220 --> 00:05:26.460
And I really have enjoyed working with Python.


00:05:26.460 --> 00:05:29.340
- Cool, yeah, the WhiteSpace,


00:05:29.340 --> 00:05:31.260
I do feel like there's a certain number of people


00:05:31.260 --> 00:05:33.500
that just look at it and go, "Nope, next language."


00:05:33.500 --> 00:05:35.580
What else might I learn today?


00:05:35.580 --> 00:05:36.660
That one's out.


00:05:36.660 --> 00:05:40.500
But it really is something that it seems like it's a big deal.


00:05:40.500 --> 00:05:41.940
And then you kind of work with it.


00:05:41.940 --> 00:05:44.060
You're like, oh, especially now the tools are just


00:05:44.060 --> 00:05:46.820
auto-indenting for you.


00:05:46.820 --> 00:05:49.340
You know, you're like, oh, this is kind of--


00:05:49.340 --> 00:05:51.180
it's just omnipresent, but you don't


00:05:51.180 --> 00:05:52.700
have to think about it so much.


00:05:52.700 --> 00:05:53.900
You know, you're cold, and you hit Enter,


00:05:53.900 --> 00:05:55.180
and like, oh, I'm indented already.


00:05:55.180 --> 00:05:55.660
That's cool.


00:05:55.660 --> 00:05:56.820
Just keep typing, you know?


00:05:56.820 --> 00:05:59.060
So, you know, very neat.


00:05:59.060 --> 00:05:59.460
How about now?


00:05:59.460 --> 00:06:00.720
What are you doing these days?


00:06:00.720 --> 00:06:03.020
I mentioned something about the Space Force.


00:06:03.020 --> 00:06:04.620
>>Yeah, so I work for the Space Force.


00:06:04.620 --> 00:06:08.180
I'm actually an officer in the Space Force.


00:06:08.180 --> 00:06:10.700
I've been a career Air Force officer.


00:06:10.700 --> 00:06:12.940
I've been in the Air Force since 1995


00:06:12.940 --> 00:06:14.700
as an astronomical engineer.


00:06:14.700 --> 00:06:17.360
And then last year had an opportunity to transfer


00:06:17.360 --> 00:06:18.980
from the Air Force into the Space Force.


00:06:18.980 --> 00:06:21.100
And being an astronomical engineer


00:06:21.100 --> 00:06:23.180
and a guy who's worked in space my whole career,


00:06:23.180 --> 00:06:24.420
that was a no-brainer.


00:06:24.420 --> 00:06:26.260
- Yeah, it seems like exactly that.


00:06:26.260 --> 00:06:28.920
- That's exactly where I should be.


00:06:28.920 --> 00:06:32.060
And so today I'm an officer in the Space Force


00:06:32.060 --> 00:06:34.260
and my day job is I'm a chief engineer


00:06:34.260 --> 00:06:38.460
for an organization called Space Systems Command, which


00:06:38.460 --> 00:06:42.020
is part of the Space Force that develops and acquires


00:06:42.020 --> 00:06:45.180
all of our new satellite systems, rocket systems,


00:06:45.180 --> 00:06:47.900
ground systems, all of our networks and infrastructure,


00:06:47.900 --> 00:06:48.580
that kind of thing.


00:06:48.580 --> 00:06:49.700
So that's a lot of fun.


00:06:49.700 --> 00:06:53.220
I get to do a lot of fun engineering in my day job


00:06:53.220 --> 00:06:55.820
and get to do Python on the weekend.


00:06:55.820 --> 00:06:57.460
Yeah.


00:06:57.460 --> 00:07:00.500
Do you get to run any Python on any of the satellites?


00:07:00.500 --> 00:07:01.860
I know that some of the satellites


00:07:01.860 --> 00:07:07.100
controlled with Python, their API, not necessarily for the Space Force, but you know, like some


00:07:07.100 --> 00:07:08.580
of the scientific ones.


00:07:08.580 --> 00:07:09.580
Yeah.


00:07:09.580 --> 00:07:15.940
So none of the systems that I've used are using Python to actually directly interact


00:07:15.940 --> 00:07:17.740
with the satellite.


00:07:17.740 --> 00:07:22.700
But we are using Python in a number of different places on some of the apps that we run that


00:07:22.700 --> 00:07:28.460
help process data or analyze display data, do those kinds of things.


00:07:28.460 --> 00:07:31.440
the data science dashboardy thing that happens to data


00:07:31.440 --> 00:07:33.840
after it gets out of space.


00:07:33.840 --> 00:07:34.680
- Yeah, exactly.


00:07:34.680 --> 00:07:36.240
- Comes back, yeah.


00:07:36.240 --> 00:07:39.700
Cool, well, that sounds like a super, super fun job.


00:07:39.700 --> 00:07:42.700
And I guess, you know, I was talking to somebody


00:07:42.700 --> 00:07:46.200
at a get together just earlier this week.


00:07:46.200 --> 00:07:48.220
Everyone's kind of fascinated


00:07:48.220 --> 00:07:49.780
that I can have a job that is podcasting.


00:07:49.780 --> 00:07:50.620
They're like, "Okay, well,


00:07:50.620 --> 00:07:52.260
who are you interviewing this week?"


00:07:52.260 --> 00:07:55.460
So I'm gonna interview the guy who does cool Python stuff,


00:07:55.460 --> 00:07:57.660
and he works at the Space Force.


00:07:57.660 --> 00:07:58.980
And someone else is like, "Oh, that's amazing."


00:07:58.980 --> 00:08:01.580
And then someone else is, "What's the Space Force?"


00:08:01.580 --> 00:08:04.820
So maybe for those of us who don't know,


00:08:04.820 --> 00:08:06.020
we know what the Air Force is.


00:08:06.020 --> 00:08:06.980
What's the Space Force?


00:08:06.980 --> 00:08:07.880
- Yeah, sure.


00:08:07.880 --> 00:08:11.060
The Space Force is the newest of the military services.


00:08:11.060 --> 00:08:16.060
We were established just in December of 2019


00:08:16.060 --> 00:08:19.560
as sort of birthed out of the Air Force.


00:08:19.560 --> 00:08:24.220
And so the initial people that came over to Space Force


00:08:24.220 --> 00:08:25.320
came from the Air Force,


00:08:25.320 --> 00:08:27.580
although we've now brought in people


00:08:27.580 --> 00:08:31.220
from all the other services, Army, Marines, Navy,


00:08:31.220 --> 00:08:32.640
to be part of Space Force,


00:08:32.640 --> 00:08:35.240
people who transfer just like I did.


00:08:35.240 --> 00:08:39.360
And the job of the Space Force is to organize, train,


00:08:39.360 --> 00:08:42.280
and equip guardians, is what we call people


00:08:42.280 --> 00:08:46.280
in the Space Force, to do space operations for the nation.


00:08:46.280 --> 00:08:49.940
And so, you know, things like GPS, for example,


00:08:49.940 --> 00:08:51.280
which I know everybody's familiar with.


00:08:51.280 --> 00:08:54.600
If you pull out your phone and use Waze or a Maps app


00:08:54.600 --> 00:08:58.560
or even do banking, which all relies on GPS timing signals.


00:08:58.560 --> 00:08:59.480
Those kinds of things.


00:08:59.480 --> 00:09:02.320
We even used GPS in a corn maze recently.


00:09:02.320 --> 00:09:05.600
Yeah, so all of that is coming from a signal


00:09:05.600 --> 00:09:09.440
from a satellite in space that is run by the Space Force.


00:09:09.440 --> 00:09:11.840
And we do a lot of other things to weather,


00:09:11.840 --> 00:09:16.880
missile warning, communications, remote sensing,


00:09:16.880 --> 00:09:19.920
all sorts of different missions that the Space Force does.


00:09:19.920 --> 00:09:21.720
But we do all of the.


00:09:21.720 --> 00:09:26.500
The space systems, that support the rest of the services, you know,


00:09:26.500 --> 00:09:31.440
communications, navigation, location, all those kinds of things.


00:09:31.440 --> 00:09:32.840
That sounds fascinating.


00:09:32.840 --> 00:09:37.040
And I suspect that many of these things were happening often under the air force


00:09:37.040 --> 00:09:40.440
banner or some other, other banner, right?


00:09:40.440 --> 00:09:41.120
Yeah.


00:09:41.120 --> 00:09:43.360
And now it's just more formalized, right?


00:09:43.360 --> 00:09:44.680
It exactly.


00:09:44.680 --> 00:09:47.960
So the air force has been doing this mission for a long time.


00:09:48.240 --> 00:09:52.980
In fact, the Air Force originally designed and launched the GPS constellation that is


00:09:52.980 --> 00:09:57.160
still in operations today and is now run by the Space Force.


00:09:57.160 --> 00:10:01.900
But what we found was that space was becoming more and more important.


00:10:01.900 --> 00:10:07.500
You could certainly, everybody's familiar with what SpaceX and a lot of the other commercial


00:10:07.500 --> 00:10:08.800
space companies are doing.


00:10:08.800 --> 00:10:13.600
A lot of really exciting things going on, but a lot more happening in space.


00:10:13.600 --> 00:10:17.560
The importance of space to our economy and our nation is increasing.


00:10:17.560 --> 00:10:20.680
And quite frankly, the threat to all of that is increasing.


00:10:20.680 --> 00:10:26.320
A number of other countries have paid a lot of attention to what we're doing in space


00:10:26.320 --> 00:10:34.420
and they are actively working on ways to deny the US the ability to use some of those capabilities


00:10:34.420 --> 00:10:35.840
if they want to.


00:10:35.840 --> 00:10:41.320
We've seen some of that play out in things going on in Europe right now, in Ukraine,


00:10:41.320 --> 00:10:42.320
for example.


00:10:42.320 --> 00:10:46.860
So, because of the increased threat and the increase of importance of space


00:10:46.860 --> 00:10:51.620
to our economy and our, and our nation, we, we decided that we really wanted.


00:10:51.620 --> 00:10:54.340
A team that was focused only on space.


00:10:54.340 --> 00:10:55.340
And that's all we did.


00:10:55.340 --> 00:11:00.680
because for the air force, it was always, you know, an extra job in


00:11:00.680 --> 00:11:02.140
addition to everything else that they're doing.


00:11:02.140 --> 00:11:06.080
And so this, the only job space force has is.


00:11:06.080 --> 00:11:08.240
Yeah.


00:11:08.240 --> 00:11:10.240
Doing space operations for the country.


00:11:10.240 --> 00:11:13.240
And so we have guardians, as I mentioned,


00:11:13.240 --> 00:11:16.000
focused on doing that job day in and day out.


00:11:16.000 --> 00:11:18.780
- Well, very cool.


00:11:18.780 --> 00:11:21.280
It strikes me that this is one of the areas


00:11:21.280 --> 00:11:25.240
of the defense and military industry


00:11:25.240 --> 00:11:27.600
that is the least hands-on.


00:11:27.600 --> 00:11:30.880
It's the most, you almost never get to interact


00:11:30.880 --> 00:11:34.600
with things in space directly,


00:11:34.600 --> 00:11:36.920
right, even with cameras necessarily, right?


00:11:36.920 --> 00:11:39.320
And so it's a little bit different


00:11:39.320 --> 00:11:42.240
than, you know, running, running over a hill or something.


00:11:42.240 --> 00:11:43.940
It is different.


00:11:43.940 --> 00:11:47.580
And, and, you know, let me, I, first, I just want to add that, that


00:11:47.580 --> 00:11:50.840
anything I I'm, I'm excited about space force and happy to talk about it.


00:11:50.840 --> 00:11:54.600
But anything I say is my opinion and not necessarily the opinion of the


00:11:54.600 --> 00:11:56.400
space force, the department of defense.


00:11:56.400 --> 00:12:01.720
yeah, but I will tell you, you know, you're right, Michael, that,


00:12:01.720 --> 00:12:06.720
we, people that interact with the space domain as part of the space force,


00:12:06.820 --> 00:12:09.880
except for the very small number of astronauts we have that work with NASA,


00:12:09.880 --> 00:12:13.680
largely do that through a computer screen.


00:12:13.680 --> 00:12:18.840
We do that through a piece of glass, a keyboard and a network.


00:12:18.840 --> 00:12:23.760
And that makes the Space Force different than the other services,


00:12:23.760 --> 00:12:25.520
as you alluded to.


00:12:25.520 --> 00:12:32.860
But that also means that we really want a workforce that really understands that,


00:12:33.040 --> 00:12:35.320
right that understands the technical domain.


00:12:35.320 --> 00:12:37.880
That's really digitally fluent.


00:12:37.880 --> 00:12:40.280
Space Force is really focused on building


00:12:40.280 --> 00:12:42.360
digital service and having a


00:12:42.360 --> 00:12:44.760
digitally native workforce that really


00:12:44.760 --> 00:12:46.920
understands computers, understands


00:12:46.920 --> 00:12:48.920
coding, understands


00:12:48.920 --> 00:12:51.080
cloud infrastructures and you know, those


00:12:51.080 --> 00:12:53.240
kinds of things, all the underlying technologies


00:12:53.240 --> 00:12:54.360
that we need to do our job.


00:12:54.360 --> 00:12:56.840
We're really focused on building a


00:12:56.840 --> 00:12:58.960
workforce that understands those things.


00:12:58.960 --> 00:13:01.960
Yeah, that's what I was hinting as I feel like


00:13:02.240 --> 00:13:08.320
a lot of the coding skills are somewhat in the same realm


00:13:08.320 --> 00:13:10.680
as the kind of things that you all need to do.


00:13:10.680 --> 00:13:13.200
Probably just a ton of custom software as well.


00:13:13.200 --> 00:13:14.240
>>Yeah, definitely.


00:13:14.240 --> 00:13:15.840
We use a lot of commercial software,


00:13:15.840 --> 00:13:18.520
but we also do a lot of our own custom software.


00:13:18.520 --> 00:13:21.360
We have a couple of software factories


00:13:21.360 --> 00:13:25.840
where we've got people from the Space Force Guardians


00:13:25.840 --> 00:13:27.880
who actually write code for other Guardians


00:13:27.880 --> 00:13:30.880
to use as part of their day job.


00:13:30.880 --> 00:13:31.560
>>Nice.


00:13:31.560 --> 00:13:33.260
Well, if we have some extra time at the end,


00:13:33.260 --> 00:13:34.220
we'll come back to that.


00:13:34.220 --> 00:13:39.460
But let's switch over to our main topic, I guess.


00:13:39.460 --> 00:13:43.820
And let's start with the genesis of this idea.


00:13:43.820 --> 00:13:49.180
And you created this project called Textinator.


00:13:49.180 --> 00:13:52.080
And it's open source in Python, obviously,


00:13:52.080 --> 00:13:53.860
which is why we're talking about it.


00:13:53.860 --> 00:13:55.980
And I'll link to the GitHub repo.


00:13:55.980 --> 00:13:58.220
And it says-- the about for it says,


00:13:58.220 --> 00:14:01.860
simple macOS status bar, menu bar app


00:14:01.860 --> 00:14:05.200
to automatically detect text in screenshots,


00:14:05.200 --> 00:14:06.820
which is pretty awesome.


00:14:06.820 --> 00:14:10.120
So it's one of those apps that is just an icon


00:14:10.120 --> 00:14:14.380
in the upper right by the clock,


00:14:14.380 --> 00:14:16.860
would be in the task bar, a little hidden down there.


00:14:16.860 --> 00:14:19.060
If it was a Windows app, but it's a Mac app.


00:14:19.060 --> 00:14:21.340
So it lives up in the menu bar alone.


00:14:21.340 --> 00:14:24.220
And what does it do?


00:14:24.220 --> 00:14:26.740
- So it's really simple.


00:14:26.740 --> 00:14:29.640
If you take a screenshot, if Textinator is running


00:14:29.640 --> 00:14:32.440
and you take a screenshot, it will search that screenshot


00:14:32.440 --> 00:14:35.080
for any text that it finds in the screenshot


00:14:35.080 --> 00:14:37.040
and copy that text to the clipboard.


00:14:37.040 --> 00:14:39.160
That's all it does, super simple.


00:14:39.160 --> 00:14:42.680
But, you know, a useful thing, if you've got,


00:14:42.680 --> 00:14:46.460
trying to take a screenshot, there's text on the screen,


00:14:46.460 --> 00:14:49.280
like on a link on a video or something,


00:14:49.280 --> 00:14:51.760
and you can't copy and paste it,


00:14:51.760 --> 00:14:53.040
all you gotta do is screenshot it


00:14:53.040 --> 00:14:54.300
and Textinator will pick it up


00:14:54.300 --> 00:14:56.320
and stick it on your clipboard.


00:14:56.320 --> 00:14:57.160
- That's fantastic.


00:14:57.160 --> 00:14:58.960
Does it automatically capture,


00:14:58.960 --> 00:15:00.920
is it just constantly looking for screenshots


00:15:00.920 --> 00:15:05.360
and then clipboard, you know, doing text recognition


00:15:05.360 --> 00:15:06.400
and then clipboarding that?


00:15:06.400 --> 00:15:08.200
Or do you have to trigger it?


00:15:08.200 --> 00:15:10.560
- No, it'll do it all automatically.


00:15:10.560 --> 00:15:12.400
And what it's doing is it's using


00:15:12.400 --> 00:15:18.800
the Mac built in spotlight feature behind the scenes.


00:15:18.800 --> 00:15:22.200
And basically it's a query


00:15:22.200 --> 00:15:24.040
that's running in the background all the time.


00:15:24.040 --> 00:15:27.600
And the query says, anytime there's a new screenshot,


00:15:27.600 --> 00:15:29.840
send me an alert.


00:15:29.840 --> 00:15:32.440
And then so when it gets that alert from the operating system


00:15:32.440 --> 00:15:33.940
that there's a new screenshot,


00:15:33.940 --> 00:15:36.480
then it does the processing


00:15:36.480 --> 00:15:37.920
and copies everything to the clipboard.


00:15:37.920 --> 00:15:39.080
Otherwise it's just sitting there


00:15:39.080 --> 00:15:41.280
waiting for an alert to pop up.


00:15:41.280 --> 00:15:42.180
- Yeah, fantastic.


00:15:42.180 --> 00:15:45.680
I said this show sort of originated from a tweet.


00:15:45.680 --> 00:15:50.600
Just as a user, I talked about this app called TextSniper,


00:15:50.600 --> 00:15:53.440
which I thought was pretty cool in the Mac App Store


00:15:53.440 --> 00:15:57.320
that lets you kind of screenshot an area of text


00:15:57.320 --> 00:15:58.880
and will capture it.


00:15:58.880 --> 00:16:01.480
It costs money and you got to get it


00:16:01.480 --> 00:16:03.360
at the app store and so on.


00:16:03.360 --> 00:16:05.520
And you said in your tweet said,


00:16:05.520 --> 00:16:06.680
"That's a really cool idea."


00:16:06.680 --> 00:16:09.720
And it inspired me to create Textinator.


00:16:09.720 --> 00:16:11.800
I love that name as well.


00:16:11.800 --> 00:16:13.800
So, and I just think it's fascinating.


00:16:13.800 --> 00:16:17.240
You were able to knock this out pretty quickly in Python.


00:16:17.240 --> 00:16:20.560
- Yeah, the initial, it's grown a little bit


00:16:20.560 --> 00:16:22.920
'cause I've tried to put a few bells and whistles on it,


00:16:22.920 --> 00:16:27.240
But the initial, I knocked it out and, you know, Saturday afternoon, the initial


00:16:27.240 --> 00:16:32.600
capability, it was, you know, like 300 lines of code, and fairly simple.


00:16:32.600 --> 00:16:34.320
And it was fairly simple because.


00:16:34.320 --> 00:16:36.640
I don't have to do all the hard work.


00:16:36.640 --> 00:16:42.960
I'm calling Mac framework, API calls that are built into the Mac to do


00:16:42.960 --> 00:16:48.480
the, do the hard work of, Hey, find a screenshot, you know, detect the text,


00:16:48.480 --> 00:16:51.140
put the text on the clipboard, those kinds of things.


00:16:51.140 --> 00:16:54.540
And so it was actually fairly easy to throw together.


00:16:54.540 --> 00:16:58.220
And then I'm using another Python package called rumps


00:16:58.220 --> 00:17:01.280
that it does all the heavy lifting of actually,


00:17:01.280 --> 00:17:05.460
hey, putting an app into the menu bar with an icon


00:17:05.460 --> 00:17:07.140
and all those kinds of things.


00:17:07.140 --> 00:17:09.400
- Rumps is fantastic.


00:17:09.400 --> 00:17:11.780
It has such a ridiculous name,


00:17:11.780 --> 00:17:14.500
but it's so easy to build Mac apps with.


00:17:14.500 --> 00:17:18.420
- Yeah, I've used it for quite a few different things.


00:17:18.420 --> 00:17:21.460
I've got a couple apps running right now on my Mac


00:17:21.460 --> 00:17:24.740
that I use every day that I built out of Python and Rumps.


00:17:24.740 --> 00:17:26.660
It's a really useful tool.


00:17:26.660 --> 00:17:27.620
- That's cool.


00:17:27.620 --> 00:17:29.300
I'm starting to think of more that maybe I should create.


00:17:29.300 --> 00:17:30.980
By the way, I have one as well,


00:17:30.980 --> 00:17:32.940
and maybe I'll talk about it a bit


00:17:32.940 --> 00:17:35.900
when we compare notes on yours.


00:17:35.900 --> 00:17:36.720
Yeah, super cool.


00:17:36.720 --> 00:17:38.460
This is so useful.


00:17:38.460 --> 00:17:41.380
There's all these different times,


00:17:41.380 --> 00:17:43.340
I really just want that text.


00:17:43.340 --> 00:17:47.580
And in macOS, you hit Command + Shift + 4,


00:17:47.580 --> 00:17:49.780
and you can select just a region of the screen.


00:17:49.780 --> 00:17:51.460
You don't have to screenshot the whole screen,


00:17:51.460 --> 00:17:55.180
which you'd get like the menu bar and like the navigation.


00:17:55.180 --> 00:17:57.700
You can just say, I want this section


00:17:57.700 --> 00:18:00.020
and it will grab that and then turn it into text,


00:18:00.020 --> 00:18:01.640
which is just amazing.


00:18:01.640 --> 00:18:05.900
I've used it for watching a video course


00:18:05.900 --> 00:18:07.740
or some kind of presentation.


00:18:07.740 --> 00:18:08.900
I'm like, I want that URL.


00:18:08.900 --> 00:18:11.260
They said, go to the huge long URL,


00:18:11.260 --> 00:18:16.260
just select, snap, paste the text of the URL and go.


00:18:16.260 --> 00:18:23.620
and go, right? Yeah, exactly. It's so useful for those kinds of things. And you know, I do want to


00:18:23.620 --> 00:18:29.980
add this was inspired by you mentioning TextSniper, I think on the Python Bytes podcast, right? And


00:18:29.980 --> 00:18:34.780
TextSniper is a great app. And it's, you know, it's only like 10 bucks. So you should definitely


00:18:34.780 --> 00:18:40.140
check it out. But I had already, when you mentioned that, I had already been working with,


00:18:40.140 --> 00:18:45.100
with, it's playing around with the vision framework, which is the max,


00:18:45.100 --> 00:18:50.900
ML powered, computer vision.


00:18:50.900 --> 00:18:51.500
Yeah.


00:18:51.500 --> 00:18:51.740
Right.


00:18:51.740 --> 00:18:52.020
Yeah.


00:18:52.020 --> 00:18:52.460
Yeah.


00:18:52.460 --> 00:18:55.620
And so I've been playing around with that and I, and I knew that it would, it was


00:18:55.620 --> 00:19:01.500
fairly easy to do this, you know, optical characterization, recognition


00:19:01.500 --> 00:19:03.580
tech, you know, and grab the text from a picture.


00:19:03.580 --> 00:19:07.140
So I thought, well, I bet you I can recreate that.


00:19:07.140 --> 00:19:10.740
And I did play around a little bit to try to be able to actually draw the crosshairs


00:19:10.740 --> 00:19:14.060
on the screen myself and let you do that.


00:19:14.060 --> 00:19:18.700
And in Python, that was actually kind of hard to do.


00:19:18.700 --> 00:19:23.980
But then it dawned on me, well, the Mac already comes with the ability to do that, the screenshot


00:19:23.980 --> 00:19:24.980
app.


00:19:24.980 --> 00:19:29.620
So now then I just had to figure out, okay, how do I grab that screen when it happens?


00:19:29.620 --> 00:19:33.700
How do you know there was a screenshot and then how do you get the text?


00:19:33.700 --> 00:19:37.240
It turns out that that's super easy to do.


00:19:37.240 --> 00:19:40.680
If you tell the Mac, tell me when there's a new screenshot.


00:19:40.680 --> 00:19:46.240
You set up a query that basically runs just like you would if you use spotlight on the


00:19:46.240 --> 00:19:48.840
Mac and it runs in the background.


00:19:48.840 --> 00:19:54.640
And anytime there's some new thing that matches your query, it lets you know and then it runs


00:19:54.640 --> 00:19:55.640
your code.


00:19:55.640 --> 00:19:56.640
Yeah.


00:19:56.640 --> 00:19:57.640
That's amazing.


00:19:57.640 --> 00:20:00.480
How easy it was to knock out.


00:20:00.480 --> 00:20:07.120
the Vision Framework and some of the ML tools, they're probably using the neural engine that's


00:20:07.120 --> 00:20:12.080
built into the latest chips as well. They're probably taking advantage of that.


00:20:12.080 --> 00:20:16.840
Yeah, I'm sure they are. I've got an older MacBook and they run fine on there too, but


00:20:16.840 --> 00:20:23.120
they're using the GPU on that. So it uses whatever hardware you have. And I'm sure if


00:20:23.120 --> 00:20:29.760
you've got an M1 or one of the newer Macs, it's using the neural engine. And it's really


00:20:29.760 --> 00:20:36.080
surprising how accurate it is and how fast it is.


00:20:36.080 --> 00:20:38.960
They've done a really good job with that.


00:20:38.960 --> 00:20:40.600
Yeah.


00:20:40.600 --> 00:20:44.840
As we look at this, we'll also see people talk about, well,


00:20:44.840 --> 00:20:45.800
Python's slow.


00:20:45.800 --> 00:20:48.160
So how could you use Python to do this thing?


00:20:48.160 --> 00:20:50.240
I mean, I think that's always a funny statement


00:20:50.240 --> 00:20:52.920
to say Python is slow, because it's slow until it's


00:20:52.920 --> 00:20:56.680
as fast as C or as fast as a rocket.


00:20:56.680 --> 00:20:59.840
It lives in these weird bimodal worlds, right?


00:20:59.840 --> 00:21:02.160
It's like really slowly all of a sudden, oh yeah, just as fast.


00:21:02.160 --> 00:21:02.840
Yeah.


00:21:02.840 --> 00:21:03.360
All right.


00:21:03.360 --> 00:21:04.160
Yeah.


00:21:04.160 --> 00:21:09.200
I, so me, you know, I've never found Python to be slow, but I guess it


00:21:09.200 --> 00:21:10.000
depends what you're doing with it.


00:21:10.000 --> 00:21:15.000
I'm, I'm not doing really big, heavy data crunching, but you know, just as in this


00:21:15.000 --> 00:21:20.160
example, it's a Python app that's doing the text detection, but the text


00:21:20.160 --> 00:21:21.720
detection is not running in Python.


00:21:22.040 --> 00:21:28.520
That's running in Objective-C or Swift or whatever native language that Apple wrote it in.


00:21:28.520 --> 00:21:30.320
And we're just calling that from Python.


00:21:30.320 --> 00:21:35.800
So the only slow part of that is actually setting up that call, to translate between


00:21:35.800 --> 00:21:39.040
Python types and Objective-C types and go back and forth.


00:21:39.040 --> 00:21:45.960
and for, you know, there's a really great bridge for it called PyOBJC, which


00:21:45.960 --> 00:21:47.880
is short for PyObjective-C.


00:21:48.120 --> 00:21:52.040
Objective-C is one of the languages that has been around the Mac for a long time,


00:21:52.040 --> 00:21:57.400
that Apple has used long time, though they're migrating a lot more to Swift now.


00:21:57.400 --> 00:22:04.360
But PyOBJC does all that sort of translation across the bridge between Python and Objective-C.


00:22:04.360 --> 00:22:08.160
So you don't, for the most part, don't really even really have to think about it.


00:22:08.160 --> 00:22:08.760
Yeah, exactly.


00:22:08.760 --> 00:22:13.560
So what you did is you basically saw there was a screenshot and you say, you know,


00:22:13.560 --> 00:22:18.060
send that information off to the Objective-C platform layer,


00:22:18.060 --> 00:22:20.400
and it just goes natively and does its thing, which is--


00:22:20.400 --> 00:22:21.400
>>Exactly.


00:22:21.400 --> 00:22:24.000
>>It's a pretty interesting bit of coordination.


00:22:24.000 --> 00:22:27.600
You've got rumps coordinating, working with the menu bar API,


00:22:27.600 --> 00:22:31.760
and you've got these various low-level OS platforms


00:22:31.760 --> 00:22:34.160
that you're talking to through Pi Objective-C.


00:22:34.160 --> 00:22:36.440
And yeah, we'll see how you built it up,


00:22:36.440 --> 00:22:39.960
but there's a lot of neat moving pieces there.


00:22:39.960 --> 00:22:43.200
So let's, I guess, start off first with,


00:22:43.200 --> 00:22:48.000
let's start with Python on the Mac,


00:22:48.000 --> 00:22:50.320
'cause I know you have some opinions on


00:22:50.320 --> 00:22:51.600
how to get started there.


00:22:51.600 --> 00:22:53.440
- Yeah.


00:22:53.440 --> 00:22:57.880
So it's a good experience on the Mac,


00:22:57.880 --> 00:23:01.960
but it does take a little bit of finagling, I think,


00:23:01.960 --> 00:23:03.800
to get Python right.


00:23:03.800 --> 00:23:05.560
And the first thing you gotta start with is,


00:23:05.560 --> 00:23:07.880
hey, which Python do I put on, right?


00:23:07.880 --> 00:23:09.680
And how do I install it?


00:23:09.680 --> 00:23:12.440
There's a number of different ways.


00:23:12.440 --> 00:23:15.040
There's a thing called Homebrew for the Mac, which


00:23:15.040 --> 00:23:19.760
is a package manager that installs apps and command line


00:23:19.760 --> 00:23:21.520
tools on the Mac.


00:23:21.520 --> 00:23:22.280
And that's great.


00:23:22.280 --> 00:23:27.680
If any kind of command line tool you need in the terminal,


00:23:27.680 --> 00:23:30.240
Homebrew can install it pretty fast.


00:23:30.240 --> 00:23:31.900
And so what I've seen is a lot of people


00:23:31.900 --> 00:23:34.680
are tempted just to install Python that way.


00:23:34.680 --> 00:23:37.480
Unfortunately, that can run into a number of different problems


00:23:37.480 --> 00:23:40.480
because Homebrew also uses that same Python


00:23:40.480 --> 00:23:44.240
to manage a lot of the other packages


00:23:44.240 --> 00:23:45.840
and things that it's installing.


00:23:45.840 --> 00:23:48.480
And so it might change that Python,


00:23:48.480 --> 00:23:51.440
update it, change something, and you don't realize it,


00:23:51.440 --> 00:23:53.780
and then now all of your stuff stops working.


00:23:53.780 --> 00:23:55.500
So after a few false starts with that,


00:23:55.500 --> 00:24:00.440
I decided just don't use the Homebrew Python for the Mac.


00:24:00.440 --> 00:24:02.200
And what I recommend for most people


00:24:02.200 --> 00:24:04.560
is just download it from python.org,


00:24:04.560 --> 00:24:07.540
and you get the Mac installer, install it and run it.


00:24:07.540 --> 00:24:11.680
I, because I develop a bunch of different


00:24:11.680 --> 00:24:13.240
open source packages and want to test them


00:24:13.240 --> 00:24:14.840
on different versions of Python,


00:24:14.840 --> 00:24:19.040
I build my own Python and I use pyenv to manage that


00:24:19.040 --> 00:24:22.100
and that way I can run a number of different versions of it.


00:24:22.100 --> 00:24:25.800
Anaconda is also another great one for the Mac,


00:24:25.800 --> 00:24:29.760
but you just, you really need to understand


00:24:29.760 --> 00:24:32.680
sort of the ins and outs of which Python you picked


00:24:32.680 --> 00:24:35.440
and what it's good for.


00:24:35.440 --> 00:24:36.360
- Yeah.


00:24:36.360 --> 00:24:38.480
So there's an article that you linked to


00:24:38.480 --> 00:24:41.520
talking about this as homebrew Python is not for you,


00:24:41.520 --> 00:24:43.120
speaking to you as a developer.


00:24:43.120 --> 00:24:46.340
This was by Justin Mayer.


00:24:46.340 --> 00:24:47.880
It's interesting that basically


00:24:47.880 --> 00:24:50.240
fundamental problem that he talks about


00:24:50.240 --> 00:24:54.520
is that homebrew might change the underlying Python version


00:24:54.520 --> 00:24:55.720
even if you don't ask it to


00:24:55.720 --> 00:24:58.960
'cause you might brew install,


00:24:58.960 --> 00:25:01.600
I don't know, glances or some other thing that needs Python.


00:25:01.600 --> 00:25:03.640
And then it goes, well, great, we got a good new Python


00:25:03.640 --> 00:25:04.800
for that, right?


00:25:04.800 --> 00:25:08.840
And that could potentially break your virtual environments,


00:25:08.840 --> 00:25:10.040
which is not amazing.


00:25:10.040 --> 00:25:10.540
Yeah.


00:25:10.540 --> 00:25:16.480
Yeah, anyway, people can check this out and see what they think


00:25:16.480 --> 00:25:17.920
about this.


00:25:17.920 --> 00:25:22.200
Yeah, I recommend that you don't use Homebrew for developing.


00:25:22.200 --> 00:25:23.560
Homebrew is great for everything.


00:25:23.560 --> 00:25:24.840
I use it every day.


00:25:24.840 --> 00:25:28.280
But if you want to develop Python, get your own Python,


00:25:28.280 --> 00:25:32.600
that is only gonna get updated if you decide to update it.


00:25:32.600 --> 00:25:35.080
- That makes a lot of sense.


00:25:35.080 --> 00:25:37.680
You know, for me, I'm okay


00:25:37.680 --> 00:25:41.700
if my virtual environments change,


00:25:41.700 --> 00:25:46.700
I have a whole bunch of hotkeys and shortcuts and aliases


00:25:46.700 --> 00:25:51.000
that I can just recreate, reset up those things.


00:25:51.000 --> 00:25:53.480
So if something changed, I'll just drop into the terminal


00:25:53.480 --> 00:25:55.520
and blow it away and recreate it.


00:25:56.600 --> 00:25:58.900
But that's because I've been doing it for a long time.


00:25:58.900 --> 00:26:01.160
I know a lot of people, whether or not


00:26:01.160 --> 00:26:03.240
a virtual environment is active, where is Python,


00:26:03.240 --> 00:26:04.740
what is installed, all those things


00:26:04.740 --> 00:26:08.280
become very frustrating to people.


00:26:08.280 --> 00:26:12.720
So this could help potentially avoid those troubles.


00:26:12.720 --> 00:26:14.880
Out of curiosity, I did a brew list.


00:26:14.880 --> 00:26:16.520
See what I got installed here.


00:26:16.520 --> 00:26:20.800
Probably got about 120 different things installed.


00:26:20.800 --> 00:26:23.840
So yeah, like Richie in the audience, which


00:26:23.840 --> 00:26:26.200
says a brew is my go-to.


00:26:26.200 --> 00:26:28.440
I'm there with it as well.


00:26:28.440 --> 00:26:33.440
So the article, by the way, mentions this thing,


00:26:33.440 --> 00:26:38.140
which I have not used, ASDF, which is,


00:26:38.140 --> 00:26:41.120
I don't even know what to make of the name.


00:26:41.120 --> 00:26:42.520
I mean, it's just like, I just,


00:26:42.520 --> 00:26:44.640
just hit left fingers just go down


00:26:44.640 --> 00:26:47.040
and this thing on my app, right?


00:26:47.040 --> 00:26:49.480
But apparently this is about installing,


00:26:49.480 --> 00:26:54.480
you can use this to install different tools


00:26:54.520 --> 00:27:01.080
frameworks basically it's for CLI for managing different run times of Ruby and


00:27:01.080 --> 00:27:04.240
Perl and there's a plugin for Python. Have you played with this?


00:27:04.240 --> 00:27:08.600
I have not. It looks really cool but I've got my Mac to the point where it


00:27:08.600 --> 00:27:10.600
works and I just don't mess with it.


00:27:10.600 --> 00:27:16.760
Mine is so janky honestly just as a sidebar talking about this is I got this


00:27:16.760 --> 00:27:22.600
this is a Mac mini M1 and I got it in or I ordered it right when it came out


00:27:22.600 --> 00:27:24.840
basically or a week after.


00:27:24.840 --> 00:27:25.880
And so I got it right away.


00:27:25.880 --> 00:27:29.520
And many of the things that you would pip install,


00:27:29.520 --> 00:27:31.760
or certainly brew install, it would say,


00:27:31.760 --> 00:27:33.640
well, we don't have that for your platform.


00:27:33.640 --> 00:27:34.600
And I'm like, ah.


00:27:34.600 --> 00:27:37.800
It took about a month before I could reliably pip install


00:27:37.800 --> 00:27:40.080
everything I needed, because the wheel didn't exist


00:27:40.080 --> 00:27:43.960
for the ARM64 of whatever.


00:27:43.960 --> 00:27:47.880
And so I've got the Intel version of brew put on here.


00:27:47.880 --> 00:27:53.640
and then I've got the C++ tools for Apple Silicon.


00:27:53.640 --> 00:27:55.840
And so when I try to do certain things that drop down


00:27:55.840 --> 00:27:58.240
to the compiler, like pyenv, which I've tried,


00:27:58.240 --> 00:28:02.360
I can't get it to work, there's some mispatch


00:28:02.360 --> 00:28:05.920
about the compiler flags and what platform it thinks it's on.


00:28:05.920 --> 00:28:08.880
I'm tempted to just reformat the whole computer now


00:28:08.880 --> 00:28:10.040
that everything's stabilized.


00:28:10.040 --> 00:28:12.960
But I am waiting until October, because if they


00:28:12.960 --> 00:28:15.040
ship a new, much, much better one,


00:28:15.040 --> 00:28:16.800
I might not even go through that process.


00:28:16.800 --> 00:28:20.880
But yeah, yeah, I would love to use pie in V. I haven't been able to get it to work.


00:28:20.880 --> 00:28:23.800
Maybe asdf is the thing to do.


00:28:23.800 --> 00:28:25.080
I'll give it a try.


00:28:25.080 --> 00:28:26.200
Yeah, maybe we're trying.


00:28:26.200 --> 00:28:29.040
Certainly worth trying, I would say.


00:28:29.040 --> 00:28:36.120
Now, that's great for creating and getting your Python there.


00:28:36.120 --> 00:28:46.480
One of the things that first, one of the first things I guess that came to mind when I thought about what your app does, I'm like, Oh, oh, this is going to be really tricky.


00:28:46.480 --> 00:28:51.380
because I can get, say, a little rumps app to run,


00:28:51.380 --> 00:28:53.240
but when you really get down to it,


00:28:53.240 --> 00:28:54.300
there's a lot of things about,


00:28:54.300 --> 00:28:56.620
is it from a signed developer?


00:28:56.620 --> 00:28:59.340
You know, what permissions does it request?


00:28:59.340 --> 00:29:02.000
Like, does it request the VS server


00:29:02.000 --> 00:29:05.340
or access your file system or, you know,


00:29:05.340 --> 00:29:06.180
look at the clipboard,


00:29:06.180 --> 00:29:10.040
all these different things can get a little bit tricky.


00:29:10.040 --> 00:29:12.340
You want to talk about this permissions a bit?


00:29:12.340 --> 00:29:13.380
- Yeah, sure.


00:29:13.380 --> 00:29:15.720
And that's a tricky thing for every back app,


00:29:15.720 --> 00:29:18.060
whether it's in Python or not.


00:29:18.060 --> 00:29:18.560
Right.


00:29:18.560 --> 00:29:33.880
And so there's a, I guess, you know, it's a good, good thing and a bad thing there from it, from a user's perspective, Apple's done a really good job locking down the computer in privacy, make sure that apps cannot access your data unless you explicitly allow them to access your data.


00:29:33.880 --> 00:29:38.800
From a developer's perspective, that means apps can't access your data unless you explicitly allow it.


00:29:38.800 --> 00:29:41.360
So you've got to keep that in mind as a developer,


00:29:41.360 --> 00:29:45.720
that you've got to make sure that your app has the right permissions.


00:29:45.720 --> 00:29:48.520
And so there's a couple of different ways to do that.


00:29:48.520 --> 00:29:53.720
Every app that that's a dot app bundle that ships on the Mac has an info dot


00:29:53.720 --> 00:29:56.480
P list, a property list file.


00:29:56.480 --> 00:30:01.480
That's basically just a dictionary of key values and that tell the app,


00:30:01.480 --> 00:30:04.800
you know, various settings for the app.


00:30:05.040 --> 00:30:07.520
A couple of those things are permissions,


00:30:07.520 --> 00:30:09.600
are entitlements that you need to request and say,


00:30:09.600 --> 00:30:11.960
hey, I want my app to be able to do this.


00:30:11.960 --> 00:30:13.280
For example, for Textinator,


00:30:13.280 --> 00:30:16.520
one of the things it does is request access to the desktop.


00:30:16.520 --> 00:30:19.000
And it'll pop up and then you can grant access


00:30:19.000 --> 00:30:20.040
to the desktop.


00:30:20.040 --> 00:30:24.600
But until then, it won't be able to see the desktop.


00:30:24.600 --> 00:30:25.440
And I--


00:30:25.440 --> 00:30:27.160
- Presumably because the default behavior


00:30:27.160 --> 00:30:29.240
of taking a screenshot is to drop the file


00:30:29.240 --> 00:30:30.160
onto the desktop.


00:30:30.160 --> 00:30:32.840
So you need to be able to go hunt for those files, right?


00:30:32.840 --> 00:30:39.340
Yeah. In fact, when I first got the first version of Texanator working, it wasn't doing that properly.


00:30:39.340 --> 00:30:42.620
And so I was doing screens, taking screenshots and it never found them.


00:30:42.620 --> 00:30:46.640
And because it was, it just couldn't see the disc that the screenshots were happening.


00:30:46.640 --> 00:30:54.640
But, you know, the whole query system is smart enough to say, Hey, you're, you don't have permission to see the screenshot.


00:30:54.640 --> 00:30:55.860
So I'm not even gonna tell you about them.


00:30:55.860 --> 00:30:59.360
So it was never even getting alerted that it was getting a screenshot.


00:30:59.360 --> 00:31:01.320
And so I had to get that sorted out.


00:31:01.660 --> 00:31:06.060
And then if you can change the default location


00:31:06.060 --> 00:31:07.280
of a screenshot and put it somewhere else.


00:31:07.280 --> 00:31:08.340
And if you do that,


00:31:08.340 --> 00:31:11.380
you actually have to go into the system settings,


00:31:11.380 --> 00:31:12.540
add the privacy settings


00:31:12.540 --> 00:31:15.480
and actually give Texanator full disk access


00:31:15.480 --> 00:31:19.060
so that it can see where those screenshots are,


00:31:19.060 --> 00:31:21.440
if they're outside of your home directory.


00:31:21.440 --> 00:31:24.420
- Yeah, there is a screenshot application.


00:31:24.420 --> 00:31:28.820
And if you run it, basically that's like your preferences


00:31:28.820 --> 00:31:30.220
for, it's not just a hockey,


00:31:30.220 --> 00:31:31.780
but you can go and change your preferences


00:31:31.780 --> 00:31:33.020
for the screenshots.


00:31:33.020 --> 00:31:34.060
- Yeah.


00:31:34.060 --> 00:31:35.740
You can, there's a property list setting.


00:31:35.740 --> 00:31:37.380
You can do it from the command line as well,


00:31:37.380 --> 00:31:41.820
but yeah, the screenshot app is the easiest way to do that.


00:31:41.820 --> 00:31:42.660
- Yeah.


00:31:42.660 --> 00:31:47.420
Okay, so basically you go through the info.plist


00:31:47.420 --> 00:31:52.140
and you just express, I need access to the disk,


00:31:52.140 --> 00:31:54.780
or do you try to get there and then macOS says,


00:31:54.780 --> 00:31:55.820
hey, this thing is trying to do it.


00:31:55.820 --> 00:31:56.660
Do you want to let it--


00:31:56.660 --> 00:31:58.220
- Yeah, so what I did in Textinator is one,


00:31:58.220 --> 00:32:06.380
In the info.plist, what you actually put in there is the message that will get shown to


00:32:06.380 --> 00:32:10.280
the user when they actually try to access the desktop or whatever it is that you're


00:32:10.280 --> 00:32:11.280
trying to do.


00:32:11.280 --> 00:32:12.280
Right.


00:32:12.280 --> 00:32:17.420
And so what I have Textinator do is when it first fires up, it tries to access the desktop


00:32:17.420 --> 00:32:20.980
to force that message to pop up so that you grant right away.


00:32:20.980 --> 00:32:25.280
Otherwise, it'll never see the screenshots.


00:32:25.280 --> 00:32:27.080
So that's an easy way to just, you know,


00:32:27.080 --> 00:32:28.940
to force the user that way.


00:32:28.940 --> 00:32:30.340
As soon as they start it,


00:32:30.340 --> 00:32:31.760
you've already got their attention.


00:32:31.760 --> 00:32:33.360
It'll pop up a dialogue box and say,


00:32:33.360 --> 00:32:35.480
hey, Textinator wants to access the desktop,


00:32:35.480 --> 00:32:37.860
allow, and then now it has access.


00:32:37.860 --> 00:32:42.680
- I'm always suspicious of apps that pop up these little,


00:32:42.680 --> 00:32:44.760
you know, enter your admin password.


00:32:44.760 --> 00:32:45.600
- Yeah.


00:32:45.600 --> 00:32:49.680
- For whatever reason, but they do it just out of the blue.


00:32:49.680 --> 00:32:51.800
You know, it's one thing, like if I launch a new app


00:32:51.800 --> 00:32:53.360
and it says, there's an update, do you want to update?


00:32:53.360 --> 00:32:54.800
You say yes, and it'll pop up.


00:32:54.800 --> 00:32:57.460
you're like, yep, this is it trying to update itself.


00:32:57.460 --> 00:33:00.460
But if, you know, it's running it just behind the scenes,


00:33:00.460 --> 00:33:01.660
doesn't update or something,


00:33:01.660 --> 00:33:02.620
oh, we need your password.


00:33:02.620 --> 00:33:03.460
You're like, hmm.


00:33:03.460 --> 00:33:04.300
- Yeah, no.


00:33:04.300 --> 00:33:05.120
(laughs)


00:33:05.120 --> 00:33:06.180
- I don't know what's going on here.


00:33:06.180 --> 00:33:07.780
So I think, anyway, the reason I bring this up


00:33:07.780 --> 00:33:09.100
is I think it's a good idea to like,


00:33:09.100 --> 00:33:10.780
as they're interacting with it,


00:33:10.780 --> 00:33:13.180
just get those out of the way straight away.


00:33:13.180 --> 00:33:14.020
- Yeah, exactly.


00:33:14.020 --> 00:33:16.060
Otherwise, you're right.


00:33:16.060 --> 00:33:17.460
Well, text editor, once, you know,


00:33:17.460 --> 00:33:20.580
if it pops up later on and you'd forgotten all about it,


00:33:20.580 --> 00:33:23.340
it does definitely look suspicious, so.


00:33:23.340 --> 00:33:29.060
I'm a little unsure I should have gone in and installed this, but no, like if it's a


00:33:29.060 --> 00:33:31.060
timely one, it's okay.


00:33:31.060 --> 00:33:32.060
Yeah.


00:33:32.060 --> 00:33:41.300
The other thing about installing apps is that they have to be signed.


00:33:41.300 --> 00:33:44.820
You get this really scary when you try to open it, you'll get a really scary warning


00:33:44.820 --> 00:33:49.940
saying, "Hey, this is signed by an unknown developer.


00:33:49.940 --> 00:33:51.900
It'll destroy your computer.


00:33:51.900 --> 00:33:52.900
Don't open."


00:33:52.900 --> 00:33:57.540
And you actually have to right click and say open and then say, yes, I really want to open


00:33:57.540 --> 00:33:58.540
this thing.


00:33:58.540 --> 00:33:59.860
And you only have to do that once.


00:33:59.860 --> 00:34:02.740
But the first time you do it, it does give you kind of a scary warning.


00:34:02.740 --> 00:34:07.060
So you do need to know, hey, where is this code coming from that I'm going to try to


00:34:07.060 --> 00:34:08.060
run?


00:34:08.060 --> 00:34:13.980
So you built it with the ultimate, you built the app bundle with the Py2 app, right?


00:34:13.980 --> 00:34:15.300
Yes, that's right.


00:34:15.300 --> 00:34:16.300
Yeah.


00:34:16.300 --> 00:34:20.420
I wonder if there's a way to sign, if you have a developer account, if there's a way


00:34:20.420 --> 00:34:21.420
to sign that.


00:34:21.420 --> 00:34:22.760
I think you could.


00:34:22.760 --> 00:34:25.020
I don't have an Apple developer account.


00:34:25.020 --> 00:34:27.120
that's something you have to pay for.


00:34:27.120 --> 00:34:31.380
So I just, then I just tinker around, so I don't, I haven't bothered with that.


00:34:31.380 --> 00:34:36.480
so I it's mine is self-signed, but yes, you can, or you could do it.


00:34:36.480 --> 00:34:42.180
after the fact you could re-sign the app using the Apple, signing tools,


00:34:42.180 --> 00:34:45.340
which you can run from the command line and then re-sign the app with


00:34:45.340 --> 00:34:48.440
your developer signature, and you could even do that and notarize it as well.


00:34:48.440 --> 00:34:50.040
Yeah.


00:34:50.100 --> 00:34:52.060
Then it would, it would just run with no warning.


00:34:52.060 --> 00:34:53.380
- It would just run, yeah.


00:34:53.380 --> 00:34:55.540
- Yeah, because sometimes depending on how you run it,


00:34:55.540 --> 00:34:58.480
it won't give you the option to run anyway.


00:34:58.480 --> 00:35:01.200
Like if you click, if it's in the little download section


00:35:01.200 --> 00:35:03.780
and you just pop up that little fan and you click it,


00:35:03.780 --> 00:35:05.660
sometimes it'll just go, this is from an unknown developer,


00:35:05.660 --> 00:35:06.580
we won't run it.


00:35:06.580 --> 00:35:08.500
But if you right click and say run, it'll say,


00:35:08.500 --> 00:35:09.820
oh, are you sure you want to run it?


00:35:09.820 --> 00:35:10.660
- Yeah.


00:35:10.660 --> 00:35:13.180
- Yeah, so it's, it can be annoying.


00:35:13.180 --> 00:35:15.420
It can be a bit of a roadblock.


00:35:15.420 --> 00:35:19.300
But what are you gonna do?


00:35:19.300 --> 00:35:22.060
- Yeah, and that's something to keep in mind if you,


00:35:22.060 --> 00:35:24.740
you know, a lot of things that Python developers do,


00:35:24.740 --> 00:35:25.740
sometimes I know I do this,


00:35:25.740 --> 00:35:29.420
is whip out a little tool to help a family member


00:35:29.420 --> 00:35:30.500
or a friend or something, right?


00:35:30.500 --> 00:35:33.140
And so if you're gonna send them something to run,


00:35:33.140 --> 00:35:35.460
you've got to make sure you walk them through, okay?


00:35:35.460 --> 00:35:38.040
You've got to right click and then say open,


00:35:38.040 --> 00:35:40.000
and then click allow access to the desktop


00:35:40.000 --> 00:35:42.060
or whatever it is that you're trying to do.


00:35:42.060 --> 00:35:44.880
- Exactly, or if you're building this app for your club


00:35:44.880 --> 00:35:48.100
or your kids football team or soccer team


00:35:48.100 --> 00:35:50.060
or whatever, right?


00:35:50.060 --> 00:35:52.460
Then you're handing it off to people


00:35:52.460 --> 00:35:56.020
who don't necessarily know that it's trustworthy


00:35:56.020 --> 00:35:56.860
or how to make it go,


00:35:56.860 --> 00:35:59.460
but you kind of got to talk them through it.


00:35:59.460 --> 00:36:01.540
It's probably if you have a developer account,


00:36:01.540 --> 00:36:03.660
it probably would be cool to do.


00:36:03.660 --> 00:36:06.260
I say that as somebody who has an Apple developer account


00:36:06.260 --> 00:36:08.300
and a Rumps app and it's not signed.


00:36:08.300 --> 00:36:10.420
So I should probably figure it out.


00:36:10.420 --> 00:36:11.980
But in theory, I think it would be cool.


00:36:11.980 --> 00:36:15.060
I'm intrigued on how I might go about doing that now.


00:36:15.060 --> 00:36:17.540
- Yeah, I think it's, I don't think it's that hard.


00:36:17.540 --> 00:36:21.320
I think you can just run the signing tools


00:36:21.320 --> 00:36:23.820
and add your signature on there.


00:36:23.820 --> 00:36:25.900
- Yeah, well, it just has to be trusted


00:36:25.900 --> 00:36:27.740
from something that Apple trusts, right?


00:36:27.740 --> 00:36:28.800
- Yeah.


00:36:28.800 --> 00:36:31.000
- Yeah, so let's talk about Py2App real quick.


00:36:31.000 --> 00:36:36.000
So to me, there's a bit of a danger


00:36:36.000 --> 00:36:40.140
that I might get into some ranty sidetracks here in the show


00:36:40.140 --> 00:36:43.420
but to me, I think it's a really,


00:36:43.420 --> 00:36:46.900
a big hole in Python's capabilities.


00:36:46.900 --> 00:36:49.380
let's put it that way, that there's not a way to say,


00:36:49.380 --> 00:36:52.420
press a button or run a command,


00:36:52.420 --> 00:36:55.140
and then I have a binary thing I give to people


00:36:55.140 --> 00:36:59.720
that from their perspective is an application with an icon


00:36:59.720 --> 00:37:02.020
that goes into their start menu or their dock,


00:37:02.020 --> 00:37:05.460
that they click it and it comes out.


00:37:05.460 --> 00:37:07.780
It does things, or they even just run the command line


00:37:07.780 --> 00:37:09.580
and it does things, right?


00:37:09.580 --> 00:37:13.220
The ability to send somebody an application


00:37:13.220 --> 00:37:18.140
that was created with Python is super lacking


00:37:18.140 --> 00:37:20.660
if they're not a developer on the other end receiving it


00:37:20.660 --> 00:37:23.200
or not a server admin receiving it.


00:37:23.200 --> 00:37:26.180
- Yeah, that's very true.


00:37:26.180 --> 00:37:29.420
So, but I'll add one caveat to that, Michael.


00:37:29.420 --> 00:37:31.940
If it's a command line tool,


00:37:31.940 --> 00:37:34.980
what I found is I've defaulted now just to use PipX.


00:37:34.980 --> 00:37:35.820
- Yes.


00:37:35.820 --> 00:37:37.180
- If they brew and install PipX


00:37:37.180 --> 00:37:40.540
and then they can PipX install and they're good to go.


00:37:40.540 --> 00:37:42.500
And it's super easy and it just works.


00:37:42.500 --> 00:37:48.260
And then inside the terminal, all your permissions are owned by the terminal.


00:37:48.260 --> 00:37:51.740
So once you've granted the terminal access to your desktop or your photos or


00:37:51.740 --> 00:37:54.020
whatever, any Python app you run.


00:37:54.020 --> 00:37:55.440
We'll have access.


00:37:55.440 --> 00:37:56.060
No problem.


00:37:56.060 --> 00:37:57.860
So, but that's a good point.


00:37:57.860 --> 00:38:01.660
But for a GUI app, yeah, it's, it's just way harder than it ought to be.


00:38:01.660 --> 00:38:03.500
It is way harder not to be in.


00:38:03.500 --> 00:38:07.240
I would love to see something built into Python.


00:38:07.500 --> 00:38:14.300
I mean, right now it seems like the big focus of so many of the people doing high end work


00:38:14.300 --> 00:38:20.380
on Python is about making it faster, do more, take more advantage of hardware.


00:38:20.380 --> 00:38:26.260
And I would not say sidetrack that work, but once that's kind of done, the low hanging


00:38:26.260 --> 00:38:31.500
fruit is how do I get a shippable thing?


00:38:31.500 --> 00:38:36.020
Because after that, you start to open up things like, well, if I could send out a binary,


00:38:36.020 --> 00:38:38.520
Maybe I could send out a binary for iOS or Android.


00:38:38.520 --> 00:38:39.960
And then all of a sudden we have mobile.


00:38:39.960 --> 00:38:43.080
And like, it just, it unlocks so much.


00:38:43.080 --> 00:38:47.160
That said, what we have now are a couple of programs


00:38:47.160 --> 00:38:50.280
and tools that will bundle up the Python runtime.


00:38:50.280 --> 00:38:51.640
And we're just going to scratch the surface.


00:38:51.640 --> 00:38:53.960
There's a bunch of attempts on this, like PyOxidizer,


00:38:53.960 --> 00:38:54.880
which we won't touch on.


00:38:54.880 --> 00:38:56.880
But if you're building a Mac app,


00:38:56.880 --> 00:38:59.200
probably the way to go is PyJo app.


00:38:59.200 --> 00:39:04.200
'Cause it's specifically about making macOS apps, right?


00:39:04.880 --> 00:39:09.380
Yeah, I, I've used a PI installer for command line tools.


00:39:09.380 --> 00:39:14.300
It'll bundle up a, basically it's a zip file with all your Python code


00:39:14.300 --> 00:39:16.160
in it, that unzips at runtime and runs.


00:39:16.160 --> 00:39:18.300
And then PI to app for GUI apps.


00:39:18.300 --> 00:39:21.560
There's another one called beware, the beware project.


00:39:21.560 --> 00:39:25.900
It's really trying to solve that problem of, Hey, I want to be able to run


00:39:25.900 --> 00:39:29.020
on Android and iOS and Mac iOS and windows.


00:39:29.020 --> 00:39:31.520
I've tried it a couple of times.


00:39:31.520 --> 00:39:34.580
It looks really promising, but I keep running into problems and I


00:39:34.580 --> 00:39:37.540
go back to Pi 2 app because I know how to make it work.


00:39:37.540 --> 00:39:38.540
Yeah.


00:39:38.540 --> 00:39:41.540
The briefcase project from, I think it's what it's called.


00:39:41.540 --> 00:39:42.800
It's very interesting.


00:39:42.800 --> 00:39:46.840
But I I'm holding out hope that they'll be able to solve some of these things.


00:39:46.840 --> 00:39:51.640
They're, they seem to be doing a lot of work on it, but Pi 2 app, well, you run it


00:39:51.640 --> 00:39:56.960
and it will create a, basically an app bundle, which is how apps


00:39:56.960 --> 00:39:58.140
are distributed on your Mac.


00:39:58.140 --> 00:40:03.480
One thing you'll notice if you go to the Texanator, the repo is that


00:40:03.480 --> 00:40:05.360
there's a setup.py.


00:40:05.360 --> 00:40:06.760
And on all my other projects,


00:40:06.760 --> 00:40:10.000
I've switched to poetry and pyproject.toml.


00:40:10.000 --> 00:40:10.920
- Okay.


00:40:10.920 --> 00:40:12.440
- But I have not figured out how to make


00:40:12.440 --> 00:40:14.120
Py2 app work with that.


00:40:14.120 --> 00:40:17.200
So Py2 app needs a setup.py.


00:40:17.200 --> 00:40:19.680
And so I use the setup.py


00:40:19.680 --> 00:40:21.680
anytime I have to use Py2 app.


00:40:21.680 --> 00:40:22.640
- Okay.


00:40:22.640 --> 00:40:23.480
How cool.


00:40:23.480 --> 00:40:26.480
I'm looking at your setup.py on the Textinator.


00:40:26.480 --> 00:40:28.840
- Yeah. - Repo.


00:40:28.840 --> 00:40:30.540
And you've got this options here.


00:40:30.540 --> 00:40:34.440
And one of the things it has is icons, the various icons,


00:40:34.440 --> 00:40:37.160
which for your app, you actually need all these different


00:40:37.160 --> 00:40:41.000
sizes of icons, which is kind of a bit of a hassle,


00:40:41.000 --> 00:40:45.160
but then you give that file and it makes that the right,


00:40:45.160 --> 00:40:46.480
it does the right thing with it.


00:40:46.480 --> 00:40:48.040
And then you also have a plist,


00:40:48.040 --> 00:40:51.460
which has things like LS UI element is true,


00:40:51.460 --> 00:40:56.460
or NS, these names, NS desktop folder usage description.


00:40:56.460 --> 00:40:58.280
- That those things are-


00:40:58.280 --> 00:40:59.360
- That's what you're talking about, right?


00:40:59.360 --> 00:41:03.600
Yeah, those things in the plist settings there are the things that are going to go


00:41:03.600 --> 00:41:06.880
into that info.plist for the app and Py2App will stick them in there.


00:41:06.880 --> 00:41:12.440
The ls-ui element basically says, I want to run headless without being in the doc.


00:41:12.440 --> 00:41:15.880
And so that's how the rumps apps works.


00:41:15.880 --> 00:41:20.520
You'll get the little icon up in the status bar, but you won't see it in the doc.


00:41:20.520 --> 00:41:25.120
And then the desktop folder usage description, that's the little message that


00:41:25.120 --> 00:41:28.840
will pop up when Texinator tries to access the desktop


00:41:28.840 --> 00:41:29.720
the first time.


00:41:29.720 --> 00:41:32.740
- Right, okay, so this is the way,


00:41:32.740 --> 00:41:35.520
one of the ways in which you configure the actual


00:41:35.520 --> 00:41:38.800
creation of the Mac side of things,


00:41:38.800 --> 00:41:40.800
not just the bundling of the Python.


00:41:40.800 --> 00:41:42.840
- Exactly, so that stuff that, you know,


00:41:42.840 --> 00:41:45.280
those settings there will actually go into the app


00:41:45.280 --> 00:41:47.080
and Py2App will stick them in there.


00:41:47.080 --> 00:41:50.400
- Well, I just wanna give a quick shout out


00:41:50.400 --> 00:41:53.400
to this app here as well.


00:41:53.400 --> 00:41:57.020
I've had to create these icon sets for different apps.


00:41:57.020 --> 00:41:59.560
And there's this thing called the icon set studio


00:41:59.560 --> 00:42:02.140
and you just give it one icon and it will,


00:42:02.140 --> 00:42:04.120
it doesn't have very good reviews,


00:42:04.120 --> 00:42:04.960
but it worked well for me.


00:42:04.960 --> 00:42:06.340
- Yeah, it did.


00:42:06.340 --> 00:42:07.680
- Yeah, so you know, there's that,


00:42:07.680 --> 00:42:10.440
but you basically give it one large icon


00:42:10.440 --> 00:42:12.940
and it'll create all the different variations


00:42:12.940 --> 00:42:15.000
and one of those icon files and stuff for you.


00:42:15.000 --> 00:42:17.480
So anyway, that's a pretty cool one.


00:42:17.480 --> 00:42:18.320
All right, so,


00:42:20.240 --> 00:42:24.760
- Py2 app, yeah, then you just give it a command line


00:42:24.760 --> 00:42:26.920
to build your application, right?


00:42:26.920 --> 00:42:32.520
- Yeah, you run Py2 app and it will create,


00:42:32.520 --> 00:42:35.400
it'll take reading your setup.py,


00:42:35.400 --> 00:42:39.720
read in all the files associated with your app


00:42:39.720 --> 00:42:43.720
and then bundle it up into the app file.


00:42:43.720 --> 00:42:44.880
- Yeah, it takes a little bit of time


00:42:44.880 --> 00:42:46.920
and then there's a build and a dist folder


00:42:46.920 --> 00:42:51.720
And miraculously, it's really delightful actually.


00:42:51.720 --> 00:42:54.600
In the dist folder, I think it is,


00:42:54.600 --> 00:42:57.540
there's a, whatever you call your application.app.


00:42:57.540 --> 00:42:59.820
It has the icon, it looks like an app thing.


00:42:59.820 --> 00:43:03.420
You can drag it to your applications folder.


00:43:03.420 --> 00:43:07.340
You can put it in the dock, if it's that kind of app.


00:43:07.340 --> 00:43:08.700
But for the rumps one, I'm not sure.


00:43:08.700 --> 00:43:10.420
It makes a lot of sense to actually put it in the dock,


00:43:10.420 --> 00:43:14.900
but it's as much an app as far as macOS is concerned


00:43:14.900 --> 00:43:16.280
as all the other ones, right?


00:43:16.280 --> 00:43:19.400
Exactly, yeah, it's a native app and it'll run.


00:43:19.400 --> 00:43:23.640
And yeah, for something like Textinator,


00:43:23.640 --> 00:43:25.200
I just put it in the applications folder


00:43:25.200 --> 00:43:28.280
and then add it to the startup items or my login items


00:43:28.280 --> 00:43:32.400
so that it just starts running when I log into the computer.


00:43:32.400 --> 00:43:34.600
One thing to keep in mind is you might be tempted,


00:43:34.600 --> 00:43:36.600
you get that first time you build it,


00:43:36.600 --> 00:43:38.560
that app in your dist folder.


00:43:38.560 --> 00:43:42.560
If you run that, at least for Textinator, it won't work


00:43:42.560 --> 00:43:47.720
because it, that version of the app won't have the permissions to see your desktop.


00:43:47.720 --> 00:43:54.680
So, because it's got it, I guess the privacy settings are going to look at,


00:43:54.680 --> 00:43:58.940
Hey, which app and in which signature was signed, and it's going to look for, Hey,


00:43:58.940 --> 00:44:00.820
that version of it's got permission.


00:44:00.820 --> 00:44:06.260
that also means that if you upgrade a textinator, you've got to, you may


00:44:06.260 --> 00:44:09.620
have to go back into your settings and give it permission again.


00:44:09.620 --> 00:44:10.860
Okay.


00:44:12.180 --> 00:44:13.940
Yeah, permissions are always tricky.


00:44:13.940 --> 00:44:14.940
- Yeah.


00:44:14.940 --> 00:44:16.380
- But, very cool.


00:44:16.380 --> 00:44:19.740
My experience is this has worked and it's been really nice.


00:44:19.740 --> 00:44:24.740
You can build .app files and it's like those smart bundles,


00:44:24.740 --> 00:44:26.860
right, they're really folders,


00:44:26.860 --> 00:44:28.540
but they look like a single file.


00:44:28.540 --> 00:44:31.980
And yeah, it's a great way to hand out.


00:44:31.980 --> 00:44:36.660
I do, I don't know if I agreed sufficiently enthusiastically


00:44:36.660 --> 00:44:41.660
with you, but PIPX is absolutely the way to hand out


00:44:41.660 --> 00:44:45.180
out command line tools these days.


00:44:45.180 --> 00:44:47.300
People can get PipX by just brew installing it,


00:44:47.300 --> 00:44:50.020
which brings in Python that PipX needs.


00:44:50.020 --> 00:44:51.820
So that already is set.


00:44:51.820 --> 00:44:55.380
Then if you just type PipX, like for example,


00:44:55.380 --> 00:44:58.780
PipX install PLS, right?


00:44:58.780 --> 00:45:00.660
For example, that's a really nice one.


00:45:00.660 --> 00:45:04.940
LS replacement.


00:45:04.940 --> 00:45:06.200
I think I've talked about it before,


00:45:06.200 --> 00:45:10.180
but it's like sort of a developer focused LS type


00:45:10.180 --> 00:45:12.620
of experience and you can get like little icons


00:45:12.620 --> 00:45:16.680
like for readmes or license files or whatever.


00:45:16.680 --> 00:45:19.900
But if you want this, you could go through the way


00:45:19.900 --> 00:45:22.240
of setting up and running on Python,


00:45:22.240 --> 00:45:25.020
or you could just PIPX install PLS or Glances


00:45:25.020 --> 00:45:29.680
or HTTP, HTTP, HTTP, right?


00:45:29.680 --> 00:45:32.300
These, all of those things should just come in with PIPX.


00:45:32.300 --> 00:45:34.660
They get automatically upgraded if you ask for it.


00:45:34.660 --> 00:45:37.580
There's a lot of good stuff going on there.


00:45:37.580 --> 00:45:42.220
But if you need to hand out an executable thing


00:45:42.220 --> 00:45:45.220
for Mac people, this PI2 app is really nice.


00:45:45.220 --> 00:45:46.960
- Yeah, it works great.


00:45:46.960 --> 00:45:50.980
There's a few quirks to get it set up.


00:45:50.980 --> 00:45:52.940
Like you have to use the setup.py


00:45:52.940 --> 00:45:55.140
and you have to make sure you get the right things


00:45:55.140 --> 00:45:56.940
in that plist dictionary.


00:45:56.940 --> 00:46:00.420
But once you figure those out, it's super easy.


00:46:00.420 --> 00:46:04.140
- It's also, I guess, worth pointing out,


00:46:04.140 --> 00:46:08.740
there's a Pi 2 EXE for doing this for Windows folks, right?


00:46:08.740 --> 00:46:09.780
Windows people are like,


00:46:09.780 --> 00:46:13.460
well, the Pi 2 app doesn't do me any good,


00:46:13.460 --> 00:46:16.500
but there's a Pi 2 EXE and maybe more broadly,


00:46:16.500 --> 00:46:17.780
there's Pi Installer.


00:46:17.780 --> 00:46:19.940
And honestly, I don't have enough experience


00:46:19.940 --> 00:46:22.540
between Pi 2 EXE versus Pi Installer,


00:46:22.540 --> 00:46:24.980
which also make Windows apps to say


00:46:24.980 --> 00:46:26.020
which you should choose,


00:46:26.020 --> 00:46:28.460
but Pi Installer has been pretty solid too.


00:46:28.460 --> 00:46:32.900
- Yeah, I use Pi Installer for a different project of mine.


00:46:32.900 --> 00:46:35.220
It's a command line tool and it works great.


00:46:35.220 --> 00:46:39.620
and I've got to build the, that one, I think that it doesn't


00:46:39.620 --> 00:46:41.300
stop pine installer, doesn't sign it.


00:46:41.300 --> 00:46:44.180
the PI to apples automatically signs it.


00:46:44.180 --> 00:46:47.580
So you'll have to sign it yourself, whether you use an ad hoc


00:46:47.580 --> 00:46:49.780
signature or a developer signature.


00:46:49.780 --> 00:46:51.340
but you can do that.


00:46:51.340 --> 00:46:53.580
I just have a shell script that does that for me.


00:46:53.580 --> 00:46:54.680
Okay.


00:46:54.680 --> 00:46:55.680
Interesting.


00:46:55.680 --> 00:46:59.940
I've used PI installer for GUI.


00:46:59.940 --> 00:47:01.900
Have you checked out GUI?


00:47:01.940 --> 00:47:03.580
- G-O-O-E-Y?


00:47:03.580 --> 00:47:04.740
- I have, yeah.


00:47:04.740 --> 00:47:05.580
- Yeah, yeah.


00:47:05.580 --> 00:47:07.780
I don't know what to make of it.


00:47:07.780 --> 00:47:10.420
It's super interesting.


00:47:10.420 --> 00:47:13.420
And it lets you take any command line tool


00:47:13.420 --> 00:47:16.680
and turn it into, well, as the name says, like a GUI,


00:47:16.680 --> 00:47:19.740
where it takes the command line arguments


00:47:19.740 --> 00:47:21.860
and turns them into widget inputs.


00:47:21.860 --> 00:47:24.180
Like a file might be a browse for a new file


00:47:24.180 --> 00:47:27.340
or a yes or no might be a check on or off type thing.


00:47:27.340 --> 00:47:29.020
What's your thoughts on GUI?


00:47:29.020 --> 00:47:32.460
I think for simple CLIs, it's a great tool.


00:47:32.460 --> 00:47:35.300
I've never, I haven't used it, but I have played around with it a little bit.


00:47:35.300 --> 00:47:41.900
And it's definitely less scary, I guess, in the command line for users that aren't


00:47:41.900 --> 00:47:43.300
really comfortable in the command line.


00:47:43.300 --> 00:47:51.580
I have one app that I, a command line app that I use PyInstaller for that is fairly


00:47:51.580 --> 00:47:56.940
complex, it's got over 150 command line options and it's a beast.


00:47:56.940 --> 00:48:00.060
So something like that would not work.


00:48:00.060 --> 00:48:01.900
I actually tried it 'cause I was just curious


00:48:01.900 --> 00:48:04.380
to see how it would work and it just, it kind of blew up.


00:48:04.380 --> 00:48:06.140
- But it wasn't happening.


00:48:06.140 --> 00:48:07.380
- It wasn't, yeah, it's just like,


00:48:07.380 --> 00:48:08.780
nope, not gonna do this.


00:48:08.780 --> 00:48:11.540
- Gonna need a lot of tabs, a lot of tabs, please.


00:48:11.540 --> 00:48:13.300
- For your simple command line apps,


00:48:13.300 --> 00:48:15.460
I think it's super useful.


00:48:15.460 --> 00:48:18.940
- Yeah, because I'm sure a lot of listeners are like,


00:48:18.940 --> 00:48:21.260
it'd be fantastic to build a little Python app


00:48:21.260 --> 00:48:24.080
that just does a thing that my coworkers need


00:48:24.080 --> 00:48:26.460
instead of some manual process that they do.


00:48:26.460 --> 00:48:27.860
but then soon as you start to say,


00:48:27.860 --> 00:48:29.960
and then you open up terminal and you start to type,


00:48:29.960 --> 00:48:31.480
it's just like, nope.


00:48:31.480 --> 00:48:32.220
>> Yeah.


00:48:32.220 --> 00:48:35.700
>> But if you give them a GUI, it's pretty nice.


00:48:35.700 --> 00:48:37.880
>> One thing I would love to see,


00:48:37.880 --> 00:48:41.480
and since we can't do an episode without mentioning Wilma Coogan,


00:48:41.480 --> 00:48:45.820
is a TUI version of GUI that would just automatically create


00:48:45.820 --> 00:48:50.580
a TUI interface for you from your command line app.


00:48:50.580 --> 00:48:53.420
>> Yeah, you're right. We can't do a show without mentioning him.


00:48:53.420 --> 00:48:59.060
The textual stuff, it's coming along.


00:48:59.060 --> 00:49:02.060
Yeah, it's really impressive what he's been doing.


00:49:02.060 --> 00:49:05.860
So I have a couple of projects in mind


00:49:05.860 --> 00:49:09.940
that when I have to actually sit down and have time


00:49:09.940 --> 00:49:12.940
to learn textual a little bit that I would love to play


00:49:12.940 --> 00:49:14.100
around with.


00:49:14.100 --> 00:49:14.600
Absolutely.


00:49:14.600 --> 00:49:15.940
I think it would be--


00:49:15.940 --> 00:49:19.900
you're right that that would be a pretty nice way to--


00:49:19.900 --> 00:49:24.620
>> It's a more terminal native way of going.


00:49:24.620 --> 00:49:26.540
All right, we're going to build this UI for you,


00:49:26.540 --> 00:49:28.980
but here's how you get to it.


00:49:28.980 --> 00:49:32.340
But the one that you and I both use to create apps,


00:49:32.340 --> 00:49:34.660
real and the one that you've gone to


00:49:34.660 --> 00:49:37.740
create Textinator with is RUMS,


00:49:37.740 --> 00:49:40.500
which stands for ridiculously uncomplicated


00:49:40.500 --> 00:49:44.260
macOS Python status bar apps.


00:49:44.260 --> 00:49:49.140
But that's probably the most complicated thing about RUMS,


00:49:49.140 --> 00:49:51.420
is its name, right? Like it's amazing to use.


00:49:51.420 --> 00:49:56.820
Yeah. So rumps does all the heavy lifting of creating the


00:49:56.820 --> 00:50:00.020
status bar app, which you can see if you're watching the video


00:50:00.020 --> 00:50:04.100
on the screen there, you get, you get a, either, you know,


00:50:04.100 --> 00:50:07.340
your name of your app or an icon in this, in the status bar, and


00:50:07.340 --> 00:50:12.100
then you can click on it and you get some menus. And so it, and


00:50:12.100 --> 00:50:15.300
you can do that in, I don't know, like 10 lines of code


00:50:15.580 --> 00:50:17.980
with RUMS, it's just ridiculously easy.


00:50:17.980 --> 00:50:21.060
- The name is accurate, right?


00:50:21.060 --> 00:50:23.460
It is ridiculously uncomplicated.


00:50:23.460 --> 00:50:26.300
As you point out, so they've got like a hello world


00:50:26.300 --> 00:50:31.100
type of thing that has four options on the menu bar.


00:50:31.100 --> 00:50:34.300
You know, when you click on the thing in the menu bar,


00:50:34.300 --> 00:50:35.780
it drops down to four options.


00:50:35.780 --> 00:50:38.100
And one of the things that it does


00:50:38.100 --> 00:50:41.860
is also post a toast notification,


00:50:41.860 --> 00:50:44.420
you know, native macOS notification as well.


00:50:44.420 --> 00:50:46.900
And in order to make that happen,


00:50:46.900 --> 00:50:48.980
that really is like 10 lines of Python.


00:50:48.980 --> 00:50:50.060
Simple, right? - Exactly.


00:50:50.060 --> 00:50:52.060
Yeah, it's super simple.


00:50:52.060 --> 00:50:55.260
So that notification code isn't really hard to do,


00:50:55.260 --> 00:50:56.720
but you'd have to set it up.


00:50:56.720 --> 00:50:58.900
You'd have to set up a notification handler


00:50:58.900 --> 00:51:01.740
and register it.


00:51:01.740 --> 00:51:03.860
It's quite several steps to do that.


00:51:03.860 --> 00:51:05.740
And Rumps does it, you just one line,


00:51:05.740 --> 00:51:07.980
rumps.notification, and boom,


00:51:07.980 --> 00:51:09.500
you can post a notification.


00:51:09.500 --> 00:51:13.680
- So the basic idea is you create a class.


00:51:13.680 --> 00:51:16.760
It derives from rumps.apps.


00:51:16.760 --> 00:51:21.320
And then you use a bunch of decorators like clicked


00:51:21.320 --> 00:51:24.480
to say when a menu item is selected.


00:51:24.480 --> 00:51:26.000
And then there's a few other calls you can do.


00:51:26.000 --> 00:51:30.480
You can say rumps.alert and that pops out the notification.


00:51:30.480 --> 00:51:33.240
You can say rumps.notification.


00:51:33.240 --> 00:51:34.160
I guess that doesn't pop it out.


00:51:34.160 --> 00:51:35.760
Sorry, that's like a modal dialogue.


00:51:35.760 --> 00:51:38.140
You can say rumps.notification and it pops out the toast.


00:51:38.140 --> 00:51:40.240
And then you just say app.run.


00:51:40.240 --> 00:51:42.240
And that's pretty much it, right?


00:51:42.240 --> 00:51:43.240
- Yeah.


00:51:43.240 --> 00:51:47.840
- And you've got a full-blown native Mac app


00:51:47.840 --> 00:51:50.160
written in Python that's up and running.


00:51:50.160 --> 00:51:51.000
- Yep.


00:51:51.000 --> 00:51:52.200
The one missing element,


00:51:52.200 --> 00:51:54.880
which we've already given people the key to,


00:51:54.880 --> 00:51:58.080
is this is still just a .py file.


00:51:58.080 --> 00:52:01.200
And if you try to give this to your friends


00:52:01.200 --> 00:52:03.580
or distribute it on the internet,


00:52:03.580 --> 00:52:05.200
it's gonna go very badly, right?


00:52:05.200 --> 00:52:07.680
There's no app bundle,


00:52:07.680 --> 00:52:11.700
there's no .app file package thing.


00:52:11.700 --> 00:52:15.460
There's no Python runtime, right?


00:52:15.460 --> 00:52:16.980
And so that's why you need Py2App


00:52:16.980 --> 00:52:20.220
is you take your Rumped app and then you Py2App it,


00:52:20.220 --> 00:52:21.940
and then you have something to give out, right?


00:52:21.940 --> 00:52:23.420
- Exactly, and once they get that,


00:52:23.420 --> 00:52:25.740
they don't even need Python on their machine


00:52:25.740 --> 00:52:28.220
'cause it comes bundled with that.


00:52:28.220 --> 00:52:30.300
And so it's really nice.


00:52:30.300 --> 00:52:33.940
It actually, Py2App will bundle up your Python


00:52:33.940 --> 00:52:37.740
and all the libraries packages you need in the app folder


00:52:37.740 --> 00:52:39.520
so that it's got its own copy.


00:52:40.780 --> 00:52:43.820
How do you make it auto start with system start?


00:52:43.820 --> 00:52:46.740
And I asked that as somebody who created a Rumps app


00:52:46.740 --> 00:52:48.500
and it is clearly auto starting.


00:52:48.500 --> 00:52:50.020
I just don't remember how I did it.


00:52:50.020 --> 00:52:51.300
I know that you can like--


00:52:51.300 --> 00:52:53.500
- I don't know how to do it automatically,


00:52:53.500 --> 00:52:55.180
but if you go to your system settings


00:52:55.180 --> 00:52:59.020
and go to your login items, you can add it there, right?


00:52:59.020 --> 00:53:01.020
So it's a couple extra steps that you've got to do


00:53:01.020 --> 00:53:02.980
as the user and just say,


00:53:02.980 --> 00:53:06.580
you click the plus next to your login items


00:53:06.580 --> 00:53:14.900
and it'll pop up a file dialog and you can pick the your app to run and run that when you log in.


00:53:14.900 --> 00:53:22.020
Yeah, I'm pretty sure that that's what I did to get it to auto start. I was just wondering if there might be some other clever way, but probably not. Right?


00:53:22.020 --> 00:53:35.820
Yeah, I've seen I know it's possible for an app to do that. I've because I have apps that you run them in it says, Hey, do you want me to run it? Log in? Yes. And it does it. And so I just have not explored doing that myself,


00:53:35.820 --> 00:53:37.480
because that's not something I'm doing all the time,


00:53:37.480 --> 00:53:39.640
but there probably is a way,


00:53:39.640 --> 00:53:41.920
whether you can do that from Python


00:53:41.920 --> 00:53:44.360
or if the permissionals will work, I'm not really sure,


00:53:44.360 --> 00:53:47.720
but it might be something worth looking into, yeah.


00:53:47.720 --> 00:53:54.540
- Yeah, you know, this rumps project is super cool,


00:53:54.540 --> 00:53:57.760
but it feels like it's not quite


00:53:57.760 --> 00:53:59.460
super active these days, right?


00:53:59.460 --> 00:54:05.800
- Yeah, that is one downside.


00:54:05.800 --> 00:54:09.160
There's a fair amount of activity on the repo, but if you look at the issues,


00:54:09.160 --> 00:54:13.720
there's a number of issues have been open a long time or PRs that haven't been


00:54:13.720 --> 00:54:19.560
merged in and it doesn't run on Python 3.10, for example.


00:54:19.560 --> 00:54:24.880
So you'll need to install Python 3.9 or earlier to use it.


00:54:24.880 --> 00:54:29.680
So there, you know, there's a, there are a few you know, just downsides to it,


00:54:29.680 --> 00:54:34.720
but it's a, you know, it's a great app and I hope that it continues to get a


00:54:35.480 --> 00:54:38.280
a little bit of love because it really is super useful.


00:54:38.280 --> 00:54:39.520
- It really is useful.


00:54:39.520 --> 00:54:40.360
I totally agree.


00:54:40.360 --> 00:54:42.280
And I'm just thinking, you know,


00:54:42.280 --> 00:54:47.280
there could be like a startup set some preferences, right?


00:54:47.280 --> 00:54:49.160
Where you just say,


00:54:49.160 --> 00:54:51.880
I would like to request to run at startup.


00:54:51.880 --> 00:54:53.880
You know, if that's permission that already set,


00:54:53.880 --> 00:54:58.160
then just set it through whatever objective COS level thing


00:54:58.160 --> 00:54:59.000
you've got to do.


00:54:59.000 --> 00:55:00.520
Like there's just little things like that,


00:55:00.520 --> 00:55:01.840
that would be really, really nice.


00:55:01.840 --> 00:55:04.360
You know, the mini bar,


00:55:04.360 --> 00:55:10.520
the little drop downs, to be able to associate a hotkey with them.


00:55:10.520 --> 00:55:13.960
There's just a few things like dividers in menus.


00:55:13.960 --> 00:55:17.240
There's just these, they seem like such a low hanging fruit


00:55:17.240 --> 00:55:19.800
that I think this could get a big upgrade.


00:55:19.800 --> 00:55:22.520
It's pretty popular, it has 2.8 thousand stars,


00:55:22.520 --> 00:55:25.640
but not a ton of traffic recently.


00:55:25.640 --> 00:55:27.560
It'd be awesome if people,


00:55:27.560 --> 00:55:31.880
either Jared KS who originally created it keeps going,


00:55:31.880 --> 00:55:34.920
or if they've lost interest, then someone else


00:55:34.920 --> 00:55:35.920
could pick it up and run with it.


00:55:35.920 --> 00:55:36.920
That'd be fun.


00:55:36.920 --> 00:55:38.120
- Yeah, definitely.


00:55:38.120 --> 00:55:43.760
- Oh, Richie on the audience says,


00:55:43.760 --> 00:55:46.000
"Creating the plist to execute your script


00:55:46.000 --> 00:55:50.920
is just having it in a tilde library launch agents."


00:55:50.920 --> 00:55:53.040
So maybe if you just copy a script


00:55:53.040 --> 00:55:55.800
to start your app over to there and it just launches.


00:55:55.800 --> 00:55:56.960
That's great. - Okay.


00:55:56.960 --> 00:55:58.160
Yeah, I'm looking at it.


00:55:58.160 --> 00:56:03.160
you'll have to request access to the library folder as well.


00:56:03.160 --> 00:56:05.520
So I'll have to look into that,


00:56:05.520 --> 00:56:07.260
but I've done that before,


00:56:07.260 --> 00:56:11.200
the old fashioned way of actually creating a plist by hand


00:56:11.200 --> 00:56:14.780
and sticking it in there to get something to start.


00:56:14.780 --> 00:56:16.580
So thanks, Ricky, I'll take a look at that.


00:56:16.580 --> 00:56:18.060
- Yeah, that's excellent advice.


00:56:18.060 --> 00:56:19.580
This is in your user profile,


00:56:19.580 --> 00:56:22.340
so maybe you don't have to ask, but maybe you do.


00:56:22.340 --> 00:56:24.860
All right, so rumps,


00:56:24.860 --> 00:56:27.620
very important building block here for Textinator.


00:56:27.620 --> 00:56:32.620
Pi to app also super important.


00:56:32.620 --> 00:56:35.580
By the way, the one that I create is called URLify


00:56:35.580 --> 00:56:38.380
and it just does a bunch of stuff like,


00:56:38.380 --> 00:56:41.260
creates URL slugs and like transforms text.


00:56:41.260 --> 00:56:42.300
So I ended up doing all that.


00:56:42.300 --> 00:56:43.860
That's my little app.


00:56:43.860 --> 00:56:48.860
So the one, we've got the ability


00:56:48.860 --> 00:56:50.500
to build the app with pi to app.


00:56:50.500 --> 00:56:53.220
We've got a way to kind of create a shell


00:56:53.220 --> 00:56:55.380
that runs in the menu bar


00:56:55.380 --> 00:56:57.340
and constantly runs in the background.


00:56:57.340 --> 00:57:00.540
which is, you know, as long as nobody closes the app, right?


00:57:00.540 --> 00:57:02.540
It's just out of the way.


00:57:02.540 --> 00:57:04.040
So that's really fantastic.


00:57:04.040 --> 00:57:08.840
And now you need to start working with some of the OS level APIs.


00:57:08.840 --> 00:57:11.140
Like you talked about hooking the event for the screenshot,


00:57:11.140 --> 00:57:14.840
and those are Objective-C type things, right?


00:57:14.840 --> 00:57:16.640
Exactly. Yeah.


00:57:16.640 --> 00:57:21.640
And so for those, I use pyobjc, pyObjective-C,


00:57:21.640 --> 00:57:24.940
which is a bridge between Python and Objective-C.


00:57:24.940 --> 00:57:28.780
And it's an amazing package.


00:57:28.780 --> 00:57:32.060
And if you're a Python programmer and you use a Mac,


00:57:32.060 --> 00:57:34.820
you really ought to get familiar with PyOBJC,


00:57:34.820 --> 00:57:38.820
because what that does is exposes everything


00:57:38.820 --> 00:57:41.300
that Apple's built in, all the native capabilities


00:57:41.300 --> 00:57:44.660
like vision and machine learning.


00:57:44.660 --> 00:57:46.180
The most recent update to Textinator,


00:57:46.180 --> 00:57:47.860
I added QR code detection.


00:57:47.860 --> 00:57:50.660
So if you screenshot a QR code, it'll


00:57:50.660 --> 00:57:52.580
tell you what the URL is.


00:57:52.580 --> 00:57:55.380
- Oh, wow. Decode the QR code.


00:57:55.380 --> 00:57:57.980
- Decode the QR code and stick it on your clipboard.


00:57:57.980 --> 00:57:58.940
- Nice.


00:57:58.940 --> 00:58:04.740
- But all that's built in to the Apple frameworks and PyOBJC gives you access


00:58:04.740 --> 00:58:08.580
to call those, you know, fairly easily.


00:58:08.580 --> 00:58:12.620
There are some quirks to it because Objective-C itself is kind of a quirky


00:58:12.620 --> 00:58:18.580
language and so you've got to do the translation between Python and Objective-C.


00:58:18.580 --> 00:58:21.780
You'll see a lot of camel case that you don't normally


00:58:21.780 --> 00:58:24.060
see in Python.


00:58:24.060 --> 00:58:30.300
But once you figure those things out, it's super useful.


00:58:30.300 --> 00:58:38.620
Yeah, there's no attempt to Pythonify or make Objective-C,


00:58:38.620 --> 00:58:41.780
like the low-level runtime supporting classes,


00:58:41.780 --> 00:58:43.260
to make them Pythonic.


00:58:43.260 --> 00:58:45.460
Yeah, and actually, I'm glad.


00:58:45.460 --> 00:58:47.540
Because when you have to go Google,


00:58:47.540 --> 00:58:49.260
what does this function do?


00:58:49.260 --> 00:58:52.340
Or what's this NS file handle and how do I use it?


00:58:52.340 --> 00:58:55.260
It's a lot easier if you can just cut and paste.


00:58:55.260 --> 00:58:57.740
- Yeah, for sure.


00:58:57.740 --> 00:58:59.540
One of the things I just,


00:58:59.540 --> 00:59:00.900
I'm looking at some of these examples,


00:59:00.900 --> 00:59:03.300
maybe there's some hints in here,


00:59:03.300 --> 00:59:07.040
but what are the things that's super odd to me


00:59:07.040 --> 00:59:08.380
about Objective-C?


00:59:08.380 --> 00:59:09.860
It is one of those languages,


00:59:09.860 --> 00:59:11.100
I'm like, I'm gonna try to learn this


00:59:11.100 --> 00:59:15.820
and after a while I'm like, no, no, it's just too weird.


00:59:15.820 --> 00:59:17.980
And how you have these named,


00:59:17.980 --> 00:59:24.140
these really oddly named methods and then variables, right?


00:59:24.140 --> 00:59:28.080
Like you can't just say string lower,


00:59:28.080 --> 00:59:30.140
you've got to get like, you know,


00:59:30.140 --> 00:59:31.740
I forget what the API is called,


00:59:31.740 --> 00:59:34.940
but there's like a weird set of incantations


00:59:34.940 --> 00:59:38.340
to sort of invoke a lowercase type of behavior.


00:59:38.340 --> 00:59:42.300
So how does that, is this, I see like in the example here,


00:59:43.540 --> 00:59:47.620
It looks like there's a string specifying maybe one


00:59:47.620 --> 00:59:50.060
of the arguments or something, like file handle read


00:59:50.060 --> 00:59:51.900
completed colon is one of the strings.


00:59:51.900 --> 00:59:52.900
Yeah.


00:59:52.900 --> 00:59:53.620
So the way--


00:59:53.620 --> 00:59:54.660
What's the deal with that?


00:59:54.660 --> 00:59:57.940
Yeah, this one, I'm not super familiar with this notification


00:59:57.940 --> 00:59:58.740
center API.


00:59:58.740 --> 01:00:00.780
But looking at what you have on the screen there,


01:00:00.780 --> 01:00:05.220
you've got the notification center dot ad observer


01:00:05.220 --> 01:00:07.860
underscore selector underscore name underscore object


01:00:07.860 --> 01:00:10.260
underscore, which if you use high objective C,


01:00:10.260 --> 01:00:12.420
you're going to see a lot of underscores like that,


01:00:12.420 --> 01:00:13.900
including the trailing underscore.


01:00:13.900 --> 01:00:15.900
And what that does is the way Objective-C works,


01:00:15.900 --> 01:00:19.460
and let me caveat, I am not an Objective-C programmer.


01:00:19.460 --> 01:00:22.580
I tried a couple of times to learn,


01:00:22.580 --> 01:00:26.380
and it just did not grok it.


01:00:26.380 --> 01:00:29.780
But I've gotten pretty good at interpreting Objective-C


01:00:29.780 --> 01:00:32.500
through the Python lens so that I can use it in Python,


01:00:32.500 --> 01:00:36.180
because I've got quite a few Python apps that


01:00:36.180 --> 01:00:37.660
use Objective-C calls.


01:00:37.660 --> 01:00:40.500
So Objective-C has this concept of selectors,


01:00:40.500 --> 01:00:43.500
which are basically sending messages to an object


01:00:43.500 --> 01:00:47.860
to call specific functions on that object.


01:00:47.860 --> 01:00:49.180
- Oh, I see.


01:00:49.180 --> 01:00:51.540
- And a method on an object


01:00:51.540 --> 01:00:53.460
could have different signatures.


01:00:53.460 --> 01:00:55.820
And so you might sometimes call it


01:00:55.820 --> 01:01:00.720
with a different value or different number of parameters


01:01:00.720 --> 01:01:02.180
than you would a different time.


01:01:02.180 --> 01:01:04.620
And so the selector is handled doing that.


01:01:04.620 --> 01:01:08.140
And so what this is doing is each of those underscores


01:01:08.140 --> 01:01:12.700
is think of it as every time you see an underscore


01:01:12.700 --> 01:01:15.300
in a PI objective C method call,


01:01:15.300 --> 01:01:16.340
you need to have a variable,


01:01:16.340 --> 01:01:18.940
you need to have an argument to that method call


01:01:18.940 --> 01:01:22.360
because it's passing that selector,


01:01:22.360 --> 01:01:25.260
the value that you want for that particular selector.


01:01:25.260 --> 01:01:28.180
So that's why there's four underscores


01:01:28.180 --> 01:01:29.980
in this example you've got on the screen


01:01:29.980 --> 01:01:32.500
and then four different values


01:01:32.500 --> 01:01:34.180
you're passing in, arguments you're passing in.


01:01:34.180 --> 01:01:36.460
- So if I say add observer underscore selector,


01:01:36.460 --> 01:01:37.940
underscore name, underscore object,


01:01:37.940 --> 01:01:40.860
I've got to give it the selector, the name of the object,


01:01:40.860 --> 01:01:43.060
and also itself.


01:01:43.060 --> 01:01:45.920
- And if you went and looked that up on the Apple Docs,


01:01:45.920 --> 01:01:49.100
instead of underscores, you'd see colons.


01:01:49.100 --> 01:01:51.300
So you'd see add observer, colon selector,


01:01:51.300 --> 01:01:53.220
colon name, colon object.


01:01:53.220 --> 01:01:55.600
And so that's the decoder ring there,


01:01:55.600 --> 01:01:58.700
if you're trying to translate to Python,


01:01:58.700 --> 01:02:00.980
is replace the colons with underscores


01:02:00.980 --> 01:02:02.660
and then add a trailing underscore.


01:02:02.660 --> 01:02:04.900
And then you got to figure out, okay, well,


01:02:05.900 --> 01:02:08.280
For that number of arguments, what are those arguments


01:02:08.280 --> 01:02:09.980
and what type do they need to be?


01:02:09.980 --> 01:02:12.340
- Very interesting.


01:02:12.340 --> 01:02:14.660
Okay, so it's weird, but it's kind of weird


01:02:14.660 --> 01:02:17.100
in the sense of just it's mirroring Objective-C,


01:02:17.100 --> 01:02:20.180
which is itself a bit of a unique language.


01:02:20.180 --> 01:02:22.380
But that said, this is a cool library


01:02:22.380 --> 01:02:25.300
that gives you direct access


01:02:25.300 --> 01:02:29.300
to much of the operating system, right?


01:02:29.300 --> 01:02:30.140
- Yeah, exactly.


01:02:30.140 --> 01:02:35.140
So, you know, Apple has built some really great frameworks


01:02:35.300 --> 01:02:37.500
like the vision, right, that does the text detection


01:02:37.500 --> 01:02:40.300
for text data, which literally takes a few lines.


01:02:40.300 --> 01:02:41.140
And you can get--


01:02:41.140 --> 01:02:43.220
- Yeah, tell us really quick about like this vision one.


01:02:43.220 --> 01:02:44.100
Sorry, cutting you off.


01:02:44.100 --> 01:02:45.500
Tell us quick about the vision one here,


01:02:45.500 --> 01:02:47.460
just 'cause this is one of the core building blocks


01:02:47.460 --> 01:02:48.300
you used, right?


01:02:48.300 --> 01:02:49.120
- Exactly, yeah.


01:02:49.120 --> 01:02:52.100
So vision does a number of different


01:02:52.100 --> 01:02:54.900
computer vision type tasks for you.


01:02:54.900 --> 01:02:56.940
And really only takes a few lines.


01:02:56.940 --> 01:03:01.940
It does text detection, find barcodes or QR codes.


01:03:02.380 --> 01:03:05.500
It'll find faces in an image, detect different objects


01:03:05.500 --> 01:03:08.260
and images, those kinds of things.


01:03:08.260 --> 01:03:11.820
And it does it really well.


01:03:11.820 --> 01:03:13.860
It runs on the neural engine, as you


01:03:13.860 --> 01:03:15.860
said at the beginning of the show.


01:03:15.860 --> 01:03:17.700
So it's super fast.


01:03:17.700 --> 01:03:21.340
And you get access to that all from Python.


01:03:21.340 --> 01:03:22.980
If you use Objective-C, you can directly


01:03:22.980 --> 01:03:26.260
access that power with just a handful of lines of code.


01:03:26.260 --> 01:03:28.700
And there are a number of Python packages for doing that.


01:03:28.700 --> 01:03:33.700
There's several different Python image to text packages


01:03:33.700 --> 01:03:35.980
out there, for example,


01:03:35.980 --> 01:03:37.980
but they're all fairly compute intensive


01:03:37.980 --> 01:03:40.860
or you've got to download these big models or whatever.


01:03:40.860 --> 01:03:41.820
And if you're on a Mac,


01:03:41.820 --> 01:03:45.380
you can just use them what's already built into your Mac.


01:03:45.380 --> 01:03:46.480
- Yeah, absolutely.


01:03:46.480 --> 01:03:50.420
And so for example, in Textinator,


01:03:50.420 --> 01:03:54.700
you just say vision.vn recognize text request,


01:03:54.700 --> 01:03:56.140
in that with completion handler,


01:03:56.140 --> 01:03:57.740
you give it the callback.


01:03:57.740 --> 01:03:59.740
So one thing you'll notice, you skip past it,


01:03:59.740 --> 01:04:01.460
there was an alloc and then an init,


01:04:01.460 --> 01:04:02.980
and it's something you've got to do in Objective-C,


01:04:02.980 --> 01:04:05.260
you've got to allocate your memory.


01:04:05.260 --> 01:04:07.660
And then there's a whole memory management piece of this


01:04:07.660 --> 01:04:10.640
you've got to keep in mind.


01:04:10.640 --> 01:04:15.560
For the most part, PyOBJC handles that for you,


01:04:15.560 --> 01:04:17.340
but every now and then it can bite you


01:04:17.340 --> 01:04:20.980
if you have got a,


01:04:20.980 --> 01:04:22.440
you're allocating a bunch of things


01:04:22.440 --> 01:04:24.360
and never deallocating them.


01:04:24.360 --> 01:04:27.460
You can't have a memory of that.


01:04:27.460 --> 01:04:28.740
- Back to memory.


01:04:28.740 --> 01:04:29.580
- Yeah.


01:04:29.580 --> 01:04:30.400
- Okay.


01:04:30.400 --> 01:04:31.240
- Something you normally don't have to think about


01:04:31.240 --> 01:04:32.080
in Python.


01:04:32.080 --> 01:04:34.700
- Yeah, and then maybe some of the other,


01:04:34.700 --> 01:04:39.700
you've got the natural language ML APIs as well, right?


01:04:39.700 --> 01:04:43.900
- Yeah, there's natural language processing built in.


01:04:43.900 --> 01:04:45.420
You know, all the things that the Mac does


01:04:45.420 --> 01:04:49.620
to do all those neat Mac things are,


01:04:49.620 --> 01:04:50.460
for the most part,


01:04:50.460 --> 01:04:53.800
available to the developer through these frameworks.


01:04:53.800 --> 01:04:55.940
- Oh, excellent.


01:04:55.940 --> 01:04:56.980
All right, very cool.


01:04:56.980 --> 01:05:04.140
Yeah, I guess that's probably it for the building blocks and stuff.


01:05:04.140 --> 01:05:07.260
Now that you've got this built, would you have done anything different or are you happy


01:05:07.260 --> 01:05:09.500
with the way it's come together?


01:05:09.500 --> 01:05:15.500
I think I've been pretty happy with the way it came together.


01:05:15.500 --> 01:05:17.180
It works pretty good.


01:05:17.180 --> 01:05:22.580
The most current version will immediately ask for desktop access like we were talking


01:05:22.580 --> 01:05:28.740
about that. I didn't do that in the first version. I put up, I left it up to the user


01:05:28.740 --> 01:05:34.380
to go add that manually. But when I realized, hey, the default location for screenshots


01:05:34.380 --> 01:05:38.900
is the desktop and 99% of people are going to have it there. Let's just ask right away


01:05:38.900 --> 01:05:44.620
for the desktop access and then it just works out of the box. But yeah, again, it was a


01:05:44.620 --> 01:05:50.700
fun little project. The initial version took a weekend and it's grown a little bit since


01:05:50.700 --> 01:05:53.980
but the whole thing is still only about 500 lines of code.


01:05:53.980 --> 01:05:57.820
And it's a fully functional, useful app that I use every day.


01:05:57.820 --> 01:06:02.220
And so it was really fun to be able to build that in Python.


01:06:02.220 --> 01:06:04.660
There's something very satisfying about having


01:06:04.660 --> 01:06:07.300
your app do the thing, you know, right?


01:06:07.300 --> 01:06:10.740
You can, of course, download-- everyone downloads apps


01:06:10.740 --> 01:06:12.300
from the App Store and various places.


01:06:12.300 --> 01:06:14.820
But to go, but that's my code writing.


01:06:14.820 --> 01:06:17.580
My thing caught that text out of there, or whatever it is,


01:06:17.580 --> 01:06:18.980
right?


01:06:18.980 --> 01:06:20.420
Yeah, exactly.


01:06:20.420 --> 01:06:21.620
- Yeah, excellent.


01:06:21.620 --> 01:06:25.780
So I hope this is an inspiration as well as a roadmap


01:06:25.780 --> 01:06:28.780
for people that want to build interesting things


01:06:28.780 --> 01:06:30.620
for maybe for themselves,


01:06:30.620 --> 01:06:34.980
but also for end users in Python on the Mac, right?


01:06:34.980 --> 01:06:37.260
Rumps, if you want a menu bar app,


01:06:37.260 --> 01:06:41.640
PyObjective-C to get access to the framework and platform,


01:06:41.640 --> 01:06:45.220
Py2App to build it in a way that you can hand it out.


01:06:45.220 --> 01:06:47.900
Very cool.


01:06:47.900 --> 01:06:50.220
- Yeah, a few basic building blocks


01:06:50.220 --> 01:06:54.340
and you can put something pretty slick together


01:06:54.340 --> 01:06:55.220
fairly quickly.


01:06:55.220 --> 01:06:58.380
- Yeah, I totally agree.


01:06:58.380 --> 01:07:00.160
I have the little one that I built with Rumps


01:07:00.160 --> 01:07:02.260
came together surprisingly well


01:07:02.260 --> 01:07:05.420
and it does way less than what yours does.


01:07:05.420 --> 01:07:07.580
I'm really impressed with yours, it's great.


01:07:07.580 --> 01:07:09.680
- I've got another, yeah, another Rumps one


01:07:09.680 --> 01:07:11.660
that I use every day that all it does


01:07:11.660 --> 01:07:14.740
is tell me when to plug in or unplug my laptop,


01:07:14.740 --> 01:07:18.260
just to try to keep the battery percentage good


01:07:18.260 --> 01:07:22.980
and it has an icon of a plug and it changes color


01:07:22.980 --> 01:07:24.620
depending on whether I should plug in,


01:07:24.620 --> 01:07:26.100
it's charging or discharging,


01:07:26.100 --> 01:07:28.140
and whether I should, you know,


01:07:28.140 --> 01:07:29.820
and then it pops up an alert to say,


01:07:29.820 --> 01:07:31.060
plug in your laptop now.


01:07:31.060 --> 01:07:34.540
It's super simple, but really useful.


01:07:34.540 --> 01:07:36.700
- Absolutely, keep it in the range,


01:07:36.700 --> 01:07:41.020
not always 100% charged, but don't let it go dead, yeah.


01:07:41.020 --> 01:07:41.900
Yeah, that's super simple.


01:07:41.900 --> 01:07:44.860
Those kinds of things are really easy to write with RUMPS


01:07:44.860 --> 01:07:46.900
and the various tools we talked about,


01:07:46.900 --> 01:07:49.900
So definitely, definitely check that out.


01:07:49.900 --> 01:07:52.580
All right, well, I think we are out of time,


01:07:52.580 --> 01:07:55.180
but super cool work on Textinator.


01:07:55.180 --> 01:07:57.700
And like I said, a great roadmap for people to follow


01:07:57.700 --> 01:07:59.660
if they want to build things like that.


01:07:59.660 --> 01:08:02.540
So, Rhett, before we get out of here, final two questions.


01:08:02.540 --> 01:08:04.380
If you're going to work on Textinator


01:08:04.380 --> 01:08:08.020
or other Python things, what editor are you using these days?


01:08:08.020 --> 01:08:10.220
- I use VS Code.


01:08:10.220 --> 01:08:11.460
- Right on.


01:08:11.460 --> 01:08:13.940
Extensions, plugins that you're a fan of,


01:08:13.940 --> 01:08:17.000
Obviously Python, if you don't hate yourself


01:08:17.000 --> 01:08:18.740
and want to do this on your own.


01:08:18.740 --> 01:08:23.740
- Yeah, so I use a couple, I use GitHub Copilot,


01:08:23.740 --> 01:08:26.240
which I really enjoy.


01:08:26.240 --> 01:08:29.780
It is a solo hobbyist developer


01:08:29.780 --> 01:08:32.560
who only gets a few hours a week to write code.


01:08:32.560 --> 01:08:34.900
It's really, it's kind of like having a peer programmer


01:08:34.900 --> 01:08:36.700
and it's really helpful.


01:08:36.700 --> 01:08:37.540
And then--


01:08:37.540 --> 01:08:38.360
- A knowledgeable friend, you're like,


01:08:38.360 --> 01:08:40.940
how do you connect SQLAlchemy to a database again?


01:08:40.940 --> 01:08:41.780
And it goes, boom.


01:08:41.780 --> 01:08:44.220
Yeah, it just does it for you.


01:08:44.220 --> 01:08:45.420
It's really useful.


01:08:45.420 --> 01:08:49.380
And the other one that I really like is GitLens.


01:08:49.380 --> 01:08:51.260
Yeah, GitLens is cool.


01:08:51.260 --> 01:08:52.780
Yeah, you can sort of--


01:08:52.780 --> 01:08:55.780
it'll put the Git history sort of--


01:08:55.780 --> 01:08:57.140
Yeah, what--


01:08:57.140 --> 01:08:58.420
Right in line with the code.


01:08:58.420 --> 01:09:00.100
And you can see what changed and when.


01:09:00.100 --> 01:09:04.940
And I was using that yesterday to try to debug a problem


01:09:04.940 --> 01:09:06.620
and find when did I change this code.


01:09:06.620 --> 01:09:08.460
And yeah, it's really--


01:09:08.460 --> 01:09:09.940
that was really useful.


01:09:09.940 --> 01:09:14.940
Yeah, I was looking at the CPython source code with VS Code


01:09:14.940 --> 01:09:17.060
and I had GitLens installed


01:09:17.060 --> 01:09:18.900
and I was going through some section


01:09:18.900 --> 01:09:23.900
and I saw this change from like 1994 from Guido.


01:09:23.900 --> 01:09:25.900
And why that line was changed.


01:09:25.900 --> 01:09:29.460
I'm like, okay, this is like a bit of archeology


01:09:29.460 --> 01:09:31.700
or some history going on here, you know?


01:09:31.700 --> 01:09:33.140
- Yeah, that's neat.


01:09:33.140 --> 01:09:33.980
- Yeah, very neat.


01:09:33.980 --> 01:09:36.020
Okay, well, definitely a good choice there.


01:09:36.020 --> 01:09:38.780
And then a notable PyPI package.


01:09:38.780 --> 01:09:40.640
I mean, rumps is an obvious choice,


01:09:40.640 --> 01:09:42.220
but if you got something else that you want to throw out,


01:09:42.220 --> 01:09:43.060
go for it.


01:09:43.060 --> 01:09:44.640
- Yeah, well, let me, I've got two for you.


01:09:44.640 --> 01:09:47.180
One, if we talked about PyOVJC,


01:09:47.180 --> 01:09:50.500
if you're a Mac developer or you're a Python developer


01:09:50.500 --> 01:09:53.280
who uses a Mac, definitely take the time to learn that


01:09:53.280 --> 01:09:54.960
'cause it'll give you, you know,


01:09:54.960 --> 01:09:56.900
give your Python superpowers.


01:09:56.900 --> 01:09:59.180
And then the other one, completely unrelated,


01:09:59.180 --> 01:10:02.780
that I really like is called TextX.


01:10:02.780 --> 01:10:07.620
And it's basically a parser generator for Python.


01:10:07.620 --> 01:10:11.660
It's a peg, creates a parsing expression grammar for you


01:10:11.660 --> 01:10:14.660
out of its own little modeling language.


01:10:14.660 --> 01:10:17.380
But basically, if you find that you're


01:10:17.380 --> 01:10:21.740
writing more than two regexes to parse some code,


01:10:21.740 --> 01:10:24.060
TextX might be able to help you out,


01:10:24.060 --> 01:10:27.500
because it will build a parser for you out


01:10:27.500 --> 01:10:30.860
of its own specification language that then gives you


01:10:30.860 --> 01:10:33.140
a Python class that parses your text for you.


01:10:33.140 --> 01:10:34.860
And I've used it in some other projects


01:10:34.860 --> 01:10:39.860
actually create my own language to solve a specific domain problem.


01:10:39.860 --> 01:10:40.820
>> Yeah.


01:10:40.820 --> 01:10:42.700
>> It's super useful.


01:10:42.700 --> 01:10:46.940
It's fairly easy to create a fairly powerful parser.


01:10:46.940 --> 01:10:50.660
>> When I hear I don't have to write


01:10:50.660 --> 01:10:52.860
regular expressions that already makes me happy.


01:10:52.860 --> 01:10:53.420
>> Yeah.


01:10:53.420 --> 01:10:55.860
>> It's great. Their description here is,


01:10:55.860 --> 01:11:00.820
in a nutshell, TextX will help you build a textual language in an easy way.


01:11:00.820 --> 01:11:04.340
You could invent your own language or build support for an already existing one.


01:11:04.340 --> 01:11:07.220
That's sounds fantastic. Yeah, great recommendation.


01:11:07.220 --> 01:11:14.600
Alright, well. Final call to action before we go. People are


01:11:14.600 --> 01:11:18.840
interested maybe in building apps Mac apps for the pipe with


01:11:18.840 --> 01:11:23.500
Python and abroad sense. But what advice you got for it? Say


01:11:23.500 --> 01:11:28.020
learn PIO BJC play with rumps and and pie to app and go.


01:11:28.020 --> 01:11:32.340
There's a lot of great projects already out there on GitHub. Go


01:11:32.340 --> 01:11:35.340
look at the textinator source code or search from some others.


01:11:35.340 --> 01:11:38.540
And I think, for me, the easiest way to get started


01:11:38.540 --> 01:11:41.220
is always to look at what somebody else has done


01:11:41.220 --> 01:11:43.060
than reading through a whole bunch of docs.


01:11:43.060 --> 01:11:46.100
And so I'd say go find a project that piques your interest


01:11:46.100 --> 01:11:48.300
and go build something for your Mac.


01:11:48.300 --> 01:11:49.860
Yeah, absolutely.


01:11:49.860 --> 01:11:52.380
All right, well, it's been great to get


01:11:52.380 --> 01:11:55.340
a look inside what you're doing with this app


01:11:55.340 --> 01:11:58.020
and how you built it for Mac, and also a bit of a peek


01:11:58.020 --> 01:11:59.260
inside the Space Force.


01:11:59.260 --> 01:12:00.740
So thanks for being here.


01:12:00.740 --> 01:12:01.260
Great, yeah.


01:12:01.260 --> 01:12:01.940
Thanks, Michael.


01:12:01.940 --> 01:12:03.000
You all have fun.


01:12:03.000 --> 01:12:04.000
You bet.


01:12:04.000 --> 01:12:05.360
Bye.

