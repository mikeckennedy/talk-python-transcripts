WEBVTT

00:00:00.000 --> 00:00:06.000
Hey, everyone out there who happens to be watching live.


00:00:06.000 --> 00:00:07.000
Thanks for being here.


00:00:07.000 --> 00:00:10.000
If you got comments or thoughts, put them into the live chat.


00:00:10.000 --> 00:00:13.000
If you're watching the replay, well, thanks for coming back to watch it.


00:00:13.000 --> 00:00:17.000
And, you know, with that, let's go ahead and kick off the show proper.


00:00:17.000 --> 00:00:20.000
Ben, welcome to Talk Python To Me.


00:00:20.000 --> 00:00:23.000
Thank you. Thank you so much for having me, Michael.


00:00:23.000 --> 00:00:26.000
Yeah, it's really exciting to have you here.


00:00:26.000 --> 00:00:28.000
We're going to talk a little bit of legacy code,


00:00:28.000 --> 00:00:31.880
a little bit of very, very large code bases


00:00:31.880 --> 00:00:36.880
and how you might not have to permanently live in the past,


00:00:36.880 --> 00:00:40.440
which I think would be really welcome to a lot of people.


00:00:40.440 --> 00:00:42.560
I just talked a little bit about this before I hit record,


00:00:42.560 --> 00:00:46.160
but even though your topic is specifically


00:00:46.160 --> 00:00:49.200
how the story of move from Python two to three


00:00:49.200 --> 00:00:52.920
and this like making your whole code base modern,


00:00:52.920 --> 00:00:54.920
I do think that this idea of how do I move


00:00:54.920 --> 00:00:56.680
from one code base to another code base


00:00:56.680 --> 00:01:00.680
is super relevant to lots of folks who might not be going from Python 2 to 3,


00:01:00.680 --> 00:01:05.920
but maybe from Flask to FastAPI or vice versa, or those types of things.


00:01:05.920 --> 00:01:10.240
So I think the techniques that you're going to talk about here are more broadly


00:01:10.240 --> 00:01:13.240
applicable than just a 2 to 3 migration.


00:01:13.240 --> 00:01:19.240
And it's really cool how you all migrated 3.8 million lines of code without


00:01:19.240 --> 00:01:20.920
interrupting development. That's kind of nuts.


00:01:24.080 --> 00:01:29.680
Yeah, I did it, and it still seems ridiculous.


00:01:29.680 --> 00:01:31.320
You lived it, and it seems like a dream.


00:01:31.320 --> 00:01:32.520
Amazing.


00:01:32.520 --> 00:01:33.940
Before we get to all that, though,


00:01:33.940 --> 00:01:35.100
let's start with your story.


00:01:35.100 --> 00:01:36.940
How did you get into programming and Python?


00:01:36.940 --> 00:01:43.920
Frankly, I took a job at Yelp.


00:01:43.920 --> 00:01:45.320
Yelp was a Python shop.


00:01:45.320 --> 00:01:49.020
Before that, I had a couple of internships,


00:01:49.020 --> 00:01:52.080
and I went to Georgia Tech, and I mostly did Java.


00:01:52.080 --> 00:01:56.620
So it was sort of a new experience for me.


00:01:56.620 --> 00:01:58.780
Python is one of those beginner languages


00:01:58.780 --> 00:02:00.820
that everyone loves to throw around.


00:02:00.820 --> 00:02:03.340
So I had done, I dabbled in a little bit,


00:02:03.340 --> 00:02:08.180
but I first started really getting deep into the language


00:02:08.180 --> 00:02:11.940
when I started at Yelp.


00:02:11.940 --> 00:02:15.860
And I've definitely made it,


00:02:15.860 --> 00:02:17.860
it's sort of become like,


00:02:17.860 --> 00:02:19.860
I've become sort of a local expert on it.


00:02:19.860 --> 00:02:23.080
So I've been able to build up a lot of knowledge


00:02:23.080 --> 00:02:25.300
about like, you know, a lot of weird edge cases


00:02:25.300 --> 00:02:28.620
and, you know, stuff like that, so.


00:02:28.620 --> 00:02:29.720
- Yeah, fantastic.


00:02:29.720 --> 00:02:31.800
You may be familiar with it.


00:02:31.800 --> 00:02:35.520
There's a T-shirt that's kind of a joke, a meme.


00:02:35.520 --> 00:02:36.780
It says, "I learned Python.


00:02:36.780 --> 00:02:38.100
It was a great weekend."


00:02:38.100 --> 00:02:39.540
- Yeah.


00:02:39.540 --> 00:02:42.060
- And yet, I've been doing Python for many years


00:02:42.060 --> 00:02:43.820
and I'm still learning new stuff.


00:02:43.820 --> 00:02:47.740
Even today, I learned some interesting new Python things.


00:02:49.340 --> 00:02:50.300
So which is it?


00:02:50.300 --> 00:02:54.420
Do you learn it in a day or is it like this deep journey?


00:02:54.420 --> 00:02:55.620
What do you think?


00:02:55.620 --> 00:02:57.500
- I think most programming languages


00:02:57.500 --> 00:03:00.980
have some amount of sort of width and depth.


00:03:00.980 --> 00:03:03.340
I think Python definitely has the advantage


00:03:03.340 --> 00:03:08.340
of being a relatively straightforward language.


00:03:08.340 --> 00:03:13.580
One of the nice things obviously is that


00:03:13.580 --> 00:03:15.580
instead of using a lot of weird keywords,


00:03:15.580 --> 00:03:21.340
that has words, instead of being like, oh--


00:03:21.340 --> 00:03:26.660
Or double pipe.


00:03:26.660 --> 00:03:29.860
Yeah, or instead of double pipe and stuff like that.


00:03:29.860 --> 00:03:33.460
Those are things that I think definitely help people.


00:03:33.460 --> 00:03:35.620
Personally, me coming into it, that


00:03:35.620 --> 00:03:37.780
wasn't as big of a deal for me, because I was already


00:03:37.780 --> 00:03:39.420
familiar with all that stuff.


00:03:39.420 --> 00:03:43.060
You're coming from a very symbol-heavy world of Java,


00:03:43.060 --> 00:03:45.180
which is not as symbol-heavy as C++,


00:03:45.180 --> 00:03:48.060
but it's got a lot of abstractions in what it builds,


00:03:48.060 --> 00:03:49.140
for sure.


00:03:49.140 --> 00:03:49.980
- Yeah.


00:03:49.980 --> 00:03:52.940
I will say, I think there are certain things


00:03:52.940 --> 00:03:54.620
that Python does.


00:03:54.620 --> 00:03:57.740
I will say Python is not a perfect language


00:03:57.740 --> 00:03:59.340
by any stretch of the imagination,


00:03:59.340 --> 00:04:00.840
but I will say one thing about Python


00:04:00.840 --> 00:04:04.260
that I think is really cool is it did sort of,


00:04:04.260 --> 00:04:06.720
before many other languages, managed to integrate


00:04:06.720 --> 00:04:09.500
a lot of functional paradigms,


00:04:09.500 --> 00:04:12.420
like list comprehensions or comprehensions in general


00:04:12.420 --> 00:04:14.680
are I think one of those features where it's just like,


00:04:14.680 --> 00:04:19.000
this doesn't exist in a lot of other sort of more popular languages and they're really,


00:04:19.000 --> 00:04:22.320
really fluent and powerful in a way that like,


00:04:22.320 --> 00:04:26.520
is it, you kind of miss when you don't have it. Right.


00:04:26.520 --> 00:04:31.200
And so like, I think that that's, that's something that's really cool about Python,


00:04:31.200 --> 00:04:34.600
but Python itself, you know, being, being a language with the legacy that it has,


00:04:34.600 --> 00:04:38.400
you know I mean, we're going to be talking about the two to three differences,


00:04:38.400 --> 00:04:40.760
which have their own sort of


00:04:42.440 --> 00:04:48.200
nuances to them, but like it's always going to have some weirdnesses to it and some of those things are like just like oh


00:04:48.200 --> 00:04:53.320
Someone made a decision, you know 30 years ago that like still kind of reverberates today


00:04:53.320 --> 00:04:54.680
um


00:04:54.680 --> 00:04:56.120
and that can


00:04:56.120 --> 00:05:00.600
And and so that means that like it has this depth to it, you know, you you have to really


00:05:00.600 --> 00:05:05.560
Learn the depth in order to fully understand all of the problems that exist. Um


00:05:05.560 --> 00:05:08.920
Like dealing with not necessarily problems with the language, but like, you know


00:05:08.920 --> 00:05:11.800
When you're building software you run into problems that you have to solve


00:05:11.800 --> 00:05:20.800
And so that's like the main, I think that's, it's sort of, that's true of all languages to an extent, especially, you know, popular ones and older ones.


00:05:20.800 --> 00:05:36.800
But, yeah, I do think that Python, more than a lot of languages really, is able to straddle the line of like, being like, oh, it's approachable, but also you can do a lot of, you know, really, really interesting and powerful stuff with it.


00:05:36.800 --> 00:05:39.480
- Yeah, you compare that with like Java.


00:05:39.480 --> 00:05:41.960
Java, you've got to understand functions,


00:05:41.960 --> 00:05:46.960
you've got to understand classes, possibly namespaces,


00:05:46.960 --> 00:05:49.840
like just to write the first line of code.


00:05:49.840 --> 00:05:52.680
Whereas Python, you can work with it for like,


00:05:52.680 --> 00:05:55.280
you know what, this is really clumsy to repeat this.


00:05:55.280 --> 00:05:56.600
Maybe I'll learn what a function is


00:05:56.600 --> 00:05:57.560
and then I can start using that,


00:05:57.560 --> 00:05:58.560
but you don't know what a class is,


00:05:58.560 --> 00:06:00.120
you don't care about it.


00:06:00.120 --> 00:06:04.080
You kind of like slowly layer on the stuff as you need it


00:06:04.080 --> 00:06:09.480
the stuff as you need it, rather than you've got to jump in and go with it all at once.


00:06:09.480 --> 00:06:10.720
Yeah, for sure.


00:06:10.720 --> 00:06:14.160
Yeah. Interesting. So you're still at Yelp?


00:06:14.160 --> 00:06:15.160
Yes.


00:06:15.160 --> 00:06:16.160
Yeah.


00:06:16.160 --> 00:06:21.040
I'm in a conference room in our San Francisco office right now.


00:06:21.040 --> 00:06:24.560
Excellent. And what are you doing there?


00:06:24.560 --> 00:06:27.840
So I work on a team that's called Core Services.


00:06:27.840 --> 00:06:35.360
Our team is responsible for a lot of infrastructure,


00:06:35.360 --> 00:06:40.200
mostly Python focused, though not exclusively.


00:06:40.200 --> 00:06:44.840
We do a lot of our internal Python infrastructure.


00:06:44.840 --> 00:06:48.360
So we'll be responsible for making sure


00:06:48.360 --> 00:06:50.240
that we can upgrade to new Python versions.


00:06:50.240 --> 00:06:54.000
We own our internal PyPI.


00:06:54.000 --> 00:06:59.080
We recently, this is a cool thing that has happened since my talk,


00:06:59.080 --> 00:07:02.960
so I didn't mention it, is we recently built a system


00:07:02.960 --> 00:07:10.480
to automatically import certain packages from a public PyPI,


00:07:10.480 --> 00:07:13.160
and that has saved us some headaches.


00:07:13.160 --> 00:07:18.600
And then we own some other stuff,


00:07:18.600 --> 00:07:22.560
like we've dealt a lot with the general service contract at Yelp,


00:07:22.560 --> 00:07:25.480
So being like, okay, what does it mean to be a service?


00:07:25.480 --> 00:07:27.320
How do you be a good citizen there?


00:07:27.320 --> 00:07:31.320
And a lot of other things like testing tools,


00:07:31.320 --> 00:07:32.920
a lot of like, sort of like,


00:07:32.920 --> 00:07:36.920
oh, I need to test against multiple services.


00:07:36.920 --> 00:07:39.000
We have a testing tool that like automates


00:07:39.000 --> 00:07:40.560
a lot of the steps to like sort of get those


00:07:40.560 --> 00:07:43.440
all connected together so you can test against them.


00:07:43.440 --> 00:07:45.760
- Yeah, it sounds like a really fun


00:07:45.760 --> 00:07:47.680
set of tasks you're doing there.


00:07:47.680 --> 00:07:50.680
So you said you have an internal,


00:07:50.680 --> 00:07:52.640
We're going to dive into code and stuff


00:07:52.640 --> 00:07:54.320
and all this whole migration.


00:07:54.320 --> 00:07:56.480
But just kind of sidebar, you said


00:07:56.480 --> 00:08:01.160
you have this internal private PyPI server.


00:08:01.160 --> 00:08:04.600
What's the details around that?


00:08:04.600 --> 00:08:07.080
Obviously, you're whitelisting things


00:08:07.080 --> 00:08:09.000
that can be brought inside, saying


00:08:09.000 --> 00:08:10.680
we're going to put those onto our server.


00:08:10.680 --> 00:08:12.880
And you can request, and you can choose


00:08:12.880 --> 00:08:14.960
when to let the new one in and so on.


00:08:14.960 --> 00:08:19.640
But what's the software, and how do you put that together?


00:08:19.640 --> 00:08:30.640
Right. So a number of years ago now, we switched to a piece of software that I don't think


00:08:30.640 --> 00:08:39.340
is used pretty much anywhere else, which was built by one of my teammates, who named Chris


00:08:39.340 --> 00:08:48.860
Keel. So Chris Keel built a essentially a PyPI implementation called dumb PyPI. It's


00:08:48.860 --> 00:08:53.060
It's called dumb PyPI because unlike some other PyPI servers,


00:08:53.060 --> 00:08:55.660
the way that it works is you just sort of give it


00:08:55.660 --> 00:08:59.980
a list of distributions, and then it just generates


00:08:59.980 --> 00:09:01.860
all of the HTML pages.


00:09:01.860 --> 00:09:04.540
So instead of being like, oh, I'm a server,


00:09:04.540 --> 00:09:08.300
and I'm going to handle this request and blah, blah, blah,


00:09:08.300 --> 00:09:10.820
and run some code, it's literally like, OK,


00:09:10.820 --> 00:09:12.620
here are the HTML pages.


00:09:12.620 --> 00:09:13.120
- I see.


00:09:13.120 --> 00:09:17.940
It's like a static site generator for a PyPI backend.


00:09:17.940 --> 00:09:19.020
Yeah, yeah.


00:09:19.020 --> 00:09:21.860
And we've been using that for a really long time,


00:09:21.860 --> 00:09:26.300
and maybe like four or five years now.


00:09:26.300 --> 00:09:29.260
And it's served us pretty well.


00:09:29.260 --> 00:09:36.300
And it's really nice, in my opinion,


00:09:36.300 --> 00:09:40.780
because it's the only service that my team actually owns,


00:09:40.780 --> 00:09:42.060
and it never pages us.


00:09:42.060 --> 00:09:42.740
So that's great.


00:09:42.740 --> 00:09:44.540
I love that it never pages us.


00:09:44.540 --> 00:09:45.660
It can't go down.


00:09:45.660 --> 00:09:46.660
Yeah.


00:09:46.660 --> 00:09:47.260
Not really.


00:09:47.260 --> 00:09:50.420
- Well, it can't, it would be good if it goes down,


00:09:50.420 --> 00:09:51.800
but also it doesn't.


00:09:51.800 --> 00:09:53.720
That's the great part, is it just doesn't.


00:09:53.720 --> 00:09:56.460
So Chris's software works great.


00:09:56.460 --> 00:09:58.720
- Yeah, that's a really cool idea.


00:09:58.720 --> 00:10:02.080
And so you tell it certain versions


00:10:02.080 --> 00:10:04.020
or do you just limit it to the libraries


00:10:04.020 --> 00:10:05.660
and let it pick the latest versions


00:10:05.660 --> 00:10:08.220
of whatever's on real PyPI?


00:10:08.220 --> 00:10:12.420
- So the way that we do it is we have a whole system


00:10:12.420 --> 00:10:16.340
which imports packages.


00:10:16.340 --> 00:10:18.660
We actually rebuild all of our wheels.


00:10:18.660 --> 00:10:23.720
It's kind of for kind of hard to explain reasons,


00:10:23.720 --> 00:10:27.340
but so what we'll do is we'll like,


00:10:27.340 --> 00:10:30.280
someone will say, hey, I want this version of this package.


00:10:30.280 --> 00:10:31.820
Or maybe they'll just say, hey, I want this package


00:10:31.820 --> 00:10:34.420
and then we'll just pull down the newest one at the time.


00:10:34.420 --> 00:10:39.420
And we'll do some like security vetting on it.


00:10:39.420 --> 00:10:41.900
So we have some like automated security stuff


00:10:41.900 --> 00:10:45.180
and basically just make sure that it's like not malicious.


00:10:45.180 --> 00:10:49.580
And then we build the wheels and then we upload those


00:10:49.580 --> 00:10:53.600
to the S3 bucket that like backs our PyPI.


00:10:53.600 --> 00:10:56.060
So we just do that.


00:10:56.060 --> 00:11:02.220
In terms of like how we decide,


00:11:02.220 --> 00:11:03.860
it's basically just sort of like,


00:11:03.860 --> 00:11:09.180
we make sure, we do the security check,


00:11:09.180 --> 00:11:10.840
we do like, there's a few other things,


00:11:10.840 --> 00:11:12.620
like we make sure we have all the dependencies,


00:11:12.620 --> 00:11:15.540
We make sure we have, that it has like a license


00:11:15.540 --> 00:11:20.540
that we're okay with, you know, with using internally.


00:11:20.540 --> 00:11:23.820
And so all of those things are checked.


00:11:23.820 --> 00:11:27.820
And then we have, as I mentioned,


00:11:27.820 --> 00:11:30.680
we have this sort of like automated import system.


00:11:30.680 --> 00:11:33.060
So like certain packages, we'll just,


00:11:33.060 --> 00:11:34.620
we'll try to download them.


00:11:34.620 --> 00:11:36.660
They might fail, you know, one of those checks


00:11:36.660 --> 00:11:37.740
and then we won't upload it.


00:11:37.740 --> 00:11:40.300
But like, you know, so we'll just like import it.


00:11:40.300 --> 00:11:41.180
We'll try to import it.


00:11:41.180 --> 00:11:45.820
And so certain packages, we'll try to get the newest one.


00:11:45.820 --> 00:11:49.180
Some packages, we haven't set that up for one reason


00:11:49.180 --> 00:11:49.660
or another.


00:11:49.660 --> 00:11:52.140
Some packages-- there are certain packages


00:11:52.140 --> 00:11:53.900
that are just difficult to build,


00:11:53.900 --> 00:11:56.940
and so we avoid importing them.


00:11:56.940 --> 00:11:57.940
Right.


00:11:57.940 --> 00:11:59.300
We got this one working.


00:11:59.300 --> 00:12:00.460
It's fine.


00:12:00.460 --> 00:12:01.100
Yes.


00:12:01.100 --> 00:12:02.060
Yes.


00:12:02.060 --> 00:12:03.900
And so some are difficult to build.


00:12:03.900 --> 00:12:05.820
Some are just like, oh, this is a package


00:12:05.820 --> 00:12:07.220
we've never used before.


00:12:07.220 --> 00:12:09.820
So we just don't use it.


00:12:09.820 --> 00:12:10.460
Yeah.


00:12:10.460 --> 00:12:13.260
So we don't have it.


00:12:13.260 --> 00:12:16.300
>> Yeah, you talked about how many dependencies your projects


00:12:16.300 --> 00:12:17.100
have and stuff.


00:12:17.100 --> 00:12:17.900
And that'll be fun.


00:12:17.900 --> 00:12:22.180
But let's maybe take a step back and just talk about Python


00:12:22.180 --> 00:12:28.100
at Yelp, this main project that you have.


00:12:28.100 --> 00:12:31.700
It was running on Python 2.


00:12:31.700 --> 00:12:33.180
I mean, it's kind of obvious.


00:12:33.180 --> 00:12:35.580
But some of the reasons are obvious, some are not.


00:12:35.580 --> 00:12:40.100
Like, why did you care what version of Python it's on?


00:12:40.100 --> 00:12:41.100
That's a good question.


00:12:41.100 --> 00:12:47.020
I mean, I think the main reason was just sort of like we saw the writing on the wall.


00:12:47.020 --> 00:12:50.400
The writing on the wall was the end of life for Python 2, right?


00:12:50.400 --> 00:12:55.220
And I think everyone else, we knew that other people were going to follow that, right?


00:12:55.220 --> 00:13:01.180
There was, I remember in 2019 when I was looking into this, there was a thing, I think it was


00:13:01.180 --> 00:13:07.660
called like the Python pledge or something like that, where basically like packages would,


00:13:07.660 --> 00:13:11.580
open source packages would say like, "Hey, we're going to drop Python 3, you know, after


00:13:11.580 --> 00:13:16.020
end of life at some point, like, you know, either the day of or, you know, a few months


00:13:16.020 --> 00:13:19.540
later or something like that." And so we were sort of looking at that and being like, "Well,


00:13:19.540 --> 00:13:24.140
we use some of those packages, you know, and eventually we might want to upgrade them."


00:13:24.140 --> 00:13:31.740
- You're about to get frozen in time around mid 2020. So you're, you maybe don't want


00:13:31.740 --> 00:13:32.740
that.


00:13:32.740 --> 00:13:37.740
And by the time that I did my talk, I remember,


00:13:37.740 --> 00:13:40.620
I think it was early 2021 or something,


00:13:40.620 --> 00:13:42.700
Pip had dropped support for Python 2.


00:13:42.700 --> 00:13:44.440
So that was like one of those things


00:13:44.440 --> 00:13:45.900
where it was just sort of like,


00:13:45.900 --> 00:13:48.380
yeah, there's not a realistic ecosystem


00:13:48.380 --> 00:13:51.420
in which you are able to use like open source


00:13:51.420 --> 00:13:55.740
and like upgrade your stuff for security patches or whatever.


00:13:55.740 --> 00:13:58.660
I want this new feature.


00:13:58.660 --> 00:14:01.920
Oh, sorry, that's Python 3 only kind of thing.


00:14:01.920 --> 00:14:04.320
So that was like the main motivation.


00:14:04.320 --> 00:14:05.160
- Right.


00:14:05.160 --> 00:14:06.840
- And then I think some secondary stuff


00:14:06.840 --> 00:14:09.320
was just sort of like, you know,


00:14:09.320 --> 00:14:14.560
as you build, as you, you know, as time marches on


00:14:14.560 --> 00:14:17.800
and like people stop being familiar with like Python 2


00:14:17.800 --> 00:14:20.500
and it has some quirks, you know, compared to Python 3,


00:14:20.500 --> 00:14:23.120
you definitely have the problem of like,


00:14:23.120 --> 00:14:25.520
okay, now you have to like, if you're hiring people


00:14:25.520 --> 00:14:26.360
and they're working on Python 2,


00:14:26.360 --> 00:14:28.800
you have to train them up on those quirks


00:14:28.800 --> 00:14:31.600
in a way that like you wouldn't necessarily have to do


00:14:31.600 --> 00:14:36.360
if you're using a modern language that other places are using.


00:14:36.360 --> 00:14:41.920
And so those were, I think, the main motivations.


00:14:41.920 --> 00:14:44.800
Personally, I think I had a small motivation myself,


00:14:44.800 --> 00:14:48.240
which was just sort of like, I hate seeing things be left


00:14:48.240 --> 00:14:49.840
behind like this.


00:14:49.840 --> 00:14:50.880
Yeah, sure.


00:14:50.880 --> 00:14:51.880
Very emotional thing.


00:14:51.880 --> 00:14:56.640
But yeah, that's part of the reason I pushed for it.


00:14:56.640 --> 00:14:58.360
Well, there's the train thing.


00:14:58.360 --> 00:15:01.880
There's obviously just the infrastructure stopping,


00:15:01.880 --> 00:15:03.720
stopping the updates.


00:15:03.720 --> 00:15:07.480
But there's the training side of helping people


00:15:07.480 --> 00:15:10.040
who are new come, but there's also the,


00:15:10.040 --> 00:15:13.200
how do you hire the very best engineers?


00:15:13.200 --> 00:15:18.080
It's really hard to get an amazing Python engineer


00:15:18.080 --> 00:15:23.000
to come and say, you're gonna do amazing work from 2008.


00:15:23.000 --> 00:15:24.320
You're gonna love it, you know what I mean, right?


00:15:24.320 --> 00:15:27.160
Like, if they're working on some new package


00:15:27.160 --> 00:15:29.200
that they're inspired about, instead of trying


00:15:29.200 --> 00:15:32.300
to bring that in and help make that better


00:15:32.300 --> 00:15:33.600
and also boost what you're doing,


00:15:33.600 --> 00:15:34.620
it's like, well, we can't use that


00:15:34.620 --> 00:15:36.200
'cause you only do it in Python 3.


00:15:36.200 --> 00:15:38.520
Well, of course, I created it two years ago.


00:15:38.520 --> 00:15:40.360
Why wouldn't it be Python 3 only?


00:15:40.360 --> 00:15:43.560
There's a lot of knock-on effects like that, right?


00:15:43.560 --> 00:15:45.120
- Yeah.


00:15:45.120 --> 00:15:48.920
- Did you see the performance stuff from 2.11


00:15:48.920 --> 00:15:53.140
or even from 2, sorry, 2.11, 3.11 or even 3.10,


00:15:53.140 --> 00:15:55.400
where you're like, you know,


00:15:55.400 --> 00:16:00.920
there might actually be fewer servers as well if we do this?


00:16:00.920 --> 00:16:07.360
That's definitely something that we want to do.


00:16:07.360 --> 00:16:10.480
That specific issue is something that we're


00:16:10.480 --> 00:16:12.680
trying to move towards being able to use


00:16:12.680 --> 00:16:16.400
those versions of Python right now.


00:16:16.400 --> 00:16:17.920
It's always a process just because


00:16:17.920 --> 00:16:20.160
of various internal things.


00:16:20.160 --> 00:16:24.720
But it's definitely something that


00:16:24.720 --> 00:16:26.520
has been talked about is we're like, yeah,


00:16:26.520 --> 00:16:28.200
if we could use new versions of Python,


00:16:28.200 --> 00:16:33.000
maybe things will be faster, things will be more efficient.


00:16:33.000 --> 00:16:34.560
Trying not to spend too much money


00:16:34.560 --> 00:16:37.480
is definitely a thing that we think about.


00:16:37.480 --> 00:16:39.320
So that's definitely exciting.


00:16:39.320 --> 00:16:39.960
Yeah.


00:16:39.960 --> 00:16:42.120
When I did the episode on 3.11, we


00:16:42.120 --> 00:16:43.800
talked a lot about the performance there.


00:16:43.800 --> 00:16:44.920
And it's impressive.


00:16:44.920 --> 00:16:48.040
It's 40%, 50%, 60%.


00:16:48.040 --> 00:16:49.560
And I won't steal your thunder.


00:16:49.560 --> 00:16:53.120
I know at the end, you've got some nice performance boosts


00:16:53.120 --> 00:16:56.240
that you got even from the changes that you made.


00:16:56.240 --> 00:16:58.880
But there was somebody in the audience that pointed out,


00:16:58.880 --> 00:17:01.880
not only is this faster, which is nice for us--


00:17:01.880 --> 00:17:04.680
it's nice that we have to pay less for servers,


00:17:04.680 --> 00:17:07.080
or it's nice that our code runs a little bit faster,


00:17:07.080 --> 00:17:09.320
but it's also good for the planet.


00:17:09.320 --> 00:17:13.460
If we just all start using newer, faster foundations,


00:17:13.460 --> 00:17:17.040
then necessarily we just use less energy


00:17:17.040 --> 00:17:20.280
to do the same thing that we're already doing.


00:17:20.280 --> 00:17:24.080
- Yeah, that's definitely, I like that for sure.


00:17:24.080 --> 00:17:25.240
- I do too.


00:17:25.240 --> 00:17:26.080
I do too.


00:17:26.080 --> 00:17:29.080
All right, well, let's talk about Python at Yelp.


00:17:29.080 --> 00:17:34.080
So you've got this repo, this big project called Yelp main.


00:17:34.080 --> 00:17:35.520
Let's start there.


00:17:35.520 --> 00:17:38.500
- Sure.


00:17:38.500 --> 00:17:42.000
Yelp main is what it sounds like.


00:17:42.000 --> 00:17:44.680
It is sort of the original repo Yelp.


00:17:44.680 --> 00:17:48.320
That's, you know, when you're a startup in 2004,


00:17:48.320 --> 00:17:51.680
you kind of just make a repo, right?


00:17:51.680 --> 00:17:52.860
And it's your web app.


00:17:52.860 --> 00:17:54.960
- And that's probably made a Subversion repo.


00:17:54.960 --> 00:17:55.800
- It wasn't.


00:17:55.800 --> 00:17:58.560
- None of that CVS stuff we're gonna do in Subversion.


00:17:58.560 --> 00:18:02.260
- I don't remember when we switched from Subversion,


00:18:02.260 --> 00:18:03.440
but it was Subversion.


00:18:03.440 --> 00:18:06.160
I don't know if it was before,


00:18:06.160 --> 00:18:08.920
I don't know if we actually started out in Subversion,


00:18:08.920 --> 00:18:13.000
but 'cause I didn't start until 2014.


00:18:13.000 --> 00:18:16.100
But yeah, it's definitely Subversion was,


00:18:16.100 --> 00:18:17.860
I know there was some old Subversion stuff,


00:18:17.860 --> 00:18:21.980
But so you have this one, you know, sort of web app


00:18:21.980 --> 00:18:26.980
and the web app is a server that serves,


00:18:26.980 --> 00:18:30.020
that originally served everything.


00:18:30.020 --> 00:18:31.820
So, you know, there's a bunch of stuff,


00:18:31.820 --> 00:18:34.180
like, you know, you can sort of think of as like,


00:18:34.180 --> 00:18:36.340
you know, you have yelp.com, right?


00:18:36.340 --> 00:18:39.060
Like if you go to www.yelp.com,


00:18:39.060 --> 00:18:42.100
then you're looking at what you think of as Yelp, right?


00:18:42.100 --> 00:18:44.620
It's like, oh, I can search for businesses,


00:18:44.620 --> 00:18:47.540
I can look at their reviews, I can write my own reviews,


00:18:47.540 --> 00:18:48.660
that kind of stuff.


00:18:48.660 --> 00:18:50.480
So it's that, but it's also other stuff.


00:18:50.480 --> 00:18:53.140
It's also our business owner site.


00:18:53.140 --> 00:18:55.420
So biz.yalt.com, which is, you know,


00:18:55.420 --> 00:18:57.800
where business owners like look at their own businesses


00:18:57.800 --> 00:19:00.440
and like are able to see like metrics and like, you know,


00:19:00.440 --> 00:19:01.920
buy ads and stuff like that.


00:19:01.920 --> 00:19:07.260
There's our admin site, which is, you know,


00:19:07.260 --> 00:19:10.420
where a lot of, you know, anybody,


00:19:10.420 --> 00:19:13.460
we have our sort of user operations people whose job is


00:19:13.460 --> 00:19:15.300
at least partially to do some moderation


00:19:15.300 --> 00:19:16.220
and stuff like that.


00:19:16.220 --> 00:19:18.620
So like we need to be able to have those tools.


00:19:18.620 --> 00:19:24.840
And then there's also what we call internal API.


00:19:24.840 --> 00:19:29.780
And internal API is a way for internal stuff


00:19:29.780 --> 00:19:31.800
to get the data that's in Yelp main.


00:19:31.800 --> 00:19:35.420
So that's what that is.


00:19:35.420 --> 00:19:37.720
And that's like its own separate sort of site.


00:19:37.720 --> 00:19:41.140
But these are all in the same repo.


00:19:41.140 --> 00:19:43.620
They all run in the same process.


00:19:43.620 --> 00:19:46.400
That's, yeah, sorry, say something.


00:19:46.400 --> 00:19:48.220
- No, I was just gonna ask,


00:19:48.220 --> 00:19:51.120
is this kind of the mono repo style


00:19:51.120 --> 00:19:53.460
or it's truly a monolith in the sense


00:19:53.460 --> 00:19:55.660
that it's kind of all the same app?


00:19:55.660 --> 00:19:56.760
- It's truly a monolith.


00:19:56.760 --> 00:20:00.260
I mean, there is some amount of stuff where it's like,


00:20:00.260 --> 00:20:02.140
oh, we have like different containers


00:20:02.140 --> 00:20:04.080
running like different entry points,


00:20:04.080 --> 00:20:06.780
but like the code is all kind of tangled up together.


00:20:06.780 --> 00:20:10.340
So there's not really a meaningful delineation


00:20:10.340 --> 00:20:12.020
between different components


00:20:12.020 --> 00:20:14.180
in a way that you could really separate them out


00:20:14.180 --> 00:20:16.060
in any meaningful way.


00:20:16.060 --> 00:20:20.300
So like my understanding of like what I would define


00:20:20.300 --> 00:20:23.260
as a monorepo, I wouldn't really call it that.


00:20:23.260 --> 00:20:24.860
I would just call it, I would call it a monolist.


00:20:24.860 --> 00:20:26.340
- Just a large app.


00:20:26.340 --> 00:20:29.340
- Yeah, it's just a huge, huge, huge app, huge repo.


00:20:29.340 --> 00:20:31.540
- Yeah, yeah, okay.


00:20:31.540 --> 00:20:34.800
So in your talk, you said that you have six different sites


00:20:34.800 --> 00:20:37.700
with 2000 different endpoints.


00:20:37.700 --> 00:20:38.540
- Yeah.


00:20:38.540 --> 00:20:40.140
- Which it's a lot.


00:20:40.140 --> 00:20:42.260
I don't think it's completely excessive or anything,


00:20:42.260 --> 00:20:47.260
like 2000 URL endpoints for all those different services


00:20:47.260 --> 00:20:49.340
and like all those different admin apps.


00:20:49.340 --> 00:20:52.220
It seems it's a lot, but it's not insane.


00:20:52.220 --> 00:20:55.500
And then you have these background batch services.


00:20:55.500 --> 00:20:58.040
What's the story of those?


00:20:58.040 --> 00:21:00.980
- It's just sort of anything that you need done.


00:21:00.980 --> 00:21:02.780
You know, as I said, this was just sort of like,


00:21:02.780 --> 00:21:04.620
this is the one repo, right?


00:21:04.620 --> 00:21:06.980
And so there's a lot of things that you want done


00:21:06.980 --> 00:21:10.620
that aren't necessarily done in the context of a web request


00:21:10.620 --> 00:21:13.300
or don't make sense to do synchronously.


00:21:13.300 --> 00:21:16.100
So a lot of that is just sort of like,


00:21:16.100 --> 00:21:20.180
okay, I need to do this really complex report


00:21:20.180 --> 00:21:21.260
or something, right?


00:21:21.260 --> 00:21:23.100
I wanna get some metrics that involve


00:21:23.100 --> 00:21:24.500
collating a bunch of data,


00:21:24.500 --> 00:21:27.220
doing a bunch of joins against a bunch of tables.


00:21:27.220 --> 00:21:29.940
Okay, well, I'm not gonna have just a web request do that,


00:21:29.940 --> 00:21:33.180
I'm gonna put that in a separate process.


00:21:33.180 --> 00:21:36.860
And we originally, as you can imagine,


00:21:36.860 --> 00:21:38.740
for that type of application,


00:21:38.740 --> 00:21:40.500
we just called them those batches.


00:21:40.500 --> 00:21:43.020
Yeah, a batch job, right?


00:21:43.020 --> 00:21:47.340
That name is stuck, despite the fact that now batches


00:21:47.340 --> 00:21:49.460
don't necessarily do that type of work.


00:21:49.460 --> 00:21:50.700
They're just sort of anything


00:21:50.700 --> 00:21:52.740
that you wanna do in the background.


00:21:52.740 --> 00:21:53.580
- Right.


00:21:53.580 --> 00:21:54.740
- And that could be something like,


00:21:54.740 --> 00:21:58.300
oh, the first of the month we do our like ad billing,


00:21:58.300 --> 00:22:02.340
or, you know, we might have some process


00:22:02.340 --> 00:22:07.620
where it's just sort of like, oh, we want to update this cache


00:22:07.620 --> 00:22:10.120
based on data stuff, but we don't


00:22:10.120 --> 00:22:12.660
want to do it inline in a web request.


00:22:12.660 --> 00:22:14.780
We can do it asynchronously.


00:22:14.780 --> 00:22:17.140
So it's really anything that is not


00:22:17.140 --> 00:22:20.900
in the context of a web request.


00:22:20.900 --> 00:22:25.380
I suspect most major apps, most companies


00:22:25.380 --> 00:22:26.900
have that kind of stuff too, right?


00:22:26.900 --> 00:22:28.380
They've got to.


00:22:28.380 --> 00:22:30.980
I mean, everyone has some version of it.


00:22:30.980 --> 00:22:33.820
whether or not they do it exactly the way that we do it


00:22:33.820 --> 00:22:37.100
is a separate question that I'm not really sure.


00:22:37.100 --> 00:22:38.420
- Yeah, I think part of the story is,


00:22:38.420 --> 00:22:41.420
do you deploy them all out of the same code base?


00:22:41.420 --> 00:22:45.540
Or are they a bunch of different jobs and repos


00:22:45.540 --> 00:22:46.980
or how's that fit together?


00:22:46.980 --> 00:22:50.300
That's probably where it varies.


00:22:50.300 --> 00:22:52.460
- Yeah, I mean, for us, we have,


00:22:52.460 --> 00:22:54.260
I mean, I said 800 batches


00:22:54.260 --> 00:22:56.340
and I was referring specifically to the batches


00:22:56.340 --> 00:22:58.380
that are still in the Yelp main repo.


00:22:58.380 --> 00:22:59.480
And like I said, all of these things


00:22:59.480 --> 00:23:01.040
are kind of tangled together.


00:23:01.040 --> 00:23:03.200
So it's not like, oh, you can just like pull a batch out.


00:23:03.200 --> 00:23:05.400
Like that's like talking about like,


00:23:05.400 --> 00:23:07.320
well, how do you get the data that it needs?


00:23:07.320 --> 00:23:09.320
And like, what does that look like?


00:23:09.320 --> 00:23:10.360
And blah, blah, blah.


00:23:10.360 --> 00:23:11.960
- So how does it get the data access layer?


00:23:11.960 --> 00:23:13.720
And how does it get a hold of the logging thing


00:23:13.720 --> 00:23:16.320
that's over here and all that kind of stuff, right?


00:23:16.320 --> 00:23:17.140
- Exactly.


00:23:17.140 --> 00:23:19.520
So like, so there's 800 batches,


00:23:19.520 --> 00:23:21.960
but we also have tons and tons of batches


00:23:21.960 --> 00:23:23.340
that are in services.


00:23:23.340 --> 00:23:26.100
So they live in service repos and they run,


00:23:26.100 --> 00:23:28.400
and they're in a totally separate code base.


00:23:28.400 --> 00:23:31.040
I don't know what that number is.


00:23:31.040 --> 00:23:34.060
I'd have to figure it out, but it's definitely a lot.


00:23:34.060 --> 00:23:35.540
It's probably, it's almost certainly more


00:23:35.540 --> 00:23:37.660
than we have in Yelp main at this point,


00:23:37.660 --> 00:23:42.640
but that paradigm exists all over Yelp


00:23:42.640 --> 00:23:44.500
and not just in this repo.


00:23:44.500 --> 00:23:45.340
- Yeah.


00:23:45.340 --> 00:23:49.180
Well, I think these are a lot of value


00:23:49.180 --> 00:23:51.700
to having that code together, right?


00:23:51.700 --> 00:23:54.780
If you break this out into a whole bunch


00:23:54.780 --> 00:23:57.060
of different repos, you've got dependency management,


00:23:57.060 --> 00:24:00.100
versioning, deployment, like there are some values


00:24:00.100 --> 00:24:03.220
just saying like, just let it live together.


00:24:03.220 --> 00:24:06.020
We'll upgrade it together, but it does make


00:24:06.020 --> 00:24:07.900
for some striking headlines when you talk about


00:24:07.900 --> 00:24:10.460
how many lines of code got upgraded at once, right?


00:24:10.460 --> 00:24:13.540
- Yeah, I mean, I think that when you're talking about


00:24:13.540 --> 00:24:15.180
like, why do we still have a monolith?


00:24:15.180 --> 00:24:18.500
The answer is mostly just because it's really hard


00:24:18.500 --> 00:24:21.180
to not have one, once you have one,


00:24:21.180 --> 00:24:23.460
you have to do all the work to move it out.


00:24:23.460 --> 00:24:25.180
And there are disadvantages, like you said,


00:24:25.180 --> 00:24:27.020
it's sort of like, okay, now, as soon as you have


00:24:27.020 --> 00:24:32.060
new repo, it has its own set of dependencies that you have to keep up to date and you have


00:24:32.060 --> 00:24:36.500
to do other sort of maintenance on it.


00:24:36.500 --> 00:24:40.980
Generally speaking, we consider that better though still because it's sort of like, it's


00:24:40.980 --> 00:24:42.500
always better.


00:24:42.500 --> 00:24:48.180
Imagine if I'm in this giant monolith and I'm like, "Oh, I need to upgrade this package."


00:24:48.180 --> 00:24:53.020
And it's like, "Okay, well, you want to do a major upgrade and this package is imported


00:24:53.020 --> 00:24:54.980
in a thousand places.


00:24:54.980 --> 00:24:58.220
Now you need to deal with that migration.


00:24:58.220 --> 00:25:03.340
Whereas if it's like, oh, I'm in my service and I need to do this package upgrade and


00:25:03.340 --> 00:25:09.780
it's imported in 10 places, that's like an afternoon instead of like, you know, a quarter


00:25:09.780 --> 00:25:12.540
of a year or something, right?


00:25:12.540 --> 00:25:14.580
So there's definitely advantages to that.


00:25:14.580 --> 00:25:21.900
It does add, it's sort of like more work overall, but you can do it in a more granular way.


00:25:21.900 --> 00:25:26.000
So it allows you to unblock people faster, essentially.


00:25:26.000 --> 00:25:29.140
So we definitely want to move away from monolith


00:25:29.140 --> 00:25:30.760
and we have been doing that.


00:25:30.760 --> 00:25:32.300
Compared to when I started at Yelp,


00:25:32.300 --> 00:25:35.420
we have way, way less of a code


00:25:35.420 --> 00:25:37.480
that is important running in Yelp main.


00:25:37.480 --> 00:25:39.160
There is still a ton that's important in there.


00:25:39.160 --> 00:25:40.700
Like I mentioned in my talk,


00:25:40.700 --> 00:25:45.140
almost inevitably someone has to call into an internal API


00:25:45.140 --> 00:25:46.840
to get data out of it.


00:25:46.840 --> 00:25:50.400
So that's something that we definitely want to fix


00:25:50.400 --> 00:25:53.760
at some point, but it is a process


00:25:53.760 --> 00:25:56.100
and that process is generally speaking,


00:25:56.100 --> 00:25:59.040
like we're getting to a point where like some people


00:25:59.040 --> 00:26:01.440
who work at Yelp don't really work in Yelp main anymore.


00:26:01.440 --> 00:26:03.400
Like they just don't have to deal with it,


00:26:03.400 --> 00:26:05.600
especially not on a day-to-day basis.


00:26:05.600 --> 00:26:06.520
- Right, sure.


00:26:06.520 --> 00:26:08.920
And you mentioned your talk,


00:26:08.920 --> 00:26:10.600
I don't know if I said this at the beginning,


00:26:10.600 --> 00:26:13.040
but you gave a talk at PyCon 2022,


00:26:13.040 --> 00:26:15.360
which is definitely was a very popular one


00:26:15.360 --> 00:26:17.560
and highlights some of these things there as well.


00:26:17.560 --> 00:26:19.160
So I'll be sure to link to that


00:26:19.160 --> 00:26:20.760
that people can check it out.


00:26:20.760 --> 00:26:22.800
And you talk about people developing in Yelp main,


00:26:22.800 --> 00:26:26.560
some of them not, but there's still a lot happening there.


00:26:26.560 --> 00:26:31.560
You said 20 pushes a day, 800 simultaneous developers.


00:26:31.560 --> 00:26:36.400
And yeah, that's no joke.


00:26:36.400 --> 00:26:39.900
That's a lot of traffic on a repo.


00:26:39.900 --> 00:26:42.800
- Yeah, I think since I did that talk


00:26:42.800 --> 00:26:45.080
where we've been trending down


00:26:45.080 --> 00:26:47.120
in terms of number of changes per day,


00:26:47.120 --> 00:26:50.720
but it's still probably like somewhere in the eight,


00:26:50.720 --> 00:26:53.880
like 15 to 25 a day.


00:26:53.880 --> 00:26:57.160
So it's less, like that's an appreciable percentage less,


00:26:57.160 --> 00:26:59.120
but it's still a lot of changes per day.


00:26:59.120 --> 00:27:01.760
Yeah.


00:27:01.760 --> 00:27:02.800
- Yeah.


00:27:02.800 --> 00:27:06.320
And you also said you have 700 Python package dependencies.


00:27:06.320 --> 00:27:08.200
We talked about the private PyPI.


00:27:08.200 --> 00:27:11.760
So when you say you have 700 dependencies,


00:27:11.760 --> 00:27:13.720
that's if I go into the virtual environment


00:27:13.720 --> 00:27:17.080
and type, you know, pip list, I see 700 things.


00:27:17.080 --> 00:27:18.720
- Yep. - Okay.


00:27:18.720 --> 00:27:21.960
It's a lot. - It's a lot.


00:27:21.960 --> 00:27:24.880
It was an ordeal dealing with that.


00:27:24.880 --> 00:27:31.160
- Especially coming from a long time ago until present,


00:27:31.160 --> 00:27:35.100
right, in terms of code, code compatibility, right?


00:27:35.100 --> 00:27:36.960
Some of those things you depended on,


00:27:36.960 --> 00:27:40.280
maybe their new versions have moved to Python 3,


00:27:40.280 --> 00:27:42.320
but maybe with breaking changes.


00:27:42.320 --> 00:27:45.940
Others, they might just not have a Python 3 version.


00:27:45.940 --> 00:27:50.860
And how did you deal with that?


00:27:50.860 --> 00:27:56.200
There were basically, in terms of like open source stuff, there were basically like three


00:27:56.200 --> 00:27:59.060
ways that we dealt with that.


00:27:59.060 --> 00:28:03.580
So one is just like upgrade, right?


00:28:03.580 --> 00:28:06.700
And like deal with whatever the upgrade entails.


00:28:06.700 --> 00:28:10.180
I don't think we really ran into any issues where we were like, oh, no, we have to do


00:28:10.180 --> 00:28:15.540
this like massive, you know, breaking change, you know, migration.


00:28:15.540 --> 00:28:19.180
That wasn't really a problem that we ran into, thankfully.


00:28:19.180 --> 00:28:22.860
So a lot of those were just sort of like figuring out what packages need to be upgraded and


00:28:22.860 --> 00:28:27.480
just sort of doing the upgrade, making sure that they test pass and that kind of stuff.


00:28:27.480 --> 00:28:30.240
So that wasn't too bad.


00:28:30.240 --> 00:28:34.640
The other one, which was a little bit more annoying, was, like you said, some packages


00:28:34.640 --> 00:28:41.260
just stopped updating before they got Python 3 support.


00:28:41.260 --> 00:28:42.380
And we were relying on them.


00:28:42.380 --> 00:28:44.480
So we had to be like, OK, well, can we


00:28:44.480 --> 00:28:49.700
replace these with something that fixed that?


00:28:49.700 --> 00:28:53.900
And there were a few examples of packages


00:28:53.900 --> 00:28:56.640
where it sort of stopped getting development,


00:28:56.640 --> 00:29:00.960
and then someone was like, oh, I see where the problem--


00:29:00.960 --> 00:29:02.800
that's a problem for me, so I'm going to fix that.


00:29:02.800 --> 00:29:05.260
And so luckily, a lot of people had already done that work,


00:29:05.260 --> 00:29:09.600
and there were forks or sort of drop-in replacements,


00:29:09.600 --> 00:29:11.880
or sometimes not exactly drop-in replacements,


00:29:11.880 --> 00:29:15.360
but close enough that we could do the small amount of work


00:29:15.360 --> 00:29:16.640
that was needed.


00:29:16.640 --> 00:29:18.960
>>It's one of the advantages of being a little bit later


00:29:18.960 --> 00:29:22.840
to the party is it lets other people bump into those problems


00:29:22.840 --> 00:29:24.960
and maybe they fixed them for you, right?


00:29:24.960 --> 00:29:27.080
That probably happened most of the time, honestly.


00:29:27.080 --> 00:29:29.280
>>That was definitely a good chunk of the time.


00:29:29.280 --> 00:29:33.680
I couldn't tell you, I'd have to go back and run the numbers


00:29:33.680 --> 00:29:37.640
on what percentage of the time that was, but we definitely,


00:29:37.640 --> 00:29:39.040
yeah, there was definitely a good chunk of things


00:29:39.040 --> 00:29:39.880
where we were just sort of like,


00:29:39.880 --> 00:29:42.160
Oh, someone already made the fork or whatever,


00:29:42.160 --> 00:29:43.120
and we can just use that.


00:29:43.120 --> 00:29:44.640
And that was nice.


00:29:44.640 --> 00:29:49.160
It was sort of like, okay, that one checked off.


00:29:49.160 --> 00:29:55.560
And then the final sort of grouping


00:29:55.560 --> 00:29:59.400
was stuff where that wasn't available.


00:29:59.400 --> 00:30:03.560
So it was like, oh, this package is Python 2 only,


00:30:03.560 --> 00:30:06.520
and no one ever made a replacement.


00:30:06.520 --> 00:30:08.320
So we need to deal with that.


00:30:08.320 --> 00:30:11.120
Luckily, none of those were in a position


00:30:11.120 --> 00:30:16.120
where we were completely, you know, unable to deal with it.


00:30:16.120 --> 00:30:20.400
Like we didn't run into anything where we were like,


00:30:20.400 --> 00:30:23.200
oh, this is just like, this is like a blocker.


00:30:23.200 --> 00:30:24.920
But there were things where we were like,


00:30:24.920 --> 00:30:27.800
oh, this thing needs to be replaced with something else


00:30:27.800 --> 00:30:32.320
that does something similar, or maybe refactor right away.


00:30:32.320 --> 00:30:34.940
Like very often we run into code where it was like,


00:30:34.940 --> 00:30:36.640
oh, this is using this thing.


00:30:36.640 --> 00:30:38.320
and then you'd start looking into it


00:30:38.320 --> 00:30:40.840
and you're like, oh, actually this code is like,


00:30:40.840 --> 00:30:43.840
this like branch or whatever that uses this package


00:30:43.840 --> 00:30:46.040
isn't actually used anymore.


00:30:46.040 --> 00:30:48.040
So we can just delete all that code


00:30:48.040 --> 00:30:49.940
and like not have to think about it.


00:30:49.940 --> 00:30:51.920
So that's how we dealt with it.


00:30:51.920 --> 00:30:53.440
- Yeah, that's a nice way to upgrade it.


00:30:53.440 --> 00:30:54.520
It's just get rid of it.


00:30:54.520 --> 00:30:55.360
- Yes.


00:30:55.360 --> 00:30:58.800
- Were there any packages that you're out there


00:30:58.800 --> 00:31:00.400
that didn't have Python 3 support?


00:31:00.400 --> 00:31:01.720
And you're like, really?


00:31:01.720 --> 00:31:03.440
We really depend on this one


00:31:03.440 --> 00:31:07.220
that you upgraded and contributed back?


00:31:07.220 --> 00:31:09.740
Or were you able to just move on?


00:31:09.740 --> 00:31:11.580
- There was nothing that we ran into


00:31:11.580 --> 00:31:14.480
that was like an absolute blocker like that.


00:31:14.480 --> 00:31:20.360
So we didn't end up contributing anything


00:31:20.360 --> 00:31:23.580
in terms of open source,


00:31:23.580 --> 00:31:25.600
other than there were some packages


00:31:25.600 --> 00:31:28.220
that are like on our GitHub,


00:31:28.220 --> 00:31:31.060
like the Yelp GitHub that we did do upgrades for.


00:31:31.060 --> 00:31:31.560
>> Sure.


00:31:31.560 --> 00:31:36.840
>> So that was the only sort of open source work


00:31:36.840 --> 00:31:38.880
that we, I think, really ended up doing.


00:31:38.880 --> 00:31:41.500
Yeah, so luckily-- I mean, I don't know if this is lucky


00:31:41.500 --> 00:31:43.600
or not, but it's definitely--


00:31:43.600 --> 00:31:45.960
it happened so that we didn't have to do that.


00:31:45.960 --> 00:31:47.560
>> Yeah, that's good.


00:31:47.560 --> 00:31:50.040
I mean, it would be nice if you ran across that


00:31:50.040 --> 00:31:52.720
and helped solve it for someone, but you


00:31:52.720 --> 00:31:53.840
don't have to, even better.


00:31:53.840 --> 00:32:00.680
Testing-- one of the challenges of--


00:32:00.680 --> 00:32:01.920
First, it's good to have tests.


00:32:01.920 --> 00:32:04.440
But one of the challenges of these upgrades


00:32:04.440 --> 00:32:09.800
is you wanted to do this without disrupting development.


00:32:09.800 --> 00:32:12.120
You wanted to keep adding new features.


00:32:12.120 --> 00:32:15.000
You didn't want to say, hey, everyone,


00:32:15.000 --> 00:32:18.920
stop making any progress or bug fixes for six months.


00:32:18.920 --> 00:32:21.600
And we're all just going to do this until we're done.


00:32:21.600 --> 00:32:23.640
You wanted to keep it moving.


00:32:23.640 --> 00:32:25.920
But in order to do so, you've got


00:32:25.920 --> 00:32:30.240
to run the test because you're making wholesale changes


00:32:30.240 --> 00:32:31.700
to millions of lines of code.


00:32:31.700 --> 00:32:33.160
So that's pretty nerve wracking, right?


00:32:33.160 --> 00:32:37.620
And you're swapping out its dependencies in big ways.


00:32:37.620 --> 00:32:39.800
And yet running tests, you all have a lot of tests


00:32:39.800 --> 00:32:42.280
and they take a while to run, right?


00:32:42.280 --> 00:32:44.920
- Yeah, we have about a hundred thousand tests


00:32:44.920 --> 00:32:47.160
in Yelp main, little under.


00:32:47.160 --> 00:32:52.000
And yeah, if you were to run them serially,


00:32:52.000 --> 00:32:55.760
at least when I wrote my talk, it was about 35 hours total.


00:32:57.240 --> 00:33:01.300
but we have a test runner framework called Jolt


00:33:01.300 --> 00:33:03.360
that we wrote internally.


00:33:03.360 --> 00:33:07.800
And what it does is it basically like


00:33:07.800 --> 00:33:09.580
puts those tests up into bundles


00:33:09.580 --> 00:33:12.120
and then runs those on across a bunch of machines.


00:33:12.120 --> 00:33:14.200
And so you're basically able to get


00:33:14.200 --> 00:33:19.440
all of the tests run for Yelp main in about


00:33:19.440 --> 00:33:21.320
give or take an hour and a half.


00:33:21.320 --> 00:33:22.160
- Okay.


00:33:22.160 --> 00:33:25.280
That's pretty good for running a hundred thousand tests.


00:33:25.280 --> 00:33:27.680
That's still a long time to have a test run though, right?


00:33:27.680 --> 00:33:28.720
So you probably need it.


00:33:28.720 --> 00:33:30.600
You can't just get immediate feedback,


00:33:30.600 --> 00:33:32.880
minor change, how'd that go, minor change, how'd that go?


00:33:32.880 --> 00:33:34.200
You kind of,


00:33:34.200 --> 00:33:36.560
gotta be a little more thoughtful than that, right?


00:33:36.560 --> 00:33:39.260
- Yeah, I mean, I think that in terms of,


00:33:39.260 --> 00:33:42.640
and this sort of gets into like testing theory, right?


00:33:42.640 --> 00:33:45.920
Is that like, you start to get an idea of like,


00:33:45.920 --> 00:33:50.840
what changes are like, affect what other things,


00:33:50.840 --> 00:33:55.200
like sometimes you're not gonna have a perfect idea,


00:33:55.200 --> 00:33:57.840
But if you're like, oh, this is a thing


00:33:57.840 --> 00:33:59.400
that just affects everything,


00:33:59.400 --> 00:34:01.000
then you're gonna run all the tests.


00:34:01.000 --> 00:34:03.200
But we did have the ability to run tests


00:34:03.200 --> 00:34:05.080
if we were like, okay, we wanna just run tests


00:34:05.080 --> 00:34:08.080
under Python 3, we could do like,


00:34:08.080 --> 00:34:12.320
oh, I'm just gonna run this test module under Python 3.


00:34:12.320 --> 00:34:13.400
I can do that.


00:34:13.400 --> 00:34:15.400
And so if you were literally just like,


00:34:15.400 --> 00:34:19.560
oh, I'm checking, I'm fixing this test under Python 3,


00:34:19.560 --> 00:34:20.560
then you could just do that.


00:34:20.560 --> 00:34:22.880
You could just be like, oh, I'm iterating very quickly


00:34:22.880 --> 00:34:25.360
by changing the code and then running the test


00:34:25.360 --> 00:34:28.700
under Python 3 and then, oh, it passes.


00:34:28.700 --> 00:34:31.340
Okay, let me double check it passes under Python 2 as well.


00:34:31.340 --> 00:34:35.580
And then you can commit that and then put that into PR.


00:34:35.580 --> 00:34:38.420
And then we do require, so one of the things is


00:34:38.420 --> 00:34:41.060
we do require doing a full Jolt run


00:34:41.060 --> 00:34:45.020
for every pull request to Yelp main.


00:34:45.020 --> 00:34:48.740
So in order to do, so you have to run that anyway,


00:34:48.740 --> 00:34:51.140
but while you're waiting for that to run,


00:34:51.140 --> 00:34:52.420
you can work on something else.


00:34:52.420 --> 00:34:53.260
- Sure.


00:34:53.260 --> 00:34:54.920
- And you're really high confidence.


00:34:54.920 --> 00:34:56.300
- You'd run a couple, okay, that makes sense.


00:34:56.300 --> 00:34:57.920
So run a couple of local tests,


00:34:57.920 --> 00:35:01.400
10, 100, 500, whatever.


00:35:01.400 --> 00:35:02.520
Once you're happy with that,


00:35:02.520 --> 00:35:07.520
then you put it as a PR and CI figures out what happens.


00:35:07.520 --> 00:35:09.020
- Yeah.


00:35:09.020 --> 00:35:09.860
- Okay.


00:35:09.860 --> 00:35:11.780
- And I think that ultimately,


00:35:11.780 --> 00:35:13.260
when we were really early on,


00:35:13.260 --> 00:35:15.940
we were working on the really foundational stuff,


00:35:15.940 --> 00:35:18.540
'cause that was causing the most issues.


00:35:18.540 --> 00:35:20.060
That was the time when we were like,


00:35:20.060 --> 00:35:21.660
oh, we really gotta run all the tests.


00:35:21.660 --> 00:35:25.420
But once you get down to the nitty gritty, pretty early on,


00:35:25.420 --> 00:35:29.540
actually, you really don't need to think about how


00:35:29.540 --> 00:35:30.580
it affects other things.


00:35:30.580 --> 00:35:34.460
It's mostly just sort of like, yeah, this module


00:35:34.460 --> 00:35:37.020
affects its own tests, and that's pretty much it.


00:35:37.020 --> 00:35:37.900
OK.


00:35:37.900 --> 00:35:40.460
Yeah, I'm sure you get a feel for it over time.


00:35:40.460 --> 00:35:42.600
These are the kinds of far-reaching changes,


00:35:42.600 --> 00:35:45.180
and these are the kinds of things I can stay really


00:35:45.180 --> 00:35:46.700
focused on.


00:35:46.700 --> 00:35:48.420
Yeah.


00:35:48.420 --> 00:35:51.060
The other requirement you said that you had was that any


00:35:51.060 --> 00:35:54.620
changes must be rollback safe.


00:35:54.620 --> 00:35:55.700
Can you speak to that?


00:35:55.700 --> 00:35:59.980
I'm thinking like database migrations or that, right?


00:35:59.980 --> 00:36:01.660
What are you thinking here?


00:36:01.660 --> 00:36:03.460
- Yeah, I mean, it's sort of,


00:36:03.460 --> 00:36:06.380
I think database migrations are a good example


00:36:06.380 --> 00:36:07.220
of that type of thing.


00:36:07.220 --> 00:36:09.820
We didn't really run into a situation


00:36:09.820 --> 00:36:14.660
where we actually had to do any schema changes to databases,


00:36:14.660 --> 00:36:17.500
although there was a thing where we had to do,


00:36:17.500 --> 00:36:22.660
We had to make some changes to some data


00:36:22.660 --> 00:36:24.180
such that it would be parsed properly


00:36:24.180 --> 00:36:26.940
under both Python 2 and 3.


00:36:26.940 --> 00:36:30.460
But yeah, what you always want to do


00:36:30.460 --> 00:36:38.220
is you want to say, OK, if I undo this later, maybe


00:36:38.220 --> 00:36:39.780
like a week later, someone realizes,


00:36:39.780 --> 00:36:41.980
oh, this change made a problem, has a problem.


00:36:41.980 --> 00:36:44.540
We don't want to be in this business where we say, oh, we


00:36:44.540 --> 00:36:45.380
can't undo that.


00:36:45.380 --> 00:36:47.100
Something else.


00:36:47.100 --> 00:36:49.780
depends on it and we can't undo it.


00:36:49.780 --> 00:36:53.860
And so that was like a main thing.


00:36:53.860 --> 00:36:56.220
It was just sort of like, don't do these things


00:36:56.220 --> 00:36:57.060
where you're just sort of like,


00:36:57.060 --> 00:36:59.060
oh, once we do this, we can't go back.


00:36:59.060 --> 00:37:00.460
It's like, no, don't do that.


00:37:00.460 --> 00:37:04.320
If you need to like do some extra work


00:37:04.320 --> 00:37:07.340
where you like build up scaffolding or whatever,


00:37:07.340 --> 00:37:10.260
then like do that work instead.


00:37:10.260 --> 00:37:13.580
And it might take a little bit longer in the long run,


00:37:13.580 --> 00:37:15.580
but it makes us have less risk.


00:37:16.720 --> 00:37:20.560
Yeah, I'll save diving into this for later in our conversation.


00:37:20.560 --> 00:37:23.160
But one of the things that you were able to do because of that


00:37:23.160 --> 00:37:27.720
is you were able to run the app simultaneously in 2 and 3


00:37:27.720 --> 00:37:33.760
and use a URL reverse proxy like Nginx or something to say,


00:37:33.760 --> 00:37:36.280
this part of the web app runs Python 3.


00:37:36.280 --> 00:37:38.200
And this one over here is running Python 2.


00:37:38.200 --> 00:37:40.740
And filter the traffic and switch it


00:37:40.740 --> 00:37:43.120
based on how it's performing or behaving.


00:37:43.120 --> 00:37:45.440
If it goes wrong, you can switch it back quick.


00:37:45.440 --> 00:37:47.040
if you didn't have that compatibility,


00:37:47.040 --> 00:37:50.280
it would be like, all right, today we pulled a switch,


00:37:50.280 --> 00:37:53.320
chunk, and then like, you deal with the consequences


00:37:53.320 --> 00:37:55.520
for how long Yelp is down, right?


00:37:55.520 --> 00:37:59.500
So that's an interesting consequence of this idea


00:37:59.500 --> 00:38:02.960
that it should be able to be rollbackable


00:38:02.960 --> 00:38:04.900
as you can actually run both versions


00:38:04.900 --> 00:38:07.840
and then sort of migrate more cautiously.


00:38:07.840 --> 00:38:08.660
- Yeah.


00:38:08.660 --> 00:38:12.280
- You had a cool picture,


00:38:12.280 --> 00:38:16.040
And let me put it on the screen for us here.


00:38:16.040 --> 00:38:22.380
Where you talked about the four different steps,


00:38:22.380 --> 00:38:24.820
the phases and timelines


00:38:24.820 --> 00:38:27.720
and how much time you spent in there.


00:38:27.720 --> 00:38:29.720
You wanna talk us through this?


00:38:29.720 --> 00:38:30.680
- Yeah, sure.


00:38:30.680 --> 00:38:33.320
So this is just sort of like,


00:38:33.320 --> 00:38:34.840
if you wanna think about,


00:38:34.840 --> 00:38:38.560
okay, you've got some Python two code


00:38:38.560 --> 00:38:40.680
and you want it to get it to Python three.


00:38:42.120 --> 00:38:44.440
it's very easy to think about it in a sort of atomic way


00:38:44.440 --> 00:38:45.280
is you just sort of like,


00:38:45.280 --> 00:38:47.400
"Oh, make it Python 3 compatible."


00:38:47.400 --> 00:38:50.800
And it's like, okay, makes sense on small stuff.


00:38:50.800 --> 00:38:52.960
You know, if you're like, "Oh, I got my 500 line script


00:38:52.960 --> 00:38:54.560
and I'm gonna migrate to Python 3 today."


00:38:54.560 --> 00:38:58.200
You know, but on big stuff,


00:38:58.200 --> 00:39:00.760
when you're talking about millions of lines of code,


00:39:00.760 --> 00:39:03.240
you wanna think about it in terms of,


00:39:03.240 --> 00:39:06.080
in sort of level of compatibility.


00:39:06.080 --> 00:39:09.600
And so the three levels that we had to deal with here


00:39:09.600 --> 00:39:11.920
were parsability, which basically just means


00:39:11.920 --> 00:39:19.520
Like if you try and run this module with Python 3,


00:39:19.520 --> 00:39:23.040
will it fail with a syntax error or not?


00:39:23.040 --> 00:39:26.280
And so that's the main thing.


00:39:26.280 --> 00:39:31.080
And parsability, it turns out, is pretty easy to fix,


00:39:31.080 --> 00:39:34.240
because there were not a huge number of syntax changes.


00:39:34.240 --> 00:39:36.360
And they're pretty easy to detect and fix


00:39:36.360 --> 00:39:37.720
in an automated way.


00:39:37.720 --> 00:39:41.120
Yeah, did you use some tooling like PyUpgrade or any


00:39:41.120 --> 00:39:42.840
those types of things.


00:39:42.840 --> 00:39:44.560
- PyUpgrade we used a little bit.


00:39:44.560 --> 00:39:47.960
It's not super designed for this,


00:39:47.960 --> 00:39:49.880
but there was a one specific thing


00:39:49.880 --> 00:39:53.840
that was really nice about it,


00:39:53.840 --> 00:39:56.520
which is that it could convert,


00:39:56.520 --> 00:39:59.440
it could detect octal literals.


00:39:59.440 --> 00:40:02.880
So if you put like zero and then a number


00:40:02.880 --> 00:40:05.080
that's an octal literal in Python two,


00:40:05.080 --> 00:40:06.280
that's not allowed in Python three,


00:40:06.280 --> 00:40:09.720
so you have to do zero, O, number.


00:40:09.720 --> 00:40:16.040
And it was able to detect those really easily and like fix them, which was really nice.


00:40:16.040 --> 00:40:20.840
Those things, it sounds like, oh, well, that's not that much work or that much help.


00:40:20.840 --> 00:40:27.560
But when you're doing it across millions of lines of code, anything you can automate, it's got to be really welcome, right?


00:40:27.560 --> 00:40:36.520
There was a relatively common pattern. The reason that I remember that one is there was a relatively common pattern where like people would create like date time objects.


00:40:36.520 --> 00:40:39.740
And then they would write year, month, day.


00:40:39.740 --> 00:40:43.320
And if the month or year was single digit,


00:40:43.320 --> 00:40:46.740
they would prefix it with a zero, which works in Python too.


00:40:46.740 --> 00:40:50.040
They probably didn't mean to make it octal,


00:40:50.040 --> 00:40:51.560
but that's what they did.


00:40:51.560 --> 00:40:52.440
- Yeah.


00:40:52.440 --> 00:40:54.700
- And so it kind of worked.


00:40:54.700 --> 00:41:02.240
And so people, and so that existed in a lot of places


00:41:02.240 --> 00:41:05.120
and it was like a popular pattern, but yeah.


00:41:05.120 --> 00:41:07.320
So PyUpgrade was useful in that way.


00:41:07.320 --> 00:41:10.640
It was useful later on when we were like,


00:41:10.640 --> 00:41:13.040
like blowing away all the sick stuff


00:41:13.040 --> 00:41:15.960
'cause it's able to fix all those things automatically,


00:41:15.960 --> 00:41:17.520
which is nice, or most of them.


00:41:17.520 --> 00:41:21.320
But Python Modernize was where a lot of,


00:41:21.320 --> 00:41:22.760
most of our automation went


00:41:22.760 --> 00:41:24.960
because it could fix a lot of this stuff.


00:41:24.960 --> 00:41:28.360
Yeah, so that was parsability.


00:41:28.360 --> 00:41:31.480
Importability is similar, is that you try to import it


00:41:32.520 --> 00:41:37.520
And then you say, okay, this is failing with an import error


00:41:37.520 --> 00:41:45.640
or something is making it fail to import,


00:41:45.640 --> 00:41:48.420
like usually running some code at the top level.


00:41:48.420 --> 00:41:53.460
And that was a little bit longer.


00:41:53.460 --> 00:41:59.400
A lot of that was fixing standard lib imports,


00:42:00.160 --> 00:42:02.740
You make most of those use 6Gems.


00:42:02.740 --> 00:42:06.540
If they change, there's a 6Gem for that.


00:42:06.540 --> 00:42:10.580
And then some of it was also upgrading the packages


00:42:10.580 --> 00:42:15.780
so they could be used under Python 3 and imported.


00:42:15.780 --> 00:42:18.940
And then there was a little bit of top level stuff


00:42:18.940 --> 00:42:20.940
where it was like, oh, this top level thing


00:42:20.940 --> 00:42:24.860
is calling dict.iteritems or something,


00:42:24.860 --> 00:42:27.100
and you got to fix that.


00:42:27.100 --> 00:42:30.980
- Yeah, so that probably gets maybe a little into


00:42:30.980 --> 00:42:35.780
the functional parity, which if people look at your talk,


00:42:35.780 --> 00:42:39.260
they'll see there's a couple weeks of the parsability,


00:42:39.260 --> 00:42:42.500
maybe a month or two of the importability,


00:42:42.500 --> 00:42:45.020
then a whole bunch of the functional parity.


00:42:45.020 --> 00:42:48.140
And it reminds me of when I was learning C++ way, way,


00:42:48.140 --> 00:42:51.140
way back, and I got really excited


00:42:51.140 --> 00:42:54.700
'cause I finally got some complicated code to compile,


00:42:54.700 --> 00:42:57.580
not really knowing like, oh no, no, no, no, no.


00:42:57.580 --> 00:42:58.580
You're only at the beginning


00:42:58.580 --> 00:42:59.820
of figuring out what's wrong with this.


00:42:59.820 --> 00:43:02.040
The compile is the part where it shows you what's wrong.


00:43:02.040 --> 00:43:04.500
Now it's like the mystery tour.


00:43:04.500 --> 00:43:07.220
And like, this is after that, right?


00:43:07.220 --> 00:43:09.180
This is like kind of once you get past parsing


00:43:09.180 --> 00:43:12.280
and importing, then you're into the,


00:43:12.280 --> 00:43:14.420
how are they different behaviorally?


00:43:14.420 --> 00:43:15.420
- Yes. - Yeah?


00:43:15.420 --> 00:43:16.260
- Yeah. - Okay.


00:43:16.260 --> 00:43:21.060
- Yeah, and this is, it's just sort of like,


00:43:21.060 --> 00:43:22.380
I alluded to this earlier,


00:43:22.380 --> 00:43:27.380
but basically the idea of you run all of your tests.


00:43:27.380 --> 00:43:30.360
And luckily we had already built up a lot of infrastructure


00:43:30.360 --> 00:43:31.740
that was really useful to us.


00:43:31.740 --> 00:43:34.980
So one of the things that Jolt was able to do


00:43:34.980 --> 00:43:39.980
is it was able to do some normalization of tracebacks


00:43:39.980 --> 00:43:44.080
and then be like, oh, these tracebacks are similar enough


00:43:44.080 --> 00:43:47.020
that I'm gonna group them together as a single error


00:43:47.020 --> 00:43:49.700
and say like, oh, this many tests are failing


00:43:49.700 --> 00:43:52.020
with this sort of traceback.


00:43:52.020 --> 00:43:57.820
And so that was really useful because it was we were able to just sort of be like, okay


00:43:57.820 --> 00:44:01.460
Here's where the error is and it's gonna fish fix this many tests


00:44:01.460 --> 00:44:04.820
Or at least unblock this many tests. Yeah, and


00:44:04.820 --> 00:44:08.500
So


00:44:08.500 --> 00:44:14.100
That was about a year of basically going through all of those test failures and


00:44:14.100 --> 00:44:18.620
figuring out okay, why do they file fail under Python 3 and


00:44:19.940 --> 00:44:21.260
just fixing them.


00:44:21.260 --> 00:44:22.540
So a lot of it was like,


00:44:22.540 --> 00:44:25.220
oh, this thing's supposed to be a string,


00:44:25.220 --> 00:44:29.340
but it's bytes or vice versa, or, you know.


00:44:29.340 --> 00:44:31.060
- The calling dot items, but it's,


00:44:31.060 --> 00:44:34.300
that used to be a list and it's not a list anymore.


00:44:34.300 --> 00:44:35.980
Yeah, so you can't index it.


00:44:35.980 --> 00:44:37.380
- Yeah, so there's all sorts of,


00:44:37.380 --> 00:44:39.540
there's all sorts of nitty gritty things


00:44:39.540 --> 00:44:43.860
that you just have to go through and fix them.


00:44:43.860 --> 00:44:46.140
Some of them are automatable, but like,


00:44:46.140 --> 00:44:47.660
you really need to,


00:44:49.020 --> 00:44:52.220
but not everything is and some of them are more subtle.


00:44:52.220 --> 00:44:53.480
Yeah.


00:44:53.480 --> 00:44:57.160
- What was your target Python 3 version?


00:44:57.160 --> 00:45:00.220
- We ended up, so we originally targeted 3.6.


00:45:00.220 --> 00:45:07.380
At the time it was like the newest version


00:45:07.380 --> 00:45:08.460
when we started the project,


00:45:08.460 --> 00:45:10.580
it was like the newest version that we had available


00:45:10.580 --> 00:45:15.580
that we were like, we're sort of ready for, if you will.


00:45:18.420 --> 00:45:20.540
During the project, it was obviously a long project,


00:45:20.540 --> 00:45:22.500
we were able to get 3.7 available.


00:45:22.500 --> 00:45:25.500
And it was actually really great because we were like,


00:45:25.500 --> 00:45:29.300
I don't know, less than a month out from when we were like,


00:45:29.300 --> 00:45:31.500
oh, we're gonna start doing the rollout.


00:45:31.500 --> 00:45:36.380
And my coworker, Chris, who wrote dump API,


00:45:36.380 --> 00:45:38.520
was working on this project at the time.


00:45:38.520 --> 00:45:39.780
And he was like, you know what?


00:45:39.780 --> 00:45:41.860
I bet we could migrate this to Python 3.7.


00:45:41.860 --> 00:45:43.380
And I'm like, go for it.


00:45:43.380 --> 00:45:45.020
Let's see how hard it is.


00:45:45.020 --> 00:45:46.540
And he did it in like a day.


00:45:46.540 --> 00:45:47.980
So it was just like, it was just like,


00:45:47.980 --> 00:45:49.420
Oh, he just upgraded it.


00:45:49.420 --> 00:45:51.900
I think there were maybe a few--


00:45:51.900 --> 00:45:55.180
3.7 does have that one backwards incompatibility


00:45:55.180 --> 00:45:56.540
where it makes async a keyword.


00:45:56.540 --> 00:45:59.580
So there were a few packages where you needed to upgrade.


00:45:59.580 --> 00:46:01.420
But he was able to do it really quickly.


00:46:01.420 --> 00:46:03.140
And we were just like, OK, and now we're


00:46:03.140 --> 00:46:06.780
going to roll out to 3.7.


00:46:06.780 --> 00:46:09.700
So that was nice that it was sort of like we


00:46:09.700 --> 00:46:12.140
were working on 3.6 for most of it.


00:46:12.140 --> 00:46:14.860
We switched to 3.7 near the end, and it just sort of worked.


00:46:14.860 --> 00:46:17.540
And it sets the foundation for going to the next version


00:46:17.540 --> 00:46:18.700
after that, right?


00:46:18.700 --> 00:46:22.880
- Yeah, and which is, it's actually really weird.


00:46:22.880 --> 00:46:24.380
Chris is working on that again.


00:46:24.380 --> 00:46:29.900
He's gonna be trying to upgrade us to 3.8,


00:46:29.900 --> 00:46:33.220
like this week, basically.


00:46:33.220 --> 00:46:34.060
- Okay, cool.


00:46:34.060 --> 00:46:36.520
That's really excellent.


00:46:36.520 --> 00:46:41.340
What was the emotional state of you and the team


00:46:41.340 --> 00:46:44.280
as you were going through that year of fixing?


00:46:44.280 --> 00:46:48.140
Nope, it's list of dic.items, not list.items


00:46:48.140 --> 00:46:49.440
or dictionary.items.


00:46:49.440 --> 00:46:52.560
And like probably excited in the beginning,


00:46:52.560 --> 00:46:55.260
but you know, six months, then what was that like?


00:46:55.260 --> 00:46:58.660
Or making progress or like,


00:46:58.660 --> 00:47:00.820
oh God, it's still here, we're not done.


00:47:00.820 --> 00:47:04.400
- I mean, I saw, I knew what it was gonna be like


00:47:04.400 --> 00:47:05.240
going into it.


00:47:05.240 --> 00:47:07.660
Like I was like, I mean, not exactly,


00:47:07.660 --> 00:47:08.760
but like I was like,


00:47:08.760 --> 00:47:10.900
I know that it's gonna be this thing where it's like,


00:47:10.900 --> 00:47:11.900
we're gonna make some progress


00:47:11.900 --> 00:47:13.340
and then we're gonna, it's gonna taper off


00:47:13.340 --> 00:47:15.440
because of the way that these things work.


00:47:15.440 --> 00:47:20.140
But it was definitely like,


00:47:20.140 --> 00:47:21.860
it was sort of like you were just sort of


00:47:21.860 --> 00:47:23.860
doing your tasks every day


00:47:23.860 --> 00:47:27.120
and each task in and of itself was not valuable, right?


00:47:27.120 --> 00:47:27.960
It was sort of like,


00:47:27.960 --> 00:47:29.380
"Oh, well, I fixed three tests today,"


00:47:29.380 --> 00:47:31.260
you know, kind of thing.


00:47:31.260 --> 00:47:35.180
But ultimately,


00:47:35.180 --> 00:47:41.280
I was able to see like where the end was.


00:47:41.280 --> 00:47:42.520
So for me, I was like,


00:47:42.520 --> 00:47:43.800
I was like, yeah, we're going to do this.


00:47:43.800 --> 00:47:44.680
We're going to do it.


00:47:44.680 --> 00:47:47.480
I think not everyone on my team was necessarily


00:47:47.480 --> 00:47:52.480
like as sort of eye on the prize as I was, which is fine.


00:47:52.480 --> 00:47:56.360
I think we ended up swapping out,


00:47:56.360 --> 00:47:58.000
basically everyone on the team ended up working on it


00:47:58.000 --> 00:48:00.000
at one point or another, but it was only me


00:48:00.000 --> 00:48:02.440
and another one of my colleagues


00:48:02.440 --> 00:48:06.460
who worked on it basically the whole time.


00:48:06.460 --> 00:48:11.320
So I think, you know, part of it was that some people


00:48:11.320 --> 00:48:13.520
we're like, okay, I'll work on that a little bit,


00:48:13.520 --> 00:48:14.920
but I don't want to only work on that.


00:48:14.920 --> 00:48:16.200
And that's totally understandable.


00:48:16.200 --> 00:48:19.380
Like, I think that this type of work is kind of tedious.


00:48:19.380 --> 00:48:21.520
And this is sort of like,


00:48:21.520 --> 00:48:23.680
this is another argument against monoliths


00:48:23.680 --> 00:48:26.180
is sort of saying like, if you have to do this


00:48:26.180 --> 00:48:28.360
when you need to do these type of migrations,


00:48:28.360 --> 00:48:31.880
it becomes really punishing on software engineers.


00:48:31.880 --> 00:48:32.920
- Yeah.


00:48:32.920 --> 00:48:33.760
- So.


00:48:33.760 --> 00:48:37.240
- Like if you haven't done linting ever,


00:48:37.240 --> 00:48:39.640
five years into it, you like,


00:48:39.640 --> 00:48:40.840
oh, let's get see what's wrong with you.


00:48:40.840 --> 00:48:42.480
We're at the lunch, you're like 100,000.


00:48:42.480 --> 00:48:43.520
And it's like, you know what, we're not doing that.


00:48:43.520 --> 00:48:46.800
We're just gonna ignore those, let's just stay.


00:48:46.800 --> 00:48:50.360
'Cause you can't just stop and go do 100,000 fixes.


00:48:50.360 --> 00:48:52.120
There's more value on the other side of this.


00:48:52.120 --> 00:48:54.840
So it makes a lot of sense.


00:48:54.840 --> 00:49:01.760
It must have felt pretty good to get it all done though.


00:49:01.760 --> 00:49:03.040
- Yeah, it really did.


00:49:03.040 --> 00:49:07.800
I mean, it's sort of weird how these projects work


00:49:07.800 --> 00:49:10.280
is that you're sort of like, you're doing the work,


00:49:10.280 --> 00:49:12.080
you're doing the work and then like one day


00:49:12.080 --> 00:49:14.100
you're just sort of like, and we're done.


00:49:14.100 --> 00:49:16.700
And it's been a year and a half of my life, you know,


00:49:16.700 --> 00:49:19.240
but it's exciting.


00:49:19.240 --> 00:49:22.120
It was like, I had multiple people tell me,


00:49:22.120 --> 00:49:26.840
they said to me, hey, it's so cool that you,


00:49:26.840 --> 00:49:28.860
that, you know, we were able to do that


00:49:28.860 --> 00:49:32.160
because I never thought it would happen.


00:49:32.160 --> 00:49:36.080
And so like, it's kind of amazing to do something


00:49:36.080 --> 00:49:38.940
that some people are like, this won't ever happen.


00:49:38.940 --> 00:49:41.220
But it happened, and we made it happen.


00:49:41.220 --> 00:49:44.460
And I think that was really great.


00:49:44.460 --> 00:49:49.540
Let's talk a little bit about how


00:49:49.540 --> 00:49:53.820
you were able to run this on Python 2 and 3.


00:49:53.820 --> 00:49:55.620
So what did you do?


00:49:55.620 --> 00:49:57.820
You basically create two virtual environments, one


00:49:57.820 --> 00:50:03.820
from each setup, or each version,


00:50:03.820 --> 00:50:08.900
and then run tests there, try it out there.


00:50:08.900 --> 00:50:10.300
Yep, that's basically it.


00:50:10.300 --> 00:50:14.440
I mean, there is a technique to having like code


00:50:14.440 --> 00:50:16.400
that runs under Python two and three,


00:50:16.400 --> 00:50:21.200
which is that, you know, you basically have to make sure


00:50:21.200 --> 00:50:23.320
that you're using compatibility layers.


00:50:23.320 --> 00:50:24.960
And we use six for that.


00:50:24.960 --> 00:50:29.340
That was something that me and most of the people on my team


00:50:29.340 --> 00:50:33.180
had some pretty significant experience doing


00:50:33.180 --> 00:50:35.480
because that's basically how we wrote all of our like


00:50:35.480 --> 00:50:37.600
libraries or internal libraries.


00:50:38.600 --> 00:50:42.040
and actually a lot of our open source ones as well,


00:50:42.040 --> 00:50:44.360
because you know, you want for a long time there,


00:50:44.360 --> 00:50:46.000
you were like, okay, I want to have Python 2


00:50:46.000 --> 00:50:47.360
and 3 compatibility.


00:50:47.360 --> 00:50:50.560
So having code that works under both was like pretty normal.


00:50:50.560 --> 00:50:57.680
So we, so making sure that that code


00:50:57.680 --> 00:51:00.200
is sort of can run under Python 2 and 3,


00:51:00.200 --> 00:51:02.200
and then building the virtualenv,


00:51:02.200 --> 00:51:03.960
there was a little bit of nuance,


00:51:03.960 --> 00:51:05.720
or like there was a snag there,


00:51:05.720 --> 00:51:10.400
which is that like something that comes up


00:51:10.400 --> 00:51:14.280
every once in a while when you're doing this kind of stuff.


00:51:14.280 --> 00:51:17.520
And this is still a thing that happens to this day


00:51:17.520 --> 00:51:20.080
is you have to deal with backport packages.


00:51:20.080 --> 00:51:23.400
So there's like the futures backport,


00:51:23.400 --> 00:51:25.360
which was the concurrent,


00:51:25.360 --> 00:51:28.840
which like concurrent futures was added in,


00:51:28.840 --> 00:51:29.760
might've been 3.0,


00:51:29.760 --> 00:51:32.720
I don't remember exactly what version of Python it was added


00:51:32.720 --> 00:51:36.300
And there was like a few other back ports.


00:51:36.300 --> 00:51:42.960
Functools32 was back port for adding some of the stuff


00:51:42.960 --> 00:51:47.640
in Python 3.2's functools, like lru-cache,


00:51:47.640 --> 00:51:49.820
which is something we used a lot of.


00:51:49.820 --> 00:51:54.240
So those were both packages where we wanted to,


00:51:54.240 --> 00:51:56.500
we needed to actually install them in Python 2


00:51:56.500 --> 00:52:00.280
because like there are packages somewhere in our,


00:52:00.280 --> 00:52:03.800
in the dep tree that needs them.


00:52:03.800 --> 00:52:07.160
So what we ended up doing is we made this like


00:52:07.160 --> 00:52:09.260
silly little script that it just sort of like


00:52:09.260 --> 00:52:13.000
took our requirements file and then filtered out the things


00:52:13.000 --> 00:52:15.760
that don't install under Python 3


00:52:15.760 --> 00:52:17.320
and just spit out a new one.


00:52:17.320 --> 00:52:22.320
And that's the one we built our Python 3 virtual imp with.


00:52:22.320 --> 00:52:25.640
And so then we have Python 2 and Python 3 virtual imp


00:52:25.640 --> 00:52:27.520
and they're like really similar,


00:52:27.520 --> 00:52:29.860
not exactly the same, but close enough.


00:52:29.860 --> 00:52:33.540
and then we can run the test against either one of them.


00:52:33.540 --> 00:52:34.380
- Nice.


00:52:34.380 --> 00:52:37.860
- And then eventually we would do the rollout like that.


00:52:37.860 --> 00:52:39.380
- It does sound like one of the challenges


00:52:39.380 --> 00:52:42.380
had to do with caching and you have a way


00:52:42.380 --> 00:52:47.220
in which you were using pickle


00:52:47.220 --> 00:52:49.620
to stuff some results into memcached.


00:52:49.620 --> 00:52:54.060
Is it memcached D or memcached like past tense?


00:52:54.060 --> 00:52:57.060
I never know how to pronounce that one right.


00:52:57.060 --> 00:53:00.420
I looked at their website like a year ago,


00:53:00.420 --> 00:53:02.160
or like, I guess two years ago or something


00:53:02.160 --> 00:53:04.120
when I was actually working on this.


00:53:04.120 --> 00:53:07.920
And I'm sure that I know, I'm sure that I read it


00:53:07.920 --> 00:53:09.480
'cause it said it there, I remember,


00:53:09.480 --> 00:53:10.840
but I don't remember what the answer is.


00:53:10.840 --> 00:53:11.760
- Yeah, no worries.


00:53:11.760 --> 00:53:13.800
So let's go with memcached, I'll call it memcached.


00:53:13.800 --> 00:53:18.800
So you were stuck, previously you were pickling things.


00:53:18.800 --> 00:53:21.880
You were CPickling, but then that just became pickling.


00:53:21.880 --> 00:53:25.160
But at some point, it's one thing to say


00:53:25.160 --> 00:53:27.720
at the database query level will T serialize


00:53:27.720 --> 00:53:30.840
and serialize an ORM object to match the schema?


00:53:30.840 --> 00:53:34.100
It's a whole nother to say the binary shape of this thing


00:53:34.100 --> 00:53:35.800
is the same across Python versions,


00:53:35.800 --> 00:53:37.360
which is highly unlikely, right?


00:53:37.360 --> 00:53:38.200
Which is pickle.


00:53:38.200 --> 00:53:40.660
- It's basically impossible.


00:53:40.660 --> 00:53:42.400
That was like the, yeah,


00:53:42.400 --> 00:53:43.840
that was one of the big problems that we had.


00:53:43.840 --> 00:53:45.000
So we were basically taking up,


00:53:45.000 --> 00:53:47.300
we were basically like, so we would pickle,


00:53:47.300 --> 00:53:48.200
there's like a cache key


00:53:48.200 --> 00:53:49.720
and then there's a cache value, right?


00:53:49.720 --> 00:53:51.840
We would pickle both and then the cache key,


00:53:51.840 --> 00:53:55.560
we would like hash so that it could be like,


00:53:55.560 --> 00:53:59.760
you know, a specific binary sequence.


00:53:59.760 --> 00:54:03.680
And then that would, and then we'd key into that


00:54:03.680 --> 00:54:07.680
in order to get stuff out of the cache.


00:54:07.680 --> 00:54:16.120
But it turns out that for a multitude of reasons,


00:54:16.120 --> 00:54:17.720
both the key, like you said,


00:54:17.720 --> 00:54:19.440
the key is not gonna be binary the same.


00:54:19.440 --> 00:54:21.480
So like, that's one of the problems.


00:54:21.480 --> 00:54:34.680
And the other problem is that there's a lot of like weirdnesses when you end up like either reading Python two pickles in Python three or reading Python three pickles in Python two.


00:54:34.680 --> 00:54:37.120
So,


00:54:37.120 --> 00:54:40.480
it seems like pickles are kind of meant to be transient.


00:54:40.480 --> 00:54:46.720
They're not meant to be long term storage because there's not a lot of guarantees around their possibility.


00:54:46.720 --> 00:54:48.120
Yeah, yeah.


00:54:48.240 --> 00:54:51.440
And so we were like, OK, well, what's


00:54:51.440 --> 00:54:53.920
the thing that we can do where we don't have to start being


00:54:53.920 --> 00:54:57.560
like, OK, now we have to write complicated serialization


00:54:57.560 --> 00:54:58.480
and stuff?


00:54:58.480 --> 00:55:01.320
And we were like, well, probably JSON.


00:55:01.320 --> 00:55:03.080
JSON will work, right?


00:55:03.080 --> 00:55:05.680
And so this is something I worked on for about three


00:55:05.680 --> 00:55:08.920
months or something, was just migrating all of our caches


00:55:08.920 --> 00:55:14.520
to use JSON instead of Pickles.


00:55:14.520 --> 00:55:18.680
Yeah, you had this kind of fallback mechanism


00:55:18.680 --> 00:55:21.720
or this slow upgrade mechanism that said,


00:55:21.720 --> 00:55:24.520
try to get the JSON version from Memcache.


00:55:24.520 --> 00:55:26.800
And if you got it, awesome, go with that.


00:55:26.800 --> 00:55:30.560
But then fall back and try to get the binary pickle,


00:55:30.560 --> 00:55:33.760
but then immediately replace it with the JSON version


00:55:33.760 --> 00:55:36.920
so that it just grows over time.


00:55:36.920 --> 00:55:39.520
I mean, thinking about that much code and that many services,


00:55:39.520 --> 00:55:43.000
there must just be a ton of startup cost


00:55:43.000 --> 00:55:47.040
if you just kick all the servers over and clean the cache?


00:55:47.040 --> 00:55:48.680
- Yeah, I don't know.


00:55:48.680 --> 00:55:49.800
We've never tried it.


00:55:49.800 --> 00:55:51.960
I think everyone's a little bit too scared,


00:55:51.960 --> 00:55:55.120
but it's definitely not something we wanted to do.


00:55:55.120 --> 00:55:57.280
And we wanted to be able to be like,


00:55:57.280 --> 00:55:59.120
okay, when we cut over to Python 3,


00:55:59.120 --> 00:56:01.680
we're not just gonna lose all of our caches, right?


00:56:01.680 --> 00:56:05.960
Yeah, I think this is actually a really great example


00:56:05.960 --> 00:56:07.280
of something we were discussing


00:56:07.280 --> 00:56:08.600
before the recording started


00:56:08.600 --> 00:56:14.200
of doing a sort of incremental upgrade.


00:56:14.200 --> 00:56:18.820
And one of the other things I didn't super


00:56:18.820 --> 00:56:25.760
get into in my talk is that one of the things that I thought


00:56:25.760 --> 00:56:27.700
was a really cool technique--


00:56:27.700 --> 00:56:29.640
and this really depends on whether or not


00:56:29.640 --> 00:56:30.360
this is worth it.


00:56:30.360 --> 00:56:33.480
It depends on how you end up--


00:56:33.480 --> 00:56:37.880
what the value of your uptime is, basically,


00:56:37.880 --> 00:56:39.280
compared to your dev time.


00:56:39.280 --> 00:56:43.840
But what I did is I sort of logged,


00:56:43.840 --> 00:56:45.680
what I would do is I would like,


00:56:45.680 --> 00:56:46.920
for every cache, I would be like,


00:56:46.920 --> 00:56:48.840
okay, I'm gonna try to log this to JSON.


00:56:48.840 --> 00:56:51.360
And then if it failed, I wouldn't just fail,


00:56:51.360 --> 00:56:52.640
I'd like do the normal stuff.


00:56:52.640 --> 00:56:54.960
I'd do all the pickle stuff, whatever.


00:56:54.960 --> 00:56:56.480
But then I'd log it somewhere.


00:56:56.480 --> 00:56:58.560
And so that way I could just like look at this log


00:56:58.560 --> 00:57:00.960
and be like, oh, here's where my errors are.


00:57:00.960 --> 00:57:05.520
So it wasn't just like, oh, I would like ship changes


00:57:05.520 --> 00:57:08.720
and then see if there were actual errors on production.


00:57:08.720 --> 00:57:10.680
And it's like, there's no errors on production.


00:57:10.680 --> 00:57:15.760
There's just errors in this log that I can fix and iterate on.


00:57:15.760 --> 00:57:20.620
And no user ever sees a 500.


00:57:20.620 --> 00:57:22.360
Not everything's going to fit into that,


00:57:22.360 --> 00:57:26.280
but I think that's a really useful technique.


00:57:26.280 --> 00:57:27.440
Yeah, that is really cool.


00:57:27.440 --> 00:57:29.360
Because no matter how much testing


00:57:29.360 --> 00:57:31.800
you do on something this big, it's


00:57:31.800 --> 00:57:33.840
not until you really put it out there


00:57:33.840 --> 00:57:36.080
you see that 100% sure it's gonna hang together.


00:57:36.080 --> 00:57:40.440
But if it can fail silently in a way that people don't see,


00:57:40.440 --> 00:57:43.360
but you get notified about this,


00:57:43.360 --> 00:57:44.200
you can start working on it.


00:57:44.200 --> 00:57:46.240
That's really valuable.


00:57:46.240 --> 00:57:50.040
Another thing that you did that I thought was pretty clever


00:57:50.040 --> 00:57:52.480
was the way that you did the rollouts,


00:57:52.480 --> 00:57:57.400
where you were able to say,


00:57:57.400 --> 00:58:01.180
even though this is one huge monolith of code,


00:58:01.180 --> 00:58:03.720
it doesn't mean it breaks evenly, right?


00:58:03.720 --> 00:58:07.000
once you get it past the parsability stage,


00:58:07.000 --> 00:58:10.280
there could be some URL endpoint that's gonna fail


00:58:10.280 --> 00:58:13.360
if you request it, and another that works totally fine.


00:58:13.360 --> 00:58:16.000
All right, so what you all did is you created


00:58:16.000 --> 00:58:21.480
a reverse proxy, and I was imagining Nginx.


00:58:21.480 --> 00:58:23.280
What were you actually using there?


00:58:23.280 --> 00:58:25.980
- So it's kind of Nginx.


00:58:25.980 --> 00:58:29.540
It's OpenResty, which is a framework


00:58:29.540 --> 00:58:34.540
where you can write plugins for Nginx in Lua.


00:58:34.540 --> 00:58:40.620
So you can do some sort of general logic in that.


00:58:40.620 --> 00:58:43.800
- So you're basically able to say,


00:58:43.800 --> 00:58:47.740
you go to yelp.com/something or api.yelp.com


00:58:47.740 --> 00:58:51.540
or whatever it is, as far as a user, it's the same.


00:58:51.540 --> 00:58:55.180
But some of those URLs are hitting the Python 3 version


00:58:55.180 --> 00:58:57.420
of this large monolith app running


00:58:57.420 --> 00:58:58.700
and some are hitting the Python 2.


00:58:58.700 --> 00:59:03.700
and you could move it URL, URL endpoint at a time, right?


00:59:03.700 --> 00:59:05.740
- Yeah.


00:59:05.740 --> 00:59:07.620
- Talk to us about that, that's pretty clever.


00:59:07.620 --> 00:59:11.320
- Yeah, this was a super cool technique.


00:59:11.320 --> 00:59:17.520
So we already had the reverse proxy layer,


00:59:17.520 --> 00:59:18.580
we had the routing service.


00:59:18.580 --> 00:59:20.580
This was something that we had built for


00:59:20.580 --> 00:59:25.260
just sort of consolidating a bunch of logic


00:59:25.260 --> 00:59:30.420
in a general place where everything could rely on it.


00:59:30.420 --> 00:59:33.700
But it was a really great place for us


00:59:33.700 --> 00:59:38.300
to be able to put this logic as well.


00:59:38.300 --> 00:59:41.420
And I'm going to say him again.


00:59:41.420 --> 00:59:45.220
Chris Keel, my colleague on my team,


00:59:45.220 --> 00:59:47.580
came up with this idea as well.


00:59:47.580 --> 00:59:51.740
So it's such a great idea.


00:59:51.740 --> 00:59:54.060
And it applies, I think, really generally.


00:59:54.060 --> 00:59:57.460
you can just say, "Okay, anytime I'm doing some sort of rollout


00:59:57.460 --> 01:00:04.660
where the setup is in such a way that I can't do it per--


01:00:04.660 --> 01:00:07.500
I can't do it within my application,


01:00:07.500 --> 01:00:09.500
there's something about the application setup,


01:00:09.500 --> 01:00:14.300
if you have this external layer, then you can pretty easily do it."


01:00:14.300 --> 01:00:17.940
And yeah, it was basically just sort of like--


01:00:17.940 --> 01:00:22.020
we would have a configuration and it would say,


01:00:22.020 --> 01:00:24.820
like, okay, this like prefix endpoint


01:00:24.820 --> 01:00:29.140
or like this endpoint prefix would go to Python two


01:00:29.140 --> 01:00:30.980
or this one would go to Python three.


01:00:30.980 --> 01:00:33.580
And we can actually even be a little bit more granular


01:00:33.580 --> 01:00:35.740
that we could actually give it a percentage of the time.


01:00:35.740 --> 01:00:38.540
So basically like, you know, 20% of the time


01:00:38.540 --> 01:00:42.140
it goes to Python two, 80% of the time goes to Python three,


01:00:42.140 --> 01:00:44.740
you know, and so we could do these sort of slower rollouts


01:00:44.740 --> 01:00:47.260
if people wanted to be more careful.


01:00:47.260 --> 01:00:48.080
- I see.


01:00:48.080 --> 01:00:50.340
So maybe it goes like, it's on Python two,


01:00:50.340 --> 01:00:53.220
Now 1% of the traffic goes to Python 3.


01:00:53.220 --> 01:00:54.500
Is it dying or no?


01:00:54.500 --> 01:00:56.020
It seems okay, it seems okay.


01:00:56.020 --> 01:00:57.660
All right, now 20, now 80.


01:00:57.660 --> 01:01:00.240
Like you could like slowly move it over.


01:01:00.240 --> 01:01:04.820
So if it fails, at least it fails just for a few people


01:01:04.820 --> 01:01:06.940
and you don't even roll it back.


01:01:06.940 --> 01:01:09.740
You just stop sending traffic there and fix it,


01:01:09.740 --> 01:01:11.680
which is really good.


01:01:11.680 --> 01:01:12.820
- Yeah.


01:01:12.820 --> 01:01:14.820
- Yeah, very clever.


01:01:14.820 --> 01:01:17.420
And it certainly makes sense for large projects.


01:01:17.420 --> 01:01:19.340
But what's great is it lets you start getting


01:01:19.340 --> 01:01:23.360
your Python 3 version in production way earlier, right?


01:01:23.360 --> 01:01:24.800
You're not waiting on the last endpoint,


01:01:24.800 --> 01:01:26.160
you just need the first endpoint.


01:01:26.160 --> 01:01:27.480
I mean, probably you didn't do this the very,


01:01:27.480 --> 01:01:29.360
like, one URL works, put it out there,


01:01:29.360 --> 01:01:31.120
but like, you could do it much sooner


01:01:31.120 --> 01:01:33.280
than you would otherwise, right?


01:01:33.280 --> 01:01:38.120
- Yeah, for various sort of practical reasons,


01:01:38.120 --> 01:01:41.460
we didn't want to actually start the rollout


01:01:41.460 --> 01:01:43.600
until we were like, oh, all of the tests


01:01:43.600 --> 01:01:46.840
pass under Python 3, because we didn't want people


01:01:46.840 --> 01:01:48.920
to be like, oh, I'm running my tests,


01:01:48.920 --> 01:01:51.720
and they're not passing and that's bad.


01:01:51.720 --> 01:01:53.380
And I mean, they're gonna like ignore them


01:01:53.380 --> 01:01:55.940
or try to fix them in a bad way and stuff like that.


01:01:55.940 --> 01:01:58.680
But like, I mean, it was like a two month process


01:01:58.680 --> 01:02:00.800
where we were like from the first endpoint


01:02:00.800 --> 01:02:02.240
to the last endpoint, it was like two months.


01:02:02.240 --> 01:02:05.000
And so that was able, that was really nice


01:02:05.000 --> 01:02:08.880
because it was like, oh, we would detect issues


01:02:08.880 --> 01:02:12.440
and then we would, but we would keep rolling out other stuff


01:02:12.440 --> 01:02:14.000
and then, you know, the teams


01:02:14.000 --> 01:02:15.920
or we could try and fix the issues.


01:02:15.920 --> 01:02:17.480
And so, yeah.


01:02:18.700 --> 01:02:20.260
- Yeah, very neat.


01:02:20.260 --> 01:02:21.620
That's great.


01:02:21.620 --> 01:02:22.820
All right, let's wrap this up.


01:02:22.820 --> 01:02:25.020
We're getting short on time here.


01:02:25.020 --> 01:02:26.860
You had some clear benefits,


01:02:26.860 --> 01:02:29.820
even though you went to Python 3.6,


01:02:29.820 --> 01:02:32.920
which I think you'll see those benefits again


01:02:32.920 --> 01:02:35.200
if you go to 3.11, all right?


01:02:35.200 --> 01:02:40.200
But even so, going from, where'd you go from 2.7 to 3.6?


01:02:40.200 --> 01:02:42.160
- We went from 2.7 to 3.7.


01:02:42.160 --> 01:02:44.540
- 2.7 to 3.7, right on.


01:02:44.540 --> 01:02:45.460
Okay, cool.


01:02:45.460 --> 01:02:48.380
And you said it got faster and used less memory.


01:02:48.380 --> 01:02:49.820
That's pretty good.


01:02:49.820 --> 01:02:52.660
- Yeah, I don't remember the exact numbers.


01:02:52.660 --> 01:02:53.800
It was in my talk, but.


01:02:53.800 --> 01:02:56.340
- I stole them from your talk,


01:02:56.340 --> 01:02:59.180
15 to 20% speed up and 20% less memory.


01:02:59.180 --> 01:03:01.820
That's a tangible.


01:03:01.820 --> 01:03:03.500
- That's right, that's right, yeah.


01:03:03.500 --> 01:03:05.780
I remember, so we have,


01:03:05.780 --> 01:03:08.140
this is something I didn't mention in my talk,


01:03:08.140 --> 01:03:10.340
but I thought, I think it's kind of interesting.


01:03:10.340 --> 01:03:15.340
So we have some stuff that is,


01:03:15.740 --> 01:03:20.740
you know, more CPU heavy,


01:03:20.740 --> 01:03:27.540
which we send to what we call VIP instances.


01:03:27.540 --> 01:03:33.720
So VIP, like containers have more memory and more CPU,


01:03:33.720 --> 01:03:40.180
okay, allocated towards them.


01:03:40.180 --> 01:03:44.140
And so I remember I talked to someone


01:03:45.160 --> 01:03:49.360
who was involved in doing a lot of that operational stuff.


01:03:49.360 --> 01:03:53.520
And after that migration, they looked at numbers


01:03:53.520 --> 01:03:57.960
and they were like, "Oh, we can now scale down the VIP


01:03:57.960 --> 01:04:00.160
to what the old normal one was."


01:04:00.160 --> 01:04:02.600
And the normal one is now scaled down even more.


01:04:02.600 --> 01:04:03.440
- That's cool.


01:04:03.440 --> 01:04:04.800
- Yeah, which was super cool.


01:04:04.800 --> 01:04:08.020
So it was super good to do that.


01:04:08.020 --> 01:04:10.680
And I think that beyond just,


01:04:10.680 --> 01:04:14.200
"Oh, this gave us this immediate,


01:04:14.200 --> 01:04:16.600
or this gave us this outcome,


01:04:16.600 --> 01:04:18.600
it's like we weren't going for this outcome,


01:04:18.600 --> 01:04:21.880
but I think it really shows how this type of work,


01:04:21.880 --> 01:04:23.120
like if you're like,


01:04:23.120 --> 01:04:25.320
I think very often it's easy to look at


01:04:25.320 --> 01:04:27.080
base level infrastructure work as like,


01:04:27.080 --> 01:04:29.000
oh, well, it's just maintenance


01:04:29.000 --> 01:04:30.840
and you just need to do it and blah, blah, blah.


01:04:30.840 --> 01:04:33.160
And it's not really benefiting anything.


01:04:33.160 --> 01:04:34.840
And it's like, no, we did this


01:04:34.840 --> 01:04:37.880
and it saved money on our bottom line.


01:04:37.880 --> 01:04:40.580
And not necessarily everything is gonna be like that,


01:04:40.580 --> 01:04:45.060
But I think that thinking about base level infrastructure


01:04:45.060 --> 01:04:47.180
is like, it does have a benefit.


01:04:47.180 --> 01:04:52.500
It might not necessarily be obvious before you do it,


01:04:52.500 --> 01:04:56.340
but this is an example of, okay,


01:04:56.340 --> 01:04:57.900
if you're doing your upgrades,


01:04:57.900 --> 01:05:00.140
you get to take advantage of all the really hard work


01:05:00.140 --> 01:05:03.780
that all of the people on the Python language team have done


01:05:03.780 --> 01:05:08.240
to make it more efficient and faster.


01:05:09.620 --> 01:05:11.860
- Yep, and it probably opens up other possibilities.


01:05:11.860 --> 01:05:14.620
The previous show I just did, which is not out yet,


01:05:14.620 --> 01:05:17.040
so you wouldn't know, but was talking about Ruff,


01:05:17.040 --> 01:05:20.780
the linter written in Rust for Python.


01:05:20.780 --> 01:05:23.060
But you have this ability to integrate


01:05:23.060 --> 01:05:24.660
with more modern tools and modern language.


01:05:24.660 --> 01:05:26.180
It's like, oh, if we gotta rewrite this section


01:05:26.180 --> 01:05:30.020
in Rust for that computation, it's trivial now,


01:05:30.020 --> 01:05:33.220
where probably it wasn't before, I would imagine.


01:05:33.220 --> 01:05:36.020
I haven't tried integrating Python 2.7


01:05:36.020 --> 01:05:38.740
with things like that, but I bet it's not as easy


01:05:38.740 --> 01:05:40.580
as the new tools, you know?


01:05:40.580 --> 01:05:42.940
>> Yeah, for sure.


01:05:42.940 --> 01:05:46.940
>> All right, well, let's leave it here.


01:05:46.940 --> 01:05:49.260
I think that's all the time we got to talk about it.


01:05:49.260 --> 01:05:51.380
But you must be enjoying it,


01:05:51.380 --> 01:05:55.300
enjoying work on the projects and the features more now.


01:05:55.300 --> 01:05:58.060
You can just kind of the world is your oyster again.


01:05:58.060 --> 01:06:02.140
>> Yeah. Yeah, I love using --


01:06:02.140 --> 01:06:06.660
the project that I've been working on actually lately


01:06:06.660 --> 01:06:08.580
is we've been adding a lot of type annotations


01:06:08.580 --> 01:06:09.420
internally.


01:06:09.420 --> 01:06:13.000
That's a Python 3 feature right there.


01:06:13.000 --> 01:06:13.840
- Yeah, absolutely.


01:06:13.840 --> 01:06:16.860
You can use f-strings, you can use type annotations,


01:06:16.860 --> 01:06:19.520
you can start using tools like mypy,


01:06:19.520 --> 01:06:22.460
not just standard type annotations, just for editors,


01:06:22.460 --> 01:06:27.460
but yeah, Pydantic, for example, all those things, right?


01:06:27.460 --> 01:06:28.680
Very cool.


01:06:28.680 --> 01:06:30.060
All right, now before you get out of here,


01:06:30.060 --> 01:06:31.220
I got two questions.


01:06:31.220 --> 01:06:33.620
I always ask at the end of the show.


01:06:33.620 --> 01:06:34.980
If you're gonna write some Python code,


01:06:34.980 --> 01:06:36.840
what editor are you using these days?


01:06:38.060 --> 01:06:39.260
I'm a Vim person.


01:06:39.260 --> 01:06:42.580
All my development of Vim.


01:06:42.580 --> 01:06:43.580
- Right on.


01:06:43.580 --> 01:06:46.780
And then notable PyPI package,


01:06:46.780 --> 01:06:49.980
give a shout out to Python Modernize,


01:06:49.980 --> 01:06:51.680
but anything that stands out


01:06:51.680 --> 01:06:53.680
you wanna give a shout out to like that?


01:06:53.680 --> 01:06:56.980
- Well, I mentioned Python Modernize,


01:06:56.980 --> 01:06:59.180
great, excellent tool for what it is.


01:06:59.180 --> 01:07:04.120
I also gave a shout out in my,


01:07:04.120 --> 01:07:06.580
I gave a shout out to a couple other things in my talk,


01:07:06.580 --> 01:07:09.440
but I think they're definitely worth giving a shout out to still,


01:07:09.440 --> 01:07:14.240
which is PyUpgrade, which we mentioned earlier.


01:07:14.240 --> 01:07:17.120
It has a lot of really nice features,


01:07:17.120 --> 01:07:22.480
but one of the sort of other things is kind of the other half of Python modernize


01:07:22.480 --> 01:07:25.960
is that it can take your sort of six shim filled code


01:07:25.960 --> 01:07:28.920
and turn it into sort of normal Python 3 code.


01:07:28.920 --> 01:07:35.560
And then another tool by the same former colleague of mine,


01:07:35.560 --> 01:07:39.100
and this is Tilly is pre-commit.


01:07:39.100 --> 01:07:41.840
Other modernizes a pre-commit hook,


01:07:41.840 --> 01:07:43.800
Py upgrade is a pre-commit hook.


01:07:43.800 --> 01:07:46.840
That's a thing that we use extensively internally.


01:07:46.840 --> 01:07:49.160
Super, super nice to be able to like,


01:07:49.160 --> 01:07:52.960
do all those sorts of things and do it in an incremental way


01:07:52.960 --> 01:07:55.160
which is something that was really valuable.


01:07:55.160 --> 01:08:02.440
And then the last one, this is just completely random one


01:08:02.760 --> 01:08:06.060
but I just love it is more it or tools.


01:08:06.060 --> 01:08:07.680
One of my favorite packages,


01:08:07.680 --> 01:08:10.300
we have like an internal package


01:08:10.300 --> 01:08:13.660
that has a lot of the like functions


01:08:13.660 --> 01:08:15.020
that are in more than our tools,


01:08:15.020 --> 01:08:19.640
but they're worse or like quirky in some way


01:08:19.640 --> 01:08:20.880
that I don't like.


01:08:20.880 --> 01:08:25.020
And so that's something that was like,


01:08:25.020 --> 01:08:26.100
when I first found out about it,


01:08:26.100 --> 01:08:27.180
I was like, oh man, this is great.


01:08:27.180 --> 01:08:29.180
And I think it's pretty popular now,


01:08:29.180 --> 01:08:31.540
but like, I think it's one of those things


01:08:31.540 --> 01:08:32.780
where it's just sort of like, oh,


01:08:32.780 --> 01:08:34.460
there's all these little functions that you're like,


01:08:34.460 --> 01:08:35.380
oh, I could write that.


01:08:35.380 --> 01:08:37.220
And it's like, you could, but you'd probably


01:08:37.220 --> 01:08:39.820
write it with bad edge cases or something.


01:08:39.820 --> 01:08:43.140
So it's a great library.


01:08:43.140 --> 01:08:44.700
- And it's better if you don't have to write it,


01:08:44.700 --> 01:08:46.400
that's for sure. - Yes, yes.


01:08:46.400 --> 01:08:49.740
- All right, well, Ben, thanks for being on the show.


01:08:49.740 --> 01:08:51.740
Final call to action, maybe some other people


01:08:51.740 --> 01:08:54.740
are out there facing this transformation they gotta do.


01:08:54.740 --> 01:08:56.940
Like I said, not actually Python 2 to 3,


01:08:56.940 --> 01:09:00.060
but some major foundation in their code base.


01:09:00.060 --> 01:09:01.340
What do you tell them?


01:09:01.340 --> 01:09:07.440
- Figure out a way to make it incremental.


01:09:07.440 --> 01:09:09.700
That's really, I think the main takeaway for me


01:09:09.700 --> 01:09:14.700
is that incremental changes have multiple benefits.


01:09:14.700 --> 01:09:17.140
They make you less risky.


01:09:17.140 --> 01:09:22.140
You're able to do these types of changes in a way,


01:09:22.140 --> 01:09:24.540
like where you don't necessarily have to be like,


01:09:24.540 --> 01:09:26.380
oh, we have to schedule two years of work.


01:09:26.380 --> 01:09:29.500
It's like, no, you can do it a chunk at a time


01:09:29.500 --> 01:09:34.500
when you have time and also it just like generally


01:09:34.500 --> 01:09:40.420
makes your, you know, you have less errors.


01:09:40.420 --> 01:09:41.660
- Yeah, absolutely.


01:09:41.660 --> 01:09:44.380
All right, well, thanks so much for being here.


01:09:44.380 --> 01:09:45.780
It's been great to have you on the show.


01:09:45.780 --> 01:09:46.620
Appreciate it.


01:09:46.620 --> 01:09:48.380
- Thanks so much for having me.


01:09:48.380 --> 01:09:49.380
- Yeah, you bet.


01:09:49.380 --> 01:09:50.280
Talk to you later.


01:09:50.280 --> 01:10:00.280
[BLANK_AUDIO]

