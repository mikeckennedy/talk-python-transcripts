WEBVTT

00:00:00.000 --> 00:00:05.000
- Aaron, Nate, and Jake, welcome to Talk Python To Me.


00:00:05.000 --> 00:00:07.880
- Hey, how's it going?


00:00:07.880 --> 00:00:09.160
- Hey, y'all.


00:00:09.160 --> 00:00:10.240
It's going really well.


00:00:10.240 --> 00:00:13.480
I'm excited to be on the data science side


00:00:13.480 --> 00:00:15.440
of the world today with you guys.


00:00:15.440 --> 00:00:18.040
- Cool, so are we.


00:00:18.040 --> 00:00:19.840
- Yeah, yeah, you built some really neat tools


00:00:19.840 --> 00:00:21.800
to help people get started and get up to speed


00:00:21.800 --> 00:00:26.720
and just be more efficient than just solely writing


00:00:26.720 --> 00:00:29.340
Python code, but not, you know, excluding that either


00:00:29.340 --> 00:00:30.620
with your product, Mito.


00:00:30.620 --> 00:00:33.100
So that's super fun, and we're gonna talk about that.


00:00:33.100 --> 00:00:35.820
But before we do, let's just kind of go around


00:00:35.820 --> 00:00:38.380
and how'd you get interested in data science


00:00:38.380 --> 00:00:40.260
and working on this Python tool?


00:00:40.260 --> 00:00:41.580
Aaron, you wanna go first?


00:00:41.580 --> 00:00:44.620
- Yeah, so a little background.


00:00:44.620 --> 00:00:46.740
Jake and I, you can't tell just by the first names,


00:00:46.740 --> 00:00:48.700
but we are twin brothers.


00:00:48.700 --> 00:00:52.660
So we've been working on projects together for a long time.


00:00:52.660 --> 00:00:57.580
Nate has been our best friend since middle school.


00:00:57.580 --> 00:00:59.700
I think I didn't get invited to his eighth grade birthday.


00:00:59.700 --> 00:01:01.940
So I think maybe starting in high school.


00:01:01.940 --> 00:01:04.020
And then he also went to college with us.


00:01:04.020 --> 00:01:06.260
And I think like, yeah,


00:01:06.260 --> 00:01:10.640
we got our first like taste of data science at Penn.


00:01:10.640 --> 00:01:13.180
We all studied a mix of computer science and business.


00:01:13.180 --> 00:01:14.700
And in the business classes,


00:01:14.700 --> 00:01:16.900
you do a lot of Excel based,


00:01:16.900 --> 00:01:20.180
mostly unfortunately Excel based data analytics work


00:01:20.180 --> 00:01:23.700
and stat classes and finance classes and stuff like that.


00:01:23.700 --> 00:01:25.820
So I think that's really where we got our first taste


00:01:25.820 --> 00:01:28.500
of data analytics or data science work.


00:01:28.500 --> 00:01:32.060
And then we've each had some experiences,


00:01:32.060 --> 00:01:33.780
new internships and jobs that we've had


00:01:33.780 --> 00:01:37.900
over the past few years in the data science space as well.


00:01:37.900 --> 00:01:40.220
But really, I think it all goes back


00:01:40.220 --> 00:01:44.060
to the beginnings of the courseworks that we did at Penn.


00:01:44.060 --> 00:01:45.460
- Yeah, very cool.


00:01:45.460 --> 00:01:47.820
And it's great that you all are able to stay together.


00:01:47.820 --> 00:01:48.660
I mean, obviously brothers,


00:01:48.660 --> 00:01:51.900
but continue to work together on this project.


00:01:52.940 --> 00:01:57.500
business schools, the whole business programs


00:01:57.500 --> 00:01:59.000
just run on Excel, don't they?


00:01:59.000 --> 00:02:04.180
- Yeah, it's really, it's kind of amazing, the contrast,


00:02:04.180 --> 00:02:07.060
because, so Aaron and I specifically both got degrees


00:02:07.060 --> 00:02:09.100
in computer science and in the business school,


00:02:09.100 --> 00:02:11.820
and so there was this transition where you'd be hanging out


00:02:11.820 --> 00:02:14.060
in class in the engineering school,


00:02:14.060 --> 00:02:15.140
and you'd be writing code,


00:02:15.140 --> 00:02:17.340
and then you would walk up campus into the business school,


00:02:17.340 --> 00:02:19.580
and it'd be like returning to the dark ages in some ways.


00:02:19.580 --> 00:02:20.420
- Yeah.


00:02:20.420 --> 00:02:22.420
- And what's really cool, I think, about Excel generally


00:02:22.420 --> 00:02:25.640
is that what we observed is that it let our peers in school


00:02:25.640 --> 00:02:29.280
and us as well kind of complete really amazing projects


00:02:29.280 --> 00:02:30.860
that we might have not been able to do with code


00:02:30.860 --> 00:02:33.620
because our skills, we were still learning at that point.


00:02:33.620 --> 00:02:35.440
So it's really kind of this really beginner friendly,


00:02:35.440 --> 00:02:37.480
amazingly powerful tool for what it is.


00:02:37.480 --> 00:02:39.020
But then we would go back down to the engineering school


00:02:39.020 --> 00:02:41.540
and be like, oh my God, there's all this tooling here.


00:02:41.540 --> 00:02:42.820
We could have superpowers,


00:02:42.820 --> 00:02:44.380
but we don't know how to use this stuff.


00:02:44.380 --> 00:02:46.060
And so there was this very direct contrast


00:02:46.060 --> 00:02:49.100
that we witnessed where there's very cool stuff happening


00:02:49.100 --> 00:02:51.020
all over the place, but the tooling differential


00:02:51.020 --> 00:02:53.060
is pretty dramatic between business school


00:02:53.060 --> 00:02:54.760
and computer science world.


00:02:54.760 --> 00:02:56.060
And I think that's kind of what initially


00:02:56.060 --> 00:02:57.380
made us interested in this space.


00:02:57.380 --> 00:02:59.080
- Sure, you don't want to underestimate the power


00:02:59.080 --> 00:03:02.120
of just firing up Excel, selecting a section,


00:03:02.120 --> 00:03:05.420
throwing up a graph or two, and that's incredible.


00:03:05.420 --> 00:03:09.400
And all of the functions and stuff,


00:03:09.400 --> 00:03:13.620
but if you think of bad programming practices,


00:03:13.620 --> 00:03:16.060
one of the worst ones has got to be like,


00:03:16.060 --> 00:03:18.460
do these three things and then go to over here


00:03:18.460 --> 00:03:19.540
and then do a couple of things,


00:03:19.540 --> 00:03:21.700
then go over there and then get that thing and then go back.


00:03:21.700 --> 00:03:26.380
You know, we've banished this type of programming from regular programming long ago.


00:03:26.380 --> 00:03:30.500
And Excel is like that without even being able to see where they go to his point.


00:03:30.500 --> 00:03:33.780
It's really not very predictable, right?


00:03:33.780 --> 00:03:35.020
Yeah, it's really amazing.


00:03:35.020 --> 00:03:39.420
And it's really it's crazy, I think, because once you start thinking about spreadsheets, you quickly realize,


00:03:39.420 --> 00:03:42.900
I mean, there's a couple crazy things about spreadsheets that people don't really acknowledge.


00:03:42.900 --> 00:03:46.020
We, you know, talk about them internally, because we're spreadsheet nerds at this point.


00:03:46.020 --> 00:03:48.100
And, you know, we like, you know, hyping up spreadsheets and stuff.


00:03:48.100 --> 00:03:52.540
But it's like, you know, the original killer applications of computers were spreadsheets, right?


00:03:52.540 --> 00:03:53.300
Oh, yeah.


00:03:53.300 --> 00:03:58.640
And more than that, it's, it's, spreadsheets are the most successful programming environment in the world.


00:03:58.640 --> 00:04:01.300
Hundreds of millions of people can program in Excel,


00:04:01.300 --> 00:04:04.300
the next leading programming language has 10, 20 million, you know what I mean?


00:04:04.300 --> 00:04:08.240
So it's really, there's an order of magnitude difference in how, you know, well adopted these things are.


00:04:08.240 --> 00:04:09.100
But you're totally right.


00:04:09.100 --> 00:04:14.900
The number of foot guns in Excel and the amount of like 50 megabyte insane models that we've seen where people are like,


00:04:14.900 --> 00:04:18.700
it's 75 tabs and they're all linked to each other in some crazy circular way.


00:04:18.700 --> 00:04:20.180
It's really slow. I don't know why.


00:04:20.180 --> 00:04:20.980
I know.


00:04:20.980 --> 00:04:22.580
Unclear. Not sure what's happening.


00:04:22.580 --> 00:04:25.340
But yeah, and we probably have built a couple of those ourselves.


00:04:25.340 --> 00:04:26.860
Probably even worse ones.


00:04:26.860 --> 00:04:28.580
But yeah, so, you know, we've seen that.


00:04:28.580 --> 00:04:31.700
And it's definitely those are some of the problems of spreadsheets


00:04:31.700 --> 00:04:34.540
that we kind of initially we were like, hmm, maybe these are some things


00:04:34.540 --> 00:04:36.540
that we can try to help solve.


00:04:36.540 --> 00:04:37.860
Yeah, absolutely.


00:04:37.860 --> 00:04:40.620
And, you know, Aaron, as you would go from business school


00:04:40.620 --> 00:04:44.860
back to the computer science side, I guess specifically to the business school,


00:04:44.860 --> 00:04:48.780
Did your business peers look at you like,


00:04:48.780 --> 00:04:51.300
"Oh, these are the guys that have the power


00:04:51.300 --> 00:04:52.260
to make the thing happen.


00:04:52.260 --> 00:04:54.420
They can help us build the thing


00:04:54.420 --> 00:04:57.700
that we can't quite automate or can't quite pull off."


00:04:57.700 --> 00:05:01.060
- I think in some ways, it was like trying to work


00:05:01.060 --> 00:05:03.620
in a group in an Excel spreadsheet


00:05:03.620 --> 00:05:05.340
is a miserable experience.


00:05:05.340 --> 00:05:06.740
I hope you haven't had to do it,


00:05:06.740 --> 00:05:09.660
but it's like you upload, you have a Google Drive,


00:05:09.660 --> 00:05:11.580
and then you end up uploading new versions


00:05:11.580 --> 00:05:13.980
to the Google Drive, and then it's usually a Google Drive


00:05:13.980 --> 00:05:15.780
paired with a text message group chat.


00:05:15.780 --> 00:05:18.340
And it's like, I just finished this sheet.


00:05:18.340 --> 00:05:20.540
Why don't you go up and--


00:05:20.540 --> 00:05:21.980
- Download it again or something.


00:05:21.980 --> 00:05:22.820
- Yeah, exactly.


00:05:22.820 --> 00:05:25.220
Make sure you're not doing it the same time I'm doing it.


00:05:25.220 --> 00:05:29.540
And I think that, I don't think Nate and I


00:05:29.540 --> 00:05:31.980
maybe solved those collaboration problems


00:05:31.980 --> 00:05:32.800
while we were at Penn.


00:05:32.800 --> 00:05:34.500
But I think it was those experiences


00:05:34.500 --> 00:05:37.300
and our thinking we've had of our programming


00:05:37.300 --> 00:05:40.780
as a superpower made us want to start doing this.


00:05:40.780 --> 00:05:42.820
I don't know if it was always recognized


00:05:42.820 --> 00:05:44.100
by everybody else though.


00:05:44.100 --> 00:05:47.400
I mean, I think the big thing was maybe we weren't the best


00:05:47.400 --> 00:05:48.240
at attending class.


00:05:48.240 --> 00:05:50.420
So it was hard to be a good group member in the first place,


00:05:50.420 --> 00:05:52.340
but one day we'll be up to it.


00:05:52.340 --> 00:05:54.820
- Yeah, group work was always hard for me as well.


00:05:54.820 --> 00:05:55.660
Jake, how about you?


00:05:55.660 --> 00:05:57.660
How'd you get into this whole project here?


00:05:57.660 --> 00:06:00.340
- Well, mostly by bloodline.


00:06:00.340 --> 00:06:01.700
I'm Aaron's twin brother.


00:06:01.700 --> 00:06:04.260
So sort of like some sort of covenant


00:06:04.260 --> 00:06:05.700
I think comes through that.


00:06:05.700 --> 00:06:08.420
But no, we started working really


00:06:08.420 --> 00:06:10.300
in this like Excel collaboration space.


00:06:10.300 --> 00:06:12.060
My background, I worked at a software company


00:06:12.060 --> 00:06:14.740
during college, sort of on the project management side


00:06:14.740 --> 00:06:16.100
of some data science projects.


00:06:16.100 --> 00:06:19.400
So I had not quite the business side of it yet,


00:06:19.400 --> 00:06:21.260
but at least a little more one step removed


00:06:21.260 --> 00:06:23.440
from like the coding product side of it.


00:06:23.440 --> 00:06:26.660
And yeah, we started working on these collaboration issues


00:06:26.660 --> 00:06:29.540
and we built a few other products before


00:06:29.540 --> 00:06:31.820
it had some modicums of success there,


00:06:31.820 --> 00:06:33.700
but really took a step back at one point.


00:06:33.700 --> 00:06:34.520
We're looking at like,


00:06:34.520 --> 00:06:37.100
what are the biggest problems with spreadsheets?


00:06:37.100 --> 00:06:39.220
It's the speed, it's the inability


00:06:39.220 --> 00:06:41.000
to hold onto large data sizes,


00:06:41.000 --> 00:06:43.480
and it's the lack of repeatability.


00:06:43.480 --> 00:06:46.760
This allows you to do repeatable processes


00:06:46.760 --> 00:06:47.840
in an efficient way.


00:06:47.840 --> 00:06:50.040
And so the place we found that does all those really well


00:06:50.040 --> 00:06:52.840
is some sort of bearing the lead is Python.


00:06:52.840 --> 00:06:56.420
So the idea was to stick a spreadsheet interface


00:06:56.420 --> 00:06:57.840
on top of Python.


00:06:57.840 --> 00:07:00.160
And that was sort of like a sentence we had written down.


00:07:00.160 --> 00:07:01.480
We're like, okay, now we need to backtrack


00:07:01.480 --> 00:07:03.200
and realize like, what does that mean?


00:07:03.200 --> 00:07:04.020
How do we do that?


00:07:04.020 --> 00:07:05.120
How do we implement that?


00:07:05.120 --> 00:07:07.960
And opened a few thousand cans of worms in doing so.


00:07:07.960 --> 00:07:12.160
- Yeah, I'm sure, but it's a super neat idea.


00:07:12.160 --> 00:07:15.740
There's a lot of things that you can automate with Python,


00:07:15.740 --> 00:07:18.000
but with what you guys built,


00:07:18.000 --> 00:07:18.920
we'll get to it in a little bit,


00:07:18.920 --> 00:07:22.080
but what you all's built lets you interact


00:07:22.080 --> 00:07:23.760
in this spreadsheet way,


00:07:23.760 --> 00:07:25.440
and then it writes the Python code.


00:07:25.440 --> 00:07:30.440
It doesn't just sort of allow you to make changes,


00:07:30.440 --> 00:07:32.440
and then you gotta stay in your tool, right?


00:07:32.440 --> 00:07:34.920
You use the tool to write code


00:07:34.920 --> 00:07:37.820
that otherwise might be a little bit of a stretch for you.


00:07:37.820 --> 00:07:42.700
Yeah, I think I can talk more high level, they can talk about exactly why and how we did that. But


00:07:42.700 --> 00:07:47.340
like a lot of just from the business side, like a lot of other tools will try and extract Python


00:07:47.340 --> 00:07:51.340
away. And so we'll give you will allow you to do the types of workflows that you would do in Python,


00:07:51.340 --> 00:07:57.340
but in a GUI in a visual environment, we're much more tethered to the Python or try to be more


00:07:57.340 --> 00:08:00.140
tethered to the Python and the notebook, it's really important to us that you're staying in


00:08:00.140 --> 00:08:05.180
your Python environment. And you're not at any now you're not at a disadvantage at all, because


00:08:05.180 --> 00:08:06.200
because you don't have the code.


00:08:06.200 --> 00:08:09.060
The code is right there, it's being generated in real time.


00:08:09.060 --> 00:08:10.960
And that's important for yourself,


00:08:10.960 --> 00:08:13.340
if you're learning Python, if you're trying to use the code,


00:08:13.340 --> 00:08:15.780
or if it's a communication layer.


00:08:15.780 --> 00:08:17.240
You want that code because you want to send that


00:08:17.240 --> 00:08:20.020
to a developer who's working in Python as well.


00:08:20.020 --> 00:08:22.380
- Right, yeah, it probably allows you to bring


00:08:22.380 --> 00:08:27.380
more people into the actual project than before, for sure.


00:08:27.380 --> 00:08:29.820
- Totally, yeah, you're much less silent


00:08:29.820 --> 00:08:31.380
by being in the environment.


00:08:31.380 --> 00:08:32.280
- Yeah, absolutely.


00:08:33.420 --> 00:08:40.540
I think that kind of mentality of when you're building tools for beginners or people that


00:08:40.540 --> 00:08:45.940
don't know maybe the professional software, make it really point and click and hide a


00:08:45.940 --> 00:08:47.660
lot of the complexity.


00:08:47.660 --> 00:08:50.620
I think that's something that we've experienced with tools that we've used.


00:08:50.620 --> 00:08:55.660
For example, we use Stripe and Stripe creates a bunch of dashboards for you.


00:08:55.660 --> 00:08:58.820
But the problem is we have no idea what those dashboards...


00:08:58.820 --> 00:09:01.780
What is the nitty gritty details of how those numbers are calculated?


00:09:01.780 --> 00:09:07.140
And so we have all these metrics, and we have really poor understanding of what is this


00:09:07.140 --> 00:09:08.220
actually telling us.


00:09:08.220 --> 00:09:13.860
And so I think something interesting that we definitely try to do is we give you people


00:09:13.860 --> 00:09:18.100
that are maybe less familiar with writing the syntax yourself the ability to, as you


00:09:18.100 --> 00:09:21.900
said, point and click and use the spreadsheet environment and then generate the code.


00:09:21.900 --> 00:09:26.060
And then if you ever have questions about, oh, what is this pivot table that I created?


00:09:26.060 --> 00:09:27.560
What does it really mean?


00:09:27.560 --> 00:09:31.180
Then you can look at the generated code and see exactly what's going on.


00:09:31.180 --> 00:09:35.180
And I think that kind of like understanding where users need help and where users want


00:09:35.180 --> 00:09:40.540
the as professional as possible, you know, nitty gritty details is a stratification that


00:09:40.540 --> 00:09:45.020
we've thought about and I think have a somewhat unique approach to when it comes to these


00:09:45.020 --> 00:09:46.820
like no code, low code tools.


00:09:46.820 --> 00:09:48.660
Yeah, absolutely.


00:09:48.660 --> 00:09:54.560
So I kind of want to set the stage by talking about some of the different things people


00:09:54.560 --> 00:09:59.460
are doing with notebooks because notebooks have really taken over in the data science


00:09:59.460 --> 00:10:00.980
space for good reason, I think.


00:10:00.980 --> 00:10:05.700
You know, we had iPython notebooks and we had Jupyter and we had JupyterLab,


00:10:05.700 --> 00:10:10.520
which is doing a little bit more than just Jupyter and people really love them.


00:10:10.520 --> 00:10:10.800
I think.


00:10:10.800 --> 00:10:19.140
And while JupyterLab is great, I think there's even, there's, there's a bunch


00:10:19.140 --> 00:10:23.180
of creative things going on, trying to extend it and use it in different ways.


00:10:23.180 --> 00:10:24.620
And I feel like Mido falls in there.


00:10:24.620 --> 00:10:28.140
So I wanted to throw out a couple and just see if you all have heard of these.


00:10:28.140 --> 00:10:29.820
and if so, get your thoughts on them.


00:10:29.820 --> 00:10:34.580
One of them is this thing called JUT, J-U-T,


00:10:34.580 --> 00:10:38.020
JUT maybe, something like that.


00:10:38.020 --> 00:10:40.500
And what it allows you to do is it allows you


00:10:40.500 --> 00:10:44.580
to actually view notebooks in the browser.


00:10:44.580 --> 00:10:47.500
So have you guys, or not the browser, the terminal,


00:10:47.500 --> 00:10:48.700
have you guys seen this?


00:10:48.700 --> 00:10:52.260
- I haven't seen it, but I do have a lot of sympathy


00:10:52.260 --> 00:10:54.980
for the unknown pronunciation of JUT or JUT


00:10:54.980 --> 00:10:57.060
because we get MITO and METO a lot.


00:10:57.060 --> 00:10:59.220
So my heart goes out to the two developers.


00:10:59.220 --> 00:11:02.780
- Yeah, I'm sure I'm messing it up, but yeah.


00:11:02.780 --> 00:11:04.540
Yeah, so here's a way to say like,


00:11:04.540 --> 00:11:06.800
well, these notebooks are so popular.


00:11:06.800 --> 00:11:08.680
Let's see if we can show them in the terminal.


00:11:08.680 --> 00:11:12.040
Like if I'm SSH into a remote machine


00:11:12.040 --> 00:11:14.980
and it has, you know, IPY and B files


00:11:14.980 --> 00:11:17.100
and I just wanna see them, how do I look at them?


00:11:17.100 --> 00:11:19.700
So you just say, JUT, I'm gonna go with JUT.


00:11:19.700 --> 00:11:21.280
You just say JUT and then the file name


00:11:21.280 --> 00:11:24.740
and then boom, it shows it right there using rich, I think.


00:11:26.140 --> 00:11:31.140
What do you guys think of this?


00:11:31.140 --> 00:11:32.220
- Super cool.


00:11:32.220 --> 00:11:32.820
Yeah, I think that this is,


00:11:32.820 --> 00:11:34.140
and I'm sure this comment will expand out


00:11:34.140 --> 00:11:37.220
as we see more of these,


00:11:37.220 --> 00:11:38.140
but I think it really demonstrates something


00:11:38.140 --> 00:11:40.420
that we've really observed,


00:11:40.420 --> 00:11:41.460
which is that notebooks are not like,


00:11:41.460 --> 00:11:43.980
they're just like Excel in many ways.


00:11:43.980 --> 00:11:45.440
They're not a tool that's used by one person


00:11:45.440 --> 00:11:47.220
for one specific thing.


00:11:47.220 --> 00:11:50.660
We use a tool called Mixpanel, for example,


00:11:50.660 --> 00:11:52.980
and it helps us track some metrics, for example.


00:11:52.980 --> 00:11:55.300
It's a product analytics tool.


00:11:51.140 --> 00:11:56.140
- I've always used it before, yeah.


00:11:56.140 --> 00:11:57.140
It gives you an insane amount of analytics


00:11:57.140 --> 00:11:59.260
of where did these people come from,


00:11:59.260 --> 00:12:00.760
how did they find my product and stuff like that.


00:12:00.760 --> 00:12:03.220
- Exactly, and you can kind of imagine though,


00:12:03.220 --> 00:12:04.780
it's really in some ways,


00:12:04.780 --> 00:12:05.860
it's just for product analytics, right, in some ways.


00:12:05.860 --> 00:12:08.500
And the really interesting thing about a lot of our users


00:12:08.500 --> 00:12:10.820
is that one thing, as we're trying to learn about our users


00:12:10.820 --> 00:12:14.200
and work with them to improve the tool,


00:12:14.200 --> 00:12:15.360
one thing we've really realized


00:12:15.360 --> 00:12:16.360
is there's people from all over the place.


00:12:16.360 --> 00:12:19.000
And they're interested in notebooks


00:12:19.000 --> 00:12:20.140
for 472 different reasons.


00:12:17.220 --> 00:12:20.520
And so some people using notebooks are people who've never written any Python code before


00:12:20.520 --> 00:12:21.720
in their life.


00:12:21.720 --> 00:12:25.940
Some people have two weeks under of experience and some people are 75 year old developers


00:12:25.940 --> 00:12:27.200
who only use the terminal.


00:12:27.200 --> 00:12:29.280
And if you show them anything else, they'll try and fight you.


00:12:29.280 --> 00:12:30.280
Right.


00:12:30.280 --> 00:12:32.840
So it's, you know, it's really, I think this demonstrates that there's really an appetite


00:12:32.840 --> 00:12:37.280
for a wide range of kind of ways of consuming these things and presenting these things and


00:12:37.280 --> 00:12:39.600
editing these things on these notebooks specifically.


00:12:39.600 --> 00:12:40.600
Yeah.


00:12:40.600 --> 00:12:41.600
That's a great, yeah.


00:12:41.600 --> 00:12:42.600
Great analysis.


00:12:42.600 --> 00:12:44.800
I totally agree.


00:12:44.800 --> 00:12:47.020
another cool thing about tools like this, or tools like this


00:12:47.020 --> 00:12:48.800
more generally, is that I think what they sort of have to do


00:12:48.800 --> 00:12:51.600
from a product perspective is condense down what are the


00:12:51.600 --> 00:12:53.800
really powerful things about notebooks, because they're


00:12:53.800 --> 00:12:55.700
taking a notebook and bringing it out of a notebook


00:12:55.700 --> 00:12:58.020
environment. And I think kind of what we're trying to do with a


00:12:58.020 --> 00:13:00.440
spreadsheet is like, what are the values of a spreadsheet? How


00:13:00.440 --> 00:13:02.920
can we bring a spreadsheet into other environments? So I think


00:13:02.920 --> 00:13:05.440
a tool like Jude is, is trying to do that. I think it's a


00:13:05.440 --> 00:13:09.840
it's an interesting way to think about product. It's like sort of


00:13:09.840 --> 00:13:12.120
like, what is the essence? What is it? What are the essential


00:13:12.120 --> 00:13:13.800
parts of a notebook? What are the essential parts of a


00:13:13.800 --> 00:13:16.780
spreadsheet, how do we translate those and bring that value to


00:13:16.780 --> 00:13:19.060
other environments? So I always I'm interested in tools like


00:13:19.060 --> 00:13:19.300
that.


00:13:19.300 --> 00:13:23.660
Yeah, for sure. This is an interesting one. Another one is


00:13:23.660 --> 00:13:28.980
they just came out with JupyterLab desktop version. And


00:13:28.980 --> 00:13:31.100
I suspect that you guys could even integrate with the


00:13:31.100 --> 00:13:33.260
JupyterLab desktop app, right?


00:13:33.260 --> 00:13:38.540
I hope so. Most likely, yes, the answer is probably yes. But


00:13:38.540 --> 00:13:41.260
you know, I'll be honest with you, like, candidly, if I spend


00:13:41.260 --> 00:13:43.940
one more minute on installation problems, I might, you know,


00:13:43.940 --> 00:13:46.540
chop my arms off or something. I don't know. But it's really, I


00:13:46.540 --> 00:13:48.500
mean, I'm sure I don't have to preach to you. I'm sure you've


00:13:48.500 --> 00:13:51.700
heard this a million times. But the Python installation


00:13:51.700 --> 00:13:56.820
ecosystem environment issues is a, it's a massive blocker. I


00:13:56.820 --> 00:13:59.620
knew it was a massive blocker from like an individual level.


00:13:59.620 --> 00:14:02.260
Oh, I bet if you're trying to reach people who are going


00:14:02.260 --> 00:14:04.580
through it, like I would just want to use Excel and like have


00:14:04.580 --> 00:14:09.860
a little bit of code. Yeah. Conda virtual environments, pip


00:14:10.060 --> 00:14:14.940
versions of Python. Yeah, you probably get a couple of questions about that every now and then.


00:14:14.940 --> 00:14:22.700
Yeah, just a few. Yeah, exactly. But yeah, no, I think that this is a really cool example of,


00:14:22.700 --> 00:14:27.660
I guess, you know, the Jupyter devs realizing that distribution is one of the primary problems here.


00:14:27.660 --> 00:14:33.180
And certainly with us, it's like the primary bottleneck in users trying our product is not


00:14:33.180 --> 00:14:35.900
they can't figure out how to use it. It's that they can't even get the thing installed in the


00:14:35.900 --> 00:14:36.900
in the first place.


00:14:36.900 --> 00:14:39.980
And, you know, making that as easy as possible.


00:14:39.980 --> 00:14:41.620
I'm sure there's still work to do here,


00:14:41.620 --> 00:14:43.420
but really hats off to them


00:14:43.420 --> 00:14:45.180
and definitely something that we're interested in


00:14:45.180 --> 00:14:46.300
working with in the future.


00:14:46.300 --> 00:14:47.140
If we don't already,


00:14:47.140 --> 00:14:48.420
there's probably some hack to do it.


00:14:48.420 --> 00:14:52.020
- No, I have not done anything in earnest


00:14:52.020 --> 00:14:53.420
with JupyterLab desktop,


00:14:53.420 --> 00:14:54.640
but I have installed it and run it.


00:14:54.640 --> 00:14:59.020
And I think it comes pre-assembled with Python and Conda.


00:14:59.020 --> 00:15:02.020
You don't have to have, it basically comes all set.


00:15:02.020 --> 00:15:04.740
And then it just hosts JupyterLab locally


00:15:04.740 --> 00:15:06.300
inside of an electron app.


00:15:06.300 --> 00:15:08.820
So it might even be better for you guys.


00:15:08.820 --> 00:15:10.720
I'm not totally sure, but if you can make it work at all,


00:15:10.720 --> 00:15:12.240
I bet it's better.


00:15:12.240 --> 00:15:13.940
- I think what Nate is talking about is,


00:15:13.940 --> 00:15:17.920
it's a trade-off that any tool or product building


00:15:17.920 --> 00:15:19.760
as an extension to Python is gonna face,


00:15:19.760 --> 00:15:21.580
especially if it's one that's trying to make


00:15:21.580 --> 00:15:24.840
parts of data science more accessible to a newer audience.


00:15:24.840 --> 00:15:26.420
If you're building it in the Jupyter environment,


00:15:26.420 --> 00:15:27.820
there's a lot of freebies you get.


00:15:27.820 --> 00:15:29.180
There's a lot of great nuggets,


00:15:29.180 --> 00:15:30.800
valuable things for the user you get,


00:15:30.800 --> 00:15:33.020
but installation can be such a nightmare


00:15:33.020 --> 00:15:36.080
that you might be casting away a certain part,


00:15:36.080 --> 00:15:38.340
top of the funnel, just by doing it.


00:15:38.340 --> 00:15:41.340
- One of the benefits, I guess,


00:15:41.340 --> 00:15:44.260
that you all will receive is people can go Google


00:15:44.260 --> 00:15:45.840
for help setting up notebooks


00:15:45.840 --> 00:15:47.420
and getting the notebook started and all that,


00:15:47.420 --> 00:15:49.300
and you don't have to be part of that, right?


00:15:49.300 --> 00:15:52.620
Like there's a whole ecosystem of people running notebooks,


00:15:52.620 --> 00:15:55.660
people writing articles about using notebooks for beginners.


00:15:55.660 --> 00:15:59.100
And so you can just sort of level up on top of that


00:15:59.100 --> 00:16:00.500
and say, once you go through all


00:16:00.500 --> 00:16:02.980
what they show you over here, here's how you go, right?


00:16:02.980 --> 00:16:04.540
I mean, obviously you wanna help people succeed


00:16:04.540 --> 00:16:06.460
'cause if they can't get Jupyter going,


00:16:06.460 --> 00:16:07.500
they can't use Mido.


00:16:07.500 --> 00:16:10.580
- Yeah, I was creating documentation


00:16:10.580 --> 00:16:11.900
for getting set up with Mido


00:16:11.900 --> 00:16:14.340
and I went to the JupyterLab documentation


00:16:14.340 --> 00:16:16.700
and for things like creating a new sheet,


00:16:16.700 --> 00:16:18.860
I just grabbed the JupyterLab YouTube video


00:16:18.860 --> 00:16:20.620
and put it in our documentation.


00:16:20.620 --> 00:16:22.340
- Yeah, that's one of the things I like


00:16:22.340 --> 00:16:24.860
about your documentation and your site


00:16:24.860 --> 00:16:29.820
is it's sprinkled with screencast-like little examples


00:16:29.820 --> 00:16:31.900
of how to do stuff or how to demonstrate stuff.


00:16:31.900 --> 00:16:35.660
And I think more places should do that, right?


00:16:35.660 --> 00:16:38.420
There's so many places or so many projects


00:16:38.420 --> 00:16:39.940
that I just don't understand.


00:16:39.940 --> 00:16:41.340
It'll be a UI framework


00:16:41.340 --> 00:16:43.980
and there won't be a single picture of anything.


00:16:43.980 --> 00:16:46.220
Like what, it's about picture.


00:16:46.220 --> 00:16:47.500
The whole purpose is pictures.


00:16:47.500 --> 00:16:48.860
Give us a picture at least,


00:16:48.860 --> 00:16:50.940
it's like a gallery or something.


00:16:50.940 --> 00:16:54.660
And similarly with how do you use things and just,


00:16:54.660 --> 00:16:57.140
yeah, hats off to you guys for putting those in there


00:16:57.140 --> 00:16:59.140
'cause I think it makes a big difference.


00:16:59.140 --> 00:17:00.940
- Yeah, one of the reasons I think we've done that


00:17:00.940 --> 00:17:03.080
and had some good videos is just,


00:17:03.080 --> 00:17:05.580
in terms of just growing the tool,


00:17:05.580 --> 00:17:06.780
we've partnered with a lot of people


00:17:06.780 --> 00:17:08.740
in the YouTube data science community,


00:17:08.740 --> 00:17:10.540
and they're all really good at making demos.


00:17:10.540 --> 00:17:11.820
I think we've learned a lot from them,


00:17:11.820 --> 00:17:14.460
people like the data professor,


00:17:14.460 --> 00:17:16.880
Krish Nayak, two we work with a lot.


00:17:16.880 --> 00:17:19.140
But they've gone to sort of, I think,


00:17:19.140 --> 00:17:20.500
I think at least myself learned a lot


00:17:20.500 --> 00:17:23.100
from how to present a tool in a video,


00:17:23.100 --> 00:17:26.540
and that's obviously really valuable for documentation.


00:17:26.540 --> 00:17:29.820
- Yeah, I prefer to just fire up a two or three minute video


00:17:29.820 --> 00:17:31.220
and watch it instead of reading through


00:17:31.220 --> 00:17:33.020
and see what I really got to pay attention to.


00:17:33.020 --> 00:17:33.860
Yeah, for sure.


00:17:33.860 --> 00:17:35.100
- Yeah, definitely.


00:17:35.100 --> 00:17:35.940
- All right, cool.


00:17:35.940 --> 00:17:38.060
So JupyterLab Desktop is one of these


00:17:38.060 --> 00:17:39.040
sort of interesting things.


00:17:39.040 --> 00:17:40.940
Another one is JupyterLite,


00:17:40.940 --> 00:17:42.900
which is Jupyter written in WebAssembly


00:17:42.900 --> 00:17:46.140
that runs just in the front end of the browser.


00:17:46.140 --> 00:17:47.500
You guys check this thing out?


00:17:47.500 --> 00:17:48.820
- No, but this sounds amazing.


00:17:48.820 --> 00:17:50.300
I mean, we saw,


00:17:50.300 --> 00:17:52.100
I don't know if I saw the WebAssembly version,


00:17:52.100 --> 00:17:56.100
but I saw a Python compiled to JS version of this era.


00:17:56.100 --> 00:17:58.820
But I mean, it would be very cool


00:17:58.820 --> 00:18:00.420
if everything could happen in the browser,


00:18:00.420 --> 00:18:03.120
because I feel like installation problems would evaporate,


00:18:03.120 --> 00:18:05.220
which is the goal.


00:18:05.220 --> 00:18:06.340
It's the goal at the end of the day.


00:18:06.340 --> 00:18:08.500
So this is super interesting.


00:18:08.500 --> 00:18:09.540
We'll definitely check this out.


00:18:09.540 --> 00:18:11.660
- Yeah, this might also be relevant to you guys,


00:18:11.660 --> 00:18:14.540
'cause it's basically Jupyter running,


00:18:14.540 --> 00:18:19.060
and then they run in-browser WebAssembly language kernels.


00:18:19.060 --> 00:18:24.060
So a limited set of CPython in WebAssembly in the browser,


00:18:24.060 --> 00:18:26.240
and probably also Julia and R and all those things.


00:18:26.240 --> 00:18:28.740
- Right, so the benefit here, sorry, go for it.


00:18:28.740 --> 00:18:33.020
I was gonna actually ask that question on behalf of the maybe partially non-technical


00:18:33.020 --> 00:18:34.020
audience.


00:18:34.020 --> 00:18:35.020
What is the benefit here?


00:18:35.020 --> 00:18:37.220
I can take a shot, yeah.


00:18:37.220 --> 00:18:41.980
So how I would describe this is that, so normally the way JupyterLab works is that it's a client-server


00:18:41.980 --> 00:18:42.980
model, right?


00:18:42.980 --> 00:18:46.300
So your client is effectively the thing that you as a user interact with.


00:18:46.300 --> 00:18:50.380
You have a notebook that you see, you write code in the notebook, you press shift-enter


00:18:50.380 --> 00:18:52.020
to run a notebook cell.


00:18:52.020 --> 00:18:56.100
What actually happens when you press shift-enter is that code gets sent to the server.


00:18:56.100 --> 00:18:58.100
The server in this case is a Python kernel,


00:18:58.100 --> 00:18:59.900
and the Python kernel actually runs that code


00:18:59.900 --> 00:19:01.340
and then sends you back the results.


00:19:01.340 --> 00:19:03.980
So there's what you see on your web browser,


00:19:03.980 --> 00:19:05.180
and then there's a server running


00:19:05.180 --> 00:19:06.700
usually on your command line or something,


00:19:06.700 --> 00:19:08.620
and you send code to it,


00:19:08.620 --> 00:19:10.620
it executes the code and sends you the results.


00:19:10.620 --> 00:19:11.580
The benefit of this thing


00:19:11.580 --> 00:19:13.440
is that you can get rid of that backend.


00:19:13.440 --> 00:19:14.780
So there's no more installation,


00:19:14.780 --> 00:19:17.580
and instead you only need this kind of notebook


00:19:17.580 --> 00:19:18.860
that lives on the front end.


00:19:18.860 --> 00:19:20.740
WebAssembly is a tool that allows us


00:19:20.740 --> 00:19:22.540
to run the code on the front end.


00:19:22.540 --> 00:19:24.260
And so instead of taking code,


00:19:24.260 --> 00:19:25.560
sending it to the backend and getting it back,


00:19:25.560 --> 00:19:26.880
we can do that all in one location.


00:19:26.880 --> 00:19:28.480
- Right, and the challenges you've already


00:19:28.480 --> 00:19:29.600
been talking about are the challenge


00:19:29.600 --> 00:19:31.560
of setting up that backend to get Python


00:19:31.560 --> 00:19:33.360
to run on your machine with the environments


00:19:33.360 --> 00:19:35.440
and the dependencies, and this would,


00:19:35.440 --> 00:19:37.040
theoretically, in principle, at least,


00:19:37.040 --> 00:19:39.600
avoid all that, it's just load it up and it goes.


00:19:39.600 --> 00:19:40.720
- Yeah, it's super cool.


00:19:40.720 --> 00:19:42.160
Now we'll definitely look into it,


00:19:42.160 --> 00:19:43.800
'cause this is a, I mean, this is an area


00:19:43.800 --> 00:19:44.800
of continual research for us,


00:19:44.800 --> 00:19:47.040
is how to improve our installation process.


00:19:47.040 --> 00:19:48.280
- Yeah, very cool.


00:19:48.280 --> 00:19:49.440
All right, what else have I pulled up here?


00:19:49.440 --> 00:19:50.560
A paper mill.


00:19:50.560 --> 00:19:52.320
So a paper mill lets you treat notebooks


00:19:52.320 --> 00:19:56.120
like functions that you can execute a notebook


00:19:56.120 --> 00:19:59.000
and then get a value out for all sorts of things.


00:19:59.000 --> 00:20:00.840
I'm not, I think this area,


00:20:00.840 --> 00:20:02.920
this is probably the least relevant to you guys,


00:20:02.920 --> 00:20:04.080
the things that I pulled up here,


00:20:04.080 --> 00:20:08.520
'cause it's exactly about making it not interactive


00:20:08.520 --> 00:20:10.320
and kind of skipping that,


00:20:10.320 --> 00:20:13.400
but just another interesting thing that people are doing


00:20:13.400 --> 00:20:16.600
to kind of add more or do more with these notebooks.


00:20:16.600 --> 00:20:19.920
- Yeah, it seems super cool.


00:20:19.920 --> 00:20:21.920
Oh, are we gonna stop this one?


00:20:21.920 --> 00:20:22.760
- No, I was just gonna say,


00:20:22.760 --> 00:20:25.240
I've seen people, we've seen people who have notebooks


00:20:25.240 --> 00:20:27.400
where they like call functions in other notebooks


00:20:27.400 --> 00:20:28.960
and all of that syntax, you know,


00:20:28.960 --> 00:20:30.280
the Panda syntax is confusing,


00:20:30.280 --> 00:20:32.560
but then like linking notebooks and all of that


00:20:32.560 --> 00:20:33.480
is confusing as well.


00:20:33.480 --> 00:20:37.160
So I think it's all interesting to see, you know,


00:20:37.160 --> 00:20:38.200
I think just like spreadsheets


00:20:38.200 --> 00:20:39.520
have so many different use cases,


00:20:39.520 --> 00:20:41.320
and I think Nate touched on this earlier,


00:20:41.320 --> 00:20:43.560
notebooks have an incredibly large number


00:20:43.560 --> 00:20:45.520
of different use cases with people


00:20:45.520 --> 00:20:47.280
from like top level data scientists


00:20:47.280 --> 00:20:48.440
to people just getting started.


00:20:48.440 --> 00:20:51.640
So the tooling ecosystem that's being created


00:20:51.640 --> 00:20:53.960
and already exist is really quite diverse


00:20:53.960 --> 00:20:55.920
and really powerful.


00:20:55.920 --> 00:20:56.760
- Absolutely.


00:20:56.760 --> 00:20:58.520
All right, I think I've got one more for you here.


00:20:58.520 --> 00:21:00.480
This might be the one that you heard of Nate


00:21:00.480 --> 00:21:02.340
called Notebook.js.


00:21:02.340 --> 00:21:07.960
No, this one renders, parses them


00:21:07.960 --> 00:21:10.760
and then renders it down to HTML,


00:21:10.760 --> 00:21:14.680
which is, I guess I don't have one to open,


00:21:14.680 --> 00:21:15.920
but that's all right.


00:21:15.920 --> 00:21:17.420
So yeah, that's pretty neat


00:21:17.420 --> 00:21:19.840
that it'll basically allow you to turn notebooks


00:21:19.840 --> 00:21:21.760
into HTML.


00:21:21.760 --> 00:21:25.320
- And I think just to kind of draw a categorization model


00:21:25.320 --> 00:21:27.020
over what we've kind of seen before,


00:21:27.020 --> 00:21:28.960
I think there's a couple areas of focus.


00:21:28.960 --> 00:21:30.640
And these are things that we focus on internally.


00:21:30.640 --> 00:21:32.220
And I think themes that will come up


00:21:32.220 --> 00:21:33.600
throughout the rest of the conversation.


00:21:33.600 --> 00:21:36.680
There's things that we'll call, let's say presentation.


00:21:36.680 --> 00:21:39.620
Right, and presentation is this looking at it,


00:21:39.620 --> 00:21:41.280
looking at the outputs here in the terminal


00:21:41.280 --> 00:21:43.720
or looking at the outputs easily on a webpage


00:21:43.720 --> 00:21:45.160
without running a server, right?


00:21:45.160 --> 00:21:46.720
And presentation is something that we encounter.


00:21:46.720 --> 00:21:47.840
How do we present data?


00:21:47.840 --> 00:21:50.360
how do we present conclusions from analysis, et cetera.


00:21:50.360 --> 00:21:51.480
Then there's another thing,


00:21:51.480 --> 00:21:53.800
which I think this paper mill thing that we looked at last


00:21:53.800 --> 00:21:54.620
is super relevant on,


00:21:54.620 --> 00:21:58.080
which is this idea of repeatability, right?


00:21:58.080 --> 00:21:59.660
As anyone who's worked in notebooks knows,


00:21:59.660 --> 00:22:03.000
there are really great areas for being a scratch pad.


00:22:03.000 --> 00:22:04.960
It can get pretty confusing sometimes


00:22:04.960 --> 00:22:06.680
when you've got like all these cells flying around,


00:22:06.680 --> 00:22:08.720
you're executing things out of order.


00:22:08.720 --> 00:22:10.840
- Yeah, and that's the thing, you know,


00:22:10.840 --> 00:22:14.200
we have sort of solved the Excel,


00:22:14.200 --> 00:22:16.720
this cell refers to that cell and then,


00:22:16.720 --> 00:22:19.600
But you have this human aspect of notebooks, right?


00:22:19.600 --> 00:22:21.840
I can go, I want to try this, try this, try this,


00:22:21.840 --> 00:22:23.600
go back and change this and then run this.


00:22:23.600 --> 00:22:27.560
And the stuff below it, you can run them in different orders


00:22:27.560 --> 00:22:30.240
and even change them and then have some of the invisible


00:22:30.240 --> 00:22:33.200
changes stuck in another unrun cell.


00:22:33.200 --> 00:22:36.640
- The amount of times that even,


00:22:36.640 --> 00:22:38.300
I mean, Aaron and I spend all day in notebooks


00:22:38.300 --> 00:22:40.440
and the amount of times where I'll go up to Aaron


00:22:40.440 --> 00:22:41.980
and be like, Aaron, dude, look at this.


00:22:41.980 --> 00:22:42.960
This code makes no sense.


00:22:42.960 --> 00:22:43.800
What is this bug?


00:22:43.800 --> 00:22:44.620
I don't understand it.


00:22:44.620 --> 00:22:45.600
And Aaron's like, you fool.


00:22:45.600 --> 00:22:47.760
you've been one, three, four, not one, two, three.


00:22:47.760 --> 00:22:48.600
What were you thinking?


00:22:48.600 --> 00:22:49.420
You know, like just the amount of times


00:22:49.420 --> 00:22:50.960
that even we as people who use notebooks


00:22:50.960 --> 00:22:53.040
all day encounter that is really, you know, it's dramatic.


00:22:53.040 --> 00:22:55.360
And so I think that it's, you know,


00:22:55.360 --> 00:22:57.940
that area of reproducibility and repeatability


00:22:57.940 --> 00:22:59.960
is something that we spend a lot of time thinking about,


00:22:59.960 --> 00:23:01.200
mostly because a lot of our users


00:23:01.200 --> 00:23:02.080
are really interested in it


00:23:02.080 --> 00:23:03.520
and it's problems that they struggle with.


00:23:03.520 --> 00:23:05.680
And it's something I think we'll definitely get into,


00:23:05.680 --> 00:23:07.640
you know, as we kind of get into, you know,


00:23:07.640 --> 00:23:09.120
what we actually ended up building.


00:23:09.120 --> 00:23:09.960
- Yeah, awesome.


00:23:09.960 --> 00:23:13.520
So speaking of get into it, let's talk about Mido.


00:23:13.520 --> 00:23:19.160
So I think Mido lives in this realm of these interesting ways


00:23:19.160 --> 00:23:20.520
to do more with notebooks.


00:23:20.520 --> 00:23:23.360
And as we've already hinted at, you basically


00:23:23.360 --> 00:23:28.200
take an Excel user interface, stick it into a notebook,


00:23:28.200 --> 00:23:29.660
and then allow people to interact


00:23:29.660 --> 00:23:34.120
with the data within the notebook in an Excel-style way,


00:23:34.120 --> 00:23:35.640
right?


00:23:35.640 --> 00:23:36.720
What's your elevator pitch?


00:23:41.000 --> 00:23:42.340
Oh, I can go over there.


00:23:42.340 --> 00:23:46.980
LLVidge essentially it's a spreadsheet interface for Python.


00:23:46.980 --> 00:23:48.720
So everything you do in the spreadsheet


00:23:48.720 --> 00:23:50.480
is gonna generate the equivalent code for you


00:23:50.480 --> 00:23:51.580
in the code cell below.


00:23:51.580 --> 00:23:52.620
If you're watching the video right now,


00:23:52.620 --> 00:23:55.040
you're seeing a little demo happen.


00:23:55.040 --> 00:23:57.820
But we have features for exploratory data analysis.


00:23:57.820 --> 00:24:00.600
We have features for data wrangling, data munging.


00:24:00.600 --> 00:24:03.400
I've heard lots of different words for that type of process.


00:24:03.400 --> 00:24:05.040
So just sending them there.


00:24:05.040 --> 00:24:06.760
And then graphing as well.


00:24:06.760 --> 00:24:09.200
And also we have the ability to save and replay analysis


00:24:09.200 --> 00:24:14.640
of like a macro. And in terms of users, you know, we have people who are newer to Python using it to


00:24:14.640 --> 00:24:18.800
sort of introduce themselves to the Python world. They're learning as they go. But the nice thing is


00:24:18.800 --> 00:24:22.560
that they're not held back by the syntax at any point. So you're not Googling syntax, you're not


00:24:22.560 --> 00:24:27.040
going to Stack Overflow, you're in your notebook the entire time, sort of staying in a state of


00:24:27.040 --> 00:24:30.640
flow. And then we also have more advanced Python users and people intermediate in the middle,


00:24:30.640 --> 00:24:35.760
using it just to get their analysis done more quickly. It's really fast to do something visually,


00:24:36.480 --> 00:24:39.240
especially like the code for graphing or pivot tables


00:24:39.240 --> 00:24:41.040
or merging, take a lot of time to type it out


00:24:41.040 --> 00:24:42.200
and get the syntax right.


00:24:42.200 --> 00:24:44.880
So in our tool, you just do it in an Excel interface


00:24:44.880 --> 00:24:48.120
that you're used to and it spits out the correct code for you.


00:24:48.120 --> 00:24:49.480
- Yeah, it's cool.


00:24:49.480 --> 00:24:51.320
People definitely need to see the little video.


00:24:51.320 --> 00:24:53.120
So if you haven't checked it out,


00:24:53.120 --> 00:24:56.360
obviously I'll put a couple of videos in the show notes,


00:24:56.360 --> 00:24:59.280
but yeah, that's the idea is you come in


00:24:59.280 --> 00:25:02.960
and you just basically inside the notebook


00:25:02.960 --> 00:25:04.680
as just part of the cell,


00:25:04.680 --> 00:25:08.120
you might be familiar with having an interactive widget


00:25:08.120 --> 00:25:09.480
for like some kind of graph, right?


00:25:09.480 --> 00:25:11.800
Where it's got like some sliders and stuff.


00:25:11.800 --> 00:25:14.360
It's like that, but it's Excel-ish.


00:25:14.360 --> 00:25:16.960
Right?


00:25:16.960 --> 00:25:19.840
- Yeah, exactly.


00:25:19.840 --> 00:25:22.720
- Was this your first idea or what did you,


00:25:22.720 --> 00:25:24.360
where did this whole idea start?


00:25:24.360 --> 00:25:28.840
- So we started, all right, go ahead if you want.


00:25:28.840 --> 00:25:31.960
We've worked on a lot of different


00:25:31.960 --> 00:25:34.320
like spreadsheet related tools.


00:25:34.320 --> 00:25:42.560
We over, I guess, a year and a half ago or two years, a long time ago at this point,


00:25:42.560 --> 00:25:49.200
we started building a GitHub for Excel. And we were building essentially,


00:25:49.200 --> 00:25:55.360
difference detection, allowing you to merge, going back to those original problems that we


00:25:55.360 --> 00:26:01.520
talked about that we experienced at school. So we were building this GitHub for Excel platform.


00:26:02.800 --> 00:26:09.040
we were primarily talking to investment bankers and people in private equity and these like really


00:26:09.040 --> 00:26:14.560
Excel power users. And we, you know, we built the tool, we've interacted with a lot of them


00:26:14.560 --> 00:26:20.880
eventually realized that wasn't maybe the most helpful or space that we could be working in and


00:26:20.880 --> 00:26:27.840
ended up finding our way to this where it was more Python based Jupyter notebooks, and just making


00:26:27.840 --> 00:26:32.240
them more accessible. And as Jake said, you know, helping people across the spectrum from beginners


00:26:32.240 --> 00:26:34.440
to more advanced data analysts


00:26:34.440 --> 00:26:36.440
to get their analysis done faster.


00:26:36.440 --> 00:26:37.280
- Sure.


00:26:37.280 --> 00:26:38.240
I think there's two angles here.


00:26:38.240 --> 00:26:40.200
One is just, you could be really fast, right?


00:26:40.200 --> 00:26:42.000
You could say, okay, I wanna do,


00:26:42.000 --> 00:26:43.760
I see the data, I wanna sort by this.


00:26:43.760 --> 00:26:45.680
Now I want to drop these three columns


00:26:45.680 --> 00:26:47.240
and then I want to, you know,


00:26:47.240 --> 00:26:50.080
compute a, do a computed column of sort of thing


00:26:50.080 --> 00:26:53.560
or maybe join two pieces of data,


00:26:53.560 --> 00:26:55.360
like two data frames


00:26:55.360 --> 00:27:00.140
and create like a larger one out of that and so on.


00:27:00.140 --> 00:27:01.320
You could be really quick with that.


00:27:01.320 --> 00:27:08.960
I think maybe even more important to that is helping people who are just stepping into the data science side of the world, right? They've


00:27:08.960 --> 00:27:14.040
They've been working in some other tools or no tools whatsoever really and then they just they hear


00:27:14.040 --> 00:27:18.160
Oh, I should go do Python and I should do notebooks and then they're confronted with pandas


00:27:18.160 --> 00:27:25.860
Which pandas is great and it's not that hard to use but there's a zillion things you can do with pandas and it's not super


00:27:25.860 --> 00:27:26.920
discoverable


00:27:26.920 --> 00:27:28.280
You know


00:27:28.280 --> 00:27:31.880
- Totally. - What it is you should choose.


00:27:31.880 --> 00:27:34.400
And also the notebooks don't really help


00:27:34.400 --> 00:27:35.640
as much as they could, I think,


00:27:35.640 --> 00:27:40.080
in presenting the features of an API, right?


00:27:40.080 --> 00:27:43.520
Like if I'm working in PyCharm or VS Code and I say dot,


00:27:43.520 --> 00:27:45.120
like boom, there's a bunch of descriptions.


00:27:45.120 --> 00:27:46.160
And if I get the mouse near it,


00:27:46.160 --> 00:27:49.400
it'll give me like examples and documentation.


00:27:49.400 --> 00:27:52.160
And here it just lets you type unless you hit, you know,


00:27:52.160 --> 00:27:54.200
dot tab and you explicitly ask for it.


00:27:54.200 --> 00:27:56.000
And a lot of people don't, I suspect,


00:27:56.000 --> 00:27:57.360
if they're coming from economics,


00:27:57.360 --> 00:27:59.520
they don't know that oh, like Tab has this magic


00:27:59.520 --> 00:28:02.480
to show me what I can do and stuff like that, right?


00:28:02.480 --> 00:28:06.440
- Totally, and I think, oh, there, go ahead, sorry.


00:28:06.440 --> 00:28:08.640
No, I was gonna say, yeah, and I think that those people


00:28:08.640 --> 00:28:11.880
making the transition to the notebook environment


00:28:11.880 --> 00:28:16.640
are doing so at a, along a spectrum of willingness as well.


00:28:16.640 --> 00:28:18.620
Some people are doing it because they're really excited


00:28:18.620 --> 00:28:22.040
about up-leveling their skills, learning Python,


00:28:22.040 --> 00:28:25.320
making their analysis faster, and then some people


00:28:25.320 --> 00:28:28.560
are doing it because upper-level management wants me to do that.


00:28:28.560 --> 00:28:33.440
And I think those people are really grateful for having


00:28:33.440 --> 00:28:36.120
a tool that will help them meet the workflow requirements


00:28:36.120 --> 00:28:40.200
that they're working in, but not necessarily having to--


00:28:40.200 --> 00:28:42.280
I'm sure you've read, at some point, the Pandas


00:28:42.280 --> 00:28:43.080
documentation.


00:28:43.080 --> 00:28:45.840
And it's one of those that has lots of great examples,


00:28:45.840 --> 00:28:46.320
in fairness.


00:28:46.320 --> 00:28:48.280
But no pictures.


00:28:48.280 --> 00:28:49.520
It's not the most intuitive.


00:28:49.520 --> 00:28:52.040
>>Victor: Probably not a lot of tutorial videos in there.


00:28:52.040 --> 00:28:53.280
>>Chance: Yeah.


00:28:53.280 --> 00:28:59.400
So I would add a sort of a third category to what Aaron was saying, which is like, it's


00:28:59.400 --> 00:29:03.720
people not forced by management, but it's not sort of out of their own interest in Python.


00:29:03.720 --> 00:29:06.920
It's more so they're just sort of forced to based on what they're trying to accomplish.


00:29:06.920 --> 00:29:11.000
If they have a certain data set of a certain size, you simply can't do it in Excel or Google


00:29:11.000 --> 00:29:12.000
Sheets.


00:29:12.000 --> 00:29:16.600
So I need a medium that's going to allow me to facilitate data analysis on this scale.


00:29:16.600 --> 00:29:19.600
And they can be really frustrating if you're thrown into pandas to do that.


00:29:19.600 --> 00:29:22.840
And you have to spend all your time, especially doing simple things that you're so used to


00:29:22.840 --> 00:29:25.400
to doing in Excel, like adding columns, doing pivot tables,


00:29:25.400 --> 00:29:27.360
whatever it is, using formulas.


00:29:27.360 --> 00:29:29.360
If now you're spending 90% of your time


00:29:29.360 --> 00:29:32.600
going through syntax and making sure that you're typing out


00:29:32.600 --> 00:29:35.300
and capitalizing the right letters in a line of code,


00:29:35.300 --> 00:29:37.360
that can be really frustrating.


00:29:37.360 --> 00:29:40.400
So our tool is really trying to allow you to stay focused


00:29:40.400 --> 00:29:42.040
on the actual analysis the entire time.


00:29:42.040 --> 00:29:43.120
- Right.


00:29:43.120 --> 00:29:45.240
And many people are Excel literate, right?


00:29:45.240 --> 00:29:48.120
And so it kind of levers that a little bit.


00:29:48.120 --> 00:29:48.960
- Yeah.


00:29:48.960 --> 00:29:51.560
And then for people who aren't even coming from Excel,


00:29:51.560 --> 00:29:53.960
that are just data scientists, they're,


00:29:53.960 --> 00:29:54.800
I don't know what the word is,


00:29:54.800 --> 00:29:56.560
not Excel literate, but they're sort of like


00:29:56.560 --> 00:29:59.200
visual literate, that's a horrible phrase.


00:29:59.200 --> 00:30:00.760
But what it means essentially is that


00:30:00.760 --> 00:30:02.160
they understand how to do this visually.


00:30:02.160 --> 00:30:04.080
They understand, okay, these are the things I need to do


00:30:04.080 --> 00:30:05.040
and here are the buttons to do it,


00:30:05.040 --> 00:30:07.360
here are the functions I can use.


00:30:07.360 --> 00:30:09.200
So it's still a really valuable environment


00:30:09.200 --> 00:30:11.600
for everyone, Excel or Python otherwise.


00:30:11.600 --> 00:30:12.600
- Nice.


00:30:12.600 --> 00:30:14.960
So question from the audience out there,


00:30:14.960 --> 00:30:18.280
Spohn says, "Hello, what are the limitations of Mido?"


00:30:18.280 --> 00:30:20.800
- That's a great question.


00:30:20.800 --> 00:30:25.100
I think the honest answer is that Mido is certainly a work in progress,


00:30:25.100 --> 00:30:29.800
and there's a large portion of Pandas functionality that we don't currently support.


00:30:29.800 --> 00:30:35.600
So kind of, I think a helpful context here is how we're actually developing this tool.


00:30:35.600 --> 00:30:39.100
So Mido is very much, I would say, a collaboration with our users.


00:30:39.100 --> 00:30:43.200
And what that practically means is that join our Discord, there's a feature request channel,


00:30:43.200 --> 00:30:47.600
and anyone has the ability to show up and essentially say, "Hey, this is missing from my workflow."


00:30:47.600 --> 00:30:49.240
and we'll say, "Oh, that's on our roadmap,"


00:30:49.240 --> 00:30:50.880
or, "Oh, that wasn't on our roadmap, we'll add that,"


00:30:50.880 --> 00:30:52.440
or help us engage with your workflow


00:30:52.440 --> 00:30:53.480
and understand where that's coming from.


00:30:53.480 --> 00:30:54.720
But essentially what's happening is,


00:30:54.720 --> 00:30:57.920
over the past six to eight to nine months or so,


00:30:57.920 --> 00:30:59.600
we've been working really heavily with our users


00:30:59.600 --> 00:31:01.120
to kind of build out the core pieces


00:31:01.120 --> 00:31:03.000
of Pandas functionality that most of our users


00:31:03.000 --> 00:31:06.540
work with one by one, and kind of investing


00:31:06.540 --> 00:31:08.800
their workflows back into the tool.


00:31:08.800 --> 00:31:10.260
- Yeah, which way do you take it?


00:31:10.260 --> 00:31:12.320
Do you go and say, "These are the things


00:31:12.320 --> 00:31:14.060
"people need to do in Pandas.


00:31:14.060 --> 00:31:16.800
"How do we surface that in our interface?"


00:31:16.800 --> 00:31:18.840
Or do you say, these are the Excel type things


00:31:18.840 --> 00:31:21.000
people are happy with, how do I make that happen?


00:31:21.000 --> 00:31:23.120
And Panda is like, which direction


00:31:23.120 --> 00:31:24.040
do you find yourself going?


00:31:24.040 --> 00:31:25.380
- It's a really great question.


00:31:25.380 --> 00:31:27.040
And Aaron, you can definitely speak to this more


00:31:27.040 --> 00:31:29.360
because this is kind of part of our process internally


00:31:29.360 --> 00:31:31.760
that's been evolving, but really kind of what we try


00:31:31.760 --> 00:31:35.480
and do at this point is we try and work very heavily


00:31:35.480 --> 00:31:37.400
with our users to understand, you know,


00:31:37.400 --> 00:31:38.440
at the highest of levels,


00:31:38.440 --> 00:31:40.000
what are they trying to accomplish, right?


00:31:40.000 --> 00:31:42.560
Someone really isn't usually trying to make a pivot table.


00:31:42.560 --> 00:31:44.600
Usually what they're trying to do is conclude,


00:31:44.600 --> 00:31:48.960
should I tell a salesperson to do X or Y, right?


00:31:48.960 --> 00:31:50.760
And that level of decision--


00:31:50.760 --> 00:31:53.360
- What state are we spending, getting the most sales in?


00:31:53.360 --> 00:31:55.680
And all I have is zip codes or something like that, right?


00:31:55.680 --> 00:31:56.840
- Exactly, exactly, right?


00:31:56.840 --> 00:31:59.320
There are really a lot of people that we work with


00:31:59.320 --> 00:32:00.320
and this isn't the only thing,


00:32:00.320 --> 00:32:01.360
but one of the things, for example,


00:32:01.360 --> 00:32:02.400
is they're operating the level of,


00:32:02.400 --> 00:32:04.000
I'm looking to predict this feature


00:32:04.000 --> 00:32:08.120
or understand what affects this piece of my data.


00:32:08.120 --> 00:32:09.520
And so what we do is we kind of work with them


00:32:09.520 --> 00:32:10.800
to understand their workflow.


00:32:10.800 --> 00:32:13.640
And then we use that to internally figure out


00:32:13.640 --> 00:32:14.960
What features drive this?


00:32:14.960 --> 00:32:16.200
What does Panda support?


00:32:16.200 --> 00:32:17.840
And how can we provide an interface on that


00:32:17.840 --> 00:32:19.260
that really lets people, you know,


00:32:19.260 --> 00:32:20.680
get this done as quickly as possible


00:32:20.680 --> 00:32:22.280
in a way that gives them as much flexibility


00:32:22.280 --> 00:32:24.200
at the end of the day, if they need to take this from Mido


00:32:24.200 --> 00:32:26.200
and go run with the code somewhere else.


00:32:26.200 --> 00:32:28.600
Yeah.


00:32:28.600 --> 00:32:30.600
And Aaron, feel free to hop in.


00:32:30.600 --> 00:32:31.960
- Go for it, Jake.


00:32:31.960 --> 00:32:33.440
- I was, no, Aaron, I was gonna say,


00:32:33.440 --> 00:32:34.880
I feel like in the beginning,


00:32:34.880 --> 00:32:36.920
how to come out when they were saying,


00:32:36.920 --> 00:32:38.000
we were very focused on,


00:32:38.000 --> 00:32:40.800
like when we first launched, we were very focused on,


00:32:40.800 --> 00:32:42.840
let's put Excel into Python.


00:32:42.840 --> 00:32:44.760
and it was like more about the Excel functionality.


00:32:44.760 --> 00:32:47.460
But I think over time, we've come to think more about,


00:32:47.460 --> 00:32:51.880
the question is more, what is the best visual interface


00:32:51.880 --> 00:32:54.120
for Python for data science?


00:32:54.120 --> 00:32:55.880
And it's less so, and so some of those things


00:32:55.880 --> 00:32:58.560
are from Excel, some of those things are our own creations.


00:32:58.560 --> 00:33:01.640
It's still a spreadsheet interface, but it's not,


00:33:01.640 --> 00:33:04.760
the goal is certainly not to take Microsoft Excel


00:33:04.760 --> 00:33:07.080
and give you all of that in Python.


00:33:07.080 --> 00:33:08.420
- Interesting, yeah, cool.


00:33:10.920 --> 00:33:14.280
All right, I think maybe a good way to understand this,


00:33:14.280 --> 00:33:16.640
how this workflow works and get a peek


00:33:16.640 --> 00:33:20.760
inside of the features is over here somewhere,


00:33:20.760 --> 00:33:24.480
I think in the documentation side of things,


00:33:24.480 --> 00:33:26.720
you've got, yeah, right at the beginning here,


00:33:26.720 --> 00:33:31.600
this quick tutorial here, you've got this sort of,


00:33:31.600 --> 00:33:33.800
I don't know, I'm not bouncing around,


00:33:33.800 --> 00:33:35.760
I'm not finding quite where it was to tell you,


00:33:35.760 --> 00:33:37.480
but there's this example where you go


00:33:37.480 --> 00:33:39.540
and load up a couple of CSV files


00:33:39.540 --> 00:33:42.380
and then like join them to create a pivot table


00:33:42.380 --> 00:33:43.380
and stuff like that.


00:33:43.380 --> 00:33:45.060
Maybe give us a talk through


00:33:45.060 --> 00:33:48.740
what working with that data flow kind of looks like.


00:33:48.740 --> 00:33:49.940
You know, I talked about this idea


00:33:49.940 --> 00:33:52.740
of like turning zip codes into states


00:33:52.740 --> 00:33:54.820
and that kind of stuff.


00:33:54.820 --> 00:33:56.700
What does working with Mito feel like?


00:33:56.700 --> 00:33:57.860
Give us a sense.


00:33:57.860 --> 00:34:00.500
Whoever wants to take that one.


00:34:00.500 --> 00:34:01.780
- I can talk a little about that.


00:34:01.780 --> 00:34:06.300
So I think working with Mito feels hopefully very fast


00:34:06.300 --> 00:34:08.820
and very intuitive, I think are two of the things.


00:34:08.820 --> 00:34:12.780
and maybe robust, or maybe like the three kind of things


00:34:12.780 --> 00:34:13.820
we strive for.


00:34:13.820 --> 00:34:17.100
I think in terms of workflows that we see people doing,


00:34:17.100 --> 00:34:21.300
a lot of people kind of fit this feature creator and automator


00:34:21.300 --> 00:34:22.940
use case that we think about.


00:34:22.940 --> 00:34:26.440
So it's people that have some business sort of question,


00:34:26.440 --> 00:34:28.540
like, where are all my sales coming from when


00:34:28.540 --> 00:34:30.220
I just have these zip codes?


00:34:30.220 --> 00:34:34.140
And they're probably trying to do that in Python


00:34:34.140 --> 00:34:37.660
because they've been doing it in Excel over and over again


00:34:37.660 --> 00:34:38.340
each month.


00:34:38.340 --> 00:34:42.540
And they're looking for a more robust and more automatic way of doing that.


00:34:42.540 --> 00:35:04.100
So I think a lot of a lot of how a lot of the ways that we see these workflows play out is people either have a CSV file or they have like a snowflake connection to get some data. And then they start by doing you know, some simple EDA and trying to get a better sense of what what their data actually looks like.


00:35:04.220 --> 00:35:12.740
Right. Without Mido, it might be something like df.head, or df.sample, and just like kind of get a visual look of a grid of data, right?


00:35:12.740 --> 00:35:21.140
Exactly. Or even some people are, they want the more visual interface. So they're downloading it to Excel initially, and doing some


00:35:21.140 --> 00:35:28.500
manipulations or something like that there. But then that workflow is very, you know, separate from their more automatic script that


00:35:28.500 --> 00:35:31.180
they're creating, and then they have to kind of reconcile any


00:35:31.180 --> 00:35:35.300
changes that they've made back into the Python workflow. But


00:35:35.300 --> 00:35:38.300
yeah, so Mido has a bunch of features. There's some here,


00:35:38.300 --> 00:35:41.780
you know, if you scroll down in the documentation on this left


00:35:41.780 --> 00:35:44.500
hand side, you might see some stuff that might be helpful. So


00:35:44.500 --> 00:35:49.220
there's things like summary stats, right there, which will


00:35:49.220 --> 00:35:52.420
show you like a graph, a distribution of the data in each


00:35:52.420 --> 00:35:55.780
column, a lot of those dot describe functions and has some


00:35:55.780 --> 00:35:57.420
really intuitive filtering.


00:35:57.420 --> 00:35:58.940
So things like filter by value,


00:35:58.940 --> 00:36:03.940
so you can see all the unique values in your column,


00:36:03.940 --> 00:36:06.800
and then you can toggle them in and out of your dataset,


00:36:06.800 --> 00:36:09.400
or you can add more customized filters,


00:36:09.400 --> 00:36:10.760
whichever you would like.


00:36:10.760 --> 00:36:12.420
But then once you move past this kind of like


00:36:12.420 --> 00:36:14.020
initial data cleaning,


00:36:14.020 --> 00:36:16.620
some people do write spreadsheet formulas.


00:36:16.620 --> 00:36:20.020
So we have a bunch of Excel's most popular formulas.


00:36:20.020 --> 00:36:23.560
Things like date manipulation and date parsing.


00:36:23.560 --> 00:36:27.020
Yeah, here's a bunch of, here's a few of them.


00:36:27.020 --> 00:36:31.660
Once you kind of get a sense of what your data looks like,


00:36:31.660 --> 00:36:33.480
you can do some of these transformations,


00:36:33.480 --> 00:36:35.800
and then ultimately you'll end up with the script


00:36:35.800 --> 00:36:39.240
that you can use to run over and over again,


00:36:39.240 --> 00:36:41.600
and never have to go back into the Excel world


00:36:41.600 --> 00:36:44.280
to fight through the manual process again.


00:36:44.280 --> 00:36:48.940
- Yeah, so to get data into this spreadsheet-like front end,


00:36:48.940 --> 00:36:52.480
that is Mino, you basically just have to have a data frame.


00:36:52.480 --> 00:36:54.320
If you have a data frame, boom.


00:36:54.320 --> 00:36:57.720
And there's a ton of flexibility for doing that, right?


00:36:57.720 --> 00:37:01.880
You could load a file, you could get it from the internet.


00:37:01.880 --> 00:37:05.520
You could do even read HTML off of a URL


00:37:05.520 --> 00:37:08.960
and then go grab a table and then there's your data frame.


00:37:08.960 --> 00:37:10.820
Work with that, right?


00:37:10.820 --> 00:37:13.160
There are simplifications, I guess.


00:37:13.160 --> 00:37:14.480
Like when you're in Mito,


00:37:14.480 --> 00:37:17.200
you can hit like file load equivalent, right?


00:37:17.200 --> 00:37:20.200
And browse to the files and then it'll write the pandas code


00:37:20.200 --> 00:37:24.360
say like pd.read_csv to whatever you selected, right?


00:37:24.360 --> 00:37:25.440
- Yeah, yeah, exactly.


00:37:25.440 --> 00:37:27.600
And I think that this, I mean, this,


00:37:27.600 --> 00:37:29.520
one of the things I think would be really interesting


00:37:29.520 --> 00:37:32.320
to talk with you about is generally in your kind of survey


00:37:32.320 --> 00:37:34.880
of the Python ecosystem, it's interesting because,


00:37:34.880 --> 00:37:36.800
I mean, Python is code, right?


00:37:36.800 --> 00:37:40.960
And so in some ways we're on this boundary,


00:37:40.960 --> 00:37:44.000
this flexible border between pure code


00:37:44.000 --> 00:37:46.440
and low-code, no-code tool.


00:37:46.440 --> 00:37:49.040
And there's been 100 million low-code, no-code tools


00:37:49.040 --> 00:37:51.760
that have existed over the past 25, 30 years, whatever.


00:37:51.760 --> 00:37:53.760
And some of them are around and some of them aren't.


00:37:53.760 --> 00:37:55.760
And really the question for us that we kind of ask ourselves is,


00:37:55.760 --> 00:37:58.000
what unique do we bring to the table here?


00:37:58.000 --> 00:38:01.600
And as a local tool, how do we differentiate ourselves?


00:38:01.600 --> 00:38:05.120
And it's that exact idea that you can also just pass a data frame.


00:38:05.120 --> 00:38:07.280
We're not necessarily interested in,


00:38:07.280 --> 00:38:09.480
we don't want to stop you from writing Python code.


00:38:09.480 --> 00:38:12.480
We want to enable you to write Python code as easily as you possibly can.


00:38:12.480 --> 00:38:15.600
And really, that's how we see ourselves manning that spectrum.


00:38:15.600 --> 00:38:18.160
I think it's a really good place to be because


00:38:18.160 --> 00:38:21.520
my hesitation with all these low-code, no-code tools


00:38:21.520 --> 00:38:25.720
is they usually, one, lock you into their thing,


00:38:25.720 --> 00:38:28.240
which is often a SaaS thing, right?


00:38:28.240 --> 00:38:30.520
So you're locked into having your data there


00:38:30.520 --> 00:38:33.280
and continuing to subscribe to a thing,


00:38:33.280 --> 00:38:36.880
which, you know, don't get me started on subscribing to so many things.


00:38:36.880 --> 00:38:44.040
I was suggested that I subscribe to my internet speed checker app.


00:38:44.040 --> 00:38:46.360
Not me, but like...


00:38:46.360 --> 00:38:48.360
Once an hour, you need to check, right?


00:38:48.360 --> 00:38:50.360
Yearly, I could subscribe to it.


00:38:50.360 --> 00:38:52.360
If I pay yearly for my speed checker,


00:38:52.360 --> 00:38:54.360
what are you doing?


00:38:54.360 --> 00:38:56.360
Too many things that are subscribed to. Anyway,


00:38:56.360 --> 00:38:58.360
not that subscriptions don't make sense for a lot of tools.


00:38:58.360 --> 00:39:00.360
But what I like about this is,


00:39:00.360 --> 00:39:02.360
like you said,


00:39:02.360 --> 00:39:04.360
you bring the data from wherever


00:39:04.360 --> 00:39:06.360
and you could do this out of a Postgres database


00:39:06.360 --> 00:39:08.360
and you build up a data frame


00:39:08.360 --> 00:39:10.360
and then you could throw into this visual place


00:39:10.360 --> 00:39:12.360
that speeds you up.


00:39:12.360 --> 00:39:14.360
And then what comes out the other end are more data frames.


00:39:14.360 --> 00:39:17.860
So you could even do multiple,


00:39:17.860 --> 00:39:20.260
maybe tell me this is true, it seems like you could,


00:39:20.260 --> 00:39:23.300
you could do some regular Python code,


00:39:23.300 --> 00:39:24.820
some Mido that generates


00:39:24.820 --> 00:39:26.660
a really interesting transformation,


00:39:26.660 --> 00:39:27.840
some more Python code,


00:39:27.840 --> 00:39:29.240
and then maybe another Mido block


00:39:29.240 --> 00:39:30.500
that takes another bit of output


00:39:30.500 --> 00:39:33.260
and then brings in more data, does other stuff.


00:39:33.260 --> 00:39:35.580
You can kind of mix and match throughout these,


00:39:35.580 --> 00:39:37.060
throughout the notebook.


00:39:37.060 --> 00:39:37.900
- Yeah, exactly.


00:39:37.900 --> 00:39:40.420
And actually, the other day we went on GitHub


00:39:40.420 --> 00:39:43.100
and we searched Mido sheet to see how people are using it.


00:39:43.100 --> 00:39:45.060
and you see people using it in that exact way


00:39:45.060 --> 00:39:46.940
where they're importing data,


00:39:46.940 --> 00:39:49.220
they then generate some code using Mido,


00:39:49.220 --> 00:39:50.340
and then they'll, you know,


00:39:50.340 --> 00:39:51.760
one of the things, admittedly,


00:39:51.760 --> 00:39:53.980
that the tool is maybe not the best at right now


00:39:53.980 --> 00:39:54.820
is graphing.


00:39:54.820 --> 00:39:57.120
We have, you know, we support creating basic graphs,


00:39:57.120 --> 00:39:59.980
but not changing the colors, changing the titles,


00:39:59.980 --> 00:40:00.820
all of that.


00:40:00.820 --> 00:40:01.660
So one thing that we see--


00:40:01.660 --> 00:40:04.340
- What UI frameworks do you support?


00:40:04.340 --> 00:40:07.580
Matplotlib, Plotly, Autigr? - We use Plotly.


00:40:07.580 --> 00:40:08.660
- Okay.


00:40:08.660 --> 00:40:10.980
- Yeah, so we generate Plotly code,


00:40:10.980 --> 00:40:12.980
which has great documentation.


00:40:12.980 --> 00:40:15.860
You can go in there, we give you a link,


00:40:15.860 --> 00:40:17.460
and you can go in and make your edits.


00:40:17.460 --> 00:40:20.380
But this is one of those places where generating Python code,


00:40:20.380 --> 00:40:22.260
and in this case, Plotly code,


00:40:22.260 --> 00:40:24.780
is super helpful for everybody involved.


00:40:24.780 --> 00:40:26.660
For us, it's helpful because we didn't have to


00:40:26.660 --> 00:40:29.660
recreate the Plotly library, which is massive.


00:40:29.660 --> 00:40:31.500
But for everybody else, it's also helpful


00:40:31.500 --> 00:40:35.980
because we didn't recreate the Plotly library,


00:40:35.980 --> 00:40:40.420
you are able to use the entire Plotly ecosystem,


00:40:40.420 --> 00:40:41.900
and you're not locked in at all.


00:40:41.900 --> 00:40:44.820
So for something like Alteryx,


00:40:44.820 --> 00:40:48.920
where you can use their graphing features


00:40:48.920 --> 00:40:51.700
and if they don't have the graphs that you wanna create,


00:40:51.700 --> 00:40:53.300
then you're kind of out of luck


00:40:53.300 --> 00:40:54.680
and you're 'cause you're locked in


00:40:54.680 --> 00:40:57.580
and there's not really an easy customizability path.


00:40:57.580 --> 00:41:00.780
But you own your Python code that Mido generates.


00:41:00.780 --> 00:41:02.180
So it's up to you to do whatever you want.


00:41:02.180 --> 00:41:05.660
- Yeah, I suspect you guys don't recommend this,


00:41:05.660 --> 00:41:09.380
but you technically could delete out in a lot of cases,


00:41:09.380 --> 00:41:11.960
the Mido bits after you generate your Python code


00:41:11.960 --> 00:41:13.840
and keep going like, okay, this was really helpful,


00:41:13.840 --> 00:41:16.080
but we actually don't need this anymore.


00:41:16.080 --> 00:41:20.040
There are cases where some of the Excel-like functions


00:41:20.040 --> 00:41:21.440
really come from you guys, right?


00:41:21.440 --> 00:41:24.060
But a lot of it is what is writing as pandas


00:41:24.060 --> 00:41:26.840
and NumPy and Plotly code, right?


00:41:26.840 --> 00:41:29.920
Just speaking to the lock-in or not the lock-in


00:41:29.920 --> 00:41:31.940
- Yeah. - at a story, right?


00:41:31.940 --> 00:41:34.440
- Yeah, I think we definitely support that.


00:41:34.440 --> 00:41:36.720
In Mido, actually, we have a button clear.


00:41:37.680 --> 00:41:40.120
Data analysis is all about very iterative,


00:41:40.120 --> 00:41:42.720
building your understanding of what is useful


00:41:42.720 --> 00:41:44.040
and where you want to go.


00:41:44.040 --> 00:41:47.280
So one of the actually the most commonly done things


00:41:47.280 --> 00:41:49.320
in the tool is actually clearing all of the edits


00:41:49.320 --> 00:41:51.760
that you've made to your analysis


00:41:51.760 --> 00:41:54.400
and getting rid of Mito now that you have that understanding


00:41:54.400 --> 00:41:56.280
and wanting to take it in another direction.


00:41:56.280 --> 00:42:00.080
I think we're a huge supporter-- well,


00:42:00.080 --> 00:42:03.280
we're big supporters in our own development process


00:42:03.280 --> 00:42:06.360
of cleaning your workspace.


00:42:06.360 --> 00:42:09.900
Nate is proud of how clean our code is.


00:42:09.900 --> 00:42:13.460
And if Mido isn't helpful for you right now,


00:42:13.460 --> 00:42:16.220
definitely get rid of it so you have an easy notebook


00:42:16.220 --> 00:42:17.820
to clean up and debug.


00:42:17.820 --> 00:42:20.300
- Yeah, I think that's a big contrast


00:42:20.300 --> 00:42:23.620
going to some other no-code SaaS system.


00:42:23.620 --> 00:42:27.740
There is no, I don't wanna use this exactly anymore,


00:42:27.740 --> 00:42:29.500
just let me carry on with my analysis.


00:42:29.500 --> 00:42:31.060
There's none of that in most of these tools.


00:42:31.060 --> 00:42:33.940
And with yours, I think it's there to support you


00:42:33.940 --> 00:42:35.500
and I can see it being incredibly valuable,


00:42:35.500 --> 00:42:38.340
but at the same time, it's not the essence


00:42:38.340 --> 00:42:39.180
of what you're doing.


00:42:39.180 --> 00:42:42.400
It's the UI on top of Python, as Jake likes to say.


00:42:42.400 --> 00:42:44.980
- Yeah, I was just gonna say to the point


00:42:44.980 --> 00:42:47.740
of deleting out the Mito sheets,


00:42:47.740 --> 00:42:49.780
we have a society of secret Mito users


00:42:49.780 --> 00:42:51.140
who are trying to convince their bosses


00:42:51.140 --> 00:42:53.660
that they're really good at Python to get a pay raise.


00:42:53.660 --> 00:42:57.300
So we support that workflow very, very well.


00:42:57.300 --> 00:42:58.420
- Exactly.


00:42:58.420 --> 00:43:00.820
So what are the challenges that you can have


00:43:00.820 --> 00:43:02.740
when you have a machine write code


00:43:02.740 --> 00:43:05.220
is that it writes bad code


00:43:05.220 --> 00:43:06.380
that's hard to understand.


00:43:06.380 --> 00:43:09.660
And Nate, it sounds like you might have had some input


00:43:09.660 --> 00:43:14.320
on this, that when you interact with Mido,


00:43:14.320 --> 00:43:15.460
you do certain operations.


00:43:15.460 --> 00:43:17.580
Like I do a filter, I create a pivot table,


00:43:17.580 --> 00:43:20.100
or I filter out certain things.


00:43:20.100 --> 00:43:22.100
It'll actually write step one, you did this,


00:43:22.100 --> 00:43:23.140
step two, you did that.


00:43:23.140 --> 00:43:26.340
And it writes what looks like pretty well-formatted


00:43:26.340 --> 00:43:28.340
Python code with little bits of documentation,


00:43:28.340 --> 00:43:30.940
like pivot the table, reset the column name and indexes,


00:43:30.940 --> 00:43:33.500
and stuff like, it'll even comment your code


00:43:33.500 --> 00:43:34.620
that it writes.


00:43:34.620 --> 00:43:35.460
You want to speak to that a little?


00:43:35.460 --> 00:43:36.260
Yeah, absolutely.


00:43:36.260 --> 00:43:42.820
I mean, this is a really interesting area that we've put a bunch of research time in, if you can call it that.


00:43:42.820 --> 00:43:46.980
So there's a couple things that I want to, I think, highlight here, and I'd love to also hear your thoughts on as well.


00:43:46.980 --> 00:43:48.140
So you're totally right.


00:43:48.140 --> 00:43:53.900
Machines writing code, it's all the rage these days in some ways with these fancy, you know, machine learning systems


00:43:53.900 --> 00:43:57.500
where you can write a little prompt and everything will get written for you.


00:43:57.500 --> 00:44:01.780
Mito takes a little bit of a different approach where exactly as you say, when you, for example, add a filter,


00:44:01.780 --> 00:44:05.180
It'll generate the line of code that corresponds to that filter.


00:44:05.180 --> 00:44:07.780
Of course, immediately, the question becomes,


00:44:07.780 --> 00:44:09.780
this is not exactly how I want the code to be.


00:44:09.780 --> 00:44:10.620
I didn't mean to do that.


00:44:10.620 --> 00:44:11.820
I meant to do something else.


00:44:11.820 --> 00:44:16.660
And so really, the way we think about it is giving the user that code in the cleanest way


00:44:16.660 --> 00:44:17.660
that we possibly can.


00:44:17.660 --> 00:44:21.700
So just as an example of this, if the user adds a column and then immediately after renames


00:44:21.700 --> 00:44:24.460
that column, a feature that we're actually releasing this week is that is going to get


00:44:24.460 --> 00:44:27.380
collapsed into just the adding of the column with the new name, right?


00:44:27.380 --> 00:44:27.940
>> Nice, yeah.


00:44:27.940 --> 00:44:31.100
>> That's ultimately what the user was intending to do.


00:44:31.100 --> 00:44:33.060
There's other more fancy things that you can do.


00:44:33.060 --> 00:44:35.580
You can start getting into kind of code optimization,


00:44:35.580 --> 00:44:37.500
where it's like you made a pivot table,


00:44:37.500 --> 00:44:39.140
then you overwrote the pivot table.


00:44:39.140 --> 00:44:41.540
And those are all things that we're definitely interested in


00:44:41.540 --> 00:44:43.780
and kind of are on the roadmap for improving.


00:44:43.780 --> 00:44:45.940
But generally, you're totally right.


00:44:45.940 --> 00:44:48.380
If we want users to be able to learn from this code,


00:44:48.380 --> 00:44:49.660
to be able to use this code,


00:44:49.660 --> 00:44:51.900
we need to generate clean semantic Python


00:44:51.900 --> 00:44:53.420
that really works in the wild


00:44:53.420 --> 00:44:54.900
and is actually editable by the users.


00:44:54.900 --> 00:44:56.540
Otherwise, it's just a blob,


00:44:56.540 --> 00:44:58.580
a mass that you can't actually interact with.


00:44:58.580 --> 00:44:59.540
- Yeah. - Yeah.


00:44:59.540 --> 00:45:00.380
- Yeah, well, you get it,


00:45:00.380 --> 00:45:02.580
but at least from the examples I've seen,


00:45:02.580 --> 00:45:04.020
I would be happy to take that


00:45:04.020 --> 00:45:05.980
and then start writing directly on that.


00:45:05.980 --> 00:45:07.700
Even though you don't see it on the screen,


00:45:07.700 --> 00:45:08.620
it's like right above,


00:45:08.620 --> 00:45:10.420
I scrolled it right a little bit off there,


00:45:10.420 --> 00:45:13.380
but it says, don't edit this section, this is Mido code.


00:45:13.380 --> 00:45:18.540
I guess that's if you still wanna be able to use Mido on it.


00:45:18.540 --> 00:45:20.620
- No, exactly. - Don't mess it up, right?


00:45:20.620 --> 00:45:22.140
- That's a feature we're working on this week


00:45:22.140 --> 00:45:23.900
is improving that communication.


00:45:23.900 --> 00:45:25.620
You can take Mido code and edit it


00:45:25.620 --> 00:45:26.700
and change it however you want.


00:45:26.700 --> 00:45:30.180
The only problem is might have trouble reinterpreting that


00:45:30.180 --> 00:45:32.220
if you try and then later replay an analysis.


00:45:32.220 --> 00:45:34.380
But that's also a work in progress.


00:45:34.380 --> 00:45:37.020
And ideally, the kind of perfect version


00:45:37.020 --> 00:45:39.860
of what we envision long-term,


00:45:39.860 --> 00:45:41.800
and maybe we'll get there, maybe this is impossible,


00:45:41.800 --> 00:45:44.380
but one really cool thing that we're kind of thinking about


00:45:44.380 --> 00:45:47.040
is edit a spreadsheet to generate Python,


00:45:47.040 --> 00:45:48.660
edit Python to generate a spreadsheet.


00:45:48.660 --> 00:45:51.660
- Yeah, I was thinking it could be bidirectional.


00:45:51.660 --> 00:45:52.740
That'd be fantastic, right?


00:45:52.740 --> 00:45:53.620
- Yeah, really cool.


00:45:53.620 --> 00:45:54.620
So really it's this world


00:45:54.620 --> 00:45:56.660
where you're really fluidly writing code


00:45:56.660 --> 00:45:57.580
and editing a spreadsheet.


00:45:57.580 --> 00:45:59.700
And if something's easier in code, go write the code.


00:45:59.700 --> 00:46:00.900
If something's easier in the spreadsheet,


00:46:00.900 --> 00:46:01.740
go write the spreadsheet.


00:46:01.740 --> 00:46:03.500
And that's definitely a vision that we've seen ourselves


00:46:03.500 --> 00:46:05.260
kind of realizing over time currently


00:46:05.260 --> 00:46:06.740
and something that, as you mentioned,


00:46:06.740 --> 00:46:08.620
you can go Mido, Python, Mido, Python,


00:46:08.620 --> 00:46:09.820
and do that currently.


00:46:09.820 --> 00:46:11.580
But making that easier for our users


00:46:11.580 --> 00:46:14.620
to really use the code in a dynamic and real way,


00:46:14.620 --> 00:46:18.040
as you would any other Python code that you write,


00:46:18.040 --> 00:46:20.060
is definitely something that we're actively investing in


00:46:20.060 --> 00:46:21.700
right now and really trying to improve.


00:46:21.700 --> 00:46:22.540
- Nice.


00:46:22.540 --> 00:46:24.620
Yeah, I like the idea of being able to


00:46:24.620 --> 00:46:27.800
have it do some optimizations rather than create a variable


00:46:27.800 --> 00:46:30.140
and then overwrite the variable with some other thing,


00:46:30.140 --> 00:46:31.820
you know, just do it all at once.


00:46:31.820 --> 00:46:33.720
I'm sure there's a ton of stuff in Pandas


00:46:33.720 --> 00:46:36.240
that could be done better


00:46:36.240 --> 00:46:39.360
rather than like a really naive, straightforward,


00:46:39.360 --> 00:46:40.960
like multi-step stage, right?


00:46:40.960 --> 00:46:42.480
- Yeah, and the other thing I will say


00:46:42.480 --> 00:46:46.400
is the one benefit actually to generating this code


00:46:46.400 --> 00:46:50.020
is that, and not to insult anyone


00:46:50.020 --> 00:46:51.640
because I'm the biggest offender of this,


00:46:51.640 --> 00:46:53.880
but most data science scripts you see in the wild


00:46:53.880 --> 00:46:57.160
are not the pinnacle of clean, well-kept code.


00:46:57.160 --> 00:46:59.740
It's usually out-of-order notebooks where,


00:46:59.740 --> 00:47:01.160
because it's such a dynamic process,


00:47:01.160 --> 00:47:02.300
it's just very hard in practice


00:47:02.300 --> 00:47:03.840
to keep these things well-organized.


00:47:03.840 --> 00:47:05.920
And so actually what we can do in practice


00:47:05.920 --> 00:47:08.600
is generate some documentation for what's happening


00:47:08.600 --> 00:47:10.700
and help users save and manage these scripts


00:47:10.700 --> 00:47:13.760
in a more linear and organized way, et cetera,


00:47:13.760 --> 00:47:16.120
and help users kind of adopt these best practices.


00:47:16.120 --> 00:47:16.960
And that's sort of the stuff


00:47:16.960 --> 00:47:18.840
that we've been exploring recently.


00:47:18.840 --> 00:47:21.120
And Aaron was actually working on some of this today,


00:47:21.120 --> 00:47:22.560
improving some of this code generation stuff.


00:47:22.560 --> 00:47:25.080
but it's not the highest of bars to meet.


00:47:25.080 --> 00:47:26.860
And we definitely think that we can, you know,


00:47:26.860 --> 00:47:28.200
continue to improve and surpass that


00:47:28.200 --> 00:47:29.360
and make sure that the code we're generating


00:47:29.360 --> 00:47:30.880
is really great, great stuff.


00:47:30.880 --> 00:47:32.400
Stuff you'd be happy to edit.


00:47:32.400 --> 00:47:33.960
- One thing that while I'm looking at it,


00:47:33.960 --> 00:47:35.120
let's just throw this out of here,


00:47:35.120 --> 00:47:38.120
as a piece of feedback with very little actual experience.


00:47:38.120 --> 00:47:40.240
So take it for what the grain of salt is.


00:47:40.240 --> 00:47:42.120
You've got like step one, step two, step three.


00:47:42.120 --> 00:47:44.520
It'd be cool if those were actually separate cells.


00:47:44.520 --> 00:47:46.380
So like at the end of say step three,


00:47:46.380 --> 00:47:48.800
I could do like a pivot table dot head or something


00:47:48.800 --> 00:47:50.640
just to like sort of touch on it


00:47:50.640 --> 00:47:52.040
and explore it a little bit.


00:47:52.040 --> 00:47:53.440
along there.


00:47:53.440 --> 00:47:54.800
Yeah, no, definitely.


00:47:54.800 --> 00:47:57.000
And a similar thing that we've also certainly thought of


00:47:57.000 --> 00:47:59.800
that multi-cell approach would enable is,


00:47:59.800 --> 00:48:01.640
you know, changing the order of steps,


00:48:01.640 --> 00:48:02.760
switching things around and saying,


00:48:02.760 --> 00:48:04.440
oh, I actually want to filter first and then pivot


00:48:04.440 --> 00:48:06.120
versus pivoting and then filtering.


00:48:06.120 --> 00:48:08.000
Yeah, certainly on the roadmap,


00:48:08.000 --> 00:48:09.360
but definitely something we want to do,


00:48:09.360 --> 00:48:12.000
giving users more options on how they actually export this code


00:48:12.000 --> 00:48:14.000
and what they do with it at the end.


00:48:14.000 --> 00:48:16.000
Yeah, super neat.


00:48:16.000 --> 00:48:18.760
We've got a question out here that kind of leads into


00:48:18.760 --> 00:48:20.240
where I was going to go with this anyway,


00:48:20.240 --> 00:48:23.680
I'm gonna switch the order so I don't cover your head, Jake.


00:48:23.680 --> 00:48:28.160
Spawn also asked, does Mito support switching


00:48:28.160 --> 00:48:31.600
or switching from or to or using Dask?


00:48:31.600 --> 00:48:36.440
- Gotcha.


00:48:36.440 --> 00:48:38.060
- Yeah.


00:48:38.060 --> 00:48:39.880
- Not currently, no.


00:48:39.880 --> 00:48:42.520
So the one really cool thing is because of the Mito,


00:48:42.520 --> 00:48:43.660
the way Mito works internally,


00:48:43.660 --> 00:48:45.160
which is something we can definitely get into


00:48:45.160 --> 00:48:46.940
depending on if you think your audience


00:48:46.940 --> 00:48:48.780
would be interested in it, what the appetite is.


00:48:48.780 --> 00:48:52.520
but we really have the ability to switch out,


00:48:52.520 --> 00:48:56.320
let's say, what the back ends is of Mido.


00:48:56.320 --> 00:48:58.120
Kind of what code do we actually end up generating


00:48:58.120 --> 00:49:00.020
is something that we can leave up in the air.


00:49:00.020 --> 00:49:02.680
And really our interface can be a more general thing


00:49:02.680 --> 00:49:05.120
than just Python code or just pandas and Python code.


00:49:05.120 --> 00:49:06.880
- Yeah, especially for these frameworks


00:49:06.880 --> 00:49:11.240
that are near compatible, API compatible with pandas, right?


00:49:11.240 --> 00:49:12.120
- Yeah, exactly.


00:49:12.120 --> 00:49:14.000
Like I think Dask is almost exactly.


00:49:14.000 --> 00:49:16.520
And for most of the basic operations,


00:49:16.520 --> 00:49:18.360
they've aligned on the pandas UI,


00:49:18.360 --> 00:49:23.360
the pandas API just for how to kind of handle things.


00:49:23.360 --> 00:49:25.000
And so it's definitely something that in the future,


00:49:25.000 --> 00:49:26.320
we could support.


00:49:26.320 --> 00:49:28.960
And if we have users who are working with huge datasets


00:49:28.960 --> 00:49:30.440
and need Dask, then it's definitely something


00:49:30.440 --> 00:49:31.880
we'd be interested in learning about.


00:49:31.880 --> 00:49:34.520
- I think Dask is, Dask, when I first think of Dask,


00:49:34.520 --> 00:49:39.200
I think large clusters, massively scaled out data,


00:49:39.200 --> 00:49:41.660
but then at the same time, right over here,


00:49:41.660 --> 00:49:46.660
I have my MacBook Pro Max, which has 10 cores on it.


00:49:47.520 --> 00:49:51.640
And when I run Python code, I get 10% of that CPU, right?


00:49:51.640 --> 00:49:54.160
And Dask will allow you to scale across your CPUs,


00:49:54.160 --> 00:49:56.100
even on your local machine, right?


00:49:56.100 --> 00:49:57.720
Or scale larger than your memory and stuff.


00:49:57.720 --> 00:49:58.920
And so I feel like it's,


00:49:58.920 --> 00:50:03.520
Dask, even for just making your local work go better,


00:50:03.520 --> 00:50:06.840
is actually probably under realized or underutilized.


00:50:06.840 --> 00:50:08.700
- That's super cool.


00:50:08.700 --> 00:50:13.560
Yeah, no, it's interesting that the range of dataset sizes


00:50:13.560 --> 00:50:15.240
that we actually see in practice,


00:50:16.200 --> 00:50:19.080
It's very, I would say, at least from my observations,


00:50:19.080 --> 00:50:20.120
and Aaron, Jake, feel free to hop in on this,


00:50:20.120 --> 00:50:22.480
but it's like very bimodal in that there's a lot of people


00:50:22.480 --> 00:50:23.920
hanging out with 100,000 rows,


00:50:23.920 --> 00:50:24.960
and then there's some people that are like,


00:50:24.960 --> 00:50:29.040
hey, I have 100 million records I'm looking to analyze.


00:50:29.040 --> 00:50:32.600
And we're like, well, good luck on your 2012 MacBook,


00:50:32.600 --> 00:50:34.800
you know what I got, it's gonna take a bit.


00:50:34.800 --> 00:50:36.400
(laughing)


00:50:36.400 --> 00:50:37.240
- Get a coffee.


00:50:37.240 --> 00:50:39.560
- Chill out, go to sleep, wake up tomorrow,


00:50:39.560 --> 00:50:41.760
hope it hasn't crashed, I think is the general strategy.


00:50:41.760 --> 00:50:44.960
- So that does lead me towards my final two little areas


00:50:44.960 --> 00:50:48.000
I want to speak about before we run out of time here.


00:50:48.000 --> 00:50:52.040
Now, on one hand, this is just writing Python code.


00:50:52.040 --> 00:50:55.240
So its performance and its limitations


00:50:55.240 --> 00:50:59.360
are what effectively pandas can deal with, right?


00:50:59.360 --> 00:51:01.440
On the other, it is showing that stuff


00:51:01.440 --> 00:51:02.840
and allowing you to sort it visually.


00:51:02.840 --> 00:51:04.360
So there might be some constraints


00:51:04.360 --> 00:51:07.360
on like amount of data you can work with.


00:51:07.360 --> 00:51:10.100
What's the data size story?


00:51:10.100 --> 00:51:13.680
- It's a great question.


00:51:13.680 --> 00:51:16.440
We have a release coming out within the next two weeks.


00:51:16.440 --> 00:51:18.520
Generally, here's our motto.


00:51:18.520 --> 00:51:20.900
We obviously, we're providing a visual interface.


00:51:20.900 --> 00:51:22.320
There's gonna be a little bit of overhead,


00:51:22.320 --> 00:51:24.480
but the way we like to think about what we do


00:51:24.480 --> 00:51:27.240
is that it's a tiny little bit of flat overhead,


00:51:27.240 --> 00:51:28.720
no matter how big your data is.


00:51:28.720 --> 00:51:29.560
- Okay.


00:51:29.560 --> 00:51:30.480
- And in practice--


00:51:30.480 --> 00:51:31.840
- For example, you won't try to show


00:51:31.840 --> 00:51:34.440
the entire 100 million rows in a grid,


00:51:34.440 --> 00:51:38.000
or like you'll do some sort of virtual lazy load list


00:51:38.000 --> 00:51:38.820
or something like that?


00:51:38.820 --> 00:51:39.800
- Exactly, a lazy load list.


00:51:39.800 --> 00:51:41.980
And we actually have a lazy load of the entire data set.


00:51:41.980 --> 00:51:42.960
That's a feature coming out


00:51:42.960 --> 00:51:44.040
within the next two weeks or so.


00:51:44.040 --> 00:51:44.880
It's all written.


00:51:44.880 --> 00:51:47.400
We just got to test it a bit better in the wild.


00:51:47.400 --> 00:51:51.320
But yeah, effectively, we're a very thin wrapper


00:51:51.320 --> 00:51:53.140
on top of Pandas functionality.


00:51:53.140 --> 00:51:55.440
And in practice, what that means is anything you can do


00:51:55.440 --> 00:51:57.560
in Pandas, you should be able to do in Mito


00:51:57.560 --> 00:51:59.880
from a dataset size perspective.


00:51:59.880 --> 00:52:01.020
It's something that was very important to us,


00:52:01.020 --> 00:52:03.000
especially because a lot of our users are in Python


00:52:03.000 --> 00:52:05.040
because of dataset size limitations in the first place,


00:52:05.040 --> 00:52:06.680
as I think Jake mentioned.


00:52:06.680 --> 00:52:08.260
- Yeah, yeah, that's a good point.


00:52:08.260 --> 00:52:09.920
- This is something that we've spent a lot of time on.


00:52:09.920 --> 00:52:13.600
we were previously using a G grid as our


00:52:13.600 --> 00:52:15.300
like actual display unit.


00:52:15.300 --> 00:52:16.500
And it just wasn't,


00:52:16.500 --> 00:52:19.900
they didn't combination of probably us not


00:52:19.900 --> 00:52:22.720
implementing it a hundred percent how they might implement it


00:52:22.720 --> 00:52:25.120
and you know, them not optimizing for


00:52:25.120 --> 00:52:27.760
these ginormous data sense, data sets.


00:52:27.760 --> 00:52:30.060
They in particular just spent a huge amount of time


00:52:30.060 --> 00:52:32.260
recreating the entire grid from scratch.


00:52:32.260 --> 00:52:34.620
So we could have complete customizability over it


00:52:34.620 --> 00:52:37.380
and show as much as much data as possible.


00:52:37.380 --> 00:52:38.220
- Nice.


00:52:38.220 --> 00:52:39.040
Sometimes you got to do that, right?


00:52:39.040 --> 00:52:42.880
Like this control is amazing, but we've outgrown it


00:52:42.880 --> 00:52:45.540
and bite the bullet and just do it right.


00:52:45.540 --> 00:52:48.040
- Exactly.


00:52:48.040 --> 00:52:52.480
- Yeah, now, interesting question from Samir out there.


00:52:52.480 --> 00:52:54.620
Hey Samir, can I use Mido and VS Code?


00:52:54.620 --> 00:52:58.040
And I'll sort of expand to that just a little bit.


00:52:58.040 --> 00:53:01.640
Can I use it in some of these other tools


00:53:01.640 --> 00:53:03.080
that are not exactly notebooks?


00:53:03.080 --> 00:53:06.440
So we've got VS Code has its kind of own way


00:53:06.440 --> 00:53:07.960
of presenting and showing notebooks.


00:53:07.960 --> 00:53:10.760
We've got PyCharm and we've got Dataspel,


00:53:10.760 --> 00:53:15.120
which is JetBrains new data science IDE thing.


00:53:15.120 --> 00:53:17.580
What's the story with these environments?


00:53:17.580 --> 00:53:22.760
- So unfortunately right now,


00:53:22.760 --> 00:53:25.000
Mido only works in JupyterLab.


00:53:25.000 --> 00:53:29.920
But this question is something that comes up all the time.


00:53:29.920 --> 00:53:31.880
I think the places we hear the most interest


00:53:31.880 --> 00:53:33.940
are at VS Code and Google Collab.


00:53:36.160 --> 00:53:39.000
And we're definitely excited and really want to support


00:53:39.000 --> 00:53:40.200
those environments as well.


00:53:40.200 --> 00:53:42.200
And I think we've done a lot of work internally


00:53:42.200 --> 00:53:46.800
on how we design Mito to make it extendable.


00:53:46.800 --> 00:53:50.480
It's now-- we have a lot of this functionality


00:53:50.480 --> 00:53:52.140
that we're trying to pack into the tool.


00:53:52.140 --> 00:53:54.720
And then handling these new environments


00:53:54.720 --> 00:53:57.320
is a decent amount of development work as well.


00:53:57.320 --> 00:53:59.360
So it's all a prioritization game at this point.


00:53:59.360 --> 00:54:04.240
But yeah, so short answer is we don't support them now.


00:54:04.240 --> 00:54:06.820
but in the future we definitely will.


00:54:06.820 --> 00:54:07.740
- Cool, all right.


00:54:07.740 --> 00:54:09.920
Two other areas quickly I wanna touch on.


00:54:09.920 --> 00:54:11.280
One, tell us a little bit about


00:54:11.280 --> 00:54:13.840
how this is implemented internally.


00:54:13.840 --> 00:54:16.640
I think it, I don't know how it's implemented,


00:54:16.640 --> 00:54:18.360
but I'm guessing that it's somewhat


00:54:18.360 --> 00:54:19.680
like a lot of Jupyter stuff.


00:54:19.680 --> 00:54:21.560
Like I wanna do Jupyter things for Python,


00:54:21.560 --> 00:54:23.040
but I gotta write them in JavaScript.


00:54:23.040 --> 00:54:25.200
Is that the story here as well?


00:54:25.200 --> 00:54:26.160
- You nailed it, you nailed it.


00:54:26.160 --> 00:54:28.480
Actually, your earlier comment of,


00:54:28.480 --> 00:54:31.120
imagine it's just like a slidey widget


00:54:31.120 --> 00:54:33.660
that you can use in a graph in JupyterLab was spot on.


00:54:33.660 --> 00:54:35.540
the IPy interactive widget or whatever.


00:54:35.540 --> 00:54:39.060
- We are actually just a very fancy IPy interactive widget,


00:54:39.060 --> 00:54:39.900
believe it or not.


00:54:39.900 --> 00:54:40.740
- Okay.


00:54:40.740 --> 00:54:41.560
- Yeah.


00:54:41.560 --> 00:54:42.400
- Yeah, it's fantastic.


00:54:42.400 --> 00:54:43.860
- So in practice, how that actually works


00:54:43.860 --> 00:54:45.220
for your audience, if they're interested,


00:54:45.220 --> 00:54:46.860
is there's kind of two pieces to your code base.


00:54:46.860 --> 00:54:49.540
There's a JavaScript front end


00:54:49.540 --> 00:54:51.420
and there's a Python back end.


00:54:51.420 --> 00:54:53.460
The JavaScript front end is the sheet that you see.


00:54:53.460 --> 00:54:54.780
It's the buttons that you click.


00:54:54.780 --> 00:54:56.280
And what that actually does is it just,


00:54:56.280 --> 00:54:58.660
it's a very thin wrapper that just then sends a message


00:54:58.660 --> 00:55:01.180
to this MitoSheet Python package in the back and says,


00:55:01.180 --> 00:55:04.560
"Hey, I just clicked this add column button.


00:55:04.560 --> 00:55:07.100
"You should add a column, excuse me, to this data frame."


00:55:07.100 --> 00:55:09.760
And then that Python processes that message


00:55:09.760 --> 00:55:11.040
and then responds to the front end and says,


00:55:11.040 --> 00:55:12.980
"Okay, great, display the new data frame


00:55:12.980 --> 00:55:15.180
"and also write this code to the cell below."


00:55:15.180 --> 00:55:17.560
And that's kind of the high level of what happens there.


00:55:17.560 --> 00:55:20.560
It gets, as you can say, more complex than the nitty gritty.


00:55:20.560 --> 00:55:22.840
We're in practice, we're a React code base.


00:55:22.840 --> 00:55:25.240
We use TypeScript because we like strong typing.


00:55:25.240 --> 00:55:27.080
And we kind of--


00:55:27.080 --> 00:55:29.020
- You use type annotations on your Python side?


00:55:29.020 --> 00:55:32.220
We are gradually adding them to our code base.


00:55:32.220 --> 00:55:34.180
We don't currently type check, actually.


00:55:34.180 --> 00:55:36.740
We mostly use them as IDE support to make things easier.


00:55:36.740 --> 00:55:38.220
- That's the main thing I use them for as well,


00:55:38.220 --> 00:55:41.500
because a lot of times the IDEs will show you the errors


00:55:41.500 --> 00:55:43.220
if you make them anyway, right?


00:55:43.220 --> 00:55:44.180
- Yeah, yeah.


00:55:44.180 --> 00:55:45.900
No, you definitely, you get some support,


00:55:45.900 --> 00:55:48.900
but Pandas, I'll say Pandas typing support,


00:55:48.900 --> 00:55:50.620
obviously Pandas is the main library we interact with,


00:55:50.620 --> 00:55:52.940
is not, it's not perfect in all cases.


00:55:52.940 --> 00:55:55.900
It's a very complex library, so, you know, for sure.


00:55:55.900 --> 00:55:58.540
But effectively, in those cases, things kind of break down


00:55:58.540 --> 00:56:01.120
and the errors that you get are maybe sometimes false positives,


00:56:01.120 --> 00:56:02.380
sometimes false negatives,


00:56:02.380 --> 00:56:04.220
and you can shoot yourself in the foot sometimes.


00:56:04.220 --> 00:56:05.880
Yeah, interesting. Okay, so it's a blend.


00:56:05.880 --> 00:56:08.980
It's the JavaScript, React, TypeScript front end,


00:56:08.980 --> 00:56:10.480
and then Python back end.


00:56:10.480 --> 00:56:12.180
Yep, yeah, exactly.


00:56:12.180 --> 00:56:14.560
And that question of that,


00:56:14.560 --> 00:56:16.560
let's say that stratification and that architecture,


00:56:16.560 --> 00:56:18.020
that's exactly what's going to have to evolve


00:56:18.020 --> 00:56:19.520
as we kind of move into other places


00:56:19.520 --> 00:56:22.820
like Google Colab, VS Code, et cetera.


00:56:22.820 --> 00:56:25.200
They all have slightly different extension architectures.


00:56:25.200 --> 00:56:26.700
And so architecting our code bases


00:56:26.700 --> 00:56:34.120
So these things are separatable and reconfigurable and in the ways that other data science environments


00:56:34.120 --> 00:56:37.220
expect is something that we've kind of been trying to do.


00:56:37.220 --> 00:56:43.200
But you know, a plea to everyone who's developing data science IDEs, settle on one extension


00:56:43.200 --> 00:56:44.200
environment please.


00:56:44.200 --> 00:56:46.940
I know it's never going to happen, but it'd be really nice for us extension developers.


00:56:46.940 --> 00:56:47.940
We'd love it for sure.


00:56:47.940 --> 00:56:48.940
Right.


00:56:48.940 --> 00:56:49.940
Or making an adapter.


00:56:49.940 --> 00:56:50.940
Yeah.


00:56:50.940 --> 00:56:54.980
If somebody created things that if you have a Jupyter UI and you want to put in Google


00:56:54.980 --> 00:56:58.020
you just insert this thing and talk to it


00:56:58.020 --> 00:56:59.100
and then magic happens.


00:56:59.100 --> 00:57:01.220
- Yeah, shims when they work are great.


00:57:01.220 --> 00:57:03.100
So if someone's done that, let us know,


00:57:03.100 --> 00:57:06.300
please reach out and we'd really appreciate it.


00:57:06.300 --> 00:57:08.200
- Yeah, yeah, super cool.


00:57:08.200 --> 00:57:09.780
All right, let's see.


00:57:09.780 --> 00:57:11.300
Another thing I do wanna make sure


00:57:11.300 --> 00:57:14.560
that we touch on a little bit is up here at the top,


00:57:14.560 --> 00:57:16.440
I see plans.


00:57:16.440 --> 00:57:20.980
And so this is not for every possible use case


00:57:20.980 --> 00:57:21.860
of free tool, right?


00:57:21.860 --> 00:57:25.220
you have a free version and you have a higher order


00:57:25.220 --> 00:57:26.500
paid version for Teams,


00:57:26.500 --> 00:57:28.740
if I'm understanding that correctly, right?


00:57:28.740 --> 00:57:31.220
>> So we have, Mito is a free community tool.


00:57:31.220 --> 00:57:34.500
We have free users, 90 whatever percent of our users are free


00:57:34.500 --> 00:57:36.020
for an end user, please download it.


00:57:36.020 --> 00:57:38.380
You know, you can, you can pivot solve and it's free.


00:57:38.380 --> 00:57:41.540
We work with some larger organizations


00:57:41.540 --> 00:57:45.380
in sort of more bespoke manner doing custom development,


00:57:45.380 --> 00:57:49.100
custom integration, and those are those payment happening


00:57:49.100 --> 00:57:51.300
there sometimes with some of those larger enterprises


00:57:51.300 --> 00:57:53.480
What we're building out now is sort of that middle piece


00:57:53.480 --> 00:57:56.160
where we want to have sort of a plan for teams,


00:57:56.160 --> 00:57:57.840
maybe with some better security,


00:57:57.840 --> 00:58:00.200
some pre-development hours, things like that.


00:58:00.200 --> 00:58:01.860
That business model is evolving,


00:58:01.860 --> 00:58:02.700
but we'll probably be,


00:58:02.700 --> 00:58:04.600
what we want is a SaaS model there


00:58:04.600 --> 00:58:07.600
where you're paying 10 bucks a month or something.


00:58:07.600 --> 00:58:09.720
But also-- - It does seem like


00:58:09.720 --> 00:58:12.400
some kind of online system.


00:58:12.400 --> 00:58:14.920
I mean, you go to Jupyter through a browser anyway,


00:58:14.920 --> 00:58:17.240
some kind of system that's like really already configured


00:58:17.240 --> 00:58:19.880
'cause you're helping people come into Python


00:58:19.880 --> 00:58:22.880
who probably don't totally wanna pip install


00:58:22.880 --> 00:58:26.000
and manage their path and activate virtual environments


00:58:26.000 --> 00:58:26.960
and all those kinds of things, right?


00:58:26.960 --> 00:58:27.800
- Yeah.


00:58:27.800 --> 00:58:30.400
- That kind of like really help them there, right?


00:58:30.400 --> 00:58:31.760
- Totally, and that's one of the things we do


00:58:31.760 --> 00:58:33.280
when we work with some of these larger enterprises


00:58:33.280 --> 00:58:35.240
is help them with the setup of their Drupal


00:58:35.240 --> 00:58:37.240
to help environment, help them get the package they need,


00:58:37.240 --> 00:58:39.040
help them get Mito installed, obviously.


00:58:39.040 --> 00:58:40.680
But I was just gonna say to viewers,


00:58:40.680 --> 00:58:41.840
we're definitely looking to partner


00:58:41.840 --> 00:58:43.320
with more organizations or teams


00:58:43.320 --> 00:58:44.920
if anyone wants to reach out and make my email


00:58:44.920 --> 00:58:47.120
or something will be in like somewhere.


00:58:47.120 --> 00:58:49.200
- Yeah, yeah, we'll put your contact information


00:58:49.200 --> 00:58:51.240
- Sounds good, but yeah, we're definitely,


00:58:51.240 --> 00:58:52.380
we're looking to work with teams right now


00:58:52.380 --> 00:58:54.800
as we have a really good, a really strong user base.


00:58:54.800 --> 00:58:56.920
- Yeah, cool, cool.


00:58:56.920 --> 00:59:00.440
So, I'm glad that you guys have some kind of business model


00:59:00.440 --> 00:59:02.200
because a lot of these things, they come


00:59:02.200 --> 00:59:04.700
and then people kind of lose interest and then they go


00:59:04.700 --> 00:59:07.920
and there's a real big difference of,


00:59:07.920 --> 00:59:09.780
this is my job and my investment,


00:59:09.780 --> 00:59:11.060
so I'm really gonna work on it


00:59:11.060 --> 00:59:13.340
versus this is a thing I'm kind of excited about


00:59:13.340 --> 00:59:14.600
for a few months, so.


00:59:14.600 --> 00:59:17.740
It's cool you got a free plan for people to use,


00:59:17.740 --> 00:59:18.640
that's awesome.


00:59:18.640 --> 00:59:21.040
It's also cool that there's a path to support


00:59:21.040 --> 00:59:23.040
to just make it better.


00:59:23.040 --> 00:59:24.080
- Yeah, yeah, definitely.


00:59:24.080 --> 00:59:26.000
We're here for the long haul.


00:59:26.000 --> 00:59:30.800
- The other thing I'll add here is it's,


00:59:30.800 --> 00:59:33.240
and I in no way mean this on a knock


00:59:33.240 --> 00:59:35.580
on the like hundreds of amazing data science tools


00:59:35.580 --> 00:59:37.760
that are out there, but, excuse me, sorry.


00:59:37.760 --> 00:59:41.280
There's, I think like this level of polish


00:59:41.280 --> 00:59:45.920
that we really feel a desire to reach with our tool.


00:59:45.920 --> 00:59:47.880
It's like that kind of,


00:59:47.880 --> 00:59:49.720
When you're delivering a tool to a paying customer,


00:59:49.720 --> 00:59:51.080
there's often a different expectation


00:59:51.080 --> 00:59:52.200
that comes from the paying customer.


00:59:52.200 --> 00:59:54.440
And we do our very best to hold ourselves


00:59:54.440 --> 00:59:55.800
to the highest standard possible,


00:59:55.800 --> 00:59:58.000
but when someone who's paying you reaches out and says,


00:59:58.000 --> 01:00:00.880
"Hey, this button doesn't look the way it should,"


01:00:00.880 --> 01:00:02.200
that extra level of polish


01:00:02.200 --> 01:00:03.960
really kind of kicks the tool over the edge,


01:00:03.960 --> 01:00:05.880
and all of that feature development


01:00:05.880 --> 01:00:08.360
ends up getting pushed back to the individual users.


01:00:08.360 --> 01:00:11.040
And so really, the free users, I'll say,


01:00:11.040 --> 01:00:12.720
and most of the people who use our tool.


01:00:12.720 --> 01:00:14.800
And so really, we're trying to build the best tool


01:00:14.800 --> 01:00:15.640
that we can here,


01:00:15.640 --> 01:00:19.040
and making sure that we can do that sustainably long-term


01:00:19.040 --> 01:00:21.580
and really invest in what we're doing


01:00:21.580 --> 01:00:22.960
and build a team around it is something


01:00:22.960 --> 01:00:25.080
that really is necessary if we're gonna deliver


01:00:25.080 --> 01:00:26.800
on what we think we can and the promise here.


01:00:26.800 --> 01:00:27.680
- Yeah. - Cool.


01:00:27.680 --> 01:00:30.360
- Another nice thing about the paying users


01:00:30.360 --> 01:00:32.360
is just that we get to work


01:00:32.360 --> 01:00:33.800
in a much more close relationship with them.


01:00:33.800 --> 01:00:36.920
So there's a lot, that's where we get to zone in


01:00:36.920 --> 01:00:39.760
on specific use cases around financial services


01:00:39.760 --> 01:00:41.440
or around bio-research.


01:00:41.440 --> 01:00:44.840
So we've gotten to work on specific features


01:00:44.840 --> 01:00:47.040
and specific workloads that we definitely wouldn't otherwise


01:00:47.040 --> 01:00:48.720
that I think to Nate's point are gonna really benefit


01:00:48.720 --> 01:00:50.040
everyone who uses the tool.


01:00:50.040 --> 01:00:51.600
- Yeah, very cool.


01:00:51.600 --> 01:00:54.440
I'm fascinated with the different ways people are working


01:00:54.440 --> 01:00:56.200
and operating in open source space


01:00:56.200 --> 01:00:58.640
or building on top of open source tools


01:00:58.640 --> 01:01:00.120
to create businesses.


01:01:00.120 --> 01:01:03.040
We've got the Anacondas, we've got the MongoDBs


01:01:03.040 --> 01:01:04.320
and stuff out there.


01:01:04.320 --> 01:01:06.080
So yeah, good luck to you guys.


01:01:06.080 --> 01:01:08.160
I'd like to see you succeed here.


01:01:08.160 --> 01:01:09.400
- Thanks, appreciate it.


01:01:09.400 --> 01:01:10.240
- Yeah, thanks so much.


01:01:10.240 --> 01:01:12.120
And then the last thing I'll say is,


01:01:12.120 --> 01:01:15.120
We do our best to give back to open source tools as well,


01:01:15.120 --> 01:01:16.280
especially the ones that we work on.


01:01:16.280 --> 01:01:18.640
So you'll see me sometimes being annoying


01:01:18.640 --> 01:01:19.600
opening issues on GitHub.


01:01:19.600 --> 01:01:21.960
And I think that's another big piece of this


01:01:21.960 --> 01:01:23.320
is as we build on open source tools,


01:01:23.320 --> 01:01:24.680
making sure we contribute back to them


01:01:24.680 --> 01:01:26.440
in ways that are meaningful and actually helpful


01:01:26.440 --> 01:01:28.160
is certainly really important as well.


01:01:28.160 --> 01:01:30.720
And definitely something to say.


01:01:30.720 --> 01:01:31.560
- Yeah, fantastic.


01:01:31.560 --> 01:01:32.880
- Something to explicitly say.


01:01:32.880 --> 01:01:35.240
- All right, well, I think that's about it


01:01:35.240 --> 01:01:37.560
for the time that we have to talk about


01:01:37.560 --> 01:01:40.240
extending notebooks and Mido and all this.


01:01:40.240 --> 01:01:41.760
Really cool stuff that you all built.


01:01:41.760 --> 01:01:44.060
Before I let you out of here, there's the final two questions.


01:01:44.060 --> 01:01:47.500
And however many, in what order and whatnot you want to take this,


01:01:47.500 --> 01:01:48.500
just jump on in.


01:01:48.500 --> 01:01:53.300
Notable PyPI package out there, something you've come across,


01:01:53.300 --> 01:01:55.900
like, "Oh, this library is awesome. It doesn't get enough attention."


01:01:55.900 --> 01:01:57.760
Anything come to mind?


01:01:57.760 --> 01:02:02.000
Yes, honestly, something that a lot of our users use,


01:02:02.000 --> 01:02:03.440
and Jake, actually, feel free to hop in after me,


01:02:03.440 --> 01:02:05.300
but I would say pandas profiling.


01:02:05.300 --> 01:02:07.740
It's a tool that does somewhat similar stuff to us,


01:02:07.740 --> 01:02:10.400
but it's a super great tool for many of our users,


01:02:10.400 --> 01:02:11.760
and I don't think a ton of people know about it.


01:02:11.760 --> 01:02:13.760
And it works right in JupyterLab as well.


01:02:13.760 --> 01:02:16.800
- And one thing that's cool,


01:02:16.800 --> 01:02:18.800
there's a package called Lux, which is cool.


01:02:18.800 --> 01:02:20.840
I don't even know if it's actually still being supported


01:02:20.840 --> 01:02:24.360
or developed at all, but I read lots of blogs about that.


01:02:24.360 --> 01:02:25.760
So you look up Lux Python.


01:02:25.760 --> 01:02:32.840
It's cool, it does like automatic graph suggestions.


01:02:32.840 --> 01:02:36.080
So you can pass in a data frame and it'll suggest,


01:02:36.080 --> 01:02:38.040
it'll sort of give you options of visualizations


01:02:38.040 --> 01:02:39.040
to just click on and use,


01:02:39.040 --> 01:02:41.040
which I think is a really quick thing.


01:02:41.040 --> 01:02:43.760
You know, it's not the most like, why fully fledged package,


01:02:43.760 --> 01:02:45.600
but for what it does, I think it's really good.


01:02:45.600 --> 01:02:47.560
- It's these little things that people don't know about.


01:02:47.560 --> 01:02:48.480
They're like, oh, that's cool.


01:02:48.480 --> 01:02:49.440
I'm gonna go check this out.


01:02:49.440 --> 01:02:50.260
It might help you.


01:02:50.260 --> 01:02:53.520
Python API for intelligent visual discovery.


01:02:53.520 --> 01:02:54.540
I love it.


01:02:54.540 --> 01:02:55.480
Thanks.


01:02:55.480 --> 01:02:57.060
Aaron, got any ideas?


01:02:57.060 --> 01:03:00.160
- I might not fit the exact mold,


01:03:00.160 --> 01:03:03.840
but we're really close and we love the deep note product.


01:03:03.840 --> 01:03:06.000
Like it's pushing notebooks forward.


01:03:06.000 --> 01:03:10.280
So trying to add collaboration, live collaboration,


01:03:10.280 --> 01:03:13.280
like Google Sheets and Google Docs,


01:03:13.280 --> 01:03:16.600
it has a lot more, potentially a more friendly interface


01:03:16.600 --> 01:03:18.640
than some of the rough Jupyter notebooks


01:03:18.640 --> 01:03:22.360
that are a little bit bare bones at times.


01:03:22.360 --> 01:03:23.640
- Okay, yeah, really cool.


01:03:23.640 --> 01:03:25.840
I've spoken to the DeepNote people just a little bit


01:03:25.840 --> 01:03:27.600
and they're doing cool stuff for sure.


01:03:27.600 --> 01:03:28.440
Yeah, Jake?


01:03:28.440 --> 01:03:29.280
- Yeah, he's cool.


01:03:29.280 --> 01:03:30.360
Obviously there's another notebook called Hex.


01:03:30.360 --> 01:03:32.120
We had to talk to their founders recently


01:03:32.120 --> 01:03:34.040
about some potential collaboration,


01:03:34.040 --> 01:03:36.000
but they're doing cool stuff as well.


01:03:36.000 --> 01:03:37.200
- Okay, fantastic.


01:03:37.200 --> 01:03:41.560
All right, and then if you're gonna write some Python code,


01:03:41.560 --> 01:03:43.800
notebooks, obviously, if anything else,


01:03:43.800 --> 01:03:45.000
what editor do you use?


01:03:45.000 --> 01:03:48.480
- We're big VS Code users.


01:03:48.480 --> 01:03:50.320
- Okay, all three of you guys?


01:03:50.320 --> 01:03:53.040
- Jake when he dabbles.


01:03:53.040 --> 01:03:56.520
Yeah, no, VS Code junkies.


01:03:56.520 --> 01:03:58.880
We, I don't know, I was thinking about this


01:03:58.880 --> 01:04:01.160
yesterday, recently, it's like, I wish at school


01:04:01.160 --> 01:04:02.280
someone taught a class called


01:04:02.280 --> 01:04:04.180
actually doing software development in the real world


01:04:04.180 --> 01:04:06.400
because I feel like I lived my whole school life


01:04:06.400 --> 01:04:09.960
writing Java code in Eclipse and like crashing my computer.


01:04:09.960 --> 01:04:11.760
And then I started using VS Code


01:04:11.760 --> 01:04:13.920
and it was like this transcendent moment of bliss


01:04:13.920 --> 01:04:16.520
where I was like, oh, programming can actually be fun.


01:04:16.520 --> 01:04:17.760
And it turns out the tools I was using


01:04:17.760 --> 01:04:19.760
just made my computer heat up to a thousand degrees


01:04:19.760 --> 01:04:20.880
and burn my lap, so.


01:04:20.880 --> 01:04:24.300
- Yeah, I really agree with that statement


01:04:24.300 --> 01:04:27.640
that there's a bit of a mismatch of what is taught


01:04:27.640 --> 01:04:30.600
in sort of computer science and then what is expected


01:04:30.600 --> 01:04:32.600
people when they get out in the real world.


01:04:32.600 --> 01:04:38.280
And it might not be as academically highly valued,


01:04:38.280 --> 01:04:41.840
but really good, like working with tools like VS Code


01:04:41.840 --> 01:04:44.720
and PyCharm and these other tools that help you write code


01:04:44.720 --> 01:04:47.240
better, quicker, and some of the software engineering sides,


01:04:47.240 --> 01:04:49.960
I think that really could be valuable for people.


01:04:49.960 --> 01:04:51.400
- No, totally.


01:04:51.400 --> 01:04:53.760
And also, the other thing I'll say is for developers


01:04:53.760 --> 01:04:55.720
like us maybe who came out of school and moved


01:04:55.720 --> 01:04:59.560
into a startup and didn't have a ton of experience,


01:04:59.560 --> 01:05:02.680
let's say writing Python in production in the wild.


01:05:02.680 --> 01:05:03.840
The other thing I would highly recommend


01:05:03.840 --> 01:05:05.480
is continuous integration.


01:05:05.480 --> 01:05:08.040
You can set it up through GitHub or GitLab, I'm sure,


01:05:08.040 --> 01:05:09.160
if you use that as well.


01:05:09.160 --> 01:05:12.960
Testing your code automatically on a server,


01:05:12.960 --> 01:05:14.720
huge productivity gains for us


01:05:14.720 --> 01:05:16.240
and really has increased our confidence


01:05:16.240 --> 01:05:18.280
that we're able to deliver the best possible product


01:05:18.280 --> 01:05:20.800
and not something anyone ever told us about


01:05:20.800 --> 01:05:22.240
when we were in school.


01:05:22.240 --> 01:05:24.880
- No, go implement a database in Lisp.


01:05:24.880 --> 01:05:25.720
Okay.


01:05:25.720 --> 01:05:27.040
(laughing)


01:05:27.040 --> 01:05:29.720
John out in the audience has a quick funny comment


01:05:29.720 --> 01:05:30.760
about the editors.


01:05:30.760 --> 01:05:32.120
NeoVim, of course.


01:05:32.120 --> 01:05:33.960
That's starting to get some attention lately as well.


01:05:33.960 --> 01:05:34.960
Very cool.


01:05:34.960 --> 01:05:37.440
- I'm scared of anything with the word Vim in it scares me,


01:05:37.440 --> 01:05:40.400
but I'm sure you're a superhuman for using it.


01:05:40.400 --> 01:05:46.720
- So you know how you generate a proper random number


01:05:46.720 --> 01:05:48.680
or character set?


01:05:48.680 --> 01:05:51.520
Is you get a first year computer science student into Vim


01:05:51.520 --> 01:05:53.440
and then you ask them to quit.


01:05:53.440 --> 01:05:55.680
- Yeah, I mean, you've seen the most likes


01:05:55.680 --> 01:05:56.800
that go over for the questions.


01:05:56.800 --> 01:05:59.280
I'm trapped in Vim, how the hell do I get out of here?


01:05:59.280 --> 01:06:00.240
- Exactly. - So funny.


01:06:00.240 --> 01:06:01.640
It's like half of what Stack Overflow does


01:06:01.640 --> 01:06:03.520
is answering just that question specifically.


01:06:03.520 --> 01:06:04.360
- Exactly.


01:06:04.360 --> 01:06:07.000
Yeah, for sure, that's great.


01:06:07.000 --> 01:06:09.740
All right, so final call to action, you guys.


01:06:09.740 --> 01:06:10.820
People are excited about this.


01:06:10.820 --> 01:06:12.600
How do they get started?


01:06:12.600 --> 01:06:13.440
Where do they go from there?


01:06:13.440 --> 01:06:16.320
- Docs.triimido.io, which is our documentation website.


01:06:16.320 --> 01:06:18.540
And if you're an organization or enterprise,


01:06:18.540 --> 01:06:21.880
just reach out to me at my email, jeke@sagacollab.com.


01:06:21.880 --> 01:06:23.240
We'll have more links here.


01:06:23.240 --> 01:06:25.600
Or if you go to the plans page, there's a link there.


01:06:25.600 --> 01:06:28.240
But yeah, the documentation docs at tribeminer.io.


01:06:28.240 --> 01:06:30.480
You can download it and start using it today.


01:06:30.480 --> 01:06:31.320
- Yeah, right on.


01:06:31.320 --> 01:06:32.840
Also, I'll throw out there while you're on the docs,


01:06:32.840 --> 01:06:33.780
watch the videos.


01:06:33.780 --> 01:06:37.120
Right, that's a quick and easy way


01:06:37.120 --> 01:06:39.240
to really see what it's about.


01:06:39.240 --> 01:06:40.780
And before we wrap it up here,


01:06:40.780 --> 01:06:42.740
Mr. Hypermagnetic has a little comment,


01:06:42.740 --> 01:06:45.000
like that Vim is the eighth,


01:06:45.000 --> 01:06:47.560
it's like the eighth of the deadly sins.


01:06:47.560 --> 01:06:48.400
- It's weird though,


01:06:48.400 --> 01:06:50.040
because it's not just the eighth of the deadly sins,


01:06:50.040 --> 01:06:51.400
it's the eighth of the deadly sins


01:06:51.400 --> 01:06:53.880
that also like 10% of the population swears


01:06:53.880 --> 01:06:55.440
is the greatest thing since sliced bread.


01:06:55.440 --> 01:06:56.840
And so it's like half the popular,


01:06:56.840 --> 01:06:58.480
like me, I'm terrified of the damn thing,


01:06:58.480 --> 01:07:00.960
but my father is like, "Hmm, son."


01:07:00.960 --> 01:07:02.520
Like my dad's a dad from the 80s,


01:07:02.520 --> 01:07:03.760
he's like, "Son, have you heard of this?"


01:07:03.760 --> 01:07:06.120
And I'm like, "Dad, please, I can't take this right now."


01:07:06.120 --> 01:07:07.480
- Yeah, it's amazing.


01:07:07.480 --> 01:07:09.680
My co-host in Python Bytes, Brian Okken,


01:07:09.680 --> 01:07:11.360
he's all about Vim, everything's Vim, it's great.


01:07:11.360 --> 01:07:13.000
But yeah, I haven't got there.


01:07:13.000 --> 01:07:15.040
I did some Emacs and then I kind of did


01:07:15.040 --> 01:07:17.000
some other more UI-oriented things.


01:07:17.000 --> 01:07:18.080
Awesome.


01:07:18.080 --> 01:07:20.000
All right, well, Jake, Aaron, Nate,


01:07:20.000 --> 01:07:21.040
it's been fun to have you here.


01:07:21.040 --> 01:07:23.040
Congratulations on this project.


01:07:23.040 --> 01:07:24.160
I think it's gonna help a lot of people


01:07:24.160 --> 01:07:28.480
get into Python and just data science quicker, more easy.


01:07:28.480 --> 01:07:29.320
- Awesome.


01:07:29.320 --> 01:07:30.160
- Yeah. - Thanks Michael.


01:07:30.160 --> 01:07:30.980
- Thanks for having us.


01:07:30.980 --> 01:07:31.820
- Great chat.


01:07:31.820 --> 01:07:32.660
- You bet.


01:07:32.660 --> 01:07:33.480
- Talk soon.


01:07:33.480 --> 01:07:34.320
- Bye. - Bye.

