WEBVTT

00:00:00.000 --> 00:00:06.120
Hey, YouTube, everyone out there. Thank you so much for showing up for the live show or


00:00:06.120 --> 00:00:09.440
watching the recording afterwards. If you're here live, be sure to throw some comments


00:00:09.440 --> 00:00:15.600
and thoughts into the live stream and we'll try to make it part of the show. All right,


00:00:15.600 --> 00:00:22.280
guys ready to kick this off? Yep. Let's do it. Andre and Aaron, welcome to talk Python


00:00:22.280 --> 00:00:28.880
to me. Thanks for having us. Yeah. It's great. Yeah, it's fantastic to have you both here.


00:00:28.880 --> 00:00:32.920
What a cool topic, symbolic math with Python.


00:00:32.920 --> 00:00:36.000
I think I'd heard of SymPy before,


00:00:36.000 --> 00:00:39.160
but I didn't fully appreciate how neat


00:00:39.160 --> 00:00:41.960
and how advanced it really was.


00:00:41.960 --> 00:00:44.740
So people are gonna enjoy diving into this


00:00:44.740 --> 00:00:47.640
and we can talk some internals and whatnot.


00:00:47.640 --> 00:00:51.520
And if you're doing anything scientific or computational,


00:00:51.520 --> 00:00:54.040
this is certainly a project worth checking out.


00:00:54.040 --> 00:00:56.960
But before we get to that, let's just hear your story.


00:00:56.960 --> 00:00:58.880
How do you get into programming and Python?


00:00:58.880 --> 00:01:01.120
Aaron, you want to go first?


00:01:01.120 --> 00:01:01.620
Sure.


00:01:01.620 --> 00:01:05.640
So I mean, as far as just programming,


00:01:05.640 --> 00:01:13.400
I've always been into computers ever since I was a little kid.


00:01:13.400 --> 00:01:18.120
Actually started messing around with programming


00:01:18.120 --> 00:01:23.360
and AppleScript and my family's Macintosh


00:01:23.360 --> 00:01:26.600
back when I was a really little kid.


00:01:26.600 --> 00:01:28.960
but didn't really do any serious programming


00:01:28.960 --> 00:01:32.120
till college when I started doing,


00:01:32.120 --> 00:01:34.680
taking like computer science courses.


00:01:34.680 --> 00:01:37.560
And actually for Python,


00:01:37.560 --> 00:01:40.720
my college had a free course that they were offering


00:01:40.720 --> 00:01:45.120
to teach this little language called Python.


00:01:45.120 --> 00:01:48.400
So, you know, the CS course that I was taking


00:01:48.400 --> 00:01:52.200
was in like Java and C and those languages


00:01:52.200 --> 00:01:54.880
or I wasn't a huge fan of those languages,


00:01:54.880 --> 00:01:57.180
but I learned about this language called Python


00:01:57.180 --> 00:01:58.880
and yeah, I thought it was great.


00:01:58.880 --> 00:02:05.100
And so, yeah, I was immediately hooked with Python


00:02:05.100 --> 00:02:08.620
just because it's so easy to use.


00:02:08.620 --> 00:02:11.500
It's so easy to just write a program


00:02:11.500 --> 00:02:14.620
and you don't have to worry about compilers


00:02:14.620 --> 00:02:16.700
or all this boilerplate.


00:02:16.700 --> 00:02:19.740
And then--


00:02:19.740 --> 00:02:21.880
- I'd always been a little suspicious of languages


00:02:21.880 --> 00:02:24.100
that described themselves that way,


00:02:24.100 --> 00:02:27.220
which is ironic given how much I do with Python.


00:02:27.220 --> 00:02:29.140
But so often when you hear that,


00:02:29.140 --> 00:02:32.080
it's like, "Oh, it doesn't need all the symbols and it's super easy to get started."


00:02:32.080 --> 00:02:33.500
That means like, "Oh,


00:02:33.500 --> 00:02:37.540
it's really easy to do easy stuff but then you can't do interesting things."


00:02:37.540 --> 00:02:40.980
I think one of the things that's special about Python is like you can keep going.


00:02:40.980 --> 00:02:44.980
You don't have to stop once you need advanced ideas. That's pretty awesome.


00:02:44.980 --> 00:02:47.340
>> Yeah, it really is. You're right.


00:02:47.340 --> 00:02:49.700
A lot of languages stop,


00:02:49.700 --> 00:02:54.340
But Python, I mean, it's got a lot of advanced stuff as well.


00:02:54.340 --> 00:02:58.340
And it's got a huge ecosystem of libraries you can do.


00:02:58.340 --> 00:03:00.940
Just pretty much anything you want in it.


00:03:00.940 --> 00:03:02.460
- Yeah, for sure.


00:03:02.460 --> 00:03:03.940
The big paradox for me is,


00:03:03.940 --> 00:03:08.020
there's a joke T-shirt that I've seen that says,


00:03:08.020 --> 00:03:09.980
I learned Python, it was a great weekend.


00:03:09.980 --> 00:03:12.020
Which I think is kind of true, you can do that.


00:03:12.020 --> 00:03:14.180
But at the same time, for many, many years now,


00:03:14.180 --> 00:03:15.100
I've been studying Python,


00:03:15.100 --> 00:03:18.020
and there's still just so much more to learn.


00:03:18.020 --> 00:03:20.600
One about the language and also just like, as you said,


00:03:20.600 --> 00:03:22.240
all the different libraries like,


00:03:22.240 --> 00:03:24.000
oh, I wanna learn Pydantic now


00:03:24.000 --> 00:03:25.600
or this other thing or so on.


00:03:25.600 --> 00:03:27.560
Very cool.


00:03:27.560 --> 00:03:28.380
All right, how about now?


00:03:28.380 --> 00:03:29.680
What are you working on day to day?


00:03:29.680 --> 00:03:33.880
- Yeah, so I work at a company called Quansight.


00:03:33.880 --> 00:03:39.240
We do consulting mostly around open source,


00:03:39.240 --> 00:03:41.840
open source Python, open source data science stack.


00:03:41.840 --> 00:03:47.120
I work about 50% of my time on SymPy


00:03:47.120 --> 00:03:50.320
as part of a grant, which we might talk about later,


00:03:50.320 --> 00:03:51.880
I think.


00:03:51.880 --> 00:03:56.520
And I also work on different consulting projects.


00:03:56.520 --> 00:03:59.800
Actually, right now I'm part of a project


00:03:59.800 --> 00:04:04.000
called the Data APIs Consortium,


00:04:04.000 --> 00:04:09.000
which is trying to standardize the array API libraries


00:04:09.000 --> 00:04:16.840
for different Python array libraries, the APIs for those.


00:04:16.960 --> 00:04:19.560
like NumPy and X-Ray and those types of things?


00:04:19.560 --> 00:04:23.920
- NumPy, PyTorch, Jax, CuPy.


00:04:23.920 --> 00:04:26.280
So the idea is that all these libraries


00:04:26.280 --> 00:04:29.080
have a very slightly different APIs


00:04:29.080 --> 00:04:32.720
and it makes it hard to write code against that goes,


00:04:32.720 --> 00:04:34.440
that just works against all of them.


00:04:34.440 --> 00:04:37.880
So what we're doing is creating a standard API


00:04:37.880 --> 00:04:40.400
that all of these libraries will target.


00:04:40.400 --> 00:04:43.440
And so you can write code that will just,


00:04:43.440 --> 00:04:45.080
will work with NumPy,


00:04:45.080 --> 00:04:49.240
but you can also just, instead of importing NumPy, you can import Coupy,


00:04:49.240 --> 00:04:52.120
and that same code will run on the GPU, for example.


00:04:52.120 --> 00:04:56.120
Oh, that's fantastic. Yeah, that's a really good, ambitious goal.


00:04:56.120 --> 00:05:00.360
It sounds so easy, I'm sure it's pretty challenging.


00:05:00.360 --> 00:05:04.680
Yeah, well, I think we're being successful. We just released the first version of the


00:05:04.680 --> 00:05:11.560
specification, and we've got several libraries that are implementing it already,


00:05:11.560 --> 00:05:17.880
including NumPy, Coupy, several others. So it's actually, I think it's being a successful project


00:05:17.880 --> 00:05:23.720
and should really help push the Python data science ecosystem forward.


00:05:23.720 --> 00:05:27.400
Yeah, it sounds like definitely a good step. Andrej, how about you? How'd you get into


00:05:27.400 --> 00:05:32.120
programming in Python? You know, probably in high school. I was trying to figure out when I


00:05:32.120 --> 00:05:38.840
got into it. I think in high school, I don't know. I don't remember how I found it, but it was early


00:05:38.840 --> 00:05:45.320
2000s I'm guessing, it was before NumPy, I think there was NumArray, I think, it was


00:05:45.320 --> 00:05:52.040
the array library in Python. And during my undergrad, I was studying physics, I wanted


00:05:52.040 --> 00:05:58.520
to play with mathematical formulas in Python, so that's when I started SymPy. And then I


00:05:58.520 --> 00:06:03.240
used Python, you know, pretty much probably close to 20 years now, or over 20 years.


00:06:05.240 --> 00:06:07.240
And I cannot say I'm an expert.


00:06:07.240 --> 00:06:09.400
You know, it wasn't a good weekend.


00:06:09.400 --> 00:06:11.960
I don't know.


00:06:11.960 --> 00:06:17.400
A lot of stuff I'm not that great at, you know, but the basics I would say I know pretty well.


00:06:17.400 --> 00:06:17.900
Yeah, sure.


00:06:17.900 --> 00:06:24.040
I, after my PhD in physics, I went to work at Los Alamos National Lab for about eight years


00:06:24.040 --> 00:06:25.880
as a computational physicist.


00:06:25.880 --> 00:06:27.320
And I use Python.


00:06:27.320 --> 00:06:30.520
I use a lot of Fortran, a lot of computational codes and a lot of C++.


00:06:30.520 --> 00:06:31.720
That sounds fun.


00:06:31.720 --> 00:06:34.760
There's a lot of Python stuff happening there at Los Alamos.


00:06:34.760 --> 00:06:39.720
Yeah, it is. The NetworkX, I think, library was started here.


00:06:39.720 --> 00:06:48.680
And then, very recently, half a year ago, I changed jobs. I now work at a company


00:06:48.680 --> 00:06:55.400
called GSI Technology, which is a hardware vendor as a compiler developer. And so at Los


00:06:55.400 --> 00:07:01.880
Alamos, I started this compiler for Fortran called LFortran. It's a compiler for Fortran,


00:07:01.880 --> 00:07:06.440
but it also allows you to use it interactively just like you would Python. It runs in a Jupyter


00:07:06.440 --> 00:07:14.280
notebook as well as a kernel. And at this new company, we are also, in addition to LFortran,


00:07:14.280 --> 00:07:19.880
creating a new frontend called LPython, which takes Python, but compiles it through the same


00:07:19.880 --> 00:07:25.160
pipelines, through the same intermediate representation and all the backends, all


00:07:25.160 --> 00:07:31.640
the code is the same. So effectively, it treats Python like Fortran. So the same speed and so


00:07:31.640 --> 00:07:32.920
and so forth.


00:07:32.920 --> 00:07:33.760
- Oh, wow.


00:07:33.760 --> 00:07:34.600
That sounds awesome.


00:07:34.600 --> 00:07:36.280
- It is awesome, yes.


00:07:36.280 --> 00:07:37.980
- Very, very cool.


00:07:37.980 --> 00:07:42.640
All right, well, super fun to be talking about SymPy


00:07:42.640 --> 00:07:45.320
with you all today, symbolic math.


00:07:45.320 --> 00:07:47.660
I wanna start this off though,


00:07:47.660 --> 00:07:50.160
with a write-up from Aaron


00:07:50.160 --> 00:07:52.800
that is maybe not what people would expect


00:07:52.800 --> 00:07:55.640
as the first topic to introduce SymPy.


00:07:55.640 --> 00:07:57.160
SymPy has been in the news a little bit


00:07:57.160 --> 00:08:00.080
for the wrong reasons recently, right?


00:08:00.080 --> 00:08:00.920
Right, Aaron?


00:08:00.920 --> 00:08:05.920
So it was even on the front page of Hacker News


00:08:05.920 --> 00:08:10.960
because this company, HackerRank, reached out to GitHub,


00:08:10.960 --> 00:08:16.200
sounds like through automated ways,


00:08:16.200 --> 00:08:19.800
and said, "We seem to see some math


00:08:19.800 --> 00:08:21.820
"that looks like questions we might ask,"


00:08:21.820 --> 00:08:22.960
or something like that,


00:08:22.960 --> 00:08:25.060
"so we need to completely ban Senpai


00:08:25.060 --> 00:08:28.380
"because they're stealing our interview questions,"


00:08:28.380 --> 00:08:30.080
or something like that, right?


00:08:30.080 --> 00:08:30.920
Give us the story.


00:08:30.920 --> 00:08:33.000
What kind of madness was this?


00:08:33.000 --> 00:08:36.720
>> Yeah, so we sort of just got this notice from GitHub


00:08:36.720 --> 00:08:39.640
that a DMCA takedown had been issued


00:08:39.640 --> 00:08:43.520
against one of the pages on our documentation.


00:08:43.520 --> 00:08:47.400
And the way the DMCA works


00:08:47.400 --> 00:08:49.520
and the way GitHub's DMCA policy works


00:08:49.520 --> 00:08:51.760
is when somebody issues a notice,


00:08:51.760 --> 00:08:54.700
they basically just have to take it down.


00:08:54.700 --> 00:08:58.600
And GitHub basically took down


00:08:58.600 --> 00:09:04.480
the entire documentation site for about 12 hours.


00:09:04.480 --> 00:09:08.760
And so I've got a timeline of everything that happened here


00:09:08.760 --> 00:09:11.080
in this blog post.


00:09:11.080 --> 00:09:18.000
But basically, yeah, they had some company


00:09:18.000 --> 00:09:22.520
that they were working with to try to find their solutions


00:09:22.520 --> 00:09:26.280
on GitHub and issued DMCA takedown notices against them.


00:09:26.280 --> 00:09:30.720
And somehow this worth IT solutions company


00:09:30.720 --> 00:09:33.760
decided that our docs was one of these,


00:09:33.760 --> 00:09:36.440
and they just issued the notice.


00:09:36.440 --> 00:09:42.200
And so it ended up taking down our documentation, which


00:09:42.200 --> 00:09:44.320
immediately, like you said, it made it


00:09:44.320 --> 00:09:47.640
to the top of Hacker News and--


00:09:47.640 --> 00:09:49.320
>> It's too outrageous.


00:09:49.320 --> 00:09:55.620
>> Yeah, so the notice itself, it was completely ridiculous.


00:09:55.620 --> 00:10:00.620
Like there's like the stuff that they were claiming was


00:10:00.620 --> 00:10:05.820
their copyright is like probably not even copyrightable.


00:10:05.820 --> 00:10:07.980
Like if you look at the examples on


00:10:07.980 --> 00:10:10.820
on that documentation page that they took down


00:10:10.820 --> 00:10:12.740
they're just like simple math examples.


00:10:12.740 --> 00:10:16.900
- Yeah, it was like a X squared minus two solution is,


00:10:16.900 --> 00:10:19.820
you know, negative plus or minus radical two, right?


00:10:19.820 --> 00:10:22.300
Like that you shouldn't be able to copyright.


00:10:22.300 --> 00:10:26.360
I think that actually predates HackerRank Foundation.


00:10:26.360 --> 00:10:30.220
- I think it is HackerRank as a company.


00:10:30.220 --> 00:10:35.940
- Yeah, so the CEO of HackerRank,


00:10:35.940 --> 00:10:38.900
I guess noticed the buzz that was being made about it


00:10:38.900 --> 00:10:42.180
and retracted the notice.


00:10:42.180 --> 00:10:47.100
So the docs ended up going back online about 12 hours later.


00:10:47.100 --> 00:10:48.260
If they hadn't done that,


00:10:48.260 --> 00:10:51.820
we would have had to issue a counter notice,


00:10:51.820 --> 00:10:56.440
which would have kept the docs offline for about two weeks


00:10:56.440 --> 00:10:58.780
before that counter notice would have taken effect.


00:10:58.780 --> 00:11:01.700
And that's just because of the way the DMCA law works.


00:11:01.700 --> 00:11:06.300
I also explained how the DMCA law works in this blog post.


00:11:06.300 --> 00:11:09.920
If anyone's wondering like why would GitHub even do this?


00:11:09.920 --> 00:11:12.100
Like, well, they're kind of required


00:11:12.100 --> 00:11:13.980
to do this kind of stuff by law.


00:11:13.980 --> 00:11:15.820
There are some ways I think they could have improved


00:11:15.820 --> 00:11:18.460
what they did here, which I go over as well.


00:11:18.460 --> 00:11:19.300
But this DMCA law is-


00:11:19.300 --> 00:11:21.460
- It's probably like pointing those out.


00:11:21.460 --> 00:11:24.180
- Yeah, so I mean, the DMCA provides


00:11:24.180 --> 00:11:25.980
what's called safe harbor for places


00:11:25.980 --> 00:11:29.460
that host user generated content, basically.


00:11:29.460 --> 00:11:31.940
YouTube, the social media places,


00:11:31.940 --> 00:11:34.780
GitHub clearly has a ton of user generated content


00:11:34.780 --> 00:11:35.600
that's public.


00:11:35.600 --> 00:11:40.540
If you got the source code of Windows or something


00:11:40.540 --> 00:11:42.460
and you posted it up there, right?


00:11:42.460 --> 00:11:43.820
Theoretically, Microsoft might say,


00:11:43.820 --> 00:11:45.300
you know, we don't really want you hosting this.


00:11:45.300 --> 00:11:46.740
It's not supposed to be open source.


00:11:46.740 --> 00:11:48.100
Please take it down, right?


00:11:48.100 --> 00:11:50.940
So that's the idea.


00:11:50.940 --> 00:12:03.940
The way it works though is basically once there's a request to take it down, they just have to, here's the part that I think that got missed, decide that it's a valid request and then just take it down.


00:12:03.940 --> 00:12:12.460
Like they don't really try to negotiate or determine the right, the correctness of that assertion, right?


00:12:12.780 --> 00:12:21.380
Yeah, so they sort of have to stay like as a disinterested third party, I guess.


00:12:21.380 --> 00:12:28.060
And the reason is that in order for them to have the safe harbor, the safe harbor status sort of


00:12:28.060 --> 00:12:35.420
frees them from the liability on either side, if there is a copyright claim or if there's a lawsuit or something,


00:12:35.420 --> 00:12:38.860
they can just say, OK, well, we're just hosting the content.


00:12:39.140 --> 00:12:41.780
The law sort of allows them to do that.


00:12:41.780 --> 00:12:44.420
But in order to do that, they sort of have to just,


00:12:44.420 --> 00:12:47.020
if they get a DMCA claim, they have to just take it down.


00:12:47.020 --> 00:12:49.260
And then if there's a counter notice issued,


00:12:49.260 --> 00:12:50.780
then they can put it back up.


00:12:50.780 --> 00:12:52.220
And the DMCA has these,


00:12:52.220 --> 00:12:57.620
the DMCA sort of tells them that if they get a claim,


00:12:57.620 --> 00:13:00.380
they have to sort of take it down expeditiously.


00:13:00.380 --> 00:13:01.700
And if there's a counter notice,


00:13:01.700 --> 00:13:05.260
they have to put it back up in 10 to 14 days.


00:13:05.260 --> 00:13:08.940
So it's, there's a lot of parts of the law


00:13:08.940 --> 00:13:10.440
that they sort of have to do.


00:13:10.440 --> 00:13:13.940
There's some things I think that they could have done better.


00:13:13.940 --> 00:13:15.980
And there's also some things that they already do,


00:13:15.980 --> 00:13:18.060
which they don't have to do, which are nice,


00:13:18.060 --> 00:13:21.600
including they have a repo where they actually post


00:13:21.600 --> 00:13:24.660
every single DMCA notice that they've received,


00:13:24.660 --> 00:13:27.300
going all the way back to 2011, actually.


00:13:27.300 --> 00:13:28.140
- Interesting, that's good.


00:13:28.140 --> 00:13:31.040
- So you can actually see all the DMCA notices


00:13:31.040 --> 00:13:32.980
that have been issued against GitHub repositories


00:13:32.980 --> 00:13:37.980
on that repo, it's github.com/github/dmca.


00:13:38.600 --> 00:13:40.300
- Yeah, okay.


00:13:40.300 --> 00:13:42.880
You know, I wanna preface this by saying I'm not a lawyer,


00:13:42.880 --> 00:13:46.280
so I'm only speculating here,


00:13:46.280 --> 00:13:48.280
but one of the things that seems very,


00:13:48.280 --> 00:13:51.640
very much like it fell through the cracks,


00:13:51.640 --> 00:13:55.600
and this part I think is both maliciousness


00:13:55.600 --> 00:13:58.800
and laziness on the Worth IT company,


00:13:58.800 --> 00:14:02.420
as well as, you know, sort of either laziness


00:14:02.420 --> 00:14:06.760
or disinterest, I guess, from GitHub.


00:14:06.760 --> 00:14:08.440
I don't really know how to characterize it,


00:14:08.440 --> 00:14:13.400
But this company came and said, on your documentations,


00:14:13.400 --> 00:14:15.280
there is content that is copyright,


00:14:15.280 --> 00:14:18.140
and it comes from our website, and it just linked


00:14:18.140 --> 00:14:20.720
just to the home page of that other website.


00:14:20.720 --> 00:14:22.240
You gotta take it down.


00:14:22.240 --> 00:14:27.240
That seems like insufficient information to,


00:14:27.240 --> 00:14:29.260
or GitHub to go, yeah, well, they said,


00:14:29.260 --> 00:14:30.700
there's a website, and here's a website.


00:14:30.700 --> 00:14:33.280
That website doesn't like this one, so it should go away.


00:14:33.280 --> 00:14:37.360
It should say, do you see these lines of code here?


00:14:37.360 --> 00:14:40.480
that was stolen from us and here's where it originates


00:14:40.480 --> 00:14:42.380
or, you know, we, our thing is not public


00:14:42.380 --> 00:14:43.380
but these are the lines,


00:14:43.380 --> 00:14:45.320
they didn't even say what was wrong, right?


00:14:45.320 --> 00:14:47.280
It just said, we believe that's what's on this page.


00:14:47.280 --> 00:14:49.580
- It was a disaffection even for us


00:14:49.580 --> 00:14:51.080
if it was an accurate claim.


00:14:51.080 --> 00:14:54.420
'Cause if you look at this page that they put the claim on,


00:14:54.420 --> 00:14:57.340
it's a huge page 'cause it's got like


00:14:57.340 --> 00:14:59.780
about a dozen different functions on it.


00:14:59.780 --> 00:15:03.660
And it just said that they copied our examples.


00:15:03.660 --> 00:15:06.840
It didn't say what, which part of the page was copied


00:15:06.840 --> 00:15:09.000
or anything.


00:15:09.000 --> 00:15:14.240
So yeah, I mean, I still don't know how they even


00:15:14.240 --> 00:15:19.480
decided that this was a thing, that somehow their automation


00:15:19.480 --> 00:15:21.520
got flagged incorrectly or something.


00:15:21.520 --> 00:15:22.840
I don't know.


00:15:22.840 --> 00:15:26.040
I don't know if we're ever going to know that.


00:15:26.040 --> 00:15:26.560
Yep.


00:15:26.560 --> 00:15:29.140
All right, well, I don't want to spend the whole time on this,


00:15:29.140 --> 00:15:33.640
but let me wrap it up with a quick thought.


00:15:33.640 --> 00:15:38.640
the CEO of HackerRank, Vivek, posted a message that said,


00:15:38.640 --> 00:15:42.140
this was not our intended consequence.


00:15:42.140 --> 00:15:47.240
Yes, but if you send bots running around the internet


00:15:47.240 --> 00:15:52.080
looking for algebraic equations and saying that those are,


00:15:52.080 --> 00:15:56.160
you know, like, this is your problem,


00:15:56.160 --> 00:15:59.900
even if it was not your intent to do these things.


00:16:00.920 --> 00:16:04.760
And so they fixed it.


00:16:04.760 --> 00:16:05.860
I don't know what they're doing now,


00:16:05.860 --> 00:16:08.060
but they said, we're gonna stop the whole process for now


00:16:08.060 --> 00:16:09.360
and figure out what we can do better.


00:16:09.360 --> 00:16:12.240
But on the other hand, we should give them props


00:16:12.240 --> 00:16:16.720
for donating $25,000 to the Senpai project as a war sari.


00:16:16.720 --> 00:16:18.280
That's actually kind of cool.


00:16:18.280 --> 00:16:20.320
They didn't have to do that.


00:16:20.320 --> 00:16:22.000
- No, they did not have to do that.


00:16:22.000 --> 00:16:26.200
And they did send the money, I think last week.


00:16:26.200 --> 00:16:27.040
And so just-


00:16:27.040 --> 00:16:28.040
- You guys were all on vacation,


00:16:28.040 --> 00:16:29.000
like, what is this, Hawaii?


00:16:29.000 --> 00:16:29.840
Or I'm just teasing.


00:16:29.840 --> 00:16:35.040
If the finances are online, you can find them up.


00:16:35.040 --> 00:16:39.440
I think it's on the Open Collective and it pretty much almost doubled our budget.


00:16:39.440 --> 00:16:43.440
And so it will allow us to really fund all kinds of cool development.


00:16:43.440 --> 00:16:47.440
One thing on this note I wanted to say is that I was thinking,


00:16:47.440 --> 00:16:50.240
so when it all started, I thought, you know, this is...


00:16:50.240 --> 00:16:55.240
I felt like a little guy completely being crushed by some huge corporation or just this,


00:16:55.240 --> 00:16:58.640
you know, they just take down the documentation and GitHub just says,


00:16:58.640 --> 00:17:02.080
it's not enough to put a commit to fix it.


00:17:02.080 --> 00:17:04.880
You have to excise the commit from the git history.


00:17:04.880 --> 00:17:08.720
So we would have to figure out exactly what line was copied.


00:17:08.720 --> 00:17:11.760
And so I went to the git history and tried to look about maybe some


00:17:11.760 --> 00:17:15.520
of our contributors maybe copied some stuff from hackerrank.


00:17:15.520 --> 00:17:19.520
So I went to the history but didn't see anything, did not see any mention of


00:17:19.520 --> 00:17:22.640
hackerrank, you know, oh I copied this from hackerrank, didn't see anything like


00:17:22.640 --> 00:17:25.200
that, didn't see anything suspicious. But the


00:17:25.200 --> 00:17:26.720
the consequence was dire.


00:17:26.720 --> 00:17:29.040
And also the documentation is generated


00:17:29.040 --> 00:17:30.440
from the SymPy source code.


00:17:30.440 --> 00:17:33.840
So really the offending lines are coming


00:17:33.840 --> 00:17:35.320
from the SymPy repository itself,


00:17:35.320 --> 00:17:36.400
not just the documentation.


00:17:36.400 --> 00:17:37.600
So they were like all of Sympy.


00:17:37.600 --> 00:17:39.360
- So luckily they missed it.


00:17:39.360 --> 00:17:40.720
- We were really, I was like,


00:17:40.720 --> 00:17:42.920
well, this might be the, this is terrible.


00:17:42.920 --> 00:17:46.080
And then they, oh, and also we thought maybe,


00:17:46.080 --> 00:17:48.000
maybe this looks like a spam, you know,


00:17:48.000 --> 00:17:49.080
maybe it's just a spam.


00:17:49.080 --> 00:17:51.760
So we kind of ignored it a little bit, not ignored it,


00:17:51.760 --> 00:17:53.520
but you know, we didn't know.


00:17:53.520 --> 00:17:55.400
And so I emailed GitHub right away,


00:17:55.400 --> 00:17:57.400
is this real or is this just a spam?


00:17:57.400 --> 00:17:59.480
And they got back to us on Monday evening,


00:17:59.480 --> 00:18:00.660
say, no, this is real.


00:18:00.660 --> 00:18:02.200
And then the next morning they took down


00:18:02.200 --> 00:18:03.560
the whole documentation.


00:18:03.560 --> 00:18:04.800
So I felt really just,


00:18:04.800 --> 00:18:08.840
I spent an hour and an hour spent so many hours


00:18:08.840 --> 00:18:10.840
just trying to figure out what we should do


00:18:10.840 --> 00:18:12.480
and what the options are.


00:18:12.480 --> 00:18:15.720
And I was, it was a Google Summer of Code was,


00:18:15.720 --> 00:18:18.200
Redline was on that Tuesday, I think as well.


00:18:18.200 --> 00:18:19.920
So I was just super busy with that.


00:18:19.920 --> 00:18:21.140
I just felt, you know, this is,


00:18:21.140 --> 00:18:22.880
and I'm doing this for free for a simple,


00:18:22.880 --> 00:18:26.460
I don't think I've ever paid anybody to work on Simple.


00:18:26.460 --> 00:18:29.460
I just felt, you know, this is not right.


00:18:29.460 --> 00:18:31.600
And then when it got to Hacker News,


00:18:31.600 --> 00:18:34.540
I thought about how can the company,


00:18:34.540 --> 00:18:36.300
what can they do to like fix it?


00:18:36.300 --> 00:18:37.980
And I thought, you know, there's not much they can do.


00:18:37.980 --> 00:18:39.260
The town was wasted.


00:18:39.260 --> 00:18:40.900
But then Travis got an idea,


00:18:40.900 --> 00:18:41.900
Olyphant got an idea of,


00:18:41.900 --> 00:18:44.320
well, why don't they donate some money?


00:18:44.320 --> 00:18:46.740
And I thought, you know, this would fix it.


00:18:46.740 --> 00:18:48.580
And I didn't think they would do that,


00:18:48.580 --> 00:18:50.460
but I'm very happy that they did.


00:18:50.460 --> 00:18:52.100
As far as I'm concerned, personally,


00:18:52.100 --> 00:18:56.580
I think we are even, they gave us the money


00:18:56.580 --> 00:18:58.580
and we can use it to really progress


00:18:58.580 --> 00:19:00.420
the development forward.


00:19:00.420 --> 00:19:04.500
So I'm very happy that how it all ended for Sympy.


00:19:04.500 --> 00:19:06.500
- Sure, you could pay to hire somebody


00:19:06.500 --> 00:19:08.260
to work on some important part,


00:19:08.260 --> 00:19:10.020
or you could pay to have sprints,


00:19:10.020 --> 00:19:12.260
like bring the people together to work together


00:19:12.260 --> 00:19:14.420
or something like that, right?


00:19:14.420 --> 00:19:15.900
Nice. - Yeah, we're still talking


00:19:15.900 --> 00:19:17.200
about what we're gonna do.


00:19:17.200 --> 00:19:21.460
- Cool, well, I'm glad it came out well,


00:19:21.460 --> 00:19:23.460
But what a wild story.


00:19:23.460 --> 00:19:25.980
I've had run-ins like this before


00:19:25.980 --> 00:19:27.980
and they are incredibly frustrating.


00:19:27.980 --> 00:19:29.820
Even when you're on the right side of it,


00:19:29.820 --> 00:19:34.820
it's just like, you know, you're up against lawyers from--


00:19:34.820 --> 00:19:37.580
- Yeah, you're on YouTube,


00:19:37.580 --> 00:19:40.380
so I've heard that DMCA's can be pretty bad on YouTube.


00:19:40.380 --> 00:19:41.640
I don't know if you've ever been hit


00:19:41.640 --> 00:19:43.040
by anything like that there.


00:19:43.040 --> 00:19:46.220
- You know what's so funny is only once


00:19:46.220 --> 00:19:47.220
has it happened on YouTube.


00:19:47.220 --> 00:19:48.760
It's happened for my courses.


00:19:49.660 --> 00:19:52.660
It's not exactly, it's happened sort of almost in reverse


00:19:52.660 --> 00:19:53.900
for my courses.


00:19:53.900 --> 00:19:58.580
I put one of my free courses on Udemy as a way to try


00:19:58.580 --> 00:20:00.260
to reach out to people who didn't already know


00:20:00.260 --> 00:20:02.100
about my content.


00:20:02.100 --> 00:20:04.260
Like, I'll put it up there for free.


00:20:04.260 --> 00:20:05.700
People can experience it there.


00:20:05.700 --> 00:20:07.580
And then maybe they'll go look for other courses for me.


00:20:07.580 --> 00:20:09.300
Like, you know, something like that.


00:20:09.300 --> 00:20:13.420
Someone stole my free course, started selling it on Udemy.


00:20:13.420 --> 00:20:18.020
And it took me two weeks to get them to even take it down.


00:20:18.020 --> 00:20:20.420
even though at the beginning it's a picture of me saying,


00:20:20.420 --> 00:20:21.460
hi, I'm Michael.


00:20:21.460 --> 00:20:24.660
And I'm like, you gotta, we don't believe this is yours.


00:20:24.660 --> 00:20:25.740
Like, what do you mean?


00:20:25.740 --> 00:20:26.860
Have you watched it?


00:20:26.860 --> 00:20:31.820
The person who is the account it's under


00:20:31.820 --> 00:20:35.100
is absolutely clearly not Michael.


00:20:35.100 --> 00:20:37.700
Anyway, on YouTube, what has happened to me


00:20:37.700 --> 00:20:40.980
is I was doing a webcast way back in the day


00:20:40.980 --> 00:20:44.620
when people would call in sometimes on phones


00:20:44.620 --> 00:20:47.560
and somebody interrupted someone else on,


00:20:47.560 --> 00:20:51.760
during the webcast and they put it on hold


00:20:51.760 --> 00:20:52.880
and it was really frustrating


00:20:52.880 --> 00:20:55.120
because their hold music started playing


00:20:55.120 --> 00:20:57.560
back into the webcast and for some reason,


00:20:57.560 --> 00:20:59.000
the way it was set up by the company


00:20:59.000 --> 00:21:01.840
I was working with to do it, they couldn't stop it.


00:21:01.840 --> 00:21:04.920
So there was just like five minutes of hold music


00:21:04.920 --> 00:21:08.040
going along with the presentation.


00:21:08.040 --> 00:21:10.560
That hold music got a DMCA takedown


00:21:10.560 --> 00:21:12.280
and it took down my webcast.


00:21:14.000 --> 00:21:16.080
So what are you gonna do?


00:21:16.080 --> 00:21:16.920
I didn't really mind.


00:21:16.920 --> 00:21:18.320
It was the kind of a crappy thing anyway,


00:21:18.320 --> 00:21:20.840
but you know, it was up there and it got taken down.


00:21:20.840 --> 00:21:22.280
All right, let's talk about SymPy


00:21:22.280 --> 00:21:25.000
because I think this is a really neat project.


00:21:25.000 --> 00:21:29.740
Like I said, I'm, when I think about the data science stack


00:21:29.740 --> 00:21:32.040
and the scientific computing stack of Python,


00:21:32.040 --> 00:21:38.040
traditionally what I've thought of is NumPy, Pandas,


00:21:38.040 --> 00:21:43.240
Matplotlib, the stuff that does numerical processing


00:21:43.240 --> 00:21:44.760
and then maybe visualizes that


00:21:44.760 --> 00:21:48.080
or does machine learning off of it or something like that.


00:21:48.080 --> 00:21:51.040
But SymPy, I think occupies a slightly different


00:21:51.040 --> 00:21:52.260
but really important space


00:21:52.260 --> 00:21:54.960
in this whole computational Python stuff.


00:21:54.960 --> 00:21:56.720
Tell us about it.


00:21:56.720 --> 00:22:00.360
- Yeah, so SymPy, like you said,


00:22:00.360 --> 00:22:02.720
it sort of stands in contrast to these other libraries


00:22:02.720 --> 00:22:06.260
in that it's not, it is a mathematics library,


00:22:06.260 --> 00:22:08.560
but it's not numerical, it's symbolic.


00:22:08.560 --> 00:22:14.640
So the focus is on computing with mathematical expressions


00:22:14.640 --> 00:22:15.800
exactly.


00:22:15.800 --> 00:22:20.840
So if you tell SymPy to, like you said earlier,


00:22:20.840 --> 00:22:24.320
solve the equation x squared minus 2 equals 0,


00:22:24.320 --> 00:22:27.040
you'll get the exact answer, square root of 2


00:22:27.040 --> 00:22:28.000
minus square root of 2.


00:22:28.000 --> 00:22:32.920
You won't get a numerical answer like 0.7,


00:22:32.920 --> 00:22:35.240
whatever square root of 2 is.


00:22:35.240 --> 00:22:38.120
But you'll get that exactly.


00:22:38.120 --> 00:22:40.160
square root of two.


00:22:40.160 --> 00:22:42.400
And so there's all sorts of things


00:22:42.400 --> 00:22:45.080
that you can do with symbolic mathematics.


00:22:45.080 --> 00:22:50.120
People may be familiar with other similar tools called--


00:22:50.120 --> 00:22:53.800
it's basically-- it's called the computer algebra system.


00:22:53.800 --> 00:22:56.760
There's proprietary tools like Maple and Mathematica.


00:22:56.760 --> 00:22:59.880
There are some other open source systems


00:22:59.880 --> 00:23:04.880
that people may have used as well, like Sage and Maxima.


00:23:04.880 --> 00:23:07.720
So just if you've ever heard of any of those,


00:23:07.720 --> 00:23:10.400
SymPy sort of occupies a similar space,


00:23:10.400 --> 00:23:14.280
but SymPy, I guess, sort of stands apart from those


00:23:14.280 --> 00:23:16.640
in that it's open source and it's also,


00:23:16.640 --> 00:23:17.680
it's a Python library.


00:23:17.680 --> 00:23:20.120
So if you're familiar at all with Python,


00:23:20.120 --> 00:23:23.200
it's really easy to start using SymPy


00:23:23.200 --> 00:23:24.480
because it's just Python.


00:23:24.480 --> 00:23:28.440
- Yeah, I think people who have not seen


00:23:28.440 --> 00:23:30.000
this kind of stuff in action


00:23:30.000 --> 00:23:32.760
should definitely go poke around and check it out.


00:23:32.760 --> 00:23:35.220
and we'll talk about some ways in which you can play with it


00:23:35.220 --> 00:23:37.280
just online with super low effort.


00:23:37.280 --> 00:23:42.460
I remember the first time I had been previously using


00:23:42.460 --> 00:23:45.000
MATLAB or something like that.


00:23:45.000 --> 00:23:48.460
And I saw Maple, which is what one of the ones


00:23:48.460 --> 00:23:51.200
you called out, which is a symbolic sort of solving thing.


00:23:51.200 --> 00:23:53.500
You can say, oh, here, I wanna do the integral


00:23:53.500 --> 00:23:56.080
from negative infinity to positive infinity of this thing.


00:23:56.080 --> 00:23:58.220
And it looks like it would come out of the textbook


00:23:58.220 --> 00:24:01.300
and it will sometimes even show you the steps.


00:24:01.300 --> 00:24:02.140
It's unbelievable.


00:24:02.140 --> 00:24:03.880
And that was 20 years ago when I saw it,


00:24:03.880 --> 00:24:04.860
I'm like, that's unbelievable


00:24:04.860 --> 00:24:06.740
that this computer is doing this.


00:24:06.740 --> 00:24:10.820
And SymPy is like that, but for Python, which is fantastic.


00:24:10.820 --> 00:24:14.500
- Yeah.


00:24:14.500 --> 00:24:16.580
So it's basically,


00:24:16.580 --> 00:24:19.540
it's the math that you would learn in a classroom.


00:24:19.540 --> 00:24:23.100
Except it can also get very advanced.


00:24:23.100 --> 00:24:25.660
Like you said, we can do integrals.


00:24:25.660 --> 00:24:28.940
We have lots of very advanced mathematical features.


00:24:28.940 --> 00:24:33.940
We have a module for doing various areas of physics,


00:24:33.940 --> 00:24:35.620
for example.


00:24:35.620 --> 00:24:38.260
- Nice, and it's also the foundation


00:24:38.260 --> 00:24:40.860
of many other things as well.


00:24:40.860 --> 00:24:43.260
Just as like setting the stage,


00:24:43.260 --> 00:24:46.500
a preview is you've got algebra,


00:24:46.500 --> 00:24:49.340
you've got calculus, you've got differential equations,


00:24:49.340 --> 00:24:51.580
you've got linear algebra and matrices.


00:24:51.580 --> 00:24:54.300
There's a lot of good stuff in here.


00:24:54.300 --> 00:24:56.420
Andre, do you wanna maybe give us a little run through


00:24:56.420 --> 00:25:00.380
of like sort of the selling points of Sempai?


00:25:00.380 --> 00:25:02.260
- Yeah, I can, that's very easy.


00:25:02.260 --> 00:25:04.460
I was a undergrad student and you know,


00:25:04.460 --> 00:25:06.420
if you study physics or any kind of engineering,


00:25:06.420 --> 00:25:08.380
a lot of times, even math,


00:25:08.380 --> 00:25:10.380
you have to do a lot of simple like,


00:25:10.380 --> 00:25:13.940
you know, I would say derivations on paper.


00:25:13.940 --> 00:25:15.780
And I remember sitting in a physics class


00:25:15.780 --> 00:25:17.340
and I thought, you know, this,


00:25:17.340 --> 00:25:19.900
I would like to do this from Python, interactively.


00:25:19.900 --> 00:25:22.540
And so that's the idea.


00:25:22.540 --> 00:25:24.420
And then of course I sat down and I thought,


00:25:24.420 --> 00:25:26.880
well, let's get started.


00:25:26.880 --> 00:25:28.520
And my friends were telling me,


00:25:28.520 --> 00:25:31.120
you know, what, you know, can I do Gaussian integrals?


00:25:31.120 --> 00:25:32.960
You know, it's this integral of exponential


00:25:32.960 --> 00:25:35.840
of some polynomial, you know, X squared, for example.


00:25:35.840 --> 00:25:38.480
And I said, you know, it cannot because,


00:25:38.480 --> 00:25:41.240
but it will make in five years, just not now.


00:25:41.240 --> 00:25:43.760
- It's a hard problem.


00:25:43.760 --> 00:25:45.600
- I didn't know, and I said, well,


00:25:45.600 --> 00:25:48.100
we can use Mathematica, it can do it now.


00:25:48.100 --> 00:25:50.640
But, but they asked me,


00:25:50.640 --> 00:25:51.800
well, why don't you use Mathematica?


00:25:51.800 --> 00:25:54.160
I know, and I said, you know, Mathematica is great.


00:25:54.160 --> 00:25:55.800
It's Maple as well.


00:25:55.800 --> 00:25:59.380
It's absolutely, as you said, Michael, absolutely amazing that, you know,


00:25:59.380 --> 00:26:03.060
20 years ago, and it could do all these integrals and, and the serious


00:26:03.060 --> 00:26:04.580
expansion of these functions.


00:26:04.580 --> 00:26:07.040
And I was using windows NT when I did that.


00:26:07.040 --> 00:26:08.080
I like how old that was.


00:26:08.080 --> 00:26:13.400
And so, yeah.


00:26:13.400 --> 00:26:18.520
And, but the motivation is to be able to read from Python interactively


00:26:18.520 --> 00:26:22.240
allows you to kind of almost program with the symbolics using a language.


00:26:22.480 --> 00:26:27.360
that's a pretty decent language that you might already use for something else.


00:26:27.360 --> 00:26:31.180
And so what I wanted to do is assign the expression to a variable, then use the


00:26:31.180 --> 00:26:37.120
variable interactively and write some scripts to kind of handle my calculation


00:26:37.120 --> 00:26:39.780
and maybe save it to a file after that and so on.


00:26:39.780 --> 00:26:44.320
And so that's, once you want to program with that, Mathematica, it allows you


00:26:44.320 --> 00:26:46.680
to program, but you have to learn their language.


00:26:46.680 --> 00:26:50.500
And I like Python more than the Mathematica language.


00:26:50.500 --> 00:26:52.900
And so that's why I wanted to have that in Python.


00:26:52.900 --> 00:27:00.660
Well, the other thing that from this perspective, sitting on the Python or the


00:27:00.660 --> 00:27:03.860
comp size side of things and looking back is obvious.


00:27:03.860 --> 00:27:07.360
I don't know that it is as obvious coming from the other perspective of like, Oh,


00:27:07.360 --> 00:27:10.100
I'm doing a MATLAB dot M file or whatever.


00:27:10.100 --> 00:27:16.860
But in that world, if you work in MATLAB or Mathematica, you can do what


00:27:16.860 --> 00:27:18.380
MATLAB or Mathematica does.


00:27:18.380 --> 00:27:19.420
Right.


00:27:19.420 --> 00:27:25.660
That's a it's really amazing in its specialty, but it's very specialized and limited, right? You can't build like


00:27:25.660 --> 00:27:32.460
You know fast api and database driven apps that are doing some of this kind of computation along the way, right?


00:27:32.460 --> 00:27:36.540
If you move it to python like this is now


00:27:36.540 --> 00:27:39.180
This capability is now accessible


00:27:39.180 --> 00:27:41.740
for all the applications not just


00:27:41.740 --> 00:27:43.900
within


00:27:43.900 --> 00:27:45.660
you know the


00:27:45.660 --> 00:27:47.660
MATLAB or maple environment


00:27:48.780 --> 00:27:52.860
Yeah, and I guess it's an argument, you know, what's the advantage of Python, let's say for


00:27:52.860 --> 00:27:57.900
numerical computing, let's use NumPy or scientific, let's say for scientific computing, what's the


00:27:57.900 --> 00:28:01.980
advantage of Python over, let's say, Mathematica? And I think it's not a clear cut answer. I think


00:28:01.980 --> 00:28:06.540
Mathematica is great and they've done, actually, it's quite amazing how good job they've done


00:28:06.540 --> 00:28:10.220
because they designed the language, I believe, in the early 80s and they did not have to really


00:28:10.220 --> 00:28:15.980
modify the language too much in the same spirit. So that's kind of amazing. It's much older than


00:28:15.980 --> 00:28:20.240
and Python. So it's quite amazing how far and that it still works pretty well and is


00:28:20.240 --> 00:28:24.620
a decent language. But I think what I like about Python for scientific computing, you


00:28:24.620 --> 00:28:30.060
know, is that it's open source and it's the language just seems more kind of robust and


00:28:30.060 --> 00:28:34.200
kind of easier, more imperative, don't have to really learn too much. It seems kind of


00:28:34.200 --> 00:28:39.420
anybody can learn it quickly and doesn't seem to have too many kind of things that would


00:28:39.420 --> 00:28:40.420
surprise you.


00:28:40.420 --> 00:28:43.420
- Yeah, very cool.


00:28:43.420 --> 00:28:46.340
So how long ago did you start on Senpai?


00:28:46.340 --> 00:28:49.100
- So I think I started in 2005 or six.


00:28:49.100 --> 00:28:51.720
- Nice, it's been going for a while.


00:28:51.720 --> 00:28:52.560
- Yes.


00:28:52.560 --> 00:28:55.960
- Yeah, that really predates a lot


00:28:55.960 --> 00:28:59.060
of the scientific computing frameworks


00:28:59.060 --> 00:29:01.540
that are well known today, right?


00:29:01.540 --> 00:29:05.100
So you must have felt good about picking the right horse


00:29:05.100 --> 00:29:08.340
as you saw, you know, Jupyter or IPython at the time


00:29:08.340 --> 00:29:11.020
come along and those libraries like that.


00:29:11.020 --> 00:29:13.600
- Way before Jupyter, IPython was there.


00:29:13.600 --> 00:29:16.860
Somebody told me about it and I tested it out


00:29:16.860 --> 00:29:18.100
and I feel this is pretty cool.


00:29:18.100 --> 00:29:19.300
It looks like Mathematica.


00:29:19.300 --> 00:29:21.420
And then I later when I talked to Fernando Perez


00:29:21.420 --> 00:29:23.180
who wrote it, he said, yeah, it's Mathematica.


00:29:23.180 --> 00:29:25.460
That's what I wanted to have in Python.


00:29:25.460 --> 00:29:28.860
So kind of the same motivation almost just,


00:29:28.860 --> 00:29:30.340
so he kind of provided the foundation


00:29:30.340 --> 00:29:31.620
for the interactive part,


00:29:31.620 --> 00:29:33.420
with the prompt and the numbers.


00:29:33.420 --> 00:29:36.460
One is very simple, but Mathematica used to work.


00:29:36.460 --> 00:29:40.300
- Nice.


00:29:40.300 --> 00:29:41.620
When you work with SymPy,


00:29:41.620 --> 00:29:44.420
we'll see some examples and talk about them in a minute.


00:29:44.420 --> 00:29:47.840
You can put it into this like pretty printing mode


00:29:47.840 --> 00:29:50.620
where it attempts with as much as it can


00:29:50.620 --> 00:29:52.500
within the terminal output


00:29:52.500 --> 00:29:56.400
to have more formal mathematical representation.


00:29:56.400 --> 00:29:59.780
So instead of like E^x,


00:29:59.780 --> 00:30:01.540
it might put a little smaller X up high


00:30:01.540 --> 00:30:04.340
and then an E down slightly to the lower left of it


00:30:04.340 --> 00:30:05.900
like you would try to write it.


00:30:05.900 --> 00:30:09.180
It seems that if it's in a notebook,


00:30:09.180 --> 00:30:11.340
it should be able to do even better,


00:30:11.340 --> 00:30:14.660
like maybe a LaTeX rendering or something really shiny.


00:30:14.660 --> 00:30:15.500
- Yeah, it does.


00:30:15.500 --> 00:30:16.320
- Does it do something like that?


00:30:16.320 --> 00:30:18.140
- In the notebook, it'll use the MathJax.


00:30:18.140 --> 00:30:23.060
So it'll, yeah, it'll just, it'll look great basically.


00:30:23.060 --> 00:30:24.960
'Cause the MathJax looks just like,


00:30:24.960 --> 00:30:27.940
it's the same as the LaTeX document.


00:30:27.940 --> 00:30:28.780
- Like a textbook.


00:30:28.780 --> 00:30:29.600
- Yeah.


00:30:29.600 --> 00:30:30.440
- Oh, man.


00:30:30.440 --> 00:30:31.620
- But yeah, in the terminal,


00:30:31.620 --> 00:30:35.260
we use all these different Unicode characters


00:30:35.260 --> 00:30:39.960
to sort of render it as 2D text in the terminal.


00:30:39.960 --> 00:30:44.160
So that it looks pretty decent in the terminal


00:30:44.160 --> 00:30:46.360
considering the constraints of terminal.


00:30:46.360 --> 00:30:48.880
And I personally use it.


00:30:48.880 --> 00:30:52.220
I mainly use it in the terminal myself.


00:30:52.220 --> 00:30:54.920
- Yeah, so let's go and maybe we could walk


00:30:54.920 --> 00:30:58.300
through a little bit on one of the tutorials here.


00:30:58.300 --> 00:31:02.000
Obviously we don't wanna talk too much code or whatever,


00:31:02.000 --> 00:31:05.240
but I do think maybe just touching on this


00:31:05.240 --> 00:31:09.340
will give people a sense of what it's like to work with this.


00:31:09.340 --> 00:31:10.980
Because--


00:31:10.980 --> 00:31:11.860
>>Yeah, so I think--


00:31:11.860 --> 00:31:13.740
>>Yeah, give us a sense of what--


00:31:13.740 --> 00:31:17.380
>>In the tutorial, there's actually a section somewhere.


00:31:17.380 --> 00:31:23.820
Where is that section?


00:31:23.820 --> 00:31:24.700
>>This one, perhaps.


00:31:24.700 --> 00:31:27.320
>>But didn't get deleted.


00:31:27.320 --> 00:31:29.740
It's in the introduction page.


00:31:29.740 --> 00:31:30.900
Yeah, it's on that page.


00:31:30.900 --> 00:31:35.040
But if you maybe scroll down to the power


00:31:35.040 --> 00:31:37.080
of symbolic computation is the name of the header.


00:31:37.080 --> 00:31:37.560
>> There you go.


00:31:37.560 --> 00:31:40.960
>> So this is just sort of a bucket list


00:31:40.960 --> 00:31:45.240
of just sort of a bunch of different examples of things


00:31:45.240 --> 00:31:45.760
it can do.


00:31:45.760 --> 00:31:47.680
So just to give you an idea.


00:31:47.680 --> 00:31:50.440
And actually, you can see there also


00:31:50.440 --> 00:31:52.840
you can also see the pretty printing there as well,


00:31:52.840 --> 00:31:56.880
the Unicode pretty printing that it does.


00:31:56.880 --> 00:31:58.920
That Logitech is doing with the OpenOpus.


00:31:58.920 --> 00:32:02.560
>> Underscore printing use Unicode equals true, right?


00:32:02.560 --> 00:32:03.960
It doesn't do it by default?


00:32:03.960 --> 00:32:07.920
>> Yeah, so in the notebook,


00:32:07.920 --> 00:32:09.600
it does actually do it by default.


00:32:09.600 --> 00:32:11.520
>> Sure, but not in the terminal or the ripple.


00:32:11.520 --> 00:32:13.460
>> Yeah, in the terminal, you need to run this.


00:32:13.460 --> 00:32:15.120
Otherwise, it'll just print out


00:32:15.120 --> 00:32:18.960
like a one-dimensional string that you would get.


00:32:18.960 --> 00:32:22.180
It looks sort of like what you would input.


00:32:22.180 --> 00:32:25.120
But yeah, you can see here,


00:32:25.120 --> 00:32:27.540
it can take derivatives, take integrals.


00:32:28.820 --> 00:32:31.760
If you keep scrolling down, you can see, I think,


00:32:31.760 --> 00:32:34.260
limits and differential equations.


00:32:34.260 --> 00:32:37.620
You can solve--


00:32:37.620 --> 00:32:40.380
>>Let me talk people through just a couple of things


00:32:40.380 --> 00:32:44.180
because I think it's a little hard to understand


00:32:44.180 --> 00:32:45.140
how this might work.


00:32:45.140 --> 00:32:48.220
And the trick, I think, really, Andre,


00:32:48.220 --> 00:32:49.540
you tell me your thoughts on this,


00:32:49.540 --> 00:32:55.860
is the ability for it to define these symbols


00:32:55.860 --> 00:32:58.660
and these functions here.


00:32:58.660 --> 00:33:00.520
- Yeah, so the trick is to be able to represent


00:33:00.520 --> 00:33:02.040
the expression symbolically.


00:33:02.040 --> 00:33:06.900
So you type X plus Y and plus some function sign X,


00:33:06.900 --> 00:33:09.700
and in memory, it represents it as a tree.


00:33:09.700 --> 00:33:12.740
And it stores the expression in symbolic form.


00:33:12.740 --> 00:33:15.380
And then it has all kinds of functionality


00:33:15.380 --> 00:33:17.060
that allows you to manipulate the expression,


00:33:17.060 --> 00:33:19.900
print it, differentiate it.


00:33:19.900 --> 00:33:22.040
So when you differentiate, or let's say an expression


00:33:22.040 --> 00:33:23.380
that takes the original expression


00:33:23.380 --> 00:33:25.620
and creates a new expression, the derivative.


00:33:26.700 --> 00:33:31.460
- Right, with normal math, like pen and paper math,


00:33:31.460 --> 00:33:33.300
you don't usually define variables.


00:33:33.300 --> 00:33:34.540
Every now and then you say, you know,


00:33:34.540 --> 00:33:37.820
let X be an element of like the real number,


00:33:37.820 --> 00:33:41.300
such that whatever, but normally you just say F of X


00:33:41.300 --> 00:33:45.300
or F of T or something like that, or Y, and it just works.


00:33:45.300 --> 00:33:49.940
You needed some way in Python to allow you


00:33:49.940 --> 00:33:53.700
to write expressions like X plus two Y


00:33:53.700 --> 00:33:56.900
without Python going, I have no idea what that means, right?


00:33:56.900 --> 00:33:58.940
- Yes, that's right.


00:33:58.940 --> 00:34:01.900
So, and yes, you first have to declare what X and Y is,


00:34:01.900 --> 00:34:04.060
you declare it as a symbol, and then you can use it.


00:34:04.060 --> 00:34:07.060
We override the Python on operations like plus, minus,


00:34:07.060 --> 00:34:09.460
and that way you can construct the expression.


00:34:09.460 --> 00:34:11.380
And so what's nice about Python is that


00:34:11.380 --> 00:34:12.220
when I started with SymPy,


00:34:12.220 --> 00:34:15.380
when I was kind of investigating the idea,


00:34:15.380 --> 00:34:17.420
what's nice that Python pretty much allows you


00:34:17.420 --> 00:34:19.260
to override all these operations,


00:34:19.260 --> 00:34:21.580
and so you can write it almost like math.


00:34:21.580 --> 00:34:24.300
in exponentiation, two stars.


00:34:24.300 --> 00:34:27.140
The only caveat is that if you write,


00:34:27.140 --> 00:34:28.940
let's say one divided by two,


00:34:28.940 --> 00:34:30.820
especially, and we started in Python two,


00:34:30.820 --> 00:34:32.740
that gives you a zero, I believe.


00:34:32.740 --> 00:34:35.020
And that's very confusing from Sympy's perspective


00:34:35.020 --> 00:34:37.580
because you would like it to give


00:34:37.580 --> 00:34:40.580
the expression one over two, not zero.


00:34:40.580 --> 00:34:44.540
And because, and so I don't think there is any way still


00:34:44.540 --> 00:34:47.740
to fix that, to override this division.


00:34:47.740 --> 00:34:50.300
- At least in Python three, you get the right.


00:34:50.300 --> 00:34:52.660
At least you get a 5, but you get a 0.5 float,


00:34:52.660 --> 00:34:53.500
double precision float.


00:34:53.500 --> 00:34:54.960
- Yeah, yeah, yeah.


00:34:54.960 --> 00:34:55.800
- You don't want that.


00:34:55.800 --> 00:34:58.460
You want one divided by two as simple expression.


00:34:58.460 --> 00:35:00.580
So when you have something like that,


00:35:00.580 --> 00:35:03.920
you have to wrap the number one into an integer or S.


00:35:03.920 --> 00:35:08.160
- Yeah, or define some kind of symbol with that value


00:35:08.160 --> 00:35:10.140
and then use it like, like,


00:35:10.140 --> 00:35:10.980
- You have to convert it.


00:35:10.980 --> 00:35:14.680
- E from, you know, quadratic equation, right?


00:35:14.680 --> 00:35:16.820
You could like that kind of thing.


00:35:18.900 --> 00:35:20.660
- But yeah, so you create these symbols


00:35:20.660 --> 00:35:23.980
and then you can write simple math


00:35:23.980 --> 00:35:25.500
that looks like it's just straight Python.


00:35:25.500 --> 00:35:29.320
So you could say X and Y are symbols


00:35:29.320 --> 00:35:32.380
and then you could say something like X plus


00:35:32.380 --> 00:35:34.980
two times Y plus one.


00:35:34.980 --> 00:35:39.360
And that is not evaluated in any way.


00:35:39.360 --> 00:35:41.380
It's just becomes this, like, as you said,


00:35:41.380 --> 00:35:44.080
as tree, this expression that then you can operate on,


00:35:44.080 --> 00:35:46.900
like integrate it, take the derivative of it,


00:35:46.900 --> 00:35:49.580
find the limit of it, all those kinds of things, right?


00:35:49.580 --> 00:35:50.420
- Yes, exactly.


00:35:50.420 --> 00:35:51.860
- Yep.


00:35:51.860 --> 00:35:53.820
- Yeah, that's the basic idea.


00:35:53.820 --> 00:35:57.260
And you can use it to do any,


00:35:57.260 --> 00:36:00.060
basically any sort of math that you would normally do


00:36:00.060 --> 00:36:02.380
with that sort of expression,


00:36:02.380 --> 00:36:04.100
except you're doing it on the computer.


00:36:04.100 --> 00:36:05.380
- So cool.


00:36:05.380 --> 00:36:07.380
You can do, you know, just like a real simple example


00:36:07.380 --> 00:36:10.480
might be rational polynomials or something like that.


00:36:10.480 --> 00:36:14.500
Like if you had X squared minus one is one equation


00:36:14.500 --> 00:36:18.180
and then X plus one as another equation.


00:36:18.180 --> 00:36:20.180
You could say the first equation divided by the second


00:36:20.180 --> 00:36:22.620
and get, geez, which did I say minus,


00:36:22.620 --> 00:36:23.940
you get X minus one.


00:36:23.940 --> 00:36:24.780
- Yeah.


00:36:24.780 --> 00:36:25.600
- As the result.


00:36:25.600 --> 00:36:26.800
- Yeah, so simplification is another one


00:36:26.800 --> 00:36:29.740
where you can take something and it can figure out


00:36:29.740 --> 00:36:31.820
how to simplify it to an equivalent form


00:36:31.820 --> 00:36:35.780
that's like dividing out factors and things like that.


00:36:35.780 --> 00:36:37.380
- Yeah, okay.


00:36:37.380 --> 00:36:39.900
Yeah, these are super neat.


00:36:39.900 --> 00:36:41.180
You can do factors.


00:36:41.180 --> 00:36:44.460
So like you say, you could say like a polynomial factor.


00:36:44.460 --> 00:36:49.020
You know, one of the things, I don't know if I should point this out or maybe this should


00:36:49.020 --> 00:36:52.060
have been a warning to the whole show.


00:36:52.060 --> 00:36:59.340
If you're in high school or early college, this might be a terrible cheat sheet for homework


00:36:59.340 --> 00:37:02.620
and other types of, I mean, it's fantastic, right?


00:37:02.620 --> 00:37:07.740
If you're in an algebra course, you can do your work and then you could type this in


00:37:07.740 --> 00:37:09.380
and go, "Did I get it right?"


00:37:09.380 --> 00:37:12.460
Wham, and out it comes, especially in a notebook, right?


00:37:12.460 --> 00:37:13.460
Yeah.


00:37:13.460 --> 00:37:19.220
>> Yeah, I mean, I think that's kind of unavoidable these days.


00:37:19.220 --> 00:37:23.820
Because I mean, there's also just graphing calculators


00:37:23.820 --> 00:37:24.380
that do this.


00:37:24.380 --> 00:37:25.740
There's Wolfram Alpha.


00:37:25.740 --> 00:37:29.260
I think SymPy is a great way to do that,


00:37:29.260 --> 00:37:31.260
if you're going to do it, because now you're also


00:37:31.260 --> 00:37:33.980
learning Python, which I think would


00:37:33.980 --> 00:37:36.740
be great for someone who's a high school


00:37:36.740 --> 00:37:38.980
student or an undergraduate.


00:37:38.980 --> 00:37:42.060
Because that's an actually useful skill as well.


00:37:42.060 --> 00:37:47.020
It might be even more utilitarian in the long run


00:37:47.020 --> 00:37:49.820
than the calculus they're learning.


00:37:49.820 --> 00:37:55.100
So yeah, you can do derivatives and integrals


00:37:55.100 --> 00:37:56.180
of these equations.


00:37:56.180 --> 00:38:00.460
So you could say, integrate e to the x times sine of x plus e


00:38:00.460 --> 00:38:03.100
to the x times cosine of x.


00:38:03.100 --> 00:38:05.980
And it will give you the result, which apparently


00:38:05.980 --> 00:38:07.220
is e to the x sine of x.


00:38:07.220 --> 00:38:08.420
I used to be able to do that.


00:38:08.420 --> 00:38:09.220
I can't anymore.


00:38:09.220 --> 00:38:11.420
>>Well, you can see that the line above it,


00:38:11.420 --> 00:38:12.620
it's differentiating that.


00:38:12.620 --> 00:38:14.300
So it's just undoing the line above it.


00:38:14.300 --> 00:38:15.140
- Oh, I see.


00:38:15.140 --> 00:38:17.140
Well, that does a bit of a cheat, isn't it?


00:38:17.140 --> 00:38:18.140
(laughs)


00:38:18.140 --> 00:38:21.740
- But yeah, I mean, that's, yeah, you don't,


00:38:21.740 --> 00:38:22.820
the integration is nice


00:38:22.820 --> 00:38:24.980
'cause you don't have to remember all these,


00:38:24.980 --> 00:38:26.660
how to do all this integration by parts


00:38:26.660 --> 00:38:28.420
or whatever you would do. - Yeah, exactly.


00:38:28.420 --> 00:38:32.140
So another thing it can do is like concrete,


00:38:32.140 --> 00:38:33.740
I forgot there's like a better term for that,


00:38:33.740 --> 00:38:37.420
but integration over a range or something.


00:38:37.420 --> 00:38:41.780
So you could say integrate from like negative 10 to 20


00:38:41.780 --> 00:38:43.100
of sine of X squared,


00:38:43.100 --> 00:38:45.300
or here's an example of negative infinity


00:38:45.300 --> 00:38:46.600
to positive infinity.


00:38:46.600 --> 00:38:49.900
And it says that square root of two,


00:38:49.900 --> 00:38:53.580
radical two, radical pi over two as the answer,


00:38:53.580 --> 00:38:55.220
not like point, what is that?


00:38:55.220 --> 00:38:59.460
Point two something, something, something, something,


00:38:59.460 --> 00:39:00.740
something, I don't know.


00:39:00.740 --> 00:39:02.540
Something like that, right?


00:39:02.540 --> 00:39:05.380
It gives you the actual theoretical answer,


00:39:05.380 --> 00:39:09.480
the exact mathematical answer in symbols, which is amazing.


00:39:09.480 --> 00:39:10.900
- It is.


00:39:10.900 --> 00:39:12.940
It's amazing and it's also not easy to,


00:39:12.940 --> 00:39:13.780
so when I started to say,


00:39:13.780 --> 00:39:16.020
"Well, I knew this is not easy to program."


00:39:16.020 --> 00:39:17.860
Like, how do you program such an integrator?


00:39:17.860 --> 00:39:18.860
It's not easy.


00:39:18.860 --> 00:39:20.980
But I figured, you know, if I can at least figure,


00:39:20.980 --> 00:39:22.660
at least get the basics, you know,


00:39:22.660 --> 00:39:25.900
like be able to represent these equations at least,


00:39:25.900 --> 00:39:27.420
that would still be a huge help


00:39:27.420 --> 00:39:28.940
because sometimes the expression can be long


00:39:28.940 --> 00:39:31.020
and be able to manipulate it.


00:39:31.020 --> 00:39:33.500
And then as we were joined with, you know,


00:39:33.500 --> 00:39:37.660
So many excellent people, they contributed all the features to it.


00:39:37.660 --> 00:39:41.260
Mostly, actually, it was developed by Google Summer of Code students.


00:39:41.260 --> 00:39:46.860
And I would not be able to do that.


00:39:46.860 --> 00:39:48.540
Let's just put it that way.


00:39:48.540 --> 00:39:50.220
It's a lot of work that's behind it.


00:39:50.220 --> 00:39:54.620
Yeah, I'm looking at this.


00:39:54.620 --> 00:39:57.740
I know these concepts just on pure math are hard.


00:39:57.740 --> 00:40:00.540
And then to automate it in general, it's got to be next level.


00:40:01.500 --> 00:40:04.140
So other things you can do is like you can define a function.


00:40:04.140 --> 00:40:06.620
So here you say, here's a function called Y.


00:40:06.620 --> 00:40:10.940
And then you can say, well, what if you had the differential equation that was,


00:40:10.940 --> 00:40:14.940
you know, the second derivative of Y minus Y equals E to the T.


00:40:14.940 --> 00:40:16.320
Right.


00:40:16.320 --> 00:40:17.660
Solve that.


00:40:17.660 --> 00:40:26.620
And then sure enough, outcomes the solution for that, what the function is, which is pretty


00:40:26.620 --> 00:40:27.420
amazing.


00:40:27.420 --> 00:40:35.580
Yeah, so does things like eigenvalues from linear algebra and all kinds of stuff.


00:40:35.580 --> 00:40:38.140
Yeah, great.


00:40:38.140 --> 00:40:43.180
And then we have in Python, we have str and repr.


00:40:43.180 --> 00:40:49.660
You guys also have LaTeX, which is pretty cool, right?


00:40:49.660 --> 00:40:56.460
I just call LaTeX on a function and out it comes with like the crazy escape code LaTeX


00:40:56.460 --> 00:40:59.220
that you would need for a paper or something, right?


00:40:59.220 --> 00:41:00.460
- Mm-hmm, yep.


00:41:00.460 --> 00:41:01.540
- Yep.


00:41:01.540 --> 00:41:03.180
Yeah, and this actually, I mean,


00:41:03.180 --> 00:41:05.460
this is only even scratching the surface


00:41:05.460 --> 00:41:07.900
of what SymPy can do.


00:41:07.900 --> 00:41:12.240
So it's actually quite a large library.


00:41:12.240 --> 00:41:13.080
- Yeah.


00:41:13.080 --> 00:41:16.940
I don't wanna focus too much on just the pure math,


00:41:16.940 --> 00:41:19.180
but maybe give us a sense of like some of the things


00:41:19.180 --> 00:41:20.020
that amaze you.


00:41:20.020 --> 00:41:22.980
What do you have in mind


00:41:22.980 --> 00:41:24.980
when you're saying that kind of stuff?


00:41:24.980 --> 00:41:26.300
- That amaze me?


00:41:26.300 --> 00:41:28.180
>> Yeah.


00:41:28.180 --> 00:41:30.560
>> I mean, I think the whole thing is amazing still,


00:41:30.560 --> 00:41:31.620
even though I know how it works.


00:41:31.620 --> 00:41:33.280
And I've been working on it for a while.


00:41:33.280 --> 00:41:35.020
But just the fact that the computer


00:41:35.020 --> 00:41:37.900
can do the same sort of mathematics


00:41:37.900 --> 00:41:43.100
that you would do on a piece of paper is incredible.


00:41:43.100 --> 00:41:46.000
Some of the algorithms to do integration and stuff


00:41:46.000 --> 00:41:50.940
are also pretty interesting because they


00:41:50.940 --> 00:41:54.500
go beyond what you would learn in a calculus class.


00:41:54.500 --> 00:41:57.540
There are algorithms that can compute integrals


00:41:57.540 --> 00:42:00.980
that you would never be able to know how to compute them just


00:42:00.980 --> 00:42:05.340
using what you'd learn in a Calc 1 or a Calc 2.


00:42:05.340 --> 00:42:07.700
But those are something that you can actually implement


00:42:07.700 --> 00:42:09.300
in something like SymPy.


00:42:09.300 --> 00:42:14.820
And then SymPy will be able to do those integrals for you.


00:42:14.820 --> 00:42:18.020
Some of the features that--


00:42:18.020 --> 00:42:19.420
I mean, if you go on the website,


00:42:19.420 --> 00:42:22.300
there's a huge list of features.


00:42:22.300 --> 00:42:24.260
I think one feature that we didn't mention


00:42:24.260 --> 00:42:30.900
that's maybe worth mentioning is code generation.


00:42:30.900 --> 00:42:37.100
So code generation means that you take one of these expressions


00:42:37.100 --> 00:42:41.660
and you turn it into basically code for another language,


00:42:41.660 --> 00:42:47.540
whether that's C or Fortran or pretty much any language


00:42:47.540 --> 00:42:51.540
that you would want to translate it into.


00:42:51.540 --> 00:42:53.620
And then you can then take that expression


00:42:53.620 --> 00:42:57.660
and basically convert it into something


00:42:57.660 --> 00:43:00.660
that you could numerically evaluate very fast


00:43:00.660 --> 00:43:02.940
in whatever language you prefer to use.


00:43:02.940 --> 00:43:03.780
- Oh, okay.


00:43:03.780 --> 00:43:07.420
So you've got your notebook written in Python or something


00:43:07.420 --> 00:43:09.360
and you've come up with some expressions


00:43:09.360 --> 00:43:11.980
and you're like, I would like to just do that


00:43:11.980 --> 00:43:16.880
in Fortran or C and I don't trust myself to get it right.


00:43:16.880 --> 00:43:20.860
So just print out the syntax basically.


00:43:20.860 --> 00:43:22.860
- Yeah. - Yeah.


00:43:22.860 --> 00:43:24.860
- Go ahead, Andre.


00:43:24.860 --> 00:43:26.860
- Let's say you want to approximate some function


00:43:26.860 --> 00:43:28.860
with a polynomial


00:43:28.860 --> 00:43:30.860
so you can use SymPy to do that.


00:43:30.860 --> 00:43:32.860
And then at the end you just want the polynomial in the form


00:43:32.860 --> 00:43:34.860
that you can put in your production code


00:43:34.860 --> 00:43:36.860
whether Fortran or C.


00:43:36.860 --> 00:43:38.860
So just tell SymPy to do it and you can copy and paste it


00:43:38.860 --> 00:43:40.860
and you know it's correct.


00:43:40.860 --> 00:43:42.860
Assuming there is no bug in SymPy.


00:43:42.860 --> 00:43:44.860
- Yeah, sure.


00:43:44.860 --> 00:43:48.860
I suspect it's probably


00:43:48.860 --> 00:43:51.100
- Pretty straightforward.


00:43:51.100 --> 00:43:53.820
Once you've got the expression to break it down into,


00:43:53.820 --> 00:43:55.800
you know, this is a multiply,


00:43:55.800 --> 00:43:57.420
here's where the parentheses that group it


00:43:57.420 --> 00:43:59.760
in the expression tree, but--


00:43:59.760 --> 00:44:03.240
- Yeah, there's a few places where it's like,


00:44:03.240 --> 00:44:05.440
okay, we need to make sure we get the semantics.


00:44:05.440 --> 00:44:06.880
The semantics might be a little different


00:44:06.880 --> 00:44:11.880
between like C and Python or something like that.


00:44:11.880 --> 00:44:15.240
So we need to make sure we sort of translate that correctly.


00:44:15.240 --> 00:44:18.840
But yeah, it's, I mean, in principle, it's not that hard,


00:44:18.840 --> 00:44:23.560
but I mean, it's also not something you want to do by hand either, because


00:44:23.560 --> 00:44:27.640
Yeah, it's super error prone if you were to try to do it by hand. Yeah. Yeah.


00:44:27.640 --> 00:44:31.240
It sounds like a great feature. That's that's quite neat.


00:44:31.240 --> 00:44:36.840
Maybe we could talk just a little bit internally, Andre, about


00:44:36.840 --> 00:44:39.480
how you accomplish this.


00:44:39.480 --> 00:44:42.840
Yeah, like how I started it.


00:44:43.400 --> 00:44:45.080
Well, just like how does it work?


00:44:45.080 --> 00:44:52.280
If I give it an expression of e to the x cosine x,


00:44:52.280 --> 00:44:55.400
and I say integrate that, where do you even start?


00:44:55.400 --> 00:44:57.480
Yeah, exactly.


00:44:57.480 --> 00:44:59.400
Well, the integration, I guess, I don't know,


00:44:59.400 --> 00:45:00.280
is more detailed.


00:45:00.280 --> 00:45:01.880
There's a couple of different algorithms.


00:45:01.880 --> 00:45:03.400
But I'll tell you the basic idea.


00:45:03.400 --> 00:45:07.800
The first thing you do, you search,


00:45:07.800 --> 00:45:09.240
how do you do symbolic integration?


00:45:09.240 --> 00:45:12.280
And there is this famous algorithm called RISH,


00:45:12.280 --> 00:45:17.960
I think, algorithm. So you kind of start studying and then you realize, oh, that's like multiple


00:45:17.960 --> 00:45:23.240
years of worth of work to implement this. And it's kind of fragile and doesn't always work.


00:45:23.240 --> 00:45:31.160
And Mathematica, they as a company, they managed to do that. It's a lot of effort, a lot of work,


00:45:31.160 --> 00:45:35.960
and they have to invest in a large teams of people, test it carefully and so on. But


00:45:37.000 --> 00:45:43.000
turns out that in practice there are other approaches and it turns out that you can


00:45:43.000 --> 00:45:49.560
integrate a lot you know wide classes of functions just by implementing an algorithm that works for


00:45:49.560 --> 00:45:54.280
example for a polynomial it's easy anybody yeah you do it right and then you can add some


00:45:54.280 --> 00:45:58.120
trigonometric functions so you kind of implement algorithm for that then you kind of build your


00:45:58.120 --> 00:46:03.720
way up it turns out when you do that you can make very useful in practice maybe it's not as


00:46:04.520 --> 00:46:08.920
powerful as mathematics is, but it's very helpful. So that's how we started.


00:46:08.920 --> 00:46:15.320
And then once you have the rules, I mean, first, second, third year of calculus,


00:46:15.320 --> 00:46:22.920
there's in math, there is a ton of creativity in the calculus classes. It's a lot of like,


00:46:22.920 --> 00:46:27.720
just today we're doing integration by parts. Today we're doing like integration of stuff


00:46:27.720 --> 00:46:31.400
that's divided or what, you know, like there's a, there's set algorithms that they tell you to


00:46:31.400 --> 00:46:34.040
and once you get the basics, it seems like,


00:46:34.040 --> 00:46:35.680
I guess you could compose them.


00:46:35.680 --> 00:46:37.480
- Yeah, so that was kind of my initial idea.


00:46:37.480 --> 00:46:40.560
Let's just kind of do stuff that we know how to do.


00:46:40.560 --> 00:46:42.160
And it's kind of straightforward,


00:46:42.160 --> 00:46:47.360
but then kind of the engineering part comes to it as well,


00:46:47.360 --> 00:46:48.440
because you don't want,


00:46:48.440 --> 00:46:50.900
you want things to always work and quickly,


00:46:50.900 --> 00:46:51.800
and if it cannot be done,


00:46:51.800 --> 00:46:52.840
you would like to know the answer,


00:46:52.840 --> 00:46:54.440
this cannot be done quickly,


00:46:54.440 --> 00:46:58.080
not to wait a couple hours until it tries all the formulas.


00:46:58.080 --> 00:47:00.780
And so then it just becomes a lot of,


00:47:00.780 --> 00:47:05.900
not kind of I would say engineering decisions how to make this all work and I think we are still


00:47:05.900 --> 00:47:12.620
not done yet. I think there are a couple I would say promising approaches. One approach is


00:47:12.620 --> 00:47:19.740
a certain professor I think or Italian professor I think in Canada he has he figured out how to


00:47:19.740 --> 00:47:25.980
take all these rules how to integrate functions and compose them into just a decision tree. So


00:47:25.980 --> 00:47:29.780
So you give it an expression and then it just figures out exactly as you said,


00:47:29.780 --> 00:47:30.940
is it the polynomial?


00:47:30.940 --> 00:47:32.580
Is it like dividing and so on?


00:47:32.580 --> 00:47:38.780
And then the decision tree tells it exactly how to go about it to give you the final formula, the integral.


00:47:38.780 --> 00:47:39.180
Okay.


00:47:39.180 --> 00:47:41.980
Here's the small formula you apply to it or whatever.


00:47:41.980 --> 00:47:50.100
So you take all these 5000 formulas and then it takes them and actually uses Mathematica and he composes those into a decision tree.


00:47:50.100 --> 00:47:53.540
And then it prints the decision tree as, for example, Python code and so on.


00:47:54.140 --> 00:47:57.120
And we still haven't, well, actually, so we have a module for that.


00:47:57.120 --> 00:48:00.960
And it's something that what I like about this approach is that it's quick.


00:48:00.960 --> 00:48:01.960
In principle, it's quick.


00:48:01.960 --> 00:48:04.680
You just go through a decision tree and it gives you a formula


00:48:04.680 --> 00:48:05.720
or it says it cannot be done.


00:48:05.720 --> 00:48:12.020
and I would like, but you know, there are all kinds of practical issues.


00:48:12.020 --> 00:48:16.000
The trees and so when you encode it in Python, it takes forever to import.


00:48:16.000 --> 00:48:17.140
And so on.


00:48:17.140 --> 00:48:20.200
So we are still kind of struggling with these issues, but it just gives you an


00:48:20.200 --> 00:48:21.860
idea of what kind of issues are engineering.


00:48:21.860 --> 00:48:23.180
I would say issues are involved in.


00:48:23.180 --> 00:48:23.920
Yeah.


00:48:24.040 --> 00:48:25.280
- That's pretty wild.


00:48:25.280 --> 00:48:27.840
Do you, I mean, have you thought of,


00:48:27.840 --> 00:48:29.620
or are you using things like Cython


00:48:29.620 --> 00:48:32.120
or other types of speed up type things?


00:48:32.120 --> 00:48:33.060
- Yes.


00:48:33.060 --> 00:48:35.080
Yeah, I spent, so maybe 10 years ago,


00:48:35.080 --> 00:48:36.580
I spent a lot of time investigating


00:48:36.580 --> 00:48:38.240
how to make SymPy faster.


00:48:38.240 --> 00:48:39.880
SymPy is great, it's in pure Python,


00:48:39.880 --> 00:48:41.040
it's easy to contribute to,


00:48:41.040 --> 00:48:43.080
and for many things, it's amazing.


00:48:43.080 --> 00:48:44.900
Just works and that's all you need.


00:48:44.900 --> 00:48:48.200
But sometimes you need either larger calculation


00:48:48.200 --> 00:48:51.040
or a lot of calculations, and it's not fast enough.


00:48:51.040 --> 00:48:51.960
So how to speed it up?


00:48:51.960 --> 00:48:56.200
So we investigated just pure C, Cython,


00:48:56.200 --> 00:48:59.640
all kinds of tricks in Python itself to speed it up.


00:48:59.640 --> 00:49:03.000
Eventually, that kind of led to the SimEngine project.


00:49:03.000 --> 00:49:05.000
I decided, let's just use C++.


00:49:05.000 --> 00:49:06.840
It's the only tool that I know


00:49:06.840 --> 00:49:08.860
that actually can deliver the performance


00:49:08.860 --> 00:49:12.780
and kind of maintaining a bigger project.


00:49:12.780 --> 00:49:16.720
And so that's SimEngine, and then we have Python wrappers,


00:49:16.720 --> 00:49:18.540
and then SymPy can use it.


00:49:18.540 --> 00:49:20.240
So there are modules in SymPy,


00:49:20.240 --> 00:49:23.740
such as the dynamic...


00:49:23.740 --> 00:49:27.200
the classical mechanical module


00:49:27.200 --> 00:49:30.500
that allows you to simulate solid-body physics.


00:49:30.500 --> 00:49:35.740
It's able to use Image under the hood, so it gets much, much faster.


00:49:35.740 --> 00:49:40.020
Okay, interesting. So this is a C++ project,


00:49:40.020 --> 00:49:44.380
but it has Python wrappers for easy Python integration


00:49:44.380 --> 00:49:46.380
with SymPy and other things.


00:49:46.380 --> 00:49:48.380
Yeah, that's cool.


00:49:50.060 --> 00:49:54.740
I think that kind of summarizes a lot of scientific Python.


00:49:54.740 --> 00:49:58.860
There's a really great API, and when you ask it to do things,


00:49:58.860 --> 00:50:01.940
it takes the data and hands it off to some C layer that actually does it,


00:50:01.940 --> 00:50:03.940
or Rust or something like that, right?


00:50:03.940 --> 00:50:08.500
Yes. And it's not just writing it in C++.


00:50:08.500 --> 00:50:11.780
There are other libraries that are also in C++,


00:50:11.780 --> 00:50:14.020
but to make it really fast, one has to spend the time


00:50:14.020 --> 00:50:17.220
and figure out how to represent the expression in memory,


00:50:17.220 --> 00:50:19.220
how to allocate the memory,


00:50:19.220 --> 00:50:21.220
how to...


00:50:21.220 --> 00:50:24.020
So we have to make reference counter pointers, for example.


00:50:24.020 --> 00:50:26.420
So that's the design I chose.


00:50:26.420 --> 00:50:29.860
How to make the reference counter pointer as fast as possible,


00:50:29.860 --> 00:50:30.980
things like that.


00:50:30.980 --> 00:50:33.300
How to make sure that you can actually maintain it


00:50:33.300 --> 00:50:35.300
so that it gives you, if you make a mistake,


00:50:35.300 --> 00:50:37.700
it doesn't give you a sec fault, but some kind of a...


00:50:37.700 --> 00:50:40.500
In debug mode, at least, some kind of ways to debug it, right?


00:50:40.500 --> 00:50:44.740
So there's all kinds of engineering decisions behind the scenes.


00:50:44.740 --> 00:50:47.240
I asked it to solve this and it just went poof and went away.


00:50:47.240 --> 00:50:49.240
Like I said, something means something.


00:50:49.240 --> 00:50:51.240
Yeah, so we don't want one.


00:50:51.240 --> 00:50:53.740
But anyway, so the SimEngine works.


00:50:53.740 --> 00:50:58.740
It contains kind of like the core, level of the core of SimPy.


00:50:58.740 --> 00:51:02.740
Is this what I would, if I go pip install SimPy, do I get this?


00:51:02.740 --> 00:51:06.740
Or do I have to do something special to like swap out the computation engine with this?


00:51:06.740 --> 00:51:08.740
You have to install it as a separate library.


00:51:08.740 --> 00:51:12.740
So if you do just pip install SimPy by default, it only installs SimPy.


00:51:12.740 --> 00:51:15.700
but you can do pip install SymEngine.


00:51:15.700 --> 00:51:18.180
I use Conda, so you can do Conda install SymEngine.


00:51:18.180 --> 00:51:20.900
That installs SymEngine as a library,


00:51:20.900 --> 00:51:23.620
and in Python, you do import SymEngine,


00:51:23.620 --> 00:51:25.860
and then you use it kind of like SymPy,


00:51:25.860 --> 00:51:30.100
and SymPy can also optionally use it kind of under the hood.


00:51:30.100 --> 00:51:31.540
- Okay.


00:51:31.540 --> 00:51:33.460
Yeah, this looks really neat.


00:51:33.460 --> 00:51:38.580
One of the things I wanted to touch on here,


00:51:38.580 --> 00:51:41.220
and at the top right of the page,


00:51:41.220 --> 00:51:43.180
if I go just to the Senpai page,


00:51:43.180 --> 00:51:45.260
it says try it with Senpai Gamma.


00:51:45.260 --> 00:51:48.700
And so maybe we could sort of close out


00:51:48.700 --> 00:51:52.060
the conversation a bit with just poking around with this


00:51:52.060 --> 00:51:54.400
and then maybe highlighting some projects that use it.


00:51:54.400 --> 00:51:55.620
So for example, it says,


00:51:55.620 --> 00:51:57.980
oh, you could just try some random example.


00:51:57.980 --> 00:52:01.400
And it's got like algebraic things I could do.


00:52:01.400 --> 00:52:04.340
So it says, you know, polynomial divisor,


00:52:04.340 --> 00:52:05.340
I'm coming in and copy this.


00:52:05.340 --> 00:52:09.380
And if I go, there's a little calculator like thing


00:52:09.380 --> 00:52:14.380
at the top where I go hit equals and it will go and run that in.


00:52:14.380 --> 00:52:17.300
>> The polynomial division in this case it looks like.


00:52:17.300 --> 00:52:20.140
>> Yeah, like what are the divisors of this thing, right?


00:52:20.140 --> 00:52:21.180
Something like that.


00:52:21.180 --> 00:52:25.020
>> Yeah, so this is sort of our little version of Wolfram Alpha,


00:52:25.020 --> 00:52:27.060
but using SymPy under the hood.


00:52:27.060 --> 00:52:29.940
It's not quite as powerful as Wolfram Alpha.


00:52:29.940 --> 00:52:35.380
We don't support like natural language input, that sort of thing.


00:52:35.380 --> 00:52:40.080
But yeah, you can kind of get an idea of the sorts of things


00:52:40.080 --> 00:52:41.760
SymPy can do here.


00:52:41.760 --> 00:52:43.960
Maybe one of the interesting ones, if you scroll down


00:52:43.960 --> 00:52:48.040
a little bit and click on one of the integral,


00:52:48.040 --> 00:52:50.280
the one that says get steps for integrals.


00:52:50.280 --> 00:52:51.220
Yeah, how about this?


00:52:51.220 --> 00:52:54.920
I am a big fan of E. There's a whole book called


00:52:54.920 --> 00:52:56.160
E, the Story of a Number.


00:52:56.160 --> 00:52:57.640
Have you guys read it?


00:52:57.640 --> 00:52:58.720
No, I haven't heard of it.


00:52:58.720 --> 00:52:59.240
You haven't?


00:52:59.240 --> 00:53:01.040
E, the Story of a Number is a great book.


00:53:01.040 --> 00:53:02.920
It's about Euler and all that stuff.


00:53:02.920 --> 00:53:04.920
OK, yeah, so this one says--


00:53:04.920 --> 00:53:09.800
- Integral e to the x over one plus e to the two x, right?


00:53:09.800 --> 00:53:12.200
- Yeah, so if you scroll down here,


00:53:12.200 --> 00:53:18.960
hopefully you should see something that says, see steps.


00:53:18.960 --> 00:53:23.040
- All right, yeah, I see under the derivative, for example.


00:53:23.040 --> 00:53:24.480
Yeah, that was pretty interesting.


00:53:24.480 --> 00:53:26.120
I don't know if this is the one that has steps,


00:53:26.120 --> 00:53:29.040
but I saw it in other places.


00:53:29.040 --> 00:53:30.640
- Yeah, maybe that's, maybe this example


00:53:30.640 --> 00:53:31.560
is not working right now.


00:53:31.560 --> 00:53:33.720
- Yeah, yeah, there's some, here, let's do,


00:53:33.720 --> 00:53:38.360
- Probably the differentiation of something might be,


00:53:38.360 --> 00:53:39.640
I bet it's got some steps for that,


00:53:39.640 --> 00:53:43.040
but that was part of what I was talking about with the cheat


00:53:43.040 --> 00:53:44.540
and I don't mean that in a negative way,


00:53:44.540 --> 00:53:48.880
but like it will show you the steps


00:53:48.880 --> 00:53:51.040
as if it was written out in a textbook


00:53:51.040 --> 00:53:55.040
of like this one right here, like, look at this.


00:53:55.040 --> 00:53:56.400
You're gonna apply the quotient rule,


00:53:56.400 --> 00:54:00.020
which is DX of X over G of X equals this.


00:54:00.020 --> 00:54:01.080
And then you're gonna apply this.


00:54:01.080 --> 00:54:04.920
I mean, this is amazing.


00:54:04.920 --> 00:54:13.120
- Yeah, well, I mean, I think it's, you know,


00:54:13.120 --> 00:54:16.760
it's instructive, it's not just cheating.


00:54:16.760 --> 00:54:17.800
- No, of course it's not.


00:54:17.800 --> 00:54:19.280
And I do think it's really instructive


00:54:19.280 --> 00:54:23.920
because it's one thing to just go take a function


00:54:23.920 --> 00:54:26.840
or an expression and say, take the derivative of this.


00:54:26.840 --> 00:54:29.800
And it says, great, it's this crazy thing.


00:54:29.800 --> 00:54:31.960
Like how was I supposed to know it was like the tan


00:54:31.960 --> 00:54:35.440
of the cotangent of X or like something like that, right?


00:54:35.440 --> 00:54:36.920
But if it says, you know, like, look,


00:54:36.920 --> 00:54:39.080
here's how we got there.


00:54:39.080 --> 00:54:41.800
That's, yeah, that's very educational.


00:54:41.800 --> 00:54:43.200
- Yeah, so it's not,


00:54:43.200 --> 00:54:48.240
many parts of SymPy don't work like this


00:54:48.240 --> 00:54:50.520
because sort of the underlying algorithms


00:54:50.520 --> 00:54:53.480
don't really work the same way that you would do it by hand.


00:54:53.480 --> 00:54:56.200
But there are some that basically work the same way


00:54:56.200 --> 00:54:59.400
you would do it by hand, like differentiation as an example.


00:54:59.400 --> 00:55:03.140
So we can sort of extract the steps and show them to you.


00:55:03.140 --> 00:55:06.540
- Yeah, this is great.


00:55:06.540 --> 00:55:09.300
I'll put this explanation example into the show notes


00:55:09.300 --> 00:55:12.160
so people can come back and check it out.


00:55:12.160 --> 00:55:14.940
But gamma.sympi.org and then just choose


00:55:14.940 --> 00:55:17.140
some of the examples is really how to do it.


00:55:17.140 --> 00:55:17.980
And it's how it gets there.


00:55:17.980 --> 00:55:20.240
So very nice.


00:55:20.240 --> 00:55:28.060
Let's wrap this up by going to sympi.org


00:55:29.100 --> 00:55:31.840
And then on sympi.org, if you go just down a little bit,


00:55:31.840 --> 00:55:35.580
there's projects using SymPy that are,


00:55:35.580 --> 00:55:38.400
they all sound super interesting to me.


00:55:38.400 --> 00:55:42.180
You've got like ChemPy, a package for chemistry in Python,


00:55:42.180 --> 00:55:46.100
EinsteinPy for symbolic numeric, for general relativity.


00:55:46.100 --> 00:55:49.620
Are there any of these that you think are particularly neat


00:55:49.620 --> 00:55:51.660
or stand out to you, you wanna give a shout out to?


00:55:51.660 --> 00:55:52.740
Either of you?


00:55:52.740 --> 00:55:54.320
- Oh yeah, all of them.


00:55:54.320 --> 00:55:55.940
But I like the PyDi, for example.


00:55:55.940 --> 00:55:58.980
It's a very nice package for, you can--


00:55:58.980 --> 00:56:01.400
- Pi dies and dynamics.


00:56:01.400 --> 00:56:05.920
- So you can, it allows you to simulate,


00:56:05.920 --> 00:56:09.420
get kind of like a robot or pendulum,


00:56:09.420 --> 00:56:12.060
like double pendulum, you just kind of tell it exactly


00:56:12.060 --> 00:56:14.820
the relations of the body, and then it allows you to write,


00:56:14.820 --> 00:56:17.780
and then Pi die can derive the equations of motion.


00:56:17.780 --> 00:56:21.420
And those equations get extremely complicated real quick.


00:56:21.420 --> 00:56:25.020
Try triple pendulum, it just gets very complicated.


00:56:25.020 --> 00:56:28.580
Pi die can derive the equations for you correctly.


00:56:28.580 --> 00:56:31.440
And so it's a neat project.


00:56:31.440 --> 00:56:34.340
- Yeah, that one's really cool.


00:56:34.340 --> 00:56:36.060
The chem pi kind of stands out for me


00:56:36.060 --> 00:56:37.880
'cause I've always loved chemistry.


00:56:37.880 --> 00:56:42.700
Yeah, any others that you wanna give a shout out to?


00:56:42.700 --> 00:56:47.260
- Well, I guess one that I'll mention here actually


00:56:47.260 --> 00:56:48.500
it's listed as a Sage.


00:56:48.500 --> 00:56:52.340
So Sage is something that a lot of people might know


00:56:52.340 --> 00:56:56.060
as sort of an alternative computer algebra system.


00:56:56.060 --> 00:56:58.540
>> Yeah, I've actually had William Stein on the show


00:56:58.540 --> 00:57:02.260
to talk about it as well from SageMath and--


00:57:02.260 --> 00:57:05.660
>> Yeah, so SageSort integrates a lot of libraries,


00:57:05.660 --> 00:57:06.900
including SymPy itself.


00:57:06.900 --> 00:57:08.260
You can see SymPy is listed there


00:57:08.260 --> 00:57:11.100
on the front page of their website.


00:57:11.100 --> 00:57:14.860
So if you use Sage, there's a chance


00:57:14.860 --> 00:57:17.900
that you're actually just using SymPy under the hood.


00:57:17.900 --> 00:57:24.020
So that's one that I like.


00:57:25.060 --> 00:57:30.380
A lot of these are making use of that cogeneration concept


00:57:30.380 --> 00:57:32.700
that I talked about, where they're basically


00:57:32.700 --> 00:57:36.140
sort of modeling whatever chemistry or dynamics


00:57:36.140 --> 00:57:39.820
in InSympy, and then taking that expression


00:57:39.820 --> 00:57:42.740
and turning it into something that they can numerically


00:57:42.740 --> 00:57:44.740
evaluate.


00:57:44.740 --> 00:57:45.940
Yeah.


00:57:45.940 --> 00:57:50.580
It looks like maybe some quantum computing stuff here.


00:57:50.580 --> 00:57:51.740
All right, great.


00:57:51.740 --> 00:57:52.740
Now, these are all cool.


00:57:52.740 --> 00:57:56.300
and I think probably seeing some uses of it,


00:57:56.300 --> 00:57:58.940
might give people ideas for their own projects.


00:57:58.940 --> 00:58:01.900
Let's wrap this up, this conversation up,


00:58:01.900 --> 00:58:06.820
just to talk about maybe bridging the gap


00:58:06.820 --> 00:58:10.620
or bridging the world of computational stuff,


00:58:10.620 --> 00:58:14.420
symbolic stuff, and then this numerical side, right?


00:58:14.420 --> 00:58:17.100
So I've gone through and I've said,


00:58:17.100 --> 00:58:18.940
here's some complex function,


00:58:18.940 --> 00:58:20.020
and maybe here's another one,


00:58:20.020 --> 00:58:24.020
and I'm going to combine them through whatever in some way,


00:58:24.020 --> 00:58:27.140
and then now generate me a second derivative,


00:58:27.140 --> 00:58:31.340
or whatever it is I need, or integrate it.


00:58:31.340 --> 00:58:33.020
I've now got a new expression.


00:58:33.020 --> 00:58:35.660
Can I somehow take that and turn it


00:58:35.660 --> 00:58:38.900
into something I can call as a Python function?


00:58:38.900 --> 00:58:41.460
Like, here's a number, what's the answer, effectively?


00:58:41.460 --> 00:58:44.140
Or here's a NumPy array, give me the evaluation


00:58:44.140 --> 00:58:45.380
across the NumPy array?


00:58:45.380 --> 00:58:47.180
Yeah, so there's a function called


00:58:47.180 --> 00:58:51.880
LambdaPhi, that's L-A-M-B-D-A-F-Y,


00:58:51.880 --> 00:58:55.460
which basically does exactly what you said.


00:58:55.460 --> 00:58:59.260
It takes an expression and it turns it into a function


00:58:59.260 --> 00:59:01.860
that you can evaluate with NumPy.


00:59:01.860 --> 00:59:06.020
So yeah, the workflow is basically


00:59:06.020 --> 00:59:07.140
exactly what you described.


00:59:07.140 --> 00:59:11.220
You use SimPy, derive whatever it is you're doing


00:59:11.220 --> 00:59:14.380
using the mathematics of your problem.


00:59:14.380 --> 00:59:16.980
And then you put that inside of LambdaPhi


00:59:16.980 --> 00:59:20.260
And now you have something that you can actually pass


00:59:20.260 --> 00:59:25.260
your data to with NumPy and evaluate it numerically.


00:59:25.260 --> 00:59:28.340
- Nice, that's awesome.


00:59:28.340 --> 00:59:31.660
Does it effectively use that code generation thing


00:59:31.660 --> 00:59:32.500
you were talking about?


00:59:32.500 --> 00:59:33.620
- Yeah, so under the hood,


00:59:33.620 --> 00:59:38.620
it's basically generating code for NumPy.


00:59:38.620 --> 00:59:39.780
- Okay, yeah.


00:59:39.780 --> 00:59:42.860
- Yeah, so I mean, you can think of NumPy itself


00:59:42.860 --> 00:59:43.740
as sort of a language.


00:59:43.740 --> 00:59:46.900
It's got its own set of functions


00:59:46.900 --> 00:59:47.600
>> Right, right.


00:59:47.600 --> 00:59:51.160
Instead of looping, you do sort of vector operations


00:59:51.160 --> 00:59:54.400
and things like that, which you'd want it to do that.


00:59:54.400 --> 00:59:56.200
>> Yeah.


00:59:56.200 --> 00:59:59.640
There are other functions which you can do to--


00:59:59.640 --> 01:00:02.680
instead of calling numpy, if you want to call it through C


01:00:02.680 --> 01:00:06.360
as well, there's options for that as well.


01:00:06.360 --> 01:00:09.160
But yeah, that lambda phi is sort of the big one


01:00:09.160 --> 01:00:11.920
that you need to know if you want to do that.


01:00:11.920 --> 01:00:16.560
>> OK, because to me, that seems like a really important bridge.


01:00:16.560 --> 01:00:19.960
I've got this idea, here's my theoretical equations.


01:00:19.960 --> 01:00:23.920
But at some point, I want to evaluate it and make


01:00:23.920 --> 01:00:28.680
the computer generate a graph based on these numbers


01:00:28.680 --> 01:00:31.040
or something, right?


01:00:31.040 --> 01:00:33.240
Yeah, definitely.


01:00:33.240 --> 01:00:35.680
Cool, well, good work on this project, you guys.


01:00:35.680 --> 01:00:37.360
It's pretty amazing.


01:00:37.360 --> 01:00:44.360
And that explanation thing, Aaron, you had me pull out,


01:00:44.360 --> 01:00:45.720
that's really cool.


01:00:45.720 --> 01:00:48.760
how much it will say, these are the algorithms we applied


01:00:48.760 --> 01:00:51.120
and here's the little lesson to take from


01:00:51.120 --> 01:00:53.640
why this makes sense here and so on.


01:00:53.640 --> 01:00:58.440
That's way better than just some sort of numerical integral


01:00:58.440 --> 01:01:02.800
like you gave me this function and it's 7.2 is the answer.


01:01:02.800 --> 01:01:05.480
Like, well, great, but what do I do with that, right?


01:01:05.480 --> 01:01:09.320
- Yeah.


01:01:09.320 --> 01:01:12.160
- Yeah, so maybe people could use it as a teaching tool,


01:01:12.160 --> 01:01:13.920
assuming instead of--


01:01:13.920 --> 01:01:15.120
- Yeah, there are people who use it


01:01:15.120 --> 01:01:17.000
in the classrooms, definitely.


01:01:17.000 --> 01:01:18.400
- Sure.


01:01:18.400 --> 01:01:19.240
Yeah, yeah.


01:01:19.240 --> 01:01:21.720
All right, well, before we're done,


01:01:21.720 --> 01:01:24.720
let me ask you both the final two questions briefly.


01:01:24.720 --> 01:01:28.520
If you've got some kind of notable package,


01:01:28.520 --> 01:01:30.200
maybe it's not the most popular thing,


01:01:30.200 --> 01:01:32.800
but you know some Python package that's awesome


01:01:32.800 --> 01:01:34.440
that needs a shout out.


01:01:34.440 --> 01:01:36.400
There are probably a lot on this page already


01:01:36.400 --> 01:01:37.540
and you've already given some,


01:01:37.540 --> 01:01:40.520
but anything you wanna just call out real quick?


01:01:43.820 --> 01:01:48.820
- Well, so perhaps unrelated to SymPy a little bit, but--


01:01:48.820 --> 01:01:51.220
- Yeah, it can be unrelated, anything.


01:01:51.220 --> 01:01:52.060
- Yeah.


01:01:52.060 --> 01:01:58.320
Well, I'd have to say one of my favorite packages


01:01:58.320 --> 01:02:02.420
that I use is this testing library called Hypothesis.


01:02:02.420 --> 01:02:05.820
I'd actually like to make use of it in SymPy.


01:02:05.820 --> 01:02:09.020
We aren't using it right now, but I'd like to.


01:02:09.020 --> 01:02:11.540
But if you haven't used it before,


01:02:11.540 --> 01:02:16.540
the idea, it sort of flips the idea of how you do tests


01:02:16.540 --> 01:02:17.900
on its head a little bit.


01:02:17.900 --> 01:02:21.400
Instead of sort of coming up with a bunch of examples


01:02:21.400 --> 01:02:25.380
and sort of testing that your function does the right thing


01:02:25.380 --> 01:02:28.580
on different inputs, you just sort of tell it


01:02:28.580 --> 01:02:31.660
what your function should do, and then it takes care


01:02:31.660 --> 01:02:33.660
of the job of generating examples.


01:02:33.660 --> 01:02:37.980
And the end result is that you end up testing a lot more


01:02:37.980 --> 01:02:40.380
of your code than you would with a normal test


01:02:40.380 --> 01:02:44.420
and you end up with much more robust code as a result.


01:02:44.420 --> 01:02:45.720
So I recommend checking it out.


01:02:45.720 --> 01:02:46.960
It's called Hypothesis.


01:02:46.960 --> 01:02:49.260
I don't know if you've had Hypothesis on this podcast.


01:02:49.260 --> 01:02:51.580
- I have, it's been quite a while.


01:02:51.580 --> 01:02:53.320
It's been three or four years at least,


01:02:53.320 --> 01:02:55.800
but yeah, it's a very neat project


01:02:55.800 --> 01:02:57.600
and I'm glad to see it's still going strong.


01:02:57.600 --> 01:02:58.700
I hear a lot about it.


01:02:58.700 --> 01:03:01.280
Andre?


01:03:01.280 --> 01:03:03.860
- Oh, I was gonna say,


01:03:03.860 --> 01:03:06.400
do you want a Python package or any package?


01:03:06.400 --> 01:03:09.300
- Python, if you got one, if not, we can fall back to any.


01:03:09.300 --> 01:03:12.300
- Yeah, I was gonna actually, I put this also,


01:03:12.300 --> 01:03:15.100
I also discovered it kind of actually a little recently.


01:03:15.100 --> 01:03:19.520
Yeah, I recommend people to check it out.


01:03:19.520 --> 01:03:22.420
- Which one, sorry?


01:03:22.420 --> 01:03:23.940
- Oh, the hypothesis.


01:03:23.940 --> 01:03:25.460
- Oh yeah, sure.


01:03:25.460 --> 01:03:28.780
And I did talk about it way back in the day.


01:03:28.780 --> 01:03:33.780
This is 2016, had David McIver on to talk about it.


01:03:33.780 --> 01:03:36.620
So that was cool.


01:03:36.620 --> 01:03:38.300
All right, and then final question,


01:03:38.300 --> 01:03:42.100
If you're gonna write some code, some Python code,


01:03:42.100 --> 01:03:43.560
what editor do you use?


01:03:43.560 --> 01:03:46.940
- I use Emacs.


01:03:46.940 --> 01:03:48.140
- Emacs, right on.


01:03:48.140 --> 01:03:49.620
- And I use Beam.


01:03:49.620 --> 01:03:52.180
- Oh, and you guys still get along?


01:03:52.180 --> 01:03:53.620
- Yeah, of course.


01:03:53.620 --> 01:03:55.700
- No, just teasing, that's awesome.


01:03:55.700 --> 01:03:57.740
All right, well, thanks so much for being here.


01:03:57.740 --> 01:03:58.980
You know, final call to action,


01:03:58.980 --> 01:04:01.020
people are excited to get started with SymPy.


01:04:01.020 --> 01:04:01.860
Like, what do they do?


01:04:01.860 --> 01:04:02.680
How do they get started?


01:04:02.680 --> 01:04:03.520
Where do they go?


01:04:05.100 --> 01:04:10.380
Well, so the easiest way is if you go to SymPy.org,


01:04:10.380 --> 01:04:14.220
like you said, you can try it online.


01:04:14.220 --> 01:04:16.860
There's also a link there to download it.


01:04:16.860 --> 01:04:25.020
Yeah, otherwise, I would say if you really want to dive in,


01:04:25.020 --> 01:04:27.660
you can join our mailing list.


01:04:27.660 --> 01:04:29.380
Or you can follow us on Twitter.


01:04:29.380 --> 01:04:30.500
We're @SymPy.


01:04:30.500 --> 01:04:35.500
And yeah, basically the easiest way to get it


01:04:35.500 --> 01:04:38.760
is to just pip install SymPy or condo install SymPy


01:04:38.760 --> 01:04:40.160
and you'll have it.


01:04:40.160 --> 01:04:41.440
- Nice, Andre?


01:04:41.440 --> 01:04:44.680
- Yeah, that's symengine.org


01:04:44.680 --> 01:04:48.460
or symengine.org if you like the C++ version.


01:04:48.460 --> 01:04:50.780
- Nice, and you have the tutorials that I highlighted,


01:04:50.780 --> 01:04:51.700
I'll link in the show notes


01:04:51.700 --> 01:04:54.100
so that you can go through on sympi.org as well.


01:04:54.100 --> 01:04:57.880
Fantastic, well, really nice work.


01:04:57.880 --> 01:05:00.600
I'd love to see you bringing this to all the developers


01:05:00.600 --> 01:05:02.120
and data scientists and stuff.


01:05:02.120 --> 01:05:06.200
So thanks for being here and sharing Sempai.


01:05:06.200 --> 01:05:08.080
- Thank you for having us.


01:05:08.080 --> 01:05:08.920
- You bet.


01:05:08.920 --> 01:05:09.740
- Yeah, thank you so much.

